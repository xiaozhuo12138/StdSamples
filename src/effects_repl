///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Lua REPL
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "LuaJIT.hpp"
LuaJIT * lua;

int test(lua_State *L)
{
    printf("test\n");
    return 0;
}

bool is_cmd(const char * cmd, const char * key)
{
    return !strcmp(cmd,key);
}

void strupr(char * s)
{
    for(size_t i = 0; i < strlen(s); i++)
        s[i] = toupper(s[i]);
}
int setValueCmd(lua_State *L)
{
    char cmd[128];
    const char * cmdS = lua_tostring(L,-2);
    strcpy(cmd,cmdS);
    strupr((char*)cmd);
    
    
    float val = lua_tonumber(L,-1);
    if(is_cmd(cmd,"FREQ")) Freq = val;
    if(is_cmd(cmd,"VELOCITY")) Vel = val;
    if(is_cmd(cmd,"CUTOFF")) Fcutoff = val;
    if(is_cmd(cmd,"Q")) Q = val;
    if(is_cmd(cmd,"GAIN")) Gain = val;
    if(is_cmd(cmd,"DISTORTION")) Distortion = val;
    if(is_cmd(cmd,"SYNC")) hardSync = !hardSync;
    if(is_cmd(cmd,"TUNE1")) osc1_tune = val;
    if(is_cmd(cmd,"TUNE2")) osc2_tune = val;
    if(is_cmd(cmd,"WAVE")) wave = (oscwave_t)val;
    return 0;
}

void connectLua()
{
    lua = new LuaJIT("main.lua");
    lua->CreateCFunction("set",setValueCmd);
}

void repl() {
    std::string cmd;
    std::cin >> cmd;
    lua->DoCmd(cmd);
}
