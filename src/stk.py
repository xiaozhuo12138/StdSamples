# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _stk
else:
    import _stk

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _stk.delete_SwigPyIterator

    def value(self):
        return _stk.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _stk.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _stk.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _stk.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _stk.SwigPyIterator_equal(self, x)

    def copy(self):
        return _stk.SwigPyIterator_copy(self)

    def next(self):
        return _stk.SwigPyIterator_next(self)

    def __next__(self):
        return _stk.SwigPyIterator___next__(self)

    def previous(self):
        return _stk.SwigPyIterator_previous(self)

    def advance(self, n):
        return _stk.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _stk.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _stk.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _stk.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _stk.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _stk.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _stk.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _stk:
_stk.SwigPyIterator_swigregister(SwigPyIterator)

class StkError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    STATUS = _stk.StkError_STATUS
    WARNING = _stk.StkError_WARNING
    DEBUG_PRINT = _stk.StkError_DEBUG_PRINT
    MEMORY_ALLOCATION = _stk.StkError_MEMORY_ALLOCATION
    MEMORY_ACCESS = _stk.StkError_MEMORY_ACCESS
    FUNCTION_ARGUMENT = _stk.StkError_FUNCTION_ARGUMENT
    FILE_NOT_FOUND = _stk.StkError_FILE_NOT_FOUND
    FILE_UNKNOWN_FORMAT = _stk.StkError_FILE_UNKNOWN_FORMAT
    FILE_ERROR = _stk.StkError_FILE_ERROR
    PROCESS_THREAD = _stk.StkError_PROCESS_THREAD
    PROCESS_SOCKET = _stk.StkError_PROCESS_SOCKET
    PROCESS_SOCKET_IPADDR = _stk.StkError_PROCESS_SOCKET_IPADDR
    AUDIO_SYSTEM = _stk.StkError_AUDIO_SYSTEM
    MIDI_SYSTEM = _stk.StkError_MIDI_SYSTEM
    UNSPECIFIED = _stk.StkError_UNSPECIFIED

    def __init__(self, *args):
        _stk.StkError_swiginit(self, _stk.new_StkError(*args))
    __swig_destroy__ = _stk.delete_StkError

    def printMessage(self):
        return _stk.StkError_printMessage(self)

    def getType(self):
        return _stk.StkError_getType(self)

    def getMessage(self):
        return _stk.StkError_getMessage(self)

    def getMessageCString(self):
        return _stk.StkError_getMessageCString(self)

    def what(self):
        return _stk.StkError_what(self)

# Register StkError in _stk:
_stk.StkError_swigregister(StkError)

class StkFrames(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _stk.delete_StkFrames

    def __init__(self, *args):
        _stk.StkFrames_swiginit(self, _stk.new_StkFrames(*args))

    def __getitem__(self, n):
        return _stk.StkFrames___getitem__(self, n)

    def __setitem__(self, n, value):
        return _stk.StkFrames___setitem__(self, n, value)

    def __add__(self, frames):
        return _stk.StkFrames___add__(self, frames)

    def __iadd__(self, f):
        return _stk.StkFrames___iadd__(self, f)

    def __mul__(self, v):
        return _stk.StkFrames___mul__(self, v)

    def __imul__(self, *args):
        return _stk.StkFrames___imul__(self, *args)

    def get(self, frame, channel):
        return _stk.StkFrames_get(self, frame, channel)

    def interpolate(self, frame, channel=0):
        return _stk.StkFrames_interpolate(self, frame, channel)

    def size(self):
        return _stk.StkFrames_size(self)

    def empty(self):
        return _stk.StkFrames_empty(self)

    def resize(self, *args):
        return _stk.StkFrames_resize(self, *args)

    def getChannel(self, channel, destinationFrames, destinationChannel):
        return _stk.StkFrames_getChannel(self, channel, destinationFrames, destinationChannel)

    def setChannel(self, channel, sourceFrames, sourceChannel):
        return _stk.StkFrames_setChannel(self, channel, sourceFrames, sourceChannel)

    def channels(self):
        return _stk.StkFrames_channels(self)

    def frames(self):
        return _stk.StkFrames_frames(self)

    def setDataRate(self, rate):
        return _stk.StkFrames_setDataRate(self, rate)

    def dataRate(self):
        return _stk.StkFrames_dataRate(self)

# Register StkFrames in _stk:
_stk.StkFrames_swigregister(StkFrames)

class Effect(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def channelsOut(self):
        return _stk.Effect_channelsOut(self)

    def lastFrame(self):
        return _stk.Effect_lastFrame(self)

    def clear(self):
        return _stk.Effect_clear(self)

    def setEffectMix(self, mix):
        return _stk.Effect_setEffectMix(self, mix)
    __swig_destroy__ = _stk.delete_Effect

# Register Effect in _stk:
_stk.Effect_swigregister(Effect)
cvar = _stk.cvar
SRATE = cvar.SRATE
RT_BUFFER_SIZE = cvar.RT_BUFFER_SIZE
PI = cvar.PI
TWO_PI = cvar.TWO_PI
ONE_OVER_128 = cvar.ONE_OVER_128

class Filter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def channelsIn(self):
        return _stk.Filter_channelsIn(self)

    def channelsOut(self):
        return _stk.Filter_channelsOut(self)

    def clear(self):
        return _stk.Filter_clear(self)

    def setGain(self, gain):
        return _stk.Filter_setGain(self, gain)

    def getGain(self):
        return _stk.Filter_getGain(self)

    def phaseDelay(self, frequency):
        return _stk.Filter_phaseDelay(self, frequency)

    def lastFrame(self):
        return _stk.Filter_lastFrame(self)

    def tick(self, frames, channel=0):
        return _stk.Filter_tick(self, frames, channel)
    __swig_destroy__ = _stk.delete_Filter

# Register Filter in _stk:
_stk.Filter_swigregister(Filter)

class Generator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def channelsOut(self):
        return _stk.Generator_channelsOut(self)

    def lastFrame(self):
        return _stk.Generator_lastFrame(self)

    def tick(self, frames, channel=0):
        return _stk.Generator_tick(self, frames, channel)
    __swig_destroy__ = _stk.delete_Generator

# Register Generator in _stk:
_stk.Generator_swigregister(Generator)

class Instrmnt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clear(self):
        return _stk.Instrmnt_clear(self)

    def noteOn(self, frequency, amplitude):
        return _stk.Instrmnt_noteOn(self, frequency, amplitude)

    def noteOff(self, amplitude):
        return _stk.Instrmnt_noteOff(self, amplitude)

    def setFrequency(self, frequency):
        return _stk.Instrmnt_setFrequency(self, frequency)

    def controlChange(self, number, value):
        return _stk.Instrmnt_controlChange(self, number, value)

    def channelsOut(self):
        return _stk.Instrmnt_channelsOut(self)

    def lastFrame(self):
        return _stk.Instrmnt_lastFrame(self)

    def lastOut(self, channel=0):
        return _stk.Instrmnt_lastOut(self, channel)

    def tick(self, *args):
        return _stk.Instrmnt_tick(self, *args)
    __swig_destroy__ = _stk.delete_Instrmnt

# Register Instrmnt in _stk:
_stk.Instrmnt_swigregister(Instrmnt)

class Function(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def lastOut(self):
        return _stk.Function_lastOut(self)

    def tick(self, input):
        return _stk.Function_tick(self, input)
    __swig_destroy__ = _stk.delete_Function

# Register Function in _stk:
_stk.Function_swigregister(Function)

class FM(Instrmnt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _stk.delete_FM

    def loadWaves(self, filenames):
        return _stk.FM_loadWaves(self, filenames)

    def setFrequency(self, frequency):
        return _stk.FM_setFrequency(self, frequency)

    def setRatio(self, waveIndex, ratio):
        return _stk.FM_setRatio(self, waveIndex, ratio)

    def setGain(self, waveIndex, gain):
        return _stk.FM_setGain(self, waveIndex, gain)

    def setModulationSpeed(self, mSpeed):
        return _stk.FM_setModulationSpeed(self, mSpeed)

    def setModulationDepth(self, mDepth):
        return _stk.FM_setModulationDepth(self, mDepth)

    def setControl1(self, cVal):
        return _stk.FM_setControl1(self, cVal)

    def setControl2(self, cVal):
        return _stk.FM_setControl2(self, cVal)

    def keyOn(self):
        return _stk.FM_keyOn(self)

    def keyOff(self):
        return _stk.FM_keyOff(self)

    def noteOff(self, amplitude):
        return _stk.FM_noteOff(self, amplitude)

    def controlChange(self, number, value):
        return _stk.FM_controlChange(self, number, value)

    def tick(self, *args):
        return _stk.FM_tick(self, *args)

# Register FM in _stk:
_stk.FM_swigregister(FM)

class ADSR(Generator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ATTACK = _stk.ADSR_ATTACK
    DECAY = _stk.ADSR_DECAY
    SUSTAIN = _stk.ADSR_SUSTAIN
    RELEASE = _stk.ADSR_RELEASE
    IDLE = _stk.ADSR_IDLE

    def __init__(self):
        _stk.ADSR_swiginit(self, _stk.new_ADSR())
    __swig_destroy__ = _stk.delete_ADSR

    def keyOn(self):
        return _stk.ADSR_keyOn(self)

    def keyOff(self):
        return _stk.ADSR_keyOff(self)

    def setAttackRate(self, rate):
        return _stk.ADSR_setAttackRate(self, rate)

    def setAttackTarget(self, target):
        return _stk.ADSR_setAttackTarget(self, target)

    def setDecayRate(self, rate):
        return _stk.ADSR_setDecayRate(self, rate)

    def setSustainLevel(self, level):
        return _stk.ADSR_setSustainLevel(self, level)

    def setReleaseRate(self, rate):
        return _stk.ADSR_setReleaseRate(self, rate)

    def setAttackTime(self, time):
        return _stk.ADSR_setAttackTime(self, time)

    def setDecayTime(self, time):
        return _stk.ADSR_setDecayTime(self, time)

    def setReleaseTime(self, time):
        return _stk.ADSR_setReleaseTime(self, time)

    def setAllTimes(self, aTime, dTime, sLevel, rTime):
        return _stk.ADSR_setAllTimes(self, aTime, dTime, sLevel, rTime)

    def setTarget(self, target):
        return _stk.ADSR_setTarget(self, target)

    def getState(self):
        return _stk.ADSR_getState(self)

    def setValue(self, value):
        return _stk.ADSR_setValue(self, value)

    def lastOut(self):
        return _stk.ADSR_lastOut(self)

    def tick(self, *args):
        return _stk.ADSR_tick(self, *args)

# Register ADSR in _stk:
_stk.ADSR_swigregister(ADSR)

class Asymp(Generator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.Asymp_swiginit(self, _stk.new_Asymp())
    __swig_destroy__ = _stk.delete_Asymp

    def keyOn(self):
        return _stk.Asymp_keyOn(self)

    def keyOff(self):
        return _stk.Asymp_keyOff(self)

    def setTau(self, tau):
        return _stk.Asymp_setTau(self, tau)

    def setTime(self, time):
        return _stk.Asymp_setTime(self, time)

    def setT60(self, t60):
        return _stk.Asymp_setT60(self, t60)

    def setTarget(self, target):
        return _stk.Asymp_setTarget(self, target)

    def setValue(self, value):
        return _stk.Asymp_setValue(self, value)

    def getState(self):
        return _stk.Asymp_getState(self)

    def lastOut(self):
        return _stk.Asymp_lastOut(self)

    def tick(self, *args):
        return _stk.Asymp_tick(self, *args)

# Register Asymp in _stk:
_stk.Asymp_swigregister(Asymp)
TARGET_THRESHOLD = cvar.TARGET_THRESHOLD

class BandedWG(Instrmnt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.BandedWG_swiginit(self, _stk.new_BandedWG())
    __swig_destroy__ = _stk.delete_BandedWG

    def clear(self):
        return _stk.BandedWG_clear(self)

    def setStrikePosition(self, position):
        return _stk.BandedWG_setStrikePosition(self, position)

    def setPreset(self, preset):
        return _stk.BandedWG_setPreset(self, preset)

    def setFrequency(self, frequency):
        return _stk.BandedWG_setFrequency(self, frequency)

    def startBowing(self, amplitude, rate):
        return _stk.BandedWG_startBowing(self, amplitude, rate)

    def stopBowing(self, rate):
        return _stk.BandedWG_stopBowing(self, rate)

    def pluck(self, amp):
        return _stk.BandedWG_pluck(self, amp)

    def noteOn(self, frequency, amplitude):
        return _stk.BandedWG_noteOn(self, frequency, amplitude)

    def noteOff(self, amplitude):
        return _stk.BandedWG_noteOff(self, amplitude)

    def controlChange(self, number, value):
        return _stk.BandedWG_controlChange(self, number, value)

    def tick(self, *args):
        return _stk.BandedWG_tick(self, *args)

# Register BandedWG in _stk:
_stk.BandedWG_swigregister(BandedWG)
MAX_BANDED_MODES = cvar.MAX_BANDED_MODES

class BeeThree(FM):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.BeeThree_swiginit(self, _stk.new_BeeThree())
    __swig_destroy__ = _stk.delete_BeeThree

    def noteOn(self, frequency, amplitude):
        return _stk.BeeThree_noteOn(self, frequency, amplitude)

    def tick(self, *args):
        return _stk.BeeThree_tick(self, *args)

# Register BeeThree in _stk:
_stk.BeeThree_swigregister(BeeThree)

class BiQuad(Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.BiQuad_swiginit(self, _stk.new_BiQuad())
    __swig_destroy__ = _stk.delete_BiQuad

    def ignoreSampleRateChange(self, ignore=True):
        return _stk.BiQuad_ignoreSampleRateChange(self, ignore)

    def setCoefficients(self, b0, b1, b2, a1, a2, clearState=False):
        return _stk.BiQuad_setCoefficients(self, b0, b1, b2, a1, a2, clearState)

    def setB0(self, b0):
        return _stk.BiQuad_setB0(self, b0)

    def setB1(self, b1):
        return _stk.BiQuad_setB1(self, b1)

    def setB2(self, b2):
        return _stk.BiQuad_setB2(self, b2)

    def setA1(self, a1):
        return _stk.BiQuad_setA1(self, a1)

    def setA2(self, a2):
        return _stk.BiQuad_setA2(self, a2)

    def setResonance(self, frequency, radius, normalize=False):
        return _stk.BiQuad_setResonance(self, frequency, radius, normalize)

    def setNotch(self, frequency, radius):
        return _stk.BiQuad_setNotch(self, frequency, radius)

    def setEqualGainZeroes(self):
        return _stk.BiQuad_setEqualGainZeroes(self)

    def lastOut(self):
        return _stk.BiQuad_lastOut(self)

    def tick(self, *args):
        return _stk.BiQuad_tick(self, *args)

# Register BiQuad in _stk:
_stk.BiQuad_swigregister(BiQuad)

class Blit(Generator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, frequency=220.0):
        _stk.Blit_swiginit(self, _stk.new_Blit(frequency))
    __swig_destroy__ = _stk.delete_Blit

    def reset(self):
        return _stk.Blit_reset(self)

    def setPhase(self, phase):
        return _stk.Blit_setPhase(self, phase)

    def getPhase(self):
        return _stk.Blit_getPhase(self)

    def setFrequency(self, frequency):
        return _stk.Blit_setFrequency(self, frequency)

    def setHarmonics(self, nHarmonics=0):
        return _stk.Blit_setHarmonics(self, nHarmonics)

    def lastOut(self):
        return _stk.Blit_lastOut(self)

    def tick(self, *args):
        return _stk.Blit_tick(self, *args)

# Register Blit in _stk:
_stk.Blit_swigregister(Blit)

class BlitSaw(Generator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, frequency=220.0):
        _stk.BlitSaw_swiginit(self, _stk.new_BlitSaw(frequency))
    __swig_destroy__ = _stk.delete_BlitSaw

    def reset(self):
        return _stk.BlitSaw_reset(self)

    def setFrequency(self, frequency):
        return _stk.BlitSaw_setFrequency(self, frequency)

    def setHarmonics(self, nHarmonics=0):
        return _stk.BlitSaw_setHarmonics(self, nHarmonics)

    def lastOut(self):
        return _stk.BlitSaw_lastOut(self)

    def tick(self, *args):
        return _stk.BlitSaw_tick(self, *args)

# Register BlitSaw in _stk:
_stk.BlitSaw_swigregister(BlitSaw)

class BlitSquare(Generator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, frequency=220.0):
        _stk.BlitSquare_swiginit(self, _stk.new_BlitSquare(frequency))
    __swig_destroy__ = _stk.delete_BlitSquare

    def reset(self):
        return _stk.BlitSquare_reset(self)

    def setPhase(self, phase):
        return _stk.BlitSquare_setPhase(self, phase)

    def getPhase(self):
        return _stk.BlitSquare_getPhase(self)

    def setFrequency(self, frequency):
        return _stk.BlitSquare_setFrequency(self, frequency)

    def setHarmonics(self, nHarmonics=0):
        return _stk.BlitSquare_setHarmonics(self, nHarmonics)

    def lastOut(self):
        return _stk.BlitSquare_lastOut(self)

    def tick(self, *args):
        return _stk.BlitSquare_tick(self, *args)

# Register BlitSquare in _stk:
_stk.BlitSquare_swigregister(BlitSquare)

class BlowBotl(Instrmnt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.BlowBotl_swiginit(self, _stk.new_BlowBotl())
    __swig_destroy__ = _stk.delete_BlowBotl

    def clear(self):
        return _stk.BlowBotl_clear(self)

    def setFrequency(self, frequency):
        return _stk.BlowBotl_setFrequency(self, frequency)

    def startBlowing(self, amplitude, rate):
        return _stk.BlowBotl_startBlowing(self, amplitude, rate)

    def stopBlowing(self, rate):
        return _stk.BlowBotl_stopBlowing(self, rate)

    def noteOn(self, frequency, amplitude):
        return _stk.BlowBotl_noteOn(self, frequency, amplitude)

    def noteOff(self, amplitude):
        return _stk.BlowBotl_noteOff(self, amplitude)

    def controlChange(self, number, value):
        return _stk.BlowBotl_controlChange(self, number, value)

    def tick(self, *args):
        return _stk.BlowBotl_tick(self, *args)

# Register BlowBotl in _stk:
_stk.BlowBotl_swigregister(BlowBotl)

class BlowHole(Instrmnt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lowestFrequency):
        _stk.BlowHole_swiginit(self, _stk.new_BlowHole(lowestFrequency))
    __swig_destroy__ = _stk.delete_BlowHole

    def clear(self):
        return _stk.BlowHole_clear(self)

    def setFrequency(self, frequency):
        return _stk.BlowHole_setFrequency(self, frequency)

    def setTonehole(self, newValue):
        return _stk.BlowHole_setTonehole(self, newValue)

    def setVent(self, newValue):
        return _stk.BlowHole_setVent(self, newValue)

    def startBlowing(self, amplitude, rate):
        return _stk.BlowHole_startBlowing(self, amplitude, rate)

    def stopBlowing(self, rate):
        return _stk.BlowHole_stopBlowing(self, rate)

    def noteOn(self, frequency, amplitude):
        return _stk.BlowHole_noteOn(self, frequency, amplitude)

    def noteOff(self, amplitude):
        return _stk.BlowHole_noteOff(self, amplitude)

    def controlChange(self, number, value):
        return _stk.BlowHole_controlChange(self, number, value)

    def tick(self, *args):
        return _stk.BlowHole_tick(self, *args)

# Register BlowHole in _stk:
_stk.BlowHole_swigregister(BlowHole)

class BowTable(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.BowTable_swiginit(self, _stk.new_BowTable())

    def setOffset(self, offset):
        return _stk.BowTable_setOffset(self, offset)

    def setSlope(self, slope):
        return _stk.BowTable_setSlope(self, slope)

    def setMinOutput(self, minimum):
        return _stk.BowTable_setMinOutput(self, minimum)

    def setMaxOutput(self, maximum):
        return _stk.BowTable_setMaxOutput(self, maximum)

    def tick(self, *args):
        return _stk.BowTable_tick(self, *args)
    __swig_destroy__ = _stk.delete_BowTable

# Register BowTable in _stk:
_stk.BowTable_swigregister(BowTable)

class Bowed(Instrmnt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _stk.delete_Bowed

    def clear(self):
        return _stk.Bowed_clear(self)

    def setFrequency(self, frequency):
        return _stk.Bowed_setFrequency(self, frequency)

    def setVibrato(self, gain):
        return _stk.Bowed_setVibrato(self, gain)

    def startBowing(self, amplitude, rate):
        return _stk.Bowed_startBowing(self, amplitude, rate)

    def stopBowing(self, rate):
        return _stk.Bowed_stopBowing(self, rate)

    def noteOn(self, frequency, amplitude):
        return _stk.Bowed_noteOn(self, frequency, amplitude)

    def noteOff(self, amplitude):
        return _stk.Bowed_noteOff(self, amplitude)

    def controlChange(self, number, value):
        return _stk.Bowed_controlChange(self, number, value)

    def tick(self, channel=0):
        return _stk.Bowed_tick(self, channel)

# Register Bowed in _stk:
_stk.Bowed_swigregister(Bowed)

class Brass(Instrmnt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lowestFrequency=8.0):
        _stk.Brass_swiginit(self, _stk.new_Brass(lowestFrequency))
    __swig_destroy__ = _stk.delete_Brass

    def clear(self):
        return _stk.Brass_clear(self)

    def setFrequency(self, frequency):
        return _stk.Brass_setFrequency(self, frequency)

    def setLip(self, frequency):
        return _stk.Brass_setLip(self, frequency)

    def startBlowing(self, amplitude, rate):
        return _stk.Brass_startBlowing(self, amplitude, rate)

    def stopBlowing(self, rate):
        return _stk.Brass_stopBlowing(self, rate)

    def noteOn(self, frequency, amplitude):
        return _stk.Brass_noteOn(self, frequency, amplitude)

    def noteOff(self, amplitude):
        return _stk.Brass_noteOff(self, amplitude)

    def controlChange(self, number, value):
        return _stk.Brass_controlChange(self, number, value)

    def tick(self, *args):
        return _stk.Brass_tick(self, *args)

# Register Brass in _stk:
_stk.Brass_swigregister(Brass)

class Chorus(Effect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, baseDelay=6000):
        _stk.Chorus_swiginit(self, _stk.new_Chorus(baseDelay))

    def clear(self):
        return _stk.Chorus_clear(self)

    def setModDepth(self, depth):
        return _stk.Chorus_setModDepth(self, depth)

    def setModFrequency(self, frequency):
        return _stk.Chorus_setModFrequency(self, frequency)

    def lastOut(self, channel=0):
        return _stk.Chorus_lastOut(self, channel)

    def tick(self, *args):
        return _stk.Chorus_tick(self, *args)
    __swig_destroy__ = _stk.delete_Chorus

# Register Chorus in _stk:
_stk.Chorus_swigregister(Chorus)

class Clarinet(Instrmnt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lowestFrequency=8.0):
        _stk.Clarinet_swiginit(self, _stk.new_Clarinet(lowestFrequency))
    __swig_destroy__ = _stk.delete_Clarinet

    def clear(self):
        return _stk.Clarinet_clear(self)

    def setFrequency(self, frequency):
        return _stk.Clarinet_setFrequency(self, frequency)

    def startBlowing(self, amplitude, rate):
        return _stk.Clarinet_startBlowing(self, amplitude, rate)

    def stopBlowing(self, rate):
        return _stk.Clarinet_stopBlowing(self, rate)

    def noteOn(self, frequency, amplitude):
        return _stk.Clarinet_noteOn(self, frequency, amplitude)

    def noteOff(self, amplitude):
        return _stk.Clarinet_noteOff(self, amplitude)

    def controlChange(self, number, value):
        return _stk.Clarinet_controlChange(self, number, value)

    def tick(self, *args):
        return _stk.Clarinet_tick(self, *args)

# Register Clarinet in _stk:
_stk.Clarinet_swigregister(Clarinet)

class Cubic(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.Cubic_swiginit(self, _stk.new_Cubic())

    def setA1(self, a1):
        return _stk.Cubic_setA1(self, a1)

    def setA2(self, a2):
        return _stk.Cubic_setA2(self, a2)

    def setA3(self, a3):
        return _stk.Cubic_setA3(self, a3)

    def setGain(self, gain):
        return _stk.Cubic_setGain(self, gain)

    def setThreshold(self, threshold):
        return _stk.Cubic_setThreshold(self, threshold)

    def tick(self, *args):
        return _stk.Cubic_tick(self, *args)
    __swig_destroy__ = _stk.delete_Cubic

# Register Cubic in _stk:
_stk.Cubic_swigregister(Cubic)

class Delay(Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, delay=0, maxDelay=4095):
        _stk.Delay_swiginit(self, _stk.new_Delay(delay, maxDelay))
    __swig_destroy__ = _stk.delete_Delay

    def getMaximumDelay(self):
        return _stk.Delay_getMaximumDelay(self)

    def setMaximumDelay(self, delay):
        return _stk.Delay_setMaximumDelay(self, delay)

    def setDelay(self, delay):
        return _stk.Delay_setDelay(self, delay)

    def getDelay(self):
        return _stk.Delay_getDelay(self)

    def tapOut(self, tapDelay):
        return _stk.Delay_tapOut(self, tapDelay)

    def tapIn(self, value, tapDelay):
        return _stk.Delay_tapIn(self, value, tapDelay)

    def addTo(self, value, tapDelay):
        return _stk.Delay_addTo(self, value, tapDelay)

    def lastOut(self):
        return _stk.Delay_lastOut(self)

    def nextOut(self):
        return _stk.Delay_nextOut(self)

    def energy(self):
        return _stk.Delay_energy(self)

    def tick(self, *args):
        return _stk.Delay_tick(self, *args)

# Register Delay in _stk:
_stk.Delay_swigregister(Delay)

class DelayA(Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, delay=0.5, maxDelay=4095):
        _stk.DelayA_swiginit(self, _stk.new_DelayA(delay, maxDelay))
    __swig_destroy__ = _stk.delete_DelayA

    def clear(self):
        return _stk.DelayA_clear(self)

    def getMaximumDelay(self):
        return _stk.DelayA_getMaximumDelay(self)

    def setMaximumDelay(self, delay):
        return _stk.DelayA_setMaximumDelay(self, delay)

    def setDelay(self, delay):
        return _stk.DelayA_setDelay(self, delay)

    def getDelay(self):
        return _stk.DelayA_getDelay(self)

    def tapOut(self, tapDelay):
        return _stk.DelayA_tapOut(self, tapDelay)

    def lastOut(self):
        return _stk.DelayA_lastOut(self)

    def nextOut(self):
        return _stk.DelayA_nextOut(self)

    def tick(self, *args):
        return _stk.DelayA_tick(self, *args)

# Register DelayA in _stk:
_stk.DelayA_swigregister(DelayA)

class DelayL(Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, delay=0.0, maxDelay=4095):
        _stk.DelayL_swiginit(self, _stk.new_DelayL(delay, maxDelay))
    __swig_destroy__ = _stk.delete_DelayL

    def getMaximumDelay(self):
        return _stk.DelayL_getMaximumDelay(self)

    def setMaximumDelay(self, delay):
        return _stk.DelayL_setMaximumDelay(self, delay)

    def setDelay(self, delay):
        return _stk.DelayL_setDelay(self, delay)

    def getDelay(self):
        return _stk.DelayL_getDelay(self)

    def tapOut(self, tapDelay):
        return _stk.DelayL_tapOut(self, tapDelay)

    def tapIn(self, value, tapDelay):
        return _stk.DelayL_tapIn(self, value, tapDelay)

    def lastOut(self):
        return _stk.DelayL_lastOut(self)

    def nextOut(self):
        return _stk.DelayL_nextOut(self)

    def tick(self, *args):
        return _stk.DelayL_tick(self, *args)

# Register DelayL in _stk:
_stk.DelayL_swigregister(DelayL)

class Drummer(Instrmnt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.Drummer_swiginit(self, _stk.new_Drummer())
    __swig_destroy__ = _stk.delete_Drummer

    def noteOn(self, instrument, amplitude):
        return _stk.Drummer_noteOn(self, instrument, amplitude)

    def noteOff(self, amplitude):
        return _stk.Drummer_noteOff(self, amplitude)

    def tick(self, *args):
        return _stk.Drummer_tick(self, *args)

# Register Drummer in _stk:
_stk.Drummer_swigregister(Drummer)

class Echo(Effect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _stk.Echo_swiginit(self, _stk.new_Echo(*args))

    def clear(self):
        return _stk.Echo_clear(self)

    def setMaximumDelay(self, delay):
        return _stk.Echo_setMaximumDelay(self, delay)

    def setDelay(self, delay):
        return _stk.Echo_setDelay(self, delay)

    def lastOut(self):
        return _stk.Echo_lastOut(self)

    def tick(self, *args):
        return _stk.Echo_tick(self, *args)
    __swig_destroy__ = _stk.delete_Echo

# Register Echo in _stk:
_stk.Echo_swigregister(Echo)

class Envelope(Generator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.Envelope_swiginit(self, _stk.new_Envelope())
    __swig_destroy__ = _stk.delete_Envelope

    def keyOn(self, target=1.0):
        return _stk.Envelope_keyOn(self, target)

    def keyOff(self, target=0.0):
        return _stk.Envelope_keyOff(self, target)

    def setRate(self, rate):
        return _stk.Envelope_setRate(self, rate)

    def setTime(self, time):
        return _stk.Envelope_setTime(self, time)

    def setTarget(self, target):
        return _stk.Envelope_setTarget(self, target)

    def setValue(self, value):
        return _stk.Envelope_setValue(self, value)

    def getState(self):
        return _stk.Envelope_getState(self)

    def lastOut(self):
        return _stk.Envelope_lastOut(self)

    def tick(self, *args):
        return _stk.Envelope_tick(self, *args)

# Register Envelope in _stk:
_stk.Envelope_swigregister(Envelope)

class FMVoices(FM):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.FMVoices_swiginit(self, _stk.new_FMVoices())
    __swig_destroy__ = _stk.delete_FMVoices

    def setFrequency(self, frequency):
        return _stk.FMVoices_setFrequency(self, frequency)

    def noteOn(self, frequency, amplitude):
        return _stk.FMVoices_noteOn(self, frequency, amplitude)

    def controlChange(self, number, value):
        return _stk.FMVoices_controlChange(self, number, value)

    def tick(self, *args):
        return _stk.FMVoices_tick(self, *args)

# Register FMVoices in _stk:
_stk.FMVoices_swigregister(FMVoices)

class FileRead(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _stk.FileRead_swiginit(self, _stk.new_FileRead(*args))
    __swig_destroy__ = _stk.delete_FileRead

    def open(self, *args):
        return _stk.FileRead_open(self, *args)

    def close(self):
        return _stk.FileRead_close(self)

    def isOpen(self):
        return _stk.FileRead_isOpen(self)

    def fileSize(self):
        return _stk.FileRead_fileSize(self)

    def channels(self):
        return _stk.FileRead_channels(self)

    def format(self):
        return _stk.FileRead_format(self)

    def fileRate(self):
        return _stk.FileRead_fileRate(self)

    def read(self, buffer, startFrame=0, doNormalize=True):
        return _stk.FileRead_read(self, buffer, startFrame, doNormalize)

# Register FileRead in _stk:
_stk.FileRead_swigregister(FileRead)

class FileWrite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _stk.FileWrite_swiginit(self, _stk.new_FileWrite(*args))
    __swig_destroy__ = _stk.delete_FileWrite

    def open(self, *args):
        return _stk.FileWrite_open(self, *args)

    def close(self):
        return _stk.FileWrite_close(self)

    def isOpen(self):
        return _stk.FileWrite_isOpen(self)

    def write(self, buffer):
        return _stk.FileWrite_write(self, buffer)

# Register FileWrite in _stk:
_stk.FileWrite_swigregister(FileWrite)
FileWrite.FILE_RAW = _stk.cvar.FileWrite_FILE_RAW
FileWrite.FILE_WAV = _stk.cvar.FileWrite_FILE_WAV
FileWrite.FILE_SND = _stk.cvar.FileWrite_FILE_SND
FileWrite.FILE_AIF = _stk.cvar.FileWrite_FILE_AIF
FileWrite.FILE_MAT = _stk.cvar.FileWrite_FILE_MAT

class FileWvIn(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _stk.FileWvIn_swiginit(self, _stk.new_FileWvIn(*args))
    __swig_destroy__ = _stk.delete_FileWvIn

    def openFile(self, fileName, raw=False, doNormalize=True, doInt2FloatScaling=True):
        return _stk.FileWvIn_openFile(self, fileName, raw, doNormalize, doInt2FloatScaling)

    def closeFile(self):
        return _stk.FileWvIn_closeFile(self)

    def reset(self):
        return _stk.FileWvIn_reset(self)

    def normalize(self, *args):
        return _stk.FileWvIn_normalize(self, *args)

    def getSize(self):
        return _stk.FileWvIn_getSize(self)

    def getFileRate(self):
        return _stk.FileWvIn_getFileRate(self)

    def isOpen(self):
        return _stk.FileWvIn_isOpen(self)

    def isFinished(self):
        return _stk.FileWvIn_isFinished(self)

    def setRate(self, rate):
        return _stk.FileWvIn_setRate(self, rate)

    def addTime(self, time):
        return _stk.FileWvIn_addTime(self, time)

    def setInterpolate(self, doInterpolate):
        return _stk.FileWvIn_setInterpolate(self, doInterpolate)

    def lastOut(self, channel=0):
        return _stk.FileWvIn_lastOut(self, channel)

    def tick(self, *args):
        return _stk.FileWvIn_tick(self, *args)

# Register FileWvIn in _stk:
_stk.FileWvIn_swigregister(FileWvIn)

class FileWvOut(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _stk.FileWvOut_swiginit(self, _stk.new_FileWvOut(*args))
    __swig_destroy__ = _stk.delete_FileWvOut

    def openFile(self, fileName, nChannels, type, format):
        return _stk.FileWvOut_openFile(self, fileName, nChannels, type, format)

    def closeFile(self):
        return _stk.FileWvOut_closeFile(self)

    def tick(self, *args):
        return _stk.FileWvOut_tick(self, *args)

# Register FileWvOut in _stk:
_stk.FileWvOut_swigregister(FileWvOut)

class FileLoop(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _stk.FileLoop_swiginit(self, _stk.new_FileLoop(*args))
    __swig_destroy__ = _stk.delete_FileLoop

    def openFile(self, fileName, raw=False, doNormalize=True, doInt2FloatScaling=True):
        return _stk.FileLoop_openFile(self, fileName, raw, doNormalize, doInt2FloatScaling)

    def closeFile(self):
        return _stk.FileLoop_closeFile(self)

    def reset(self):
        return _stk.FileLoop_reset(self)

    def channelsOut(self):
        return _stk.FileLoop_channelsOut(self)

    def normalize(self, *args):
        return _stk.FileLoop_normalize(self, *args)

    def getSize(self):
        return _stk.FileLoop_getSize(self)

    def getFileRate(self):
        return _stk.FileLoop_getFileRate(self)

    def setRate(self, rate):
        return _stk.FileLoop_setRate(self, rate)

    def setFrequency(self, frequency):
        return _stk.FileLoop_setFrequency(self, frequency)

    def addTime(self, time):
        return _stk.FileLoop_addTime(self, time)

    def addPhase(self, angle):
        return _stk.FileLoop_addPhase(self, angle)

    def addPhaseOffset(self, angle):
        return _stk.FileLoop_addPhaseOffset(self, angle)

    def lastOut(self, channel=0):
        return _stk.FileLoop_lastOut(self, channel)

    def tick(self, *args):
        return _stk.FileLoop_tick(self, *args)

# Register FileLoop in _stk:
_stk.FileLoop_swigregister(FileLoop)

class Fir(Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _stk.Fir_swiginit(self, _stk.new_Fir(*args))
    __swig_destroy__ = _stk.delete_Fir

    def setCoefficients(self, coefficients, clearState=False):
        return _stk.Fir_setCoefficients(self, coefficients, clearState)

    def lastOut(self):
        return _stk.Fir_lastOut(self)

    def tick(self, *args):
        return _stk.Fir_tick(self, *args)

# Register Fir in _stk:
_stk.Fir_swigregister(Fir)

class Flute(Instrmnt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lowestFrequency):
        _stk.Flute_swiginit(self, _stk.new_Flute(lowestFrequency))
    __swig_destroy__ = _stk.delete_Flute

    def clear(self):
        return _stk.Flute_clear(self)

    def setFrequency(self, frequency):
        return _stk.Flute_setFrequency(self, frequency)

    def setJetReflection(self, coefficient):
        return _stk.Flute_setJetReflection(self, coefficient)

    def setEndReflection(self, coefficient):
        return _stk.Flute_setEndReflection(self, coefficient)

    def setJetDelay(self, aRatio):
        return _stk.Flute_setJetDelay(self, aRatio)

    def startBlowing(self, amplitude, rate):
        return _stk.Flute_startBlowing(self, amplitude, rate)

    def stopBlowing(self, rate):
        return _stk.Flute_stopBlowing(self, rate)

    def noteOn(self, frequency, amplitude):
        return _stk.Flute_noteOn(self, frequency, amplitude)

    def noteOff(self, amplitude):
        return _stk.Flute_noteOff(self, amplitude)

    def controlChange(self, number, value):
        return _stk.Flute_controlChange(self, number, value)

    def tick(self, *args):
        return _stk.Flute_tick(self, *args)

# Register Flute in _stk:
_stk.Flute_swigregister(Flute)

class FormSwep(Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.FormSwep_swiginit(self, _stk.new_FormSwep())
    __swig_destroy__ = _stk.delete_FormSwep

    def ignoreSampleRateChange(self, ignore=True):
        return _stk.FormSwep_ignoreSampleRateChange(self, ignore)

    def setResonance(self, frequency, radius):
        return _stk.FormSwep_setResonance(self, frequency, radius)

    def setStates(self, frequency, radius, gain=1.0):
        return _stk.FormSwep_setStates(self, frequency, radius, gain)

    def setTargets(self, frequency, radius, gain=1.0):
        return _stk.FormSwep_setTargets(self, frequency, radius, gain)

    def setSweepRate(self, rate):
        return _stk.FormSwep_setSweepRate(self, rate)

    def setSweepTime(self, time):
        return _stk.FormSwep_setSweepTime(self, time)

    def lastOut(self):
        return _stk.FormSwep_lastOut(self)

    def tick(self, *args):
        return _stk.FormSwep_tick(self, *args)

# Register FormSwep in _stk:
_stk.FormSwep_swigregister(FormSwep)

class FreeVerb(Effect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.FreeVerb_swiginit(self, _stk.new_FreeVerb())
    __swig_destroy__ = _stk.delete_FreeVerb

    def setEffectMix(self, mix):
        return _stk.FreeVerb_setEffectMix(self, mix)

    def setRoomSize(self, value):
        return _stk.FreeVerb_setRoomSize(self, value)

    def getRoomSize(self):
        return _stk.FreeVerb_getRoomSize(self)

    def setDamping(self, value):
        return _stk.FreeVerb_setDamping(self, value)

    def getDamping(self):
        return _stk.FreeVerb_getDamping(self)

    def setWidth(self, value):
        return _stk.FreeVerb_setWidth(self, value)

    def getWidth(self):
        return _stk.FreeVerb_getWidth(self)

    def setMode(self, isFrozen):
        return _stk.FreeVerb_setMode(self, isFrozen)

    def getMode(self):
        return _stk.FreeVerb_getMode(self)

    def clear(self):
        return _stk.FreeVerb_clear(self)

    def lastOut(self, channel=0):
        return _stk.FreeVerb_lastOut(self, channel)

    def tick(self, *args):
        return _stk.FreeVerb_tick(self, *args)

# Register FreeVerb in _stk:
_stk.FreeVerb_swigregister(FreeVerb)

class Granulate(Generator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _stk.Granulate_swiginit(self, _stk.new_Granulate(*args))
    __swig_destroy__ = _stk.delete_Granulate

    def openFile(self, fileName, typeRaw=False):
        return _stk.Granulate_openFile(self, fileName, typeRaw)

    def reset(self):
        return _stk.Granulate_reset(self)

    def setVoices(self, nVoices=1):
        return _stk.Granulate_setVoices(self, nVoices)

    def setStretch(self, stretchFactor=1):
        return _stk.Granulate_setStretch(self, stretchFactor)

    def setGrainParameters(self, duration=30, rampPercent=50, offset=0, delay=0):
        return _stk.Granulate_setGrainParameters(self, duration, rampPercent, offset, delay)

    def setRandomFactor(self, randomness=0.1):
        return _stk.Granulate_setRandomFactor(self, randomness)

    def lastOut(self, channel=0):
        return _stk.Granulate_lastOut(self, channel)

    def tick(self, *args):
        return _stk.Granulate_tick(self, *args)
    GRAIN_STOPPED = _stk.Granulate_GRAIN_STOPPED
    GRAIN_FADEIN = _stk.Granulate_GRAIN_FADEIN
    GRAIN_SUSTAIN = _stk.Granulate_GRAIN_SUSTAIN
    GRAIN_FADEOUT = _stk.Granulate_GRAIN_FADEOUT

# Register Granulate in _stk:
_stk.Granulate_swigregister(Granulate)

class Guitar(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _stk.Guitar_swiginit(self, _stk.new_Guitar(*args))

    def clear(self):
        return _stk.Guitar_clear(self)

    def setBodyFile(self, *args):
        return _stk.Guitar_setBodyFile(self, *args)

    def setPluckPosition(self, position, string=-1):
        return _stk.Guitar_setPluckPosition(self, position, string)

    def setLoopGain(self, gain, string=-1):
        return _stk.Guitar_setLoopGain(self, gain, string)

    def setFrequency(self, frequency, string=0):
        return _stk.Guitar_setFrequency(self, frequency, string)

    def noteOn(self, frequency, amplitude, string=0):
        return _stk.Guitar_noteOn(self, frequency, amplitude, string)

    def noteOff(self, amplitude, string=0):
        return _stk.Guitar_noteOff(self, amplitude, string)

    def controlChange(self, number, value, string=-1):
        return _stk.Guitar_controlChange(self, number, value, string)

    def lastOut(self):
        return _stk.Guitar_lastOut(self)

    def tick(self, *args):
        return _stk.Guitar_tick(self, *args)
    __swig_destroy__ = _stk.delete_Guitar

# Register Guitar in _stk:
_stk.Guitar_swigregister(Guitar)

class HevyMetl(FM):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.HevyMetl_swiginit(self, _stk.new_HevyMetl())
    __swig_destroy__ = _stk.delete_HevyMetl

    def noteOn(self, frequency, amplitude):
        return _stk.HevyMetl_noteOn(self, frequency, amplitude)

    def tick(self, *args):
        return _stk.HevyMetl_tick(self, *args)

# Register HevyMetl in _stk:
_stk.HevyMetl_swigregister(HevyMetl)

class Iir(Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _stk.Iir_swiginit(self, _stk.new_Iir(*args))
    __swig_destroy__ = _stk.delete_Iir

    def setCoefficients(self, bCoefficients, aCoefficients, clearState=False):
        return _stk.Iir_setCoefficients(self, bCoefficients, aCoefficients, clearState)

    def setNumerator(self, bCoefficients, clearState=False):
        return _stk.Iir_setNumerator(self, bCoefficients, clearState)

    def setDenominator(self, aCoefficients, clearState=False):
        return _stk.Iir_setDenominator(self, aCoefficients, clearState)

    def lastOut(self):
        return _stk.Iir_lastOut(self)

    def tick(self, *args):
        return _stk.Iir_tick(self, *args)

# Register Iir in _stk:
_stk.Iir_swigregister(Iir)

class JCRev(Effect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, T60=1.0):
        _stk.JCRev_swiginit(self, _stk.new_JCRev(T60))

    def clear(self):
        return _stk.JCRev_clear(self)

    def setT60(self, T60):
        return _stk.JCRev_setT60(self, T60)

    def lastOut(self, channel=0):
        return _stk.JCRev_lastOut(self, channel)

    def tick(self, *args):
        return _stk.JCRev_tick(self, *args)
    __swig_destroy__ = _stk.delete_JCRev

# Register JCRev in _stk:
_stk.JCRev_swigregister(JCRev)

class JetTable(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def tick(self, *args):
        return _stk.JetTable_tick(self, *args)

    def __init__(self):
        _stk.JetTable_swiginit(self, _stk.new_JetTable())
    __swig_destroy__ = _stk.delete_JetTable

# Register JetTable in _stk:
_stk.JetTable_swigregister(JetTable)

class LentPitShift(Effect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _stk.LentPitShift_swiginit(self, _stk.new_LentPitShift(*args))
    __swig_destroy__ = _stk.delete_LentPitShift

    def clear(self):
        return _stk.LentPitShift_clear(self)

    def setShift(self, shift):
        return _stk.LentPitShift_setShift(self, shift)

    def tick(self, *args):
        return _stk.LentPitShift_tick(self, *args)

# Register LentPitShift in _stk:
_stk.LentPitShift_swigregister(LentPitShift)

class Mandolin(Instrmnt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lowestFrequency):
        _stk.Mandolin_swiginit(self, _stk.new_Mandolin(lowestFrequency))
    __swig_destroy__ = _stk.delete_Mandolin

    def clear(self):
        return _stk.Mandolin_clear(self)

    def setDetune(self, detune):
        return _stk.Mandolin_setDetune(self, detune)

    def setBodySize(self, size):
        return _stk.Mandolin_setBodySize(self, size)

    def setPluckPosition(self, position):
        return _stk.Mandolin_setPluckPosition(self, position)

    def setFrequency(self, frequency):
        return _stk.Mandolin_setFrequency(self, frequency)

    def pluck(self, *args):
        return _stk.Mandolin_pluck(self, *args)

    def noteOn(self, frequency, amplitude):
        return _stk.Mandolin_noteOn(self, frequency, amplitude)

    def noteOff(self, amplitude):
        return _stk.Mandolin_noteOff(self, amplitude)

    def controlChange(self, number, value):
        return _stk.Mandolin_controlChange(self, number, value)

    def tick(self, *args):
        return _stk.Mandolin_tick(self, *args)

# Register Mandolin in _stk:
_stk.Mandolin_swigregister(Mandolin)

class Mesh2D(Instrmnt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nX, nY):
        _stk.Mesh2D_swiginit(self, _stk.new_Mesh2D(nX, nY))
    __swig_destroy__ = _stk.delete_Mesh2D

    def clear(self):
        return _stk.Mesh2D_clear(self)

    def setNX(self, lenX):
        return _stk.Mesh2D_setNX(self, lenX)

    def setNY(self, lenY):
        return _stk.Mesh2D_setNY(self, lenY)

    def setInputPosition(self, xFactor, yFactor):
        return _stk.Mesh2D_setInputPosition(self, xFactor, yFactor)

    def setDecay(self, decayFactor):
        return _stk.Mesh2D_setDecay(self, decayFactor)

    def noteOn(self, frequency, amplitude):
        return _stk.Mesh2D_noteOn(self, frequency, amplitude)

    def noteOff(self, amplitude):
        return _stk.Mesh2D_noteOff(self, amplitude)

    def energy(self):
        return _stk.Mesh2D_energy(self)

    def inputTick(self, input):
        return _stk.Mesh2D_inputTick(self, input)

    def controlChange(self, number, value):
        return _stk.Mesh2D_controlChange(self, number, value)

    def tick(self, *args):
        return _stk.Mesh2D_tick(self, *args)

# Register Mesh2D in _stk:
_stk.Mesh2D_swigregister(Mesh2D)

class Messager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.Messager_swiginit(self, _stk.new_Messager())
    __swig_destroy__ = _stk.delete_Messager

    def popMessage(self, message):
        return _stk.Messager_popMessage(self, message)

    def pushMessage(self, message):
        return _stk.Messager_pushMessage(self, message)

    def setScoreFile(self, filename):
        return _stk.Messager_setScoreFile(self, filename)

# Register Messager in _stk:
_stk.Messager_swigregister(Messager)

class MidiFileIn(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fileName):
        _stk.MidiFileIn_swiginit(self, _stk.new_MidiFileIn(fileName))
    __swig_destroy__ = _stk.delete_MidiFileIn

    def getFileFormat(self):
        return _stk.MidiFileIn_getFileFormat(self)

    def getNumberOfTracks(self):
        return _stk.MidiFileIn_getNumberOfTracks(self)

    def getDivision(self):
        return _stk.MidiFileIn_getDivision(self)

    def rewindTrack(self, track=0):
        return _stk.MidiFileIn_rewindTrack(self, track)

    def getTickSeconds(self, track=0):
        return _stk.MidiFileIn_getTickSeconds(self, track)

    def getNextEvent(self, event, track=0):
        return _stk.MidiFileIn_getNextEvent(self, event, track)

    def getNextMidiEvent(self, midiEvent, track=0):
        return _stk.MidiFileIn_getNextMidiEvent(self, midiEvent, track)

# Register MidiFileIn in _stk:
_stk.MidiFileIn_swigregister(MidiFileIn)

class Modal(Instrmnt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _stk.delete_Modal

    def clear(self):
        return _stk.Modal_clear(self)

    def setFrequency(self, frequency):
        return _stk.Modal_setFrequency(self, frequency)

    def setRatioAndRadius(self, modeIndex, ratio, radius):
        return _stk.Modal_setRatioAndRadius(self, modeIndex, ratio, radius)

    def setMasterGain(self, aGain):
        return _stk.Modal_setMasterGain(self, aGain)

    def setDirectGain(self, aGain):
        return _stk.Modal_setDirectGain(self, aGain)

    def setModeGain(self, modeIndex, gain):
        return _stk.Modal_setModeGain(self, modeIndex, gain)

    def strike(self, amplitude):
        return _stk.Modal_strike(self, amplitude)

    def damp(self, amplitude):
        return _stk.Modal_damp(self, amplitude)

    def noteOn(self, frequency, amplitude):
        return _stk.Modal_noteOn(self, frequency, amplitude)

    def noteOff(self, amplitude):
        return _stk.Modal_noteOff(self, amplitude)

    def controlChange(self, number, value):
        return _stk.Modal_controlChange(self, number, value)

    def tick(self, *args):
        return _stk.Modal_tick(self, *args)

# Register Modal in _stk:
_stk.Modal_swigregister(Modal)

class ModalBar(Modal):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.ModalBar_swiginit(self, _stk.new_ModalBar())
    __swig_destroy__ = _stk.delete_ModalBar

    def setStickHardness(self, hardness):
        return _stk.ModalBar_setStickHardness(self, hardness)

    def setStrikePosition(self, position):
        return _stk.ModalBar_setStrikePosition(self, position)

    def setPreset(self, preset):
        return _stk.ModalBar_setPreset(self, preset)

    def setModulationDepth(self, mDepth):
        return _stk.ModalBar_setModulationDepth(self, mDepth)

    def controlChange(self, number, value):
        return _stk.ModalBar_controlChange(self, number, value)

# Register ModalBar in _stk:
_stk.ModalBar_swigregister(ModalBar)

class Modulate(Generator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.Modulate_swiginit(self, _stk.new_Modulate())
    __swig_destroy__ = _stk.delete_Modulate

    def reset(self):
        return _stk.Modulate_reset(self)

    def setVibratoRate(self, rate):
        return _stk.Modulate_setVibratoRate(self, rate)

    def setVibratoGain(self, gain):
        return _stk.Modulate_setVibratoGain(self, gain)

    def setRandomRate(self, rate):
        return _stk.Modulate_setRandomRate(self, rate)

    def setRandomGain(self, gain):
        return _stk.Modulate_setRandomGain(self, gain)

    def lastOut(self):
        return _stk.Modulate_lastOut(self)

    def tick(self, *args):
        return _stk.Modulate_tick(self, *args)

# Register Modulate in _stk:
_stk.Modulate_swigregister(Modulate)

class Moog(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.Moog_swiginit(self, _stk.new_Moog())
    __swig_destroy__ = _stk.delete_Moog

    def setFrequency(self, frequency):
        return _stk.Moog_setFrequency(self, frequency)

    def noteOn(self, frequency, amplitude):
        return _stk.Moog_noteOn(self, frequency, amplitude)

    def setModulationSpeed(self, mSpeed):
        return _stk.Moog_setModulationSpeed(self, mSpeed)

    def setModulationDepth(self, mDepth):
        return _stk.Moog_setModulationDepth(self, mDepth)

    def controlChange(self, number, value):
        return _stk.Moog_controlChange(self, number, value)

    def tick(self, *args):
        return _stk.Moog_tick(self, *args)

# Register Moog in _stk:
_stk.Moog_swigregister(Moog)

class NRev(Effect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, T60=1.0):
        _stk.NRev_swiginit(self, _stk.new_NRev(T60))

    def clear(self):
        return _stk.NRev_clear(self)

    def setT60(self, T60):
        return _stk.NRev_setT60(self, T60)

    def lastOut(self, channel=0):
        return _stk.NRev_lastOut(self, channel)

    def tick(self, *args):
        return _stk.NRev_tick(self, *args)
    __swig_destroy__ = _stk.delete_NRev

# Register NRev in _stk:
_stk.NRev_swigregister(NRev)

class Noise(Generator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, seed=0):
        _stk.Noise_swiginit(self, _stk.new_Noise(seed))

    def setSeed(self, seed=0):
        return _stk.Noise_setSeed(self, seed)

    def lastOut(self):
        return _stk.Noise_lastOut(self)

    def tick(self, *args):
        return _stk.Noise_tick(self, *args)
    __swig_destroy__ = _stk.delete_Noise

# Register Noise in _stk:
_stk.Noise_swigregister(Noise)

class OnePole(Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, thePole=0.9):
        _stk.OnePole_swiginit(self, _stk.new_OnePole(thePole))
    __swig_destroy__ = _stk.delete_OnePole

    def setB0(self, b0):
        return _stk.OnePole_setB0(self, b0)

    def setA1(self, a1):
        return _stk.OnePole_setA1(self, a1)

    def setCoefficients(self, b0, a1, clearState=False):
        return _stk.OnePole_setCoefficients(self, b0, a1, clearState)

    def setPole(self, thePole):
        return _stk.OnePole_setPole(self, thePole)

    def lastOut(self):
        return _stk.OnePole_lastOut(self)

    def tick(self, *args):
        return _stk.OnePole_tick(self, *args)

# Register OnePole in _stk:
_stk.OnePole_swigregister(OnePole)

class OneZero(Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theZero=-1.0):
        _stk.OneZero_swiginit(self, _stk.new_OneZero(theZero))
    __swig_destroy__ = _stk.delete_OneZero

    def setB0(self, b0):
        return _stk.OneZero_setB0(self, b0)

    def setB1(self, b1):
        return _stk.OneZero_setB1(self, b1)

    def setCoefficients(self, b0, b1, clearState=False):
        return _stk.OneZero_setCoefficients(self, b0, b1, clearState)

    def setZero(self, theZero):
        return _stk.OneZero_setZero(self, theZero)

    def lastOut(self):
        return _stk.OneZero_lastOut(self)

    def tick(self, *args):
        return _stk.OneZero_tick(self, *args)

# Register OneZero in _stk:
_stk.OneZero_swigregister(OneZero)

class PRCRev(Effect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, T60=1.0):
        _stk.PRCRev_swiginit(self, _stk.new_PRCRev(T60))

    def clear(self):
        return _stk.PRCRev_clear(self)

    def setT60(self, T60):
        return _stk.PRCRev_setT60(self, T60)

    def lastOut(self, channel=0):
        return _stk.PRCRev_lastOut(self, channel)

    def tick(self, *args):
        return _stk.PRCRev_tick(self, *args)
    __swig_destroy__ = _stk.delete_PRCRev

# Register PRCRev in _stk:
_stk.PRCRev_swigregister(PRCRev)

class PercFlut(FM):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.PercFlut_swiginit(self, _stk.new_PercFlut())
    __swig_destroy__ = _stk.delete_PercFlut

    def setFrequency(self, frequency):
        return _stk.PercFlut_setFrequency(self, frequency)

    def noteOn(self, frequency, amplitude):
        return _stk.PercFlut_noteOn(self, frequency, amplitude)

    def tick(self, *args):
        return _stk.PercFlut_tick(self, *args)

# Register PercFlut in _stk:
_stk.PercFlut_swigregister(PercFlut)

class Phonemes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.Phonemes_swiginit(self, _stk.new_Phonemes())
    __swig_destroy__ = _stk.delete_Phonemes

    @staticmethod
    def name(index):
        return _stk.Phonemes_name(index)

    @staticmethod
    def voiceGain(index):
        return _stk.Phonemes_voiceGain(index)

    @staticmethod
    def noiseGain(index):
        return _stk.Phonemes_noiseGain(index)

    @staticmethod
    def formantFrequency(index, partial):
        return _stk.Phonemes_formantFrequency(index, partial)

    @staticmethod
    def formantRadius(index, partial):
        return _stk.Phonemes_formantRadius(index, partial)

    @staticmethod
    def formantGain(index, partial):
        return _stk.Phonemes_formantGain(index, partial)

# Register Phonemes in _stk:
_stk.Phonemes_swigregister(Phonemes)

class PitShift(Effect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.PitShift_swiginit(self, _stk.new_PitShift())

    def clear(self):
        return _stk.PitShift_clear(self)

    def setShift(self, shift):
        return _stk.PitShift_setShift(self, shift)

    def lastOut(self):
        return _stk.PitShift_lastOut(self)

    def tick(self, *args):
        return _stk.PitShift_tick(self, *args)
    __swig_destroy__ = _stk.delete_PitShift

# Register PitShift in _stk:
_stk.PitShift_swigregister(PitShift)

class Plucked(Instrmnt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lowestFrequency=10.0):
        _stk.Plucked_swiginit(self, _stk.new_Plucked(lowestFrequency))
    __swig_destroy__ = _stk.delete_Plucked

    def clear(self):
        return _stk.Plucked_clear(self)

    def setFrequency(self, frequency):
        return _stk.Plucked_setFrequency(self, frequency)

    def pluck(self, amplitude):
        return _stk.Plucked_pluck(self, amplitude)

    def noteOn(self, frequency, amplitude):
        return _stk.Plucked_noteOn(self, frequency, amplitude)

    def noteOff(self, amplitude):
        return _stk.Plucked_noteOff(self, amplitude)

    def tick(self, *args):
        return _stk.Plucked_tick(self, *args)

# Register Plucked in _stk:
_stk.Plucked_swigregister(Plucked)

class PoleZero(Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.PoleZero_swiginit(self, _stk.new_PoleZero())
    __swig_destroy__ = _stk.delete_PoleZero

    def setB0(self, b0):
        return _stk.PoleZero_setB0(self, b0)

    def setB1(self, b1):
        return _stk.PoleZero_setB1(self, b1)

    def setA1(self, a1):
        return _stk.PoleZero_setA1(self, a1)

    def setCoefficients(self, b0, b1, a1, clearState=False):
        return _stk.PoleZero_setCoefficients(self, b0, b1, a1, clearState)

    def setAllpass(self, coefficient):
        return _stk.PoleZero_setAllpass(self, coefficient)

    def setBlockZero(self, thePole=0.99):
        return _stk.PoleZero_setBlockZero(self, thePole)

    def lastOut(self):
        return _stk.PoleZero_lastOut(self)

    def tick(self, *args):
        return _stk.PoleZero_tick(self, *args)

# Register PoleZero in _stk:
_stk.PoleZero_swigregister(PoleZero)

class Recorder(Instrmnt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.Recorder_swiginit(self, _stk.new_Recorder())
    __swig_destroy__ = _stk.delete_Recorder

    def clear(self):
        return _stk.Recorder_clear(self)

    def setFrequency(self, val):
        return _stk.Recorder_setFrequency(self, val)

    def startBlowing(self, amplitude, rate):
        return _stk.Recorder_startBlowing(self, amplitude, rate)

    def stopBlowing(self, rate):
        return _stk.Recorder_stopBlowing(self, rate)

    def noteOn(self, frequency, amplitude):
        return _stk.Recorder_noteOn(self, frequency, amplitude)

    def noteOff(self, amplitude):
        return _stk.Recorder_noteOff(self, amplitude)

    def controlChange(self, number, value):
        return _stk.Recorder_controlChange(self, number, value)

    def tick(self, *args):
        return _stk.Recorder_tick(self, *args)

    def setBlowPressure(self, val):
        return _stk.Recorder_setBlowPressure(self, val)

    def setVibratoGain(self, val):
        return _stk.Recorder_setVibratoGain(self, val)

    def setVibratoFrequency(self, val):
        return _stk.Recorder_setVibratoFrequency(self, val)

    def setNoiseGain(self, val):
        return _stk.Recorder_setNoiseGain(self, val)

    def setBreathCutoff(self, val):
        return _stk.Recorder_setBreathCutoff(self, val)

    def setSoftness(self, val):
        return _stk.Recorder_setSoftness(self, val)

# Register Recorder in _stk:
_stk.Recorder_swigregister(Recorder)

class ReedTable(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.ReedTable_swiginit(self, _stk.new_ReedTable())

    def setOffset(self, offset):
        return _stk.ReedTable_setOffset(self, offset)

    def setSlope(self, slope):
        return _stk.ReedTable_setSlope(self, slope)

    def tick(self, *args):
        return _stk.ReedTable_tick(self, *args)
    __swig_destroy__ = _stk.delete_ReedTable

# Register ReedTable in _stk:
_stk.ReedTable_swigregister(ReedTable)

class Resonate(Instrmnt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.Resonate_swiginit(self, _stk.new_Resonate())
    __swig_destroy__ = _stk.delete_Resonate

    def setResonance(self, frequency, radius):
        return _stk.Resonate_setResonance(self, frequency, radius)

    def setNotch(self, frequency, radius):
        return _stk.Resonate_setNotch(self, frequency, radius)

    def setEqualGainZeroes(self):
        return _stk.Resonate_setEqualGainZeroes(self)

    def keyOn(self):
        return _stk.Resonate_keyOn(self)

    def keyOff(self):
        return _stk.Resonate_keyOff(self)

    def noteOn(self, frequency, amplitude):
        return _stk.Resonate_noteOn(self, frequency, amplitude)

    def noteOff(self, amplitude):
        return _stk.Resonate_noteOff(self, amplitude)

    def controlChange(self, number, value):
        return _stk.Resonate_controlChange(self, number, value)

    def tick(self, *args):
        return _stk.Resonate_tick(self, *args)

# Register Resonate in _stk:
_stk.Resonate_swigregister(Resonate)

class Rhodey(FM):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.Rhodey_swiginit(self, _stk.new_Rhodey())
    __swig_destroy__ = _stk.delete_Rhodey

    def setFrequency(self, frequency):
        return _stk.Rhodey_setFrequency(self, frequency)

    def noteOn(self, frequency, amplitude):
        return _stk.Rhodey_noteOn(self, frequency, amplitude)

    def tick(self, *args):
        return _stk.Rhodey_tick(self, *args)

# Register Rhodey in _stk:
_stk.Rhodey_swigregister(Rhodey)

class Saxofony(Instrmnt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lowestFrequency):
        _stk.Saxofony_swiginit(self, _stk.new_Saxofony(lowestFrequency))
    __swig_destroy__ = _stk.delete_Saxofony

    def clear(self):
        return _stk.Saxofony_clear(self)

    def setFrequency(self, frequency):
        return _stk.Saxofony_setFrequency(self, frequency)

    def setBlowPosition(self, aPosition):
        return _stk.Saxofony_setBlowPosition(self, aPosition)

    def startBlowing(self, amplitude, rate):
        return _stk.Saxofony_startBlowing(self, amplitude, rate)

    def stopBlowing(self, rate):
        return _stk.Saxofony_stopBlowing(self, rate)

    def noteOn(self, frequency, amplitude):
        return _stk.Saxofony_noteOn(self, frequency, amplitude)

    def noteOff(self, amplitude):
        return _stk.Saxofony_noteOff(self, amplitude)

    def controlChange(self, number, value):
        return _stk.Saxofony_controlChange(self, number, value)

    def tick(self, *args):
        return _stk.Saxofony_tick(self, *args)

# Register Saxofony in _stk:
_stk.Saxofony_swigregister(Saxofony)

class Shakers(Instrmnt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type=0):
        _stk.Shakers_swiginit(self, _stk.new_Shakers(type))

    def noteOn(self, instrument, amplitude):
        return _stk.Shakers_noteOn(self, instrument, amplitude)

    def noteOff(self, amplitude):
        return _stk.Shakers_noteOff(self, amplitude)

    def controlChange(self, number, value):
        return _stk.Shakers_controlChange(self, number, value)

    def tick(self, *args):
        return _stk.Shakers_tick(self, *args)
    __swig_destroy__ = _stk.delete_Shakers

# Register Shakers in _stk:
_stk.Shakers_swigregister(Shakers)

class Simple(Instrmnt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.Simple_swiginit(self, _stk.new_Simple())
    __swig_destroy__ = _stk.delete_Simple

    def setFrequency(self, frequency):
        return _stk.Simple_setFrequency(self, frequency)

    def keyOn(self):
        return _stk.Simple_keyOn(self)

    def keyOff(self):
        return _stk.Simple_keyOff(self)

    def noteOn(self, frequency, amplitude):
        return _stk.Simple_noteOn(self, frequency, amplitude)

    def noteOff(self, amplitude):
        return _stk.Simple_noteOff(self, amplitude)

    def controlChange(self, number, value):
        return _stk.Simple_controlChange(self, number, value)

    def tick(self, *args):
        return _stk.Simple_tick(self, *args)

# Register Simple in _stk:
_stk.Simple_swigregister(Simple)

class SineWave(Generator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.SineWave_swiginit(self, _stk.new_SineWave())
    __swig_destroy__ = _stk.delete_SineWave

    def reset(self):
        return _stk.SineWave_reset(self)

    def setRate(self, rate):
        return _stk.SineWave_setRate(self, rate)

    def setFrequency(self, frequency):
        return _stk.SineWave_setFrequency(self, frequency)

    def addTime(self, time):
        return _stk.SineWave_addTime(self, time)

    def addPhase(self, phase):
        return _stk.SineWave_addPhase(self, phase)

    def addPhaseOffset(self, phaseOffset):
        return _stk.SineWave_addPhaseOffset(self, phaseOffset)

    def lastOut(self):
        return _stk.SineWave_lastOut(self)

    def tick(self, *args):
        return _stk.SineWave_tick(self, *args)

# Register SineWave in _stk:
_stk.SineWave_swigregister(SineWave)

class SingWave(Generator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fileName, raw=False):
        _stk.SingWave_swiginit(self, _stk.new_SingWave(fileName, raw))
    __swig_destroy__ = _stk.delete_SingWave

    def reset(self):
        return _stk.SingWave_reset(self)

    def normalize(self, *args):
        return _stk.SingWave_normalize(self, *args)

    def setFrequency(self, frequency):
        return _stk.SingWave_setFrequency(self, frequency)

    def setVibratoRate(self, rate):
        return _stk.SingWave_setVibratoRate(self, rate)

    def setVibratoGain(self, gain):
        return _stk.SingWave_setVibratoGain(self, gain)

    def setRandomGain(self, gain):
        return _stk.SingWave_setRandomGain(self, gain)

    def setSweepRate(self, rate):
        return _stk.SingWave_setSweepRate(self, rate)

    def setGainRate(self, rate):
        return _stk.SingWave_setGainRate(self, rate)

    def setGainTarget(self, target):
        return _stk.SingWave_setGainTarget(self, target)

    def noteOn(self):
        return _stk.SingWave_noteOn(self)

    def noteOff(self):
        return _stk.SingWave_noteOff(self)

    def lastOut(self):
        return _stk.SingWave_lastOut(self)

    def tick(self, *args):
        return _stk.SingWave_tick(self, *args)

# Register SingWave in _stk:
_stk.SingWave_swigregister(SingWave)

class Sitar(Instrmnt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lowestFrequency=8.0):
        _stk.Sitar_swiginit(self, _stk.new_Sitar(lowestFrequency))
    __swig_destroy__ = _stk.delete_Sitar

    def clear(self):
        return _stk.Sitar_clear(self)

    def setFrequency(self, frequency):
        return _stk.Sitar_setFrequency(self, frequency)

    def pluck(self, amplitude):
        return _stk.Sitar_pluck(self, amplitude)

    def noteOn(self, frequency, amplitude):
        return _stk.Sitar_noteOn(self, frequency, amplitude)

    def noteOff(self, amplitude):
        return _stk.Sitar_noteOff(self, amplitude)

    def tick(self, *args):
        return _stk.Sitar_tick(self, *args)

# Register Sitar in _stk:
_stk.Sitar_swigregister(Sitar)

class Sphere(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, radius=1.0):
        _stk.Sphere_swiginit(self, _stk.new_Sphere(radius))

    def setPosition(self, x, y, z):
        return _stk.Sphere_setPosition(self, x, y, z)

    def setVelocity(self, x, y, z):
        return _stk.Sphere_setVelocity(self, x, y, z)

    def setRadius(self, radius):
        return _stk.Sphere_setRadius(self, radius)

    def setMass(self, mass):
        return _stk.Sphere_setMass(self, mass)

    def getPosition(self):
        return _stk.Sphere_getPosition(self)

    def getRelativePosition(self, position):
        return _stk.Sphere_getRelativePosition(self, position)

    def getVelocity(self, velocity):
        return _stk.Sphere_getVelocity(self, velocity)

    def isInside(self, position):
        return _stk.Sphere_isInside(self, position)

    def getRadius(self):
        return _stk.Sphere_getRadius(self)

    def getMass(self):
        return _stk.Sphere_getMass(self)

    def addVelocity(self, x, y, z):
        return _stk.Sphere_addVelocity(self, x, y, z)

    def tick(self, timeIncrement):
        return _stk.Sphere_tick(self, timeIncrement)
    __swig_destroy__ = _stk.delete_Sphere

# Register Sphere in _stk:
_stk.Sphere_swigregister(Sphere)

class StifKarp(Instrmnt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lowestFrequency=10.0):
        _stk.StifKarp_swiginit(self, _stk.new_StifKarp(lowestFrequency))
    __swig_destroy__ = _stk.delete_StifKarp

    def clear(self):
        return _stk.StifKarp_clear(self)

    def setFrequency(self, frequency):
        return _stk.StifKarp_setFrequency(self, frequency)

    def setStretch(self, stretch):
        return _stk.StifKarp_setStretch(self, stretch)

    def setPickupPosition(self, position):
        return _stk.StifKarp_setPickupPosition(self, position)

    def setBaseLoopGain(self, aGain):
        return _stk.StifKarp_setBaseLoopGain(self, aGain)

    def pluck(self, amplitude):
        return _stk.StifKarp_pluck(self, amplitude)

    def noteOn(self, frequency, amplitude):
        return _stk.StifKarp_noteOn(self, frequency, amplitude)

    def noteOff(self, amplitude):
        return _stk.StifKarp_noteOff(self, amplitude)

    def controlChange(self, number, value):
        return _stk.StifKarp_controlChange(self, number, value)

    def tick(self, *args):
        return _stk.StifKarp_tick(self, *args)

# Register StifKarp in _stk:
_stk.StifKarp_swigregister(StifKarp)

class TapDelay(Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _stk.TapDelay_swiginit(self, _stk.new_TapDelay(*args))
    __swig_destroy__ = _stk.delete_TapDelay

    def setMaximumDelay(self, delay):
        return _stk.TapDelay_setMaximumDelay(self, delay)

    def setTapDelays(self, taps):
        return _stk.TapDelay_setTapDelays(self, taps)

    def getTapDelays(self):
        return _stk.TapDelay_getTapDelays(self)

    def lastOut(self, tap=0):
        return _stk.TapDelay_lastOut(self, tap)

    def tick(self, *args):
        return _stk.TapDelay_tick(self, *args)

# Register TapDelay in _stk:
_stk.TapDelay_swigregister(TapDelay)

class TubeBell(FM):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.TubeBell_swiginit(self, _stk.new_TubeBell())
    __swig_destroy__ = _stk.delete_TubeBell

    def noteOn(self, frequency, amplitude):
        return _stk.TubeBell_noteOn(self, frequency, amplitude)

    def tick(self, *args):
        return _stk.TubeBell_tick(self, *args)

# Register TubeBell in _stk:
_stk.TubeBell_swigregister(TubeBell)

class Twang(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lowestFrequency=50.0):
        _stk.Twang_swiginit(self, _stk.new_Twang(lowestFrequency))

    def clear(self):
        return _stk.Twang_clear(self)

    def setLowestFrequency(self, frequency):
        return _stk.Twang_setLowestFrequency(self, frequency)

    def setFrequency(self, frequency):
        return _stk.Twang_setFrequency(self, frequency)

    def setPluckPosition(self, position):
        return _stk.Twang_setPluckPosition(self, position)

    def setLoopGain(self, loopGain):
        return _stk.Twang_setLoopGain(self, loopGain)

    def lastOut(self):
        return _stk.Twang_lastOut(self)

    def tick(self, *args):
        return _stk.Twang_tick(self, *args)
    __swig_destroy__ = _stk.delete_Twang

# Register Twang in _stk:
_stk.Twang_swigregister(Twang)

class TwoPole(Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.TwoPole_swiginit(self, _stk.new_TwoPole())
    __swig_destroy__ = _stk.delete_TwoPole

    def ignoreSampleRateChange(self, ignore=True):
        return _stk.TwoPole_ignoreSampleRateChange(self, ignore)

    def setB0(self, b0):
        return _stk.TwoPole_setB0(self, b0)

    def setA1(self, a1):
        return _stk.TwoPole_setA1(self, a1)

    def setA2(self, a2):
        return _stk.TwoPole_setA2(self, a2)

    def setCoefficients(self, b0, a1, a2, clearState=False):
        return _stk.TwoPole_setCoefficients(self, b0, a1, a2, clearState)

    def setResonance(self, frequency, radius, normalize=False):
        return _stk.TwoPole_setResonance(self, frequency, radius, normalize)

    def lastOut(self):
        return _stk.TwoPole_lastOut(self)

    def tick(self, *args):
        return _stk.TwoPole_tick(self, *args)

# Register TwoPole in _stk:
_stk.TwoPole_swigregister(TwoPole)

class TwoZero(Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.TwoZero_swiginit(self, _stk.new_TwoZero())
    __swig_destroy__ = _stk.delete_TwoZero

    def ignoreSampleRateChange(self, ignore=True):
        return _stk.TwoZero_ignoreSampleRateChange(self, ignore)

    def setB0(self, b0):
        return _stk.TwoZero_setB0(self, b0)

    def setB1(self, b1):
        return _stk.TwoZero_setB1(self, b1)

    def setB2(self, b2):
        return _stk.TwoZero_setB2(self, b2)

    def setCoefficients(self, b0, b1, b2, clearState=False):
        return _stk.TwoZero_setCoefficients(self, b0, b1, b2, clearState)

    def setNotch(self, frequency, radius):
        return _stk.TwoZero_setNotch(self, frequency, radius)

    def lastOut(self):
        return _stk.TwoZero_lastOut(self)

    def tick(self, *args):
        return _stk.TwoZero_tick(self, *args)

# Register TwoZero in _stk:
_stk.TwoZero_swigregister(TwoZero)

class Vector3D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x=0.0, y=0.0, z=0.0):
        _stk.Vector3D_swiginit(self, _stk.new_Vector3D(x, y, z))

    def getX(self):
        return _stk.Vector3D_getX(self)

    def getY(self):
        return _stk.Vector3D_getY(self)

    def getZ(self):
        return _stk.Vector3D_getZ(self)

    def getLength(self):
        return _stk.Vector3D_getLength(self)

    def setXYZ(self, x, y, z):
        return _stk.Vector3D_setXYZ(self, x, y, z)

    def setX(self, x):
        return _stk.Vector3D_setX(self, x)

    def setY(self, y):
        return _stk.Vector3D_setY(self, y)

    def setZ(self, z):
        return _stk.Vector3D_setZ(self, z)
    __swig_destroy__ = _stk.delete_Vector3D

# Register Vector3D in _stk:
_stk.Vector3D_swigregister(Vector3D)

class VoicForm(Instrmnt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.VoicForm_swiginit(self, _stk.new_VoicForm())
    __swig_destroy__ = _stk.delete_VoicForm

    def clear(self):
        return _stk.VoicForm_clear(self)

    def setFrequency(self, frequency):
        return _stk.VoicForm_setFrequency(self, frequency)

    def setPhoneme(self, phoneme):
        return _stk.VoicForm_setPhoneme(self, phoneme)

    def setVoiced(self, vGain):
        return _stk.VoicForm_setVoiced(self, vGain)

    def setUnVoiced(self, nGain):
        return _stk.VoicForm_setUnVoiced(self, nGain)

    def setFilterSweepRate(self, whichOne, rate):
        return _stk.VoicForm_setFilterSweepRate(self, whichOne, rate)

    def setPitchSweepRate(self, rate):
        return _stk.VoicForm_setPitchSweepRate(self, rate)

    def speak(self):
        return _stk.VoicForm_speak(self)

    def quiet(self):
        return _stk.VoicForm_quiet(self)

    def noteOn(self, frequency, amplitude):
        return _stk.VoicForm_noteOn(self, frequency, amplitude)

    def noteOff(self, amplitude):
        return _stk.VoicForm_noteOff(self, amplitude)

    def controlChange(self, number, value):
        return _stk.VoicForm_controlChange(self, number, value)

    def tick(self, *args):
        return _stk.VoicForm_tick(self, *args)

# Register VoicForm in _stk:
_stk.VoicForm_swigregister(VoicForm)

class Voicer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, decayTime=0.2):
        _stk.Voicer_swiginit(self, _stk.new_Voicer(decayTime))

    def addInstrument(self, instrument, group=0):
        return _stk.Voicer_addInstrument(self, instrument, group)

    def removeInstrument(self, instrument):
        return _stk.Voicer_removeInstrument(self, instrument)

    def noteOn(self, noteNumber, amplitude, group=0):
        return _stk.Voicer_noteOn(self, noteNumber, amplitude, group)

    def noteOff(self, *args):
        return _stk.Voicer_noteOff(self, *args)

    def setFrequency(self, *args):
        return _stk.Voicer_setFrequency(self, *args)

    def pitchBend(self, *args):
        return _stk.Voicer_pitchBend(self, *args)

    def controlChange(self, *args):
        return _stk.Voicer_controlChange(self, *args)

    def silence(self):
        return _stk.Voicer_silence(self)

    def channelsOut(self):
        return _stk.Voicer_channelsOut(self)

    def lastFrame(self):
        return _stk.Voicer_lastFrame(self)

    def lastOut(self, channel=0):
        return _stk.Voicer_lastOut(self, channel)

    def tick(self, *args):
        return _stk.Voicer_tick(self, *args)
    __swig_destroy__ = _stk.delete_Voicer

# Register Voicer in _stk:
_stk.Voicer_swigregister(Voicer)

class Whistle(Instrmnt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.Whistle_swiginit(self, _stk.new_Whistle())
    __swig_destroy__ = _stk.delete_Whistle

    def clear(self):
        return _stk.Whistle_clear(self)

    def setFrequency(self, frequency):
        return _stk.Whistle_setFrequency(self, frequency)

    def startBlowing(self, amplitude, rate):
        return _stk.Whistle_startBlowing(self, amplitude, rate)

    def stopBlowing(self, rate):
        return _stk.Whistle_stopBlowing(self, rate)

    def noteOn(self, frequency, amplitude):
        return _stk.Whistle_noteOn(self, frequency, amplitude)

    def noteOff(self, amplitude):
        return _stk.Whistle_noteOff(self, amplitude)

    def controlChange(self, number, value):
        return _stk.Whistle_controlChange(self, number, value)

    def tick(self, *args):
        return _stk.Whistle_tick(self, *args)

# Register Whistle in _stk:
_stk.Whistle_swigregister(Whistle)

class Wurley(FM):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.Wurley_swiginit(self, _stk.new_Wurley())
    __swig_destroy__ = _stk.delete_Wurley

    def setFrequency(self, frequency):
        return _stk.Wurley_setFrequency(self, frequency)

    def noteOn(self, frequency, amplitude):
        return _stk.Wurley_noteOn(self, frequency, amplitude)

    def tick(self, *args):
        return _stk.Wurley_tick(self, *args)

# Register Wurley in _stk:
_stk.Wurley_swigregister(Wurley)

class Socket(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    PROTO_TCP = _stk.Socket_PROTO_TCP
    PROTO_UDP = _stk.Socket_PROTO_UDP
    __swig_destroy__ = _stk.delete_Socket

    @staticmethod
    def close(socket):
        return _stk.Socket_close(socket)

    def id(self):
        return _stk.Socket_id(self)

    def port(self):
        return _stk.Socket_port(self)

    @staticmethod
    def isValid(socket):
        return _stk.Socket_isValid(socket)

    @staticmethod
    def setBlocking(socket, enable):
        return _stk.Socket_setBlocking(socket, enable)

    @staticmethod
    def writeBuffer(*args):
        return _stk.Socket_writeBuffer(*args)

    @staticmethod
    def readBuffer(*args):
        return _stk.Socket_readBuffer(*args)

# Register Socket in _stk:
_stk.Socket_swigregister(Socket)

class TcpClient(Socket):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _stk.TcpClient_swiginit(self, _stk.new_TcpClient(*args))
    __swig_destroy__ = _stk.delete_TcpClient

    def connect(self, *args):
        return _stk.TcpClient_connect(self, *args)

    def writeBuffer(self, buffer, bufferSize, flags=0):
        return _stk.TcpClient_writeBuffer(self, buffer, bufferSize, flags)

    def readBuffer(self, buffer, bufferSize, flags=0):
        return _stk.TcpClient_readBuffer(self, buffer, bufferSize, flags)

# Register TcpClient in _stk:
_stk.TcpClient_swigregister(TcpClient)

class TcpServer(Socket):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, port=2006):
        _stk.TcpServer_swiginit(self, _stk.new_TcpServer(port))
    __swig_destroy__ = _stk.delete_TcpServer

    def accept(self):
        return _stk.TcpServer_accept(self)

    def writeBuffer(self, buffer, bufferSize, flags=0):
        return _stk.TcpServer_writeBuffer(self, buffer, bufferSize, flags)

    def readBuffer(self, buffer, bufferSize, flags=0):
        return _stk.TcpServer_readBuffer(self, buffer, bufferSize, flags)

# Register TcpServer in _stk:
_stk.TcpServer_swigregister(TcpServer)

class UdpSocket(Socket):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, port=2006):
        _stk.UdpSocket_swiginit(self, _stk.new_UdpSocket(port))
    __swig_destroy__ = _stk.delete_UdpSocket

    def setDestination(self, *args):
        return _stk.UdpSocket_setDestination(self, *args)

    def writeBuffer(self, buffer, bufferSize, flags=0):
        return _stk.UdpSocket_writeBuffer(self, buffer, bufferSize, flags)

    def readBuffer(self, buffer, bufferSize, flags=0):
        return _stk.UdpSocket_readBuffer(self, buffer, bufferSize, flags)

    def writeBufferTo(self, *args):
        return _stk.UdpSocket_writeBufferTo(self, *args)

# Register UdpSocket in _stk:
_stk.UdpSocket_swigregister(UdpSocket)

class Mutex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.Mutex_swiginit(self, _stk.new_Mutex())
    __swig_destroy__ = _stk.delete_Mutex

    def lock(self):
        return _stk.Mutex_lock(self)

    def unlock(self):
        return _stk.Mutex_unlock(self)

    def wait(self):
        return _stk.Mutex_wait(self)

    def signal(self):
        return _stk.Mutex_signal(self)

# Register Mutex in _stk:
_stk.Mutex_swigregister(Mutex)

class Thread(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _stk.Thread_swiginit(self, _stk.new_Thread())
    __swig_destroy__ = _stk.delete_Thread

    def start(self, routine, ptr=None):
        return _stk.Thread_start(self, routine, ptr)

    def cancel(self):
        return _stk.Thread_cancel(self)

    def wait(self):
        return _stk.Thread_wait(self)

    def testCancel(self):
        return _stk.Thread_testCancel(self)

# Register Thread in _stk:
_stk.Thread_swigregister(Thread)

class InetWvIn(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, bufferFrames=1024, nBuffers=8):
        _stk.InetWvIn_swiginit(self, _stk.new_InetWvIn(bufferFrames, nBuffers))
    __swig_destroy__ = _stk.delete_InetWvIn

    def listen(self, *args):
        return _stk.InetWvIn_listen(self, *args)

    def isConnected(self):
        return _stk.InetWvIn_isConnected(self)

    def lastOut(self, channel=0):
        return _stk.InetWvIn_lastOut(self, channel)

    def tick(self, *args):
        return _stk.InetWvIn_tick(self, *args)

    def receive(self):
        return _stk.InetWvIn_receive(self)

# Register InetWvIn in _stk:
_stk.InetWvIn_swigregister(InetWvIn)

class InetWvOut(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _stk.InetWvOut_swiginit(self, _stk.new_InetWvOut(*args))
    __swig_destroy__ = _stk.delete_InetWvOut

    def connect(self, *args):
        return _stk.InetWvOut_connect(self, *args)

    def disconnect(self):
        return _stk.InetWvOut_disconnect(self)

    def tick(self, *args):
        return _stk.InetWvOut_tick(self, *args)

# Register InetWvOut in _stk:
_stk.InetWvOut_swigregister(InetWvOut)

class RtWvIn(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _stk.RtWvIn_swiginit(self, _stk.new_RtWvIn(*args))
    __swig_destroy__ = _stk.delete_RtWvIn

    def start(self):
        return _stk.RtWvIn_start(self)

    def stop(self):
        return _stk.RtWvIn_stop(self)

    def lastOut(self, channel=0):
        return _stk.RtWvIn_lastOut(self, channel)

    def tick(self, *args):
        return _stk.RtWvIn_tick(self, *args)

    def fillBuffer(self, buffer, nFrames):
        return _stk.RtWvIn_fillBuffer(self, buffer, nFrames)

# Register RtWvIn in _stk:
_stk.RtWvIn_swigregister(RtWvIn)

class RtWvOut(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _stk.RtWvOut_swiginit(self, _stk.new_RtWvOut(*args))
    __swig_destroy__ = _stk.delete_RtWvOut

    def start(self):
        return _stk.RtWvOut_start(self)

    def stop(self):
        return _stk.RtWvOut_stop(self)

    def tick(self, *args):
        return _stk.RtWvOut_tick(self, *args)

    def readBuffer(self, buffer, frameCount):
        return _stk.RtWvOut_readBuffer(self, buffer, frameCount)

# Register RtWvOut in _stk:
_stk.RtWvOut_swigregister(RtWvOut)

class Sampler(Instrmnt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _stk.delete_Sampler

    def setFrequency(self, frequency):
        return _stk.Sampler_setFrequency(self, frequency)

    def keyOn(self):
        return _stk.Sampler_keyOn(self)

    def keyOff(self):
        return _stk.Sampler_keyOff(self)

    def noteOff(self, amplitude):
        return _stk.Sampler_noteOff(self, amplitude)

    def controlChange(self, number, value):
        return _stk.Sampler_controlChange(self, number, value)

    def tick(self, *args):
        return _stk.Sampler_tick(self, *args)

# Register Sampler in _stk:
_stk.Sampler_swigregister(Sampler)



