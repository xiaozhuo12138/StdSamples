/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  do { if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } } while (0)


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all its bases (recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metamethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows skipping searching metamethod in the given class and immediately going to searching in bases. skip_check
 * is not carried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metamethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result = 0;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Eigen__ArrayT_double_Eigen__Dynamic_Eigen__Dynamic_t swig_types[0]
#define SWIGTYPE_p_Eigen__ArrayT_float_Eigen__Dynamic_Eigen__Dynamic_t swig_types[1]
#define SWIGTYPE_p_Eigen__MatrixT_double_1_Eigen__Dynamic_t swig_types[2]
#define SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_1_t swig_types[3]
#define SWIGTYPE_p_Eigen__MatrixT_float_1_Eigen__Dynamic_t swig_types[4]
#define SWIGTYPE_p_Eigen__MatrixT_float_Eigen__Dynamic_1_t swig_types[5]
#define SWIGTYPE_p_SWIGLUA_REF swig_types[6]
#define SWIGTYPE_p_SimpleEigen__Array2DT_double_t swig_types[7]
#define SWIGTYPE_p_SimpleEigen__Array2DT_float_t swig_types[8]
#define SWIGTYPE_p_SimpleEigen__Array2DT_int_t swig_types[9]
#define SWIGTYPE_p_SimpleEigen__Array2DT_long_double_t swig_types[10]
#define SWIGTYPE_p_SimpleEigen__Array2DT_long_long_t swig_types[11]
#define SWIGTYPE_p_SimpleEigen__Array2DT_long_t swig_types[12]
#define SWIGTYPE_p_SimpleEigen__Array2DT_short_t swig_types[13]
#define SWIGTYPE_p_SimpleEigen__Array2DT_signed_char_t swig_types[14]
#define SWIGTYPE_p_SimpleEigen__Array2DT_unsigned_char_t swig_types[15]
#define SWIGTYPE_p_SimpleEigen__Array2DT_unsigned_int_t swig_types[16]
#define SWIGTYPE_p_SimpleEigen__Array2DT_unsigned_long_long_t swig_types[17]
#define SWIGTYPE_p_SimpleEigen__Array2DT_unsigned_long_t swig_types[18]
#define SWIGTYPE_p_SimpleEigen__Array2DT_unsigned_short_t swig_types[19]
#define SWIGTYPE_p_SimpleEigen__ArrayT_double_t swig_types[20]
#define SWIGTYPE_p_SimpleEigen__ArrayT_float_t swig_types[21]
#define SWIGTYPE_p_SimpleEigen__ArrayT_int_t swig_types[22]
#define SWIGTYPE_p_SimpleEigen__ArrayT_long_double_t swig_types[23]
#define SWIGTYPE_p_SimpleEigen__ArrayT_long_long_t swig_types[24]
#define SWIGTYPE_p_SimpleEigen__ArrayT_long_t swig_types[25]
#define SWIGTYPE_p_SimpleEigen__ArrayT_short_t swig_types[26]
#define SWIGTYPE_p_SimpleEigen__ArrayT_signed_char_t swig_types[27]
#define SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_char_t swig_types[28]
#define SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_int_t swig_types[29]
#define SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_long_t swig_types[30]
#define SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_t swig_types[31]
#define SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_short_t swig_types[32]
#define SWIGTYPE_p_SimpleEigen__Base swig_types[33]
#define SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t swig_types[34]
#define SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t swig_types[35]
#define SWIGTYPE_p_SimpleEigen__ColMatrixViewT_double_t swig_types[36]
#define SWIGTYPE_p_SimpleEigen__ColMatrixViewT_float_t swig_types[37]
#define SWIGTYPE_p_SimpleEigen__ColVectorT_double_t swig_types[38]
#define SWIGTYPE_p_SimpleEigen__ColVectorT_float_t swig_types[39]
#define SWIGTYPE_p_SimpleEigen__ColVectorT_int_t swig_types[40]
#define SWIGTYPE_p_SimpleEigen__ColVectorT_long_double_t swig_types[41]
#define SWIGTYPE_p_SimpleEigen__ColVectorT_long_long_t swig_types[42]
#define SWIGTYPE_p_SimpleEigen__ColVectorT_long_t swig_types[43]
#define SWIGTYPE_p_SimpleEigen__ColVectorT_short_t swig_types[44]
#define SWIGTYPE_p_SimpleEigen__ColVectorT_signed_char_t swig_types[45]
#define SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_char_t swig_types[46]
#define SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_int_t swig_types[47]
#define SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_long_t swig_types[48]
#define SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_t swig_types[49]
#define SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_short_t swig_types[50]
#define SWIGTYPE_p_SimpleEigen__ComplexT_double_t swig_types[51]
#define SWIGTYPE_p_SimpleEigen__ComplexT_float_t swig_types[52]
#define SWIGTYPE_p_SimpleEigen__Eigen2DArrayT_double_t swig_types[53]
#define SWIGTYPE_p_SimpleEigen__Eigen2DArrayT_float_t swig_types[54]
#define SWIGTYPE_p_SimpleEigen__EigenArray2DT_double_t swig_types[55]
#define SWIGTYPE_p_SimpleEigen__EigenArray2DT_float_t swig_types[56]
#define SWIGTYPE_p_SimpleEigen__EigenArrayT_double_t swig_types[57]
#define SWIGTYPE_p_SimpleEigen__EigenArrayT_float_t swig_types[58]
#define SWIGTYPE_p_SimpleEigen__EigenCol2DArrayT_double_t swig_types[59]
#define SWIGTYPE_p_SimpleEigen__EigenCol2DArrayT_float_t swig_types[60]
#define SWIGTYPE_p_SimpleEigen__EigenColMatrixT_double_t swig_types[61]
#define SWIGTYPE_p_SimpleEigen__EigenColMatrixT_float_t swig_types[62]
#define SWIGTYPE_p_SimpleEigen__EigenColVectorT_double_t swig_types[63]
#define SWIGTYPE_p_SimpleEigen__EigenColVectorT_float_t swig_types[64]
#define SWIGTYPE_p_SimpleEigen__EigenMatrixT_double_t swig_types[65]
#define SWIGTYPE_p_SimpleEigen__EigenMatrixT_float_t swig_types[66]
#define SWIGTYPE_p_SimpleEigen__EigenRowVectorT_double_t swig_types[67]
#define SWIGTYPE_p_SimpleEigen__EigenRowVectorT_float_t swig_types[68]
#define SWIGTYPE_p_SimpleEigen__MatrixT_double_t swig_types[69]
#define SWIGTYPE_p_SimpleEigen__MatrixT_float_t swig_types[70]
#define SWIGTYPE_p_SimpleEigen__MatrixT_int_t swig_types[71]
#define SWIGTYPE_p_SimpleEigen__MatrixT_long_double_t swig_types[72]
#define SWIGTYPE_p_SimpleEigen__MatrixT_long_long_t swig_types[73]
#define SWIGTYPE_p_SimpleEigen__MatrixT_long_t swig_types[74]
#define SWIGTYPE_p_SimpleEigen__MatrixT_short_t swig_types[75]
#define SWIGTYPE_p_SimpleEigen__MatrixT_signed_char_t swig_types[76]
#define SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_char_t swig_types[77]
#define SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_int_t swig_types[78]
#define SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_long_t swig_types[79]
#define SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_t swig_types[80]
#define SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_short_t swig_types[81]
#define SWIGTYPE_p_SimpleEigen__MatrixViewT_double_t swig_types[82]
#define SWIGTYPE_p_SimpleEigen__MatrixViewT_float_t swig_types[83]
#define SWIGTYPE_p_SimpleEigen__RowVectorT_double_t swig_types[84]
#define SWIGTYPE_p_SimpleEigen__RowVectorT_float_t swig_types[85]
#define SWIGTYPE_p_SimpleEigen__RowVectorT_int_t swig_types[86]
#define SWIGTYPE_p_SimpleEigen__RowVectorT_long_double_t swig_types[87]
#define SWIGTYPE_p_SimpleEigen__RowVectorT_long_long_t swig_types[88]
#define SWIGTYPE_p_SimpleEigen__RowVectorT_long_t swig_types[89]
#define SWIGTYPE_p_SimpleEigen__RowVectorT_short_t swig_types[90]
#define SWIGTYPE_p_SimpleEigen__RowVectorT_signed_char_t swig_types[91]
#define SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_char_t swig_types[92]
#define SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_int_t swig_types[93]
#define SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_long_t swig_types[94]
#define SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_t swig_types[95]
#define SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_short_t swig_types[96]
#define SWIGTYPE_p_SimpleEigen__ScalarT_double_t swig_types[97]
#define SWIGTYPE_p_SimpleEigen__ScalarT_float_t swig_types[98]
#define SWIGTYPE_p_SimpleEigen__ScalarT_int_t swig_types[99]
#define SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t swig_types[100]
#define SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t swig_types[101]
#define SWIGTYPE_p_SimpleEigen__ScalarT_long_t swig_types[102]
#define SWIGTYPE_p_SimpleEigen__ScalarT_short_t swig_types[103]
#define SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t swig_types[104]
#define SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t swig_types[105]
#define SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t swig_types[106]
#define SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t swig_types[107]
#define SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t swig_types[108]
#define SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t swig_types[109]
#define SWIGTYPE_p_char swig_types[110]
#define SWIGTYPE_p_double swig_types[111]
#define SWIGTYPE_p_float swig_types[112]
#define SWIGTYPE_p_int swig_types[113]
#define SWIGTYPE_p_long swig_types[114]
#define SWIGTYPE_p_long_double swig_types[115]
#define SWIGTYPE_p_long_long swig_types[116]
#define SWIGTYPE_p_short swig_types[117]
#define SWIGTYPE_p_signed_char swig_types[118]
#define SWIGTYPE_p_std__complexT_double_t swig_types[119]
#define SWIGTYPE_p_std__complexT_float_t swig_types[120]
#define SWIGTYPE_p_std__string swig_types[121]
#define SWIGTYPE_p_std__vectorT_char_t swig_types[122]
#define SWIGTYPE_p_std__vectorT_double_t swig_types[123]
#define SWIGTYPE_p_std__vectorT_float_t swig_types[124]
#define SWIGTYPE_p_std__vectorT_int_t swig_types[125]
#define SWIGTYPE_p_std__vectorT_long_double_t swig_types[126]
#define SWIGTYPE_p_std__vectorT_long_long_t swig_types[127]
#define SWIGTYPE_p_std__vectorT_long_t swig_types[128]
#define SWIGTYPE_p_std__vectorT_short_t swig_types[129]
#define SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t swig_types[130]
#define SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t swig_types[131]
#define SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t swig_types[132]
#define SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t swig_types[133]
#define SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t swig_types[134]
#define SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t swig_types[135]
#define SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t swig_types[136]
#define SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t swig_types[137]
#define SWIGTYPE_p_std__vectorT_unsigned_char_t swig_types[138]
#define SWIGTYPE_p_std__vectorT_unsigned_int_t swig_types[139]
#define SWIGTYPE_p_std__vectorT_unsigned_long_long_t swig_types[140]
#define SWIGTYPE_p_std__vectorT_unsigned_long_t swig_types[141]
#define SWIGTYPE_p_std__vectorT_unsigned_short_t swig_types[142]
#define SWIGTYPE_p_std__vector_iteratorT_char_t swig_types[143]
#define SWIGTYPE_p_std__vector_iteratorT_double_t swig_types[144]
#define SWIGTYPE_p_std__vector_iteratorT_float_t swig_types[145]
#define SWIGTYPE_p_std__vector_iteratorT_int_t swig_types[146]
#define SWIGTYPE_p_std__vector_iteratorT_long_double_t swig_types[147]
#define SWIGTYPE_p_std__vector_iteratorT_long_long_t swig_types[148]
#define SWIGTYPE_p_std__vector_iteratorT_long_t swig_types[149]
#define SWIGTYPE_p_std__vector_iteratorT_short_t swig_types[150]
#define SWIGTYPE_p_std__vector_iteratorT_std__vectorT_double_t_t swig_types[151]
#define SWIGTYPE_p_std__vector_iteratorT_std__vectorT_float_t_t swig_types[152]
#define SWIGTYPE_p_std__vector_iteratorT_std__vectorT_long_double_t_t swig_types[153]
#define SWIGTYPE_p_std__vector_iteratorT_std__vectorT_unsigned_char_t_t swig_types[154]
#define SWIGTYPE_p_std__vector_iteratorT_std__vectorT_unsigned_int_t_t swig_types[155]
#define SWIGTYPE_p_std__vector_iteratorT_std__vectorT_unsigned_long_long_t_t swig_types[156]
#define SWIGTYPE_p_std__vector_iteratorT_std__vectorT_unsigned_long_t_t swig_types[157]
#define SWIGTYPE_p_std__vector_iteratorT_std__vectorT_unsigned_short_t_t swig_types[158]
#define SWIGTYPE_p_unsigned_char swig_types[159]
#define SWIGTYPE_p_unsigned_int swig_types[160]
#define SWIGTYPE_p_unsigned_long swig_types[161]
#define SWIGTYPE_p_unsigned_short swig_types[162]
static swig_type_info *swig_types[164];
static swig_module_info swig_module = {swig_types, 163, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "se"
#define SWIG_init      luaopen_se
#define SWIG_init_user luaopen_se_user

#define SWIG_LUACODE   luaopen_se_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#define EIGEN_USE_BLAS
#define EIGEN_USE_LAPACKE
#include "SimpleEigen/Eigen.h"
#include "SimpleEigen/functions.h"



#include <typeinfo>
#include <stdexcept>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <typeinfo>
#include <stdexcept>


#include <algorithm>
#include <vector>
#include <map>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <cassert>
#include <iostream>
#include <random>
#include <memory>


namespace std {
    template<typename T>
    struct vector_iterator
    {
        typename std::vector<T>::iterator iter;
        std::vector<T> v;

        vector_iterator(const std::vector<T> & vec) {
            v = vec;
        }   
        vector_iterator(const std::vector<T> & vec, const typename std::vector<T>::iterator & i) {
            iter = i;
            v = vec;
        }

        vector_iterator<T>& operator = (const T& val) {
            *iter = val;
            return *this;
        }
        vector_iterator<T>& operator = (const vector_iterator<T>& val) {
            iter = val.iter;
            v    = val.v;
            return *this;;
        }
                
        void next() {
            if(iter != v.end()) iter++;
        }
        void prev() {
            if(iter != v.begin()) iter--;
        }
        void forward(size_t i) {
            iter += i;
        }
        void backward(size_t i) {
            iter -= i;
        }
        void jump(size_t i) {
            iter = i;
        }
        
        T value() { return *iter; }
        void set_value(const T& val) { *iter = val; }
    };
}

#include <map>


  namespace std {
        template<typename Key,  typename Data>
        struct map_iterator 
        {
            typename std::map<Key,Data>::iterator _iter;
            std::map<Key,Data> _map;

            map_iterator(const std::map<Key,Data> & m, const typename std::map<Key,Data>::iterator & i) {
                _map = m;
                _iter = i;
            }

            void next() { if(_iter != _map.end()) _iter++; }
            void prev() { if(_iter != _map.begin()) _iter--; }
            Data& get() { return *_iter;}

            void insert(const Data& value) { _map.insert(_iter,value); }
            bool find(const Key& key) { return _map.find(key) != _map.end(); }   
            
        };
    }


#include <string>
#include <algorithm>
#include <iostream>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}

SWIGINTERN char std_string___getitem____SWIG(std::string *self,size_t i){ return (*self)[i]; }
SWIGINTERN void std_string___setitem____SWIG(std::string *self,size_t i,char c){ (*self)[i] = c; }
SWIGINTERN char const *std_string___str____SWIG(std::string *self){ return self->c_str(); }
SWIGINTERN int32_t std_string_to_int32__SWIG_0(std::string *self,int base=10){ return std::stoi(self->c_str(),nullptr,base); }
SWIGINTERN int64_t std_string_to_int64__SWIG_0(std::string *self,int base=10){ return std::stoll(self->c_str(),nullptr,base); }
SWIGINTERN float std_string_to_float__SWIG(std::string *self){ return std::stof(*self); }
SWIGINTERN double std_string_to_double__SWIG(std::string *self){ return std::stod(*self); }
SWIGINTERN void std_string_reverse__SWIG(std::string *self){ std::reverse(self->begin(),self->end()); }
SWIGINTERN void std_string_sort__SWIG(std::string *self){ std::sort(self->begin(),self->end()); }
SWIGINTERN void std_string_shuffle__SWIG(std::string *self){ std::random_shuffle(self->begin(),self->end()); }
SWIGINTERN void std_string_getline__SWIG(std::string *self){
                std::getline(std::cin, *self);
            }
SWIGINTERN void std_string_fill__SWIG(std::string *self,size_t i,char c){
                self->resize(i);
                for(size_t n = 0; n < i; n++) (*self)[i] = c;
            }

#include <utility>


typedef struct{
  lua_State* L; /* the state */
  int idx;      /* the index on the stack */
}SWIGLUA_FN;

#define SWIGLUA_FN_GET(fn) {lua_pushvalue(fn.L,fn.idx);}


typedef struct{
  lua_State* L; /* the state */
  int ref;      /* a ref in the lua global index */
}SWIGLUA_REF;


void swiglua_ref_clear(SWIGLUA_REF* pref){
 	if (pref->L!=0 && pref->ref!=LUA_NOREF && pref->ref!=LUA_REFNIL){
		luaL_unref(pref->L,LUA_REGISTRYINDEX,pref->ref);
	}
	pref->L=0; pref->ref=0;
}

void swiglua_ref_set(SWIGLUA_REF* pref,lua_State* L,int idx){
	pref->L=L;
	lua_pushvalue(L,idx);                 /* copy obj to top */
	pref->ref=luaL_ref(L,LUA_REGISTRYINDEX); /* remove obj from top & put into registry */
}

void swiglua_ref_get(SWIGLUA_REF* pref){
	if (pref->L!=0)
		lua_rawgeti(pref->L,LUA_REGISTRYINDEX,pref->ref);
}


SWIGINTERN float std_vector_Sl_float_Sg____getitem__SWIG(std::vector< float > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_float_Sg____setitem__SWIG(std::vector< float > *self,size_t i,float val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< float > std_vector_Sl_float_Sg__ibegin__SWIG(std::vector< float > *self){
                std::vector_iterator<float> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< float > std_vector_Sl_float_Sg__iend__SWIG(std::vector< float > *self){
                std::vector_iterator<float> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_float_Sg__erase__SWIG_0(std::vector< float > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_float_Sg__erase__SWIG_1(std::vector< float > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN std::vector< float > std_vector_Sl_std_vector_Sl_float_Sg__Sg____getitem__SWIG(std::vector< std::vector< float > > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_std_vector_Sl_float_Sg__Sg____setitem__SWIG(std::vector< std::vector< float > > *self,size_t i,std::vector< float > val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< std::vector< float > > std_vector_Sl_std_vector_Sl_float_Sg__Sg__ibegin__SWIG(std::vector< std::vector< float > > *self){
                std::vector_iterator<std::vector< float >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< std::vector< float > > std_vector_Sl_std_vector_Sl_float_Sg__Sg__iend__SWIG(std::vector< std::vector< float > > *self){
                std::vector_iterator<std::vector< float >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_float_Sg__Sg__erase__SWIG_0(std::vector< std::vector< float > > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_std_vector_Sl_float_Sg__Sg__erase__SWIG_1(std::vector< std::vector< float > > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN double std_vector_Sl_double_Sg____getitem__SWIG(std::vector< double > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_double_Sg____setitem__SWIG(std::vector< double > *self,size_t i,double val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< double > std_vector_Sl_double_Sg__ibegin__SWIG(std::vector< double > *self){
                std::vector_iterator<double> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< double > std_vector_Sl_double_Sg__iend__SWIG(std::vector< double > *self){
                std::vector_iterator<double> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_double_Sg__erase__SWIG_0(std::vector< double > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_double_Sg__erase__SWIG_1(std::vector< double > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN std::vector< double > std_vector_Sl_std_vector_Sl_double_Sg__Sg____getitem__SWIG(std::vector< std::vector< double > > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____setitem__SWIG(std::vector< std::vector< double > > *self,size_t i,std::vector< double > val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< std::vector< double > > std_vector_Sl_std_vector_Sl_double_Sg__Sg__ibegin__SWIG(std::vector< std::vector< double > > *self){
                std::vector_iterator<std::vector< double >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< std::vector< double > > std_vector_Sl_std_vector_Sl_double_Sg__Sg__iend__SWIG(std::vector< std::vector< double > > *self){
                std::vector_iterator<std::vector< double >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__erase__SWIG_0(std::vector< std::vector< double > > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__erase__SWIG_1(std::vector< std::vector< double > > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN long double std_vector_Sl_long_SS_double_Sg____getitem__SWIG(std::vector< long double > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_long_SS_double_Sg____setitem__SWIG(std::vector< long double > *self,size_t i,long double val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< long double > std_vector_Sl_long_SS_double_Sg__ibegin__SWIG(std::vector< long double > *self){
                std::vector_iterator<long double> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< long double > std_vector_Sl_long_SS_double_Sg__iend__SWIG(std::vector< long double > *self){
                std::vector_iterator<long double> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_long_SS_double_Sg__erase__SWIG_0(std::vector< long double > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_long_SS_double_Sg__erase__SWIG_1(std::vector< long double > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN std::vector< long double > std_vector_Sl_std_vector_Sl_long_SS_double_Sg__Sg____getitem__SWIG(std::vector< std::vector< long double > > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_std_vector_Sl_long_SS_double_Sg__Sg____setitem__SWIG(std::vector< std::vector< long double > > *self,size_t i,std::vector< long double > val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< std::vector< long double > > std_vector_Sl_std_vector_Sl_long_SS_double_Sg__Sg__ibegin__SWIG(std::vector< std::vector< long double > > *self){
                std::vector_iterator<std::vector< long double >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< std::vector< long double > > std_vector_Sl_std_vector_Sl_long_SS_double_Sg__Sg__iend__SWIG(std::vector< std::vector< long double > > *self){
                std::vector_iterator<std::vector< long double >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_long_SS_double_Sg__Sg__erase__SWIG_0(std::vector< std::vector< long double > > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_std_vector_Sl_long_SS_double_Sg__Sg__erase__SWIG_1(std::vector< std::vector< long double > > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN char std_vector_Sl_char_Sg____getitem__SWIG(std::vector< char > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_char_Sg____setitem__SWIG(std::vector< char > *self,size_t i,char val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< char > std_vector_Sl_char_Sg__ibegin__SWIG(std::vector< char > *self){
                std::vector_iterator<char> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< char > std_vector_Sl_char_Sg__iend__SWIG(std::vector< char > *self){
                std::vector_iterator<char> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_char_Sg__erase__SWIG_0(std::vector< char > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_char_Sg__erase__SWIG_1(std::vector< char > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN std::vector< unsigned char > std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg____getitem__SWIG(std::vector< std::vector< unsigned char > > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg____setitem__SWIG(std::vector< std::vector< unsigned char > > *self,size_t i,std::vector< unsigned char > val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< std::vector< unsigned char > > std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__ibegin__SWIG(std::vector< std::vector< unsigned char > > *self){
                std::vector_iterator<std::vector< unsigned char >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< std::vector< unsigned char > > std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__iend__SWIG(std::vector< std::vector< unsigned char > > *self){
                std::vector_iterator<std::vector< unsigned char >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__erase__SWIG_0(std::vector< std::vector< unsigned char > > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__erase__SWIG_1(std::vector< std::vector< unsigned char > > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN short std_vector_Sl_short_Sg____getitem__SWIG(std::vector< short > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_short_Sg____setitem__SWIG(std::vector< short > *self,size_t i,short val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< short > std_vector_Sl_short_Sg__ibegin__SWIG(std::vector< short > *self){
                std::vector_iterator<short> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< short > std_vector_Sl_short_Sg__iend__SWIG(std::vector< short > *self){
                std::vector_iterator<short> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_short_Sg__erase__SWIG_0(std::vector< short > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_short_Sg__erase__SWIG_1(std::vector< short > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN std::vector< unsigned short > std_vector_Sl_std_vector_Sl_unsigned_SS_short_Sg__Sg____getitem__SWIG(std::vector< std::vector< unsigned short > > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_short_Sg__Sg____setitem__SWIG(std::vector< std::vector< unsigned short > > *self,size_t i,std::vector< unsigned short > val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< std::vector< unsigned short > > std_vector_Sl_std_vector_Sl_unsigned_SS_short_Sg__Sg__ibegin__SWIG(std::vector< std::vector< unsigned short > > *self){
                std::vector_iterator<std::vector< unsigned short >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< std::vector< unsigned short > > std_vector_Sl_std_vector_Sl_unsigned_SS_short_Sg__Sg__iend__SWIG(std::vector< std::vector< unsigned short > > *self){
                std::vector_iterator<std::vector< unsigned short >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_short_Sg__Sg__erase__SWIG_0(std::vector< std::vector< unsigned short > > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_short_Sg__Sg__erase__SWIG_1(std::vector< std::vector< unsigned short > > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN int std_vector_Sl_int_Sg____getitem__SWIG(std::vector< int > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_int_Sg____setitem__SWIG(std::vector< int > *self,size_t i,int val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< int > std_vector_Sl_int_Sg__ibegin__SWIG(std::vector< int > *self){
                std::vector_iterator<int> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< int > std_vector_Sl_int_Sg__iend__SWIG(std::vector< int > *self){
                std::vector_iterator<int> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_int_Sg__erase__SWIG_0(std::vector< int > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_int_Sg__erase__SWIG_1(std::vector< int > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN std::vector< unsigned int > std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg____getitem__SWIG(std::vector< std::vector< unsigned int > > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg____setitem__SWIG(std::vector< std::vector< unsigned int > > *self,size_t i,std::vector< unsigned int > val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< std::vector< unsigned int > > std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg__ibegin__SWIG(std::vector< std::vector< unsigned int > > *self){
                std::vector_iterator<std::vector< unsigned int >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< std::vector< unsigned int > > std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg__iend__SWIG(std::vector< std::vector< unsigned int > > *self){
                std::vector_iterator<std::vector< unsigned int >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg__erase__SWIG_0(std::vector< std::vector< unsigned int > > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg__erase__SWIG_1(std::vector< std::vector< unsigned int > > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN long std_vector_Sl_long_Sg____getitem__SWIG(std::vector< long > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_long_Sg____setitem__SWIG(std::vector< long > *self,size_t i,long val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< long > std_vector_Sl_long_Sg__ibegin__SWIG(std::vector< long > *self){
                std::vector_iterator<long> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< long > std_vector_Sl_long_Sg__iend__SWIG(std::vector< long > *self){
                std::vector_iterator<long> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_long_Sg__erase__SWIG_0(std::vector< long > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_long_Sg__erase__SWIG_1(std::vector< long > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN std::vector< unsigned long > std_vector_Sl_std_vector_Sl_unsigned_SS_long_Sg__Sg____getitem__SWIG(std::vector< std::vector< unsigned long > > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_long_Sg__Sg____setitem__SWIG(std::vector< std::vector< unsigned long > > *self,size_t i,std::vector< unsigned long > val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< std::vector< unsigned long > > std_vector_Sl_std_vector_Sl_unsigned_SS_long_Sg__Sg__ibegin__SWIG(std::vector< std::vector< unsigned long > > *self){
                std::vector_iterator<std::vector< unsigned long >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< std::vector< unsigned long > > std_vector_Sl_std_vector_Sl_unsigned_SS_long_Sg__Sg__iend__SWIG(std::vector< std::vector< unsigned long > > *self){
                std::vector_iterator<std::vector< unsigned long >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_long_Sg__Sg__erase__SWIG_0(std::vector< std::vector< unsigned long > > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_long_Sg__Sg__erase__SWIG_1(std::vector< std::vector< unsigned long > > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN long long std_vector_Sl_long_SS_long_Sg____getitem__SWIG(std::vector< long long > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_long_SS_long_Sg____setitem__SWIG(std::vector< long long > *self,size_t i,long long val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< long long > std_vector_Sl_long_SS_long_Sg__ibegin__SWIG(std::vector< long long > *self){
                std::vector_iterator<long long> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< long long > std_vector_Sl_long_SS_long_Sg__iend__SWIG(std::vector< long long > *self){
                std::vector_iterator<long long> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_long_SS_long_Sg__erase__SWIG_0(std::vector< long long > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_long_SS_long_Sg__erase__SWIG_1(std::vector< long long > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN std::vector< unsigned long long > std_vector_Sl_std_vector_Sl_unsigned_SS_long_SS_long_Sg__Sg____getitem__SWIG(std::vector< std::vector< unsigned long long > > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_long_SS_long_Sg__Sg____setitem__SWIG(std::vector< std::vector< unsigned long long > > *self,size_t i,std::vector< unsigned long long > val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< std::vector< unsigned long long > > std_vector_Sl_std_vector_Sl_unsigned_SS_long_SS_long_Sg__Sg__ibegin__SWIG(std::vector< std::vector< unsigned long long > > *self){
                std::vector_iterator<std::vector< unsigned long long >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< std::vector< unsigned long long > > std_vector_Sl_std_vector_Sl_unsigned_SS_long_SS_long_Sg__Sg__iend__SWIG(std::vector< std::vector< unsigned long long > > *self){
                std::vector_iterator<std::vector< unsigned long long >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_long_SS_long_Sg__Sg__erase__SWIG_0(std::vector< std::vector< unsigned long long > > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_long_SS_long_Sg__Sg__erase__SWIG_1(std::vector< std::vector< unsigned long long > > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }

double SwigRefTableGet(SWIGLUA_REF  r, size_t index){
    swiglua_ref_get(&r);
    assert(lua_istable(r.L,-1));
    lua_rawgeti(r.L,-1,index);
    return lua_tonumber(r.L,-1);
}
double SwigRefTableGet2(SWIGLUA_REF  r, size_t row, size_t col){
    swiglua_ref_get(&r);
    assert(lua_istable(r.L,-1));
    lua_rawgeti(r.L,-1,row);
    assert(lua_istable(r.L,-1));
    lua_rawgeti(r.L,-1,col);
    return lua_tonumber(r.L,-1);
}
void SwigRefTableSet(SWIGLUA_REF  r, size_t index, double val){
    swiglua_ref_get(&r);
    assert(lua_istable(r.L,-1));
    lua_pushnumber(r.L,val);
    lua_rawseti(r.L,-1,index);    
}
void SwigRefTableSet2(SWIGLUA_REF  r, size_t row, size_t col, double val){
    swiglua_ref_get(&r);
    assert(lua_istable(r.L,-1));
    lua_rawgeti(r.L,-1,row);
    assert(lua_istable(r.L,-1));
    lua_rawseti(r.L,-1,val);
}
SimpleEigen::Matrix<double>& Lua_TablesToMatrix(SWIGLUA_REF r, SimpleEigen::Matrix<double> & d){
    swiglua_ref_get(&r);
    assert(lua_istable(r.L,-1));
    size_t rows = lua_objlen(r.L,-1);
    lua_rawgeti(r.L,-1,1);
    assert(lua_istable(r.L,-1));
    size_t cols = lua_objlen(r.L,-1);
    d.resize(rows,cols);
    for(size_t i = 0; i < rows; i++)
        for(size_t j = 0; j < cols; j++)
            d.matrix(i,j) = SwigRefTableGet2(r,i,j);
    return d;
}

template<typename T>
SimpleEigen::RowVector<T> Lua_RowVector(SWIGLUA_REF r){
    SimpleEigen::RowVector<T> vector;
    swiglua_ref_get(&r);
    assert(lua_istable(r.L,-1));
    size_t n = lua_objlen(r.L,-1);
    assert(n > 0);    
    vector.resize(n);
    for(size_t i = 0; i < n; i++)    {
        lua_rawgeti(r.L,-1,i+1);
        vector.vector(i) = lua_tonumber(r.L,-1);
        lua_pop(r.L,1);
    }
    return vector;
}
SimpleEigen::RowVector<float> CreateRowVectorFloat(SWIGLUA_REF r){
    return Lua_RowVector<float>(r);
}
SimpleEigen::RowVector<double> CreateRowVectorDouble(SWIGLUA_REF r){
    return Lua_RowVector<double>(r);
}

template<typename T>
SimpleEigen::ColVector<T> Lua_ColVector(SWIGLUA_REF r){
    SimpleEigen::ColVector<T> vector;
    swiglua_ref_get(&r);
    assert(lua_istable(r.L,-1));
    size_t n = lua_objlen(r.L,-1);
    assert(n > 0);
    vector.resize(n);
    for(size_t i = 0; i < n; i++)    {
        lua_rawgeti(r.L,-1,i+1);
        vector.vector(i) = lua_tonumber(r.L,-1);
        lua_pop(r.L,1);
    }
    return vector;
}
SimpleEigen::ColVector<float> CreateColVectorFloat(SWIGLUA_REF r){
    return Lua_ColVector<float>(r);
}
SimpleEigen::ColVector<double> CreateColVectorDouble(SWIGLUA_REF r){
    return Lua_ColVector<double>(r);
}

template<typename T>
SimpleEigen::Array<T> Lua_CreateArray(SWIGLUA_REF r){
    SimpleEigen::Array<T> vector;
    swiglua_ref_get(&r);
    assert(lua_istable(r.L,-1));
    size_t n = lua_objlen(r.L,-1);
    assert(n > 0);
    vector.resize(n);
    for(size_t i = 0; i < n; i++)    {
        lua_rawgeti(r.L,-1,i+1);
        vector.array(i) = lua_tonumber(r.L,-1);
        lua_pop(r.L,1);
    }
    return vector;
}
SimpleEigen::Array<float> CreateArrayFloat(SWIGLUA_REF r){
    return Lua_CreateArray<float>(r);
}
SimpleEigen::Array<double> CreateArrayDouble(SWIGLUA_REF r){
    return Lua_CreateArray<double>(r);
}

template<typename T>
SimpleEigen::Matrix<T> Lua_CreateMatrix(SWIGLUA_REF r){
    SimpleEigen::Matrix<T> matrix;
    swiglua_ref_get(&r);
    assert(lua_istable(r.L,-1));
    size_t row = lua_objlen(r.L,-1);
    assert(row > 0);
    lua_rawgeti(r.L,-1,1);
    assert(lua_istable(r.L,-1));
    size_t col = lua_objlen(r.L,-1);
    matrix.resize(row,col);
    lua_pop(r.L,1);
    for(size_t i = 0; i < row; i++)    {
        lua_rawgeti(r.L,-1,i+1);
        for(size_t j = 0; j < col; j++)
        {
            lua_rawgeti(r.L,-1,j+1);
            matrix.matrix(i,j) = lua_tonumber(r.L,-1);
            lua_pop(r.L,1);
        }
        lua_pop(r.L,1);
    }
    return matrix;
}

SimpleEigen::Matrix<float> CreateMatrixFloat(SWIGLUA_REF r){
    return Lua_CreateMatrix<float>(r);
}
SimpleEigen::Matrix<double> CreateMatrixDouble(SWIGLUA_REF r){
    return Lua_CreateMatrix<double>(r);
}

template<typename T>
SimpleEigen::Array2D<T> Lua_CreateArray2D(SWIGLUA_REF r){
    SimpleEigen::Array2D<T> matrix;
    swiglua_ref_get(&r);
    assert(lua_istable(r.L,-1));
    size_t row = lua_objlen(r.L,-1);
    assert(row > 0);
    lua_rawgeti(r.L,-1,1);
    assert(lua_istable(r.L,-1));
    size_t col = lua_objlen(r.L,-1);
    matrix.resize(row,col);
    lua_pop(r.L,1);
    for(size_t i = 0; i < row; i++)    {
        lua_rawgeti(r.L,-1,i+1);
        for(size_t j = 0; j < col; j++)
        {
            lua_rawgeti(r.L,-1,j+1);
            matrix.array(i,j) = lua_tonumber(r.L,-1);
            lua_pop(r.L,1);
        }
        lua_pop(r.L,1);
    }
    return matrix;
}    

SimpleEigen::Array2D<float> CreateArray2DFloat(SWIGLUA_REF r){
    return Lua_CreateArray2D<float>(r);
}
SimpleEigen::Array2D<double> CreateArray2DDouble(SWIGLUA_REF r){
    return Lua_CreateArray2D<double>(r);
}




SimpleEigen::Scalar<float>   SF32(const float val) { return SimpleEigen::Scalar<float>(val); }
SimpleEigen::Scalar<double>  SF64(const float val) { return SimpleEigen::Scalar<double>(val); }
SimpleEigen::Scalar<int8_t>  SFI8(const int8_t val) { return SimpleEigen::Scalar<int8_t>(val); }
SimpleEigen::Scalar<uint8_t> SFUI8(const uint8_t val) { return SimpleEigen::Scalar<uint8_t>(val); }
SimpleEigen::Scalar<int16_t>  SFI16(const int16_t val) { return SimpleEigen::Scalar<int16_t>(val); }
SimpleEigen::Scalar<uint16_t> SFUI16(const uint16_t val) { return SimpleEigen::Scalar<uint16_t>(val); }
SimpleEigen::Scalar<int32_t>  SFI32(const int32_t val) { return SimpleEigen::Scalar<int32_t>(val); }
SimpleEigen::Scalar<uint32_t> SFUI32(const uint32_t val) { return SimpleEigen::Scalar<uint32_t>(val); }
SimpleEigen::Scalar<int64_t>  SFI64(const int64_t val) { return SimpleEigen::Scalar<int64_t>(val); }
SimpleEigen::Scalar<uint64_t> SFUI64(const uint64_t val) { return SimpleEigen::Scalar<uint64_t>(val); }

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("std::string::string",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (std::string *)new std::string((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::string()\n"
    "    std::string::string(char const *)\n"
    "    std::string::string(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_string___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  char result;
  
  SWIG_check_num_args("std::string::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::__getitem__",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string___getitem",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (char)std_string___getitem____SWIG(arg1,arg2);
  lua_pushlstring(L, &result, 1); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  char arg3 ;
  
  SWIG_check_num_args("std::string::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::__setitem__",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::__setitem__",2,"size_t");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("std::string::__setitem__",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string___setitem",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  std_string___setitem____SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string___tostring(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::__str__",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string___tostring",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)std_string___str____SWIG(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_int32__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  int arg2 ;
  int32_t result;
  
  SWIG_check_num_args("std::string::to_int32",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_int32",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::to_int32",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_int32",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int32_t)std_string_to_int32__SWIG_0(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_int32__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("std::string::to_int32",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_int32",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_int32",1,SWIGTYPE_p_std__string);
  }
  
  result = (int32_t)std_string_to_int32__SWIG_0(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_int32(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_string_to_int32__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_string_to_int32__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'string_to_int32'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::to_int32(int)\n"
    "    std::string::to_int32()\n");
  lua_error(L);return 0;
}


static int _wrap_string_to_int64__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  int arg2 ;
  int64_t result;
  
  SWIG_check_num_args("std::string::to_int64",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_int64",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::to_int64",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_int64",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int64_t)std_string_to_int64__SWIG_0(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_int64__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("std::string::to_int64",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_int64",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_int64",1,SWIGTYPE_p_std__string);
  }
  
  result = (int64_t)std_string_to_int64__SWIG_0(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_int64(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_string_to_int64__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_string_to_int64__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'string_to_int64'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::to_int64(int)\n"
    "    std::string::to_int64()\n");
  lua_error(L);return 0;
}


static int _wrap_string_to_float(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  float result;
  
  SWIG_check_num_args("std::string::to_float",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_float",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_float",1,SWIGTYPE_p_std__string);
  }
  
  result = (float)std_string_to_float__SWIG(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_double(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  double result;
  
  SWIG_check_num_args("std::string::to_double",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_double",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_double",1,SWIGTYPE_p_std__string);
  }
  
  result = (double)std_string_to_double__SWIG(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_reverse(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::reverse",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_reverse",1,SWIGTYPE_p_std__string);
  }
  
  std_string_reverse__SWIG(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_sort(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::sort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::sort",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_sort",1,SWIGTYPE_p_std__string);
  }
  
  std_string_sort__SWIG(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_shuffle(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::shuffle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::shuffle",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_shuffle",1,SWIGTYPE_p_std__string);
  }
  
  std_string_shuffle__SWIG(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_getline(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::getline",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::getline",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_getline",1,SWIGTYPE_p_std__string);
  }
  
  std_string_getline__SWIG(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_fill(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  char arg3 ;
  
  SWIG_check_num_args("std::string::fill",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::fill",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::fill",2,"size_t");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("std::string::fill",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_fill",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  std_string_fill__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = ((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::clear",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_clear",1,SWIGTYPE_p_std__string);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::string::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::erase",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::string::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_erase",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::string::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::erase",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_erase",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_string_erase__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_string_erase__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'string_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::erase(size_t,size_t)\n"
    "    std::string::erase(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_string_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::string::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::push_back",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::push_back",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_push_back",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::pop_back",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_pop_back",1,SWIGTYPE_p_std__string);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_replace(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  std::string temp4 ;
  std::string result;
  
  SWIG_check_num_args("std::string::replace",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::replace",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::replace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::string::replace",3,"size_t");
  if(!lua_isstring(L,4)) SWIG_fail_arg("std::string::replace",4,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_replace",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  result = (arg1)->replace(arg2,arg3,(std::string const &)*arg4);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::string::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::resize",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_resize",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_substr(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::string result;
  
  SWIG_check_num_args("std::string::substr",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::substr",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::substr",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::string::substr",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_substr",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->substr(arg2,arg3);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_find__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("std::string::find",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::find",1,"std::string *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::string::find",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::string::find",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_find",1,SWIGTYPE_p_std__string);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->find((std::string const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_find__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("std::string::find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::find",1,"std::string *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::string::find",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_find",1,SWIGTYPE_p_std__string);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->find((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_find(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_string_find__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_string_find__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'string_find'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::find(std::string const &,size_t)\n"
    "    std::string::find(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_string_rfind__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("std::string::rfind",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::rfind",1,"std::string *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::string::rfind",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::string::rfind",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_rfind",1,SWIGTYPE_p_std__string);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->rfind((std::string const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_rfind__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("std::string::rfind",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::rfind",1,"std::string *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::string::rfind",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_rfind",1,SWIGTYPE_p_std__string);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->rfind((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_rfind(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_string_rfind__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_string_rfind__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'string_rfind'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::rfind(std::string const &,size_t)\n"
    "    std::string::rfind(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_string_compare(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  int result;
  
  SWIG_check_num_args("std::string::compare",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::compare",1,"std::string *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::string::compare",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_compare",1,SWIGTYPE_p_std__string);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (int)(arg1)->compare((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static int _proxy__wrap_new_string(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_string);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_string_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_string_methods[]= {
    { "__getitem", _wrap_string___getitem},
    { "__setitem", _wrap_string___setitem},
    { "__tostring", _wrap_string___tostring},
    { "to_int32", _wrap_string_to_int32},
    { "to_int64", _wrap_string_to_int64},
    { "to_float", _wrap_string_to_float},
    { "to_double", _wrap_string_to_double},
    { "reverse", _wrap_string_reverse},
    { "sort", _wrap_string_sort},
    { "shuffle", _wrap_string_shuffle},
    { "getline", _wrap_string_getline},
    { "fill", _wrap_string_fill},
    { "data", _wrap_string_data},
    { "size", _wrap_string_size},
    { "empty", _wrap_string_empty},
    { "clear", _wrap_string_clear},
    { "erase", _wrap_string_erase},
    { "push_back", _wrap_string_push_back},
    { "pop_back", _wrap_string_pop_back},
    { "replace", _wrap_string_replace},
    { "resize", _wrap_string_resize},
    { "substr", _wrap_string_substr},
    { "find", _wrap_string_find},
    { "rfind", _wrap_string_rfind},
    { "compare", _wrap_string_compare},
    {0,0}
};
static swig_lua_method swig_string_meta[] = {
    { "__getitem", _wrap_string___getitem},
    { "__setitem", _wrap_string___setitem},
    { "__tostring", _wrap_string___tostring},
    {0,0}
};

static swig_lua_attribute swig_string_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_string_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_string_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_string_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_string_Sf_SwigStatic = {
    "string",
    swig_string_Sf_SwigStatic_methods,
    swig_string_Sf_SwigStatic_attributes,
    swig_string_Sf_SwigStatic_constants,
    swig_string_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_string_bases[] = {0};
static const char *swig_string_base_names[] = {0};
static swig_lua_class _wrap_class_string = { "string", "string", &SWIGTYPE_p_std__string,_proxy__wrap_new_string, swig_delete_string, swig_string_methods, swig_string_attributes, &swig_string_Sf_SwigStatic, swig_string_meta, swig_string_bases, swig_string_base_names };

static int _wrap_new_float_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",0,0)
  result = (std::vector< float > *)new std::vector< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float *arg2 = 0 ;
  float temp2 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::vector",2,"float const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< float > *)new std::vector< float >(arg1,(float const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< float > *)new std::vector< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"std::vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("new_float_vector",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (std::vector< float > *)new std::vector< float >((std::vector< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_float_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_float_vector__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_float_vector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_float_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::vector()\n"
    "    std::vector< float >::vector(size_t,float const &)\n"
    "    std::vector< float >::vector(size_t)\n"
    "    std::vector< float >::vector(std::vector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("std::vector< float >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::__getitem",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector___getitem",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)std_vector_Sl_float_Sg____getitem__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("std::vector< float >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::__setitem",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float >::__setitem",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector___setitem",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  std_vector_Sl_float_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  SwigValueWrapper< std::vector_iterator< float > > result;
  
  SWIG_check_num_args("std::vector< float >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::ibegin",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_ibegin",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = std_vector_Sl_float_Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< float > * resultptr = new std::vector_iterator< float >((const std::vector_iterator< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  SwigValueWrapper< std::vector_iterator< float > > result;
  
  SWIG_check_num_args("std::vector< float >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::iend",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_iend",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = std_vector_Sl_float_Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< float > * resultptr = new std::vector_iterator< float >((const std::vector_iterator< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< float >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::erase",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_erase",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_float_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< float >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::erase",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_erase",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_float_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::erase(size_t)\n"
    "    std::vector< float >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_float_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::front",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_front",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (float *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::back",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (float *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("std::vector< float >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::push_back",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::push_back",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_push_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  SWIG_check_num_args("std::vector< float >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::pop_back",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_pop_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::at",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_at",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("std::vector< float >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::assign",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float >::assign",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_assign",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::data",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_data",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (float *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::size",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_size",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< float >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::empty",1,"std::vector< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_empty",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (bool)((std::vector< float > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< float >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::resize",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_resize",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  SWIG_check_num_args("std::vector< float >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::clear",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_clear",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< float >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::swap",1,"std::vector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< float >::swap",2,"std::vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_swap",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_swap",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  SWIG_check_num_args("std::vector< float >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::shrink_to_fit",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< float >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::reserve",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_reserve",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< float >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::max_size",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_max_size",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< float >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::capacity",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_capacity",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_vector(void *obj) {
std::vector< float > *arg1 = (std::vector< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_vector_methods[]= {
    { "__getitem", _wrap_float_vector___getitem},
    { "__setitem", _wrap_float_vector___setitem},
    { "ibegin", _wrap_float_vector_ibegin},
    { "iend", _wrap_float_vector_iend},
    { "erase", _wrap_float_vector_erase},
    { "front", _wrap_float_vector_front},
    { "back", _wrap_float_vector_back},
    { "push_back", _wrap_float_vector_push_back},
    { "pop_back", _wrap_float_vector_pop_back},
    { "at", _wrap_float_vector_at},
    { "assign", _wrap_float_vector_assign},
    { "data", _wrap_float_vector_data},
    { "size", _wrap_float_vector_size},
    { "empty", _wrap_float_vector_empty},
    { "resize", _wrap_float_vector_resize},
    { "clear", _wrap_float_vector_clear},
    { "swap", _wrap_float_vector_swap},
    { "shrink_to_fit", _wrap_float_vector_shrink_to_fit},
    { "reserve", _wrap_float_vector_reserve},
    { "max_size", _wrap_float_vector_max_size},
    { "capacity", _wrap_float_vector_capacity},
    {0,0}
};
static swig_lua_method swig_float_vector_meta[] = {
    { "__getitem", _wrap_float_vector___getitem},
    { "__setitem", _wrap_float_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_float_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_vector_Sf_SwigStatic = {
    "float_vector",
    swig_float_vector_Sf_SwigStatic_methods,
    swig_float_vector_Sf_SwigStatic_attributes,
    swig_float_vector_Sf_SwigStatic_constants,
    swig_float_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_vector_bases[] = {0};
static const char *swig_float_vector_base_names[] = {0};
static swig_lua_class _wrap_class_float_vector = { "float_vector", "float_vector", &SWIGTYPE_p_std__vectorT_float_t,_proxy__wrap_new_float_vector, swig_delete_float_vector, swig_float_vector_methods, swig_float_vector_attributes, &swig_float_vector_Sf_SwigStatic, swig_float_vector_meta, swig_float_vector_bases, swig_float_vector_base_names };

static int _wrap_new_float_matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< float > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< float > >::vector",0,0)
  result = (std::vector< std::vector< float > > *)new std::vector< std::vector< float > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< float > *arg2 = 0 ;
  std::vector< std::vector< float > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< float > >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::vector< float > >::vector",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::vector< float > >::vector",2,"std::vector< float > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("new_float_matrix",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (std::vector< std::vector< float > > *)new std::vector< std::vector< float > >(arg1,(std::vector< float > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_matrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< std::vector< float > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< float > >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::vector< float > >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< std::vector< float > > *)new std::vector< std::vector< float > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_matrix__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< float > > *arg1 = 0 ;
  std::vector< std::vector< float > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< float > >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< std::vector< float > >::vector",1,"std::vector< std::vector< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t,0))){
    SWIG_fail_ptr("new_float_matrix",1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t);
  }
  
  result = (std::vector< std::vector< float > > *)new std::vector< std::vector< float > >((std::vector< std::vector< float > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_matrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_float_matrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_matrix__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_float_matrix__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_float_matrix__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_float_matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< float > >::vector()\n"
    "    std::vector< std::vector< float > >::vector(size_t,std::vector< float > const &)\n"
    "    std::vector< std::vector< float > >::vector(size_t)\n"
    "    std::vector< std::vector< float > >::vector(std::vector< std::vector< float > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_matrix___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  size_t arg2 ;
  std::vector< float > result;
  
  SWIG_check_num_args("std::vector< std::vector< float > >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< float > >::__getitem",1,"std::vector< std::vector< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< float > >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t,0))){
    SWIG_fail_ptr("float_matrix___getitem",1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = std_vector_Sl_std_vector_Sl_float_Sg__Sg____getitem__SWIG(arg1,arg2);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_matrix___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  size_t arg2 ;
  std::vector< float > arg3 ;
  std::vector< float > *argp3 ;
  
  SWIG_check_num_args("std::vector< std::vector< float > >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< float > >::__setitem",1,"std::vector< std::vector< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< float > >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::vector< float > >::__setitem",3,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t,0))){
    SWIG_fail_ptr("float_matrix___setitem",1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_matrix___setitem",3,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg3 = *argp3;
  
  std_vector_Sl_std_vector_Sl_float_Sg__Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_matrix_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::vector< float > > > result;
  
  SWIG_check_num_args("std::vector< std::vector< float > >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< float > >::ibegin",1,"std::vector< std::vector< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t,0))){
    SWIG_fail_ptr("float_matrix_ibegin",1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t);
  }
  
  result = std_vector_Sl_std_vector_Sl_float_Sg__Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< std::vector< float > > * resultptr = new std::vector_iterator< std::vector< float > >((const std::vector_iterator< std::vector< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__vectorT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_matrix_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::vector< float > > > result;
  
  SWIG_check_num_args("std::vector< std::vector< float > >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< float > >::iend",1,"std::vector< std::vector< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t,0))){
    SWIG_fail_ptr("float_matrix_iend",1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t);
  }
  
  result = std_vector_Sl_std_vector_Sl_float_Sg__Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< std::vector< float > > * resultptr = new std::vector_iterator< std::vector< float > >((const std::vector_iterator< std::vector< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__vectorT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_matrix_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::vector< float > >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< float > >::erase",1,"std::vector< std::vector< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< float > >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t,0))){
    SWIG_fail_ptr("float_matrix_erase",1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_std_vector_Sl_float_Sg__Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_matrix_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< std::vector< float > >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< float > >::erase",1,"std::vector< std::vector< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< float > >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< std::vector< float > >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t,0))){
    SWIG_fail_ptr("float_matrix_erase",1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_std_vector_Sl_float_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_matrix_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_matrix_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_matrix_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_matrix_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< float > >::erase(size_t)\n"
    "    std::vector< std::vector< float > >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_float_matrix_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< float > >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< float > >::front",1,"std::vector< std::vector< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t,0))){
    SWIG_fail_ptr("float_matrix_front",1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t);
  }
  
  result = (std::vector< float > *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_matrix_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< float > >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< float > >::back",1,"std::vector< std::vector< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t,0))){
    SWIG_fail_ptr("float_matrix_back",1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t);
  }
  
  result = (std::vector< float > *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_matrix_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  std::vector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< float > >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< float > >::push_back",1,"std::vector< std::vector< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::vector< float > >::push_back",2,"std::vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t,0))){
    SWIG_fail_ptr("float_matrix_push_back",1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_matrix_push_back",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->push_back((std::vector< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_matrix_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< float > >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< float > >::pop_back",1,"std::vector< std::vector< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t,0))){
    SWIG_fail_ptr("float_matrix_pop_back",1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_matrix_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  size_t arg2 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< float > >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< float > >::at",1,"std::vector< std::vector< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< float > >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t,0))){
    SWIG_fail_ptr("float_matrix_at",1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::vector< float > *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_matrix_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  size_t arg2 ;
  std::vector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< float > >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< float > >::assign",1,"std::vector< std::vector< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< float > >::assign",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::vector< float > >::assign",3,"std::vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t,0))){
    SWIG_fail_ptr("float_matrix_assign",1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_matrix_assign",3,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->assign(arg2,(std::vector< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_matrix_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< float > >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< float > >::data",1,"std::vector< std::vector< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t,0))){
    SWIG_fail_ptr("float_matrix_data",1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t);
  }
  
  result = (std::vector< float > *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_matrix_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::vector< float > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< float > >::size",1,"std::vector< std::vector< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t,0))){
    SWIG_fail_ptr("float_matrix_size",1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_matrix_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< std::vector< float > >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< float > >::empty",1,"std::vector< std::vector< float > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t,0))){
    SWIG_fail_ptr("float_matrix_empty",1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t);
  }
  
  result = (bool)((std::vector< std::vector< float > > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_matrix_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::vector< float > >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< float > >::resize",1,"std::vector< std::vector< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< float > >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t,0))){
    SWIG_fail_ptr("float_matrix_resize",1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_matrix_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< float > >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< float > >::clear",1,"std::vector< std::vector< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t,0))){
    SWIG_fail_ptr("float_matrix_clear",1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_matrix_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  std::vector< std::vector< float > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< float > >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< float > >::swap",1,"std::vector< std::vector< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::vector< float > >::swap",2,"std::vector< std::vector< float > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t,0))){
    SWIG_fail_ptr("float_matrix_swap",1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t,0))){
    SWIG_fail_ptr("float_matrix_swap",2,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_matrix_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< float > >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< float > >::shrink_to_fit",1,"std::vector< std::vector< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t,0))){
    SWIG_fail_ptr("float_matrix_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_matrix_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::vector< float > >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< float > >::reserve",1,"std::vector< std::vector< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< float > >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t,0))){
    SWIG_fail_ptr("float_matrix_reserve",1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_matrix_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::vector< float > >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< float > >::max_size",1,"std::vector< std::vector< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t,0))){
    SWIG_fail_ptr("float_matrix_max_size",1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_matrix_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::vector< float > >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< float > >::capacity",1,"std::vector< std::vector< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t,0))){
    SWIG_fail_ptr("float_matrix_capacity",1,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_matrix(void *obj) {
std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_matrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_matrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_matrix_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_matrix_methods[]= {
    { "__getitem", _wrap_float_matrix___getitem},
    { "__setitem", _wrap_float_matrix___setitem},
    { "ibegin", _wrap_float_matrix_ibegin},
    { "iend", _wrap_float_matrix_iend},
    { "erase", _wrap_float_matrix_erase},
    { "front", _wrap_float_matrix_front},
    { "back", _wrap_float_matrix_back},
    { "push_back", _wrap_float_matrix_push_back},
    { "pop_back", _wrap_float_matrix_pop_back},
    { "at", _wrap_float_matrix_at},
    { "assign", _wrap_float_matrix_assign},
    { "data", _wrap_float_matrix_data},
    { "size", _wrap_float_matrix_size},
    { "empty", _wrap_float_matrix_empty},
    { "resize", _wrap_float_matrix_resize},
    { "clear", _wrap_float_matrix_clear},
    { "swap", _wrap_float_matrix_swap},
    { "shrink_to_fit", _wrap_float_matrix_shrink_to_fit},
    { "reserve", _wrap_float_matrix_reserve},
    { "max_size", _wrap_float_matrix_max_size},
    { "capacity", _wrap_float_matrix_capacity},
    {0,0}
};
static swig_lua_method swig_float_matrix_meta[] = {
    { "__getitem", _wrap_float_matrix___getitem},
    { "__setitem", _wrap_float_matrix___setitem},
    {0,0}
};

static swig_lua_attribute swig_float_matrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_matrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_matrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_matrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_matrix_Sf_SwigStatic = {
    "float_matrix",
    swig_float_matrix_Sf_SwigStatic_methods,
    swig_float_matrix_Sf_SwigStatic_attributes,
    swig_float_matrix_Sf_SwigStatic_constants,
    swig_float_matrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_matrix_bases[] = {0};
static const char *swig_float_matrix_base_names[] = {0};
static swig_lua_class _wrap_class_float_matrix = { "float_matrix", "float_matrix", &SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t,_proxy__wrap_new_float_matrix, swig_delete_float_matrix, swig_float_matrix_methods, swig_float_matrix_attributes, &swig_float_matrix_Sf_SwigStatic, swig_float_matrix_meta, swig_float_matrix_bases, swig_float_matrix_base_names };

static int _wrap_new_double_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",0,0)
  result = (std::vector< double > *)new std::vector< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double *arg2 = 0 ;
  double temp2 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::vector",2,"double const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< double > *)new std::vector< double >(arg1,(double const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< double > *)new std::vector< double >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"std::vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("new_double_vector",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_double_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_double_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_double_vector__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_double_vector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_double_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::vector()\n"
    "    std::vector< double >::vector(size_t,double const &)\n"
    "    std::vector< double >::vector(size_t)\n"
    "    std::vector< double >::vector(std::vector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_double_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("std::vector< double >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::__getitem",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector___getitem",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)std_vector_Sl_double_Sg____getitem__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("std::vector< double >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::__setitem",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< double >::__setitem",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector___setitem",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  std_vector_Sl_double_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  SwigValueWrapper< std::vector_iterator< double > > result;
  
  SWIG_check_num_args("std::vector< double >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::ibegin",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_ibegin",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = std_vector_Sl_double_Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< double > * resultptr = new std::vector_iterator< double >((const std::vector_iterator< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  SwigValueWrapper< std::vector_iterator< double > > result;
  
  SWIG_check_num_args("std::vector< double >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::iend",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_iend",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = std_vector_Sl_double_Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< double > * resultptr = new std::vector_iterator< double >((const std::vector_iterator< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< double >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::erase",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_erase",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_double_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< double >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::erase",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< double >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_erase",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_double_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_double_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::erase(size_t)\n"
    "    std::vector< double >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_double_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::front",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_front",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::back",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_num_args("std::vector< double >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::push_back",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::push_back",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_push_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("std::vector< double >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::pop_back",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_pop_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::at",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_at",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  SWIG_check_num_args("std::vector< double >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::assign",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< double >::assign",3,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_assign",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(double const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::data",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_data",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< double >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::size",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_size",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< double >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::empty",1,"std::vector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_empty",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)((std::vector< double > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< double >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::resize",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_resize",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("std::vector< double >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::clear",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_clear",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< double >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::swap",1,"std::vector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< double >::swap",2,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_swap",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_swap",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("std::vector< double >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::shrink_to_fit",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< double >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::reserve",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_reserve",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< double >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::max_size",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_max_size",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< double >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::capacity",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_capacity",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_vector(void *obj) {
std::vector< double > *arg1 = (std::vector< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_double_vector_methods[]= {
    { "__getitem", _wrap_double_vector___getitem},
    { "__setitem", _wrap_double_vector___setitem},
    { "ibegin", _wrap_double_vector_ibegin},
    { "iend", _wrap_double_vector_iend},
    { "erase", _wrap_double_vector_erase},
    { "front", _wrap_double_vector_front},
    { "back", _wrap_double_vector_back},
    { "push_back", _wrap_double_vector_push_back},
    { "pop_back", _wrap_double_vector_pop_back},
    { "at", _wrap_double_vector_at},
    { "assign", _wrap_double_vector_assign},
    { "data", _wrap_double_vector_data},
    { "size", _wrap_double_vector_size},
    { "empty", _wrap_double_vector_empty},
    { "resize", _wrap_double_vector_resize},
    { "clear", _wrap_double_vector_clear},
    { "swap", _wrap_double_vector_swap},
    { "shrink_to_fit", _wrap_double_vector_shrink_to_fit},
    { "reserve", _wrap_double_vector_reserve},
    { "max_size", _wrap_double_vector_max_size},
    { "capacity", _wrap_double_vector_capacity},
    {0,0}
};
static swig_lua_method swig_double_vector_meta[] = {
    { "__getitem", _wrap_double_vector___getitem},
    { "__setitem", _wrap_double_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_double_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_vector_Sf_SwigStatic = {
    "double_vector",
    swig_double_vector_Sf_SwigStatic_methods,
    swig_double_vector_Sf_SwigStatic_attributes,
    swig_double_vector_Sf_SwigStatic_constants,
    swig_double_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_vector_bases[] = {0};
static const char *swig_double_vector_base_names[] = {0};
static swig_lua_class _wrap_class_double_vector = { "double_vector", "double_vector", &SWIGTYPE_p_std__vectorT_double_t,_proxy__wrap_new_double_vector, swig_delete_double_vector, swig_double_vector_methods, swig_double_vector_attributes, &swig_double_vector_Sf_SwigStatic, swig_double_vector_meta, swig_double_vector_bases, swig_double_vector_base_names };

static int _wrap_new_double_matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< double > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< double > >::vector",0,0)
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< double > *arg2 = 0 ;
  std::vector< std::vector< double > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< double > >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::vector< double > >::vector",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::vector< double > >::vector",2,"std::vector< double > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("new_double_matrix",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >(arg1,(std::vector< double > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_matrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< std::vector< double > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< double > >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::vector< double > >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_matrix__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< double > > *arg1 = 0 ;
  std::vector< std::vector< double > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< double > >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< std::vector< double > >::vector",1,"std::vector< std::vector< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0))){
    SWIG_fail_ptr("new_double_matrix",1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t);
  }
  
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >((std::vector< std::vector< double > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_matrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_double_matrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_double_matrix__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_double_matrix__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_double_matrix__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_double_matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::vector()\n"
    "    std::vector< std::vector< double > >::vector(size_t,std::vector< double > const &)\n"
    "    std::vector< std::vector< double > >::vector(size_t)\n"
    "    std::vector< std::vector< double > >::vector(std::vector< std::vector< double > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_double_matrix___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  size_t arg2 ;
  std::vector< double > result;
  
  SWIG_check_num_args("std::vector< std::vector< double > >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< double > >::__getitem",1,"std::vector< std::vector< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< double > >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0))){
    SWIG_fail_ptr("double_matrix___getitem",1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = std_vector_Sl_std_vector_Sl_double_Sg__Sg____getitem__SWIG(arg1,arg2);
  {
    std::vector< double > * resultptr = new std::vector< double >((const std::vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_matrix___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  size_t arg2 ;
  std::vector< double > arg3 ;
  std::vector< double > *argp3 ;
  
  SWIG_check_num_args("std::vector< std::vector< double > >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< double > >::__setitem",1,"std::vector< std::vector< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< double > >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::vector< double > >::__setitem",3,"std::vector< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0))){
    SWIG_fail_ptr("double_matrix___setitem",1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_matrix___setitem",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  arg3 = *argp3;
  
  std_vector_Sl_std_vector_Sl_double_Sg__Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_matrix_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::vector< double > > > result;
  
  SWIG_check_num_args("std::vector< std::vector< double > >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< double > >::ibegin",1,"std::vector< std::vector< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0))){
    SWIG_fail_ptr("double_matrix_ibegin",1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t);
  }
  
  result = std_vector_Sl_std_vector_Sl_double_Sg__Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< std::vector< double > > * resultptr = new std::vector_iterator< std::vector< double > >((const std::vector_iterator< std::vector< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__vectorT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_matrix_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::vector< double > > > result;
  
  SWIG_check_num_args("std::vector< std::vector< double > >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< double > >::iend",1,"std::vector< std::vector< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0))){
    SWIG_fail_ptr("double_matrix_iend",1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t);
  }
  
  result = std_vector_Sl_std_vector_Sl_double_Sg__Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< std::vector< double > > * resultptr = new std::vector_iterator< std::vector< double > >((const std::vector_iterator< std::vector< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__vectorT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_matrix_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::vector< double > >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< double > >::erase",1,"std::vector< std::vector< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< double > >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0))){
    SWIG_fail_ptr("double_matrix_erase",1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_std_vector_Sl_double_Sg__Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_matrix_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< std::vector< double > >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< double > >::erase",1,"std::vector< std::vector< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< double > >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< std::vector< double > >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0))){
    SWIG_fail_ptr("double_matrix_erase",1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_std_vector_Sl_double_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_matrix_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_matrix_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_double_matrix_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_matrix_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::erase(size_t)\n"
    "    std::vector< std::vector< double > >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_double_matrix_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< double > >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< double > >::front",1,"std::vector< std::vector< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0))){
    SWIG_fail_ptr("double_matrix_front",1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t);
  }
  
  result = (std::vector< double > *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_matrix_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< double > >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< double > >::back",1,"std::vector< std::vector< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0))){
    SWIG_fail_ptr("double_matrix_back",1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t);
  }
  
  result = (std::vector< double > *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_matrix_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< double > >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< double > >::push_back",1,"std::vector< std::vector< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::vector< double > >::push_back",2,"std::vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0))){
    SWIG_fail_ptr("double_matrix_push_back",1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_matrix_push_back",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->push_back((std::vector< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_matrix_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< double > >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< double > >::pop_back",1,"std::vector< std::vector< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0))){
    SWIG_fail_ptr("double_matrix_pop_back",1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_matrix_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  size_t arg2 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< double > >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< double > >::at",1,"std::vector< std::vector< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< double > >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0))){
    SWIG_fail_ptr("double_matrix_at",1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::vector< double > *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_matrix_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  size_t arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< double > >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< double > >::assign",1,"std::vector< std::vector< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< double > >::assign",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::vector< double > >::assign",3,"std::vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0))){
    SWIG_fail_ptr("double_matrix_assign",1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_matrix_assign",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->assign(arg2,(std::vector< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_matrix_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< double > >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< double > >::data",1,"std::vector< std::vector< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0))){
    SWIG_fail_ptr("double_matrix_data",1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t);
  }
  
  result = (std::vector< double > *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_matrix_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::vector< double > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< double > >::size",1,"std::vector< std::vector< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0))){
    SWIG_fail_ptr("double_matrix_size",1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_matrix_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< std::vector< double > >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< double > >::empty",1,"std::vector< std::vector< double > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0))){
    SWIG_fail_ptr("double_matrix_empty",1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t);
  }
  
  result = (bool)((std::vector< std::vector< double > > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_matrix_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::vector< double > >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< double > >::resize",1,"std::vector< std::vector< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< double > >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0))){
    SWIG_fail_ptr("double_matrix_resize",1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_matrix_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< double > >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< double > >::clear",1,"std::vector< std::vector< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0))){
    SWIG_fail_ptr("double_matrix_clear",1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_matrix_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< double > >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< double > >::swap",1,"std::vector< std::vector< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::vector< double > >::swap",2,"std::vector< std::vector< double > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0))){
    SWIG_fail_ptr("double_matrix_swap",1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0))){
    SWIG_fail_ptr("double_matrix_swap",2,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_matrix_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< double > >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< double > >::shrink_to_fit",1,"std::vector< std::vector< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0))){
    SWIG_fail_ptr("double_matrix_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_matrix_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::vector< double > >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< double > >::reserve",1,"std::vector< std::vector< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< double > >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0))){
    SWIG_fail_ptr("double_matrix_reserve",1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_matrix_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::vector< double > >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< double > >::max_size",1,"std::vector< std::vector< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0))){
    SWIG_fail_ptr("double_matrix_max_size",1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_matrix_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::vector< double > >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< double > >::capacity",1,"std::vector< std::vector< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0))){
    SWIG_fail_ptr("double_matrix_capacity",1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_matrix(void *obj) {
std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_matrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_matrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_matrix_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_double_matrix_methods[]= {
    { "__getitem", _wrap_double_matrix___getitem},
    { "__setitem", _wrap_double_matrix___setitem},
    { "ibegin", _wrap_double_matrix_ibegin},
    { "iend", _wrap_double_matrix_iend},
    { "erase", _wrap_double_matrix_erase},
    { "front", _wrap_double_matrix_front},
    { "back", _wrap_double_matrix_back},
    { "push_back", _wrap_double_matrix_push_back},
    { "pop_back", _wrap_double_matrix_pop_back},
    { "at", _wrap_double_matrix_at},
    { "assign", _wrap_double_matrix_assign},
    { "data", _wrap_double_matrix_data},
    { "size", _wrap_double_matrix_size},
    { "empty", _wrap_double_matrix_empty},
    { "resize", _wrap_double_matrix_resize},
    { "clear", _wrap_double_matrix_clear},
    { "swap", _wrap_double_matrix_swap},
    { "shrink_to_fit", _wrap_double_matrix_shrink_to_fit},
    { "reserve", _wrap_double_matrix_reserve},
    { "max_size", _wrap_double_matrix_max_size},
    { "capacity", _wrap_double_matrix_capacity},
    {0,0}
};
static swig_lua_method swig_double_matrix_meta[] = {
    { "__getitem", _wrap_double_matrix___getitem},
    { "__setitem", _wrap_double_matrix___setitem},
    {0,0}
};

static swig_lua_attribute swig_double_matrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_matrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_matrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_matrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_matrix_Sf_SwigStatic = {
    "double_matrix",
    swig_double_matrix_Sf_SwigStatic_methods,
    swig_double_matrix_Sf_SwigStatic_attributes,
    swig_double_matrix_Sf_SwigStatic_constants,
    swig_double_matrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_matrix_bases[] = {0};
static const char *swig_double_matrix_base_names[] = {0};
static swig_lua_class _wrap_class_double_matrix = { "double_matrix", "double_matrix", &SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,_proxy__wrap_new_double_matrix, swig_delete_double_matrix, swig_double_matrix_methods, swig_double_matrix_attributes, &swig_double_matrix_Sf_SwigStatic, swig_double_matrix_meta, swig_double_matrix_bases, swig_double_matrix_base_names };

static int _wrap_new_ldouble_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< long double >::vector",0,0)
  result = (std::vector< long double > *)new std::vector< long double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ldouble_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  long double *arg2 = 0 ;
  std::vector< long double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< long double >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< long double >::vector",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< long double >::vector",2,"long double const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long_double,0))){
    SWIG_fail_ptr("new_ldouble_vector",2,SWIGTYPE_p_long_double);
  }
  
  result = (std::vector< long double > *)new std::vector< long double >(arg1,(long double const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ldouble_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< long double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< long double >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< long double >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< long double > *)new std::vector< long double >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ldouble_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long double > *arg1 = 0 ;
  std::vector< long double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< long double >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< long double >::vector",1,"std::vector< long double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_double_t,0))){
    SWIG_fail_ptr("new_ldouble_vector",1,SWIGTYPE_p_std__vectorT_long_double_t);
  }
  
  result = (std::vector< long double > *)new std::vector< long double >((std::vector< long double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ldouble_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ldouble_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_long_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ldouble_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ldouble_vector__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_ldouble_vector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ldouble_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< long double >::vector()\n"
    "    std::vector< long double >::vector(size_t,long double const &)\n"
    "    std::vector< long double >::vector(size_t)\n"
    "    std::vector< long double >::vector(std::vector< long double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ldouble_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long double > *arg1 = (std::vector< long double > *) 0 ;
  size_t arg2 ;
  long double result;
  
  SWIG_check_num_args("std::vector< long double >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long double >::__getitem",1,"std::vector< long double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long double >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_double_t,0))){
    SWIG_fail_ptr("ldouble_vector___getitem",1,SWIGTYPE_p_std__vectorT_long_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (long double)std_vector_Sl_long_SS_double_Sg____getitem__SWIG(arg1,arg2);
  {
    long double * resultptr = new long double((const long double &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_long_double,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long double > *arg1 = (std::vector< long double > *) 0 ;
  size_t arg2 ;
  long double arg3 ;
  long double *argp3 ;
  
  SWIG_check_num_args("std::vector< long double >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long double >::__setitem",1,"std::vector< long double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long double >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< long double >::__setitem",3,"long double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_double_t,0))){
    SWIG_fail_ptr("ldouble_vector___setitem",1,SWIGTYPE_p_std__vectorT_long_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_long_double,0))){
    SWIG_fail_ptr("ldouble_vector___setitem",3,SWIGTYPE_p_long_double);
  }
  arg3 = *argp3;
  
  std_vector_Sl_long_SS_double_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_vector_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long double > *arg1 = (std::vector< long double > *) 0 ;
  SwigValueWrapper< std::vector_iterator< long double > > result;
  
  SWIG_check_num_args("std::vector< long double >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long double >::ibegin",1,"std::vector< long double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_double_t,0))){
    SWIG_fail_ptr("ldouble_vector_ibegin",1,SWIGTYPE_p_std__vectorT_long_double_t);
  }
  
  result = std_vector_Sl_long_SS_double_Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< long double > * resultptr = new std::vector_iterator< long double >((const std::vector_iterator< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_vector_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long double > *arg1 = (std::vector< long double > *) 0 ;
  SwigValueWrapper< std::vector_iterator< long double > > result;
  
  SWIG_check_num_args("std::vector< long double >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long double >::iend",1,"std::vector< long double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_double_t,0))){
    SWIG_fail_ptr("ldouble_vector_iend",1,SWIGTYPE_p_std__vectorT_long_double_t);
  }
  
  result = std_vector_Sl_long_SS_double_Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< long double > * resultptr = new std::vector_iterator< long double >((const std::vector_iterator< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long double > *arg1 = (std::vector< long double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< long double >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long double >::erase",1,"std::vector< long double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long double >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_double_t,0))){
    SWIG_fail_ptr("ldouble_vector_erase",1,SWIGTYPE_p_std__vectorT_long_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_long_SS_double_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long double > *arg1 = (std::vector< long double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< long double >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long double >::erase",1,"std::vector< long double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long double >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< long double >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_double_t,0))){
    SWIG_fail_ptr("ldouble_vector_erase",1,SWIGTYPE_p_std__vectorT_long_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_long_SS_double_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ldouble_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ldouble_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ldouble_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< long double >::erase(size_t)\n"
    "    std::vector< long double >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ldouble_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long double > *arg1 = (std::vector< long double > *) 0 ;
  long double *result = 0 ;
  
  SWIG_check_num_args("std::vector< long double >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long double >::front",1,"std::vector< long double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_double_t,0))){
    SWIG_fail_ptr("ldouble_vector_front",1,SWIGTYPE_p_std__vectorT_long_double_t);
  }
  
  result = (long double *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long double > *arg1 = (std::vector< long double > *) 0 ;
  long double *result = 0 ;
  
  SWIG_check_num_args("std::vector< long double >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long double >::back",1,"std::vector< long double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_double_t,0))){
    SWIG_fail_ptr("ldouble_vector_back",1,SWIGTYPE_p_std__vectorT_long_double_t);
  }
  
  result = (long double *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long double > *arg1 = (std::vector< long double > *) 0 ;
  long double *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< long double >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long double >::push_back",1,"std::vector< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< long double >::push_back",2,"long double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_double_t,0))){
    SWIG_fail_ptr("ldouble_vector_push_back",1,SWIGTYPE_p_std__vectorT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long_double,0))){
    SWIG_fail_ptr("ldouble_vector_push_back",2,SWIGTYPE_p_long_double);
  }
  
  (arg1)->push_back((long double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long double > *arg1 = (std::vector< long double > *) 0 ;
  
  SWIG_check_num_args("std::vector< long double >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long double >::pop_back",1,"std::vector< long double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_double_t,0))){
    SWIG_fail_ptr("ldouble_vector_pop_back",1,SWIGTYPE_p_std__vectorT_long_double_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long double > *arg1 = (std::vector< long double > *) 0 ;
  size_t arg2 ;
  long double *result = 0 ;
  
  SWIG_check_num_args("std::vector< long double >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long double >::at",1,"std::vector< long double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long double >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_double_t,0))){
    SWIG_fail_ptr("ldouble_vector_at",1,SWIGTYPE_p_std__vectorT_long_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (long double *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long double > *arg1 = (std::vector< long double > *) 0 ;
  size_t arg2 ;
  long double *arg3 = 0 ;
  
  SWIG_check_num_args("std::vector< long double >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long double >::assign",1,"std::vector< long double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long double >::assign",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< long double >::assign",3,"long double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_double_t,0))){
    SWIG_fail_ptr("ldouble_vector_assign",1,SWIGTYPE_p_std__vectorT_long_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long_double,0))){
    SWIG_fail_ptr("ldouble_vector_assign",3,SWIGTYPE_p_long_double);
  }
  
  (arg1)->assign(arg2,(long double const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long double > *arg1 = (std::vector< long double > *) 0 ;
  long double *result = 0 ;
  
  SWIG_check_num_args("std::vector< long double >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long double >::data",1,"std::vector< long double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_double_t,0))){
    SWIG_fail_ptr("ldouble_vector_data",1,SWIGTYPE_p_std__vectorT_long_double_t);
  }
  
  result = (long double *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long double > *arg1 = (std::vector< long double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< long double >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long double >::size",1,"std::vector< long double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_double_t,0))){
    SWIG_fail_ptr("ldouble_vector_size",1,SWIGTYPE_p_std__vectorT_long_double_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long double > *arg1 = (std::vector< long double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< long double >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long double >::empty",1,"std::vector< long double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_double_t,0))){
    SWIG_fail_ptr("ldouble_vector_empty",1,SWIGTYPE_p_std__vectorT_long_double_t);
  }
  
  result = (bool)((std::vector< long double > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long double > *arg1 = (std::vector< long double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< long double >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long double >::resize",1,"std::vector< long double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long double >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_double_t,0))){
    SWIG_fail_ptr("ldouble_vector_resize",1,SWIGTYPE_p_std__vectorT_long_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long double > *arg1 = (std::vector< long double > *) 0 ;
  
  SWIG_check_num_args("std::vector< long double >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long double >::clear",1,"std::vector< long double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_double_t,0))){
    SWIG_fail_ptr("ldouble_vector_clear",1,SWIGTYPE_p_std__vectorT_long_double_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long double > *arg1 = (std::vector< long double > *) 0 ;
  std::vector< long double > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< long double >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long double >::swap",1,"std::vector< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< long double >::swap",2,"std::vector< long double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_double_t,0))){
    SWIG_fail_ptr("ldouble_vector_swap",1,SWIGTYPE_p_std__vectorT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_long_double_t,0))){
    SWIG_fail_ptr("ldouble_vector_swap",2,SWIGTYPE_p_std__vectorT_long_double_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long double > *arg1 = (std::vector< long double > *) 0 ;
  
  SWIG_check_num_args("std::vector< long double >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long double >::shrink_to_fit",1,"std::vector< long double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_double_t,0))){
    SWIG_fail_ptr("ldouble_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_long_double_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long double > *arg1 = (std::vector< long double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< long double >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long double >::reserve",1,"std::vector< long double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long double >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_double_t,0))){
    SWIG_fail_ptr("ldouble_vector_reserve",1,SWIGTYPE_p_std__vectorT_long_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long double > *arg1 = (std::vector< long double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< long double >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long double >::max_size",1,"std::vector< long double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_double_t,0))){
    SWIG_fail_ptr("ldouble_vector_max_size",1,SWIGTYPE_p_std__vectorT_long_double_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long double > *arg1 = (std::vector< long double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< long double >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long double >::capacity",1,"std::vector< long double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_double_t,0))){
    SWIG_fail_ptr("ldouble_vector_capacity",1,SWIGTYPE_p_std__vectorT_long_double_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ldouble_vector(void *obj) {
std::vector< long double > *arg1 = (std::vector< long double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ldouble_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ldouble_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ldouble_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ldouble_vector_methods[]= {
    { "__getitem", _wrap_ldouble_vector___getitem},
    { "__setitem", _wrap_ldouble_vector___setitem},
    { "ibegin", _wrap_ldouble_vector_ibegin},
    { "iend", _wrap_ldouble_vector_iend},
    { "erase", _wrap_ldouble_vector_erase},
    { "front", _wrap_ldouble_vector_front},
    { "back", _wrap_ldouble_vector_back},
    { "push_back", _wrap_ldouble_vector_push_back},
    { "pop_back", _wrap_ldouble_vector_pop_back},
    { "at", _wrap_ldouble_vector_at},
    { "assign", _wrap_ldouble_vector_assign},
    { "data", _wrap_ldouble_vector_data},
    { "size", _wrap_ldouble_vector_size},
    { "empty", _wrap_ldouble_vector_empty},
    { "resize", _wrap_ldouble_vector_resize},
    { "clear", _wrap_ldouble_vector_clear},
    { "swap", _wrap_ldouble_vector_swap},
    { "shrink_to_fit", _wrap_ldouble_vector_shrink_to_fit},
    { "reserve", _wrap_ldouble_vector_reserve},
    { "max_size", _wrap_ldouble_vector_max_size},
    { "capacity", _wrap_ldouble_vector_capacity},
    {0,0}
};
static swig_lua_method swig_ldouble_vector_meta[] = {
    { "__getitem", _wrap_ldouble_vector___getitem},
    { "__setitem", _wrap_ldouble_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_ldouble_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ldouble_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ldouble_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ldouble_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ldouble_vector_Sf_SwigStatic = {
    "ldouble_vector",
    swig_ldouble_vector_Sf_SwigStatic_methods,
    swig_ldouble_vector_Sf_SwigStatic_attributes,
    swig_ldouble_vector_Sf_SwigStatic_constants,
    swig_ldouble_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ldouble_vector_bases[] = {0};
static const char *swig_ldouble_vector_base_names[] = {0};
static swig_lua_class _wrap_class_ldouble_vector = { "ldouble_vector", "ldouble_vector", &SWIGTYPE_p_std__vectorT_long_double_t,_proxy__wrap_new_ldouble_vector, swig_delete_ldouble_vector, swig_ldouble_vector_methods, swig_ldouble_vector_attributes, &swig_ldouble_vector_Sf_SwigStatic, swig_ldouble_vector_meta, swig_ldouble_vector_bases, swig_ldouble_vector_base_names };

static int _wrap_new_ldouble_matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< long double > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< long double > >::vector",0,0)
  result = (std::vector< std::vector< long double > > *)new std::vector< std::vector< long double > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ldouble_matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< long double > *arg2 = 0 ;
  std::vector< std::vector< long double > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< long double > >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::vector< long double > >::vector",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::vector< long double > >::vector",2,"std::vector< long double > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_long_double_t,0))){
    SWIG_fail_ptr("new_ldouble_matrix",2,SWIGTYPE_p_std__vectorT_long_double_t);
  }
  
  result = (std::vector< std::vector< long double > > *)new std::vector< std::vector< long double > >(arg1,(std::vector< long double > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ldouble_matrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< std::vector< long double > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< long double > >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::vector< long double > >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< std::vector< long double > > *)new std::vector< std::vector< long double > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ldouble_matrix__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< long double > > *arg1 = 0 ;
  std::vector< std::vector< long double > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< long double > >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< std::vector< long double > >::vector",1,"std::vector< std::vector< long double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t,0))){
    SWIG_fail_ptr("new_ldouble_matrix",1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t);
  }
  
  result = (std::vector< std::vector< long double > > *)new std::vector< std::vector< long double > >((std::vector< std::vector< long double > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ldouble_matrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ldouble_matrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ldouble_matrix__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ldouble_matrix__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_long_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_ldouble_matrix__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ldouble_matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< long double > >::vector()\n"
    "    std::vector< std::vector< long double > >::vector(size_t,std::vector< long double > const &)\n"
    "    std::vector< std::vector< long double > >::vector(size_t)\n"
    "    std::vector< std::vector< long double > >::vector(std::vector< std::vector< long double > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ldouble_matrix___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< long double > > *arg1 = (std::vector< std::vector< long double > > *) 0 ;
  size_t arg2 ;
  std::vector< long double > result;
  
  SWIG_check_num_args("std::vector< std::vector< long double > >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< long double > >::__getitem",1,"std::vector< std::vector< long double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< long double > >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t,0))){
    SWIG_fail_ptr("ldouble_matrix___getitem",1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = std_vector_Sl_std_vector_Sl_long_SS_double_Sg__Sg____getitem__SWIG(arg1,arg2);
  {
    std::vector< long double > * resultptr = new std::vector< long double >((const std::vector< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_matrix___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< long double > > *arg1 = (std::vector< std::vector< long double > > *) 0 ;
  size_t arg2 ;
  std::vector< long double > arg3 ;
  std::vector< long double > *argp3 ;
  
  SWIG_check_num_args("std::vector< std::vector< long double > >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< long double > >::__setitem",1,"std::vector< std::vector< long double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< long double > >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::vector< long double > >::__setitem",3,"std::vector< long double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t,0))){
    SWIG_fail_ptr("ldouble_matrix___setitem",1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__vectorT_long_double_t,0))){
    SWIG_fail_ptr("ldouble_matrix___setitem",3,SWIGTYPE_p_std__vectorT_long_double_t);
  }
  arg3 = *argp3;
  
  std_vector_Sl_std_vector_Sl_long_SS_double_Sg__Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_matrix_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< long double > > *arg1 = (std::vector< std::vector< long double > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::vector< long double > > > result;
  
  SWIG_check_num_args("std::vector< std::vector< long double > >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< long double > >::ibegin",1,"std::vector< std::vector< long double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t,0))){
    SWIG_fail_ptr("ldouble_matrix_ibegin",1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t);
  }
  
  result = std_vector_Sl_std_vector_Sl_long_SS_double_Sg__Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< std::vector< long double > > * resultptr = new std::vector_iterator< std::vector< long double > >((const std::vector_iterator< std::vector< long double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__vectorT_long_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_matrix_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< long double > > *arg1 = (std::vector< std::vector< long double > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::vector< long double > > > result;
  
  SWIG_check_num_args("std::vector< std::vector< long double > >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< long double > >::iend",1,"std::vector< std::vector< long double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t,0))){
    SWIG_fail_ptr("ldouble_matrix_iend",1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t);
  }
  
  result = std_vector_Sl_std_vector_Sl_long_SS_double_Sg__Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< std::vector< long double > > * resultptr = new std::vector_iterator< std::vector< long double > >((const std::vector_iterator< std::vector< long double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__vectorT_long_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_matrix_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< long double > > *arg1 = (std::vector< std::vector< long double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::vector< long double > >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< long double > >::erase",1,"std::vector< std::vector< long double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< long double > >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t,0))){
    SWIG_fail_ptr("ldouble_matrix_erase",1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_std_vector_Sl_long_SS_double_Sg__Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_matrix_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< long double > > *arg1 = (std::vector< std::vector< long double > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< std::vector< long double > >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< long double > >::erase",1,"std::vector< std::vector< long double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< long double > >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< std::vector< long double > >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t,0))){
    SWIG_fail_ptr("ldouble_matrix_erase",1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_std_vector_Sl_long_SS_double_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_matrix_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ldouble_matrix_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ldouble_matrix_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ldouble_matrix_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< long double > >::erase(size_t)\n"
    "    std::vector< std::vector< long double > >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ldouble_matrix_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< long double > > *arg1 = (std::vector< std::vector< long double > > *) 0 ;
  std::vector< long double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< long double > >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< long double > >::front",1,"std::vector< std::vector< long double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t,0))){
    SWIG_fail_ptr("ldouble_matrix_front",1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t);
  }
  
  result = (std::vector< long double > *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_matrix_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< long double > > *arg1 = (std::vector< std::vector< long double > > *) 0 ;
  std::vector< long double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< long double > >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< long double > >::back",1,"std::vector< std::vector< long double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t,0))){
    SWIG_fail_ptr("ldouble_matrix_back",1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t);
  }
  
  result = (std::vector< long double > *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_matrix_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< long double > > *arg1 = (std::vector< std::vector< long double > > *) 0 ;
  std::vector< long double > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< long double > >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< long double > >::push_back",1,"std::vector< std::vector< long double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::vector< long double > >::push_back",2,"std::vector< long double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t,0))){
    SWIG_fail_ptr("ldouble_matrix_push_back",1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_long_double_t,0))){
    SWIG_fail_ptr("ldouble_matrix_push_back",2,SWIGTYPE_p_std__vectorT_long_double_t);
  }
  
  (arg1)->push_back((std::vector< long double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_matrix_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< long double > > *arg1 = (std::vector< std::vector< long double > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< long double > >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< long double > >::pop_back",1,"std::vector< std::vector< long double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t,0))){
    SWIG_fail_ptr("ldouble_matrix_pop_back",1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_matrix_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< long double > > *arg1 = (std::vector< std::vector< long double > > *) 0 ;
  size_t arg2 ;
  std::vector< long double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< long double > >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< long double > >::at",1,"std::vector< std::vector< long double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< long double > >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t,0))){
    SWIG_fail_ptr("ldouble_matrix_at",1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::vector< long double > *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_matrix_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< long double > > *arg1 = (std::vector< std::vector< long double > > *) 0 ;
  size_t arg2 ;
  std::vector< long double > *arg3 = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< long double > >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< long double > >::assign",1,"std::vector< std::vector< long double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< long double > >::assign",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::vector< long double > >::assign",3,"std::vector< long double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t,0))){
    SWIG_fail_ptr("ldouble_matrix_assign",1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_long_double_t,0))){
    SWIG_fail_ptr("ldouble_matrix_assign",3,SWIGTYPE_p_std__vectorT_long_double_t);
  }
  
  (arg1)->assign(arg2,(std::vector< long double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_matrix_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< long double > > *arg1 = (std::vector< std::vector< long double > > *) 0 ;
  std::vector< long double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< long double > >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< long double > >::data",1,"std::vector< std::vector< long double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t,0))){
    SWIG_fail_ptr("ldouble_matrix_data",1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t);
  }
  
  result = (std::vector< long double > *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_matrix_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< long double > > *arg1 = (std::vector< std::vector< long double > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::vector< long double > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< long double > >::size",1,"std::vector< std::vector< long double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t,0))){
    SWIG_fail_ptr("ldouble_matrix_size",1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_matrix_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< long double > > *arg1 = (std::vector< std::vector< long double > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< std::vector< long double > >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< long double > >::empty",1,"std::vector< std::vector< long double > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t,0))){
    SWIG_fail_ptr("ldouble_matrix_empty",1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t);
  }
  
  result = (bool)((std::vector< std::vector< long double > > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_matrix_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< long double > > *arg1 = (std::vector< std::vector< long double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::vector< long double > >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< long double > >::resize",1,"std::vector< std::vector< long double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< long double > >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t,0))){
    SWIG_fail_ptr("ldouble_matrix_resize",1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_matrix_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< long double > > *arg1 = (std::vector< std::vector< long double > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< long double > >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< long double > >::clear",1,"std::vector< std::vector< long double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t,0))){
    SWIG_fail_ptr("ldouble_matrix_clear",1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_matrix_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< long double > > *arg1 = (std::vector< std::vector< long double > > *) 0 ;
  std::vector< std::vector< long double > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< long double > >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< long double > >::swap",1,"std::vector< std::vector< long double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::vector< long double > >::swap",2,"std::vector< std::vector< long double > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t,0))){
    SWIG_fail_ptr("ldouble_matrix_swap",1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t,0))){
    SWIG_fail_ptr("ldouble_matrix_swap",2,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_matrix_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< long double > > *arg1 = (std::vector< std::vector< long double > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< long double > >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< long double > >::shrink_to_fit",1,"std::vector< std::vector< long double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t,0))){
    SWIG_fail_ptr("ldouble_matrix_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_matrix_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< long double > > *arg1 = (std::vector< std::vector< long double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::vector< long double > >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< long double > >::reserve",1,"std::vector< std::vector< long double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< long double > >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t,0))){
    SWIG_fail_ptr("ldouble_matrix_reserve",1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_matrix_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< long double > > *arg1 = (std::vector< std::vector< long double > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::vector< long double > >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< long double > >::max_size",1,"std::vector< std::vector< long double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t,0))){
    SWIG_fail_ptr("ldouble_matrix_max_size",1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldouble_matrix_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< long double > > *arg1 = (std::vector< std::vector< long double > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::vector< long double > >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< long double > >::capacity",1,"std::vector< std::vector< long double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t,0))){
    SWIG_fail_ptr("ldouble_matrix_capacity",1,SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ldouble_matrix(void *obj) {
std::vector< std::vector< long double > > *arg1 = (std::vector< std::vector< long double > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ldouble_matrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ldouble_matrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ldouble_matrix_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ldouble_matrix_methods[]= {
    { "__getitem", _wrap_ldouble_matrix___getitem},
    { "__setitem", _wrap_ldouble_matrix___setitem},
    { "ibegin", _wrap_ldouble_matrix_ibegin},
    { "iend", _wrap_ldouble_matrix_iend},
    { "erase", _wrap_ldouble_matrix_erase},
    { "front", _wrap_ldouble_matrix_front},
    { "back", _wrap_ldouble_matrix_back},
    { "push_back", _wrap_ldouble_matrix_push_back},
    { "pop_back", _wrap_ldouble_matrix_pop_back},
    { "at", _wrap_ldouble_matrix_at},
    { "assign", _wrap_ldouble_matrix_assign},
    { "data", _wrap_ldouble_matrix_data},
    { "size", _wrap_ldouble_matrix_size},
    { "empty", _wrap_ldouble_matrix_empty},
    { "resize", _wrap_ldouble_matrix_resize},
    { "clear", _wrap_ldouble_matrix_clear},
    { "swap", _wrap_ldouble_matrix_swap},
    { "shrink_to_fit", _wrap_ldouble_matrix_shrink_to_fit},
    { "reserve", _wrap_ldouble_matrix_reserve},
    { "max_size", _wrap_ldouble_matrix_max_size},
    { "capacity", _wrap_ldouble_matrix_capacity},
    {0,0}
};
static swig_lua_method swig_ldouble_matrix_meta[] = {
    { "__getitem", _wrap_ldouble_matrix___getitem},
    { "__setitem", _wrap_ldouble_matrix___setitem},
    {0,0}
};

static swig_lua_attribute swig_ldouble_matrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ldouble_matrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ldouble_matrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ldouble_matrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ldouble_matrix_Sf_SwigStatic = {
    "ldouble_matrix",
    swig_ldouble_matrix_Sf_SwigStatic_methods,
    swig_ldouble_matrix_Sf_SwigStatic_attributes,
    swig_ldouble_matrix_Sf_SwigStatic_constants,
    swig_ldouble_matrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ldouble_matrix_bases[] = {0};
static const char *swig_ldouble_matrix_base_names[] = {0};
static swig_lua_class _wrap_class_ldouble_matrix = { "ldouble_matrix", "ldouble_matrix", &SWIGTYPE_p_std__vectorT_std__vectorT_long_double_t_t,_proxy__wrap_new_ldouble_matrix, swig_delete_ldouble_matrix, swig_ldouble_matrix_methods, swig_ldouble_matrix_attributes, &swig_ldouble_matrix_Sf_SwigStatic, swig_ldouble_matrix_meta, swig_ldouble_matrix_bases, swig_ldouble_matrix_base_names };

static int _wrap_new_char_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char > *result = 0 ;
  
  SWIG_check_num_args("std::vector< char >::vector",0,0)
  result = (std::vector< char > *)new std::vector< char >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_char_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  char *arg2 = 0 ;
  char temp2 ;
  std::vector< char > *result = 0 ;
  
  SWIG_check_num_args("std::vector< char >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< char >::vector",1,"size_t");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("std::vector< char >::vector",2,"char const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2 = (lua_tostring(L, 2))[0]; arg2=&temp2;
  result = (std::vector< char > *)new std::vector< char >(arg1,(char const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_char_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< char > *result = 0 ;
  
  SWIG_check_num_args("std::vector< char >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< char >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< char > *)new std::vector< char >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_char_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char > *arg1 = 0 ;
  std::vector< char > *result = 0 ;
  
  SWIG_check_num_args("std::vector< char >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< char >::vector",1,"std::vector< char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_t,0))){
    SWIG_fail_ptr("new_char_vector",1,SWIGTYPE_p_std__vectorT_char_t);
  }
  
  result = (std::vector< char > *)new std::vector< char >((std::vector< char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_char_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_char_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_char_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_char_vector__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_new_char_vector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_char_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< char >::vector()\n"
    "    std::vector< char >::vector(size_t,char const &)\n"
    "    std::vector< char >::vector(size_t)\n"
    "    std::vector< char >::vector(std::vector< char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_char_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  size_t arg2 ;
  char result;
  
  SWIG_check_num_args("std::vector< char >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< char >::__getitem",1,"std::vector< char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< char >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_t,0))){
    SWIG_fail_ptr("char_vector___getitem",1,SWIGTYPE_p_std__vectorT_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (char)std_vector_Sl_char_Sg____getitem__SWIG(arg1,arg2);
  lua_pushlstring(L, &result, 1); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  size_t arg2 ;
  char arg3 ;
  
  SWIG_check_num_args("std::vector< char >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< char >::__setitem",1,"std::vector< char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< char >::__setitem",2,"size_t");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("std::vector< char >::__setitem",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_t,0))){
    SWIG_fail_ptr("char_vector___setitem",1,SWIGTYPE_p_std__vectorT_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  std_vector_Sl_char_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  SwigValueWrapper< std::vector_iterator< char > > result;
  
  SWIG_check_num_args("std::vector< char >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< char >::ibegin",1,"std::vector< char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_t,0))){
    SWIG_fail_ptr("char_vector_ibegin",1,SWIGTYPE_p_std__vectorT_char_t);
  }
  
  result = std_vector_Sl_char_Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< char > * resultptr = new std::vector_iterator< char >((const std::vector_iterator< char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  SwigValueWrapper< std::vector_iterator< char > > result;
  
  SWIG_check_num_args("std::vector< char >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< char >::iend",1,"std::vector< char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_t,0))){
    SWIG_fail_ptr("char_vector_iend",1,SWIGTYPE_p_std__vectorT_char_t);
  }
  
  result = std_vector_Sl_char_Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< char > * resultptr = new std::vector_iterator< char >((const std::vector_iterator< char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< char >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< char >::erase",1,"std::vector< char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< char >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_t,0))){
    SWIG_fail_ptr("char_vector_erase",1,SWIGTYPE_p_std__vectorT_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_char_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< char >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< char >::erase",1,"std::vector< char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< char >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< char >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_t,0))){
    SWIG_fail_ptr("char_vector_erase",1,SWIGTYPE_p_std__vectorT_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_char_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_char_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_char_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'char_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< char >::erase(size_t)\n"
    "    std::vector< char >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_char_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::vector< char >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< char >::front",1,"std::vector< char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_t,0))){
    SWIG_fail_ptr("char_vector_front",1,SWIGTYPE_p_std__vectorT_char_t);
  }
  
  result = (char *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::vector< char >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< char >::back",1,"std::vector< char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_t,0))){
    SWIG_fail_ptr("char_vector_back",1,SWIGTYPE_p_std__vectorT_char_t);
  }
  
  result = (char *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  char *arg2 = 0 ;
  char temp2 ;
  
  SWIG_check_num_args("std::vector< char >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< char >::push_back",1,"std::vector< char > *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("std::vector< char >::push_back",2,"char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_t,0))){
    SWIG_fail_ptr("char_vector_push_back",1,SWIGTYPE_p_std__vectorT_char_t);
  }
  
  temp2 = (lua_tostring(L, 2))[0]; arg2=&temp2;
  (arg1)->push_back((char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  SWIG_check_num_args("std::vector< char >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< char >::pop_back",1,"std::vector< char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_t,0))){
    SWIG_fail_ptr("char_vector_pop_back",1,SWIGTYPE_p_std__vectorT_char_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  size_t arg2 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::vector< char >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< char >::at",1,"std::vector< char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< char >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_t,0))){
    SWIG_fail_ptr("char_vector_at",1,SWIGTYPE_p_std__vectorT_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (char *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  size_t arg2 ;
  char *arg3 = 0 ;
  char temp3 ;
  
  SWIG_check_num_args("std::vector< char >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< char >::assign",1,"std::vector< char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< char >::assign",2,"size_t");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("std::vector< char >::assign",3,"char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_t,0))){
    SWIG_fail_ptr("char_vector_assign",1,SWIGTYPE_p_std__vectorT_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3 = (lua_tostring(L, 3))[0]; arg3=&temp3;
  (arg1)->assign(arg2,(char const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::vector< char >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< char >::data",1,"std::vector< char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_t,0))){
    SWIG_fail_ptr("char_vector_data",1,SWIGTYPE_p_std__vectorT_char_t);
  }
  
  result = (char *)(arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< char >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< char >::size",1,"std::vector< char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_t,0))){
    SWIG_fail_ptr("char_vector_size",1,SWIGTYPE_p_std__vectorT_char_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< char >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< char >::empty",1,"std::vector< char > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_t,0))){
    SWIG_fail_ptr("char_vector_empty",1,SWIGTYPE_p_std__vectorT_char_t);
  }
  
  result = (bool)((std::vector< char > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< char >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< char >::resize",1,"std::vector< char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< char >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_t,0))){
    SWIG_fail_ptr("char_vector_resize",1,SWIGTYPE_p_std__vectorT_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  SWIG_check_num_args("std::vector< char >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< char >::clear",1,"std::vector< char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_t,0))){
    SWIG_fail_ptr("char_vector_clear",1,SWIGTYPE_p_std__vectorT_char_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< char >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< char >::swap",1,"std::vector< char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< char >::swap",2,"std::vector< char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_t,0))){
    SWIG_fail_ptr("char_vector_swap",1,SWIGTYPE_p_std__vectorT_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_char_t,0))){
    SWIG_fail_ptr("char_vector_swap",2,SWIGTYPE_p_std__vectorT_char_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  SWIG_check_num_args("std::vector< char >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< char >::shrink_to_fit",1,"std::vector< char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_t,0))){
    SWIG_fail_ptr("char_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_char_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< char >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< char >::reserve",1,"std::vector< char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< char >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_t,0))){
    SWIG_fail_ptr("char_vector_reserve",1,SWIGTYPE_p_std__vectorT_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< char >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< char >::max_size",1,"std::vector< char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_t,0))){
    SWIG_fail_ptr("char_vector_max_size",1,SWIGTYPE_p_std__vectorT_char_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< char >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< char >::capacity",1,"std::vector< char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_t,0))){
    SWIG_fail_ptr("char_vector_capacity",1,SWIGTYPE_p_std__vectorT_char_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_char_vector(void *obj) {
std::vector< char > *arg1 = (std::vector< char > *) obj;
delete arg1;
}
static int _proxy__wrap_new_char_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_char_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_char_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_char_vector_methods[]= {
    { "__getitem", _wrap_char_vector___getitem},
    { "__setitem", _wrap_char_vector___setitem},
    { "ibegin", _wrap_char_vector_ibegin},
    { "iend", _wrap_char_vector_iend},
    { "erase", _wrap_char_vector_erase},
    { "front", _wrap_char_vector_front},
    { "back", _wrap_char_vector_back},
    { "push_back", _wrap_char_vector_push_back},
    { "pop_back", _wrap_char_vector_pop_back},
    { "at", _wrap_char_vector_at},
    { "assign", _wrap_char_vector_assign},
    { "data", _wrap_char_vector_data},
    { "size", _wrap_char_vector_size},
    { "empty", _wrap_char_vector_empty},
    { "resize", _wrap_char_vector_resize},
    { "clear", _wrap_char_vector_clear},
    { "swap", _wrap_char_vector_swap},
    { "shrink_to_fit", _wrap_char_vector_shrink_to_fit},
    { "reserve", _wrap_char_vector_reserve},
    { "max_size", _wrap_char_vector_max_size},
    { "capacity", _wrap_char_vector_capacity},
    {0,0}
};
static swig_lua_method swig_char_vector_meta[] = {
    { "__getitem", _wrap_char_vector___getitem},
    { "__setitem", _wrap_char_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_char_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_char_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_char_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_char_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_char_vector_Sf_SwigStatic = {
    "char_vector",
    swig_char_vector_Sf_SwigStatic_methods,
    swig_char_vector_Sf_SwigStatic_attributes,
    swig_char_vector_Sf_SwigStatic_constants,
    swig_char_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_char_vector_bases[] = {0};
static const char *swig_char_vector_base_names[] = {0};
static swig_lua_class _wrap_class_char_vector = { "char_vector", "char_vector", &SWIGTYPE_p_std__vectorT_char_t,_proxy__wrap_new_char_vector, swig_delete_char_vector, swig_char_vector_methods, swig_char_vector_attributes, &swig_char_vector_Sf_SwigStatic, swig_char_vector_meta, swig_char_vector_bases, swig_char_vector_base_names };

static int _wrap_new_byte_matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned char > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned char > >::vector",0,0)
  result = (std::vector< std::vector< unsigned char > > *)new std::vector< std::vector< unsigned char > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_byte_matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< unsigned char > *arg2 = 0 ;
  std::vector< std::vector< unsigned char > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned char > >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::vector",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::vector",2,"std::vector< unsigned char > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("new_byte_matrix",2,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = (std::vector< std::vector< unsigned char > > *)new std::vector< std::vector< unsigned char > >(arg1,(std::vector< unsigned char > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_byte_matrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< std::vector< unsigned char > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned char > >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< std::vector< unsigned char > > *)new std::vector< std::vector< unsigned char > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_byte_matrix__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned char > > *arg1 = 0 ;
  std::vector< std::vector< unsigned char > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned char > >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::vector",1,"std::vector< std::vector< unsigned char > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("new_byte_matrix",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t);
  }
  
  result = (std::vector< std::vector< unsigned char > > *)new std::vector< std::vector< unsigned char > >((std::vector< std::vector< unsigned char > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_byte_matrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_byte_matrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_byte_matrix__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_byte_matrix__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_byte_matrix__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_byte_matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< unsigned char > >::vector()\n"
    "    std::vector< std::vector< unsigned char > >::vector(size_t,std::vector< unsigned char > const &)\n"
    "    std::vector< std::vector< unsigned char > >::vector(size_t)\n"
    "    std::vector< std::vector< unsigned char > >::vector(std::vector< std::vector< unsigned char > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_byte_matrix___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< std::vector< unsigned char > > result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned char > >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::__getitem",1,"std::vector< std::vector< unsigned char > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("byte_matrix___getitem",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg____getitem__SWIG(arg1,arg2);
  {
    std::vector< unsigned char > * resultptr = new std::vector< unsigned char >((const std::vector< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_byte_matrix___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< std::vector< unsigned char > > arg3 ;
  std::vector< unsigned char > *argp3 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned char > >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::__setitem",1,"std::vector< std::vector< unsigned char > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::__setitem",3,"std::vector< unsigned char >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("byte_matrix___setitem",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("byte_matrix___setitem",3,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  arg3 = *argp3;
  
  std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_byte_matrix_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::vector< unsigned char > > > result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned char > >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::ibegin",1,"std::vector< std::vector< unsigned char > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("byte_matrix_ibegin",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t);
  }
  
  result = std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< std::vector< unsigned char > > * resultptr = new std::vector_iterator< std::vector< unsigned char > >((const std::vector_iterator< std::vector< unsigned char > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__vectorT_unsigned_char_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_byte_matrix_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::vector< unsigned char > > > result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned char > >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::iend",1,"std::vector< std::vector< unsigned char > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("byte_matrix_iend",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t);
  }
  
  result = std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< std::vector< unsigned char > > * resultptr = new std::vector_iterator< std::vector< unsigned char > >((const std::vector_iterator< std::vector< unsigned char > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__vectorT_unsigned_char_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_byte_matrix_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned char > >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::erase",1,"std::vector< std::vector< unsigned char > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("byte_matrix_erase",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_byte_matrix_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned char > >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::erase",1,"std::vector< std::vector< unsigned char > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("byte_matrix_erase",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_byte_matrix_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_byte_matrix_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_byte_matrix_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'byte_matrix_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< unsigned char > >::erase(size_t)\n"
    "    std::vector< std::vector< unsigned char > >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_byte_matrix_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  std::vector< unsigned char > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned char > >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::front",1,"std::vector< std::vector< unsigned char > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("byte_matrix_front",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t);
  }
  
  result = (std::vector< unsigned char > *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_byte_matrix_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  std::vector< unsigned char > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned char > >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::back",1,"std::vector< std::vector< unsigned char > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("byte_matrix_back",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t);
  }
  
  result = (std::vector< unsigned char > *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_byte_matrix_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  std::vector< unsigned char > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned char > >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::push_back",1,"std::vector< std::vector< unsigned char > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::push_back",2,"std::vector< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("byte_matrix_push_back",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("byte_matrix_push_back",2,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  (arg1)->push_back((std::vector< unsigned char > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_byte_matrix_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned char > >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::pop_back",1,"std::vector< std::vector< unsigned char > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("byte_matrix_pop_back",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_byte_matrix_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  size_t arg2 ;
  std::vector< unsigned char > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned char > >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::at",1,"std::vector< std::vector< unsigned char > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("byte_matrix_at",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::vector< unsigned char > *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_byte_matrix_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  size_t arg2 ;
  std::vector< unsigned char > *arg3 = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned char > >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::assign",1,"std::vector< std::vector< unsigned char > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::assign",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::assign",3,"std::vector< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("byte_matrix_assign",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("byte_matrix_assign",3,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  (arg1)->assign(arg2,(std::vector< unsigned char > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_byte_matrix_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  std::vector< unsigned char > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned char > >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::data",1,"std::vector< std::vector< unsigned char > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("byte_matrix_data",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t);
  }
  
  result = (std::vector< unsigned char > *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_byte_matrix_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned char > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::size",1,"std::vector< std::vector< unsigned char > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("byte_matrix_size",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_byte_matrix_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned char > >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::empty",1,"std::vector< std::vector< unsigned char > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("byte_matrix_empty",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t);
  }
  
  result = (bool)((std::vector< std::vector< unsigned char > > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_byte_matrix_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned char > >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::resize",1,"std::vector< std::vector< unsigned char > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("byte_matrix_resize",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_byte_matrix_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned char > >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::clear",1,"std::vector< std::vector< unsigned char > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("byte_matrix_clear",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_byte_matrix_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  std::vector< std::vector< unsigned char > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned char > >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::swap",1,"std::vector< std::vector< unsigned char > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::swap",2,"std::vector< std::vector< unsigned char > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("byte_matrix_swap",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("byte_matrix_swap",2,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_byte_matrix_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned char > >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::shrink_to_fit",1,"std::vector< std::vector< unsigned char > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("byte_matrix_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_byte_matrix_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned char > >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::reserve",1,"std::vector< std::vector< unsigned char > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("byte_matrix_reserve",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_byte_matrix_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned char > >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::max_size",1,"std::vector< std::vector< unsigned char > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("byte_matrix_max_size",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_byte_matrix_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned char > >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned char > >::capacity",1,"std::vector< std::vector< unsigned char > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("byte_matrix_capacity",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_byte_matrix(void *obj) {
std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_byte_matrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_byte_matrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_byte_matrix_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_byte_matrix_methods[]= {
    { "__getitem", _wrap_byte_matrix___getitem},
    { "__setitem", _wrap_byte_matrix___setitem},
    { "ibegin", _wrap_byte_matrix_ibegin},
    { "iend", _wrap_byte_matrix_iend},
    { "erase", _wrap_byte_matrix_erase},
    { "front", _wrap_byte_matrix_front},
    { "back", _wrap_byte_matrix_back},
    { "push_back", _wrap_byte_matrix_push_back},
    { "pop_back", _wrap_byte_matrix_pop_back},
    { "at", _wrap_byte_matrix_at},
    { "assign", _wrap_byte_matrix_assign},
    { "data", _wrap_byte_matrix_data},
    { "size", _wrap_byte_matrix_size},
    { "empty", _wrap_byte_matrix_empty},
    { "resize", _wrap_byte_matrix_resize},
    { "clear", _wrap_byte_matrix_clear},
    { "swap", _wrap_byte_matrix_swap},
    { "shrink_to_fit", _wrap_byte_matrix_shrink_to_fit},
    { "reserve", _wrap_byte_matrix_reserve},
    { "max_size", _wrap_byte_matrix_max_size},
    { "capacity", _wrap_byte_matrix_capacity},
    {0,0}
};
static swig_lua_method swig_byte_matrix_meta[] = {
    { "__getitem", _wrap_byte_matrix___getitem},
    { "__setitem", _wrap_byte_matrix___setitem},
    {0,0}
};

static swig_lua_attribute swig_byte_matrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_byte_matrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_byte_matrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_byte_matrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_byte_matrix_Sf_SwigStatic = {
    "byte_matrix",
    swig_byte_matrix_Sf_SwigStatic_methods,
    swig_byte_matrix_Sf_SwigStatic_attributes,
    swig_byte_matrix_Sf_SwigStatic_constants,
    swig_byte_matrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_byte_matrix_bases[] = {0};
static const char *swig_byte_matrix_base_names[] = {0};
static swig_lua_class _wrap_class_byte_matrix = { "byte_matrix", "byte_matrix", &SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_t_t,_proxy__wrap_new_byte_matrix, swig_delete_byte_matrix, swig_byte_matrix_methods, swig_byte_matrix_attributes, &swig_byte_matrix_Sf_SwigStatic, swig_byte_matrix_meta, swig_byte_matrix_bases, swig_byte_matrix_base_names };

static int _wrap_new_short_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *result = 0 ;
  
  SWIG_check_num_args("std::vector< short >::vector",0,0)
  result = (std::vector< short > *)new std::vector< short >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_short_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  short *arg2 = 0 ;
  short temp2 ;
  std::vector< short > *result = 0 ;
  
  SWIG_check_num_args("std::vector< short >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< short >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< short >::vector",2,"short const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< short > *)new std::vector< short >(arg1,(short const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_short_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< short > *result = 0 ;
  
  SWIG_check_num_args("std::vector< short >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< short >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< short > *)new std::vector< short >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_short_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = 0 ;
  std::vector< short > *result = 0 ;
  
  SWIG_check_num_args("std::vector< short >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< short >::vector",1,"std::vector< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("new_short_vector",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (std::vector< short > *)new std::vector< short >((std::vector< short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_short_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_short_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_short_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_short_vector__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_short_vector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_short_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< short >::vector()\n"
    "    std::vector< short >::vector(size_t,short const &)\n"
    "    std::vector< short >::vector(size_t)\n"
    "    std::vector< short >::vector(std::vector< short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_short_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  size_t arg2 ;
  short result;
  
  SWIG_check_num_args("std::vector< short >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::__getitem",1,"std::vector< short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< short >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("short_vector___getitem",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (short)std_vector_Sl_short_Sg____getitem__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  size_t arg2 ;
  short arg3 ;
  
  SWIG_check_num_args("std::vector< short >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::__setitem",1,"std::vector< short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< short >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< short >::__setitem",3,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("short_vector___setitem",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (short)lua_tonumber(L, 3);
  std_vector_Sl_short_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  SwigValueWrapper< std::vector_iterator< short > > result;
  
  SWIG_check_num_args("std::vector< short >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::ibegin",1,"std::vector< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_ibegin",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = std_vector_Sl_short_Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< short > * resultptr = new std::vector_iterator< short >((const std::vector_iterator< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  SwigValueWrapper< std::vector_iterator< short > > result;
  
  SWIG_check_num_args("std::vector< short >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::iend",1,"std::vector< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_iend",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = std_vector_Sl_short_Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< short > * resultptr = new std::vector_iterator< short >((const std::vector_iterator< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< short >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::erase",1,"std::vector< short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< short >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_erase",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_short_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< short >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::erase",1,"std::vector< short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< short >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< short >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_erase",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_short_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_short_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_short_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'short_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< short >::erase(size_t)\n"
    "    std::vector< short >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_short_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  short *result = 0 ;
  
  SWIG_check_num_args("std::vector< short >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::front",1,"std::vector< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_front",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (short *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  short *result = 0 ;
  
  SWIG_check_num_args("std::vector< short >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::back",1,"std::vector< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_back",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (short *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  
  SWIG_check_num_args("std::vector< short >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::push_back",1,"std::vector< short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< short >::push_back",2,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_push_back",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  
  SWIG_check_num_args("std::vector< short >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::pop_back",1,"std::vector< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_pop_back",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  size_t arg2 ;
  short *result = 0 ;
  
  SWIG_check_num_args("std::vector< short >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::at",1,"std::vector< short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< short >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_at",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (short *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  size_t arg2 ;
  short *arg3 = 0 ;
  short temp3 ;
  
  SWIG_check_num_args("std::vector< short >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::assign",1,"std::vector< short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< short >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< short >::assign",3,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_assign",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(short)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(short const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  short *result = 0 ;
  
  SWIG_check_num_args("std::vector< short >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::data",1,"std::vector< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_data",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (short *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< short >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::size",1,"std::vector< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_size",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< short >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::empty",1,"std::vector< short > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_empty",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (bool)((std::vector< short > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< short >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::resize",1,"std::vector< short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< short >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_resize",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  
  SWIG_check_num_args("std::vector< short >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::clear",1,"std::vector< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_clear",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  std::vector< short > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< short >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::swap",1,"std::vector< short > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< short >::swap",2,"std::vector< short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_swap",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_swap",2,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  
  SWIG_check_num_args("std::vector< short >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::shrink_to_fit",1,"std::vector< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< short >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::reserve",1,"std::vector< short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< short >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_reserve",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< short >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::max_size",1,"std::vector< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_max_size",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< short >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::capacity",1,"std::vector< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_capacity",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_short_vector(void *obj) {
std::vector< short > *arg1 = (std::vector< short > *) obj;
delete arg1;
}
static int _proxy__wrap_new_short_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_short_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_short_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_short_vector_methods[]= {
    { "__getitem", _wrap_short_vector___getitem},
    { "__setitem", _wrap_short_vector___setitem},
    { "ibegin", _wrap_short_vector_ibegin},
    { "iend", _wrap_short_vector_iend},
    { "erase", _wrap_short_vector_erase},
    { "front", _wrap_short_vector_front},
    { "back", _wrap_short_vector_back},
    { "push_back", _wrap_short_vector_push_back},
    { "pop_back", _wrap_short_vector_pop_back},
    { "at", _wrap_short_vector_at},
    { "assign", _wrap_short_vector_assign},
    { "data", _wrap_short_vector_data},
    { "size", _wrap_short_vector_size},
    { "empty", _wrap_short_vector_empty},
    { "resize", _wrap_short_vector_resize},
    { "clear", _wrap_short_vector_clear},
    { "swap", _wrap_short_vector_swap},
    { "shrink_to_fit", _wrap_short_vector_shrink_to_fit},
    { "reserve", _wrap_short_vector_reserve},
    { "max_size", _wrap_short_vector_max_size},
    { "capacity", _wrap_short_vector_capacity},
    {0,0}
};
static swig_lua_method swig_short_vector_meta[] = {
    { "__getitem", _wrap_short_vector___getitem},
    { "__setitem", _wrap_short_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_short_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_short_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_short_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_short_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_short_vector_Sf_SwigStatic = {
    "short_vector",
    swig_short_vector_Sf_SwigStatic_methods,
    swig_short_vector_Sf_SwigStatic_attributes,
    swig_short_vector_Sf_SwigStatic_constants,
    swig_short_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_short_vector_bases[] = {0};
static const char *swig_short_vector_base_names[] = {0};
static swig_lua_class _wrap_class_short_vector = { "short_vector", "short_vector", &SWIGTYPE_p_std__vectorT_short_t,_proxy__wrap_new_short_vector, swig_delete_short_vector, swig_short_vector_methods, swig_short_vector_attributes, &swig_short_vector_Sf_SwigStatic, swig_short_vector_meta, swig_short_vector_bases, swig_short_vector_base_names };

static int _wrap_new_ushort_matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned short > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned short > >::vector",0,0)
  result = (std::vector< std::vector< unsigned short > > *)new std::vector< std::vector< unsigned short > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ushort_matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< unsigned short > *arg2 = 0 ;
  std::vector< std::vector< unsigned short > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned short > >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::vector",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::vector",2,"std::vector< unsigned short > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("new_ushort_matrix",2,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  result = (std::vector< std::vector< unsigned short > > *)new std::vector< std::vector< unsigned short > >(arg1,(std::vector< unsigned short > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ushort_matrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< std::vector< unsigned short > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned short > >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< std::vector< unsigned short > > *)new std::vector< std::vector< unsigned short > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ushort_matrix__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned short > > *arg1 = 0 ;
  std::vector< std::vector< unsigned short > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned short > >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::vector",1,"std::vector< std::vector< unsigned short > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("new_ushort_matrix",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t);
  }
  
  result = (std::vector< std::vector< unsigned short > > *)new std::vector< std::vector< unsigned short > >((std::vector< std::vector< unsigned short > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ushort_matrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ushort_matrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ushort_matrix__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ushort_matrix__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_ushort_matrix__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ushort_matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< unsigned short > >::vector()\n"
    "    std::vector< std::vector< unsigned short > >::vector(size_t,std::vector< unsigned short > const &)\n"
    "    std::vector< std::vector< unsigned short > >::vector(size_t)\n"
    "    std::vector< std::vector< unsigned short > >::vector(std::vector< std::vector< unsigned short > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ushort_matrix___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned short > > *arg1 = (std::vector< std::vector< unsigned short > > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< std::vector< unsigned short > > result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned short > >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::__getitem",1,"std::vector< std::vector< unsigned short > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("ushort_matrix___getitem",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = std_vector_Sl_std_vector_Sl_unsigned_SS_short_Sg__Sg____getitem__SWIG(arg1,arg2);
  {
    std::vector< unsigned short > * resultptr = new std::vector< unsigned short >((const std::vector< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_matrix___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned short > > *arg1 = (std::vector< std::vector< unsigned short > > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< std::vector< unsigned short > > arg3 ;
  std::vector< unsigned short > *argp3 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned short > >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::__setitem",1,"std::vector< std::vector< unsigned short > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::__setitem",3,"std::vector< unsigned short >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("ushort_matrix___setitem",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_matrix___setitem",3,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  arg3 = *argp3;
  
  std_vector_Sl_std_vector_Sl_unsigned_SS_short_Sg__Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_matrix_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned short > > *arg1 = (std::vector< std::vector< unsigned short > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::vector< unsigned short > > > result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned short > >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::ibegin",1,"std::vector< std::vector< unsigned short > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("ushort_matrix_ibegin",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t);
  }
  
  result = std_vector_Sl_std_vector_Sl_unsigned_SS_short_Sg__Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< std::vector< unsigned short > > * resultptr = new std::vector_iterator< std::vector< unsigned short > >((const std::vector_iterator< std::vector< unsigned short > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__vectorT_unsigned_short_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_matrix_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned short > > *arg1 = (std::vector< std::vector< unsigned short > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::vector< unsigned short > > > result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned short > >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::iend",1,"std::vector< std::vector< unsigned short > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("ushort_matrix_iend",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t);
  }
  
  result = std_vector_Sl_std_vector_Sl_unsigned_SS_short_Sg__Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< std::vector< unsigned short > > * resultptr = new std::vector_iterator< std::vector< unsigned short > >((const std::vector_iterator< std::vector< unsigned short > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__vectorT_unsigned_short_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_matrix_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned short > > *arg1 = (std::vector< std::vector< unsigned short > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned short > >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::erase",1,"std::vector< std::vector< unsigned short > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("ushort_matrix_erase",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_std_vector_Sl_unsigned_SS_short_Sg__Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_matrix_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned short > > *arg1 = (std::vector< std::vector< unsigned short > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned short > >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::erase",1,"std::vector< std::vector< unsigned short > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("ushort_matrix_erase",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_std_vector_Sl_unsigned_SS_short_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_matrix_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ushort_matrix_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ushort_matrix_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ushort_matrix_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< unsigned short > >::erase(size_t)\n"
    "    std::vector< std::vector< unsigned short > >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ushort_matrix_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned short > > *arg1 = (std::vector< std::vector< unsigned short > > *) 0 ;
  std::vector< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned short > >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::front",1,"std::vector< std::vector< unsigned short > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("ushort_matrix_front",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t);
  }
  
  result = (std::vector< unsigned short > *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_short_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_matrix_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned short > > *arg1 = (std::vector< std::vector< unsigned short > > *) 0 ;
  std::vector< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned short > >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::back",1,"std::vector< std::vector< unsigned short > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("ushort_matrix_back",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t);
  }
  
  result = (std::vector< unsigned short > *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_short_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_matrix_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned short > > *arg1 = (std::vector< std::vector< unsigned short > > *) 0 ;
  std::vector< unsigned short > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned short > >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::push_back",1,"std::vector< std::vector< unsigned short > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::push_back",2,"std::vector< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("ushort_matrix_push_back",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_matrix_push_back",2,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  (arg1)->push_back((std::vector< unsigned short > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_matrix_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned short > > *arg1 = (std::vector< std::vector< unsigned short > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned short > >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::pop_back",1,"std::vector< std::vector< unsigned short > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("ushort_matrix_pop_back",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_matrix_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned short > > *arg1 = (std::vector< std::vector< unsigned short > > *) 0 ;
  size_t arg2 ;
  std::vector< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned short > >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::at",1,"std::vector< std::vector< unsigned short > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("ushort_matrix_at",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::vector< unsigned short > *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_short_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_matrix_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned short > > *arg1 = (std::vector< std::vector< unsigned short > > *) 0 ;
  size_t arg2 ;
  std::vector< unsigned short > *arg3 = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned short > >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::assign",1,"std::vector< std::vector< unsigned short > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::assign",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::assign",3,"std::vector< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("ushort_matrix_assign",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_matrix_assign",3,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  (arg1)->assign(arg2,(std::vector< unsigned short > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_matrix_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned short > > *arg1 = (std::vector< std::vector< unsigned short > > *) 0 ;
  std::vector< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned short > >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::data",1,"std::vector< std::vector< unsigned short > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("ushort_matrix_data",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t);
  }
  
  result = (std::vector< unsigned short > *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_short_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_matrix_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned short > > *arg1 = (std::vector< std::vector< unsigned short > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned short > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::size",1,"std::vector< std::vector< unsigned short > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("ushort_matrix_size",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_matrix_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned short > > *arg1 = (std::vector< std::vector< unsigned short > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned short > >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::empty",1,"std::vector< std::vector< unsigned short > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("ushort_matrix_empty",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t);
  }
  
  result = (bool)((std::vector< std::vector< unsigned short > > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_matrix_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned short > > *arg1 = (std::vector< std::vector< unsigned short > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned short > >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::resize",1,"std::vector< std::vector< unsigned short > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("ushort_matrix_resize",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_matrix_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned short > > *arg1 = (std::vector< std::vector< unsigned short > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned short > >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::clear",1,"std::vector< std::vector< unsigned short > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("ushort_matrix_clear",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_matrix_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned short > > *arg1 = (std::vector< std::vector< unsigned short > > *) 0 ;
  std::vector< std::vector< unsigned short > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned short > >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::swap",1,"std::vector< std::vector< unsigned short > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::swap",2,"std::vector< std::vector< unsigned short > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("ushort_matrix_swap",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("ushort_matrix_swap",2,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_matrix_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned short > > *arg1 = (std::vector< std::vector< unsigned short > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned short > >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::shrink_to_fit",1,"std::vector< std::vector< unsigned short > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("ushort_matrix_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_matrix_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned short > > *arg1 = (std::vector< std::vector< unsigned short > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned short > >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::reserve",1,"std::vector< std::vector< unsigned short > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("ushort_matrix_reserve",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_matrix_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned short > > *arg1 = (std::vector< std::vector< unsigned short > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned short > >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::max_size",1,"std::vector< std::vector< unsigned short > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("ushort_matrix_max_size",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_matrix_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned short > > *arg1 = (std::vector< std::vector< unsigned short > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned short > >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned short > >::capacity",1,"std::vector< std::vector< unsigned short > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("ushort_matrix_capacity",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ushort_matrix(void *obj) {
std::vector< std::vector< unsigned short > > *arg1 = (std::vector< std::vector< unsigned short > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ushort_matrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ushort_matrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ushort_matrix_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ushort_matrix_methods[]= {
    { "__getitem", _wrap_ushort_matrix___getitem},
    { "__setitem", _wrap_ushort_matrix___setitem},
    { "ibegin", _wrap_ushort_matrix_ibegin},
    { "iend", _wrap_ushort_matrix_iend},
    { "erase", _wrap_ushort_matrix_erase},
    { "front", _wrap_ushort_matrix_front},
    { "back", _wrap_ushort_matrix_back},
    { "push_back", _wrap_ushort_matrix_push_back},
    { "pop_back", _wrap_ushort_matrix_pop_back},
    { "at", _wrap_ushort_matrix_at},
    { "assign", _wrap_ushort_matrix_assign},
    { "data", _wrap_ushort_matrix_data},
    { "size", _wrap_ushort_matrix_size},
    { "empty", _wrap_ushort_matrix_empty},
    { "resize", _wrap_ushort_matrix_resize},
    { "clear", _wrap_ushort_matrix_clear},
    { "swap", _wrap_ushort_matrix_swap},
    { "shrink_to_fit", _wrap_ushort_matrix_shrink_to_fit},
    { "reserve", _wrap_ushort_matrix_reserve},
    { "max_size", _wrap_ushort_matrix_max_size},
    { "capacity", _wrap_ushort_matrix_capacity},
    {0,0}
};
static swig_lua_method swig_ushort_matrix_meta[] = {
    { "__getitem", _wrap_ushort_matrix___getitem},
    { "__setitem", _wrap_ushort_matrix___setitem},
    {0,0}
};

static swig_lua_attribute swig_ushort_matrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ushort_matrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ushort_matrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ushort_matrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ushort_matrix_Sf_SwigStatic = {
    "ushort_matrix",
    swig_ushort_matrix_Sf_SwigStatic_methods,
    swig_ushort_matrix_Sf_SwigStatic_attributes,
    swig_ushort_matrix_Sf_SwigStatic_constants,
    swig_ushort_matrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ushort_matrix_bases[] = {0};
static const char *swig_ushort_matrix_base_names[] = {0};
static swig_lua_class _wrap_class_ushort_matrix = { "ushort_matrix", "ushort_matrix", &SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_short_t_t,_proxy__wrap_new_ushort_matrix, swig_delete_ushort_matrix, swig_ushort_matrix_methods, swig_ushort_matrix_attributes, &swig_ushort_matrix_Sf_SwigStatic, swig_ushort_matrix_meta, swig_ushort_matrix_bases, swig_ushort_matrix_base_names };

static int _wrap_new_int_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< int >::vector",0,0)
  result = (std::vector< int > *)new std::vector< int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  int *arg2 = 0 ;
  int temp2 ;
  std::vector< int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< int >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< int >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::vector",2,"int const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< int > *)new std::vector< int >(arg1,(int const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< int >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< int >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< int > *)new std::vector< int >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< int >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< int >::vector",1,"std::vector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("new_int_vector",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_int_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_int_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_int_vector__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_int_vector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_int_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::vector()\n"
    "    std::vector< int >::vector(size_t,int const &)\n"
    "    std::vector< int >::vector(size_t)\n"
    "    std::vector< int >::vector(std::vector< int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_int_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  size_t arg2 ;
  int result;
  
  SWIG_check_num_args("std::vector< int >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::__getitem",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int_vector___getitem",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (int)std_vector_Sl_int_Sg____getitem__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  size_t arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("std::vector< int >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::__setitem",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< int >::__setitem",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int_vector___setitem",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  std_vector_Sl_int_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  SwigValueWrapper< std::vector_iterator< int > > result;
  
  SWIG_check_num_args("std::vector< int >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::ibegin",1,"std::vector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_ibegin",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = std_vector_Sl_int_Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< int > * resultptr = new std::vector_iterator< int >((const std::vector_iterator< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  SwigValueWrapper< std::vector_iterator< int > > result;
  
  SWIG_check_num_args("std::vector< int >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::iend",1,"std::vector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_iend",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = std_vector_Sl_int_Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< int > * resultptr = new std::vector_iterator< int >((const std::vector_iterator< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< int >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::erase",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_erase",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_int_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< int >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::erase",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< int >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_erase",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_int_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_int_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_int_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'int_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::erase(size_t)\n"
    "    std::vector< int >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_int_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("std::vector< int >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::front",1,"std::vector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_front",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (int *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("std::vector< int >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::back",1,"std::vector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_back",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (int *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  SWIG_check_num_args("std::vector< int >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::push_back",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::push_back",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_push_back",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  SWIG_check_num_args("std::vector< int >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::pop_back",1,"std::vector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_pop_back",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  size_t arg2 ;
  int *result = 0 ;
  
  SWIG_check_num_args("std::vector< int >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::at",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_at",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (int *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  size_t arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  SWIG_check_num_args("std::vector< int >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::assign",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< int >::assign",3,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_assign",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(int)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(int const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("std::vector< int >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::data",1,"std::vector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_data",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (int *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< int >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::size",1,"std::vector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_size",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< int >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::empty",1,"std::vector< int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_empty",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (bool)((std::vector< int > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< int >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::resize",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_resize",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  SWIG_check_num_args("std::vector< int >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::clear",1,"std::vector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_clear",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< int >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::swap",1,"std::vector< int > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< int >::swap",2,"std::vector< int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_swap",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_swap",2,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  SWIG_check_num_args("std::vector< int >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::shrink_to_fit",1,"std::vector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< int >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::reserve",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_reserve",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< int >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::max_size",1,"std::vector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_max_size",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< int >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::capacity",1,"std::vector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_capacity",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_int_vector(void *obj) {
std::vector< int > *arg1 = (std::vector< int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_int_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_int_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_int_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_int_vector_methods[]= {
    { "__getitem", _wrap_int_vector___getitem},
    { "__setitem", _wrap_int_vector___setitem},
    { "ibegin", _wrap_int_vector_ibegin},
    { "iend", _wrap_int_vector_iend},
    { "erase", _wrap_int_vector_erase},
    { "front", _wrap_int_vector_front},
    { "back", _wrap_int_vector_back},
    { "push_back", _wrap_int_vector_push_back},
    { "pop_back", _wrap_int_vector_pop_back},
    { "at", _wrap_int_vector_at},
    { "assign", _wrap_int_vector_assign},
    { "data", _wrap_int_vector_data},
    { "size", _wrap_int_vector_size},
    { "empty", _wrap_int_vector_empty},
    { "resize", _wrap_int_vector_resize},
    { "clear", _wrap_int_vector_clear},
    { "swap", _wrap_int_vector_swap},
    { "shrink_to_fit", _wrap_int_vector_shrink_to_fit},
    { "reserve", _wrap_int_vector_reserve},
    { "max_size", _wrap_int_vector_max_size},
    { "capacity", _wrap_int_vector_capacity},
    {0,0}
};
static swig_lua_method swig_int_vector_meta[] = {
    { "__getitem", _wrap_int_vector___getitem},
    { "__setitem", _wrap_int_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_int_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_int_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_int_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_int_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_int_vector_Sf_SwigStatic = {
    "int_vector",
    swig_int_vector_Sf_SwigStatic_methods,
    swig_int_vector_Sf_SwigStatic_attributes,
    swig_int_vector_Sf_SwigStatic_constants,
    swig_int_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_int_vector_bases[] = {0};
static const char *swig_int_vector_base_names[] = {0};
static swig_lua_class _wrap_class_int_vector = { "int_vector", "int_vector", &SWIGTYPE_p_std__vectorT_int_t,_proxy__wrap_new_int_vector, swig_delete_int_vector, swig_int_vector_methods, swig_int_vector_attributes, &swig_int_vector_Sf_SwigStatic, swig_int_vector_meta, swig_int_vector_bases, swig_int_vector_base_names };

static int _wrap_new_uint_matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned int > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned int > >::vector",0,0)
  result = (std::vector< std::vector< unsigned int > > *)new std::vector< std::vector< unsigned int > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint_matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< unsigned int > *arg2 = 0 ;
  std::vector< std::vector< unsigned int > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned int > >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::vector",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::vector",2,"std::vector< unsigned int > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("new_uint_matrix",2,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (std::vector< std::vector< unsigned int > > *)new std::vector< std::vector< unsigned int > >(arg1,(std::vector< unsigned int > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint_matrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< std::vector< unsigned int > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned int > >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< std::vector< unsigned int > > *)new std::vector< std::vector< unsigned int > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint_matrix__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned int > > *arg1 = 0 ;
  std::vector< std::vector< unsigned int > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned int > >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::vector",1,"std::vector< std::vector< unsigned int > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("new_uint_matrix",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t);
  }
  
  result = (std::vector< std::vector< unsigned int > > *)new std::vector< std::vector< unsigned int > >((std::vector< std::vector< unsigned int > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint_matrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_uint_matrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_uint_matrix__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_uint_matrix__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_uint_matrix__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_uint_matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< unsigned int > >::vector()\n"
    "    std::vector< std::vector< unsigned int > >::vector(size_t,std::vector< unsigned int > const &)\n"
    "    std::vector< std::vector< unsigned int > >::vector(size_t)\n"
    "    std::vector< std::vector< unsigned int > >::vector(std::vector< std::vector< unsigned int > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_uint_matrix___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< std::vector< unsigned int > > result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned int > >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::__getitem",1,"std::vector< std::vector< unsigned int > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint_matrix___getitem",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg____getitem__SWIG(arg1,arg2);
  {
    std::vector< unsigned int > * resultptr = new std::vector< unsigned int >((const std::vector< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_matrix___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< std::vector< unsigned int > > arg3 ;
  std::vector< unsigned int > *argp3 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned int > >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::__setitem",1,"std::vector< std::vector< unsigned int > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::__setitem",3,"std::vector< unsigned int >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint_matrix___setitem",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_matrix___setitem",3,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  arg3 = *argp3;
  
  std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_matrix_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::vector< unsigned int > > > result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned int > >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::ibegin",1,"std::vector< std::vector< unsigned int > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint_matrix_ibegin",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t);
  }
  
  result = std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< std::vector< unsigned int > > * resultptr = new std::vector_iterator< std::vector< unsigned int > >((const std::vector_iterator< std::vector< unsigned int > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__vectorT_unsigned_int_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_matrix_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::vector< unsigned int > > > result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned int > >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::iend",1,"std::vector< std::vector< unsigned int > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint_matrix_iend",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t);
  }
  
  result = std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< std::vector< unsigned int > > * resultptr = new std::vector_iterator< std::vector< unsigned int > >((const std::vector_iterator< std::vector< unsigned int > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__vectorT_unsigned_int_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_matrix_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned int > >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::erase",1,"std::vector< std::vector< unsigned int > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint_matrix_erase",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_matrix_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned int > >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::erase",1,"std::vector< std::vector< unsigned int > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint_matrix_erase",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_std_vector_Sl_unsigned_SS_int_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_matrix_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_uint_matrix_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_uint_matrix_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'uint_matrix_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< unsigned int > >::erase(size_t)\n"
    "    std::vector< std::vector< unsigned int > >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_uint_matrix_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  std::vector< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned int > >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::front",1,"std::vector< std::vector< unsigned int > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint_matrix_front",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t);
  }
  
  result = (std::vector< unsigned int > *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_matrix_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  std::vector< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned int > >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::back",1,"std::vector< std::vector< unsigned int > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint_matrix_back",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t);
  }
  
  result = (std::vector< unsigned int > *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_matrix_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  std::vector< unsigned int > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned int > >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::push_back",1,"std::vector< std::vector< unsigned int > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::push_back",2,"std::vector< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint_matrix_push_back",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_matrix_push_back",2,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  (arg1)->push_back((std::vector< unsigned int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_matrix_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned int > >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::pop_back",1,"std::vector< std::vector< unsigned int > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint_matrix_pop_back",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_matrix_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  size_t arg2 ;
  std::vector< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned int > >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::at",1,"std::vector< std::vector< unsigned int > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint_matrix_at",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::vector< unsigned int > *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_matrix_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  size_t arg2 ;
  std::vector< unsigned int > *arg3 = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned int > >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::assign",1,"std::vector< std::vector< unsigned int > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::assign",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::assign",3,"std::vector< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint_matrix_assign",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_matrix_assign",3,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  (arg1)->assign(arg2,(std::vector< unsigned int > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_matrix_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  std::vector< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned int > >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::data",1,"std::vector< std::vector< unsigned int > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint_matrix_data",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t);
  }
  
  result = (std::vector< unsigned int > *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_matrix_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned int > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::size",1,"std::vector< std::vector< unsigned int > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint_matrix_size",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_matrix_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned int > >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::empty",1,"std::vector< std::vector< unsigned int > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint_matrix_empty",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t);
  }
  
  result = (bool)((std::vector< std::vector< unsigned int > > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_matrix_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned int > >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::resize",1,"std::vector< std::vector< unsigned int > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint_matrix_resize",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_matrix_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned int > >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::clear",1,"std::vector< std::vector< unsigned int > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint_matrix_clear",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_matrix_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  std::vector< std::vector< unsigned int > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned int > >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::swap",1,"std::vector< std::vector< unsigned int > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::swap",2,"std::vector< std::vector< unsigned int > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint_matrix_swap",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint_matrix_swap",2,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_matrix_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned int > >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::shrink_to_fit",1,"std::vector< std::vector< unsigned int > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint_matrix_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_matrix_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned int > >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::reserve",1,"std::vector< std::vector< unsigned int > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint_matrix_reserve",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_matrix_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned int > >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::max_size",1,"std::vector< std::vector< unsigned int > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint_matrix_max_size",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_matrix_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned int > >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned int > >::capacity",1,"std::vector< std::vector< unsigned int > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint_matrix_capacity",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uint_matrix(void *obj) {
std::vector< std::vector< unsigned int > > *arg1 = (std::vector< std::vector< unsigned int > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_uint_matrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uint_matrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uint_matrix_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uint_matrix_methods[]= {
    { "__getitem", _wrap_uint_matrix___getitem},
    { "__setitem", _wrap_uint_matrix___setitem},
    { "ibegin", _wrap_uint_matrix_ibegin},
    { "iend", _wrap_uint_matrix_iend},
    { "erase", _wrap_uint_matrix_erase},
    { "front", _wrap_uint_matrix_front},
    { "back", _wrap_uint_matrix_back},
    { "push_back", _wrap_uint_matrix_push_back},
    { "pop_back", _wrap_uint_matrix_pop_back},
    { "at", _wrap_uint_matrix_at},
    { "assign", _wrap_uint_matrix_assign},
    { "data", _wrap_uint_matrix_data},
    { "size", _wrap_uint_matrix_size},
    { "empty", _wrap_uint_matrix_empty},
    { "resize", _wrap_uint_matrix_resize},
    { "clear", _wrap_uint_matrix_clear},
    { "swap", _wrap_uint_matrix_swap},
    { "shrink_to_fit", _wrap_uint_matrix_shrink_to_fit},
    { "reserve", _wrap_uint_matrix_reserve},
    { "max_size", _wrap_uint_matrix_max_size},
    { "capacity", _wrap_uint_matrix_capacity},
    {0,0}
};
static swig_lua_method swig_uint_matrix_meta[] = {
    { "__getitem", _wrap_uint_matrix___getitem},
    { "__setitem", _wrap_uint_matrix___setitem},
    {0,0}
};

static swig_lua_attribute swig_uint_matrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uint_matrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uint_matrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uint_matrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uint_matrix_Sf_SwigStatic = {
    "uint_matrix",
    swig_uint_matrix_Sf_SwigStatic_methods,
    swig_uint_matrix_Sf_SwigStatic_attributes,
    swig_uint_matrix_Sf_SwigStatic_constants,
    swig_uint_matrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uint_matrix_bases[] = {0};
static const char *swig_uint_matrix_base_names[] = {0};
static swig_lua_class _wrap_class_uint_matrix = { "uint_matrix", "uint_matrix", &SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t,_proxy__wrap_new_uint_matrix, swig_delete_uint_matrix, swig_uint_matrix_methods, swig_uint_matrix_attributes, &swig_uint_matrix_Sf_SwigStatic, swig_uint_matrix_meta, swig_uint_matrix_bases, swig_uint_matrix_base_names };

static int _wrap_new_long_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *result = 0 ;
  
  SWIG_check_num_args("std::vector< long >::vector",0,0)
  result = (std::vector< long > *)new std::vector< long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_long_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  long *arg2 = 0 ;
  long temp2 ;
  std::vector< long > *result = 0 ;
  
  SWIG_check_num_args("std::vector< long >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< long >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long >::vector",2,"long const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(long)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< long > *)new std::vector< long >(arg1,(long const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_long_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< long > *result = 0 ;
  
  SWIG_check_num_args("std::vector< long >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< long >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< long > *)new std::vector< long >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_long_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = 0 ;
  std::vector< long > *result = 0 ;
  
  SWIG_check_num_args("std::vector< long >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< long >::vector",1,"std::vector< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("new_long_vector",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  result = (std::vector< long > *)new std::vector< long >((std::vector< long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_long_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_long_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_long_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_long_vector__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_long_vector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_long_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< long >::vector()\n"
    "    std::vector< long >::vector(size_t,long const &)\n"
    "    std::vector< long >::vector(size_t)\n"
    "    std::vector< long >::vector(std::vector< long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_long_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  size_t arg2 ;
  long result;
  
  SWIG_check_num_args("std::vector< long >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::__getitem",1,"std::vector< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("long_vector___getitem",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (long)std_vector_Sl_long_Sg____getitem__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  size_t arg2 ;
  long arg3 ;
  
  SWIG_check_num_args("std::vector< long >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::__setitem",1,"std::vector< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< long >::__setitem",3,"long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("long_vector___setitem",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (long)lua_tonumber(L, 3);
  std_vector_Sl_long_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  SwigValueWrapper< std::vector_iterator< long > > result;
  
  SWIG_check_num_args("std::vector< long >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::ibegin",1,"std::vector< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_ibegin",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  result = std_vector_Sl_long_Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< long > * resultptr = new std::vector_iterator< long >((const std::vector_iterator< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  SwigValueWrapper< std::vector_iterator< long > > result;
  
  SWIG_check_num_args("std::vector< long >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::iend",1,"std::vector< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_iend",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  result = std_vector_Sl_long_Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< long > * resultptr = new std::vector_iterator< long >((const std::vector_iterator< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< long >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::erase",1,"std::vector< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_erase",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_long_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< long >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::erase",1,"std::vector< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< long >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_erase",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_long_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_long_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_long_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'long_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< long >::erase(size_t)\n"
    "    std::vector< long >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_long_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  long *result = 0 ;
  
  SWIG_check_num_args("std::vector< long >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::front",1,"std::vector< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_front",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  result = (long *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  long *result = 0 ;
  
  SWIG_check_num_args("std::vector< long >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::back",1,"std::vector< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_back",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  result = (long *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  long *arg2 = 0 ;
  long temp2 ;
  
  SWIG_check_num_args("std::vector< long >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::push_back",1,"std::vector< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long >::push_back",2,"long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_push_back",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  temp2=(long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  
  SWIG_check_num_args("std::vector< long >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::pop_back",1,"std::vector< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_pop_back",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  size_t arg2 ;
  long *result = 0 ;
  
  SWIG_check_num_args("std::vector< long >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::at",1,"std::vector< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_at",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (long *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  size_t arg2 ;
  long *arg3 = 0 ;
  long temp3 ;
  
  SWIG_check_num_args("std::vector< long >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::assign",1,"std::vector< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< long >::assign",3,"long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_assign",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(long)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(long const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  long *result = 0 ;
  
  SWIG_check_num_args("std::vector< long >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::data",1,"std::vector< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_data",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  result = (long *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< long >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::size",1,"std::vector< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_size",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< long >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::empty",1,"std::vector< long > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_empty",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  result = (bool)((std::vector< long > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< long >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::resize",1,"std::vector< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_resize",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  
  SWIG_check_num_args("std::vector< long >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::clear",1,"std::vector< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_clear",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< long >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::swap",1,"std::vector< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< long >::swap",2,"std::vector< long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_swap",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_swap",2,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  
  SWIG_check_num_args("std::vector< long >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::shrink_to_fit",1,"std::vector< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< long >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::reserve",1,"std::vector< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_reserve",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< long >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::max_size",1,"std::vector< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_max_size",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< long >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::capacity",1,"std::vector< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_capacity",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_long_vector(void *obj) {
std::vector< long > *arg1 = (std::vector< long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_long_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_long_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_long_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_long_vector_methods[]= {
    { "__getitem", _wrap_long_vector___getitem},
    { "__setitem", _wrap_long_vector___setitem},
    { "ibegin", _wrap_long_vector_ibegin},
    { "iend", _wrap_long_vector_iend},
    { "erase", _wrap_long_vector_erase},
    { "front", _wrap_long_vector_front},
    { "back", _wrap_long_vector_back},
    { "push_back", _wrap_long_vector_push_back},
    { "pop_back", _wrap_long_vector_pop_back},
    { "at", _wrap_long_vector_at},
    { "assign", _wrap_long_vector_assign},
    { "data", _wrap_long_vector_data},
    { "size", _wrap_long_vector_size},
    { "empty", _wrap_long_vector_empty},
    { "resize", _wrap_long_vector_resize},
    { "clear", _wrap_long_vector_clear},
    { "swap", _wrap_long_vector_swap},
    { "shrink_to_fit", _wrap_long_vector_shrink_to_fit},
    { "reserve", _wrap_long_vector_reserve},
    { "max_size", _wrap_long_vector_max_size},
    { "capacity", _wrap_long_vector_capacity},
    {0,0}
};
static swig_lua_method swig_long_vector_meta[] = {
    { "__getitem", _wrap_long_vector___getitem},
    { "__setitem", _wrap_long_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_long_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_long_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_long_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_long_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_long_vector_Sf_SwigStatic = {
    "long_vector",
    swig_long_vector_Sf_SwigStatic_methods,
    swig_long_vector_Sf_SwigStatic_attributes,
    swig_long_vector_Sf_SwigStatic_constants,
    swig_long_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_long_vector_bases[] = {0};
static const char *swig_long_vector_base_names[] = {0};
static swig_lua_class _wrap_class_long_vector = { "long_vector", "long_vector", &SWIGTYPE_p_std__vectorT_long_t,_proxy__wrap_new_long_vector, swig_delete_long_vector, swig_long_vector_methods, swig_long_vector_attributes, &swig_long_vector_Sf_SwigStatic, swig_long_vector_meta, swig_long_vector_bases, swig_long_vector_base_names };

static int _wrap_new_ulong_matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long > >::vector",0,0)
  result = (std::vector< std::vector< unsigned long > > *)new std::vector< std::vector< unsigned long > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ulong_matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< unsigned long > *arg2 = 0 ;
  std::vector< std::vector< unsigned long > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long > >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::vector",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::vector",2,"std::vector< unsigned long > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("new_ulong_matrix",2,SWIGTYPE_p_std__vectorT_unsigned_long_t);
  }
  
  result = (std::vector< std::vector< unsigned long > > *)new std::vector< std::vector< unsigned long > >(arg1,(std::vector< unsigned long > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ulong_matrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< std::vector< unsigned long > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long > >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< std::vector< unsigned long > > *)new std::vector< std::vector< unsigned long > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ulong_matrix__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long > > *arg1 = 0 ;
  std::vector< std::vector< unsigned long > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long > >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::vector",1,"std::vector< std::vector< unsigned long > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("new_ulong_matrix",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t);
  }
  
  result = (std::vector< std::vector< unsigned long > > *)new std::vector< std::vector< unsigned long > >((std::vector< std::vector< unsigned long > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ulong_matrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ulong_matrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ulong_matrix__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ulong_matrix__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_ulong_matrix__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ulong_matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< unsigned long > >::vector()\n"
    "    std::vector< std::vector< unsigned long > >::vector(size_t,std::vector< unsigned long > const &)\n"
    "    std::vector< std::vector< unsigned long > >::vector(size_t)\n"
    "    std::vector< std::vector< unsigned long > >::vector(std::vector< std::vector< unsigned long > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ulong_matrix___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long > > *arg1 = (std::vector< std::vector< unsigned long > > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< std::vector< unsigned long > > result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long > >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::__getitem",1,"std::vector< std::vector< unsigned long > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("ulong_matrix___getitem",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = std_vector_Sl_std_vector_Sl_unsigned_SS_long_Sg__Sg____getitem__SWIG(arg1,arg2);
  {
    std::vector< unsigned long > * resultptr = new std::vector< unsigned long >((const std::vector< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_matrix___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long > > *arg1 = (std::vector< std::vector< unsigned long > > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< std::vector< unsigned long > > arg3 ;
  std::vector< unsigned long > *argp3 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long > >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::__setitem",1,"std::vector< std::vector< unsigned long > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::__setitem",3,"std::vector< unsigned long >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("ulong_matrix___setitem",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__vectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_matrix___setitem",3,SWIGTYPE_p_std__vectorT_unsigned_long_t);
  }
  arg3 = *argp3;
  
  std_vector_Sl_std_vector_Sl_unsigned_SS_long_Sg__Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_matrix_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long > > *arg1 = (std::vector< std::vector< unsigned long > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::vector< unsigned long > > > result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long > >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::ibegin",1,"std::vector< std::vector< unsigned long > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("ulong_matrix_ibegin",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t);
  }
  
  result = std_vector_Sl_std_vector_Sl_unsigned_SS_long_Sg__Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< std::vector< unsigned long > > * resultptr = new std::vector_iterator< std::vector< unsigned long > >((const std::vector_iterator< std::vector< unsigned long > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__vectorT_unsigned_long_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_matrix_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long > > *arg1 = (std::vector< std::vector< unsigned long > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::vector< unsigned long > > > result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long > >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::iend",1,"std::vector< std::vector< unsigned long > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("ulong_matrix_iend",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t);
  }
  
  result = std_vector_Sl_std_vector_Sl_unsigned_SS_long_Sg__Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< std::vector< unsigned long > > * resultptr = new std::vector_iterator< std::vector< unsigned long > >((const std::vector_iterator< std::vector< unsigned long > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__vectorT_unsigned_long_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_matrix_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long > > *arg1 = (std::vector< std::vector< unsigned long > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long > >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::erase",1,"std::vector< std::vector< unsigned long > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("ulong_matrix_erase",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_std_vector_Sl_unsigned_SS_long_Sg__Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_matrix_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long > > *arg1 = (std::vector< std::vector< unsigned long > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long > >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::erase",1,"std::vector< std::vector< unsigned long > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("ulong_matrix_erase",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_std_vector_Sl_unsigned_SS_long_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_matrix_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ulong_matrix_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ulong_matrix_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ulong_matrix_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< unsigned long > >::erase(size_t)\n"
    "    std::vector< std::vector< unsigned long > >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ulong_matrix_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long > > *arg1 = (std::vector< std::vector< unsigned long > > *) 0 ;
  std::vector< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long > >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::front",1,"std::vector< std::vector< unsigned long > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("ulong_matrix_front",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t);
  }
  
  result = (std::vector< unsigned long > *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_long_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_matrix_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long > > *arg1 = (std::vector< std::vector< unsigned long > > *) 0 ;
  std::vector< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long > >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::back",1,"std::vector< std::vector< unsigned long > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("ulong_matrix_back",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t);
  }
  
  result = (std::vector< unsigned long > *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_long_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_matrix_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long > > *arg1 = (std::vector< std::vector< unsigned long > > *) 0 ;
  std::vector< unsigned long > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long > >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::push_back",1,"std::vector< std::vector< unsigned long > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::push_back",2,"std::vector< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("ulong_matrix_push_back",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_matrix_push_back",2,SWIGTYPE_p_std__vectorT_unsigned_long_t);
  }
  
  (arg1)->push_back((std::vector< unsigned long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_matrix_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long > > *arg1 = (std::vector< std::vector< unsigned long > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long > >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::pop_back",1,"std::vector< std::vector< unsigned long > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("ulong_matrix_pop_back",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_matrix_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long > > *arg1 = (std::vector< std::vector< unsigned long > > *) 0 ;
  size_t arg2 ;
  std::vector< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long > >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::at",1,"std::vector< std::vector< unsigned long > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("ulong_matrix_at",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::vector< unsigned long > *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_long_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_matrix_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long > > *arg1 = (std::vector< std::vector< unsigned long > > *) 0 ;
  size_t arg2 ;
  std::vector< unsigned long > *arg3 = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long > >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::assign",1,"std::vector< std::vector< unsigned long > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::assign",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::assign",3,"std::vector< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("ulong_matrix_assign",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_matrix_assign",3,SWIGTYPE_p_std__vectorT_unsigned_long_t);
  }
  
  (arg1)->assign(arg2,(std::vector< unsigned long > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_matrix_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long > > *arg1 = (std::vector< std::vector< unsigned long > > *) 0 ;
  std::vector< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long > >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::data",1,"std::vector< std::vector< unsigned long > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("ulong_matrix_data",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t);
  }
  
  result = (std::vector< unsigned long > *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_long_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_matrix_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long > > *arg1 = (std::vector< std::vector< unsigned long > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::size",1,"std::vector< std::vector< unsigned long > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("ulong_matrix_size",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_matrix_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long > > *arg1 = (std::vector< std::vector< unsigned long > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long > >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::empty",1,"std::vector< std::vector< unsigned long > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("ulong_matrix_empty",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t);
  }
  
  result = (bool)((std::vector< std::vector< unsigned long > > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_matrix_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long > > *arg1 = (std::vector< std::vector< unsigned long > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long > >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::resize",1,"std::vector< std::vector< unsigned long > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("ulong_matrix_resize",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_matrix_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long > > *arg1 = (std::vector< std::vector< unsigned long > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long > >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::clear",1,"std::vector< std::vector< unsigned long > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("ulong_matrix_clear",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_matrix_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long > > *arg1 = (std::vector< std::vector< unsigned long > > *) 0 ;
  std::vector< std::vector< unsigned long > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long > >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::swap",1,"std::vector< std::vector< unsigned long > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::swap",2,"std::vector< std::vector< unsigned long > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("ulong_matrix_swap",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("ulong_matrix_swap",2,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_matrix_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long > > *arg1 = (std::vector< std::vector< unsigned long > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long > >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::shrink_to_fit",1,"std::vector< std::vector< unsigned long > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("ulong_matrix_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_matrix_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long > > *arg1 = (std::vector< std::vector< unsigned long > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long > >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::reserve",1,"std::vector< std::vector< unsigned long > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("ulong_matrix_reserve",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_matrix_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long > > *arg1 = (std::vector< std::vector< unsigned long > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long > >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::max_size",1,"std::vector< std::vector< unsigned long > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("ulong_matrix_max_size",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_matrix_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long > > *arg1 = (std::vector< std::vector< unsigned long > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long > >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long > >::capacity",1,"std::vector< std::vector< unsigned long > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("ulong_matrix_capacity",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ulong_matrix(void *obj) {
std::vector< std::vector< unsigned long > > *arg1 = (std::vector< std::vector< unsigned long > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ulong_matrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ulong_matrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ulong_matrix_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ulong_matrix_methods[]= {
    { "__getitem", _wrap_ulong_matrix___getitem},
    { "__setitem", _wrap_ulong_matrix___setitem},
    { "ibegin", _wrap_ulong_matrix_ibegin},
    { "iend", _wrap_ulong_matrix_iend},
    { "erase", _wrap_ulong_matrix_erase},
    { "front", _wrap_ulong_matrix_front},
    { "back", _wrap_ulong_matrix_back},
    { "push_back", _wrap_ulong_matrix_push_back},
    { "pop_back", _wrap_ulong_matrix_pop_back},
    { "at", _wrap_ulong_matrix_at},
    { "assign", _wrap_ulong_matrix_assign},
    { "data", _wrap_ulong_matrix_data},
    { "size", _wrap_ulong_matrix_size},
    { "empty", _wrap_ulong_matrix_empty},
    { "resize", _wrap_ulong_matrix_resize},
    { "clear", _wrap_ulong_matrix_clear},
    { "swap", _wrap_ulong_matrix_swap},
    { "shrink_to_fit", _wrap_ulong_matrix_shrink_to_fit},
    { "reserve", _wrap_ulong_matrix_reserve},
    { "max_size", _wrap_ulong_matrix_max_size},
    { "capacity", _wrap_ulong_matrix_capacity},
    {0,0}
};
static swig_lua_method swig_ulong_matrix_meta[] = {
    { "__getitem", _wrap_ulong_matrix___getitem},
    { "__setitem", _wrap_ulong_matrix___setitem},
    {0,0}
};

static swig_lua_attribute swig_ulong_matrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ulong_matrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ulong_matrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ulong_matrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ulong_matrix_Sf_SwigStatic = {
    "ulong_matrix",
    swig_ulong_matrix_Sf_SwigStatic_methods,
    swig_ulong_matrix_Sf_SwigStatic_attributes,
    swig_ulong_matrix_Sf_SwigStatic_constants,
    swig_ulong_matrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ulong_matrix_bases[] = {0};
static const char *swig_ulong_matrix_base_names[] = {0};
static swig_lua_class _wrap_class_ulong_matrix = { "ulong_matrix", "ulong_matrix", &SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t,_proxy__wrap_new_ulong_matrix, swig_delete_ulong_matrix, swig_ulong_matrix_methods, swig_ulong_matrix_attributes, &swig_ulong_matrix_Sf_SwigStatic, swig_ulong_matrix_meta, swig_ulong_matrix_bases, swig_ulong_matrix_base_names };

static int _wrap_new_ll_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long long > *result = 0 ;
  
  SWIG_check_num_args("std::vector< long long >::vector",0,0)
  result = (std::vector< long long > *)new std::vector< long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ll_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  std::vector< long long > *result = 0 ;
  
  SWIG_check_num_args("std::vector< long long >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< long long >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long long >::vector",2,"long long const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(long long)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< long long > *)new std::vector< long long >(arg1,(long long const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ll_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< long long > *result = 0 ;
  
  SWIG_check_num_args("std::vector< long long >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< long long >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< long long > *)new std::vector< long long >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ll_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long long > *arg1 = 0 ;
  std::vector< long long > *result = 0 ;
  
  SWIG_check_num_args("std::vector< long long >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< long long >::vector",1,"std::vector< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("new_ll_vector",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  result = (std::vector< long long > *)new std::vector< long long >((std::vector< long long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ll_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ll_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_long_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ll_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ll_vector__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ll_vector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ll_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< long long >::vector()\n"
    "    std::vector< long long >::vector(size_t,long long const &)\n"
    "    std::vector< long long >::vector(size_t)\n"
    "    std::vector< long long >::vector(std::vector< long long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ll_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  size_t arg2 ;
  long long result;
  
  SWIG_check_num_args("std::vector< long long >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long long >::__getitem",1,"std::vector< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long long >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("ll_vector___getitem",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (long long)std_vector_Sl_long_SS_long_Sg____getitem__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ll_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  size_t arg2 ;
  long long arg3 ;
  
  SWIG_check_num_args("std::vector< long long >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long long >::__setitem",1,"std::vector< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long long >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< long long >::__setitem",3,"long long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("ll_vector___setitem",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (long long)lua_tonumber(L, 3);
  std_vector_Sl_long_SS_long_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ll_vector_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  SwigValueWrapper< std::vector_iterator< long long > > result;
  
  SWIG_check_num_args("std::vector< long long >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long long >::ibegin",1,"std::vector< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("ll_vector_ibegin",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  result = std_vector_Sl_long_SS_long_Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< long long > * resultptr = new std::vector_iterator< long long >((const std::vector_iterator< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ll_vector_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  SwigValueWrapper< std::vector_iterator< long long > > result;
  
  SWIG_check_num_args("std::vector< long long >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long long >::iend",1,"std::vector< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("ll_vector_iend",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  result = std_vector_Sl_long_SS_long_Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< long long > * resultptr = new std::vector_iterator< long long >((const std::vector_iterator< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ll_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< long long >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long long >::erase",1,"std::vector< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long long >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("ll_vector_erase",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_long_SS_long_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ll_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< long long >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long long >::erase",1,"std::vector< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long long >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< long long >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("ll_vector_erase",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_long_SS_long_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ll_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ll_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ll_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'll_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< long long >::erase(size_t)\n"
    "    std::vector< long long >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ll_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  long long *result = 0 ;
  
  SWIG_check_num_args("std::vector< long long >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long long >::front",1,"std::vector< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("ll_vector_front",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  result = (long long *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ll_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  long long *result = 0 ;
  
  SWIG_check_num_args("std::vector< long long >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long long >::back",1,"std::vector< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("ll_vector_back",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  result = (long long *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ll_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  
  SWIG_check_num_args("std::vector< long long >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long long >::push_back",1,"std::vector< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long long >::push_back",2,"long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("ll_vector_push_back",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  temp2=(long long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((long long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ll_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  
  SWIG_check_num_args("std::vector< long long >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long long >::pop_back",1,"std::vector< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("ll_vector_pop_back",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ll_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  size_t arg2 ;
  long long *result = 0 ;
  
  SWIG_check_num_args("std::vector< long long >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long long >::at",1,"std::vector< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long long >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("ll_vector_at",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (long long *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ll_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  size_t arg2 ;
  long long *arg3 = 0 ;
  long long temp3 ;
  
  SWIG_check_num_args("std::vector< long long >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long long >::assign",1,"std::vector< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long long >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< long long >::assign",3,"long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("ll_vector_assign",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(long long)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(long long const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ll_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  long long *result = 0 ;
  
  SWIG_check_num_args("std::vector< long long >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long long >::data",1,"std::vector< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("ll_vector_data",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  result = (long long *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ll_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< long long >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long long >::size",1,"std::vector< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("ll_vector_size",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ll_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< long long >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long long >::empty",1,"std::vector< long long > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("ll_vector_empty",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  result = (bool)((std::vector< long long > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ll_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< long long >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long long >::resize",1,"std::vector< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long long >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("ll_vector_resize",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ll_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  
  SWIG_check_num_args("std::vector< long long >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long long >::clear",1,"std::vector< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("ll_vector_clear",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ll_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< long long >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long long >::swap",1,"std::vector< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< long long >::swap",2,"std::vector< long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("ll_vector_swap",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("ll_vector_swap",2,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ll_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  
  SWIG_check_num_args("std::vector< long long >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long long >::shrink_to_fit",1,"std::vector< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("ll_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ll_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< long long >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long long >::reserve",1,"std::vector< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long long >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("ll_vector_reserve",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ll_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< long long >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long long >::max_size",1,"std::vector< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("ll_vector_max_size",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ll_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< long long >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long long >::capacity",1,"std::vector< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("ll_vector_capacity",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ll_vector(void *obj) {
std::vector< long long > *arg1 = (std::vector< long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ll_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ll_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ll_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ll_vector_methods[]= {
    { "__getitem", _wrap_ll_vector___getitem},
    { "__setitem", _wrap_ll_vector___setitem},
    { "ibegin", _wrap_ll_vector_ibegin},
    { "iend", _wrap_ll_vector_iend},
    { "erase", _wrap_ll_vector_erase},
    { "front", _wrap_ll_vector_front},
    { "back", _wrap_ll_vector_back},
    { "push_back", _wrap_ll_vector_push_back},
    { "pop_back", _wrap_ll_vector_pop_back},
    { "at", _wrap_ll_vector_at},
    { "assign", _wrap_ll_vector_assign},
    { "data", _wrap_ll_vector_data},
    { "size", _wrap_ll_vector_size},
    { "empty", _wrap_ll_vector_empty},
    { "resize", _wrap_ll_vector_resize},
    { "clear", _wrap_ll_vector_clear},
    { "swap", _wrap_ll_vector_swap},
    { "shrink_to_fit", _wrap_ll_vector_shrink_to_fit},
    { "reserve", _wrap_ll_vector_reserve},
    { "max_size", _wrap_ll_vector_max_size},
    { "capacity", _wrap_ll_vector_capacity},
    {0,0}
};
static swig_lua_method swig_ll_vector_meta[] = {
    { "__getitem", _wrap_ll_vector___getitem},
    { "__setitem", _wrap_ll_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_ll_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ll_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ll_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ll_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ll_vector_Sf_SwigStatic = {
    "ll_vector",
    swig_ll_vector_Sf_SwigStatic_methods,
    swig_ll_vector_Sf_SwigStatic_attributes,
    swig_ll_vector_Sf_SwigStatic_constants,
    swig_ll_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ll_vector_bases[] = {0};
static const char *swig_ll_vector_base_names[] = {0};
static swig_lua_class _wrap_class_ll_vector = { "ll_vector", "ll_vector", &SWIGTYPE_p_std__vectorT_long_long_t,_proxy__wrap_new_ll_vector, swig_delete_ll_vector, swig_ll_vector_methods, swig_ll_vector_attributes, &swig_ll_vector_Sf_SwigStatic, swig_ll_vector_meta, swig_ll_vector_bases, swig_ll_vector_base_names };

static int _wrap_new_ull_matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long long > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long long > >::vector",0,0)
  result = (std::vector< std::vector< unsigned long long > > *)new std::vector< std::vector< unsigned long long > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ull_matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< unsigned long long > *arg2 = 0 ;
  std::vector< std::vector< unsigned long long > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long long > >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::vector",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::vector",2,"std::vector< unsigned long long > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("new_ull_matrix",2,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  
  result = (std::vector< std::vector< unsigned long long > > *)new std::vector< std::vector< unsigned long long > >(arg1,(std::vector< unsigned long long > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ull_matrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< std::vector< unsigned long long > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long long > >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< std::vector< unsigned long long > > *)new std::vector< std::vector< unsigned long long > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ull_matrix__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long long > > *arg1 = 0 ;
  std::vector< std::vector< unsigned long long > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long long > >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::vector",1,"std::vector< std::vector< unsigned long long > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t,0))){
    SWIG_fail_ptr("new_ull_matrix",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t);
  }
  
  result = (std::vector< std::vector< unsigned long long > > *)new std::vector< std::vector< unsigned long long > >((std::vector< std::vector< unsigned long long > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ull_matrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ull_matrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ull_matrix__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ull_matrix__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_ull_matrix__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ull_matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< unsigned long long > >::vector()\n"
    "    std::vector< std::vector< unsigned long long > >::vector(size_t,std::vector< unsigned long long > const &)\n"
    "    std::vector< std::vector< unsigned long long > >::vector(size_t)\n"
    "    std::vector< std::vector< unsigned long long > >::vector(std::vector< std::vector< unsigned long long > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ull_matrix___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long long > > *arg1 = (std::vector< std::vector< unsigned long long > > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< std::vector< unsigned long long > > result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long long > >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::__getitem",1,"std::vector< std::vector< unsigned long long > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t,0))){
    SWIG_fail_ptr("ull_matrix___getitem",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = std_vector_Sl_std_vector_Sl_unsigned_SS_long_SS_long_Sg__Sg____getitem__SWIG(arg1,arg2);
  {
    std::vector< unsigned long long > * resultptr = new std::vector< unsigned long long >((const std::vector< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ull_matrix___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long long > > *arg1 = (std::vector< std::vector< unsigned long long > > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< std::vector< unsigned long long > > arg3 ;
  std::vector< unsigned long long > *argp3 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long long > >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::__setitem",1,"std::vector< std::vector< unsigned long long > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::__setitem",3,"std::vector< unsigned long long >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t,0))){
    SWIG_fail_ptr("ull_matrix___setitem",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ull_matrix___setitem",3,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  arg3 = *argp3;
  
  std_vector_Sl_std_vector_Sl_unsigned_SS_long_SS_long_Sg__Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ull_matrix_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long long > > *arg1 = (std::vector< std::vector< unsigned long long > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::vector< unsigned long long > > > result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long long > >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::ibegin",1,"std::vector< std::vector< unsigned long long > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t,0))){
    SWIG_fail_ptr("ull_matrix_ibegin",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t);
  }
  
  result = std_vector_Sl_std_vector_Sl_unsigned_SS_long_SS_long_Sg__Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< std::vector< unsigned long long > > * resultptr = new std::vector_iterator< std::vector< unsigned long long > >((const std::vector_iterator< std::vector< unsigned long long > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__vectorT_unsigned_long_long_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ull_matrix_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long long > > *arg1 = (std::vector< std::vector< unsigned long long > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::vector< unsigned long long > > > result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long long > >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::iend",1,"std::vector< std::vector< unsigned long long > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t,0))){
    SWIG_fail_ptr("ull_matrix_iend",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t);
  }
  
  result = std_vector_Sl_std_vector_Sl_unsigned_SS_long_SS_long_Sg__Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< std::vector< unsigned long long > > * resultptr = new std::vector_iterator< std::vector< unsigned long long > >((const std::vector_iterator< std::vector< unsigned long long > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__vectorT_unsigned_long_long_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ull_matrix_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long long > > *arg1 = (std::vector< std::vector< unsigned long long > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long long > >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::erase",1,"std::vector< std::vector< unsigned long long > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t,0))){
    SWIG_fail_ptr("ull_matrix_erase",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_std_vector_Sl_unsigned_SS_long_SS_long_Sg__Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ull_matrix_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long long > > *arg1 = (std::vector< std::vector< unsigned long long > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long long > >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::erase",1,"std::vector< std::vector< unsigned long long > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t,0))){
    SWIG_fail_ptr("ull_matrix_erase",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_std_vector_Sl_unsigned_SS_long_SS_long_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ull_matrix_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ull_matrix_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ull_matrix_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ull_matrix_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< unsigned long long > >::erase(size_t)\n"
    "    std::vector< std::vector< unsigned long long > >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ull_matrix_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long long > > *arg1 = (std::vector< std::vector< unsigned long long > > *) 0 ;
  std::vector< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long long > >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::front",1,"std::vector< std::vector< unsigned long long > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t,0))){
    SWIG_fail_ptr("ull_matrix_front",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t);
  }
  
  result = (std::vector< unsigned long long > *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ull_matrix_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long long > > *arg1 = (std::vector< std::vector< unsigned long long > > *) 0 ;
  std::vector< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long long > >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::back",1,"std::vector< std::vector< unsigned long long > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t,0))){
    SWIG_fail_ptr("ull_matrix_back",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t);
  }
  
  result = (std::vector< unsigned long long > *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ull_matrix_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long long > > *arg1 = (std::vector< std::vector< unsigned long long > > *) 0 ;
  std::vector< unsigned long long > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long long > >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::push_back",1,"std::vector< std::vector< unsigned long long > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::push_back",2,"std::vector< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t,0))){
    SWIG_fail_ptr("ull_matrix_push_back",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ull_matrix_push_back",2,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  
  (arg1)->push_back((std::vector< unsigned long long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ull_matrix_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long long > > *arg1 = (std::vector< std::vector< unsigned long long > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long long > >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::pop_back",1,"std::vector< std::vector< unsigned long long > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t,0))){
    SWIG_fail_ptr("ull_matrix_pop_back",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ull_matrix_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long long > > *arg1 = (std::vector< std::vector< unsigned long long > > *) 0 ;
  size_t arg2 ;
  std::vector< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long long > >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::at",1,"std::vector< std::vector< unsigned long long > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t,0))){
    SWIG_fail_ptr("ull_matrix_at",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::vector< unsigned long long > *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ull_matrix_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long long > > *arg1 = (std::vector< std::vector< unsigned long long > > *) 0 ;
  size_t arg2 ;
  std::vector< unsigned long long > *arg3 = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long long > >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::assign",1,"std::vector< std::vector< unsigned long long > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::assign",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::assign",3,"std::vector< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t,0))){
    SWIG_fail_ptr("ull_matrix_assign",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ull_matrix_assign",3,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  
  (arg1)->assign(arg2,(std::vector< unsigned long long > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ull_matrix_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long long > > *arg1 = (std::vector< std::vector< unsigned long long > > *) 0 ;
  std::vector< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long long > >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::data",1,"std::vector< std::vector< unsigned long long > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t,0))){
    SWIG_fail_ptr("ull_matrix_data",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t);
  }
  
  result = (std::vector< unsigned long long > *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ull_matrix_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long long > > *arg1 = (std::vector< std::vector< unsigned long long > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long long > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::size",1,"std::vector< std::vector< unsigned long long > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t,0))){
    SWIG_fail_ptr("ull_matrix_size",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ull_matrix_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long long > > *arg1 = (std::vector< std::vector< unsigned long long > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long long > >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::empty",1,"std::vector< std::vector< unsigned long long > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t,0))){
    SWIG_fail_ptr("ull_matrix_empty",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t);
  }
  
  result = (bool)((std::vector< std::vector< unsigned long long > > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ull_matrix_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long long > > *arg1 = (std::vector< std::vector< unsigned long long > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long long > >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::resize",1,"std::vector< std::vector< unsigned long long > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t,0))){
    SWIG_fail_ptr("ull_matrix_resize",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ull_matrix_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long long > > *arg1 = (std::vector< std::vector< unsigned long long > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long long > >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::clear",1,"std::vector< std::vector< unsigned long long > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t,0))){
    SWIG_fail_ptr("ull_matrix_clear",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ull_matrix_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long long > > *arg1 = (std::vector< std::vector< unsigned long long > > *) 0 ;
  std::vector< std::vector< unsigned long long > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long long > >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::swap",1,"std::vector< std::vector< unsigned long long > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::swap",2,"std::vector< std::vector< unsigned long long > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t,0))){
    SWIG_fail_ptr("ull_matrix_swap",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t,0))){
    SWIG_fail_ptr("ull_matrix_swap",2,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ull_matrix_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long long > > *arg1 = (std::vector< std::vector< unsigned long long > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long long > >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::shrink_to_fit",1,"std::vector< std::vector< unsigned long long > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t,0))){
    SWIG_fail_ptr("ull_matrix_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ull_matrix_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long long > > *arg1 = (std::vector< std::vector< unsigned long long > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long long > >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::reserve",1,"std::vector< std::vector< unsigned long long > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t,0))){
    SWIG_fail_ptr("ull_matrix_reserve",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ull_matrix_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long long > > *arg1 = (std::vector< std::vector< unsigned long long > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long long > >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::max_size",1,"std::vector< std::vector< unsigned long long > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t,0))){
    SWIG_fail_ptr("ull_matrix_max_size",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ull_matrix_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::vector< unsigned long long > > *arg1 = (std::vector< std::vector< unsigned long long > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::vector< unsigned long long > >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::vector< unsigned long long > >::capacity",1,"std::vector< std::vector< unsigned long long > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t,0))){
    SWIG_fail_ptr("ull_matrix_capacity",1,SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ull_matrix(void *obj) {
std::vector< std::vector< unsigned long long > > *arg1 = (std::vector< std::vector< unsigned long long > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ull_matrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ull_matrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ull_matrix_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ull_matrix_methods[]= {
    { "__getitem", _wrap_ull_matrix___getitem},
    { "__setitem", _wrap_ull_matrix___setitem},
    { "ibegin", _wrap_ull_matrix_ibegin},
    { "iend", _wrap_ull_matrix_iend},
    { "erase", _wrap_ull_matrix_erase},
    { "front", _wrap_ull_matrix_front},
    { "back", _wrap_ull_matrix_back},
    { "push_back", _wrap_ull_matrix_push_back},
    { "pop_back", _wrap_ull_matrix_pop_back},
    { "at", _wrap_ull_matrix_at},
    { "assign", _wrap_ull_matrix_assign},
    { "data", _wrap_ull_matrix_data},
    { "size", _wrap_ull_matrix_size},
    { "empty", _wrap_ull_matrix_empty},
    { "resize", _wrap_ull_matrix_resize},
    { "clear", _wrap_ull_matrix_clear},
    { "swap", _wrap_ull_matrix_swap},
    { "shrink_to_fit", _wrap_ull_matrix_shrink_to_fit},
    { "reserve", _wrap_ull_matrix_reserve},
    { "max_size", _wrap_ull_matrix_max_size},
    { "capacity", _wrap_ull_matrix_capacity},
    {0,0}
};
static swig_lua_method swig_ull_matrix_meta[] = {
    { "__getitem", _wrap_ull_matrix___getitem},
    { "__setitem", _wrap_ull_matrix___setitem},
    {0,0}
};

static swig_lua_attribute swig_ull_matrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ull_matrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ull_matrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ull_matrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ull_matrix_Sf_SwigStatic = {
    "ull_matrix",
    swig_ull_matrix_Sf_SwigStatic_methods,
    swig_ull_matrix_Sf_SwigStatic_attributes,
    swig_ull_matrix_Sf_SwigStatic_constants,
    swig_ull_matrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ull_matrix_bases[] = {0};
static const char *swig_ull_matrix_base_names[] = {0};
static swig_lua_class _wrap_class_ull_matrix = { "ull_matrix", "ull_matrix", &SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_long_t_t,_proxy__wrap_new_ull_matrix, swig_delete_ull_matrix, swig_ull_matrix_methods, swig_ull_matrix_attributes, &swig_ull_matrix_Sf_SwigStatic, swig_ull_matrix_meta, swig_ull_matrix_bases, swig_ull_matrix_base_names };

static int _wrap_new_Base(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Base *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Base::Base",0,0)
  result = (SimpleEigen::Base *)new SimpleEigen::Base();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__Base,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Base(void *obj) {
SimpleEigen::Base *arg1 = (SimpleEigen::Base *) obj;
delete arg1;
}
static int _proxy__wrap_new_Base(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Base);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Base_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Base_methods[]= {
    {0,0}
};
static swig_lua_method swig_Base_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Base_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Base_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Base_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Base_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Base_Sf_SwigStatic = {
    "Base",
    swig_Base_Sf_SwigStatic_methods,
    swig_Base_Sf_SwigStatic_attributes,
    swig_Base_Sf_SwigStatic_constants,
    swig_Base_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Base_bases[] = {0};
static const char *swig_Base_base_names[] = {0};
static swig_lua_class _wrap_class_Base = { "Base", "Base", &SWIGTYPE_p_SimpleEigen__Base,_proxy__wrap_new_Base, swig_delete_Base, swig_Base_methods, swig_Base_attributes, &swig_Base_Sf_SwigStatic, swig_Base_meta, swig_Base_bases, swig_Base_base_names };

static int _wrap_ComplexFloat_c_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  std::complex< float > arg2 ;
  std::complex< float > *argp2 ;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::c",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::c",1,"SimpleEigen::Complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Complex< float >::c",2,"std::complex< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_c_set",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_c_set",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->c = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat_c_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::c",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::c",1,"SimpleEigen::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_c_get",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  result =  ((arg1)->c);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexFloat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::Complex",0,0)
  result = (SimpleEigen::Complex< float > *)new SimpleEigen::Complex< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexFloat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  SimpleEigen::Complex< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::Complex",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::Complex",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Complex< float >::Complex",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (SimpleEigen::Complex< float > *)new SimpleEigen::Complex< float >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexFloat__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = 0 ;
  SimpleEigen::Complex< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::Complex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::Complex",1,"SimpleEigen::Complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("new_ComplexFloat",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  result = (SimpleEigen::Complex< float > *)new SimpleEigen::Complex< float >((SimpleEigen::Complex< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexFloat__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  SimpleEigen::Complex< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::Complex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::Complex",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("new_ComplexFloat",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (SimpleEigen::Complex< float > *)new SimpleEigen::Complex< float >((std::complex< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexFloat(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ComplexFloat__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ComplexT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexFloat__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexFloat__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ComplexFloat__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ComplexFloat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Complex< float >::Complex()\n"
    "    SimpleEigen::Complex< float >::Complex(float,float)\n"
    "    SimpleEigen::Complex< float >::Complex(SimpleEigen::Complex< float > const &)\n"
    "    SimpleEigen::Complex< float >::Complex(std::complex< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexFloat_r(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::r",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::r",1,"SimpleEigen::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_r",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  result = (float)(arg1)->r();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat_i(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::i",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::i",1,"SimpleEigen::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_i",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  result = (float)(arg1)->i();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat_real(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::real",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::real",1,"SimpleEigen::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_real",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  result = (float)(arg1)->real();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat_imag(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::imag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::imag",1,"SimpleEigen::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_imag",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  result = (float)(arg1)->imag();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat_set_real(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::set_real",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::set_real",1,"SimpleEigen::Complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Complex< float >::set_real",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_set_real",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->set_real(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat_set_imag(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::set_imag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::set_imag",1,"SimpleEigen::Complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Complex< float >::set_imag",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_set_imag",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->set_imag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  SimpleEigen::Complex< float > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::operator +",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::operator +",1,"SimpleEigen::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat___add",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  result = (arg1)->operator +();
  {
    SimpleEigen::Complex< float > * resultptr = new SimpleEigen::Complex< float >((const SimpleEigen::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat___unm(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  SimpleEigen::Complex< float > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::operator -",1,"SimpleEigen::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat___unm",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  result = (arg1)->operator -();
  {
    SimpleEigen::Complex< float > * resultptr = new SimpleEigen::Complex< float >((const SimpleEigen::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  SimpleEigen::Complex< float > *arg2 = 0 ;
  SimpleEigen::Complex< float > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::operator +",1,"SimpleEigen::Complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Complex< float >::operator +",2,"SimpleEigen::Complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat___add",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat___add",2,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::Complex< float > const &)*arg2);
  {
    SimpleEigen::Complex< float > * resultptr = new SimpleEigen::Complex< float >((const SimpleEigen::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ComplexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComplexFloat___add__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ComplexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ComplexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexFloat___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexFloat___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Complex< float >::operator +()\n"
    "    SimpleEigen::Complex< float >::operator +(SimpleEigen::Complex< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexFloat___sub(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  SimpleEigen::Complex< float > *arg2 = 0 ;
  SimpleEigen::Complex< float > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::operator -",1,"SimpleEigen::Complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Complex< float >::operator -",2,"SimpleEigen::Complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat___sub",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat___sub",2,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::Complex< float > const &)*arg2);
  {
    SimpleEigen::Complex< float > * resultptr = new SimpleEigen::Complex< float >((const SimpleEigen::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat___mul(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  SimpleEigen::Complex< float > *arg2 = 0 ;
  SimpleEigen::Complex< float > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::operator *",1,"SimpleEigen::Complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Complex< float >::operator *",2,"SimpleEigen::Complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat___mul",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat___mul",2,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::Complex< float > const &)*arg2);
  {
    SimpleEigen::Complex< float > * resultptr = new SimpleEigen::Complex< float >((const SimpleEigen::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat___div(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  SimpleEigen::Complex< float > *arg2 = 0 ;
  SimpleEigen::Complex< float > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::operator /",1,"SimpleEigen::Complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Complex< float >::operator /",2,"SimpleEigen::Complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat___div",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat___div",2,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::Complex< float > const &)*arg2);
  {
    SimpleEigen::Complex< float > * resultptr = new SimpleEigen::Complex< float >((const SimpleEigen::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat_abs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  SimpleEigen::Complex< float > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::abs",1,"SimpleEigen::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_abs",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  result = (arg1)->abs();
  {
    SimpleEigen::Complex< float > * resultptr = new SimpleEigen::Complex< float >((const SimpleEigen::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat_arg(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  SimpleEigen::Complex< float > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::arg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::arg",1,"SimpleEigen::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_arg",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  result = (arg1)->arg();
  {
    SimpleEigen::Complex< float > * resultptr = new SimpleEigen::Complex< float >((const SimpleEigen::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat_norm(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  SimpleEigen::Complex< float > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::norm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::norm",1,"SimpleEigen::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_norm",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  result = (arg1)->norm();
  {
    SimpleEigen::Complex< float > * resultptr = new SimpleEigen::Complex< float >((const SimpleEigen::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat_conj(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  SimpleEigen::Complex< float > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::conj",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::conj",1,"SimpleEigen::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_conj",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  result = (arg1)->conj();
  {
    SimpleEigen::Complex< float > * resultptr = new SimpleEigen::Complex< float >((const SimpleEigen::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat_proj(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  SimpleEigen::Complex< float > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::proj",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::proj",1,"SimpleEigen::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_proj",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  result = (arg1)->proj();
  {
    SimpleEigen::Complex< float > * resultptr = new SimpleEigen::Complex< float >((const SimpleEigen::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat_polar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp2 ;
  float temp3 ;
  SimpleEigen::Complex< float > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::polar",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::polar",1,"SimpleEigen::Complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Complex< float >::polar",2,"float const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Complex< float >::polar",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_polar",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  result = (arg1)->polar((float const &)*arg2,(float const &)*arg3);
  {
    SimpleEigen::Complex< float > * resultptr = new SimpleEigen::Complex< float >((const SimpleEigen::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat_polar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  SimpleEigen::Complex< float > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::polar",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::polar",1,"SimpleEigen::Complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Complex< float >::polar",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_polar",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->polar((float const &)*arg2);
  {
    SimpleEigen::Complex< float > * resultptr = new SimpleEigen::Complex< float >((const SimpleEigen::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat_polar(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ComplexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComplexFloat_polar__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ComplexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ComplexFloat_polar__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexFloat_polar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Complex< float >::polar(float const &,float const &)\n"
    "    SimpleEigen::Complex< float >::polar(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexFloat_exp(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  SimpleEigen::Complex< float > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::exp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::exp",1,"SimpleEigen::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_exp",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  result = (arg1)->exp();
  {
    SimpleEigen::Complex< float > * resultptr = new SimpleEigen::Complex< float >((const SimpleEigen::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat_log(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  SimpleEigen::Complex< float > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::log",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::log",1,"SimpleEigen::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_log",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  result = (arg1)->log();
  {
    SimpleEigen::Complex< float > * resultptr = new SimpleEigen::Complex< float >((const SimpleEigen::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat_log10(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  SimpleEigen::Complex< float > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::log10",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::log10",1,"SimpleEigen::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_log10",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  result = (arg1)->log10();
  {
    SimpleEigen::Complex< float > * resultptr = new SimpleEigen::Complex< float >((const SimpleEigen::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat_pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  SimpleEigen::Complex< float > *arg2 = 0 ;
  SimpleEigen::Complex< float > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::pow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::pow",1,"SimpleEigen::Complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Complex< float >::pow",2,"SimpleEigen::Complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_pow",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_pow",2,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  result = (arg1)->pow((SimpleEigen::Complex< float > const &)*arg2);
  {
    SimpleEigen::Complex< float > * resultptr = new SimpleEigen::Complex< float >((const SimpleEigen::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat_pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  SimpleEigen::Complex< float > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::pow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::pow",1,"SimpleEigen::Complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Complex< float >::pow",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_pow",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->pow((float const &)*arg2);
  {
    SimpleEigen::Complex< float > * resultptr = new SimpleEigen::Complex< float >((const SimpleEigen::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat_pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ComplexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ComplexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexFloat_pow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ComplexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComplexFloat_pow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexFloat_pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Complex< float >::pow(SimpleEigen::Complex< float > const &)\n"
    "    SimpleEigen::Complex< float >::pow(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexFloat_sqrt(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  SimpleEigen::Complex< float > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::sqrt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::sqrt",1,"SimpleEigen::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_sqrt",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  result = (arg1)->sqrt();
  {
    SimpleEigen::Complex< float > * resultptr = new SimpleEigen::Complex< float >((const SimpleEigen::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat_sin(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  SimpleEigen::Complex< float > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::sin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::sin",1,"SimpleEigen::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_sin",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  result = (arg1)->sin();
  {
    SimpleEigen::Complex< float > * resultptr = new SimpleEigen::Complex< float >((const SimpleEigen::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat_cos(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  SimpleEigen::Complex< float > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::cos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::cos",1,"SimpleEigen::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_cos",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  result = (arg1)->cos();
  {
    SimpleEigen::Complex< float > * resultptr = new SimpleEigen::Complex< float >((const SimpleEigen::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat_tan(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  SimpleEigen::Complex< float > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::tan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::tan",1,"SimpleEigen::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_tan",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  result = (arg1)->tan();
  {
    SimpleEigen::Complex< float > * resultptr = new SimpleEigen::Complex< float >((const SimpleEigen::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat_asin(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  SimpleEigen::Complex< float > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::asin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::asin",1,"SimpleEigen::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_asin",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  result = (arg1)->asin();
  {
    SimpleEigen::Complex< float > * resultptr = new SimpleEigen::Complex< float >((const SimpleEigen::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat_acos(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  SimpleEigen::Complex< float > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::acos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::acos",1,"SimpleEigen::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_acos",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  result = (arg1)->acos();
  {
    SimpleEigen::Complex< float > * resultptr = new SimpleEigen::Complex< float >((const SimpleEigen::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat_atan(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  SimpleEigen::Complex< float > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::atan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::atan",1,"SimpleEigen::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_atan",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  result = (arg1)->atan();
  {
    SimpleEigen::Complex< float > * resultptr = new SimpleEigen::Complex< float >((const SimpleEigen::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat_sinh(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  SimpleEigen::Complex< float > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::sinh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::sinh",1,"SimpleEigen::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_sinh",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  result = (arg1)->sinh();
  {
    SimpleEigen::Complex< float > * resultptr = new SimpleEigen::Complex< float >((const SimpleEigen::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat_cosh(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  SimpleEigen::Complex< float > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::cosh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::cosh",1,"SimpleEigen::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_cosh",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  result = (arg1)->cosh();
  {
    SimpleEigen::Complex< float > * resultptr = new SimpleEigen::Complex< float >((const SimpleEigen::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat_tanh(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  SimpleEigen::Complex< float > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::tanh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::tanh",1,"SimpleEigen::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_tanh",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  result = (arg1)->tanh();
  {
    SimpleEigen::Complex< float > * resultptr = new SimpleEigen::Complex< float >((const SimpleEigen::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat_asinh(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  SimpleEigen::Complex< float > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::asinh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::asinh",1,"SimpleEigen::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_asinh",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  result = (arg1)->asinh();
  {
    SimpleEigen::Complex< float > * resultptr = new SimpleEigen::Complex< float >((const SimpleEigen::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat_acosh(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  SimpleEigen::Complex< float > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::acosh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::acosh",1,"SimpleEigen::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_acosh",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  result = (arg1)->acosh();
  {
    SimpleEigen::Complex< float > * resultptr = new SimpleEigen::Complex< float >((const SimpleEigen::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexFloat_atanh(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) 0 ;
  SimpleEigen::Complex< float > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< float >::atanh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< float >::atanh",1,"SimpleEigen::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,0))){
    SWIG_fail_ptr("ComplexFloat_atanh",1,SWIGTYPE_p_SimpleEigen__ComplexT_float_t);
  }
  
  result = (arg1)->atanh();
  {
    SimpleEigen::Complex< float > * resultptr = new SimpleEigen::Complex< float >((const SimpleEigen::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ComplexFloat(void *obj) {
SimpleEigen::Complex< float > *arg1 = (SimpleEigen::Complex< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ComplexFloat(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ComplexFloat);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ComplexFloat_attributes[] = {
    { "c", _wrap_ComplexFloat_c_get, _wrap_ComplexFloat_c_set },
    {0,0,0}
};
static swig_lua_method swig_ComplexFloat_methods[]= {
    { "r", _wrap_ComplexFloat_r},
    { "i", _wrap_ComplexFloat_i},
    { "real", _wrap_ComplexFloat_real},
    { "imag", _wrap_ComplexFloat_imag},
    { "set_real", _wrap_ComplexFloat_set_real},
    { "set_imag", _wrap_ComplexFloat_set_imag},
    { "__unm", _wrap_ComplexFloat___unm},
    { "__add", _wrap_ComplexFloat___add},
    { "__sub", _wrap_ComplexFloat___sub},
    { "__mul", _wrap_ComplexFloat___mul},
    { "__div", _wrap_ComplexFloat___div},
    { "abs", _wrap_ComplexFloat_abs},
    { "arg", _wrap_ComplexFloat_arg},
    { "norm", _wrap_ComplexFloat_norm},
    { "conj", _wrap_ComplexFloat_conj},
    { "proj", _wrap_ComplexFloat_proj},
    { "polar", _wrap_ComplexFloat_polar},
    { "exp", _wrap_ComplexFloat_exp},
    { "log", _wrap_ComplexFloat_log},
    { "log10", _wrap_ComplexFloat_log10},
    { "pow", _wrap_ComplexFloat_pow},
    { "sqrt", _wrap_ComplexFloat_sqrt},
    { "sin", _wrap_ComplexFloat_sin},
    { "cos", _wrap_ComplexFloat_cos},
    { "tan", _wrap_ComplexFloat_tan},
    { "asin", _wrap_ComplexFloat_asin},
    { "acos", _wrap_ComplexFloat_acos},
    { "atan", _wrap_ComplexFloat_atan},
    { "sinh", _wrap_ComplexFloat_sinh},
    { "cosh", _wrap_ComplexFloat_cosh},
    { "tanh", _wrap_ComplexFloat_tanh},
    { "asinh", _wrap_ComplexFloat_asinh},
    { "acosh", _wrap_ComplexFloat_acosh},
    { "atanh", _wrap_ComplexFloat_atanh},
    {0,0}
};
static swig_lua_method swig_ComplexFloat_meta[] = {
    { "__unm", _wrap_ComplexFloat___unm},
    { "__add", _wrap_ComplexFloat___add},
    { "__sub", _wrap_ComplexFloat___sub},
    { "__mul", _wrap_ComplexFloat___mul},
    { "__div", _wrap_ComplexFloat___div},
    {0,0}
};

static swig_lua_attribute swig_ComplexFloat_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ComplexFloat_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ComplexFloat_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ComplexFloat_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ComplexFloat_Sf_SwigStatic = {
    "ComplexFloat",
    swig_ComplexFloat_Sf_SwigStatic_methods,
    swig_ComplexFloat_Sf_SwigStatic_attributes,
    swig_ComplexFloat_Sf_SwigStatic_constants,
    swig_ComplexFloat_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ComplexFloat_bases[] = {0,0};
static const char *swig_ComplexFloat_base_names[] = {"SimpleEigen::Base *",0};
static swig_lua_class _wrap_class_ComplexFloat = { "ComplexFloat", "ComplexFloat", &SWIGTYPE_p_SimpleEigen__ComplexT_float_t,_proxy__wrap_new_ComplexFloat, swig_delete_ComplexFloat, swig_ComplexFloat_methods, swig_ComplexFloat_attributes, &swig_ComplexFloat_Sf_SwigStatic, swig_ComplexFloat_meta, swig_ComplexFloat_bases, swig_ComplexFloat_base_names };

static int _wrap_ComplexDouble_c_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  std::complex< double > arg2 ;
  std::complex< double > *argp2 ;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::c",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::c",1,"SimpleEigen::Complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Complex< double >::c",2,"std::complex< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_c_set",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_c_set",2,SWIGTYPE_p_std__complexT_double_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->c = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble_c_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::c",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::c",1,"SimpleEigen::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_c_get",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  result =  ((arg1)->c);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexDouble__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::Complex",0,0)
  result = (SimpleEigen::Complex< double > *)new SimpleEigen::Complex< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexDouble__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  SimpleEigen::Complex< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::Complex",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::Complex",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Complex< double >::Complex",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (SimpleEigen::Complex< double > *)new SimpleEigen::Complex< double >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexDouble__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = 0 ;
  SimpleEigen::Complex< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::Complex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::Complex",1,"SimpleEigen::Complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("new_ComplexDouble",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  result = (SimpleEigen::Complex< double > *)new SimpleEigen::Complex< double >((SimpleEigen::Complex< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexDouble__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  SimpleEigen::Complex< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::Complex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::Complex",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("new_ComplexDouble",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (SimpleEigen::Complex< double > *)new SimpleEigen::Complex< double >((std::complex< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexDouble(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ComplexDouble__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ComplexT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexDouble__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexDouble__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ComplexDouble__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ComplexDouble'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Complex< double >::Complex()\n"
    "    SimpleEigen::Complex< double >::Complex(double,double)\n"
    "    SimpleEigen::Complex< double >::Complex(SimpleEigen::Complex< double > const &)\n"
    "    SimpleEigen::Complex< double >::Complex(std::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexDouble_r(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::r",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::r",1,"SimpleEigen::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_r",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  result = (double)(arg1)->r();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble_i(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::i",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::i",1,"SimpleEigen::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_i",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  result = (double)(arg1)->i();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble_real(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::real",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::real",1,"SimpleEigen::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_real",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  result = (double)(arg1)->real();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble_imag(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::imag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::imag",1,"SimpleEigen::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_imag",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  result = (double)(arg1)->imag();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble_set_real(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::set_real",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::set_real",1,"SimpleEigen::Complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Complex< double >::set_real",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_set_real",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->set_real(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble_set_imag(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::set_imag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::set_imag",1,"SimpleEigen::Complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Complex< double >::set_imag",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_set_imag",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->set_imag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  SimpleEigen::Complex< double > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::operator +",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::operator +",1,"SimpleEigen::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble___add",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  result = (arg1)->operator +();
  {
    SimpleEigen::Complex< double > * resultptr = new SimpleEigen::Complex< double >((const SimpleEigen::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble___unm(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  SimpleEigen::Complex< double > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::operator -",1,"SimpleEigen::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble___unm",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  result = (arg1)->operator -();
  {
    SimpleEigen::Complex< double > * resultptr = new SimpleEigen::Complex< double >((const SimpleEigen::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  SimpleEigen::Complex< double > *arg2 = 0 ;
  SimpleEigen::Complex< double > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::operator +",1,"SimpleEigen::Complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Complex< double >::operator +",2,"SimpleEigen::Complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble___add",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble___add",2,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::Complex< double > const &)*arg2);
  {
    SimpleEigen::Complex< double > * resultptr = new SimpleEigen::Complex< double >((const SimpleEigen::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ComplexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComplexDouble___add__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ComplexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ComplexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexDouble___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexDouble___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Complex< double >::operator +()\n"
    "    SimpleEigen::Complex< double >::operator +(SimpleEigen::Complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexDouble___sub(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  SimpleEigen::Complex< double > *arg2 = 0 ;
  SimpleEigen::Complex< double > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::operator -",1,"SimpleEigen::Complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Complex< double >::operator -",2,"SimpleEigen::Complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble___sub",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble___sub",2,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::Complex< double > const &)*arg2);
  {
    SimpleEigen::Complex< double > * resultptr = new SimpleEigen::Complex< double >((const SimpleEigen::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble___mul(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  SimpleEigen::Complex< double > *arg2 = 0 ;
  SimpleEigen::Complex< double > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::operator *",1,"SimpleEigen::Complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Complex< double >::operator *",2,"SimpleEigen::Complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble___mul",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble___mul",2,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::Complex< double > const &)*arg2);
  {
    SimpleEigen::Complex< double > * resultptr = new SimpleEigen::Complex< double >((const SimpleEigen::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble___div(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  SimpleEigen::Complex< double > *arg2 = 0 ;
  SimpleEigen::Complex< double > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::operator /",1,"SimpleEigen::Complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Complex< double >::operator /",2,"SimpleEigen::Complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble___div",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble___div",2,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::Complex< double > const &)*arg2);
  {
    SimpleEigen::Complex< double > * resultptr = new SimpleEigen::Complex< double >((const SimpleEigen::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble_abs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  SimpleEigen::Complex< double > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::abs",1,"SimpleEigen::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_abs",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  result = (arg1)->abs();
  {
    SimpleEigen::Complex< double > * resultptr = new SimpleEigen::Complex< double >((const SimpleEigen::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble_arg(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  SimpleEigen::Complex< double > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::arg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::arg",1,"SimpleEigen::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_arg",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  result = (arg1)->arg();
  {
    SimpleEigen::Complex< double > * resultptr = new SimpleEigen::Complex< double >((const SimpleEigen::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble_norm(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  SimpleEigen::Complex< double > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::norm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::norm",1,"SimpleEigen::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_norm",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  result = (arg1)->norm();
  {
    SimpleEigen::Complex< double > * resultptr = new SimpleEigen::Complex< double >((const SimpleEigen::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble_conj(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  SimpleEigen::Complex< double > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::conj",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::conj",1,"SimpleEigen::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_conj",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  result = (arg1)->conj();
  {
    SimpleEigen::Complex< double > * resultptr = new SimpleEigen::Complex< double >((const SimpleEigen::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble_proj(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  SimpleEigen::Complex< double > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::proj",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::proj",1,"SimpleEigen::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_proj",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  result = (arg1)->proj();
  {
    SimpleEigen::Complex< double > * resultptr = new SimpleEigen::Complex< double >((const SimpleEigen::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble_polar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp2 ;
  double temp3 ;
  SimpleEigen::Complex< double > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::polar",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::polar",1,"SimpleEigen::Complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Complex< double >::polar",2,"double const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Complex< double >::polar",3,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_polar",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  result = (arg1)->polar((double const &)*arg2,(double const &)*arg3);
  {
    SimpleEigen::Complex< double > * resultptr = new SimpleEigen::Complex< double >((const SimpleEigen::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble_polar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  SimpleEigen::Complex< double > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::polar",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::polar",1,"SimpleEigen::Complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Complex< double >::polar",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_polar",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->polar((double const &)*arg2);
  {
    SimpleEigen::Complex< double > * resultptr = new SimpleEigen::Complex< double >((const SimpleEigen::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble_polar(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ComplexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComplexDouble_polar__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ComplexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ComplexDouble_polar__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexDouble_polar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Complex< double >::polar(double const &,double const &)\n"
    "    SimpleEigen::Complex< double >::polar(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexDouble_exp(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  SimpleEigen::Complex< double > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::exp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::exp",1,"SimpleEigen::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_exp",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  result = (arg1)->exp();
  {
    SimpleEigen::Complex< double > * resultptr = new SimpleEigen::Complex< double >((const SimpleEigen::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble_log(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  SimpleEigen::Complex< double > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::log",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::log",1,"SimpleEigen::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_log",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  result = (arg1)->log();
  {
    SimpleEigen::Complex< double > * resultptr = new SimpleEigen::Complex< double >((const SimpleEigen::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble_log10(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  SimpleEigen::Complex< double > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::log10",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::log10",1,"SimpleEigen::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_log10",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  result = (arg1)->log10();
  {
    SimpleEigen::Complex< double > * resultptr = new SimpleEigen::Complex< double >((const SimpleEigen::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble_pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  SimpleEigen::Complex< double > *arg2 = 0 ;
  SimpleEigen::Complex< double > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::pow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::pow",1,"SimpleEigen::Complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Complex< double >::pow",2,"SimpleEigen::Complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_pow",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_pow",2,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  result = (arg1)->pow((SimpleEigen::Complex< double > const &)*arg2);
  {
    SimpleEigen::Complex< double > * resultptr = new SimpleEigen::Complex< double >((const SimpleEigen::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble_pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  SimpleEigen::Complex< double > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::pow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::pow",1,"SimpleEigen::Complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Complex< double >::pow",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_pow",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->pow((double const &)*arg2);
  {
    SimpleEigen::Complex< double > * resultptr = new SimpleEigen::Complex< double >((const SimpleEigen::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble_pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ComplexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ComplexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexDouble_pow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ComplexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComplexDouble_pow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexDouble_pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Complex< double >::pow(SimpleEigen::Complex< double > const &)\n"
    "    SimpleEigen::Complex< double >::pow(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexDouble_sqrt(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  SimpleEigen::Complex< double > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::sqrt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::sqrt",1,"SimpleEigen::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_sqrt",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  result = (arg1)->sqrt();
  {
    SimpleEigen::Complex< double > * resultptr = new SimpleEigen::Complex< double >((const SimpleEigen::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble_sin(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  SimpleEigen::Complex< double > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::sin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::sin",1,"SimpleEigen::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_sin",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  result = (arg1)->sin();
  {
    SimpleEigen::Complex< double > * resultptr = new SimpleEigen::Complex< double >((const SimpleEigen::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble_cos(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  SimpleEigen::Complex< double > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::cos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::cos",1,"SimpleEigen::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_cos",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  result = (arg1)->cos();
  {
    SimpleEigen::Complex< double > * resultptr = new SimpleEigen::Complex< double >((const SimpleEigen::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble_tan(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  SimpleEigen::Complex< double > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::tan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::tan",1,"SimpleEigen::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_tan",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  result = (arg1)->tan();
  {
    SimpleEigen::Complex< double > * resultptr = new SimpleEigen::Complex< double >((const SimpleEigen::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble_asin(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  SimpleEigen::Complex< double > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::asin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::asin",1,"SimpleEigen::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_asin",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  result = (arg1)->asin();
  {
    SimpleEigen::Complex< double > * resultptr = new SimpleEigen::Complex< double >((const SimpleEigen::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble_acos(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  SimpleEigen::Complex< double > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::acos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::acos",1,"SimpleEigen::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_acos",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  result = (arg1)->acos();
  {
    SimpleEigen::Complex< double > * resultptr = new SimpleEigen::Complex< double >((const SimpleEigen::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble_atan(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  SimpleEigen::Complex< double > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::atan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::atan",1,"SimpleEigen::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_atan",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  result = (arg1)->atan();
  {
    SimpleEigen::Complex< double > * resultptr = new SimpleEigen::Complex< double >((const SimpleEigen::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble_sinh(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  SimpleEigen::Complex< double > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::sinh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::sinh",1,"SimpleEigen::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_sinh",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  result = (arg1)->sinh();
  {
    SimpleEigen::Complex< double > * resultptr = new SimpleEigen::Complex< double >((const SimpleEigen::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble_cosh(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  SimpleEigen::Complex< double > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::cosh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::cosh",1,"SimpleEigen::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_cosh",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  result = (arg1)->cosh();
  {
    SimpleEigen::Complex< double > * resultptr = new SimpleEigen::Complex< double >((const SimpleEigen::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble_tanh(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  SimpleEigen::Complex< double > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::tanh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::tanh",1,"SimpleEigen::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_tanh",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  result = (arg1)->tanh();
  {
    SimpleEigen::Complex< double > * resultptr = new SimpleEigen::Complex< double >((const SimpleEigen::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble_asinh(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  SimpleEigen::Complex< double > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::asinh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::asinh",1,"SimpleEigen::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_asinh",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  result = (arg1)->asinh();
  {
    SimpleEigen::Complex< double > * resultptr = new SimpleEigen::Complex< double >((const SimpleEigen::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble_acosh(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  SimpleEigen::Complex< double > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::acosh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::acosh",1,"SimpleEigen::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_acosh",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  result = (arg1)->acosh();
  {
    SimpleEigen::Complex< double > * resultptr = new SimpleEigen::Complex< double >((const SimpleEigen::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexDouble_atanh(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) 0 ;
  SimpleEigen::Complex< double > result;
  
  SWIG_check_num_args("SimpleEigen::Complex< double >::atanh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Complex< double >::atanh",1,"SimpleEigen::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,0))){
    SWIG_fail_ptr("ComplexDouble_atanh",1,SWIGTYPE_p_SimpleEigen__ComplexT_double_t);
  }
  
  result = (arg1)->atanh();
  {
    SimpleEigen::Complex< double > * resultptr = new SimpleEigen::Complex< double >((const SimpleEigen::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ComplexDouble(void *obj) {
SimpleEigen::Complex< double > *arg1 = (SimpleEigen::Complex< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ComplexDouble(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ComplexDouble);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ComplexDouble_attributes[] = {
    { "c", _wrap_ComplexDouble_c_get, _wrap_ComplexDouble_c_set },
    {0,0,0}
};
static swig_lua_method swig_ComplexDouble_methods[]= {
    { "r", _wrap_ComplexDouble_r},
    { "i", _wrap_ComplexDouble_i},
    { "real", _wrap_ComplexDouble_real},
    { "imag", _wrap_ComplexDouble_imag},
    { "set_real", _wrap_ComplexDouble_set_real},
    { "set_imag", _wrap_ComplexDouble_set_imag},
    { "__unm", _wrap_ComplexDouble___unm},
    { "__add", _wrap_ComplexDouble___add},
    { "__sub", _wrap_ComplexDouble___sub},
    { "__mul", _wrap_ComplexDouble___mul},
    { "__div", _wrap_ComplexDouble___div},
    { "abs", _wrap_ComplexDouble_abs},
    { "arg", _wrap_ComplexDouble_arg},
    { "norm", _wrap_ComplexDouble_norm},
    { "conj", _wrap_ComplexDouble_conj},
    { "proj", _wrap_ComplexDouble_proj},
    { "polar", _wrap_ComplexDouble_polar},
    { "exp", _wrap_ComplexDouble_exp},
    { "log", _wrap_ComplexDouble_log},
    { "log10", _wrap_ComplexDouble_log10},
    { "pow", _wrap_ComplexDouble_pow},
    { "sqrt", _wrap_ComplexDouble_sqrt},
    { "sin", _wrap_ComplexDouble_sin},
    { "cos", _wrap_ComplexDouble_cos},
    { "tan", _wrap_ComplexDouble_tan},
    { "asin", _wrap_ComplexDouble_asin},
    { "acos", _wrap_ComplexDouble_acos},
    { "atan", _wrap_ComplexDouble_atan},
    { "sinh", _wrap_ComplexDouble_sinh},
    { "cosh", _wrap_ComplexDouble_cosh},
    { "tanh", _wrap_ComplexDouble_tanh},
    { "asinh", _wrap_ComplexDouble_asinh},
    { "acosh", _wrap_ComplexDouble_acosh},
    { "atanh", _wrap_ComplexDouble_atanh},
    {0,0}
};
static swig_lua_method swig_ComplexDouble_meta[] = {
    { "__unm", _wrap_ComplexDouble___unm},
    { "__add", _wrap_ComplexDouble___add},
    { "__sub", _wrap_ComplexDouble___sub},
    { "__mul", _wrap_ComplexDouble___mul},
    { "__div", _wrap_ComplexDouble___div},
    {0,0}
};

static swig_lua_attribute swig_ComplexDouble_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ComplexDouble_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ComplexDouble_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ComplexDouble_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ComplexDouble_Sf_SwigStatic = {
    "ComplexDouble",
    swig_ComplexDouble_Sf_SwigStatic_methods,
    swig_ComplexDouble_Sf_SwigStatic_attributes,
    swig_ComplexDouble_Sf_SwigStatic_constants,
    swig_ComplexDouble_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ComplexDouble_bases[] = {0,0};
static const char *swig_ComplexDouble_base_names[] = {"SimpleEigen::Base *",0};
static swig_lua_class _wrap_class_ComplexDouble = { "ComplexDouble", "ComplexDouble", &SWIGTYPE_p_SimpleEigen__ComplexT_double_t,_proxy__wrap_new_ComplexDouble, swig_delete_ComplexDouble, swig_ComplexDouble_methods, swig_ComplexDouble_attributes, &swig_ComplexDouble_Sf_SwigStatic, swig_ComplexDouble_meta, swig_ComplexDouble_bases, swig_ComplexDouble_base_names };

static int _wrap_FloatScalar_val_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::val",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::val",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_val_set",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_val_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::val",1,"SimpleEigen::Scalar< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_val_get",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (float) ((arg1)->val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatScalar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  SimpleEigen::Scalar< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::Scalar",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::Scalar",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (SimpleEigen::Scalar< float > *)new SimpleEigen::Scalar< float >((float const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatScalar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SimpleEigen::Scalar< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::Scalar",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::Scalar",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("new_FloatScalar",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (SimpleEigen::Scalar< float > *)new SimpleEigen::Scalar< float >((SimpleEigen::Scalar< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatScalar(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatScalar__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_FloatScalar__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatScalar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< float >::Scalar(float const &)\n"
    "    SimpleEigen::Scalar< float >::Scalar(SimpleEigen::Scalar< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatScalar___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator +",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator +",2,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___add",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::Scalar< float > const &)*arg2);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator -",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator -",2,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___sub",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::Scalar< float > const &)*arg2);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator *",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator *",2,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___mul",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::Scalar< float > const &)*arg2);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator /",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator /",2,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___div",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::Scalar< float > const &)*arg2);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator +",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator +",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator +((float const &)*arg2);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator -",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator -",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator -((float const &)*arg2);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator *",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator *",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator *((float const &)*arg2);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator /",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator /",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator /((float const &)*arg2);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_aplus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::aplus",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::aplus",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_aplus",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aplus((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_aminus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::aminus",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::aminus",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_aminus",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aminus((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_atimes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::atimes",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::atimes",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_atimes",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->atimes((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_adiv__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::adiv",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::adiv",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_adiv",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->adiv((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_aplus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::aplus",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::aplus",2,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_aplus",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_aplus",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  (arg1)->aplus((SimpleEigen::Scalar< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_aplus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar_aplus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatScalar_aplus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatScalar_aplus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< float >::aplus(float const &)\n"
    "    SimpleEigen::Scalar< float >::aplus(SimpleEigen::Scalar< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatScalar_aminus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::aminus",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::aminus",2,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_aminus",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_aminus",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  (arg1)->aminus((SimpleEigen::Scalar< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_aminus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar_aminus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatScalar_aminus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatScalar_aminus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< float >::aminus(float const &)\n"
    "    SimpleEigen::Scalar< float >::aminus(SimpleEigen::Scalar< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatScalar_atimes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::atimes",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::atimes",2,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_atimes",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_atimes",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  (arg1)->atimes((SimpleEigen::Scalar< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_atimes(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar_atimes__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatScalar_atimes__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatScalar_atimes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< float >::atimes(float const &)\n"
    "    SimpleEigen::Scalar< float >::atimes(SimpleEigen::Scalar< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatScalar_adiv__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::adiv",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::adiv",2,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_adiv",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_adiv",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  (arg1)->adiv((SimpleEigen::Scalar< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_adiv(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar_adiv__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatScalar_adiv__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatScalar_adiv'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< float >::adiv(float const &)\n"
    "    SimpleEigen::Scalar< float >::adiv(SimpleEigen::Scalar< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatScalar_rowvector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  SimpleEigen::RowVector< float > *arg2 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::rowvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::rowvector",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::rowvector",2,"SimpleEigen::RowVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_rowvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_rowvector",2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = (arg1)->rowvector((SimpleEigen::RowVector< float > const &)*arg2);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_colvector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  SimpleEigen::ColVector< float > *arg2 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::colvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::colvector",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::colvector",2,"SimpleEigen::ColVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_colvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_colvector",2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = (arg1)->colvector((SimpleEigen::ColVector< float > const &)*arg2);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::matrix",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::matrix",2,"SimpleEigen::Matrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_matrix",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_matrix",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->matrix(*arg2);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  SimpleEigen::Array< float > *arg2 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::array",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::array",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::array",2,"SimpleEigen::Array< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_array",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_array",2,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = (arg1)->array(*arg2);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_array2d__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  SimpleEigen::Array2D< float > *arg2 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::array2d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::array2d",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::array2d",2,"SimpleEigen::Array2D< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_array2d",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_array2d",2,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = (arg1)->array2d(*arg2);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_rowvector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  size_t arg2 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::rowvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::rowvector",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::rowvector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_rowvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->rowvector(arg2);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_rowvector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar_rowvector__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatScalar_rowvector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatScalar_rowvector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< float >::rowvector(SimpleEigen::RowVector< float > const &)\n"
    "    SimpleEigen::Scalar< float >::rowvector(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatScalar_colvector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  size_t arg2 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::colvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::colvector",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::colvector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_colvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->colvector(arg2);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_colvector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar_colvector__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatScalar_colvector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatScalar_colvector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< float >::colvector(SimpleEigen::ColVector< float > const &)\n"
    "    SimpleEigen::Scalar< float >::colvector(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatScalar_matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::matrix",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::matrix",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::matrix",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Scalar< float >::matrix",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_matrix",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->matrix(arg2,arg3);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_matrix(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar_matrix__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatScalar_matrix__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatScalar_matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< float >::matrix(SimpleEigen::Matrix< float > &)\n"
    "    SimpleEigen::Scalar< float >::matrix(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatScalar_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  size_t arg2 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::array",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::array",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::array",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_array",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->array(arg2);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_array(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar_array__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatScalar_array__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatScalar_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< float >::array(SimpleEigen::Array< float > &)\n"
    "    SimpleEigen::Scalar< float >::array(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatScalar_array2d__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::array2d",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::array2d",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::array2d",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Scalar< float >::array2d",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_array2d",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->array2d(arg2,arg3);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_array2d(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar_array2d__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatScalar_array2d__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatScalar_array2d'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< float >::array2d(SimpleEigen::Array2D< float > &)\n"
    "    SimpleEigen::Scalar< float >::array2d(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatScalar___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  SimpleEigen::RowVector< float > *arg2 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator *",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator *",2,"SimpleEigen::RowVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___mul",2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::RowVector< float > const &)*arg2);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  SimpleEigen::RowVector< float > *arg2 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator /",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator /",2,"SimpleEigen::RowVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___div",2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::RowVector< float > const &)*arg2);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  SimpleEigen::RowVector< float > *arg2 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator +",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator +",2,"SimpleEigen::RowVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___add",2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::RowVector< float > const &)*arg2);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  SimpleEigen::RowVector< float > *arg2 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator -",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator -",2,"SimpleEigen::RowVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___sub",2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::RowVector< float > const &)*arg2);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar___mul__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  SimpleEigen::ColVector< float > *arg2 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator *",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator *",2,"SimpleEigen::ColVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___mul",2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::ColVector< float > const &)*arg2);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar___div__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  SimpleEigen::ColVector< float > *arg2 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator /",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator /",2,"SimpleEigen::ColVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___div",2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::ColVector< float > const &)*arg2);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar___add__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  SimpleEigen::ColVector< float > *arg2 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator +",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator +",2,"SimpleEigen::ColVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___add",2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::ColVector< float > const &)*arg2);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar___sub__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  SimpleEigen::ColVector< float > *arg2 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator -",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator -",2,"SimpleEigen::ColVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___sub",2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::ColVector< float > const &)*arg2);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar___mul__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator *",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator *",2,"SimpleEigen::Matrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___mul",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->operator *(*arg2);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar___div__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator /",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator /",2,"SimpleEigen::Matrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___div",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->operator /(*arg2);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar___add__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator +",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator +",2,"SimpleEigen::Matrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___add",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->operator +(*arg2);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar___sub__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator -",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator -",2,"SimpleEigen::Matrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___sub",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->operator -(*arg2);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar___mul__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  SimpleEigen::Array< float > *arg2 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator *",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator *",2,"SimpleEigen::Array< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___mul",2,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = (arg1)->operator *(*arg2);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar___mul__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar___mul__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar___mul__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatScalar___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatScalar___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< float >::operator *(SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::Scalar< float >::operator *(float const &)\n"
    "    SimpleEigen::Scalar< float >::operator *(SimpleEigen::RowVector< float > const &)\n"
    "    SimpleEigen::Scalar< float >::operator *(SimpleEigen::ColVector< float > const &)\n"
    "    SimpleEigen::Scalar< float >::operator *(SimpleEigen::Matrix< float > &)\n"
    "    SimpleEigen::Scalar< float >::operator *(SimpleEigen::Array< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatScalar___div__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  SimpleEigen::Array< float > *arg2 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator /",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator /",2,"SimpleEigen::Array< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___div",2,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = (arg1)->operator /(*arg2);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar___div__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar___div__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar___div__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar___div__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatScalar___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatScalar___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< float >::operator /(SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::Scalar< float >::operator /(float const &)\n"
    "    SimpleEigen::Scalar< float >::operator /(SimpleEigen::RowVector< float > const &)\n"
    "    SimpleEigen::Scalar< float >::operator /(SimpleEigen::ColVector< float > const &)\n"
    "    SimpleEigen::Scalar< float >::operator /(SimpleEigen::Matrix< float > &)\n"
    "    SimpleEigen::Scalar< float >::operator /(SimpleEigen::Array< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatScalar___add__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  SimpleEigen::Array< float > *arg2 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator +",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator +",2,"SimpleEigen::Array< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___add",2,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = (arg1)->operator +(*arg2);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar___add__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar___add__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar___add__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatScalar___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatScalar___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< float >::operator +(SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::Scalar< float >::operator +(float const &)\n"
    "    SimpleEigen::Scalar< float >::operator +(SimpleEigen::RowVector< float > const &)\n"
    "    SimpleEigen::Scalar< float >::operator +(SimpleEigen::ColVector< float > const &)\n"
    "    SimpleEigen::Scalar< float >::operator +(SimpleEigen::Matrix< float > &)\n"
    "    SimpleEigen::Scalar< float >::operator +(SimpleEigen::Array< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatScalar___sub__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  SimpleEigen::Array< float > *arg2 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator -",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::operator -",2,"SimpleEigen::Array< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___sub",2,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = (arg1)->operator -(*arg2);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar___sub__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar___sub__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar___sub__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar___sub__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatScalar___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatScalar___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< float >::operator -(SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::Scalar< float >::operator -(float const &)\n"
    "    SimpleEigen::Scalar< float >::operator -(SimpleEigen::RowVector< float > const &)\n"
    "    SimpleEigen::Scalar< float >::operator -(SimpleEigen::ColVector< float > const &)\n"
    "    SimpleEigen::Scalar< float >::operator -(SimpleEigen::Matrix< float > &)\n"
    "    SimpleEigen::Scalar< float >::operator -(SimpleEigen::Array< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatScalar_get_value(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::get_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::get_value",1,"SimpleEigen::Scalar< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_get_value",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (float)(arg1)->get_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_set_value(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::set_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::set_value",1,"SimpleEigen::Scalar< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< float >::set_value",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_set_value",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->set_value((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_abs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::abs",1,"SimpleEigen::Scalar< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_abs",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (arg1)->abs();
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_fabs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::fabs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::fabs",1,"SimpleEigen::Scalar< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_fabs",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (arg1)->fabs();
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_print(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< float >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< float >::print",1,"SimpleEigen::Scalar< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_print",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatScalar(void *obj) {
SimpleEigen::Scalar< float > *arg1 = (SimpleEigen::Scalar< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatScalar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatScalar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatScalar_attributes[] = {
    { "val", _wrap_FloatScalar_val_get, _wrap_FloatScalar_val_set },
    {0,0,0}
};
static swig_lua_method swig_FloatScalar_methods[]= {
    { "aplus", _wrap_FloatScalar_aplus},
    { "aminus", _wrap_FloatScalar_aminus},
    { "atimes", _wrap_FloatScalar_atimes},
    { "adiv", _wrap_FloatScalar_adiv},
    { "rowvector", _wrap_FloatScalar_rowvector},
    { "colvector", _wrap_FloatScalar_colvector},
    { "matrix", _wrap_FloatScalar_matrix},
    { "array", _wrap_FloatScalar_array},
    { "array2d", _wrap_FloatScalar_array2d},
    { "__mul", _wrap_FloatScalar___mul},
    { "__div", _wrap_FloatScalar___div},
    { "__add", _wrap_FloatScalar___add},
    { "__sub", _wrap_FloatScalar___sub},
    { "get_value", _wrap_FloatScalar_get_value},
    { "set_value", _wrap_FloatScalar_set_value},
    { "abs", _wrap_FloatScalar_abs},
    { "fabs", _wrap_FloatScalar_fabs},
    { "print", _wrap_FloatScalar_print},
    {0,0}
};
static swig_lua_method swig_FloatScalar_meta[] = {
    { "__mul", _wrap_FloatScalar___mul},
    { "__div", _wrap_FloatScalar___div},
    { "__add", _wrap_FloatScalar___add},
    { "__sub", _wrap_FloatScalar___sub},
    {0,0}
};

static swig_lua_attribute swig_FloatScalar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatScalar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatScalar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatScalar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatScalar_Sf_SwigStatic = {
    "FloatScalar",
    swig_FloatScalar_Sf_SwigStatic_methods,
    swig_FloatScalar_Sf_SwigStatic_attributes,
    swig_FloatScalar_Sf_SwigStatic_constants,
    swig_FloatScalar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatScalar_bases[] = {0,0};
static const char *swig_FloatScalar_base_names[] = {"SimpleEigen::Base *",0};
static swig_lua_class _wrap_class_FloatScalar = { "FloatScalar", "FloatScalar", &SWIGTYPE_p_SimpleEigen__ScalarT_float_t,_proxy__wrap_new_FloatScalar, swig_delete_FloatScalar, swig_FloatScalar_methods, swig_FloatScalar_attributes, &swig_FloatScalar_Sf_SwigStatic, swig_FloatScalar_meta, swig_FloatScalar_bases, swig_FloatScalar_base_names };

static int _wrap_DoubleScalar_val_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::val",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::val",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_val_set",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_val_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::val",1,"SimpleEigen::Scalar< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_val_get",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  result = (double) ((arg1)->val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleScalar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  SimpleEigen::Scalar< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::Scalar",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::Scalar",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (SimpleEigen::Scalar< double > *)new SimpleEigen::Scalar< double >((double const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleScalar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = 0 ;
  SimpleEigen::Scalar< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::Scalar",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::Scalar",1,"SimpleEigen::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("new_DoubleScalar",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  result = (SimpleEigen::Scalar< double > *)new SimpleEigen::Scalar< double >((SimpleEigen::Scalar< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleScalar(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleScalar__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_DoubleScalar__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DoubleScalar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< double >::Scalar(double const &)\n"
    "    SimpleEigen::Scalar< double >::Scalar(SimpleEigen::Scalar< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleScalar___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  SimpleEigen::Scalar< double > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator +",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator +",2,"SimpleEigen::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___add",2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::Scalar< double > const &)*arg2);
  {
    SimpleEigen::Scalar< double > * resultptr = new SimpleEigen::Scalar< double >((const SimpleEigen::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  SimpleEigen::Scalar< double > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator -",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator -",2,"SimpleEigen::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___sub",2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::Scalar< double > const &)*arg2);
  {
    SimpleEigen::Scalar< double > * resultptr = new SimpleEigen::Scalar< double >((const SimpleEigen::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  SimpleEigen::Scalar< double > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator *",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator *",2,"SimpleEigen::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___mul",2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::Scalar< double > const &)*arg2);
  {
    SimpleEigen::Scalar< double > * resultptr = new SimpleEigen::Scalar< double >((const SimpleEigen::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  SimpleEigen::Scalar< double > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator /",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator /",2,"SimpleEigen::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___div",2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::Scalar< double > const &)*arg2);
  {
    SimpleEigen::Scalar< double > * resultptr = new SimpleEigen::Scalar< double >((const SimpleEigen::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator +",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator +",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator +((double const &)*arg2);
  {
    SimpleEigen::Scalar< double > * resultptr = new SimpleEigen::Scalar< double >((const SimpleEigen::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator -",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator -",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator -((double const &)*arg2);
  {
    SimpleEigen::Scalar< double > * resultptr = new SimpleEigen::Scalar< double >((const SimpleEigen::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator *",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator *",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator *((double const &)*arg2);
  {
    SimpleEigen::Scalar< double > * resultptr = new SimpleEigen::Scalar< double >((const SimpleEigen::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator /",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator /",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator /((double const &)*arg2);
  {
    SimpleEigen::Scalar< double > * resultptr = new SimpleEigen::Scalar< double >((const SimpleEigen::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_aplus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::aplus",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::aplus",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_aplus",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aplus((double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_aminus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::aminus",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::aminus",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_aminus",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aminus((double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_atimes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::atimes",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::atimes",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_atimes",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->atimes((double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_adiv__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::adiv",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::adiv",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_adiv",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->adiv((double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_aplus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  SimpleEigen::Scalar< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::aplus",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::aplus",2,"SimpleEigen::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_aplus",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_aplus",2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  (arg1)->aplus((SimpleEigen::Scalar< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_aplus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar_aplus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleScalar_aplus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleScalar_aplus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< double >::aplus(double const &)\n"
    "    SimpleEigen::Scalar< double >::aplus(SimpleEigen::Scalar< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleScalar_aminus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  SimpleEigen::Scalar< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::aminus",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::aminus",2,"SimpleEigen::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_aminus",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_aminus",2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  (arg1)->aminus((SimpleEigen::Scalar< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_aminus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar_aminus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleScalar_aminus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleScalar_aminus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< double >::aminus(double const &)\n"
    "    SimpleEigen::Scalar< double >::aminus(SimpleEigen::Scalar< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleScalar_atimes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  SimpleEigen::Scalar< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::atimes",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::atimes",2,"SimpleEigen::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_atimes",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_atimes",2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  (arg1)->atimes((SimpleEigen::Scalar< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_atimes(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar_atimes__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleScalar_atimes__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleScalar_atimes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< double >::atimes(double const &)\n"
    "    SimpleEigen::Scalar< double >::atimes(SimpleEigen::Scalar< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleScalar_adiv__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  SimpleEigen::Scalar< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::adiv",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::adiv",2,"SimpleEigen::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_adiv",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_adiv",2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  (arg1)->adiv((SimpleEigen::Scalar< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_adiv(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar_adiv__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleScalar_adiv__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleScalar_adiv'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< double >::adiv(double const &)\n"
    "    SimpleEigen::Scalar< double >::adiv(SimpleEigen::Scalar< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleScalar_rowvector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  SimpleEigen::RowVector< double > *arg2 = 0 ;
  SimpleEigen::RowVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::rowvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::rowvector",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::rowvector",2,"SimpleEigen::RowVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_rowvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_rowvector",2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  result = (arg1)->rowvector((SimpleEigen::RowVector< double > const &)*arg2);
  {
    SimpleEigen::RowVector< double > * resultptr = new SimpleEigen::RowVector< double >((const SimpleEigen::RowVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_colvector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  SimpleEigen::ColVector< double > *arg2 = 0 ;
  SimpleEigen::ColVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::colvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::colvector",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::colvector",2,"SimpleEigen::ColVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_colvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_colvector",2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  result = (arg1)->colvector((SimpleEigen::ColVector< double > const &)*arg2);
  {
    SimpleEigen::ColVector< double > * resultptr = new SimpleEigen::ColVector< double >((const SimpleEigen::ColVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::matrix",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::matrix",2,"SimpleEigen::Matrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_matrix",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_matrix",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->matrix(*arg2);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  SimpleEigen::Array< double > *arg2 = 0 ;
  SimpleEigen::Array< double > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::array",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::array",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::array",2,"SimpleEigen::Array< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_array",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_array",2,SWIGTYPE_p_SimpleEigen__ArrayT_double_t);
  }
  
  result = (arg1)->array(*arg2);
  {
    SimpleEigen::Array< double > * resultptr = new SimpleEigen::Array< double >((const SimpleEigen::Array< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_array2d__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  SimpleEigen::Array2D< double > *arg2 = 0 ;
  SimpleEigen::Array2D< double > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::array2d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::array2d",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::array2d",2,"SimpleEigen::Array2D< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_array2d",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_array2d",2,SWIGTYPE_p_SimpleEigen__Array2DT_double_t);
  }
  
  result = (arg1)->array2d(*arg2);
  {
    SimpleEigen::Array2D< double > * resultptr = new SimpleEigen::Array2D< double >((const SimpleEigen::Array2D< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_rowvector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  size_t arg2 ;
  SimpleEigen::RowVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::rowvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::rowvector",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::rowvector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_rowvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->rowvector(arg2);
  {
    SimpleEigen::RowVector< double > * resultptr = new SimpleEigen::RowVector< double >((const SimpleEigen::RowVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_rowvector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar_rowvector__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleScalar_rowvector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleScalar_rowvector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< double >::rowvector(SimpleEigen::RowVector< double > const &)\n"
    "    SimpleEigen::Scalar< double >::rowvector(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleScalar_colvector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  size_t arg2 ;
  SimpleEigen::ColVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::colvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::colvector",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::colvector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_colvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->colvector(arg2);
  {
    SimpleEigen::ColVector< double > * resultptr = new SimpleEigen::ColVector< double >((const SimpleEigen::ColVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_colvector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar_colvector__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleScalar_colvector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleScalar_colvector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< double >::colvector(SimpleEigen::ColVector< double > const &)\n"
    "    SimpleEigen::Scalar< double >::colvector(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleScalar_matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::matrix",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::matrix",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::matrix",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Scalar< double >::matrix",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_matrix",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->matrix(arg2,arg3);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_matrix(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar_matrix__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DoubleScalar_matrix__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleScalar_matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< double >::matrix(SimpleEigen::Matrix< double > &)\n"
    "    SimpleEigen::Scalar< double >::matrix(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleScalar_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  size_t arg2 ;
  SimpleEigen::Array< double > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::array",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::array",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::array",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_array",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->array(arg2);
  {
    SimpleEigen::Array< double > * resultptr = new SimpleEigen::Array< double >((const SimpleEigen::Array< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_array(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar_array__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleScalar_array__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleScalar_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< double >::array(SimpleEigen::Array< double > &)\n"
    "    SimpleEigen::Scalar< double >::array(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleScalar_array2d__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SimpleEigen::Array2D< double > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::array2d",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::array2d",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::array2d",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Scalar< double >::array2d",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_array2d",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->array2d(arg2,arg3);
  {
    SimpleEigen::Array2D< double > * resultptr = new SimpleEigen::Array2D< double >((const SimpleEigen::Array2D< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_array2d(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar_array2d__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DoubleScalar_array2d__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleScalar_array2d'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< double >::array2d(SimpleEigen::Array2D< double > &)\n"
    "    SimpleEigen::Scalar< double >::array2d(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleScalar___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  SimpleEigen::RowVector< double > *arg2 = 0 ;
  SimpleEigen::RowVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator *",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator *",2,"SimpleEigen::RowVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___mul",2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::RowVector< double > const &)*arg2);
  {
    SimpleEigen::RowVector< double > * resultptr = new SimpleEigen::RowVector< double >((const SimpleEigen::RowVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  SimpleEigen::RowVector< double > *arg2 = 0 ;
  SimpleEigen::RowVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator /",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator /",2,"SimpleEigen::RowVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___div",2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::RowVector< double > const &)*arg2);
  {
    SimpleEigen::RowVector< double > * resultptr = new SimpleEigen::RowVector< double >((const SimpleEigen::RowVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  SimpleEigen::RowVector< double > *arg2 = 0 ;
  SimpleEigen::RowVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator +",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator +",2,"SimpleEigen::RowVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___add",2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::RowVector< double > const &)*arg2);
  {
    SimpleEigen::RowVector< double > * resultptr = new SimpleEigen::RowVector< double >((const SimpleEigen::RowVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  SimpleEigen::RowVector< double > *arg2 = 0 ;
  SimpleEigen::RowVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator -",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator -",2,"SimpleEigen::RowVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___sub",2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::RowVector< double > const &)*arg2);
  {
    SimpleEigen::RowVector< double > * resultptr = new SimpleEigen::RowVector< double >((const SimpleEigen::RowVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar___mul__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  SimpleEigen::ColVector< double > *arg2 = 0 ;
  SimpleEigen::ColVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator *",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator *",2,"SimpleEigen::ColVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___mul",2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::ColVector< double > const &)*arg2);
  {
    SimpleEigen::ColVector< double > * resultptr = new SimpleEigen::ColVector< double >((const SimpleEigen::ColVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar___div__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  SimpleEigen::ColVector< double > *arg2 = 0 ;
  SimpleEigen::ColVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator /",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator /",2,"SimpleEigen::ColVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___div",2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::ColVector< double > const &)*arg2);
  {
    SimpleEigen::ColVector< double > * resultptr = new SimpleEigen::ColVector< double >((const SimpleEigen::ColVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar___add__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  SimpleEigen::ColVector< double > *arg2 = 0 ;
  SimpleEigen::ColVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator +",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator +",2,"SimpleEigen::ColVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___add",2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::ColVector< double > const &)*arg2);
  {
    SimpleEigen::ColVector< double > * resultptr = new SimpleEigen::ColVector< double >((const SimpleEigen::ColVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar___sub__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  SimpleEigen::ColVector< double > *arg2 = 0 ;
  SimpleEigen::ColVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator -",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator -",2,"SimpleEigen::ColVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___sub",2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::ColVector< double > const &)*arg2);
  {
    SimpleEigen::ColVector< double > * resultptr = new SimpleEigen::ColVector< double >((const SimpleEigen::ColVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar___mul__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator *",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator *",2,"SimpleEigen::Matrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___mul",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->operator *(*arg2);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar___div__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator /",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator /",2,"SimpleEigen::Matrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___div",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->operator /(*arg2);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar___add__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator +",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator +",2,"SimpleEigen::Matrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___add",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->operator +(*arg2);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar___sub__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator -",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator -",2,"SimpleEigen::Matrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___sub",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->operator -(*arg2);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar___mul__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  SimpleEigen::Array< double > *arg2 = 0 ;
  SimpleEigen::Array< double > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator *",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator *",2,"SimpleEigen::Array< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___mul",2,SWIGTYPE_p_SimpleEigen__ArrayT_double_t);
  }
  
  result = (arg1)->operator *(*arg2);
  {
    SimpleEigen::Array< double > * resultptr = new SimpleEigen::Array< double >((const SimpleEigen::Array< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar___mul__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar___mul__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar___mul__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleScalar___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleScalar___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< double >::operator *(SimpleEigen::Scalar< double > const &)\n"
    "    SimpleEigen::Scalar< double >::operator *(double const &)\n"
    "    SimpleEigen::Scalar< double >::operator *(SimpleEigen::RowVector< double > const &)\n"
    "    SimpleEigen::Scalar< double >::operator *(SimpleEigen::ColVector< double > const &)\n"
    "    SimpleEigen::Scalar< double >::operator *(SimpleEigen::Matrix< double > &)\n"
    "    SimpleEigen::Scalar< double >::operator *(SimpleEigen::Array< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleScalar___div__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  SimpleEigen::Array< double > *arg2 = 0 ;
  SimpleEigen::Array< double > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator /",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator /",2,"SimpleEigen::Array< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___div",2,SWIGTYPE_p_SimpleEigen__ArrayT_double_t);
  }
  
  result = (arg1)->operator /(*arg2);
  {
    SimpleEigen::Array< double > * resultptr = new SimpleEigen::Array< double >((const SimpleEigen::Array< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar___div__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar___div__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar___div__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar___div__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleScalar___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleScalar___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< double >::operator /(SimpleEigen::Scalar< double > const &)\n"
    "    SimpleEigen::Scalar< double >::operator /(double const &)\n"
    "    SimpleEigen::Scalar< double >::operator /(SimpleEigen::RowVector< double > const &)\n"
    "    SimpleEigen::Scalar< double >::operator /(SimpleEigen::ColVector< double > const &)\n"
    "    SimpleEigen::Scalar< double >::operator /(SimpleEigen::Matrix< double > &)\n"
    "    SimpleEigen::Scalar< double >::operator /(SimpleEigen::Array< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleScalar___add__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  SimpleEigen::Array< double > *arg2 = 0 ;
  SimpleEigen::Array< double > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator +",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator +",2,"SimpleEigen::Array< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___add",2,SWIGTYPE_p_SimpleEigen__ArrayT_double_t);
  }
  
  result = (arg1)->operator +(*arg2);
  {
    SimpleEigen::Array< double > * resultptr = new SimpleEigen::Array< double >((const SimpleEigen::Array< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar___add__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar___add__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar___add__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleScalar___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleScalar___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< double >::operator +(SimpleEigen::Scalar< double > const &)\n"
    "    SimpleEigen::Scalar< double >::operator +(double const &)\n"
    "    SimpleEigen::Scalar< double >::operator +(SimpleEigen::RowVector< double > const &)\n"
    "    SimpleEigen::Scalar< double >::operator +(SimpleEigen::ColVector< double > const &)\n"
    "    SimpleEigen::Scalar< double >::operator +(SimpleEigen::Matrix< double > &)\n"
    "    SimpleEigen::Scalar< double >::operator +(SimpleEigen::Array< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleScalar___sub__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  SimpleEigen::Array< double > *arg2 = 0 ;
  SimpleEigen::Array< double > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator -",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::operator -",2,"SimpleEigen::Array< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___sub",2,SWIGTYPE_p_SimpleEigen__ArrayT_double_t);
  }
  
  result = (arg1)->operator -(*arg2);
  {
    SimpleEigen::Array< double > * resultptr = new SimpleEigen::Array< double >((const SimpleEigen::Array< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar___sub__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar___sub__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar___sub__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar___sub__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleScalar___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleScalar___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< double >::operator -(SimpleEigen::Scalar< double > const &)\n"
    "    SimpleEigen::Scalar< double >::operator -(double const &)\n"
    "    SimpleEigen::Scalar< double >::operator -(SimpleEigen::RowVector< double > const &)\n"
    "    SimpleEigen::Scalar< double >::operator -(SimpleEigen::ColVector< double > const &)\n"
    "    SimpleEigen::Scalar< double >::operator -(SimpleEigen::Matrix< double > &)\n"
    "    SimpleEigen::Scalar< double >::operator -(SimpleEigen::Array< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleScalar_get_value(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::get_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::get_value",1,"SimpleEigen::Scalar< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_get_value",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  result = (double)(arg1)->get_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_set_value(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::set_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::set_value",1,"SimpleEigen::Scalar< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< double >::set_value",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_set_value",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->set_value((double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_abs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::abs",1,"SimpleEigen::Scalar< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_abs",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  result = (arg1)->abs();
  {
    SimpleEigen::Scalar< double > * resultptr = new SimpleEigen::Scalar< double >((const SimpleEigen::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_fabs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::fabs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::fabs",1,"SimpleEigen::Scalar< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_fabs",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  result = (arg1)->fabs();
  {
    SimpleEigen::Scalar< double > * resultptr = new SimpleEigen::Scalar< double >((const SimpleEigen::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_print(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< double >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< double >::print",1,"SimpleEigen::Scalar< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_print",1,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleScalar(void *obj) {
SimpleEigen::Scalar< double > *arg1 = (SimpleEigen::Scalar< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleScalar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleScalar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleScalar_attributes[] = {
    { "val", _wrap_DoubleScalar_val_get, _wrap_DoubleScalar_val_set },
    {0,0,0}
};
static swig_lua_method swig_DoubleScalar_methods[]= {
    { "aplus", _wrap_DoubleScalar_aplus},
    { "aminus", _wrap_DoubleScalar_aminus},
    { "atimes", _wrap_DoubleScalar_atimes},
    { "adiv", _wrap_DoubleScalar_adiv},
    { "rowvector", _wrap_DoubleScalar_rowvector},
    { "colvector", _wrap_DoubleScalar_colvector},
    { "matrix", _wrap_DoubleScalar_matrix},
    { "array", _wrap_DoubleScalar_array},
    { "array2d", _wrap_DoubleScalar_array2d},
    { "__mul", _wrap_DoubleScalar___mul},
    { "__div", _wrap_DoubleScalar___div},
    { "__add", _wrap_DoubleScalar___add},
    { "__sub", _wrap_DoubleScalar___sub},
    { "get_value", _wrap_DoubleScalar_get_value},
    { "set_value", _wrap_DoubleScalar_set_value},
    { "abs", _wrap_DoubleScalar_abs},
    { "fabs", _wrap_DoubleScalar_fabs},
    { "print", _wrap_DoubleScalar_print},
    {0,0}
};
static swig_lua_method swig_DoubleScalar_meta[] = {
    { "__mul", _wrap_DoubleScalar___mul},
    { "__div", _wrap_DoubleScalar___div},
    { "__add", _wrap_DoubleScalar___add},
    { "__sub", _wrap_DoubleScalar___sub},
    {0,0}
};

static swig_lua_attribute swig_DoubleScalar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleScalar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleScalar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleScalar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleScalar_Sf_SwigStatic = {
    "DoubleScalar",
    swig_DoubleScalar_Sf_SwigStatic_methods,
    swig_DoubleScalar_Sf_SwigStatic_attributes,
    swig_DoubleScalar_Sf_SwigStatic_constants,
    swig_DoubleScalar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleScalar_bases[] = {0,0};
static const char *swig_DoubleScalar_base_names[] = {"SimpleEigen::Base *",0};
static swig_lua_class _wrap_class_DoubleScalar = { "DoubleScalar", "DoubleScalar", &SWIGTYPE_p_SimpleEigen__ScalarT_double_t,_proxy__wrap_new_DoubleScalar, swig_delete_DoubleScalar, swig_DoubleScalar_methods, swig_DoubleScalar_attributes, &swig_DoubleScalar_Sf_SwigStatic, swig_DoubleScalar_meta, swig_DoubleScalar_bases, swig_DoubleScalar_base_names };

static int _wrap_LongDoubleScalar_val_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  long double arg2 ;
  long double *argp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::val",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::val",2,"long double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar_val_set",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_long_double,0))){
    SWIG_fail_ptr("LongDoubleScalar_val_set",2,SWIGTYPE_p_long_double);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar_val_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  long double result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::val",1,"SimpleEigen::Scalar< long double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar_val_get",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  result = (long double) ((arg1)->val);
  {
    long double * resultptr = new long double((const long double &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_long_double,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LongDoubleScalar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  long double *arg1 = 0 ;
  SimpleEigen::Scalar< long double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::Scalar",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::Scalar",1,"long double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_long_double,0))){
    SWIG_fail_ptr("new_LongDoubleScalar",1,SWIGTYPE_p_long_double);
  }
  
  result = (SimpleEigen::Scalar< long double > *)new SimpleEigen::Scalar< long double >((long double const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LongDoubleScalar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = 0 ;
  SimpleEigen::Scalar< long double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::Scalar",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::Scalar",1,"SimpleEigen::Scalar< long double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("new_LongDoubleScalar",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  result = (SimpleEigen::Scalar< long double > *)new SimpleEigen::Scalar< long double >((SimpleEigen::Scalar< long double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LongDoubleScalar(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_LongDoubleScalar__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_LongDoubleScalar__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_LongDoubleScalar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long double >::Scalar(long double const &)\n"
    "    SimpleEigen::Scalar< long double >::Scalar(SimpleEigen::Scalar< long double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LongDoubleScalar___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  SimpleEigen::Scalar< long double > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator +",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator +",2,"SimpleEigen::Scalar< long double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___add",2,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::Scalar< long double > const &)*arg2);
  {
    SimpleEigen::Scalar< long double > * resultptr = new SimpleEigen::Scalar< long double >((const SimpleEigen::Scalar< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  SimpleEigen::Scalar< long double > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator -",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator -",2,"SimpleEigen::Scalar< long double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___sub",2,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::Scalar< long double > const &)*arg2);
  {
    SimpleEigen::Scalar< long double > * resultptr = new SimpleEigen::Scalar< long double >((const SimpleEigen::Scalar< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  SimpleEigen::Scalar< long double > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator *",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator *",2,"SimpleEigen::Scalar< long double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___mul",2,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::Scalar< long double > const &)*arg2);
  {
    SimpleEigen::Scalar< long double > * resultptr = new SimpleEigen::Scalar< long double >((const SimpleEigen::Scalar< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  SimpleEigen::Scalar< long double > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator /",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator /",2,"SimpleEigen::Scalar< long double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___div",2,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::Scalar< long double > const &)*arg2);
  {
    SimpleEigen::Scalar< long double > * resultptr = new SimpleEigen::Scalar< long double >((const SimpleEigen::Scalar< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  long double *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator +",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator +",2,"long double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long_double,0))){
    SWIG_fail_ptr("LongDoubleScalar___add",2,SWIGTYPE_p_long_double);
  }
  
  result = (arg1)->operator +((long double const &)*arg2);
  {
    SimpleEigen::Scalar< long double > * resultptr = new SimpleEigen::Scalar< long double >((const SimpleEigen::Scalar< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  long double *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator -",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator -",2,"long double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long_double,0))){
    SWIG_fail_ptr("LongDoubleScalar___sub",2,SWIGTYPE_p_long_double);
  }
  
  result = (arg1)->operator -((long double const &)*arg2);
  {
    SimpleEigen::Scalar< long double > * resultptr = new SimpleEigen::Scalar< long double >((const SimpleEigen::Scalar< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  long double *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator *",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator *",2,"long double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long_double,0))){
    SWIG_fail_ptr("LongDoubleScalar___mul",2,SWIGTYPE_p_long_double);
  }
  
  result = (arg1)->operator *((long double const &)*arg2);
  {
    SimpleEigen::Scalar< long double > * resultptr = new SimpleEigen::Scalar< long double >((const SimpleEigen::Scalar< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  long double *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator /",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator /",2,"long double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long_double,0))){
    SWIG_fail_ptr("LongDoubleScalar___div",2,SWIGTYPE_p_long_double);
  }
  
  result = (arg1)->operator /((long double const &)*arg2);
  {
    SimpleEigen::Scalar< long double > * resultptr = new SimpleEigen::Scalar< long double >((const SimpleEigen::Scalar< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar_aplus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  long double *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::aplus",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::aplus",2,"long double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar_aplus",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long_double,0))){
    SWIG_fail_ptr("LongDoubleScalar_aplus",2,SWIGTYPE_p_long_double);
  }
  
  (arg1)->aplus((long double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar_aminus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  long double *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::aminus",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::aminus",2,"long double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar_aminus",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long_double,0))){
    SWIG_fail_ptr("LongDoubleScalar_aminus",2,SWIGTYPE_p_long_double);
  }
  
  (arg1)->aminus((long double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar_atimes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  long double *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::atimes",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::atimes",2,"long double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar_atimes",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long_double,0))){
    SWIG_fail_ptr("LongDoubleScalar_atimes",2,SWIGTYPE_p_long_double);
  }
  
  (arg1)->atimes((long double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar_adiv__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  long double *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::adiv",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::adiv",2,"long double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar_adiv",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long_double,0))){
    SWIG_fail_ptr("LongDoubleScalar_adiv",2,SWIGTYPE_p_long_double);
  }
  
  (arg1)->adiv((long double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar_aplus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  SimpleEigen::Scalar< long double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::aplus",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::aplus",2,"SimpleEigen::Scalar< long double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar_aplus",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar_aplus",2,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  (arg1)->aplus((SimpleEigen::Scalar< long double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar_aplus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar_aplus__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar_aplus__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LongDoubleScalar_aplus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long double >::aplus(long double const &)\n"
    "    SimpleEigen::Scalar< long double >::aplus(SimpleEigen::Scalar< long double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LongDoubleScalar_aminus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  SimpleEigen::Scalar< long double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::aminus",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::aminus",2,"SimpleEigen::Scalar< long double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar_aminus",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar_aminus",2,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  (arg1)->aminus((SimpleEigen::Scalar< long double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar_aminus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar_aminus__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar_aminus__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LongDoubleScalar_aminus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long double >::aminus(long double const &)\n"
    "    SimpleEigen::Scalar< long double >::aminus(SimpleEigen::Scalar< long double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LongDoubleScalar_atimes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  SimpleEigen::Scalar< long double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::atimes",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::atimes",2,"SimpleEigen::Scalar< long double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar_atimes",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar_atimes",2,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  (arg1)->atimes((SimpleEigen::Scalar< long double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar_atimes(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar_atimes__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar_atimes__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LongDoubleScalar_atimes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long double >::atimes(long double const &)\n"
    "    SimpleEigen::Scalar< long double >::atimes(SimpleEigen::Scalar< long double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LongDoubleScalar_adiv__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  SimpleEigen::Scalar< long double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::adiv",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::adiv",2,"SimpleEigen::Scalar< long double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar_adiv",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar_adiv",2,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  (arg1)->adiv((SimpleEigen::Scalar< long double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar_adiv(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar_adiv__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar_adiv__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LongDoubleScalar_adiv'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long double >::adiv(long double const &)\n"
    "    SimpleEigen::Scalar< long double >::adiv(SimpleEigen::Scalar< long double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LongDoubleScalar_rowvector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  SimpleEigen::RowVector< long double > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::rowvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::rowvector",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::rowvector",2,"SimpleEigen::RowVector< long double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar_rowvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar_rowvector",2,SWIGTYPE_p_SimpleEigen__RowVectorT_long_double_t);
  }
  
  result = (arg1)->rowvector((SimpleEigen::RowVector< long double > const &)*arg2);
  {
    SimpleEigen::RowVector< long double > * resultptr = new SimpleEigen::RowVector< long double >((const SimpleEigen::RowVector< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar_colvector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  SimpleEigen::ColVector< long double > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::colvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::colvector",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::colvector",2,"SimpleEigen::ColVector< long double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar_colvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar_colvector",2,SWIGTYPE_p_SimpleEigen__ColVectorT_long_double_t);
  }
  
  result = (arg1)->colvector((SimpleEigen::ColVector< long double > const &)*arg2);
  {
    SimpleEigen::ColVector< long double > * resultptr = new SimpleEigen::ColVector< long double >((const SimpleEigen::ColVector< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar_matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  SimpleEigen::Matrix< long double > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::matrix",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::matrix",2,"SimpleEigen::Matrix< long double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar_matrix",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar_matrix",2,SWIGTYPE_p_SimpleEigen__MatrixT_long_double_t);
  }
  
  result = (arg1)->matrix(*arg2);
  {
    SimpleEigen::Matrix< long double > * resultptr = new SimpleEigen::Matrix< long double >((const SimpleEigen::Matrix< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  SimpleEigen::Array< long double > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::array",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::array",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::array",2,"SimpleEigen::Array< long double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar_array",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar_array",2,SWIGTYPE_p_SimpleEigen__ArrayT_long_double_t);
  }
  
  result = (arg1)->array(*arg2);
  {
    SimpleEigen::Array< long double > * resultptr = new SimpleEigen::Array< long double >((const SimpleEigen::Array< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar_array2d__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  SimpleEigen::Array2D< long double > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array2D< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::array2d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::array2d",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::array2d",2,"SimpleEigen::Array2D< long double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar_array2d",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__Array2DT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar_array2d",2,SWIGTYPE_p_SimpleEigen__Array2DT_long_double_t);
  }
  
  result = (arg1)->array2d(*arg2);
  {
    SimpleEigen::Array2D< long double > * resultptr = new SimpleEigen::Array2D< long double >((const SimpleEigen::Array2D< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar_rowvector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< SimpleEigen::RowVector< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::rowvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::rowvector",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::rowvector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar_rowvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->rowvector(arg2);
  {
    SimpleEigen::RowVector< long double > * resultptr = new SimpleEigen::RowVector< long double >((const SimpleEigen::RowVector< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar_rowvector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_long_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar_rowvector__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LongDoubleScalar_rowvector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LongDoubleScalar_rowvector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long double >::rowvector(SimpleEigen::RowVector< long double > const &)\n"
    "    SimpleEigen::Scalar< long double >::rowvector(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_LongDoubleScalar_colvector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< SimpleEigen::ColVector< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::colvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::colvector",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::colvector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar_colvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->colvector(arg2);
  {
    SimpleEigen::ColVector< long double > * resultptr = new SimpleEigen::ColVector< long double >((const SimpleEigen::ColVector< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar_colvector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_long_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar_colvector__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LongDoubleScalar_colvector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LongDoubleScalar_colvector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long double >::colvector(SimpleEigen::ColVector< long double > const &)\n"
    "    SimpleEigen::Scalar< long double >::colvector(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_LongDoubleScalar_matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SwigValueWrapper< SimpleEigen::Matrix< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::matrix",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::matrix",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::matrix",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::matrix",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar_matrix",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->matrix(arg2,arg3);
  {
    SimpleEigen::Matrix< long double > * resultptr = new SimpleEigen::Matrix< long double >((const SimpleEigen::Matrix< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar_matrix(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_long_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar_matrix__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_LongDoubleScalar_matrix__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LongDoubleScalar_matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long double >::matrix(SimpleEigen::Matrix< long double > &)\n"
    "    SimpleEigen::Scalar< long double >::matrix(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_LongDoubleScalar_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< SimpleEigen::Array< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::array",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::array",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::array",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar_array",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->array(arg2);
  {
    SimpleEigen::Array< long double > * resultptr = new SimpleEigen::Array< long double >((const SimpleEigen::Array< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar_array(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_long_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar_array__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LongDoubleScalar_array__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LongDoubleScalar_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long double >::array(SimpleEigen::Array< long double > &)\n"
    "    SimpleEigen::Scalar< long double >::array(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_LongDoubleScalar_array2d__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SwigValueWrapper< SimpleEigen::Array2D< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::array2d",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::array2d",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::array2d",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::array2d",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar_array2d",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->array2d(arg2,arg3);
  {
    SimpleEigen::Array2D< long double > * resultptr = new SimpleEigen::Array2D< long double >((const SimpleEigen::Array2D< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar_array2d(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_long_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar_array2d__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_LongDoubleScalar_array2d__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LongDoubleScalar_array2d'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long double >::array2d(SimpleEigen::Array2D< long double > &)\n"
    "    SimpleEigen::Scalar< long double >::array2d(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_LongDoubleScalar___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  SimpleEigen::RowVector< long double > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator *",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator *",2,"SimpleEigen::RowVector< long double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___mul",2,SWIGTYPE_p_SimpleEigen__RowVectorT_long_double_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::RowVector< long double > const &)*arg2);
  {
    SimpleEigen::RowVector< long double > * resultptr = new SimpleEigen::RowVector< long double >((const SimpleEigen::RowVector< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  SimpleEigen::RowVector< long double > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator /",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator /",2,"SimpleEigen::RowVector< long double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___div",2,SWIGTYPE_p_SimpleEigen__RowVectorT_long_double_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::RowVector< long double > const &)*arg2);
  {
    SimpleEigen::RowVector< long double > * resultptr = new SimpleEigen::RowVector< long double >((const SimpleEigen::RowVector< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  SimpleEigen::RowVector< long double > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator +",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator +",2,"SimpleEigen::RowVector< long double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___add",2,SWIGTYPE_p_SimpleEigen__RowVectorT_long_double_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::RowVector< long double > const &)*arg2);
  {
    SimpleEigen::RowVector< long double > * resultptr = new SimpleEigen::RowVector< long double >((const SimpleEigen::RowVector< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  SimpleEigen::RowVector< long double > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator -",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator -",2,"SimpleEigen::RowVector< long double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___sub",2,SWIGTYPE_p_SimpleEigen__RowVectorT_long_double_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::RowVector< long double > const &)*arg2);
  {
    SimpleEigen::RowVector< long double > * resultptr = new SimpleEigen::RowVector< long double >((const SimpleEigen::RowVector< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar___mul__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  SimpleEigen::ColVector< long double > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator *",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator *",2,"SimpleEigen::ColVector< long double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___mul",2,SWIGTYPE_p_SimpleEigen__ColVectorT_long_double_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::ColVector< long double > const &)*arg2);
  {
    SimpleEigen::ColVector< long double > * resultptr = new SimpleEigen::ColVector< long double >((const SimpleEigen::ColVector< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar___div__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  SimpleEigen::ColVector< long double > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator /",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator /",2,"SimpleEigen::ColVector< long double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___div",2,SWIGTYPE_p_SimpleEigen__ColVectorT_long_double_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::ColVector< long double > const &)*arg2);
  {
    SimpleEigen::ColVector< long double > * resultptr = new SimpleEigen::ColVector< long double >((const SimpleEigen::ColVector< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar___add__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  SimpleEigen::ColVector< long double > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator +",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator +",2,"SimpleEigen::ColVector< long double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___add",2,SWIGTYPE_p_SimpleEigen__ColVectorT_long_double_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::ColVector< long double > const &)*arg2);
  {
    SimpleEigen::ColVector< long double > * resultptr = new SimpleEigen::ColVector< long double >((const SimpleEigen::ColVector< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar___sub__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  SimpleEigen::ColVector< long double > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator -",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator -",2,"SimpleEigen::ColVector< long double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___sub",2,SWIGTYPE_p_SimpleEigen__ColVectorT_long_double_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::ColVector< long double > const &)*arg2);
  {
    SimpleEigen::ColVector< long double > * resultptr = new SimpleEigen::ColVector< long double >((const SimpleEigen::ColVector< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar___mul__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  SimpleEigen::Matrix< long double > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator *",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator *",2,"SimpleEigen::Matrix< long double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___mul",2,SWIGTYPE_p_SimpleEigen__MatrixT_long_double_t);
  }
  
  result = (arg1)->operator *(*arg2);
  {
    SimpleEigen::Matrix< long double > * resultptr = new SimpleEigen::Matrix< long double >((const SimpleEigen::Matrix< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar___div__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  SimpleEigen::Matrix< long double > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator /",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator /",2,"SimpleEigen::Matrix< long double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___div",2,SWIGTYPE_p_SimpleEigen__MatrixT_long_double_t);
  }
  
  result = (arg1)->operator /(*arg2);
  {
    SimpleEigen::Matrix< long double > * resultptr = new SimpleEigen::Matrix< long double >((const SimpleEigen::Matrix< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar___add__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  SimpleEigen::Matrix< long double > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator +",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator +",2,"SimpleEigen::Matrix< long double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___add",2,SWIGTYPE_p_SimpleEigen__MatrixT_long_double_t);
  }
  
  result = (arg1)->operator +(*arg2);
  {
    SimpleEigen::Matrix< long double > * resultptr = new SimpleEigen::Matrix< long double >((const SimpleEigen::Matrix< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar___sub__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  SimpleEigen::Matrix< long double > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator -",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator -",2,"SimpleEigen::Matrix< long double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___sub",2,SWIGTYPE_p_SimpleEigen__MatrixT_long_double_t);
  }
  
  result = (arg1)->operator -(*arg2);
  {
    SimpleEigen::Matrix< long double > * resultptr = new SimpleEigen::Matrix< long double >((const SimpleEigen::Matrix< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar___mul__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  SimpleEigen::Array< long double > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator *",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator *",2,"SimpleEigen::Array< long double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___mul",2,SWIGTYPE_p_SimpleEigen__ArrayT_long_double_t);
  }
  
  result = (arg1)->operator *(*arg2);
  {
    SimpleEigen::Array< long double > * resultptr = new SimpleEigen::Array< long double >((const SimpleEigen::Array< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_long_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_long_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar___mul__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_long_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar___mul__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_long_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar___mul__SWIG_5(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LongDoubleScalar___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long double >::operator *(SimpleEigen::Scalar< long double > const &)\n"
    "    SimpleEigen::Scalar< long double >::operator *(long double const &)\n"
    "    SimpleEigen::Scalar< long double >::operator *(SimpleEigen::RowVector< long double > const &)\n"
    "    SimpleEigen::Scalar< long double >::operator *(SimpleEigen::ColVector< long double > const &)\n"
    "    SimpleEigen::Scalar< long double >::operator *(SimpleEigen::Matrix< long double > &)\n"
    "    SimpleEigen::Scalar< long double >::operator *(SimpleEigen::Array< long double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_LongDoubleScalar___div__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  SimpleEigen::Array< long double > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator /",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator /",2,"SimpleEigen::Array< long double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___div",2,SWIGTYPE_p_SimpleEigen__ArrayT_long_double_t);
  }
  
  result = (arg1)->operator /(*arg2);
  {
    SimpleEigen::Array< long double > * resultptr = new SimpleEigen::Array< long double >((const SimpleEigen::Array< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar___div__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_long_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar___div__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_long_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar___div__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_long_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar___div__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_long_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar___div__SWIG_5(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LongDoubleScalar___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long double >::operator /(SimpleEigen::Scalar< long double > const &)\n"
    "    SimpleEigen::Scalar< long double >::operator /(long double const &)\n"
    "    SimpleEigen::Scalar< long double >::operator /(SimpleEigen::RowVector< long double > const &)\n"
    "    SimpleEigen::Scalar< long double >::operator /(SimpleEigen::ColVector< long double > const &)\n"
    "    SimpleEigen::Scalar< long double >::operator /(SimpleEigen::Matrix< long double > &)\n"
    "    SimpleEigen::Scalar< long double >::operator /(SimpleEigen::Array< long double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_LongDoubleScalar___add__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  SimpleEigen::Array< long double > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator +",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator +",2,"SimpleEigen::Array< long double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___add",2,SWIGTYPE_p_SimpleEigen__ArrayT_long_double_t);
  }
  
  result = (arg1)->operator +(*arg2);
  {
    SimpleEigen::Array< long double > * resultptr = new SimpleEigen::Array< long double >((const SimpleEigen::Array< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar___add__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_long_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_long_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar___add__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_long_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar___add__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_long_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar___add__SWIG_5(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LongDoubleScalar___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long double >::operator +(SimpleEigen::Scalar< long double > const &)\n"
    "    SimpleEigen::Scalar< long double >::operator +(long double const &)\n"
    "    SimpleEigen::Scalar< long double >::operator +(SimpleEigen::RowVector< long double > const &)\n"
    "    SimpleEigen::Scalar< long double >::operator +(SimpleEigen::ColVector< long double > const &)\n"
    "    SimpleEigen::Scalar< long double >::operator +(SimpleEigen::Matrix< long double > &)\n"
    "    SimpleEigen::Scalar< long double >::operator +(SimpleEigen::Array< long double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_LongDoubleScalar___sub__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  SimpleEigen::Array< long double > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator -",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::operator -",2,"SimpleEigen::Array< long double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar___sub",2,SWIGTYPE_p_SimpleEigen__ArrayT_long_double_t);
  }
  
  result = (arg1)->operator -(*arg2);
  {
    SimpleEigen::Array< long double > * resultptr = new SimpleEigen::Array< long double >((const SimpleEigen::Array< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar___sub__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_long_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar___sub__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_long_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar___sub__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_long_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar___sub__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_long_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongDoubleScalar___sub__SWIG_5(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LongDoubleScalar___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long double >::operator -(SimpleEigen::Scalar< long double > const &)\n"
    "    SimpleEigen::Scalar< long double >::operator -(long double const &)\n"
    "    SimpleEigen::Scalar< long double >::operator -(SimpleEigen::RowVector< long double > const &)\n"
    "    SimpleEigen::Scalar< long double >::operator -(SimpleEigen::ColVector< long double > const &)\n"
    "    SimpleEigen::Scalar< long double >::operator -(SimpleEigen::Matrix< long double > &)\n"
    "    SimpleEigen::Scalar< long double >::operator -(SimpleEigen::Array< long double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_LongDoubleScalar_get_value(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  long double result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::get_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::get_value",1,"SimpleEigen::Scalar< long double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar_get_value",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  result = (long double)(arg1)->get_value();
  {
    long double * resultptr = new long double((const long double &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_long_double,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar_set_value(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  long double *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::set_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::set_value",1,"SimpleEigen::Scalar< long double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::set_value",2,"long double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar_set_value",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long_double,0))){
    SWIG_fail_ptr("LongDoubleScalar_set_value",2,SWIGTYPE_p_long_double);
  }
  
  (arg1)->set_value((long double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar_abs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::abs",1,"SimpleEigen::Scalar< long double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar_abs",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  result = (arg1)->abs();
  {
    SimpleEigen::Scalar< long double > * resultptr = new SimpleEigen::Scalar< long double >((const SimpleEigen::Scalar< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar_fabs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< long double > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::fabs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::fabs",1,"SimpleEigen::Scalar< long double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar_fabs",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  result = (arg1)->fabs();
  {
    SimpleEigen::Scalar< long double > * resultptr = new SimpleEigen::Scalar< long double >((const SimpleEigen::Scalar< long double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongDoubleScalar_print(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long double >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long double >::print",1,"SimpleEigen::Scalar< long double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,0))){
    SWIG_fail_ptr("LongDoubleScalar_print",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LongDoubleScalar(void *obj) {
SimpleEigen::Scalar< long double > *arg1 = (SimpleEigen::Scalar< long double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_LongDoubleScalar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LongDoubleScalar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LongDoubleScalar_attributes[] = {
    { "val", _wrap_LongDoubleScalar_val_get, _wrap_LongDoubleScalar_val_set },
    {0,0,0}
};
static swig_lua_method swig_LongDoubleScalar_methods[]= {
    { "aplus", _wrap_LongDoubleScalar_aplus},
    { "aminus", _wrap_LongDoubleScalar_aminus},
    { "atimes", _wrap_LongDoubleScalar_atimes},
    { "adiv", _wrap_LongDoubleScalar_adiv},
    { "rowvector", _wrap_LongDoubleScalar_rowvector},
    { "colvector", _wrap_LongDoubleScalar_colvector},
    { "matrix", _wrap_LongDoubleScalar_matrix},
    { "array", _wrap_LongDoubleScalar_array},
    { "array2d", _wrap_LongDoubleScalar_array2d},
    { "__mul", _wrap_LongDoubleScalar___mul},
    { "__div", _wrap_LongDoubleScalar___div},
    { "__add", _wrap_LongDoubleScalar___add},
    { "__sub", _wrap_LongDoubleScalar___sub},
    { "get_value", _wrap_LongDoubleScalar_get_value},
    { "set_value", _wrap_LongDoubleScalar_set_value},
    { "abs", _wrap_LongDoubleScalar_abs},
    { "fabs", _wrap_LongDoubleScalar_fabs},
    { "print", _wrap_LongDoubleScalar_print},
    {0,0}
};
static swig_lua_method swig_LongDoubleScalar_meta[] = {
    { "__mul", _wrap_LongDoubleScalar___mul},
    { "__div", _wrap_LongDoubleScalar___div},
    { "__add", _wrap_LongDoubleScalar___add},
    { "__sub", _wrap_LongDoubleScalar___sub},
    {0,0}
};

static swig_lua_attribute swig_LongDoubleScalar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LongDoubleScalar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LongDoubleScalar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LongDoubleScalar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LongDoubleScalar_Sf_SwigStatic = {
    "LongDoubleScalar",
    swig_LongDoubleScalar_Sf_SwigStatic_methods,
    swig_LongDoubleScalar_Sf_SwigStatic_attributes,
    swig_LongDoubleScalar_Sf_SwigStatic_constants,
    swig_LongDoubleScalar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LongDoubleScalar_bases[] = {0,0};
static const char *swig_LongDoubleScalar_base_names[] = {"SimpleEigen::Base *",0};
static swig_lua_class _wrap_class_LongDoubleScalar = { "LongDoubleScalar", "LongDoubleScalar", &SWIGTYPE_p_SimpleEigen__ScalarT_long_double_t,_proxy__wrap_new_LongDoubleScalar, swig_delete_LongDoubleScalar, swig_LongDoubleScalar_methods, swig_LongDoubleScalar_attributes, &swig_LongDoubleScalar_Sf_SwigStatic, swig_LongDoubleScalar_meta, swig_LongDoubleScalar_bases, swig_LongDoubleScalar_base_names };

static int _wrap_Int8Scalar_val_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  signed char arg2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::val",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::val",2,"signed char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_val_set",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  arg2 = (signed char)lua_tonumber(L, 2);
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_val_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  signed char result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::val",1,"SimpleEigen::Scalar< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_val_get",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  result = (signed char) ((arg1)->val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Scalar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  signed char *arg1 = 0 ;
  signed char temp1 ;
  SimpleEigen::Scalar< int8_t > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::Scalar",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::Scalar",1,"signed char const &");
  temp1=(signed char)lua_tonumber(L,1); arg1=&temp1;
  result = (SimpleEigen::Scalar< int8_t > *)new SimpleEigen::Scalar< int8_t >((signed char const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Scalar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< signed char > *arg1 = 0 ;
  SimpleEigen::Scalar< int8_t > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::Scalar",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::Scalar",1,"SimpleEigen::Scalar< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("new_Int8Scalar",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  result = (SimpleEigen::Scalar< int8_t > *)new SimpleEigen::Scalar< int8_t >((SimpleEigen::Scalar< signed char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Scalar(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int8Scalar__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Int8Scalar__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int8Scalar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int8_t >::Scalar(signed char const &)\n"
    "    SimpleEigen::Scalar< int8_t >::Scalar(SimpleEigen::Scalar< signed char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Scalar___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  SimpleEigen::Scalar< signed char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator +",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator +",2,"SimpleEigen::Scalar< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___add",2,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::Scalar< signed char > const &)*arg2);
  {
    SimpleEigen::Scalar< signed char > * resultptr = new SimpleEigen::Scalar< signed char >((const SimpleEigen::Scalar< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  SimpleEigen::Scalar< signed char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator -",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator -",2,"SimpleEigen::Scalar< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___sub",2,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::Scalar< signed char > const &)*arg2);
  {
    SimpleEigen::Scalar< signed char > * resultptr = new SimpleEigen::Scalar< signed char >((const SimpleEigen::Scalar< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  SimpleEigen::Scalar< signed char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator *",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator *",2,"SimpleEigen::Scalar< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___mul",2,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::Scalar< signed char > const &)*arg2);
  {
    SimpleEigen::Scalar< signed char > * resultptr = new SimpleEigen::Scalar< signed char >((const SimpleEigen::Scalar< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  SimpleEigen::Scalar< signed char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator /",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator /",2,"SimpleEigen::Scalar< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___div",2,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::Scalar< signed char > const &)*arg2);
  {
    SimpleEigen::Scalar< signed char > * resultptr = new SimpleEigen::Scalar< signed char >((const SimpleEigen::Scalar< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator +",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator +",2,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  temp2=(signed char)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator +((signed char const &)*arg2);
  {
    SimpleEigen::Scalar< signed char > * resultptr = new SimpleEigen::Scalar< signed char >((const SimpleEigen::Scalar< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator -",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator -",2,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  temp2=(signed char)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator -((signed char const &)*arg2);
  {
    SimpleEigen::Scalar< signed char > * resultptr = new SimpleEigen::Scalar< signed char >((const SimpleEigen::Scalar< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator *",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator *",2,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  temp2=(signed char)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator *((signed char const &)*arg2);
  {
    SimpleEigen::Scalar< signed char > * resultptr = new SimpleEigen::Scalar< signed char >((const SimpleEigen::Scalar< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator /",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator /",2,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  temp2=(signed char)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator /((signed char const &)*arg2);
  {
    SimpleEigen::Scalar< signed char > * resultptr = new SimpleEigen::Scalar< signed char >((const SimpleEigen::Scalar< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_aplus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::aplus",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::aplus",2,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_aplus",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  temp2=(signed char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aplus((signed char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_aminus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::aminus",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::aminus",2,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_aminus",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  temp2=(signed char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aminus((signed char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_atimes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::atimes",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::atimes",2,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_atimes",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  temp2=(signed char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->atimes((signed char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_adiv__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::adiv",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::adiv",2,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_adiv",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  temp2=(signed char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->adiv((signed char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_aplus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  SimpleEigen::Scalar< signed char > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::aplus",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::aplus",2,"SimpleEigen::Scalar< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_aplus",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_aplus",2,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  (arg1)->aplus((SimpleEigen::Scalar< signed char > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_aplus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar_aplus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int8Scalar_aplus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int8Scalar_aplus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int8_t >::aplus(signed char const &)\n"
    "    SimpleEigen::Scalar< int8_t >::aplus(SimpleEigen::Scalar< signed char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Scalar_aminus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  SimpleEigen::Scalar< signed char > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::aminus",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::aminus",2,"SimpleEigen::Scalar< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_aminus",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_aminus",2,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  (arg1)->aminus((SimpleEigen::Scalar< signed char > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_aminus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar_aminus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int8Scalar_aminus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int8Scalar_aminus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int8_t >::aminus(signed char const &)\n"
    "    SimpleEigen::Scalar< int8_t >::aminus(SimpleEigen::Scalar< signed char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Scalar_atimes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  SimpleEigen::Scalar< signed char > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::atimes",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::atimes",2,"SimpleEigen::Scalar< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_atimes",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_atimes",2,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  (arg1)->atimes((SimpleEigen::Scalar< signed char > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_atimes(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar_atimes__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int8Scalar_atimes__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int8Scalar_atimes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int8_t >::atimes(signed char const &)\n"
    "    SimpleEigen::Scalar< int8_t >::atimes(SimpleEigen::Scalar< signed char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Scalar_adiv__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  SimpleEigen::Scalar< signed char > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::adiv",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::adiv",2,"SimpleEigen::Scalar< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_adiv",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_adiv",2,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  (arg1)->adiv((SimpleEigen::Scalar< signed char > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_adiv(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar_adiv__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int8Scalar_adiv__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int8Scalar_adiv'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int8_t >::adiv(signed char const &)\n"
    "    SimpleEigen::Scalar< int8_t >::adiv(SimpleEigen::Scalar< signed char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Scalar_rowvector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  SimpleEigen::RowVector< signed char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::rowvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::rowvector",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::rowvector",2,"SimpleEigen::RowVector< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_rowvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_rowvector",2,SWIGTYPE_p_SimpleEigen__RowVectorT_signed_char_t);
  }
  
  result = (arg1)->rowvector((SimpleEigen::RowVector< signed char > const &)*arg2);
  {
    SimpleEigen::RowVector< signed char > * resultptr = new SimpleEigen::RowVector< signed char >((const SimpleEigen::RowVector< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_colvector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  SimpleEigen::ColVector< signed char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::colvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::colvector",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::colvector",2,"SimpleEigen::ColVector< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_colvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_colvector",2,SWIGTYPE_p_SimpleEigen__ColVectorT_signed_char_t);
  }
  
  result = (arg1)->colvector((SimpleEigen::ColVector< signed char > const &)*arg2);
  {
    SimpleEigen::ColVector< signed char > * resultptr = new SimpleEigen::ColVector< signed char >((const SimpleEigen::ColVector< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  SimpleEigen::Matrix< signed char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::matrix",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::matrix",2,"SimpleEigen::Matrix< signed char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_matrix",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_matrix",2,SWIGTYPE_p_SimpleEigen__MatrixT_signed_char_t);
  }
  
  result = (arg1)->matrix(*arg2);
  {
    SimpleEigen::Matrix< signed char > * resultptr = new SimpleEigen::Matrix< signed char >((const SimpleEigen::Matrix< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  SimpleEigen::Array< signed char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::array",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::array",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::array",2,"SimpleEigen::Array< signed char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_array",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_array",2,SWIGTYPE_p_SimpleEigen__ArrayT_signed_char_t);
  }
  
  result = (arg1)->array(*arg2);
  {
    SimpleEigen::Array< signed char > * resultptr = new SimpleEigen::Array< signed char >((const SimpleEigen::Array< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_array2d__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  SimpleEigen::Array2D< signed char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array2D< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::array2d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::array2d",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::array2d",2,"SimpleEigen::Array2D< signed char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_array2d",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__Array2DT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_array2d",2,SWIGTYPE_p_SimpleEigen__Array2DT_signed_char_t);
  }
  
  result = (arg1)->array2d(*arg2);
  {
    SimpleEigen::Array2D< signed char > * resultptr = new SimpleEigen::Array2D< signed char >((const SimpleEigen::Array2D< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_rowvector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< SimpleEigen::RowVector< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::rowvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::rowvector",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::rowvector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_rowvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->rowvector(arg2);
  {
    SimpleEigen::RowVector< signed char > * resultptr = new SimpleEigen::RowVector< signed char >((const SimpleEigen::RowVector< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_rowvector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar_rowvector__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int8Scalar_rowvector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int8Scalar_rowvector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int8_t >::rowvector(SimpleEigen::RowVector< signed char > const &)\n"
    "    SimpleEigen::Scalar< int8_t >::rowvector(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Scalar_colvector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< SimpleEigen::ColVector< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::colvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::colvector",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::colvector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_colvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->colvector(arg2);
  {
    SimpleEigen::ColVector< signed char > * resultptr = new SimpleEigen::ColVector< signed char >((const SimpleEigen::ColVector< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_colvector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar_colvector__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int8Scalar_colvector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int8Scalar_colvector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int8_t >::colvector(SimpleEigen::ColVector< signed char > const &)\n"
    "    SimpleEigen::Scalar< int8_t >::colvector(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Scalar_matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SwigValueWrapper< SimpleEigen::Matrix< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::matrix",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::matrix",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::matrix",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::matrix",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_matrix",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->matrix(arg2,arg3);
  {
    SimpleEigen::Matrix< signed char > * resultptr = new SimpleEigen::Matrix< signed char >((const SimpleEigen::Matrix< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_matrix(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar_matrix__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Int8Scalar_matrix__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int8Scalar_matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int8_t >::matrix(SimpleEigen::Matrix< signed char > &)\n"
    "    SimpleEigen::Scalar< int8_t >::matrix(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Scalar_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< SimpleEigen::Array< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::array",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::array",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::array",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_array",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->array(arg2);
  {
    SimpleEigen::Array< signed char > * resultptr = new SimpleEigen::Array< signed char >((const SimpleEigen::Array< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_array(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar_array__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int8Scalar_array__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int8Scalar_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int8_t >::array(SimpleEigen::Array< signed char > &)\n"
    "    SimpleEigen::Scalar< int8_t >::array(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Scalar_array2d__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SwigValueWrapper< SimpleEigen::Array2D< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::array2d",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::array2d",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::array2d",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::array2d",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_array2d",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->array2d(arg2,arg3);
  {
    SimpleEigen::Array2D< signed char > * resultptr = new SimpleEigen::Array2D< signed char >((const SimpleEigen::Array2D< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_array2d(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar_array2d__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Int8Scalar_array2d__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int8Scalar_array2d'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int8_t >::array2d(SimpleEigen::Array2D< signed char > &)\n"
    "    SimpleEigen::Scalar< int8_t >::array2d(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Scalar___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  SimpleEigen::RowVector< signed char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator *",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator *",2,"SimpleEigen::RowVector< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___mul",2,SWIGTYPE_p_SimpleEigen__RowVectorT_signed_char_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::RowVector< signed char > const &)*arg2);
  {
    SimpleEigen::RowVector< signed char > * resultptr = new SimpleEigen::RowVector< signed char >((const SimpleEigen::RowVector< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  SimpleEigen::RowVector< signed char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator /",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator /",2,"SimpleEigen::RowVector< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___div",2,SWIGTYPE_p_SimpleEigen__RowVectorT_signed_char_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::RowVector< signed char > const &)*arg2);
  {
    SimpleEigen::RowVector< signed char > * resultptr = new SimpleEigen::RowVector< signed char >((const SimpleEigen::RowVector< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  SimpleEigen::RowVector< signed char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator +",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator +",2,"SimpleEigen::RowVector< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___add",2,SWIGTYPE_p_SimpleEigen__RowVectorT_signed_char_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::RowVector< signed char > const &)*arg2);
  {
    SimpleEigen::RowVector< signed char > * resultptr = new SimpleEigen::RowVector< signed char >((const SimpleEigen::RowVector< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  SimpleEigen::RowVector< signed char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator -",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator -",2,"SimpleEigen::RowVector< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___sub",2,SWIGTYPE_p_SimpleEigen__RowVectorT_signed_char_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::RowVector< signed char > const &)*arg2);
  {
    SimpleEigen::RowVector< signed char > * resultptr = new SimpleEigen::RowVector< signed char >((const SimpleEigen::RowVector< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar___mul__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  SimpleEigen::ColVector< signed char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator *",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator *",2,"SimpleEigen::ColVector< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___mul",2,SWIGTYPE_p_SimpleEigen__ColVectorT_signed_char_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::ColVector< signed char > const &)*arg2);
  {
    SimpleEigen::ColVector< signed char > * resultptr = new SimpleEigen::ColVector< signed char >((const SimpleEigen::ColVector< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar___div__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  SimpleEigen::ColVector< signed char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator /",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator /",2,"SimpleEigen::ColVector< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___div",2,SWIGTYPE_p_SimpleEigen__ColVectorT_signed_char_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::ColVector< signed char > const &)*arg2);
  {
    SimpleEigen::ColVector< signed char > * resultptr = new SimpleEigen::ColVector< signed char >((const SimpleEigen::ColVector< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar___add__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  SimpleEigen::ColVector< signed char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator +",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator +",2,"SimpleEigen::ColVector< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___add",2,SWIGTYPE_p_SimpleEigen__ColVectorT_signed_char_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::ColVector< signed char > const &)*arg2);
  {
    SimpleEigen::ColVector< signed char > * resultptr = new SimpleEigen::ColVector< signed char >((const SimpleEigen::ColVector< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar___sub__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  SimpleEigen::ColVector< signed char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator -",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator -",2,"SimpleEigen::ColVector< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___sub",2,SWIGTYPE_p_SimpleEigen__ColVectorT_signed_char_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::ColVector< signed char > const &)*arg2);
  {
    SimpleEigen::ColVector< signed char > * resultptr = new SimpleEigen::ColVector< signed char >((const SimpleEigen::ColVector< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar___mul__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  SimpleEigen::Matrix< signed char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator *",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator *",2,"SimpleEigen::Matrix< signed char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___mul",2,SWIGTYPE_p_SimpleEigen__MatrixT_signed_char_t);
  }
  
  result = (arg1)->operator *(*arg2);
  {
    SimpleEigen::Matrix< signed char > * resultptr = new SimpleEigen::Matrix< signed char >((const SimpleEigen::Matrix< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar___div__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  SimpleEigen::Matrix< signed char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator /",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator /",2,"SimpleEigen::Matrix< signed char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___div",2,SWIGTYPE_p_SimpleEigen__MatrixT_signed_char_t);
  }
  
  result = (arg1)->operator /(*arg2);
  {
    SimpleEigen::Matrix< signed char > * resultptr = new SimpleEigen::Matrix< signed char >((const SimpleEigen::Matrix< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar___add__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  SimpleEigen::Matrix< signed char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator +",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator +",2,"SimpleEigen::Matrix< signed char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___add",2,SWIGTYPE_p_SimpleEigen__MatrixT_signed_char_t);
  }
  
  result = (arg1)->operator +(*arg2);
  {
    SimpleEigen::Matrix< signed char > * resultptr = new SimpleEigen::Matrix< signed char >((const SimpleEigen::Matrix< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar___sub__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  SimpleEigen::Matrix< signed char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator -",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator -",2,"SimpleEigen::Matrix< signed char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___sub",2,SWIGTYPE_p_SimpleEigen__MatrixT_signed_char_t);
  }
  
  result = (arg1)->operator -(*arg2);
  {
    SimpleEigen::Matrix< signed char > * resultptr = new SimpleEigen::Matrix< signed char >((const SimpleEigen::Matrix< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar___mul__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  SimpleEigen::Array< signed char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator *",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator *",2,"SimpleEigen::Array< signed char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___mul",2,SWIGTYPE_p_SimpleEigen__ArrayT_signed_char_t);
  }
  
  result = (arg1)->operator *(*arg2);
  {
    SimpleEigen::Array< signed char > * resultptr = new SimpleEigen::Array< signed char >((const SimpleEigen::Array< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar___mul__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar___mul__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar___mul__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int8Scalar___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int8Scalar___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int8_t >::operator *(SimpleEigen::Scalar< signed char > const &)\n"
    "    SimpleEigen::Scalar< int8_t >::operator *(signed char const &)\n"
    "    SimpleEigen::Scalar< int8_t >::operator *(SimpleEigen::RowVector< signed char > const &)\n"
    "    SimpleEigen::Scalar< int8_t >::operator *(SimpleEigen::ColVector< signed char > const &)\n"
    "    SimpleEigen::Scalar< int8_t >::operator *(SimpleEigen::Matrix< signed char > &)\n"
    "    SimpleEigen::Scalar< int8_t >::operator *(SimpleEigen::Array< signed char > &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Scalar___div__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  SimpleEigen::Array< signed char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator /",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator /",2,"SimpleEigen::Array< signed char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___div",2,SWIGTYPE_p_SimpleEigen__ArrayT_signed_char_t);
  }
  
  result = (arg1)->operator /(*arg2);
  {
    SimpleEigen::Array< signed char > * resultptr = new SimpleEigen::Array< signed char >((const SimpleEigen::Array< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar___div__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar___div__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar___div__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar___div__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int8Scalar___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int8Scalar___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int8_t >::operator /(SimpleEigen::Scalar< signed char > const &)\n"
    "    SimpleEigen::Scalar< int8_t >::operator /(signed char const &)\n"
    "    SimpleEigen::Scalar< int8_t >::operator /(SimpleEigen::RowVector< signed char > const &)\n"
    "    SimpleEigen::Scalar< int8_t >::operator /(SimpleEigen::ColVector< signed char > const &)\n"
    "    SimpleEigen::Scalar< int8_t >::operator /(SimpleEigen::Matrix< signed char > &)\n"
    "    SimpleEigen::Scalar< int8_t >::operator /(SimpleEigen::Array< signed char > &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Scalar___add__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  SimpleEigen::Array< signed char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator +",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator +",2,"SimpleEigen::Array< signed char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___add",2,SWIGTYPE_p_SimpleEigen__ArrayT_signed_char_t);
  }
  
  result = (arg1)->operator +(*arg2);
  {
    SimpleEigen::Array< signed char > * resultptr = new SimpleEigen::Array< signed char >((const SimpleEigen::Array< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar___add__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar___add__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar___add__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int8Scalar___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int8Scalar___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int8_t >::operator +(SimpleEigen::Scalar< signed char > const &)\n"
    "    SimpleEigen::Scalar< int8_t >::operator +(signed char const &)\n"
    "    SimpleEigen::Scalar< int8_t >::operator +(SimpleEigen::RowVector< signed char > const &)\n"
    "    SimpleEigen::Scalar< int8_t >::operator +(SimpleEigen::ColVector< signed char > const &)\n"
    "    SimpleEigen::Scalar< int8_t >::operator +(SimpleEigen::Matrix< signed char > &)\n"
    "    SimpleEigen::Scalar< int8_t >::operator +(SimpleEigen::Array< signed char > &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Scalar___sub__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  SimpleEigen::Array< signed char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator -",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::operator -",2,"SimpleEigen::Array< signed char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___sub",2,SWIGTYPE_p_SimpleEigen__ArrayT_signed_char_t);
  }
  
  result = (arg1)->operator -(*arg2);
  {
    SimpleEigen::Array< signed char > * resultptr = new SimpleEigen::Array< signed char >((const SimpleEigen::Array< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar___sub__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar___sub__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar___sub__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar___sub__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int8Scalar___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int8Scalar___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int8_t >::operator -(SimpleEigen::Scalar< signed char > const &)\n"
    "    SimpleEigen::Scalar< int8_t >::operator -(signed char const &)\n"
    "    SimpleEigen::Scalar< int8_t >::operator -(SimpleEigen::RowVector< signed char > const &)\n"
    "    SimpleEigen::Scalar< int8_t >::operator -(SimpleEigen::ColVector< signed char > const &)\n"
    "    SimpleEigen::Scalar< int8_t >::operator -(SimpleEigen::Matrix< signed char > &)\n"
    "    SimpleEigen::Scalar< int8_t >::operator -(SimpleEigen::Array< signed char > &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Scalar_get_value(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  signed char result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::get_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::get_value",1,"SimpleEigen::Scalar< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_get_value",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  result = (signed char)(arg1)->get_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_set_value(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::set_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::set_value",1,"SimpleEigen::Scalar< int8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::set_value",2,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_set_value",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  temp2=(signed char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->set_value((signed char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_abs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::abs",1,"SimpleEigen::Scalar< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_abs",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  result = (arg1)->abs();
  {
    SimpleEigen::Scalar< signed char > * resultptr = new SimpleEigen::Scalar< signed char >((const SimpleEigen::Scalar< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_fabs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< signed char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::fabs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::fabs",1,"SimpleEigen::Scalar< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_fabs",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  result = (arg1)->fabs();
  {
    SimpleEigen::Scalar< signed char > * resultptr = new SimpleEigen::Scalar< signed char >((const SimpleEigen::Scalar< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_print(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int8_t >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int8_t >::print",1,"SimpleEigen::Scalar< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_print",1,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int8Scalar(void *obj) {
SimpleEigen::Scalar< int8_t > *arg1 = (SimpleEigen::Scalar< int8_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int8Scalar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int8Scalar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int8Scalar_attributes[] = {
    { "val", _wrap_Int8Scalar_val_get, _wrap_Int8Scalar_val_set },
    {0,0,0}
};
static swig_lua_method swig_Int8Scalar_methods[]= {
    { "aplus", _wrap_Int8Scalar_aplus},
    { "aminus", _wrap_Int8Scalar_aminus},
    { "atimes", _wrap_Int8Scalar_atimes},
    { "adiv", _wrap_Int8Scalar_adiv},
    { "rowvector", _wrap_Int8Scalar_rowvector},
    { "colvector", _wrap_Int8Scalar_colvector},
    { "matrix", _wrap_Int8Scalar_matrix},
    { "array", _wrap_Int8Scalar_array},
    { "array2d", _wrap_Int8Scalar_array2d},
    { "__mul", _wrap_Int8Scalar___mul},
    { "__div", _wrap_Int8Scalar___div},
    { "__add", _wrap_Int8Scalar___add},
    { "__sub", _wrap_Int8Scalar___sub},
    { "get_value", _wrap_Int8Scalar_get_value},
    { "set_value", _wrap_Int8Scalar_set_value},
    { "abs", _wrap_Int8Scalar_abs},
    { "fabs", _wrap_Int8Scalar_fabs},
    { "print", _wrap_Int8Scalar_print},
    {0,0}
};
static swig_lua_method swig_Int8Scalar_meta[] = {
    { "__mul", _wrap_Int8Scalar___mul},
    { "__div", _wrap_Int8Scalar___div},
    { "__add", _wrap_Int8Scalar___add},
    { "__sub", _wrap_Int8Scalar___sub},
    {0,0}
};

static swig_lua_attribute swig_Int8Scalar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int8Scalar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int8Scalar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int8Scalar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int8Scalar_Sf_SwigStatic = {
    "Int8Scalar",
    swig_Int8Scalar_Sf_SwigStatic_methods,
    swig_Int8Scalar_Sf_SwigStatic_attributes,
    swig_Int8Scalar_Sf_SwigStatic_constants,
    swig_Int8Scalar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int8Scalar_bases[] = {0,0};
static const char *swig_Int8Scalar_base_names[] = {"SimpleEigen::Base *",0};
static swig_lua_class _wrap_class_Int8Scalar = { "Int8Scalar", "Int8Scalar", &SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,_proxy__wrap_new_Int8Scalar, swig_delete_Int8Scalar, swig_Int8Scalar_methods, swig_Int8Scalar_attributes, &swig_Int8Scalar_Sf_SwigStatic, swig_Int8Scalar_meta, swig_Int8Scalar_bases, swig_Int8Scalar_base_names };

static int _wrap_UInt8Scalar_val_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::val",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::val",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_val_set",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_val_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::val",1,"SimpleEigen::Scalar< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_val_get",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  result = (unsigned char) ((arg1)->val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Scalar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char *arg1 = 0 ;
  unsigned char temp1 ;
  SimpleEigen::Scalar< uint8_t > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::Scalar",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::Scalar",1,"unsigned char const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  temp1=(unsigned char)lua_tonumber(L,1); arg1=&temp1;
  result = (SimpleEigen::Scalar< uint8_t > *)new SimpleEigen::Scalar< uint8_t >((unsigned char const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Scalar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned char > *arg1 = 0 ;
  SimpleEigen::Scalar< uint8_t > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::Scalar",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::Scalar",1,"SimpleEigen::Scalar< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("new_UInt8Scalar",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  result = (SimpleEigen::Scalar< uint8_t > *)new SimpleEigen::Scalar< uint8_t >((SimpleEigen::Scalar< unsigned char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Scalar(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt8Scalar__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UInt8Scalar__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt8Scalar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint8_t >::Scalar(unsigned char const &)\n"
    "    SimpleEigen::Scalar< uint8_t >::Scalar(SimpleEigen::Scalar< unsigned char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Scalar___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  SimpleEigen::Scalar< unsigned char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator +",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator +",2,"SimpleEigen::Scalar< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___add",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::Scalar< unsigned char > const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned char > * resultptr = new SimpleEigen::Scalar< unsigned char >((const SimpleEigen::Scalar< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  SimpleEigen::Scalar< unsigned char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator -",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator -",2,"SimpleEigen::Scalar< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___sub",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::Scalar< unsigned char > const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned char > * resultptr = new SimpleEigen::Scalar< unsigned char >((const SimpleEigen::Scalar< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  SimpleEigen::Scalar< unsigned char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator *",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator *",2,"SimpleEigen::Scalar< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___mul",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::Scalar< unsigned char > const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned char > * resultptr = new SimpleEigen::Scalar< unsigned char >((const SimpleEigen::Scalar< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  SimpleEigen::Scalar< unsigned char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator /",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator /",2,"SimpleEigen::Scalar< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___div",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::Scalar< unsigned char > const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned char > * resultptr = new SimpleEigen::Scalar< unsigned char >((const SimpleEigen::Scalar< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator +",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator +",2,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator +((unsigned char const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned char > * resultptr = new SimpleEigen::Scalar< unsigned char >((const SimpleEigen::Scalar< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator -",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator -",2,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator -((unsigned char const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned char > * resultptr = new SimpleEigen::Scalar< unsigned char >((const SimpleEigen::Scalar< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator *",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator *",2,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator *((unsigned char const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned char > * resultptr = new SimpleEigen::Scalar< unsigned char >((const SimpleEigen::Scalar< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator /",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator /",2,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator /((unsigned char const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned char > * resultptr = new SimpleEigen::Scalar< unsigned char >((const SimpleEigen::Scalar< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_aplus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::aplus",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::aplus",2,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_aplus",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aplus((unsigned char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_aminus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::aminus",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::aminus",2,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_aminus",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aminus((unsigned char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_atimes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::atimes",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::atimes",2,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_atimes",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->atimes((unsigned char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_adiv__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::adiv",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::adiv",2,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_adiv",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->adiv((unsigned char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_aplus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  SimpleEigen::Scalar< unsigned char > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::aplus",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::aplus",2,"SimpleEigen::Scalar< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_aplus",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_aplus",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  (arg1)->aplus((SimpleEigen::Scalar< unsigned char > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_aplus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar_aplus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt8Scalar_aplus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt8Scalar_aplus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint8_t >::aplus(unsigned char const &)\n"
    "    SimpleEigen::Scalar< uint8_t >::aplus(SimpleEigen::Scalar< unsigned char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Scalar_aminus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  SimpleEigen::Scalar< unsigned char > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::aminus",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::aminus",2,"SimpleEigen::Scalar< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_aminus",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_aminus",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  (arg1)->aminus((SimpleEigen::Scalar< unsigned char > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_aminus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar_aminus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt8Scalar_aminus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt8Scalar_aminus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint8_t >::aminus(unsigned char const &)\n"
    "    SimpleEigen::Scalar< uint8_t >::aminus(SimpleEigen::Scalar< unsigned char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Scalar_atimes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  SimpleEigen::Scalar< unsigned char > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::atimes",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::atimes",2,"SimpleEigen::Scalar< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_atimes",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_atimes",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  (arg1)->atimes((SimpleEigen::Scalar< unsigned char > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_atimes(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar_atimes__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt8Scalar_atimes__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt8Scalar_atimes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint8_t >::atimes(unsigned char const &)\n"
    "    SimpleEigen::Scalar< uint8_t >::atimes(SimpleEigen::Scalar< unsigned char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Scalar_adiv__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  SimpleEigen::Scalar< unsigned char > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::adiv",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::adiv",2,"SimpleEigen::Scalar< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_adiv",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_adiv",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  (arg1)->adiv((SimpleEigen::Scalar< unsigned char > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_adiv(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar_adiv__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt8Scalar_adiv__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt8Scalar_adiv'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint8_t >::adiv(unsigned char const &)\n"
    "    SimpleEigen::Scalar< uint8_t >::adiv(SimpleEigen::Scalar< unsigned char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Scalar_rowvector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  SimpleEigen::RowVector< unsigned char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::rowvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::rowvector",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::rowvector",2,"SimpleEigen::RowVector< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_rowvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_rowvector",2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_char_t);
  }
  
  result = (arg1)->rowvector((SimpleEigen::RowVector< unsigned char > const &)*arg2);
  {
    SimpleEigen::RowVector< unsigned char > * resultptr = new SimpleEigen::RowVector< unsigned char >((const SimpleEigen::RowVector< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_colvector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  SimpleEigen::ColVector< unsigned char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::colvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::colvector",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::colvector",2,"SimpleEigen::ColVector< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_colvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_colvector",2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_char_t);
  }
  
  result = (arg1)->colvector((SimpleEigen::ColVector< unsigned char > const &)*arg2);
  {
    SimpleEigen::ColVector< unsigned char > * resultptr = new SimpleEigen::ColVector< unsigned char >((const SimpleEigen::ColVector< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  SimpleEigen::Matrix< unsigned char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::matrix",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::matrix",2,"SimpleEigen::Matrix< unsigned char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_matrix",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_matrix",2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_char_t);
  }
  
  result = (arg1)->matrix(*arg2);
  {
    SimpleEigen::Matrix< unsigned char > * resultptr = new SimpleEigen::Matrix< unsigned char >((const SimpleEigen::Matrix< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  SimpleEigen::Array< unsigned char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::array",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::array",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::array",2,"SimpleEigen::Array< unsigned char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_array",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_array",2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_char_t);
  }
  
  result = (arg1)->array(*arg2);
  {
    SimpleEigen::Array< unsigned char > * resultptr = new SimpleEigen::Array< unsigned char >((const SimpleEigen::Array< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_array2d__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  SimpleEigen::Array2D< unsigned char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array2D< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::array2d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::array2d",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::array2d",2,"SimpleEigen::Array2D< unsigned char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_array2d",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__Array2DT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_array2d",2,SWIGTYPE_p_SimpleEigen__Array2DT_unsigned_char_t);
  }
  
  result = (arg1)->array2d(*arg2);
  {
    SimpleEigen::Array2D< unsigned char > * resultptr = new SimpleEigen::Array2D< unsigned char >((const SimpleEigen::Array2D< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_rowvector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< SimpleEigen::RowVector< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::rowvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::rowvector",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::rowvector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_rowvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->rowvector(arg2);
  {
    SimpleEigen::RowVector< unsigned char > * resultptr = new SimpleEigen::RowVector< unsigned char >((const SimpleEigen::RowVector< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_rowvector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar_rowvector__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt8Scalar_rowvector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt8Scalar_rowvector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint8_t >::rowvector(SimpleEigen::RowVector< unsigned char > const &)\n"
    "    SimpleEigen::Scalar< uint8_t >::rowvector(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Scalar_colvector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< SimpleEigen::ColVector< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::colvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::colvector",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::colvector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_colvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->colvector(arg2);
  {
    SimpleEigen::ColVector< unsigned char > * resultptr = new SimpleEigen::ColVector< unsigned char >((const SimpleEigen::ColVector< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_colvector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar_colvector__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt8Scalar_colvector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt8Scalar_colvector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint8_t >::colvector(SimpleEigen::ColVector< unsigned char > const &)\n"
    "    SimpleEigen::Scalar< uint8_t >::colvector(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Scalar_matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SwigValueWrapper< SimpleEigen::Matrix< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::matrix",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::matrix",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::matrix",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::matrix",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_matrix",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->matrix(arg2,arg3);
  {
    SimpleEigen::Matrix< unsigned char > * resultptr = new SimpleEigen::Matrix< unsigned char >((const SimpleEigen::Matrix< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_matrix(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar_matrix__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_UInt8Scalar_matrix__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt8Scalar_matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint8_t >::matrix(SimpleEigen::Matrix< unsigned char > &)\n"
    "    SimpleEigen::Scalar< uint8_t >::matrix(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Scalar_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< SimpleEigen::Array< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::array",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::array",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::array",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_array",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->array(arg2);
  {
    SimpleEigen::Array< unsigned char > * resultptr = new SimpleEigen::Array< unsigned char >((const SimpleEigen::Array< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_array(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar_array__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt8Scalar_array__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt8Scalar_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint8_t >::array(SimpleEigen::Array< unsigned char > &)\n"
    "    SimpleEigen::Scalar< uint8_t >::array(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Scalar_array2d__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SwigValueWrapper< SimpleEigen::Array2D< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::array2d",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::array2d",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::array2d",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::array2d",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_array2d",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->array2d(arg2,arg3);
  {
    SimpleEigen::Array2D< unsigned char > * resultptr = new SimpleEigen::Array2D< unsigned char >((const SimpleEigen::Array2D< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_array2d(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar_array2d__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_UInt8Scalar_array2d__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt8Scalar_array2d'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint8_t >::array2d(SimpleEigen::Array2D< unsigned char > &)\n"
    "    SimpleEigen::Scalar< uint8_t >::array2d(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Scalar___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  SimpleEigen::RowVector< unsigned char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator *",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator *",2,"SimpleEigen::RowVector< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___mul",2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_char_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::RowVector< unsigned char > const &)*arg2);
  {
    SimpleEigen::RowVector< unsigned char > * resultptr = new SimpleEigen::RowVector< unsigned char >((const SimpleEigen::RowVector< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  SimpleEigen::RowVector< unsigned char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator /",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator /",2,"SimpleEigen::RowVector< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___div",2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_char_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::RowVector< unsigned char > const &)*arg2);
  {
    SimpleEigen::RowVector< unsigned char > * resultptr = new SimpleEigen::RowVector< unsigned char >((const SimpleEigen::RowVector< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  SimpleEigen::RowVector< unsigned char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator +",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator +",2,"SimpleEigen::RowVector< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___add",2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_char_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::RowVector< unsigned char > const &)*arg2);
  {
    SimpleEigen::RowVector< unsigned char > * resultptr = new SimpleEigen::RowVector< unsigned char >((const SimpleEigen::RowVector< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  SimpleEigen::RowVector< unsigned char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator -",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator -",2,"SimpleEigen::RowVector< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___sub",2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_char_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::RowVector< unsigned char > const &)*arg2);
  {
    SimpleEigen::RowVector< unsigned char > * resultptr = new SimpleEigen::RowVector< unsigned char >((const SimpleEigen::RowVector< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar___mul__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  SimpleEigen::ColVector< unsigned char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator *",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator *",2,"SimpleEigen::ColVector< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___mul",2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_char_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::ColVector< unsigned char > const &)*arg2);
  {
    SimpleEigen::ColVector< unsigned char > * resultptr = new SimpleEigen::ColVector< unsigned char >((const SimpleEigen::ColVector< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar___div__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  SimpleEigen::ColVector< unsigned char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator /",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator /",2,"SimpleEigen::ColVector< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___div",2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_char_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::ColVector< unsigned char > const &)*arg2);
  {
    SimpleEigen::ColVector< unsigned char > * resultptr = new SimpleEigen::ColVector< unsigned char >((const SimpleEigen::ColVector< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar___add__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  SimpleEigen::ColVector< unsigned char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator +",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator +",2,"SimpleEigen::ColVector< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___add",2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_char_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::ColVector< unsigned char > const &)*arg2);
  {
    SimpleEigen::ColVector< unsigned char > * resultptr = new SimpleEigen::ColVector< unsigned char >((const SimpleEigen::ColVector< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar___sub__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  SimpleEigen::ColVector< unsigned char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator -",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator -",2,"SimpleEigen::ColVector< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___sub",2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_char_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::ColVector< unsigned char > const &)*arg2);
  {
    SimpleEigen::ColVector< unsigned char > * resultptr = new SimpleEigen::ColVector< unsigned char >((const SimpleEigen::ColVector< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar___mul__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  SimpleEigen::Matrix< unsigned char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator *",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator *",2,"SimpleEigen::Matrix< unsigned char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___mul",2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_char_t);
  }
  
  result = (arg1)->operator *(*arg2);
  {
    SimpleEigen::Matrix< unsigned char > * resultptr = new SimpleEigen::Matrix< unsigned char >((const SimpleEigen::Matrix< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar___div__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  SimpleEigen::Matrix< unsigned char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator /",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator /",2,"SimpleEigen::Matrix< unsigned char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___div",2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_char_t);
  }
  
  result = (arg1)->operator /(*arg2);
  {
    SimpleEigen::Matrix< unsigned char > * resultptr = new SimpleEigen::Matrix< unsigned char >((const SimpleEigen::Matrix< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar___add__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  SimpleEigen::Matrix< unsigned char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator +",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator +",2,"SimpleEigen::Matrix< unsigned char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___add",2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_char_t);
  }
  
  result = (arg1)->operator +(*arg2);
  {
    SimpleEigen::Matrix< unsigned char > * resultptr = new SimpleEigen::Matrix< unsigned char >((const SimpleEigen::Matrix< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar___sub__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  SimpleEigen::Matrix< unsigned char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator -",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator -",2,"SimpleEigen::Matrix< unsigned char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___sub",2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_char_t);
  }
  
  result = (arg1)->operator -(*arg2);
  {
    SimpleEigen::Matrix< unsigned char > * resultptr = new SimpleEigen::Matrix< unsigned char >((const SimpleEigen::Matrix< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar___mul__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  SimpleEigen::Array< unsigned char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator *",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator *",2,"SimpleEigen::Array< unsigned char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___mul",2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_char_t);
  }
  
  result = (arg1)->operator *(*arg2);
  {
    SimpleEigen::Array< unsigned char > * resultptr = new SimpleEigen::Array< unsigned char >((const SimpleEigen::Array< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar___mul__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar___mul__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar___mul__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt8Scalar___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt8Scalar___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint8_t >::operator *(SimpleEigen::Scalar< unsigned char > const &)\n"
    "    SimpleEigen::Scalar< uint8_t >::operator *(unsigned char const &)\n"
    "    SimpleEigen::Scalar< uint8_t >::operator *(SimpleEigen::RowVector< unsigned char > const &)\n"
    "    SimpleEigen::Scalar< uint8_t >::operator *(SimpleEigen::ColVector< unsigned char > const &)\n"
    "    SimpleEigen::Scalar< uint8_t >::operator *(SimpleEigen::Matrix< unsigned char > &)\n"
    "    SimpleEigen::Scalar< uint8_t >::operator *(SimpleEigen::Array< unsigned char > &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Scalar___div__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  SimpleEigen::Array< unsigned char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator /",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator /",2,"SimpleEigen::Array< unsigned char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___div",2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_char_t);
  }
  
  result = (arg1)->operator /(*arg2);
  {
    SimpleEigen::Array< unsigned char > * resultptr = new SimpleEigen::Array< unsigned char >((const SimpleEigen::Array< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar___div__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar___div__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar___div__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar___div__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt8Scalar___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt8Scalar___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint8_t >::operator /(SimpleEigen::Scalar< unsigned char > const &)\n"
    "    SimpleEigen::Scalar< uint8_t >::operator /(unsigned char const &)\n"
    "    SimpleEigen::Scalar< uint8_t >::operator /(SimpleEigen::RowVector< unsigned char > const &)\n"
    "    SimpleEigen::Scalar< uint8_t >::operator /(SimpleEigen::ColVector< unsigned char > const &)\n"
    "    SimpleEigen::Scalar< uint8_t >::operator /(SimpleEigen::Matrix< unsigned char > &)\n"
    "    SimpleEigen::Scalar< uint8_t >::operator /(SimpleEigen::Array< unsigned char > &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Scalar___add__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  SimpleEigen::Array< unsigned char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator +",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator +",2,"SimpleEigen::Array< unsigned char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___add",2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_char_t);
  }
  
  result = (arg1)->operator +(*arg2);
  {
    SimpleEigen::Array< unsigned char > * resultptr = new SimpleEigen::Array< unsigned char >((const SimpleEigen::Array< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar___add__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar___add__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar___add__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt8Scalar___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt8Scalar___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint8_t >::operator +(SimpleEigen::Scalar< unsigned char > const &)\n"
    "    SimpleEigen::Scalar< uint8_t >::operator +(unsigned char const &)\n"
    "    SimpleEigen::Scalar< uint8_t >::operator +(SimpleEigen::RowVector< unsigned char > const &)\n"
    "    SimpleEigen::Scalar< uint8_t >::operator +(SimpleEigen::ColVector< unsigned char > const &)\n"
    "    SimpleEigen::Scalar< uint8_t >::operator +(SimpleEigen::Matrix< unsigned char > &)\n"
    "    SimpleEigen::Scalar< uint8_t >::operator +(SimpleEigen::Array< unsigned char > &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Scalar___sub__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  SimpleEigen::Array< unsigned char > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator -",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::operator -",2,"SimpleEigen::Array< unsigned char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___sub",2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_char_t);
  }
  
  result = (arg1)->operator -(*arg2);
  {
    SimpleEigen::Array< unsigned char > * resultptr = new SimpleEigen::Array< unsigned char >((const SimpleEigen::Array< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar___sub__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar___sub__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar___sub__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar___sub__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt8Scalar___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt8Scalar___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint8_t >::operator -(SimpleEigen::Scalar< unsigned char > const &)\n"
    "    SimpleEigen::Scalar< uint8_t >::operator -(unsigned char const &)\n"
    "    SimpleEigen::Scalar< uint8_t >::operator -(SimpleEigen::RowVector< unsigned char > const &)\n"
    "    SimpleEigen::Scalar< uint8_t >::operator -(SimpleEigen::ColVector< unsigned char > const &)\n"
    "    SimpleEigen::Scalar< uint8_t >::operator -(SimpleEigen::Matrix< unsigned char > &)\n"
    "    SimpleEigen::Scalar< uint8_t >::operator -(SimpleEigen::Array< unsigned char > &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Scalar_get_value(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::get_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::get_value",1,"SimpleEigen::Scalar< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_get_value",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  result = (unsigned char)(arg1)->get_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_set_value(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::set_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::set_value",1,"SimpleEigen::Scalar< uint8_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::set_value",2,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_set_value",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->set_value((unsigned char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_abs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::abs",1,"SimpleEigen::Scalar< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_abs",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  result = (arg1)->abs();
  {
    SimpleEigen::Scalar< unsigned char > * resultptr = new SimpleEigen::Scalar< unsigned char >((const SimpleEigen::Scalar< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_fabs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned char > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::fabs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::fabs",1,"SimpleEigen::Scalar< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_fabs",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  result = (arg1)->fabs();
  {
    SimpleEigen::Scalar< unsigned char > * resultptr = new SimpleEigen::Scalar< unsigned char >((const SimpleEigen::Scalar< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_print(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint8_t >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint8_t >::print",1,"SimpleEigen::Scalar< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_print",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt8Scalar(void *obj) {
SimpleEigen::Scalar< uint8_t > *arg1 = (SimpleEigen::Scalar< uint8_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt8Scalar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt8Scalar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt8Scalar_attributes[] = {
    { "val", _wrap_UInt8Scalar_val_get, _wrap_UInt8Scalar_val_set },
    {0,0,0}
};
static swig_lua_method swig_UInt8Scalar_methods[]= {
    { "aplus", _wrap_UInt8Scalar_aplus},
    { "aminus", _wrap_UInt8Scalar_aminus},
    { "atimes", _wrap_UInt8Scalar_atimes},
    { "adiv", _wrap_UInt8Scalar_adiv},
    { "rowvector", _wrap_UInt8Scalar_rowvector},
    { "colvector", _wrap_UInt8Scalar_colvector},
    { "matrix", _wrap_UInt8Scalar_matrix},
    { "array", _wrap_UInt8Scalar_array},
    { "array2d", _wrap_UInt8Scalar_array2d},
    { "__mul", _wrap_UInt8Scalar___mul},
    { "__div", _wrap_UInt8Scalar___div},
    { "__add", _wrap_UInt8Scalar___add},
    { "__sub", _wrap_UInt8Scalar___sub},
    { "get_value", _wrap_UInt8Scalar_get_value},
    { "set_value", _wrap_UInt8Scalar_set_value},
    { "abs", _wrap_UInt8Scalar_abs},
    { "fabs", _wrap_UInt8Scalar_fabs},
    { "print", _wrap_UInt8Scalar_print},
    {0,0}
};
static swig_lua_method swig_UInt8Scalar_meta[] = {
    { "__mul", _wrap_UInt8Scalar___mul},
    { "__div", _wrap_UInt8Scalar___div},
    { "__add", _wrap_UInt8Scalar___add},
    { "__sub", _wrap_UInt8Scalar___sub},
    {0,0}
};

static swig_lua_attribute swig_UInt8Scalar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt8Scalar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt8Scalar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt8Scalar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt8Scalar_Sf_SwigStatic = {
    "UInt8Scalar",
    swig_UInt8Scalar_Sf_SwigStatic_methods,
    swig_UInt8Scalar_Sf_SwigStatic_attributes,
    swig_UInt8Scalar_Sf_SwigStatic_constants,
    swig_UInt8Scalar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt8Scalar_bases[] = {0,0};
static const char *swig_UInt8Scalar_base_names[] = {"SimpleEigen::Base *",0};
static swig_lua_class _wrap_class_UInt8Scalar = { "UInt8Scalar", "UInt8Scalar", &SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,_proxy__wrap_new_UInt8Scalar, swig_delete_UInt8Scalar, swig_UInt8Scalar_methods, swig_UInt8Scalar_attributes, &swig_UInt8Scalar_Sf_SwigStatic, swig_UInt8Scalar_meta, swig_UInt8Scalar_bases, swig_UInt8Scalar_base_names };

static int _wrap_Int16Scalar_val_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::val",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::val",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_val_set",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_val_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  short result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::val",1,"SimpleEigen::Scalar< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_val_get",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  result = (short) ((arg1)->val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Scalar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  short *arg1 = 0 ;
  short temp1 ;
  SimpleEigen::Scalar< int16_t > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::Scalar",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::Scalar",1,"short const &");
  temp1=(short)lua_tonumber(L,1); arg1=&temp1;
  result = (SimpleEigen::Scalar< int16_t > *)new SimpleEigen::Scalar< int16_t >((short const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Scalar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< short > *arg1 = 0 ;
  SimpleEigen::Scalar< int16_t > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::Scalar",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::Scalar",1,"SimpleEigen::Scalar< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("new_Int16Scalar",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  result = (SimpleEigen::Scalar< int16_t > *)new SimpleEigen::Scalar< int16_t >((SimpleEigen::Scalar< short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Scalar(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int16Scalar__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Int16Scalar__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int16Scalar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int16_t >::Scalar(short const &)\n"
    "    SimpleEigen::Scalar< int16_t >::Scalar(SimpleEigen::Scalar< short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Scalar___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  SimpleEigen::Scalar< short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator +",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator +",2,"SimpleEigen::Scalar< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___add",2,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::Scalar< short > const &)*arg2);
  {
    SimpleEigen::Scalar< short > * resultptr = new SimpleEigen::Scalar< short >((const SimpleEigen::Scalar< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  SimpleEigen::Scalar< short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator -",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator -",2,"SimpleEigen::Scalar< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___sub",2,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::Scalar< short > const &)*arg2);
  {
    SimpleEigen::Scalar< short > * resultptr = new SimpleEigen::Scalar< short >((const SimpleEigen::Scalar< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  SimpleEigen::Scalar< short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator *",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator *",2,"SimpleEigen::Scalar< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___mul",2,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::Scalar< short > const &)*arg2);
  {
    SimpleEigen::Scalar< short > * resultptr = new SimpleEigen::Scalar< short >((const SimpleEigen::Scalar< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  SimpleEigen::Scalar< short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator /",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator /",2,"SimpleEigen::Scalar< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___div",2,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::Scalar< short > const &)*arg2);
  {
    SimpleEigen::Scalar< short > * resultptr = new SimpleEigen::Scalar< short >((const SimpleEigen::Scalar< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator +",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator +",2,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator +((short const &)*arg2);
  {
    SimpleEigen::Scalar< short > * resultptr = new SimpleEigen::Scalar< short >((const SimpleEigen::Scalar< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator -",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator -",2,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator -((short const &)*arg2);
  {
    SimpleEigen::Scalar< short > * resultptr = new SimpleEigen::Scalar< short >((const SimpleEigen::Scalar< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator *",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator *",2,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator *((short const &)*arg2);
  {
    SimpleEigen::Scalar< short > * resultptr = new SimpleEigen::Scalar< short >((const SimpleEigen::Scalar< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator /",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator /",2,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator /((short const &)*arg2);
  {
    SimpleEigen::Scalar< short > * resultptr = new SimpleEigen::Scalar< short >((const SimpleEigen::Scalar< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_aplus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::aplus",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::aplus",2,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_aplus",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aplus((short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_aminus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::aminus",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::aminus",2,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_aminus",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aminus((short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_atimes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::atimes",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::atimes",2,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_atimes",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->atimes((short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_adiv__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::adiv",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::adiv",2,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_adiv",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->adiv((short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_aplus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  SimpleEigen::Scalar< short > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::aplus",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::aplus",2,"SimpleEigen::Scalar< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_aplus",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_aplus",2,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  (arg1)->aplus((SimpleEigen::Scalar< short > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_aplus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar_aplus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int16Scalar_aplus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int16Scalar_aplus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int16_t >::aplus(short const &)\n"
    "    SimpleEigen::Scalar< int16_t >::aplus(SimpleEigen::Scalar< short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Scalar_aminus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  SimpleEigen::Scalar< short > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::aminus",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::aminus",2,"SimpleEigen::Scalar< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_aminus",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_aminus",2,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  (arg1)->aminus((SimpleEigen::Scalar< short > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_aminus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar_aminus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int16Scalar_aminus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int16Scalar_aminus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int16_t >::aminus(short const &)\n"
    "    SimpleEigen::Scalar< int16_t >::aminus(SimpleEigen::Scalar< short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Scalar_atimes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  SimpleEigen::Scalar< short > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::atimes",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::atimes",2,"SimpleEigen::Scalar< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_atimes",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_atimes",2,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  (arg1)->atimes((SimpleEigen::Scalar< short > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_atimes(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar_atimes__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int16Scalar_atimes__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int16Scalar_atimes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int16_t >::atimes(short const &)\n"
    "    SimpleEigen::Scalar< int16_t >::atimes(SimpleEigen::Scalar< short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Scalar_adiv__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  SimpleEigen::Scalar< short > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::adiv",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::adiv",2,"SimpleEigen::Scalar< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_adiv",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_adiv",2,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  (arg1)->adiv((SimpleEigen::Scalar< short > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_adiv(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar_adiv__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int16Scalar_adiv__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int16Scalar_adiv'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int16_t >::adiv(short const &)\n"
    "    SimpleEigen::Scalar< int16_t >::adiv(SimpleEigen::Scalar< short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Scalar_rowvector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  SimpleEigen::RowVector< short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::rowvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::rowvector",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::rowvector",2,"SimpleEigen::RowVector< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_rowvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_rowvector",2,SWIGTYPE_p_SimpleEigen__RowVectorT_short_t);
  }
  
  result = (arg1)->rowvector((SimpleEigen::RowVector< short > const &)*arg2);
  {
    SimpleEigen::RowVector< short > * resultptr = new SimpleEigen::RowVector< short >((const SimpleEigen::RowVector< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_colvector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  SimpleEigen::ColVector< short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::colvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::colvector",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::colvector",2,"SimpleEigen::ColVector< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_colvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_colvector",2,SWIGTYPE_p_SimpleEigen__ColVectorT_short_t);
  }
  
  result = (arg1)->colvector((SimpleEigen::ColVector< short > const &)*arg2);
  {
    SimpleEigen::ColVector< short > * resultptr = new SimpleEigen::ColVector< short >((const SimpleEigen::ColVector< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  SimpleEigen::Matrix< short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::matrix",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::matrix",2,"SimpleEigen::Matrix< short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_matrix",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_matrix",2,SWIGTYPE_p_SimpleEigen__MatrixT_short_t);
  }
  
  result = (arg1)->matrix(*arg2);
  {
    SimpleEigen::Matrix< short > * resultptr = new SimpleEigen::Matrix< short >((const SimpleEigen::Matrix< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  SimpleEigen::Array< short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::array",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::array",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::array",2,"SimpleEigen::Array< short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_array",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_array",2,SWIGTYPE_p_SimpleEigen__ArrayT_short_t);
  }
  
  result = (arg1)->array(*arg2);
  {
    SimpleEigen::Array< short > * resultptr = new SimpleEigen::Array< short >((const SimpleEigen::Array< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_array2d__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  SimpleEigen::Array2D< short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array2D< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::array2d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::array2d",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::array2d",2,"SimpleEigen::Array2D< short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_array2d",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__Array2DT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_array2d",2,SWIGTYPE_p_SimpleEigen__Array2DT_short_t);
  }
  
  result = (arg1)->array2d(*arg2);
  {
    SimpleEigen::Array2D< short > * resultptr = new SimpleEigen::Array2D< short >((const SimpleEigen::Array2D< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_rowvector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< SimpleEigen::RowVector< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::rowvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::rowvector",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::rowvector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_rowvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->rowvector(arg2);
  {
    SimpleEigen::RowVector< short > * resultptr = new SimpleEigen::RowVector< short >((const SimpleEigen::RowVector< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_rowvector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar_rowvector__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int16Scalar_rowvector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int16Scalar_rowvector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int16_t >::rowvector(SimpleEigen::RowVector< short > const &)\n"
    "    SimpleEigen::Scalar< int16_t >::rowvector(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Scalar_colvector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< SimpleEigen::ColVector< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::colvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::colvector",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::colvector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_colvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->colvector(arg2);
  {
    SimpleEigen::ColVector< short > * resultptr = new SimpleEigen::ColVector< short >((const SimpleEigen::ColVector< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_colvector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar_colvector__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int16Scalar_colvector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int16Scalar_colvector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int16_t >::colvector(SimpleEigen::ColVector< short > const &)\n"
    "    SimpleEigen::Scalar< int16_t >::colvector(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Scalar_matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SwigValueWrapper< SimpleEigen::Matrix< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::matrix",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::matrix",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::matrix",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::matrix",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_matrix",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->matrix(arg2,arg3);
  {
    SimpleEigen::Matrix< short > * resultptr = new SimpleEigen::Matrix< short >((const SimpleEigen::Matrix< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_matrix(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar_matrix__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Int16Scalar_matrix__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int16Scalar_matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int16_t >::matrix(SimpleEigen::Matrix< short > &)\n"
    "    SimpleEigen::Scalar< int16_t >::matrix(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Scalar_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< SimpleEigen::Array< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::array",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::array",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::array",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_array",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->array(arg2);
  {
    SimpleEigen::Array< short > * resultptr = new SimpleEigen::Array< short >((const SimpleEigen::Array< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_array(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar_array__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int16Scalar_array__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int16Scalar_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int16_t >::array(SimpleEigen::Array< short > &)\n"
    "    SimpleEigen::Scalar< int16_t >::array(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Scalar_array2d__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SwigValueWrapper< SimpleEigen::Array2D< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::array2d",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::array2d",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::array2d",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::array2d",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_array2d",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->array2d(arg2,arg3);
  {
    SimpleEigen::Array2D< short > * resultptr = new SimpleEigen::Array2D< short >((const SimpleEigen::Array2D< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_array2d(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar_array2d__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Int16Scalar_array2d__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int16Scalar_array2d'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int16_t >::array2d(SimpleEigen::Array2D< short > &)\n"
    "    SimpleEigen::Scalar< int16_t >::array2d(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Scalar___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  SimpleEigen::RowVector< short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator *",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator *",2,"SimpleEigen::RowVector< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___mul",2,SWIGTYPE_p_SimpleEigen__RowVectorT_short_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::RowVector< short > const &)*arg2);
  {
    SimpleEigen::RowVector< short > * resultptr = new SimpleEigen::RowVector< short >((const SimpleEigen::RowVector< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  SimpleEigen::RowVector< short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator /",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator /",2,"SimpleEigen::RowVector< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___div",2,SWIGTYPE_p_SimpleEigen__RowVectorT_short_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::RowVector< short > const &)*arg2);
  {
    SimpleEigen::RowVector< short > * resultptr = new SimpleEigen::RowVector< short >((const SimpleEigen::RowVector< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  SimpleEigen::RowVector< short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator +",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator +",2,"SimpleEigen::RowVector< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___add",2,SWIGTYPE_p_SimpleEigen__RowVectorT_short_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::RowVector< short > const &)*arg2);
  {
    SimpleEigen::RowVector< short > * resultptr = new SimpleEigen::RowVector< short >((const SimpleEigen::RowVector< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  SimpleEigen::RowVector< short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator -",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator -",2,"SimpleEigen::RowVector< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___sub",2,SWIGTYPE_p_SimpleEigen__RowVectorT_short_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::RowVector< short > const &)*arg2);
  {
    SimpleEigen::RowVector< short > * resultptr = new SimpleEigen::RowVector< short >((const SimpleEigen::RowVector< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar___mul__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  SimpleEigen::ColVector< short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator *",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator *",2,"SimpleEigen::ColVector< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___mul",2,SWIGTYPE_p_SimpleEigen__ColVectorT_short_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::ColVector< short > const &)*arg2);
  {
    SimpleEigen::ColVector< short > * resultptr = new SimpleEigen::ColVector< short >((const SimpleEigen::ColVector< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar___div__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  SimpleEigen::ColVector< short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator /",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator /",2,"SimpleEigen::ColVector< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___div",2,SWIGTYPE_p_SimpleEigen__ColVectorT_short_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::ColVector< short > const &)*arg2);
  {
    SimpleEigen::ColVector< short > * resultptr = new SimpleEigen::ColVector< short >((const SimpleEigen::ColVector< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar___add__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  SimpleEigen::ColVector< short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator +",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator +",2,"SimpleEigen::ColVector< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___add",2,SWIGTYPE_p_SimpleEigen__ColVectorT_short_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::ColVector< short > const &)*arg2);
  {
    SimpleEigen::ColVector< short > * resultptr = new SimpleEigen::ColVector< short >((const SimpleEigen::ColVector< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar___sub__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  SimpleEigen::ColVector< short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator -",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator -",2,"SimpleEigen::ColVector< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___sub",2,SWIGTYPE_p_SimpleEigen__ColVectorT_short_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::ColVector< short > const &)*arg2);
  {
    SimpleEigen::ColVector< short > * resultptr = new SimpleEigen::ColVector< short >((const SimpleEigen::ColVector< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar___mul__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  SimpleEigen::Matrix< short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator *",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator *",2,"SimpleEigen::Matrix< short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___mul",2,SWIGTYPE_p_SimpleEigen__MatrixT_short_t);
  }
  
  result = (arg1)->operator *(*arg2);
  {
    SimpleEigen::Matrix< short > * resultptr = new SimpleEigen::Matrix< short >((const SimpleEigen::Matrix< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar___div__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  SimpleEigen::Matrix< short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator /",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator /",2,"SimpleEigen::Matrix< short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___div",2,SWIGTYPE_p_SimpleEigen__MatrixT_short_t);
  }
  
  result = (arg1)->operator /(*arg2);
  {
    SimpleEigen::Matrix< short > * resultptr = new SimpleEigen::Matrix< short >((const SimpleEigen::Matrix< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar___add__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  SimpleEigen::Matrix< short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator +",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator +",2,"SimpleEigen::Matrix< short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___add",2,SWIGTYPE_p_SimpleEigen__MatrixT_short_t);
  }
  
  result = (arg1)->operator +(*arg2);
  {
    SimpleEigen::Matrix< short > * resultptr = new SimpleEigen::Matrix< short >((const SimpleEigen::Matrix< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar___sub__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  SimpleEigen::Matrix< short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator -",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator -",2,"SimpleEigen::Matrix< short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___sub",2,SWIGTYPE_p_SimpleEigen__MatrixT_short_t);
  }
  
  result = (arg1)->operator -(*arg2);
  {
    SimpleEigen::Matrix< short > * resultptr = new SimpleEigen::Matrix< short >((const SimpleEigen::Matrix< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar___mul__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  SimpleEigen::Array< short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator *",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator *",2,"SimpleEigen::Array< short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___mul",2,SWIGTYPE_p_SimpleEigen__ArrayT_short_t);
  }
  
  result = (arg1)->operator *(*arg2);
  {
    SimpleEigen::Array< short > * resultptr = new SimpleEigen::Array< short >((const SimpleEigen::Array< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar___mul__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar___mul__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar___mul__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int16Scalar___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int16Scalar___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int16_t >::operator *(SimpleEigen::Scalar< short > const &)\n"
    "    SimpleEigen::Scalar< int16_t >::operator *(short const &)\n"
    "    SimpleEigen::Scalar< int16_t >::operator *(SimpleEigen::RowVector< short > const &)\n"
    "    SimpleEigen::Scalar< int16_t >::operator *(SimpleEigen::ColVector< short > const &)\n"
    "    SimpleEigen::Scalar< int16_t >::operator *(SimpleEigen::Matrix< short > &)\n"
    "    SimpleEigen::Scalar< int16_t >::operator *(SimpleEigen::Array< short > &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Scalar___div__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  SimpleEigen::Array< short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator /",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator /",2,"SimpleEigen::Array< short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___div",2,SWIGTYPE_p_SimpleEigen__ArrayT_short_t);
  }
  
  result = (arg1)->operator /(*arg2);
  {
    SimpleEigen::Array< short > * resultptr = new SimpleEigen::Array< short >((const SimpleEigen::Array< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar___div__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar___div__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar___div__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar___div__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int16Scalar___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int16Scalar___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int16_t >::operator /(SimpleEigen::Scalar< short > const &)\n"
    "    SimpleEigen::Scalar< int16_t >::operator /(short const &)\n"
    "    SimpleEigen::Scalar< int16_t >::operator /(SimpleEigen::RowVector< short > const &)\n"
    "    SimpleEigen::Scalar< int16_t >::operator /(SimpleEigen::ColVector< short > const &)\n"
    "    SimpleEigen::Scalar< int16_t >::operator /(SimpleEigen::Matrix< short > &)\n"
    "    SimpleEigen::Scalar< int16_t >::operator /(SimpleEigen::Array< short > &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Scalar___add__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  SimpleEigen::Array< short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator +",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator +",2,"SimpleEigen::Array< short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___add",2,SWIGTYPE_p_SimpleEigen__ArrayT_short_t);
  }
  
  result = (arg1)->operator +(*arg2);
  {
    SimpleEigen::Array< short > * resultptr = new SimpleEigen::Array< short >((const SimpleEigen::Array< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar___add__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar___add__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar___add__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int16Scalar___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int16Scalar___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int16_t >::operator +(SimpleEigen::Scalar< short > const &)\n"
    "    SimpleEigen::Scalar< int16_t >::operator +(short const &)\n"
    "    SimpleEigen::Scalar< int16_t >::operator +(SimpleEigen::RowVector< short > const &)\n"
    "    SimpleEigen::Scalar< int16_t >::operator +(SimpleEigen::ColVector< short > const &)\n"
    "    SimpleEigen::Scalar< int16_t >::operator +(SimpleEigen::Matrix< short > &)\n"
    "    SimpleEigen::Scalar< int16_t >::operator +(SimpleEigen::Array< short > &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Scalar___sub__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  SimpleEigen::Array< short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator -",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::operator -",2,"SimpleEigen::Array< short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___sub",2,SWIGTYPE_p_SimpleEigen__ArrayT_short_t);
  }
  
  result = (arg1)->operator -(*arg2);
  {
    SimpleEigen::Array< short > * resultptr = new SimpleEigen::Array< short >((const SimpleEigen::Array< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar___sub__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar___sub__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar___sub__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar___sub__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int16Scalar___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int16Scalar___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int16_t >::operator -(SimpleEigen::Scalar< short > const &)\n"
    "    SimpleEigen::Scalar< int16_t >::operator -(short const &)\n"
    "    SimpleEigen::Scalar< int16_t >::operator -(SimpleEigen::RowVector< short > const &)\n"
    "    SimpleEigen::Scalar< int16_t >::operator -(SimpleEigen::ColVector< short > const &)\n"
    "    SimpleEigen::Scalar< int16_t >::operator -(SimpleEigen::Matrix< short > &)\n"
    "    SimpleEigen::Scalar< int16_t >::operator -(SimpleEigen::Array< short > &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Scalar_get_value(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  short result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::get_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::get_value",1,"SimpleEigen::Scalar< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_get_value",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  result = (short)(arg1)->get_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_set_value(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::set_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::set_value",1,"SimpleEigen::Scalar< int16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::set_value",2,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_set_value",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->set_value((short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_abs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::abs",1,"SimpleEigen::Scalar< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_abs",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  result = (arg1)->abs();
  {
    SimpleEigen::Scalar< short > * resultptr = new SimpleEigen::Scalar< short >((const SimpleEigen::Scalar< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_fabs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::fabs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::fabs",1,"SimpleEigen::Scalar< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_fabs",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  result = (arg1)->fabs();
  {
    SimpleEigen::Scalar< short > * resultptr = new SimpleEigen::Scalar< short >((const SimpleEigen::Scalar< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_print(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int16_t >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int16_t >::print",1,"SimpleEigen::Scalar< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_print",1,SWIGTYPE_p_SimpleEigen__ScalarT_short_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int16Scalar(void *obj) {
SimpleEigen::Scalar< int16_t > *arg1 = (SimpleEigen::Scalar< int16_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int16Scalar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int16Scalar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int16Scalar_attributes[] = {
    { "val", _wrap_Int16Scalar_val_get, _wrap_Int16Scalar_val_set },
    {0,0,0}
};
static swig_lua_method swig_Int16Scalar_methods[]= {
    { "aplus", _wrap_Int16Scalar_aplus},
    { "aminus", _wrap_Int16Scalar_aminus},
    { "atimes", _wrap_Int16Scalar_atimes},
    { "adiv", _wrap_Int16Scalar_adiv},
    { "rowvector", _wrap_Int16Scalar_rowvector},
    { "colvector", _wrap_Int16Scalar_colvector},
    { "matrix", _wrap_Int16Scalar_matrix},
    { "array", _wrap_Int16Scalar_array},
    { "array2d", _wrap_Int16Scalar_array2d},
    { "__mul", _wrap_Int16Scalar___mul},
    { "__div", _wrap_Int16Scalar___div},
    { "__add", _wrap_Int16Scalar___add},
    { "__sub", _wrap_Int16Scalar___sub},
    { "get_value", _wrap_Int16Scalar_get_value},
    { "set_value", _wrap_Int16Scalar_set_value},
    { "abs", _wrap_Int16Scalar_abs},
    { "fabs", _wrap_Int16Scalar_fabs},
    { "print", _wrap_Int16Scalar_print},
    {0,0}
};
static swig_lua_method swig_Int16Scalar_meta[] = {
    { "__mul", _wrap_Int16Scalar___mul},
    { "__div", _wrap_Int16Scalar___div},
    { "__add", _wrap_Int16Scalar___add},
    { "__sub", _wrap_Int16Scalar___sub},
    {0,0}
};

static swig_lua_attribute swig_Int16Scalar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int16Scalar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int16Scalar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int16Scalar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int16Scalar_Sf_SwigStatic = {
    "Int16Scalar",
    swig_Int16Scalar_Sf_SwigStatic_methods,
    swig_Int16Scalar_Sf_SwigStatic_attributes,
    swig_Int16Scalar_Sf_SwigStatic_constants,
    swig_Int16Scalar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int16Scalar_bases[] = {0,0};
static const char *swig_Int16Scalar_base_names[] = {"SimpleEigen::Base *",0};
static swig_lua_class _wrap_class_Int16Scalar = { "Int16Scalar", "Int16Scalar", &SWIGTYPE_p_SimpleEigen__ScalarT_short_t,_proxy__wrap_new_Int16Scalar, swig_delete_Int16Scalar, swig_Int16Scalar_methods, swig_Int16Scalar_attributes, &swig_Int16Scalar_Sf_SwigStatic, swig_Int16Scalar_meta, swig_Int16Scalar_bases, swig_Int16Scalar_base_names };

static int _wrap_UInt16Scalar_val_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  unsigned short arg2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::val",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::val",2,"unsigned short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_val_set",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned short)lua_tonumber(L, 2);
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_val_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::val",1,"SimpleEigen::Scalar< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_val_get",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  result = (unsigned short) ((arg1)->val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Scalar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  unsigned short *arg1 = 0 ;
  unsigned short temp1 ;
  SimpleEigen::Scalar< uint16_t > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::Scalar",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::Scalar",1,"unsigned short const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  temp1=(unsigned short)lua_tonumber(L,1); arg1=&temp1;
  result = (SimpleEigen::Scalar< uint16_t > *)new SimpleEigen::Scalar< uint16_t >((unsigned short const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Scalar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned short > *arg1 = 0 ;
  SimpleEigen::Scalar< uint16_t > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::Scalar",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::Scalar",1,"SimpleEigen::Scalar< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("new_UInt16Scalar",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  result = (SimpleEigen::Scalar< uint16_t > *)new SimpleEigen::Scalar< uint16_t >((SimpleEigen::Scalar< unsigned short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Scalar(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt16Scalar__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UInt16Scalar__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt16Scalar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint16_t >::Scalar(unsigned short const &)\n"
    "    SimpleEigen::Scalar< uint16_t >::Scalar(SimpleEigen::Scalar< unsigned short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Scalar___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  SimpleEigen::Scalar< unsigned short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator +",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator +",2,"SimpleEigen::Scalar< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___add",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::Scalar< unsigned short > const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned short > * resultptr = new SimpleEigen::Scalar< unsigned short >((const SimpleEigen::Scalar< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  SimpleEigen::Scalar< unsigned short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator -",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator -",2,"SimpleEigen::Scalar< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___sub",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::Scalar< unsigned short > const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned short > * resultptr = new SimpleEigen::Scalar< unsigned short >((const SimpleEigen::Scalar< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  SimpleEigen::Scalar< unsigned short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator *",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator *",2,"SimpleEigen::Scalar< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___mul",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::Scalar< unsigned short > const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned short > * resultptr = new SimpleEigen::Scalar< unsigned short >((const SimpleEigen::Scalar< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  SimpleEigen::Scalar< unsigned short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator /",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator /",2,"SimpleEigen::Scalar< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___div",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::Scalar< unsigned short > const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned short > * resultptr = new SimpleEigen::Scalar< unsigned short >((const SimpleEigen::Scalar< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator +",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator +",2,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned short)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator +((unsigned short const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned short > * resultptr = new SimpleEigen::Scalar< unsigned short >((const SimpleEigen::Scalar< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator -",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator -",2,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned short)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator -((unsigned short const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned short > * resultptr = new SimpleEigen::Scalar< unsigned short >((const SimpleEigen::Scalar< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator *",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator *",2,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned short)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator *((unsigned short const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned short > * resultptr = new SimpleEigen::Scalar< unsigned short >((const SimpleEigen::Scalar< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator /",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator /",2,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned short)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator /((unsigned short const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned short > * resultptr = new SimpleEigen::Scalar< unsigned short >((const SimpleEigen::Scalar< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_aplus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::aplus",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::aplus",2,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_aplus",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aplus((unsigned short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_aminus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::aminus",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::aminus",2,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_aminus",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aminus((unsigned short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_atimes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::atimes",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::atimes",2,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_atimes",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->atimes((unsigned short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_adiv__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::adiv",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::adiv",2,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_adiv",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->adiv((unsigned short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_aplus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  SimpleEigen::Scalar< unsigned short > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::aplus",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::aplus",2,"SimpleEigen::Scalar< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_aplus",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_aplus",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  (arg1)->aplus((SimpleEigen::Scalar< unsigned short > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_aplus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar_aplus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt16Scalar_aplus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt16Scalar_aplus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint16_t >::aplus(unsigned short const &)\n"
    "    SimpleEigen::Scalar< uint16_t >::aplus(SimpleEigen::Scalar< unsigned short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Scalar_aminus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  SimpleEigen::Scalar< unsigned short > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::aminus",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::aminus",2,"SimpleEigen::Scalar< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_aminus",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_aminus",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  (arg1)->aminus((SimpleEigen::Scalar< unsigned short > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_aminus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar_aminus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt16Scalar_aminus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt16Scalar_aminus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint16_t >::aminus(unsigned short const &)\n"
    "    SimpleEigen::Scalar< uint16_t >::aminus(SimpleEigen::Scalar< unsigned short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Scalar_atimes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  SimpleEigen::Scalar< unsigned short > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::atimes",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::atimes",2,"SimpleEigen::Scalar< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_atimes",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_atimes",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  (arg1)->atimes((SimpleEigen::Scalar< unsigned short > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_atimes(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar_atimes__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt16Scalar_atimes__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt16Scalar_atimes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint16_t >::atimes(unsigned short const &)\n"
    "    SimpleEigen::Scalar< uint16_t >::atimes(SimpleEigen::Scalar< unsigned short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Scalar_adiv__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  SimpleEigen::Scalar< unsigned short > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::adiv",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::adiv",2,"SimpleEigen::Scalar< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_adiv",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_adiv",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  (arg1)->adiv((SimpleEigen::Scalar< unsigned short > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_adiv(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar_adiv__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt16Scalar_adiv__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt16Scalar_adiv'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint16_t >::adiv(unsigned short const &)\n"
    "    SimpleEigen::Scalar< uint16_t >::adiv(SimpleEigen::Scalar< unsigned short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Scalar_rowvector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  SimpleEigen::RowVector< unsigned short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::rowvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::rowvector",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::rowvector",2,"SimpleEigen::RowVector< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_rowvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_rowvector",2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_short_t);
  }
  
  result = (arg1)->rowvector((SimpleEigen::RowVector< unsigned short > const &)*arg2);
  {
    SimpleEigen::RowVector< unsigned short > * resultptr = new SimpleEigen::RowVector< unsigned short >((const SimpleEigen::RowVector< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_colvector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  SimpleEigen::ColVector< unsigned short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::colvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::colvector",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::colvector",2,"SimpleEigen::ColVector< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_colvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_colvector",2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_short_t);
  }
  
  result = (arg1)->colvector((SimpleEigen::ColVector< unsigned short > const &)*arg2);
  {
    SimpleEigen::ColVector< unsigned short > * resultptr = new SimpleEigen::ColVector< unsigned short >((const SimpleEigen::ColVector< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  SimpleEigen::Matrix< unsigned short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::matrix",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::matrix",2,"SimpleEigen::Matrix< unsigned short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_matrix",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_matrix",2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_short_t);
  }
  
  result = (arg1)->matrix(*arg2);
  {
    SimpleEigen::Matrix< unsigned short > * resultptr = new SimpleEigen::Matrix< unsigned short >((const SimpleEigen::Matrix< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  SimpleEigen::Array< unsigned short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::array",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::array",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::array",2,"SimpleEigen::Array< unsigned short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_array",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_array",2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_short_t);
  }
  
  result = (arg1)->array(*arg2);
  {
    SimpleEigen::Array< unsigned short > * resultptr = new SimpleEigen::Array< unsigned short >((const SimpleEigen::Array< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_array2d__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  SimpleEigen::Array2D< unsigned short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array2D< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::array2d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::array2d",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::array2d",2,"SimpleEigen::Array2D< unsigned short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_array2d",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__Array2DT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_array2d",2,SWIGTYPE_p_SimpleEigen__Array2DT_unsigned_short_t);
  }
  
  result = (arg1)->array2d(*arg2);
  {
    SimpleEigen::Array2D< unsigned short > * resultptr = new SimpleEigen::Array2D< unsigned short >((const SimpleEigen::Array2D< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_rowvector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< SimpleEigen::RowVector< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::rowvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::rowvector",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::rowvector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_rowvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->rowvector(arg2);
  {
    SimpleEigen::RowVector< unsigned short > * resultptr = new SimpleEigen::RowVector< unsigned short >((const SimpleEigen::RowVector< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_rowvector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar_rowvector__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt16Scalar_rowvector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt16Scalar_rowvector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint16_t >::rowvector(SimpleEigen::RowVector< unsigned short > const &)\n"
    "    SimpleEigen::Scalar< uint16_t >::rowvector(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Scalar_colvector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< SimpleEigen::ColVector< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::colvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::colvector",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::colvector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_colvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->colvector(arg2);
  {
    SimpleEigen::ColVector< unsigned short > * resultptr = new SimpleEigen::ColVector< unsigned short >((const SimpleEigen::ColVector< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_colvector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar_colvector__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt16Scalar_colvector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt16Scalar_colvector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint16_t >::colvector(SimpleEigen::ColVector< unsigned short > const &)\n"
    "    SimpleEigen::Scalar< uint16_t >::colvector(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Scalar_matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SwigValueWrapper< SimpleEigen::Matrix< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::matrix",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::matrix",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::matrix",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::matrix",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_matrix",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->matrix(arg2,arg3);
  {
    SimpleEigen::Matrix< unsigned short > * resultptr = new SimpleEigen::Matrix< unsigned short >((const SimpleEigen::Matrix< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_matrix(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar_matrix__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_UInt16Scalar_matrix__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt16Scalar_matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint16_t >::matrix(SimpleEigen::Matrix< unsigned short > &)\n"
    "    SimpleEigen::Scalar< uint16_t >::matrix(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Scalar_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< SimpleEigen::Array< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::array",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::array",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::array",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_array",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->array(arg2);
  {
    SimpleEigen::Array< unsigned short > * resultptr = new SimpleEigen::Array< unsigned short >((const SimpleEigen::Array< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_array(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar_array__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt16Scalar_array__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt16Scalar_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint16_t >::array(SimpleEigen::Array< unsigned short > &)\n"
    "    SimpleEigen::Scalar< uint16_t >::array(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Scalar_array2d__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SwigValueWrapper< SimpleEigen::Array2D< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::array2d",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::array2d",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::array2d",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::array2d",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_array2d",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->array2d(arg2,arg3);
  {
    SimpleEigen::Array2D< unsigned short > * resultptr = new SimpleEigen::Array2D< unsigned short >((const SimpleEigen::Array2D< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_array2d(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar_array2d__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_UInt16Scalar_array2d__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt16Scalar_array2d'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint16_t >::array2d(SimpleEigen::Array2D< unsigned short > &)\n"
    "    SimpleEigen::Scalar< uint16_t >::array2d(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Scalar___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  SimpleEigen::RowVector< unsigned short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator *",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator *",2,"SimpleEigen::RowVector< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___mul",2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_short_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::RowVector< unsigned short > const &)*arg2);
  {
    SimpleEigen::RowVector< unsigned short > * resultptr = new SimpleEigen::RowVector< unsigned short >((const SimpleEigen::RowVector< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  SimpleEigen::RowVector< unsigned short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator /",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator /",2,"SimpleEigen::RowVector< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___div",2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_short_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::RowVector< unsigned short > const &)*arg2);
  {
    SimpleEigen::RowVector< unsigned short > * resultptr = new SimpleEigen::RowVector< unsigned short >((const SimpleEigen::RowVector< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  SimpleEigen::RowVector< unsigned short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator +",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator +",2,"SimpleEigen::RowVector< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___add",2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_short_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::RowVector< unsigned short > const &)*arg2);
  {
    SimpleEigen::RowVector< unsigned short > * resultptr = new SimpleEigen::RowVector< unsigned short >((const SimpleEigen::RowVector< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  SimpleEigen::RowVector< unsigned short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator -",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator -",2,"SimpleEigen::RowVector< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___sub",2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_short_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::RowVector< unsigned short > const &)*arg2);
  {
    SimpleEigen::RowVector< unsigned short > * resultptr = new SimpleEigen::RowVector< unsigned short >((const SimpleEigen::RowVector< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar___mul__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  SimpleEigen::ColVector< unsigned short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator *",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator *",2,"SimpleEigen::ColVector< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___mul",2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_short_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::ColVector< unsigned short > const &)*arg2);
  {
    SimpleEigen::ColVector< unsigned short > * resultptr = new SimpleEigen::ColVector< unsigned short >((const SimpleEigen::ColVector< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar___div__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  SimpleEigen::ColVector< unsigned short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator /",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator /",2,"SimpleEigen::ColVector< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___div",2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_short_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::ColVector< unsigned short > const &)*arg2);
  {
    SimpleEigen::ColVector< unsigned short > * resultptr = new SimpleEigen::ColVector< unsigned short >((const SimpleEigen::ColVector< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar___add__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  SimpleEigen::ColVector< unsigned short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator +",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator +",2,"SimpleEigen::ColVector< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___add",2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_short_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::ColVector< unsigned short > const &)*arg2);
  {
    SimpleEigen::ColVector< unsigned short > * resultptr = new SimpleEigen::ColVector< unsigned short >((const SimpleEigen::ColVector< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar___sub__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  SimpleEigen::ColVector< unsigned short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator -",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator -",2,"SimpleEigen::ColVector< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___sub",2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_short_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::ColVector< unsigned short > const &)*arg2);
  {
    SimpleEigen::ColVector< unsigned short > * resultptr = new SimpleEigen::ColVector< unsigned short >((const SimpleEigen::ColVector< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar___mul__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  SimpleEigen::Matrix< unsigned short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator *",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator *",2,"SimpleEigen::Matrix< unsigned short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___mul",2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_short_t);
  }
  
  result = (arg1)->operator *(*arg2);
  {
    SimpleEigen::Matrix< unsigned short > * resultptr = new SimpleEigen::Matrix< unsigned short >((const SimpleEigen::Matrix< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar___div__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  SimpleEigen::Matrix< unsigned short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator /",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator /",2,"SimpleEigen::Matrix< unsigned short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___div",2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_short_t);
  }
  
  result = (arg1)->operator /(*arg2);
  {
    SimpleEigen::Matrix< unsigned short > * resultptr = new SimpleEigen::Matrix< unsigned short >((const SimpleEigen::Matrix< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar___add__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  SimpleEigen::Matrix< unsigned short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator +",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator +",2,"SimpleEigen::Matrix< unsigned short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___add",2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_short_t);
  }
  
  result = (arg1)->operator +(*arg2);
  {
    SimpleEigen::Matrix< unsigned short > * resultptr = new SimpleEigen::Matrix< unsigned short >((const SimpleEigen::Matrix< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar___sub__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  SimpleEigen::Matrix< unsigned short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator -",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator -",2,"SimpleEigen::Matrix< unsigned short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___sub",2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_short_t);
  }
  
  result = (arg1)->operator -(*arg2);
  {
    SimpleEigen::Matrix< unsigned short > * resultptr = new SimpleEigen::Matrix< unsigned short >((const SimpleEigen::Matrix< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar___mul__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  SimpleEigen::Array< unsigned short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator *",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator *",2,"SimpleEigen::Array< unsigned short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___mul",2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_short_t);
  }
  
  result = (arg1)->operator *(*arg2);
  {
    SimpleEigen::Array< unsigned short > * resultptr = new SimpleEigen::Array< unsigned short >((const SimpleEigen::Array< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar___mul__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar___mul__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar___mul__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt16Scalar___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt16Scalar___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint16_t >::operator *(SimpleEigen::Scalar< unsigned short > const &)\n"
    "    SimpleEigen::Scalar< uint16_t >::operator *(unsigned short const &)\n"
    "    SimpleEigen::Scalar< uint16_t >::operator *(SimpleEigen::RowVector< unsigned short > const &)\n"
    "    SimpleEigen::Scalar< uint16_t >::operator *(SimpleEigen::ColVector< unsigned short > const &)\n"
    "    SimpleEigen::Scalar< uint16_t >::operator *(SimpleEigen::Matrix< unsigned short > &)\n"
    "    SimpleEigen::Scalar< uint16_t >::operator *(SimpleEigen::Array< unsigned short > &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Scalar___div__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  SimpleEigen::Array< unsigned short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator /",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator /",2,"SimpleEigen::Array< unsigned short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___div",2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_short_t);
  }
  
  result = (arg1)->operator /(*arg2);
  {
    SimpleEigen::Array< unsigned short > * resultptr = new SimpleEigen::Array< unsigned short >((const SimpleEigen::Array< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar___div__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar___div__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar___div__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar___div__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt16Scalar___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt16Scalar___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint16_t >::operator /(SimpleEigen::Scalar< unsigned short > const &)\n"
    "    SimpleEigen::Scalar< uint16_t >::operator /(unsigned short const &)\n"
    "    SimpleEigen::Scalar< uint16_t >::operator /(SimpleEigen::RowVector< unsigned short > const &)\n"
    "    SimpleEigen::Scalar< uint16_t >::operator /(SimpleEigen::ColVector< unsigned short > const &)\n"
    "    SimpleEigen::Scalar< uint16_t >::operator /(SimpleEigen::Matrix< unsigned short > &)\n"
    "    SimpleEigen::Scalar< uint16_t >::operator /(SimpleEigen::Array< unsigned short > &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Scalar___add__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  SimpleEigen::Array< unsigned short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator +",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator +",2,"SimpleEigen::Array< unsigned short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___add",2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_short_t);
  }
  
  result = (arg1)->operator +(*arg2);
  {
    SimpleEigen::Array< unsigned short > * resultptr = new SimpleEigen::Array< unsigned short >((const SimpleEigen::Array< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar___add__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar___add__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar___add__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt16Scalar___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt16Scalar___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint16_t >::operator +(SimpleEigen::Scalar< unsigned short > const &)\n"
    "    SimpleEigen::Scalar< uint16_t >::operator +(unsigned short const &)\n"
    "    SimpleEigen::Scalar< uint16_t >::operator +(SimpleEigen::RowVector< unsigned short > const &)\n"
    "    SimpleEigen::Scalar< uint16_t >::operator +(SimpleEigen::ColVector< unsigned short > const &)\n"
    "    SimpleEigen::Scalar< uint16_t >::operator +(SimpleEigen::Matrix< unsigned short > &)\n"
    "    SimpleEigen::Scalar< uint16_t >::operator +(SimpleEigen::Array< unsigned short > &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Scalar___sub__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  SimpleEigen::Array< unsigned short > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator -",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::operator -",2,"SimpleEigen::Array< unsigned short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___sub",2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_short_t);
  }
  
  result = (arg1)->operator -(*arg2);
  {
    SimpleEigen::Array< unsigned short > * resultptr = new SimpleEigen::Array< unsigned short >((const SimpleEigen::Array< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar___sub__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar___sub__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar___sub__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar___sub__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt16Scalar___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt16Scalar___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint16_t >::operator -(SimpleEigen::Scalar< unsigned short > const &)\n"
    "    SimpleEigen::Scalar< uint16_t >::operator -(unsigned short const &)\n"
    "    SimpleEigen::Scalar< uint16_t >::operator -(SimpleEigen::RowVector< unsigned short > const &)\n"
    "    SimpleEigen::Scalar< uint16_t >::operator -(SimpleEigen::ColVector< unsigned short > const &)\n"
    "    SimpleEigen::Scalar< uint16_t >::operator -(SimpleEigen::Matrix< unsigned short > &)\n"
    "    SimpleEigen::Scalar< uint16_t >::operator -(SimpleEigen::Array< unsigned short > &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Scalar_get_value(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::get_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::get_value",1,"SimpleEigen::Scalar< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_get_value",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->get_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_set_value(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::set_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::set_value",1,"SimpleEigen::Scalar< uint16_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::set_value",2,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_set_value",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->set_value((unsigned short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_abs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::abs",1,"SimpleEigen::Scalar< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_abs",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  result = (arg1)->abs();
  {
    SimpleEigen::Scalar< unsigned short > * resultptr = new SimpleEigen::Scalar< unsigned short >((const SimpleEigen::Scalar< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_fabs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned short > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::fabs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::fabs",1,"SimpleEigen::Scalar< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_fabs",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  result = (arg1)->fabs();
  {
    SimpleEigen::Scalar< unsigned short > * resultptr = new SimpleEigen::Scalar< unsigned short >((const SimpleEigen::Scalar< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_print(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint16_t >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint16_t >::print",1,"SimpleEigen::Scalar< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_print",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt16Scalar(void *obj) {
SimpleEigen::Scalar< uint16_t > *arg1 = (SimpleEigen::Scalar< uint16_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt16Scalar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt16Scalar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt16Scalar_attributes[] = {
    { "val", _wrap_UInt16Scalar_val_get, _wrap_UInt16Scalar_val_set },
    {0,0,0}
};
static swig_lua_method swig_UInt16Scalar_methods[]= {
    { "aplus", _wrap_UInt16Scalar_aplus},
    { "aminus", _wrap_UInt16Scalar_aminus},
    { "atimes", _wrap_UInt16Scalar_atimes},
    { "adiv", _wrap_UInt16Scalar_adiv},
    { "rowvector", _wrap_UInt16Scalar_rowvector},
    { "colvector", _wrap_UInt16Scalar_colvector},
    { "matrix", _wrap_UInt16Scalar_matrix},
    { "array", _wrap_UInt16Scalar_array},
    { "array2d", _wrap_UInt16Scalar_array2d},
    { "__mul", _wrap_UInt16Scalar___mul},
    { "__div", _wrap_UInt16Scalar___div},
    { "__add", _wrap_UInt16Scalar___add},
    { "__sub", _wrap_UInt16Scalar___sub},
    { "get_value", _wrap_UInt16Scalar_get_value},
    { "set_value", _wrap_UInt16Scalar_set_value},
    { "abs", _wrap_UInt16Scalar_abs},
    { "fabs", _wrap_UInt16Scalar_fabs},
    { "print", _wrap_UInt16Scalar_print},
    {0,0}
};
static swig_lua_method swig_UInt16Scalar_meta[] = {
    { "__mul", _wrap_UInt16Scalar___mul},
    { "__div", _wrap_UInt16Scalar___div},
    { "__add", _wrap_UInt16Scalar___add},
    { "__sub", _wrap_UInt16Scalar___sub},
    {0,0}
};

static swig_lua_attribute swig_UInt16Scalar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt16Scalar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt16Scalar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt16Scalar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt16Scalar_Sf_SwigStatic = {
    "UInt16Scalar",
    swig_UInt16Scalar_Sf_SwigStatic_methods,
    swig_UInt16Scalar_Sf_SwigStatic_attributes,
    swig_UInt16Scalar_Sf_SwigStatic_constants,
    swig_UInt16Scalar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt16Scalar_bases[] = {0,0};
static const char *swig_UInt16Scalar_base_names[] = {"SimpleEigen::Base *",0};
static swig_lua_class _wrap_class_UInt16Scalar = { "UInt16Scalar", "UInt16Scalar", &SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,_proxy__wrap_new_UInt16Scalar, swig_delete_UInt16Scalar, swig_UInt16Scalar_methods, swig_UInt16Scalar_attributes, &swig_UInt16Scalar_Sf_SwigStatic, swig_UInt16Scalar_meta, swig_UInt16Scalar_bases, swig_UInt16Scalar_base_names };

static int _wrap_Int32Scalar_val_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::val",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::val",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_val_set",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_val_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  int result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::val",1,"SimpleEigen::Scalar< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_val_get",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  result = (int) ((arg1)->val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Scalar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int *arg1 = 0 ;
  int temp1 ;
  SimpleEigen::Scalar< int32_t > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::Scalar",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::Scalar",1,"int const &");
  temp1=(int)lua_tonumber(L,1); arg1=&temp1;
  result = (SimpleEigen::Scalar< int32_t > *)new SimpleEigen::Scalar< int32_t >((int const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Scalar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int > *arg1 = 0 ;
  SimpleEigen::Scalar< int32_t > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::Scalar",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::Scalar",1,"SimpleEigen::Scalar< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("new_Int32Scalar",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  result = (SimpleEigen::Scalar< int32_t > *)new SimpleEigen::Scalar< int32_t >((SimpleEigen::Scalar< int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Scalar(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int32Scalar__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Int32Scalar__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int32Scalar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int32_t >::Scalar(int const &)\n"
    "    SimpleEigen::Scalar< int32_t >::Scalar(SimpleEigen::Scalar< int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Scalar___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  SimpleEigen::Scalar< int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator +",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator +",2,"SimpleEigen::Scalar< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___add",2,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::Scalar< int > const &)*arg2);
  {
    SimpleEigen::Scalar< int > * resultptr = new SimpleEigen::Scalar< int >((const SimpleEigen::Scalar< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  SimpleEigen::Scalar< int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator -",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator -",2,"SimpleEigen::Scalar< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___sub",2,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::Scalar< int > const &)*arg2);
  {
    SimpleEigen::Scalar< int > * resultptr = new SimpleEigen::Scalar< int >((const SimpleEigen::Scalar< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  SimpleEigen::Scalar< int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator *",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator *",2,"SimpleEigen::Scalar< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___mul",2,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::Scalar< int > const &)*arg2);
  {
    SimpleEigen::Scalar< int > * resultptr = new SimpleEigen::Scalar< int >((const SimpleEigen::Scalar< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  SimpleEigen::Scalar< int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator /",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator /",2,"SimpleEigen::Scalar< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___div",2,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::Scalar< int > const &)*arg2);
  {
    SimpleEigen::Scalar< int > * resultptr = new SimpleEigen::Scalar< int >((const SimpleEigen::Scalar< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator +",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator +",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator +((int const &)*arg2);
  {
    SimpleEigen::Scalar< int > * resultptr = new SimpleEigen::Scalar< int >((const SimpleEigen::Scalar< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator -",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator -",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator -((int const &)*arg2);
  {
    SimpleEigen::Scalar< int > * resultptr = new SimpleEigen::Scalar< int >((const SimpleEigen::Scalar< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator *",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator *",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator *((int const &)*arg2);
  {
    SimpleEigen::Scalar< int > * resultptr = new SimpleEigen::Scalar< int >((const SimpleEigen::Scalar< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator /",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator /",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator /((int const &)*arg2);
  {
    SimpleEigen::Scalar< int > * resultptr = new SimpleEigen::Scalar< int >((const SimpleEigen::Scalar< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_aplus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::aplus",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::aplus",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_aplus",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aplus((int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_aminus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::aminus",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::aminus",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_aminus",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aminus((int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_atimes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::atimes",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::atimes",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_atimes",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->atimes((int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_adiv__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::adiv",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::adiv",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_adiv",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->adiv((int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_aplus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  SimpleEigen::Scalar< int > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::aplus",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::aplus",2,"SimpleEigen::Scalar< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_aplus",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_aplus",2,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  (arg1)->aplus((SimpleEigen::Scalar< int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_aplus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar_aplus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int32Scalar_aplus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int32Scalar_aplus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int32_t >::aplus(int const &)\n"
    "    SimpleEigen::Scalar< int32_t >::aplus(SimpleEigen::Scalar< int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Scalar_aminus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  SimpleEigen::Scalar< int > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::aminus",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::aminus",2,"SimpleEigen::Scalar< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_aminus",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_aminus",2,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  (arg1)->aminus((SimpleEigen::Scalar< int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_aminus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar_aminus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int32Scalar_aminus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int32Scalar_aminus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int32_t >::aminus(int const &)\n"
    "    SimpleEigen::Scalar< int32_t >::aminus(SimpleEigen::Scalar< int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Scalar_atimes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  SimpleEigen::Scalar< int > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::atimes",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::atimes",2,"SimpleEigen::Scalar< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_atimes",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_atimes",2,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  (arg1)->atimes((SimpleEigen::Scalar< int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_atimes(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar_atimes__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int32Scalar_atimes__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int32Scalar_atimes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int32_t >::atimes(int const &)\n"
    "    SimpleEigen::Scalar< int32_t >::atimes(SimpleEigen::Scalar< int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Scalar_adiv__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  SimpleEigen::Scalar< int > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::adiv",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::adiv",2,"SimpleEigen::Scalar< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_adiv",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_adiv",2,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  (arg1)->adiv((SimpleEigen::Scalar< int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_adiv(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar_adiv__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int32Scalar_adiv__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int32Scalar_adiv'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int32_t >::adiv(int const &)\n"
    "    SimpleEigen::Scalar< int32_t >::adiv(SimpleEigen::Scalar< int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Scalar_rowvector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  SimpleEigen::RowVector< int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::rowvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::rowvector",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::rowvector",2,"SimpleEigen::RowVector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_rowvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_rowvector",2,SWIGTYPE_p_SimpleEigen__RowVectorT_int_t);
  }
  
  result = (arg1)->rowvector((SimpleEigen::RowVector< int > const &)*arg2);
  {
    SimpleEigen::RowVector< int > * resultptr = new SimpleEigen::RowVector< int >((const SimpleEigen::RowVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_colvector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  SimpleEigen::ColVector< int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::colvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::colvector",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::colvector",2,"SimpleEigen::ColVector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_colvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_colvector",2,SWIGTYPE_p_SimpleEigen__ColVectorT_int_t);
  }
  
  result = (arg1)->colvector((SimpleEigen::ColVector< int > const &)*arg2);
  {
    SimpleEigen::ColVector< int > * resultptr = new SimpleEigen::ColVector< int >((const SimpleEigen::ColVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  SimpleEigen::Matrix< int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::matrix",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::matrix",2,"SimpleEigen::Matrix< int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_matrix",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_matrix",2,SWIGTYPE_p_SimpleEigen__MatrixT_int_t);
  }
  
  result = (arg1)->matrix(*arg2);
  {
    SimpleEigen::Matrix< int > * resultptr = new SimpleEigen::Matrix< int >((const SimpleEigen::Matrix< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  SimpleEigen::Array< int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::array",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::array",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::array",2,"SimpleEigen::Array< int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_array",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_array",2,SWIGTYPE_p_SimpleEigen__ArrayT_int_t);
  }
  
  result = (arg1)->array(*arg2);
  {
    SimpleEigen::Array< int > * resultptr = new SimpleEigen::Array< int >((const SimpleEigen::Array< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_array2d__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  SimpleEigen::Array2D< int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array2D< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::array2d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::array2d",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::array2d",2,"SimpleEigen::Array2D< int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_array2d",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__Array2DT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_array2d",2,SWIGTYPE_p_SimpleEigen__Array2DT_int_t);
  }
  
  result = (arg1)->array2d(*arg2);
  {
    SimpleEigen::Array2D< int > * resultptr = new SimpleEigen::Array2D< int >((const SimpleEigen::Array2D< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_rowvector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< SimpleEigen::RowVector< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::rowvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::rowvector",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::rowvector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_rowvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->rowvector(arg2);
  {
    SimpleEigen::RowVector< int > * resultptr = new SimpleEigen::RowVector< int >((const SimpleEigen::RowVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_rowvector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar_rowvector__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int32Scalar_rowvector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int32Scalar_rowvector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int32_t >::rowvector(SimpleEigen::RowVector< int > const &)\n"
    "    SimpleEigen::Scalar< int32_t >::rowvector(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Scalar_colvector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< SimpleEigen::ColVector< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::colvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::colvector",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::colvector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_colvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->colvector(arg2);
  {
    SimpleEigen::ColVector< int > * resultptr = new SimpleEigen::ColVector< int >((const SimpleEigen::ColVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_colvector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar_colvector__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int32Scalar_colvector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int32Scalar_colvector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int32_t >::colvector(SimpleEigen::ColVector< int > const &)\n"
    "    SimpleEigen::Scalar< int32_t >::colvector(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Scalar_matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SwigValueWrapper< SimpleEigen::Matrix< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::matrix",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::matrix",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::matrix",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::matrix",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_matrix",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->matrix(arg2,arg3);
  {
    SimpleEigen::Matrix< int > * resultptr = new SimpleEigen::Matrix< int >((const SimpleEigen::Matrix< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_matrix(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar_matrix__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Int32Scalar_matrix__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int32Scalar_matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int32_t >::matrix(SimpleEigen::Matrix< int > &)\n"
    "    SimpleEigen::Scalar< int32_t >::matrix(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Scalar_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< SimpleEigen::Array< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::array",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::array",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::array",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_array",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->array(arg2);
  {
    SimpleEigen::Array< int > * resultptr = new SimpleEigen::Array< int >((const SimpleEigen::Array< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_array(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar_array__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int32Scalar_array__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int32Scalar_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int32_t >::array(SimpleEigen::Array< int > &)\n"
    "    SimpleEigen::Scalar< int32_t >::array(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Scalar_array2d__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SwigValueWrapper< SimpleEigen::Array2D< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::array2d",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::array2d",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::array2d",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::array2d",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_array2d",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->array2d(arg2,arg3);
  {
    SimpleEigen::Array2D< int > * resultptr = new SimpleEigen::Array2D< int >((const SimpleEigen::Array2D< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_array2d(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar_array2d__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Int32Scalar_array2d__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int32Scalar_array2d'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int32_t >::array2d(SimpleEigen::Array2D< int > &)\n"
    "    SimpleEigen::Scalar< int32_t >::array2d(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Scalar___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  SimpleEigen::RowVector< int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator *",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator *",2,"SimpleEigen::RowVector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___mul",2,SWIGTYPE_p_SimpleEigen__RowVectorT_int_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::RowVector< int > const &)*arg2);
  {
    SimpleEigen::RowVector< int > * resultptr = new SimpleEigen::RowVector< int >((const SimpleEigen::RowVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  SimpleEigen::RowVector< int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator /",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator /",2,"SimpleEigen::RowVector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___div",2,SWIGTYPE_p_SimpleEigen__RowVectorT_int_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::RowVector< int > const &)*arg2);
  {
    SimpleEigen::RowVector< int > * resultptr = new SimpleEigen::RowVector< int >((const SimpleEigen::RowVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  SimpleEigen::RowVector< int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator +",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator +",2,"SimpleEigen::RowVector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___add",2,SWIGTYPE_p_SimpleEigen__RowVectorT_int_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::RowVector< int > const &)*arg2);
  {
    SimpleEigen::RowVector< int > * resultptr = new SimpleEigen::RowVector< int >((const SimpleEigen::RowVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  SimpleEigen::RowVector< int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator -",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator -",2,"SimpleEigen::RowVector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___sub",2,SWIGTYPE_p_SimpleEigen__RowVectorT_int_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::RowVector< int > const &)*arg2);
  {
    SimpleEigen::RowVector< int > * resultptr = new SimpleEigen::RowVector< int >((const SimpleEigen::RowVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar___mul__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  SimpleEigen::ColVector< int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator *",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator *",2,"SimpleEigen::ColVector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___mul",2,SWIGTYPE_p_SimpleEigen__ColVectorT_int_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::ColVector< int > const &)*arg2);
  {
    SimpleEigen::ColVector< int > * resultptr = new SimpleEigen::ColVector< int >((const SimpleEigen::ColVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar___div__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  SimpleEigen::ColVector< int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator /",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator /",2,"SimpleEigen::ColVector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___div",2,SWIGTYPE_p_SimpleEigen__ColVectorT_int_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::ColVector< int > const &)*arg2);
  {
    SimpleEigen::ColVector< int > * resultptr = new SimpleEigen::ColVector< int >((const SimpleEigen::ColVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar___add__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  SimpleEigen::ColVector< int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator +",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator +",2,"SimpleEigen::ColVector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___add",2,SWIGTYPE_p_SimpleEigen__ColVectorT_int_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::ColVector< int > const &)*arg2);
  {
    SimpleEigen::ColVector< int > * resultptr = new SimpleEigen::ColVector< int >((const SimpleEigen::ColVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar___sub__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  SimpleEigen::ColVector< int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator -",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator -",2,"SimpleEigen::ColVector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___sub",2,SWIGTYPE_p_SimpleEigen__ColVectorT_int_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::ColVector< int > const &)*arg2);
  {
    SimpleEigen::ColVector< int > * resultptr = new SimpleEigen::ColVector< int >((const SimpleEigen::ColVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar___mul__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  SimpleEigen::Matrix< int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator *",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator *",2,"SimpleEigen::Matrix< int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___mul",2,SWIGTYPE_p_SimpleEigen__MatrixT_int_t);
  }
  
  result = (arg1)->operator *(*arg2);
  {
    SimpleEigen::Matrix< int > * resultptr = new SimpleEigen::Matrix< int >((const SimpleEigen::Matrix< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar___div__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  SimpleEigen::Matrix< int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator /",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator /",2,"SimpleEigen::Matrix< int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___div",2,SWIGTYPE_p_SimpleEigen__MatrixT_int_t);
  }
  
  result = (arg1)->operator /(*arg2);
  {
    SimpleEigen::Matrix< int > * resultptr = new SimpleEigen::Matrix< int >((const SimpleEigen::Matrix< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar___add__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  SimpleEigen::Matrix< int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator +",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator +",2,"SimpleEigen::Matrix< int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___add",2,SWIGTYPE_p_SimpleEigen__MatrixT_int_t);
  }
  
  result = (arg1)->operator +(*arg2);
  {
    SimpleEigen::Matrix< int > * resultptr = new SimpleEigen::Matrix< int >((const SimpleEigen::Matrix< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar___sub__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  SimpleEigen::Matrix< int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator -",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator -",2,"SimpleEigen::Matrix< int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___sub",2,SWIGTYPE_p_SimpleEigen__MatrixT_int_t);
  }
  
  result = (arg1)->operator -(*arg2);
  {
    SimpleEigen::Matrix< int > * resultptr = new SimpleEigen::Matrix< int >((const SimpleEigen::Matrix< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar___mul__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  SimpleEigen::Array< int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator *",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator *",2,"SimpleEigen::Array< int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___mul",2,SWIGTYPE_p_SimpleEigen__ArrayT_int_t);
  }
  
  result = (arg1)->operator *(*arg2);
  {
    SimpleEigen::Array< int > * resultptr = new SimpleEigen::Array< int >((const SimpleEigen::Array< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar___mul__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar___mul__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar___mul__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int32Scalar___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int32Scalar___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int32_t >::operator *(SimpleEigen::Scalar< int > const &)\n"
    "    SimpleEigen::Scalar< int32_t >::operator *(int const &)\n"
    "    SimpleEigen::Scalar< int32_t >::operator *(SimpleEigen::RowVector< int > const &)\n"
    "    SimpleEigen::Scalar< int32_t >::operator *(SimpleEigen::ColVector< int > const &)\n"
    "    SimpleEigen::Scalar< int32_t >::operator *(SimpleEigen::Matrix< int > &)\n"
    "    SimpleEigen::Scalar< int32_t >::operator *(SimpleEigen::Array< int > &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Scalar___div__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  SimpleEigen::Array< int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator /",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator /",2,"SimpleEigen::Array< int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___div",2,SWIGTYPE_p_SimpleEigen__ArrayT_int_t);
  }
  
  result = (arg1)->operator /(*arg2);
  {
    SimpleEigen::Array< int > * resultptr = new SimpleEigen::Array< int >((const SimpleEigen::Array< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar___div__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar___div__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar___div__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar___div__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int32Scalar___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int32Scalar___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int32_t >::operator /(SimpleEigen::Scalar< int > const &)\n"
    "    SimpleEigen::Scalar< int32_t >::operator /(int const &)\n"
    "    SimpleEigen::Scalar< int32_t >::operator /(SimpleEigen::RowVector< int > const &)\n"
    "    SimpleEigen::Scalar< int32_t >::operator /(SimpleEigen::ColVector< int > const &)\n"
    "    SimpleEigen::Scalar< int32_t >::operator /(SimpleEigen::Matrix< int > &)\n"
    "    SimpleEigen::Scalar< int32_t >::operator /(SimpleEigen::Array< int > &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Scalar___add__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  SimpleEigen::Array< int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator +",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator +",2,"SimpleEigen::Array< int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___add",2,SWIGTYPE_p_SimpleEigen__ArrayT_int_t);
  }
  
  result = (arg1)->operator +(*arg2);
  {
    SimpleEigen::Array< int > * resultptr = new SimpleEigen::Array< int >((const SimpleEigen::Array< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar___add__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar___add__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar___add__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int32Scalar___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int32Scalar___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int32_t >::operator +(SimpleEigen::Scalar< int > const &)\n"
    "    SimpleEigen::Scalar< int32_t >::operator +(int const &)\n"
    "    SimpleEigen::Scalar< int32_t >::operator +(SimpleEigen::RowVector< int > const &)\n"
    "    SimpleEigen::Scalar< int32_t >::operator +(SimpleEigen::ColVector< int > const &)\n"
    "    SimpleEigen::Scalar< int32_t >::operator +(SimpleEigen::Matrix< int > &)\n"
    "    SimpleEigen::Scalar< int32_t >::operator +(SimpleEigen::Array< int > &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Scalar___sub__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  SimpleEigen::Array< int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator -",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::operator -",2,"SimpleEigen::Array< int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___sub",2,SWIGTYPE_p_SimpleEigen__ArrayT_int_t);
  }
  
  result = (arg1)->operator -(*arg2);
  {
    SimpleEigen::Array< int > * resultptr = new SimpleEigen::Array< int >((const SimpleEigen::Array< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar___sub__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar___sub__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar___sub__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar___sub__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int32Scalar___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int32Scalar___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< int32_t >::operator -(SimpleEigen::Scalar< int > const &)\n"
    "    SimpleEigen::Scalar< int32_t >::operator -(int const &)\n"
    "    SimpleEigen::Scalar< int32_t >::operator -(SimpleEigen::RowVector< int > const &)\n"
    "    SimpleEigen::Scalar< int32_t >::operator -(SimpleEigen::ColVector< int > const &)\n"
    "    SimpleEigen::Scalar< int32_t >::operator -(SimpleEigen::Matrix< int > &)\n"
    "    SimpleEigen::Scalar< int32_t >::operator -(SimpleEigen::Array< int > &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Scalar_get_value(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  int result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::get_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::get_value",1,"SimpleEigen::Scalar< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_get_value",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  result = (int)(arg1)->get_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_set_value(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::set_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::set_value",1,"SimpleEigen::Scalar< int32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::set_value",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_set_value",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->set_value((int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_abs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::abs",1,"SimpleEigen::Scalar< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_abs",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  result = (arg1)->abs();
  {
    SimpleEigen::Scalar< int > * resultptr = new SimpleEigen::Scalar< int >((const SimpleEigen::Scalar< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_fabs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::fabs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::fabs",1,"SimpleEigen::Scalar< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_fabs",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  result = (arg1)->fabs();
  {
    SimpleEigen::Scalar< int > * resultptr = new SimpleEigen::Scalar< int >((const SimpleEigen::Scalar< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_print(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< int32_t >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< int32_t >::print",1,"SimpleEigen::Scalar< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_print",1,SWIGTYPE_p_SimpleEigen__ScalarT_int_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int32Scalar(void *obj) {
SimpleEigen::Scalar< int32_t > *arg1 = (SimpleEigen::Scalar< int32_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int32Scalar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int32Scalar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int32Scalar_attributes[] = {
    { "val", _wrap_Int32Scalar_val_get, _wrap_Int32Scalar_val_set },
    {0,0,0}
};
static swig_lua_method swig_Int32Scalar_methods[]= {
    { "aplus", _wrap_Int32Scalar_aplus},
    { "aminus", _wrap_Int32Scalar_aminus},
    { "atimes", _wrap_Int32Scalar_atimes},
    { "adiv", _wrap_Int32Scalar_adiv},
    { "rowvector", _wrap_Int32Scalar_rowvector},
    { "colvector", _wrap_Int32Scalar_colvector},
    { "matrix", _wrap_Int32Scalar_matrix},
    { "array", _wrap_Int32Scalar_array},
    { "array2d", _wrap_Int32Scalar_array2d},
    { "__mul", _wrap_Int32Scalar___mul},
    { "__div", _wrap_Int32Scalar___div},
    { "__add", _wrap_Int32Scalar___add},
    { "__sub", _wrap_Int32Scalar___sub},
    { "get_value", _wrap_Int32Scalar_get_value},
    { "set_value", _wrap_Int32Scalar_set_value},
    { "abs", _wrap_Int32Scalar_abs},
    { "fabs", _wrap_Int32Scalar_fabs},
    { "print", _wrap_Int32Scalar_print},
    {0,0}
};
static swig_lua_method swig_Int32Scalar_meta[] = {
    { "__mul", _wrap_Int32Scalar___mul},
    { "__div", _wrap_Int32Scalar___div},
    { "__add", _wrap_Int32Scalar___add},
    { "__sub", _wrap_Int32Scalar___sub},
    {0,0}
};

static swig_lua_attribute swig_Int32Scalar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int32Scalar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int32Scalar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int32Scalar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int32Scalar_Sf_SwigStatic = {
    "Int32Scalar",
    swig_Int32Scalar_Sf_SwigStatic_methods,
    swig_Int32Scalar_Sf_SwigStatic_attributes,
    swig_Int32Scalar_Sf_SwigStatic_constants,
    swig_Int32Scalar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int32Scalar_bases[] = {0,0};
static const char *swig_Int32Scalar_base_names[] = {"SimpleEigen::Base *",0};
static swig_lua_class _wrap_class_Int32Scalar = { "Int32Scalar", "Int32Scalar", &SWIGTYPE_p_SimpleEigen__ScalarT_int_t,_proxy__wrap_new_Int32Scalar, swig_delete_Int32Scalar, swig_Int32Scalar_methods, swig_Int32Scalar_attributes, &swig_Int32Scalar_Sf_SwigStatic, swig_Int32Scalar_meta, swig_Int32Scalar_bases, swig_Int32Scalar_base_names };

static int _wrap_UInt32Scalar_val_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::val",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::val",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_val_set",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_val_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::val",1,"SimpleEigen::Scalar< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_val_get",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  result = (unsigned int) ((arg1)->val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Scalar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int *arg1 = 0 ;
  unsigned int temp1 ;
  SimpleEigen::Scalar< uint32_t > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::Scalar",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::Scalar",1,"unsigned int const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  temp1=(unsigned int)lua_tonumber(L,1); arg1=&temp1;
  result = (SimpleEigen::Scalar< uint32_t > *)new SimpleEigen::Scalar< uint32_t >((unsigned int const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Scalar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned int > *arg1 = 0 ;
  SimpleEigen::Scalar< uint32_t > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::Scalar",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::Scalar",1,"SimpleEigen::Scalar< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("new_UInt32Scalar",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  result = (SimpleEigen::Scalar< uint32_t > *)new SimpleEigen::Scalar< uint32_t >((SimpleEigen::Scalar< unsigned int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Scalar(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt32Scalar__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UInt32Scalar__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt32Scalar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint32_t >::Scalar(unsigned int const &)\n"
    "    SimpleEigen::Scalar< uint32_t >::Scalar(SimpleEigen::Scalar< unsigned int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Scalar___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  SimpleEigen::Scalar< unsigned int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator +",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator +",2,"SimpleEigen::Scalar< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___add",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::Scalar< unsigned int > const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned int > * resultptr = new SimpleEigen::Scalar< unsigned int >((const SimpleEigen::Scalar< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  SimpleEigen::Scalar< unsigned int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator -",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator -",2,"SimpleEigen::Scalar< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___sub",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::Scalar< unsigned int > const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned int > * resultptr = new SimpleEigen::Scalar< unsigned int >((const SimpleEigen::Scalar< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  SimpleEigen::Scalar< unsigned int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator *",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator *",2,"SimpleEigen::Scalar< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___mul",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::Scalar< unsigned int > const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned int > * resultptr = new SimpleEigen::Scalar< unsigned int >((const SimpleEigen::Scalar< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  SimpleEigen::Scalar< unsigned int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator /",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator /",2,"SimpleEigen::Scalar< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___div",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::Scalar< unsigned int > const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned int > * resultptr = new SimpleEigen::Scalar< unsigned int >((const SimpleEigen::Scalar< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator +",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator +",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator +((unsigned int const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned int > * resultptr = new SimpleEigen::Scalar< unsigned int >((const SimpleEigen::Scalar< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator -",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator -",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator -((unsigned int const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned int > * resultptr = new SimpleEigen::Scalar< unsigned int >((const SimpleEigen::Scalar< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator *",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator *",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator *((unsigned int const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned int > * resultptr = new SimpleEigen::Scalar< unsigned int >((const SimpleEigen::Scalar< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator /",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator /",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator /((unsigned int const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned int > * resultptr = new SimpleEigen::Scalar< unsigned int >((const SimpleEigen::Scalar< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_aplus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::aplus",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::aplus",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_aplus",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aplus((unsigned int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_aminus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::aminus",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::aminus",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_aminus",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aminus((unsigned int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_atimes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::atimes",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::atimes",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_atimes",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->atimes((unsigned int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_adiv__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::adiv",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::adiv",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_adiv",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->adiv((unsigned int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_aplus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  SimpleEigen::Scalar< unsigned int > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::aplus",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::aplus",2,"SimpleEigen::Scalar< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_aplus",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_aplus",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  (arg1)->aplus((SimpleEigen::Scalar< unsigned int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_aplus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar_aplus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt32Scalar_aplus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt32Scalar_aplus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint32_t >::aplus(unsigned int const &)\n"
    "    SimpleEigen::Scalar< uint32_t >::aplus(SimpleEigen::Scalar< unsigned int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Scalar_aminus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  SimpleEigen::Scalar< unsigned int > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::aminus",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::aminus",2,"SimpleEigen::Scalar< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_aminus",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_aminus",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  (arg1)->aminus((SimpleEigen::Scalar< unsigned int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_aminus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar_aminus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt32Scalar_aminus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt32Scalar_aminus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint32_t >::aminus(unsigned int const &)\n"
    "    SimpleEigen::Scalar< uint32_t >::aminus(SimpleEigen::Scalar< unsigned int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Scalar_atimes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  SimpleEigen::Scalar< unsigned int > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::atimes",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::atimes",2,"SimpleEigen::Scalar< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_atimes",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_atimes",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  (arg1)->atimes((SimpleEigen::Scalar< unsigned int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_atimes(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar_atimes__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt32Scalar_atimes__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt32Scalar_atimes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint32_t >::atimes(unsigned int const &)\n"
    "    SimpleEigen::Scalar< uint32_t >::atimes(SimpleEigen::Scalar< unsigned int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Scalar_adiv__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  SimpleEigen::Scalar< unsigned int > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::adiv",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::adiv",2,"SimpleEigen::Scalar< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_adiv",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_adiv",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  (arg1)->adiv((SimpleEigen::Scalar< unsigned int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_adiv(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar_adiv__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt32Scalar_adiv__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt32Scalar_adiv'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint32_t >::adiv(unsigned int const &)\n"
    "    SimpleEigen::Scalar< uint32_t >::adiv(SimpleEigen::Scalar< unsigned int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Scalar_rowvector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  SimpleEigen::RowVector< unsigned int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::rowvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::rowvector",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::rowvector",2,"SimpleEigen::RowVector< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_rowvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_rowvector",2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_int_t);
  }
  
  result = (arg1)->rowvector((SimpleEigen::RowVector< unsigned int > const &)*arg2);
  {
    SimpleEigen::RowVector< unsigned int > * resultptr = new SimpleEigen::RowVector< unsigned int >((const SimpleEigen::RowVector< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_colvector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  SimpleEigen::ColVector< unsigned int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::colvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::colvector",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::colvector",2,"SimpleEigen::ColVector< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_colvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_colvector",2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_int_t);
  }
  
  result = (arg1)->colvector((SimpleEigen::ColVector< unsigned int > const &)*arg2);
  {
    SimpleEigen::ColVector< unsigned int > * resultptr = new SimpleEigen::ColVector< unsigned int >((const SimpleEigen::ColVector< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  SimpleEigen::Matrix< unsigned int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::matrix",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::matrix",2,"SimpleEigen::Matrix< unsigned int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_matrix",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_matrix",2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_int_t);
  }
  
  result = (arg1)->matrix(*arg2);
  {
    SimpleEigen::Matrix< unsigned int > * resultptr = new SimpleEigen::Matrix< unsigned int >((const SimpleEigen::Matrix< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  SimpleEigen::Array< unsigned int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::array",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::array",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::array",2,"SimpleEigen::Array< unsigned int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_array",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_array",2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_int_t);
  }
  
  result = (arg1)->array(*arg2);
  {
    SimpleEigen::Array< unsigned int > * resultptr = new SimpleEigen::Array< unsigned int >((const SimpleEigen::Array< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_array2d__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  SimpleEigen::Array2D< unsigned int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array2D< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::array2d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::array2d",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::array2d",2,"SimpleEigen::Array2D< unsigned int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_array2d",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__Array2DT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_array2d",2,SWIGTYPE_p_SimpleEigen__Array2DT_unsigned_int_t);
  }
  
  result = (arg1)->array2d(*arg2);
  {
    SimpleEigen::Array2D< unsigned int > * resultptr = new SimpleEigen::Array2D< unsigned int >((const SimpleEigen::Array2D< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_rowvector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< SimpleEigen::RowVector< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::rowvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::rowvector",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::rowvector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_rowvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->rowvector(arg2);
  {
    SimpleEigen::RowVector< unsigned int > * resultptr = new SimpleEigen::RowVector< unsigned int >((const SimpleEigen::RowVector< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_rowvector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar_rowvector__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt32Scalar_rowvector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt32Scalar_rowvector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint32_t >::rowvector(SimpleEigen::RowVector< unsigned int > const &)\n"
    "    SimpleEigen::Scalar< uint32_t >::rowvector(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Scalar_colvector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< SimpleEigen::ColVector< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::colvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::colvector",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::colvector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_colvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->colvector(arg2);
  {
    SimpleEigen::ColVector< unsigned int > * resultptr = new SimpleEigen::ColVector< unsigned int >((const SimpleEigen::ColVector< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_colvector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar_colvector__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt32Scalar_colvector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt32Scalar_colvector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint32_t >::colvector(SimpleEigen::ColVector< unsigned int > const &)\n"
    "    SimpleEigen::Scalar< uint32_t >::colvector(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Scalar_matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SwigValueWrapper< SimpleEigen::Matrix< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::matrix",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::matrix",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::matrix",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::matrix",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_matrix",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->matrix(arg2,arg3);
  {
    SimpleEigen::Matrix< unsigned int > * resultptr = new SimpleEigen::Matrix< unsigned int >((const SimpleEigen::Matrix< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_matrix(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar_matrix__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_UInt32Scalar_matrix__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt32Scalar_matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint32_t >::matrix(SimpleEigen::Matrix< unsigned int > &)\n"
    "    SimpleEigen::Scalar< uint32_t >::matrix(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Scalar_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< SimpleEigen::Array< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::array",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::array",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::array",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_array",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->array(arg2);
  {
    SimpleEigen::Array< unsigned int > * resultptr = new SimpleEigen::Array< unsigned int >((const SimpleEigen::Array< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_array(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar_array__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt32Scalar_array__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt32Scalar_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint32_t >::array(SimpleEigen::Array< unsigned int > &)\n"
    "    SimpleEigen::Scalar< uint32_t >::array(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Scalar_array2d__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SwigValueWrapper< SimpleEigen::Array2D< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::array2d",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::array2d",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::array2d",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::array2d",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_array2d",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->array2d(arg2,arg3);
  {
    SimpleEigen::Array2D< unsigned int > * resultptr = new SimpleEigen::Array2D< unsigned int >((const SimpleEigen::Array2D< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_array2d(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar_array2d__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_UInt32Scalar_array2d__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt32Scalar_array2d'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint32_t >::array2d(SimpleEigen::Array2D< unsigned int > &)\n"
    "    SimpleEigen::Scalar< uint32_t >::array2d(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Scalar___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  SimpleEigen::RowVector< unsigned int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator *",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator *",2,"SimpleEigen::RowVector< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___mul",2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_int_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::RowVector< unsigned int > const &)*arg2);
  {
    SimpleEigen::RowVector< unsigned int > * resultptr = new SimpleEigen::RowVector< unsigned int >((const SimpleEigen::RowVector< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  SimpleEigen::RowVector< unsigned int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator /",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator /",2,"SimpleEigen::RowVector< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___div",2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_int_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::RowVector< unsigned int > const &)*arg2);
  {
    SimpleEigen::RowVector< unsigned int > * resultptr = new SimpleEigen::RowVector< unsigned int >((const SimpleEigen::RowVector< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  SimpleEigen::RowVector< unsigned int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator +",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator +",2,"SimpleEigen::RowVector< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___add",2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_int_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::RowVector< unsigned int > const &)*arg2);
  {
    SimpleEigen::RowVector< unsigned int > * resultptr = new SimpleEigen::RowVector< unsigned int >((const SimpleEigen::RowVector< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  SimpleEigen::RowVector< unsigned int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator -",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator -",2,"SimpleEigen::RowVector< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___sub",2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_int_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::RowVector< unsigned int > const &)*arg2);
  {
    SimpleEigen::RowVector< unsigned int > * resultptr = new SimpleEigen::RowVector< unsigned int >((const SimpleEigen::RowVector< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar___mul__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  SimpleEigen::ColVector< unsigned int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator *",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator *",2,"SimpleEigen::ColVector< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___mul",2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_int_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::ColVector< unsigned int > const &)*arg2);
  {
    SimpleEigen::ColVector< unsigned int > * resultptr = new SimpleEigen::ColVector< unsigned int >((const SimpleEigen::ColVector< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar___div__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  SimpleEigen::ColVector< unsigned int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator /",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator /",2,"SimpleEigen::ColVector< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___div",2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_int_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::ColVector< unsigned int > const &)*arg2);
  {
    SimpleEigen::ColVector< unsigned int > * resultptr = new SimpleEigen::ColVector< unsigned int >((const SimpleEigen::ColVector< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar___add__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  SimpleEigen::ColVector< unsigned int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator +",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator +",2,"SimpleEigen::ColVector< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___add",2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_int_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::ColVector< unsigned int > const &)*arg2);
  {
    SimpleEigen::ColVector< unsigned int > * resultptr = new SimpleEigen::ColVector< unsigned int >((const SimpleEigen::ColVector< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar___sub__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  SimpleEigen::ColVector< unsigned int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator -",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator -",2,"SimpleEigen::ColVector< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___sub",2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_int_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::ColVector< unsigned int > const &)*arg2);
  {
    SimpleEigen::ColVector< unsigned int > * resultptr = new SimpleEigen::ColVector< unsigned int >((const SimpleEigen::ColVector< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar___mul__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  SimpleEigen::Matrix< unsigned int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator *",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator *",2,"SimpleEigen::Matrix< unsigned int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___mul",2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_int_t);
  }
  
  result = (arg1)->operator *(*arg2);
  {
    SimpleEigen::Matrix< unsigned int > * resultptr = new SimpleEigen::Matrix< unsigned int >((const SimpleEigen::Matrix< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar___div__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  SimpleEigen::Matrix< unsigned int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator /",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator /",2,"SimpleEigen::Matrix< unsigned int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___div",2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_int_t);
  }
  
  result = (arg1)->operator /(*arg2);
  {
    SimpleEigen::Matrix< unsigned int > * resultptr = new SimpleEigen::Matrix< unsigned int >((const SimpleEigen::Matrix< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar___add__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  SimpleEigen::Matrix< unsigned int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator +",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator +",2,"SimpleEigen::Matrix< unsigned int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___add",2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_int_t);
  }
  
  result = (arg1)->operator +(*arg2);
  {
    SimpleEigen::Matrix< unsigned int > * resultptr = new SimpleEigen::Matrix< unsigned int >((const SimpleEigen::Matrix< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar___sub__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  SimpleEigen::Matrix< unsigned int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator -",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator -",2,"SimpleEigen::Matrix< unsigned int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___sub",2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_int_t);
  }
  
  result = (arg1)->operator -(*arg2);
  {
    SimpleEigen::Matrix< unsigned int > * resultptr = new SimpleEigen::Matrix< unsigned int >((const SimpleEigen::Matrix< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar___mul__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  SimpleEigen::Array< unsigned int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator *",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator *",2,"SimpleEigen::Array< unsigned int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___mul",2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_int_t);
  }
  
  result = (arg1)->operator *(*arg2);
  {
    SimpleEigen::Array< unsigned int > * resultptr = new SimpleEigen::Array< unsigned int >((const SimpleEigen::Array< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar___mul__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar___mul__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar___mul__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt32Scalar___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt32Scalar___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint32_t >::operator *(SimpleEigen::Scalar< unsigned int > const &)\n"
    "    SimpleEigen::Scalar< uint32_t >::operator *(unsigned int const &)\n"
    "    SimpleEigen::Scalar< uint32_t >::operator *(SimpleEigen::RowVector< unsigned int > const &)\n"
    "    SimpleEigen::Scalar< uint32_t >::operator *(SimpleEigen::ColVector< unsigned int > const &)\n"
    "    SimpleEigen::Scalar< uint32_t >::operator *(SimpleEigen::Matrix< unsigned int > &)\n"
    "    SimpleEigen::Scalar< uint32_t >::operator *(SimpleEigen::Array< unsigned int > &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Scalar___div__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  SimpleEigen::Array< unsigned int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator /",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator /",2,"SimpleEigen::Array< unsigned int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___div",2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_int_t);
  }
  
  result = (arg1)->operator /(*arg2);
  {
    SimpleEigen::Array< unsigned int > * resultptr = new SimpleEigen::Array< unsigned int >((const SimpleEigen::Array< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar___div__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar___div__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar___div__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar___div__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt32Scalar___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt32Scalar___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint32_t >::operator /(SimpleEigen::Scalar< unsigned int > const &)\n"
    "    SimpleEigen::Scalar< uint32_t >::operator /(unsigned int const &)\n"
    "    SimpleEigen::Scalar< uint32_t >::operator /(SimpleEigen::RowVector< unsigned int > const &)\n"
    "    SimpleEigen::Scalar< uint32_t >::operator /(SimpleEigen::ColVector< unsigned int > const &)\n"
    "    SimpleEigen::Scalar< uint32_t >::operator /(SimpleEigen::Matrix< unsigned int > &)\n"
    "    SimpleEigen::Scalar< uint32_t >::operator /(SimpleEigen::Array< unsigned int > &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Scalar___add__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  SimpleEigen::Array< unsigned int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator +",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator +",2,"SimpleEigen::Array< unsigned int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___add",2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_int_t);
  }
  
  result = (arg1)->operator +(*arg2);
  {
    SimpleEigen::Array< unsigned int > * resultptr = new SimpleEigen::Array< unsigned int >((const SimpleEigen::Array< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar___add__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar___add__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar___add__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt32Scalar___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt32Scalar___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint32_t >::operator +(SimpleEigen::Scalar< unsigned int > const &)\n"
    "    SimpleEigen::Scalar< uint32_t >::operator +(unsigned int const &)\n"
    "    SimpleEigen::Scalar< uint32_t >::operator +(SimpleEigen::RowVector< unsigned int > const &)\n"
    "    SimpleEigen::Scalar< uint32_t >::operator +(SimpleEigen::ColVector< unsigned int > const &)\n"
    "    SimpleEigen::Scalar< uint32_t >::operator +(SimpleEigen::Matrix< unsigned int > &)\n"
    "    SimpleEigen::Scalar< uint32_t >::operator +(SimpleEigen::Array< unsigned int > &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Scalar___sub__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  SimpleEigen::Array< unsigned int > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator -",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::operator -",2,"SimpleEigen::Array< unsigned int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___sub",2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_int_t);
  }
  
  result = (arg1)->operator -(*arg2);
  {
    SimpleEigen::Array< unsigned int > * resultptr = new SimpleEigen::Array< unsigned int >((const SimpleEigen::Array< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar___sub__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar___sub__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar___sub__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar___sub__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt32Scalar___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt32Scalar___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< uint32_t >::operator -(SimpleEigen::Scalar< unsigned int > const &)\n"
    "    SimpleEigen::Scalar< uint32_t >::operator -(unsigned int const &)\n"
    "    SimpleEigen::Scalar< uint32_t >::operator -(SimpleEigen::RowVector< unsigned int > const &)\n"
    "    SimpleEigen::Scalar< uint32_t >::operator -(SimpleEigen::ColVector< unsigned int > const &)\n"
    "    SimpleEigen::Scalar< uint32_t >::operator -(SimpleEigen::Matrix< unsigned int > &)\n"
    "    SimpleEigen::Scalar< uint32_t >::operator -(SimpleEigen::Array< unsigned int > &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Scalar_get_value(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::get_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::get_value",1,"SimpleEigen::Scalar< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_get_value",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->get_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_set_value(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::set_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::set_value",1,"SimpleEigen::Scalar< uint32_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::set_value",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_set_value",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->set_value((unsigned int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_abs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::abs",1,"SimpleEigen::Scalar< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_abs",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  result = (arg1)->abs();
  {
    SimpleEigen::Scalar< unsigned int > * resultptr = new SimpleEigen::Scalar< unsigned int >((const SimpleEigen::Scalar< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_fabs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned int > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::fabs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::fabs",1,"SimpleEigen::Scalar< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_fabs",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  result = (arg1)->fabs();
  {
    SimpleEigen::Scalar< unsigned int > * resultptr = new SimpleEigen::Scalar< unsigned int >((const SimpleEigen::Scalar< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_print(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< uint32_t >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< uint32_t >::print",1,"SimpleEigen::Scalar< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_print",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt32Scalar(void *obj) {
SimpleEigen::Scalar< uint32_t > *arg1 = (SimpleEigen::Scalar< uint32_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt32Scalar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt32Scalar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt32Scalar_attributes[] = {
    { "val", _wrap_UInt32Scalar_val_get, _wrap_UInt32Scalar_val_set },
    {0,0,0}
};
static swig_lua_method swig_UInt32Scalar_methods[]= {
    { "aplus", _wrap_UInt32Scalar_aplus},
    { "aminus", _wrap_UInt32Scalar_aminus},
    { "atimes", _wrap_UInt32Scalar_atimes},
    { "adiv", _wrap_UInt32Scalar_adiv},
    { "rowvector", _wrap_UInt32Scalar_rowvector},
    { "colvector", _wrap_UInt32Scalar_colvector},
    { "matrix", _wrap_UInt32Scalar_matrix},
    { "array", _wrap_UInt32Scalar_array},
    { "array2d", _wrap_UInt32Scalar_array2d},
    { "__mul", _wrap_UInt32Scalar___mul},
    { "__div", _wrap_UInt32Scalar___div},
    { "__add", _wrap_UInt32Scalar___add},
    { "__sub", _wrap_UInt32Scalar___sub},
    { "get_value", _wrap_UInt32Scalar_get_value},
    { "set_value", _wrap_UInt32Scalar_set_value},
    { "abs", _wrap_UInt32Scalar_abs},
    { "fabs", _wrap_UInt32Scalar_fabs},
    { "print", _wrap_UInt32Scalar_print},
    {0,0}
};
static swig_lua_method swig_UInt32Scalar_meta[] = {
    { "__mul", _wrap_UInt32Scalar___mul},
    { "__div", _wrap_UInt32Scalar___div},
    { "__add", _wrap_UInt32Scalar___add},
    { "__sub", _wrap_UInt32Scalar___sub},
    {0,0}
};

static swig_lua_attribute swig_UInt32Scalar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt32Scalar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt32Scalar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt32Scalar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt32Scalar_Sf_SwigStatic = {
    "UInt32Scalar",
    swig_UInt32Scalar_Sf_SwigStatic_methods,
    swig_UInt32Scalar_Sf_SwigStatic_attributes,
    swig_UInt32Scalar_Sf_SwigStatic_constants,
    swig_UInt32Scalar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt32Scalar_bases[] = {0,0};
static const char *swig_UInt32Scalar_base_names[] = {"SimpleEigen::Base *",0};
static swig_lua_class _wrap_class_UInt32Scalar = { "UInt32Scalar", "UInt32Scalar", &SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,_proxy__wrap_new_UInt32Scalar, swig_delete_UInt32Scalar, swig_UInt32Scalar_methods, swig_UInt32Scalar_attributes, &swig_UInt32Scalar_Sf_SwigStatic, swig_UInt32Scalar_meta, swig_UInt32Scalar_bases, swig_UInt32Scalar_base_names };

static int _wrap_LongScalar_val_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  long arg2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::val",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::val",2,"long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar_val_set",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  arg2 = (long)lua_tonumber(L, 2);
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar_val_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::val",1,"SimpleEigen::Scalar< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar_val_get",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  result = (long) ((arg1)->val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LongScalar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  long *arg1 = 0 ;
  long temp1 ;
  SimpleEigen::Scalar< long > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::Scalar",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::Scalar",1,"long const &");
  temp1=(long)lua_tonumber(L,1); arg1=&temp1;
  result = (SimpleEigen::Scalar< long > *)new SimpleEigen::Scalar< long >((long const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LongScalar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = 0 ;
  SimpleEigen::Scalar< long > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::Scalar",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::Scalar",1,"SimpleEigen::Scalar< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("new_LongScalar",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  result = (SimpleEigen::Scalar< long > *)new SimpleEigen::Scalar< long >((SimpleEigen::Scalar< long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LongScalar(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_LongScalar__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_LongScalar__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_LongScalar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long >::Scalar(long const &)\n"
    "    SimpleEigen::Scalar< long >::Scalar(SimpleEigen::Scalar< long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LongScalar___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  SimpleEigen::Scalar< long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator +",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator +",2,"SimpleEigen::Scalar< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar___add",2,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::Scalar< long > const &)*arg2);
  {
    SimpleEigen::Scalar< long > * resultptr = new SimpleEigen::Scalar< long >((const SimpleEigen::Scalar< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  SimpleEigen::Scalar< long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator -",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator -",2,"SimpleEigen::Scalar< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar___sub",2,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::Scalar< long > const &)*arg2);
  {
    SimpleEigen::Scalar< long > * resultptr = new SimpleEigen::Scalar< long >((const SimpleEigen::Scalar< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  SimpleEigen::Scalar< long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator *",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator *",2,"SimpleEigen::Scalar< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar___mul",2,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::Scalar< long > const &)*arg2);
  {
    SimpleEigen::Scalar< long > * resultptr = new SimpleEigen::Scalar< long >((const SimpleEigen::Scalar< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  SimpleEigen::Scalar< long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator /",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator /",2,"SimpleEigen::Scalar< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar___div",2,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::Scalar< long > const &)*arg2);
  {
    SimpleEigen::Scalar< long > * resultptr = new SimpleEigen::Scalar< long >((const SimpleEigen::Scalar< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  long *arg2 = 0 ;
  long temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator +",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator +",2,"long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  temp2=(long)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator +((long const &)*arg2);
  {
    SimpleEigen::Scalar< long > * resultptr = new SimpleEigen::Scalar< long >((const SimpleEigen::Scalar< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  long *arg2 = 0 ;
  long temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator -",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator -",2,"long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  temp2=(long)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator -((long const &)*arg2);
  {
    SimpleEigen::Scalar< long > * resultptr = new SimpleEigen::Scalar< long >((const SimpleEigen::Scalar< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  long *arg2 = 0 ;
  long temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator *",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator *",2,"long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  temp2=(long)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator *((long const &)*arg2);
  {
    SimpleEigen::Scalar< long > * resultptr = new SimpleEigen::Scalar< long >((const SimpleEigen::Scalar< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  long *arg2 = 0 ;
  long temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator /",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator /",2,"long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  temp2=(long)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator /((long const &)*arg2);
  {
    SimpleEigen::Scalar< long > * resultptr = new SimpleEigen::Scalar< long >((const SimpleEigen::Scalar< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar_aplus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  long *arg2 = 0 ;
  long temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::aplus",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::aplus",2,"long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar_aplus",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  temp2=(long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aplus((long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar_aminus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  long *arg2 = 0 ;
  long temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::aminus",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::aminus",2,"long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar_aminus",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  temp2=(long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aminus((long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar_atimes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  long *arg2 = 0 ;
  long temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::atimes",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::atimes",2,"long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar_atimes",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  temp2=(long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->atimes((long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar_adiv__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  long *arg2 = 0 ;
  long temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::adiv",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::adiv",2,"long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar_adiv",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  temp2=(long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->adiv((long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar_aplus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  SimpleEigen::Scalar< long > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::aplus",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::aplus",2,"SimpleEigen::Scalar< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar_aplus",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar_aplus",2,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  (arg1)->aplus((SimpleEigen::Scalar< long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar_aplus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongScalar_aplus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LongScalar_aplus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LongScalar_aplus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long >::aplus(long const &)\n"
    "    SimpleEigen::Scalar< long >::aplus(SimpleEigen::Scalar< long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LongScalar_aminus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  SimpleEigen::Scalar< long > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::aminus",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::aminus",2,"SimpleEigen::Scalar< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar_aminus",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar_aminus",2,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  (arg1)->aminus((SimpleEigen::Scalar< long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar_aminus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongScalar_aminus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LongScalar_aminus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LongScalar_aminus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long >::aminus(long const &)\n"
    "    SimpleEigen::Scalar< long >::aminus(SimpleEigen::Scalar< long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LongScalar_atimes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  SimpleEigen::Scalar< long > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::atimes",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::atimes",2,"SimpleEigen::Scalar< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar_atimes",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar_atimes",2,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  (arg1)->atimes((SimpleEigen::Scalar< long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar_atimes(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongScalar_atimes__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LongScalar_atimes__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LongScalar_atimes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long >::atimes(long const &)\n"
    "    SimpleEigen::Scalar< long >::atimes(SimpleEigen::Scalar< long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LongScalar_adiv__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  SimpleEigen::Scalar< long > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::adiv",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::adiv",2,"SimpleEigen::Scalar< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar_adiv",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar_adiv",2,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  (arg1)->adiv((SimpleEigen::Scalar< long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar_adiv(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongScalar_adiv__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LongScalar_adiv__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LongScalar_adiv'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long >::adiv(long const &)\n"
    "    SimpleEigen::Scalar< long >::adiv(SimpleEigen::Scalar< long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LongScalar_rowvector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  SimpleEigen::RowVector< long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::rowvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::rowvector",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::rowvector",2,"SimpleEigen::RowVector< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar_rowvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_long_t,0))){
    SWIG_fail_ptr("LongScalar_rowvector",2,SWIGTYPE_p_SimpleEigen__RowVectorT_long_t);
  }
  
  result = (arg1)->rowvector((SimpleEigen::RowVector< long > const &)*arg2);
  {
    SimpleEigen::RowVector< long > * resultptr = new SimpleEigen::RowVector< long >((const SimpleEigen::RowVector< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar_colvector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  SimpleEigen::ColVector< long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::colvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::colvector",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::colvector",2,"SimpleEigen::ColVector< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar_colvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_long_t,0))){
    SWIG_fail_ptr("LongScalar_colvector",2,SWIGTYPE_p_SimpleEigen__ColVectorT_long_t);
  }
  
  result = (arg1)->colvector((SimpleEigen::ColVector< long > const &)*arg2);
  {
    SimpleEigen::ColVector< long > * resultptr = new SimpleEigen::ColVector< long >((const SimpleEigen::ColVector< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar_matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  SimpleEigen::Matrix< long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::matrix",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::matrix",2,"SimpleEigen::Matrix< long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar_matrix",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_long_t,0))){
    SWIG_fail_ptr("LongScalar_matrix",2,SWIGTYPE_p_SimpleEigen__MatrixT_long_t);
  }
  
  result = (arg1)->matrix(*arg2);
  {
    SimpleEigen::Matrix< long > * resultptr = new SimpleEigen::Matrix< long >((const SimpleEigen::Matrix< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  SimpleEigen::Array< long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::array",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::array",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::array",2,"SimpleEigen::Array< long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar_array",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_long_t,0))){
    SWIG_fail_ptr("LongScalar_array",2,SWIGTYPE_p_SimpleEigen__ArrayT_long_t);
  }
  
  result = (arg1)->array(*arg2);
  {
    SimpleEigen::Array< long > * resultptr = new SimpleEigen::Array< long >((const SimpleEigen::Array< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar_array2d__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  SimpleEigen::Array2D< long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array2D< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::array2d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::array2d",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::array2d",2,"SimpleEigen::Array2D< long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar_array2d",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__Array2DT_long_t,0))){
    SWIG_fail_ptr("LongScalar_array2d",2,SWIGTYPE_p_SimpleEigen__Array2DT_long_t);
  }
  
  result = (arg1)->array2d(*arg2);
  {
    SimpleEigen::Array2D< long > * resultptr = new SimpleEigen::Array2D< long >((const SimpleEigen::Array2D< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar_rowvector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< SimpleEigen::RowVector< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::rowvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::rowvector",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::rowvector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar_rowvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->rowvector(arg2);
  {
    SimpleEigen::RowVector< long > * resultptr = new SimpleEigen::RowVector< long >((const SimpleEigen::RowVector< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar_rowvector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongScalar_rowvector__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LongScalar_rowvector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LongScalar_rowvector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long >::rowvector(SimpleEigen::RowVector< long > const &)\n"
    "    SimpleEigen::Scalar< long >::rowvector(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_LongScalar_colvector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< SimpleEigen::ColVector< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::colvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::colvector",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::colvector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar_colvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->colvector(arg2);
  {
    SimpleEigen::ColVector< long > * resultptr = new SimpleEigen::ColVector< long >((const SimpleEigen::ColVector< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar_colvector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongScalar_colvector__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LongScalar_colvector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LongScalar_colvector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long >::colvector(SimpleEigen::ColVector< long > const &)\n"
    "    SimpleEigen::Scalar< long >::colvector(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_LongScalar_matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SwigValueWrapper< SimpleEigen::Matrix< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::matrix",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::matrix",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::matrix",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Scalar< long >::matrix",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar_matrix",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->matrix(arg2,arg3);
  {
    SimpleEigen::Matrix< long > * resultptr = new SimpleEigen::Matrix< long >((const SimpleEigen::Matrix< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar_matrix(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongScalar_matrix__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_LongScalar_matrix__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LongScalar_matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long >::matrix(SimpleEigen::Matrix< long > &)\n"
    "    SimpleEigen::Scalar< long >::matrix(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_LongScalar_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< SimpleEigen::Array< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::array",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::array",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::array",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar_array",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->array(arg2);
  {
    SimpleEigen::Array< long > * resultptr = new SimpleEigen::Array< long >((const SimpleEigen::Array< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar_array(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongScalar_array__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LongScalar_array__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LongScalar_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long >::array(SimpleEigen::Array< long > &)\n"
    "    SimpleEigen::Scalar< long >::array(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_LongScalar_array2d__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SwigValueWrapper< SimpleEigen::Array2D< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::array2d",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::array2d",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::array2d",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Scalar< long >::array2d",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar_array2d",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->array2d(arg2,arg3);
  {
    SimpleEigen::Array2D< long > * resultptr = new SimpleEigen::Array2D< long >((const SimpleEigen::Array2D< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar_array2d(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongScalar_array2d__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_LongScalar_array2d__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LongScalar_array2d'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long >::array2d(SimpleEigen::Array2D< long > &)\n"
    "    SimpleEigen::Scalar< long >::array2d(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_LongScalar___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  SimpleEigen::RowVector< long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator *",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator *",2,"SimpleEigen::RowVector< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_long_t,0))){
    SWIG_fail_ptr("LongScalar___mul",2,SWIGTYPE_p_SimpleEigen__RowVectorT_long_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::RowVector< long > const &)*arg2);
  {
    SimpleEigen::RowVector< long > * resultptr = new SimpleEigen::RowVector< long >((const SimpleEigen::RowVector< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  SimpleEigen::RowVector< long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator /",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator /",2,"SimpleEigen::RowVector< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_long_t,0))){
    SWIG_fail_ptr("LongScalar___div",2,SWIGTYPE_p_SimpleEigen__RowVectorT_long_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::RowVector< long > const &)*arg2);
  {
    SimpleEigen::RowVector< long > * resultptr = new SimpleEigen::RowVector< long >((const SimpleEigen::RowVector< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  SimpleEigen::RowVector< long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator +",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator +",2,"SimpleEigen::RowVector< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_long_t,0))){
    SWIG_fail_ptr("LongScalar___add",2,SWIGTYPE_p_SimpleEigen__RowVectorT_long_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::RowVector< long > const &)*arg2);
  {
    SimpleEigen::RowVector< long > * resultptr = new SimpleEigen::RowVector< long >((const SimpleEigen::RowVector< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  SimpleEigen::RowVector< long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator -",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator -",2,"SimpleEigen::RowVector< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_long_t,0))){
    SWIG_fail_ptr("LongScalar___sub",2,SWIGTYPE_p_SimpleEigen__RowVectorT_long_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::RowVector< long > const &)*arg2);
  {
    SimpleEigen::RowVector< long > * resultptr = new SimpleEigen::RowVector< long >((const SimpleEigen::RowVector< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar___mul__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  SimpleEigen::ColVector< long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator *",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator *",2,"SimpleEigen::ColVector< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_long_t,0))){
    SWIG_fail_ptr("LongScalar___mul",2,SWIGTYPE_p_SimpleEigen__ColVectorT_long_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::ColVector< long > const &)*arg2);
  {
    SimpleEigen::ColVector< long > * resultptr = new SimpleEigen::ColVector< long >((const SimpleEigen::ColVector< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar___div__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  SimpleEigen::ColVector< long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator /",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator /",2,"SimpleEigen::ColVector< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_long_t,0))){
    SWIG_fail_ptr("LongScalar___div",2,SWIGTYPE_p_SimpleEigen__ColVectorT_long_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::ColVector< long > const &)*arg2);
  {
    SimpleEigen::ColVector< long > * resultptr = new SimpleEigen::ColVector< long >((const SimpleEigen::ColVector< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar___add__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  SimpleEigen::ColVector< long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator +",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator +",2,"SimpleEigen::ColVector< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_long_t,0))){
    SWIG_fail_ptr("LongScalar___add",2,SWIGTYPE_p_SimpleEigen__ColVectorT_long_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::ColVector< long > const &)*arg2);
  {
    SimpleEigen::ColVector< long > * resultptr = new SimpleEigen::ColVector< long >((const SimpleEigen::ColVector< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar___sub__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  SimpleEigen::ColVector< long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator -",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator -",2,"SimpleEigen::ColVector< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_long_t,0))){
    SWIG_fail_ptr("LongScalar___sub",2,SWIGTYPE_p_SimpleEigen__ColVectorT_long_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::ColVector< long > const &)*arg2);
  {
    SimpleEigen::ColVector< long > * resultptr = new SimpleEigen::ColVector< long >((const SimpleEigen::ColVector< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar___mul__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  SimpleEigen::Matrix< long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator *",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator *",2,"SimpleEigen::Matrix< long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_long_t,0))){
    SWIG_fail_ptr("LongScalar___mul",2,SWIGTYPE_p_SimpleEigen__MatrixT_long_t);
  }
  
  result = (arg1)->operator *(*arg2);
  {
    SimpleEigen::Matrix< long > * resultptr = new SimpleEigen::Matrix< long >((const SimpleEigen::Matrix< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar___div__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  SimpleEigen::Matrix< long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator /",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator /",2,"SimpleEigen::Matrix< long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_long_t,0))){
    SWIG_fail_ptr("LongScalar___div",2,SWIGTYPE_p_SimpleEigen__MatrixT_long_t);
  }
  
  result = (arg1)->operator /(*arg2);
  {
    SimpleEigen::Matrix< long > * resultptr = new SimpleEigen::Matrix< long >((const SimpleEigen::Matrix< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar___add__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  SimpleEigen::Matrix< long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator +",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator +",2,"SimpleEigen::Matrix< long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_long_t,0))){
    SWIG_fail_ptr("LongScalar___add",2,SWIGTYPE_p_SimpleEigen__MatrixT_long_t);
  }
  
  result = (arg1)->operator +(*arg2);
  {
    SimpleEigen::Matrix< long > * resultptr = new SimpleEigen::Matrix< long >((const SimpleEigen::Matrix< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar___sub__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  SimpleEigen::Matrix< long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator -",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator -",2,"SimpleEigen::Matrix< long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_long_t,0))){
    SWIG_fail_ptr("LongScalar___sub",2,SWIGTYPE_p_SimpleEigen__MatrixT_long_t);
  }
  
  result = (arg1)->operator -(*arg2);
  {
    SimpleEigen::Matrix< long > * resultptr = new SimpleEigen::Matrix< long >((const SimpleEigen::Matrix< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar___mul__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  SimpleEigen::Array< long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator *",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator *",2,"SimpleEigen::Array< long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_long_t,0))){
    SWIG_fail_ptr("LongScalar___mul",2,SWIGTYPE_p_SimpleEigen__ArrayT_long_t);
  }
  
  result = (arg1)->operator *(*arg2);
  {
    SimpleEigen::Array< long > * resultptr = new SimpleEigen::Array< long >((const SimpleEigen::Array< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongScalar___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongScalar___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongScalar___mul__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongScalar___mul__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongScalar___mul__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LongScalar___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LongScalar___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long >::operator *(SimpleEigen::Scalar< long > const &)\n"
    "    SimpleEigen::Scalar< long >::operator *(long const &)\n"
    "    SimpleEigen::Scalar< long >::operator *(SimpleEigen::RowVector< long > const &)\n"
    "    SimpleEigen::Scalar< long >::operator *(SimpleEigen::ColVector< long > const &)\n"
    "    SimpleEigen::Scalar< long >::operator *(SimpleEigen::Matrix< long > &)\n"
    "    SimpleEigen::Scalar< long >::operator *(SimpleEigen::Array< long > &)\n");
  lua_error(L);return 0;
}


static int _wrap_LongScalar___div__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  SimpleEigen::Array< long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator /",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator /",2,"SimpleEigen::Array< long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_long_t,0))){
    SWIG_fail_ptr("LongScalar___div",2,SWIGTYPE_p_SimpleEigen__ArrayT_long_t);
  }
  
  result = (arg1)->operator /(*arg2);
  {
    SimpleEigen::Array< long > * resultptr = new SimpleEigen::Array< long >((const SimpleEigen::Array< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongScalar___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongScalar___div__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongScalar___div__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongScalar___div__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongScalar___div__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LongScalar___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LongScalar___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long >::operator /(SimpleEigen::Scalar< long > const &)\n"
    "    SimpleEigen::Scalar< long >::operator /(long const &)\n"
    "    SimpleEigen::Scalar< long >::operator /(SimpleEigen::RowVector< long > const &)\n"
    "    SimpleEigen::Scalar< long >::operator /(SimpleEigen::ColVector< long > const &)\n"
    "    SimpleEigen::Scalar< long >::operator /(SimpleEigen::Matrix< long > &)\n"
    "    SimpleEigen::Scalar< long >::operator /(SimpleEigen::Array< long > &)\n");
  lua_error(L);return 0;
}


static int _wrap_LongScalar___add__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  SimpleEigen::Array< long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator +",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator +",2,"SimpleEigen::Array< long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_long_t,0))){
    SWIG_fail_ptr("LongScalar___add",2,SWIGTYPE_p_SimpleEigen__ArrayT_long_t);
  }
  
  result = (arg1)->operator +(*arg2);
  {
    SimpleEigen::Array< long > * resultptr = new SimpleEigen::Array< long >((const SimpleEigen::Array< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongScalar___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongScalar___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongScalar___add__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongScalar___add__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongScalar___add__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LongScalar___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LongScalar___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long >::operator +(SimpleEigen::Scalar< long > const &)\n"
    "    SimpleEigen::Scalar< long >::operator +(long const &)\n"
    "    SimpleEigen::Scalar< long >::operator +(SimpleEigen::RowVector< long > const &)\n"
    "    SimpleEigen::Scalar< long >::operator +(SimpleEigen::ColVector< long > const &)\n"
    "    SimpleEigen::Scalar< long >::operator +(SimpleEigen::Matrix< long > &)\n"
    "    SimpleEigen::Scalar< long >::operator +(SimpleEigen::Array< long > &)\n");
  lua_error(L);return 0;
}


static int _wrap_LongScalar___sub__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  SimpleEigen::Array< long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator -",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::operator -",2,"SimpleEigen::Array< long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_long_t,0))){
    SWIG_fail_ptr("LongScalar___sub",2,SWIGTYPE_p_SimpleEigen__ArrayT_long_t);
  }
  
  result = (arg1)->operator -(*arg2);
  {
    SimpleEigen::Array< long > * resultptr = new SimpleEigen::Array< long >((const SimpleEigen::Array< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongScalar___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongScalar___sub__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongScalar___sub__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongScalar___sub__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LongScalar___sub__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LongScalar___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LongScalar___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long >::operator -(SimpleEigen::Scalar< long > const &)\n"
    "    SimpleEigen::Scalar< long >::operator -(long const &)\n"
    "    SimpleEigen::Scalar< long >::operator -(SimpleEigen::RowVector< long > const &)\n"
    "    SimpleEigen::Scalar< long >::operator -(SimpleEigen::ColVector< long > const &)\n"
    "    SimpleEigen::Scalar< long >::operator -(SimpleEigen::Matrix< long > &)\n"
    "    SimpleEigen::Scalar< long >::operator -(SimpleEigen::Array< long > &)\n");
  lua_error(L);return 0;
}


static int _wrap_LongScalar_get_value(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::get_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::get_value",1,"SimpleEigen::Scalar< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar_get_value",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  result = (long)(arg1)->get_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar_set_value(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  long *arg2 = 0 ;
  long temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::set_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::set_value",1,"SimpleEigen::Scalar< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long >::set_value",2,"long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar_set_value",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  temp2=(long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->set_value((long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar_abs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::abs",1,"SimpleEigen::Scalar< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar_abs",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  result = (arg1)->abs();
  {
    SimpleEigen::Scalar< long > * resultptr = new SimpleEigen::Scalar< long >((const SimpleEigen::Scalar< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar_fabs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::fabs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::fabs",1,"SimpleEigen::Scalar< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar_fabs",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  result = (arg1)->fabs();
  {
    SimpleEigen::Scalar< long > * resultptr = new SimpleEigen::Scalar< long >((const SimpleEigen::Scalar< long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LongScalar_print(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long >::print",1,"SimpleEigen::Scalar< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,0))){
    SWIG_fail_ptr("LongScalar_print",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LongScalar(void *obj) {
SimpleEigen::Scalar< long > *arg1 = (SimpleEigen::Scalar< long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_LongScalar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LongScalar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LongScalar_attributes[] = {
    { "val", _wrap_LongScalar_val_get, _wrap_LongScalar_val_set },
    {0,0,0}
};
static swig_lua_method swig_LongScalar_methods[]= {
    { "aplus", _wrap_LongScalar_aplus},
    { "aminus", _wrap_LongScalar_aminus},
    { "atimes", _wrap_LongScalar_atimes},
    { "adiv", _wrap_LongScalar_adiv},
    { "rowvector", _wrap_LongScalar_rowvector},
    { "colvector", _wrap_LongScalar_colvector},
    { "matrix", _wrap_LongScalar_matrix},
    { "array", _wrap_LongScalar_array},
    { "array2d", _wrap_LongScalar_array2d},
    { "__mul", _wrap_LongScalar___mul},
    { "__div", _wrap_LongScalar___div},
    { "__add", _wrap_LongScalar___add},
    { "__sub", _wrap_LongScalar___sub},
    { "get_value", _wrap_LongScalar_get_value},
    { "set_value", _wrap_LongScalar_set_value},
    { "abs", _wrap_LongScalar_abs},
    { "fabs", _wrap_LongScalar_fabs},
    { "print", _wrap_LongScalar_print},
    {0,0}
};
static swig_lua_method swig_LongScalar_meta[] = {
    { "__mul", _wrap_LongScalar___mul},
    { "__div", _wrap_LongScalar___div},
    { "__add", _wrap_LongScalar___add},
    { "__sub", _wrap_LongScalar___sub},
    {0,0}
};

static swig_lua_attribute swig_LongScalar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LongScalar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LongScalar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LongScalar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LongScalar_Sf_SwigStatic = {
    "LongScalar",
    swig_LongScalar_Sf_SwigStatic_methods,
    swig_LongScalar_Sf_SwigStatic_attributes,
    swig_LongScalar_Sf_SwigStatic_constants,
    swig_LongScalar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LongScalar_bases[] = {0,0};
static const char *swig_LongScalar_base_names[] = {"SimpleEigen::Base *",0};
static swig_lua_class _wrap_class_LongScalar = { "LongScalar", "LongScalar", &SWIGTYPE_p_SimpleEigen__ScalarT_long_t,_proxy__wrap_new_LongScalar, swig_delete_LongScalar, swig_LongScalar_methods, swig_LongScalar_attributes, &swig_LongScalar_Sf_SwigStatic, swig_LongScalar_meta, swig_LongScalar_bases, swig_LongScalar_base_names };

static int _wrap_ULongScalar_val_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  unsigned long arg2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::val",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::val",2,"unsigned long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar_val_set",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned long)lua_tonumber(L, 2);
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar_val_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::val",1,"SimpleEigen::Scalar< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar_val_get",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  result = (unsigned long) ((arg1)->val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ULongScalar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  unsigned long *arg1 = 0 ;
  unsigned long temp1 ;
  SimpleEigen::Scalar< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::Scalar",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::Scalar",1,"unsigned long const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  temp1=(unsigned long)lua_tonumber(L,1); arg1=&temp1;
  result = (SimpleEigen::Scalar< unsigned long > *)new SimpleEigen::Scalar< unsigned long >((unsigned long const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ULongScalar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = 0 ;
  SimpleEigen::Scalar< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::Scalar",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::Scalar",1,"SimpleEigen::Scalar< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("new_ULongScalar",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  result = (SimpleEigen::Scalar< unsigned long > *)new SimpleEigen::Scalar< unsigned long >((SimpleEigen::Scalar< unsigned long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ULongScalar(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ULongScalar__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ULongScalar__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ULongScalar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< unsigned long >::Scalar(unsigned long const &)\n"
    "    SimpleEigen::Scalar< unsigned long >::Scalar(SimpleEigen::Scalar< unsigned long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ULongScalar___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  SimpleEigen::Scalar< unsigned long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator +",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator +",2,"SimpleEigen::Scalar< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___add",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::Scalar< unsigned long > const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned long > * resultptr = new SimpleEigen::Scalar< unsigned long >((const SimpleEigen::Scalar< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  SimpleEigen::Scalar< unsigned long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator -",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator -",2,"SimpleEigen::Scalar< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___sub",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::Scalar< unsigned long > const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned long > * resultptr = new SimpleEigen::Scalar< unsigned long >((const SimpleEigen::Scalar< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  SimpleEigen::Scalar< unsigned long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator *",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator *",2,"SimpleEigen::Scalar< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___mul",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::Scalar< unsigned long > const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned long > * resultptr = new SimpleEigen::Scalar< unsigned long >((const SimpleEigen::Scalar< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  SimpleEigen::Scalar< unsigned long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator /",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator /",2,"SimpleEigen::Scalar< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___div",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::Scalar< unsigned long > const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned long > * resultptr = new SimpleEigen::Scalar< unsigned long >((const SimpleEigen::Scalar< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator +",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator +",2,"unsigned long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned long)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator +((unsigned long const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned long > * resultptr = new SimpleEigen::Scalar< unsigned long >((const SimpleEigen::Scalar< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator -",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator -",2,"unsigned long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned long)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator -((unsigned long const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned long > * resultptr = new SimpleEigen::Scalar< unsigned long >((const SimpleEigen::Scalar< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator *",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator *",2,"unsigned long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned long)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator *((unsigned long const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned long > * resultptr = new SimpleEigen::Scalar< unsigned long >((const SimpleEigen::Scalar< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator /",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator /",2,"unsigned long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned long)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator /((unsigned long const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned long > * resultptr = new SimpleEigen::Scalar< unsigned long >((const SimpleEigen::Scalar< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar_aplus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::aplus",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::aplus",2,"unsigned long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar_aplus",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aplus((unsigned long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar_aminus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::aminus",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::aminus",2,"unsigned long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar_aminus",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aminus((unsigned long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar_atimes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::atimes",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::atimes",2,"unsigned long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar_atimes",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->atimes((unsigned long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar_adiv__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::adiv",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::adiv",2,"unsigned long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar_adiv",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->adiv((unsigned long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar_aplus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  SimpleEigen::Scalar< unsigned long > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::aplus",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::aplus",2,"SimpleEigen::Scalar< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar_aplus",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar_aplus",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  (arg1)->aplus((SimpleEigen::Scalar< unsigned long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar_aplus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULongScalar_aplus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ULongScalar_aplus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ULongScalar_aplus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< unsigned long >::aplus(unsigned long const &)\n"
    "    SimpleEigen::Scalar< unsigned long >::aplus(SimpleEigen::Scalar< unsigned long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ULongScalar_aminus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  SimpleEigen::Scalar< unsigned long > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::aminus",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::aminus",2,"SimpleEigen::Scalar< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar_aminus",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar_aminus",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  (arg1)->aminus((SimpleEigen::Scalar< unsigned long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar_aminus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULongScalar_aminus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ULongScalar_aminus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ULongScalar_aminus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< unsigned long >::aminus(unsigned long const &)\n"
    "    SimpleEigen::Scalar< unsigned long >::aminus(SimpleEigen::Scalar< unsigned long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ULongScalar_atimes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  SimpleEigen::Scalar< unsigned long > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::atimes",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::atimes",2,"SimpleEigen::Scalar< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar_atimes",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar_atimes",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  (arg1)->atimes((SimpleEigen::Scalar< unsigned long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar_atimes(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULongScalar_atimes__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ULongScalar_atimes__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ULongScalar_atimes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< unsigned long >::atimes(unsigned long const &)\n"
    "    SimpleEigen::Scalar< unsigned long >::atimes(SimpleEigen::Scalar< unsigned long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ULongScalar_adiv__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  SimpleEigen::Scalar< unsigned long > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::adiv",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::adiv",2,"SimpleEigen::Scalar< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar_adiv",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar_adiv",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  (arg1)->adiv((SimpleEigen::Scalar< unsigned long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar_adiv(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULongScalar_adiv__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ULongScalar_adiv__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ULongScalar_adiv'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< unsigned long >::adiv(unsigned long const &)\n"
    "    SimpleEigen::Scalar< unsigned long >::adiv(SimpleEigen::Scalar< unsigned long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ULongScalar_rowvector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  SimpleEigen::RowVector< unsigned long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::rowvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::rowvector",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::rowvector",2,"SimpleEigen::RowVector< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar_rowvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar_rowvector",2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_t);
  }
  
  result = (arg1)->rowvector((SimpleEigen::RowVector< unsigned long > const &)*arg2);
  {
    SimpleEigen::RowVector< unsigned long > * resultptr = new SimpleEigen::RowVector< unsigned long >((const SimpleEigen::RowVector< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar_colvector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  SimpleEigen::ColVector< unsigned long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::colvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::colvector",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::colvector",2,"SimpleEigen::ColVector< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar_colvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar_colvector",2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_t);
  }
  
  result = (arg1)->colvector((SimpleEigen::ColVector< unsigned long > const &)*arg2);
  {
    SimpleEigen::ColVector< unsigned long > * resultptr = new SimpleEigen::ColVector< unsigned long >((const SimpleEigen::ColVector< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar_matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  SimpleEigen::Matrix< unsigned long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::matrix",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::matrix",2,"SimpleEigen::Matrix< unsigned long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar_matrix",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar_matrix",2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_t);
  }
  
  result = (arg1)->matrix(*arg2);
  {
    SimpleEigen::Matrix< unsigned long > * resultptr = new SimpleEigen::Matrix< unsigned long >((const SimpleEigen::Matrix< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  SimpleEigen::Array< unsigned long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::array",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::array",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::array",2,"SimpleEigen::Array< unsigned long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar_array",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar_array",2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_t);
  }
  
  result = (arg1)->array(*arg2);
  {
    SimpleEigen::Array< unsigned long > * resultptr = new SimpleEigen::Array< unsigned long >((const SimpleEigen::Array< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar_array2d__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  SimpleEigen::Array2D< unsigned long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array2D< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::array2d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::array2d",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::array2d",2,"SimpleEigen::Array2D< unsigned long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar_array2d",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__Array2DT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar_array2d",2,SWIGTYPE_p_SimpleEigen__Array2DT_unsigned_long_t);
  }
  
  result = (arg1)->array2d(*arg2);
  {
    SimpleEigen::Array2D< unsigned long > * resultptr = new SimpleEigen::Array2D< unsigned long >((const SimpleEigen::Array2D< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar_rowvector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< SimpleEigen::RowVector< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::rowvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::rowvector",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::rowvector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar_rowvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->rowvector(arg2);
  {
    SimpleEigen::RowVector< unsigned long > * resultptr = new SimpleEigen::RowVector< unsigned long >((const SimpleEigen::RowVector< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar_rowvector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULongScalar_rowvector__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ULongScalar_rowvector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ULongScalar_rowvector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< unsigned long >::rowvector(SimpleEigen::RowVector< unsigned long > const &)\n"
    "    SimpleEigen::Scalar< unsigned long >::rowvector(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ULongScalar_colvector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< SimpleEigen::ColVector< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::colvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::colvector",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::colvector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar_colvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->colvector(arg2);
  {
    SimpleEigen::ColVector< unsigned long > * resultptr = new SimpleEigen::ColVector< unsigned long >((const SimpleEigen::ColVector< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar_colvector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULongScalar_colvector__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ULongScalar_colvector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ULongScalar_colvector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< unsigned long >::colvector(SimpleEigen::ColVector< unsigned long > const &)\n"
    "    SimpleEigen::Scalar< unsigned long >::colvector(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ULongScalar_matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SwigValueWrapper< SimpleEigen::Matrix< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::matrix",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::matrix",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::matrix",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::matrix",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar_matrix",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->matrix(arg2,arg3);
  {
    SimpleEigen::Matrix< unsigned long > * resultptr = new SimpleEigen::Matrix< unsigned long >((const SimpleEigen::Matrix< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar_matrix(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULongScalar_matrix__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ULongScalar_matrix__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ULongScalar_matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< unsigned long >::matrix(SimpleEigen::Matrix< unsigned long > &)\n"
    "    SimpleEigen::Scalar< unsigned long >::matrix(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ULongScalar_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< SimpleEigen::Array< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::array",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::array",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::array",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar_array",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->array(arg2);
  {
    SimpleEigen::Array< unsigned long > * resultptr = new SimpleEigen::Array< unsigned long >((const SimpleEigen::Array< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar_array(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULongScalar_array__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ULongScalar_array__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ULongScalar_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< unsigned long >::array(SimpleEigen::Array< unsigned long > &)\n"
    "    SimpleEigen::Scalar< unsigned long >::array(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ULongScalar_array2d__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SwigValueWrapper< SimpleEigen::Array2D< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::array2d",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::array2d",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::array2d",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::array2d",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar_array2d",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->array2d(arg2,arg3);
  {
    SimpleEigen::Array2D< unsigned long > * resultptr = new SimpleEigen::Array2D< unsigned long >((const SimpleEigen::Array2D< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar_array2d(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULongScalar_array2d__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ULongScalar_array2d__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ULongScalar_array2d'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< unsigned long >::array2d(SimpleEigen::Array2D< unsigned long > &)\n"
    "    SimpleEigen::Scalar< unsigned long >::array2d(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ULongScalar___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  SimpleEigen::RowVector< unsigned long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator *",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator *",2,"SimpleEigen::RowVector< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___mul",2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::RowVector< unsigned long > const &)*arg2);
  {
    SimpleEigen::RowVector< unsigned long > * resultptr = new SimpleEigen::RowVector< unsigned long >((const SimpleEigen::RowVector< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  SimpleEigen::RowVector< unsigned long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator /",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator /",2,"SimpleEigen::RowVector< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___div",2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::RowVector< unsigned long > const &)*arg2);
  {
    SimpleEigen::RowVector< unsigned long > * resultptr = new SimpleEigen::RowVector< unsigned long >((const SimpleEigen::RowVector< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  SimpleEigen::RowVector< unsigned long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator +",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator +",2,"SimpleEigen::RowVector< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___add",2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::RowVector< unsigned long > const &)*arg2);
  {
    SimpleEigen::RowVector< unsigned long > * resultptr = new SimpleEigen::RowVector< unsigned long >((const SimpleEigen::RowVector< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  SimpleEigen::RowVector< unsigned long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator -",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator -",2,"SimpleEigen::RowVector< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___sub",2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::RowVector< unsigned long > const &)*arg2);
  {
    SimpleEigen::RowVector< unsigned long > * resultptr = new SimpleEigen::RowVector< unsigned long >((const SimpleEigen::RowVector< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar___mul__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  SimpleEigen::ColVector< unsigned long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator *",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator *",2,"SimpleEigen::ColVector< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___mul",2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::ColVector< unsigned long > const &)*arg2);
  {
    SimpleEigen::ColVector< unsigned long > * resultptr = new SimpleEigen::ColVector< unsigned long >((const SimpleEigen::ColVector< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar___div__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  SimpleEigen::ColVector< unsigned long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator /",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator /",2,"SimpleEigen::ColVector< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___div",2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::ColVector< unsigned long > const &)*arg2);
  {
    SimpleEigen::ColVector< unsigned long > * resultptr = new SimpleEigen::ColVector< unsigned long >((const SimpleEigen::ColVector< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar___add__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  SimpleEigen::ColVector< unsigned long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator +",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator +",2,"SimpleEigen::ColVector< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___add",2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::ColVector< unsigned long > const &)*arg2);
  {
    SimpleEigen::ColVector< unsigned long > * resultptr = new SimpleEigen::ColVector< unsigned long >((const SimpleEigen::ColVector< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar___sub__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  SimpleEigen::ColVector< unsigned long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator -",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator -",2,"SimpleEigen::ColVector< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___sub",2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::ColVector< unsigned long > const &)*arg2);
  {
    SimpleEigen::ColVector< unsigned long > * resultptr = new SimpleEigen::ColVector< unsigned long >((const SimpleEigen::ColVector< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar___mul__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  SimpleEigen::Matrix< unsigned long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator *",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator *",2,"SimpleEigen::Matrix< unsigned long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___mul",2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_t);
  }
  
  result = (arg1)->operator *(*arg2);
  {
    SimpleEigen::Matrix< unsigned long > * resultptr = new SimpleEigen::Matrix< unsigned long >((const SimpleEigen::Matrix< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar___div__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  SimpleEigen::Matrix< unsigned long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator /",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator /",2,"SimpleEigen::Matrix< unsigned long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___div",2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_t);
  }
  
  result = (arg1)->operator /(*arg2);
  {
    SimpleEigen::Matrix< unsigned long > * resultptr = new SimpleEigen::Matrix< unsigned long >((const SimpleEigen::Matrix< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar___add__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  SimpleEigen::Matrix< unsigned long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator +",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator +",2,"SimpleEigen::Matrix< unsigned long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___add",2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_t);
  }
  
  result = (arg1)->operator +(*arg2);
  {
    SimpleEigen::Matrix< unsigned long > * resultptr = new SimpleEigen::Matrix< unsigned long >((const SimpleEigen::Matrix< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar___sub__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  SimpleEigen::Matrix< unsigned long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator -",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator -",2,"SimpleEigen::Matrix< unsigned long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___sub",2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_t);
  }
  
  result = (arg1)->operator -(*arg2);
  {
    SimpleEigen::Matrix< unsigned long > * resultptr = new SimpleEigen::Matrix< unsigned long >((const SimpleEigen::Matrix< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar___mul__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  SimpleEigen::Array< unsigned long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator *",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator *",2,"SimpleEigen::Array< unsigned long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___mul",2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_t);
  }
  
  result = (arg1)->operator *(*arg2);
  {
    SimpleEigen::Array< unsigned long > * resultptr = new SimpleEigen::Array< unsigned long >((const SimpleEigen::Array< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULongScalar___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULongScalar___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULongScalar___mul__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULongScalar___mul__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULongScalar___mul__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ULongScalar___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ULongScalar___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< unsigned long >::operator *(SimpleEigen::Scalar< unsigned long > const &)\n"
    "    SimpleEigen::Scalar< unsigned long >::operator *(unsigned long const &)\n"
    "    SimpleEigen::Scalar< unsigned long >::operator *(SimpleEigen::RowVector< unsigned long > const &)\n"
    "    SimpleEigen::Scalar< unsigned long >::operator *(SimpleEigen::ColVector< unsigned long > const &)\n"
    "    SimpleEigen::Scalar< unsigned long >::operator *(SimpleEigen::Matrix< unsigned long > &)\n"
    "    SimpleEigen::Scalar< unsigned long >::operator *(SimpleEigen::Array< unsigned long > &)\n");
  lua_error(L);return 0;
}


static int _wrap_ULongScalar___div__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  SimpleEigen::Array< unsigned long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator /",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator /",2,"SimpleEigen::Array< unsigned long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___div",2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_t);
  }
  
  result = (arg1)->operator /(*arg2);
  {
    SimpleEigen::Array< unsigned long > * resultptr = new SimpleEigen::Array< unsigned long >((const SimpleEigen::Array< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULongScalar___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULongScalar___div__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULongScalar___div__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULongScalar___div__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULongScalar___div__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ULongScalar___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ULongScalar___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< unsigned long >::operator /(SimpleEigen::Scalar< unsigned long > const &)\n"
    "    SimpleEigen::Scalar< unsigned long >::operator /(unsigned long const &)\n"
    "    SimpleEigen::Scalar< unsigned long >::operator /(SimpleEigen::RowVector< unsigned long > const &)\n"
    "    SimpleEigen::Scalar< unsigned long >::operator /(SimpleEigen::ColVector< unsigned long > const &)\n"
    "    SimpleEigen::Scalar< unsigned long >::operator /(SimpleEigen::Matrix< unsigned long > &)\n"
    "    SimpleEigen::Scalar< unsigned long >::operator /(SimpleEigen::Array< unsigned long > &)\n");
  lua_error(L);return 0;
}


static int _wrap_ULongScalar___add__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  SimpleEigen::Array< unsigned long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator +",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator +",2,"SimpleEigen::Array< unsigned long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___add",2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_t);
  }
  
  result = (arg1)->operator +(*arg2);
  {
    SimpleEigen::Array< unsigned long > * resultptr = new SimpleEigen::Array< unsigned long >((const SimpleEigen::Array< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULongScalar___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULongScalar___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULongScalar___add__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULongScalar___add__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULongScalar___add__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ULongScalar___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ULongScalar___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< unsigned long >::operator +(SimpleEigen::Scalar< unsigned long > const &)\n"
    "    SimpleEigen::Scalar< unsigned long >::operator +(unsigned long const &)\n"
    "    SimpleEigen::Scalar< unsigned long >::operator +(SimpleEigen::RowVector< unsigned long > const &)\n"
    "    SimpleEigen::Scalar< unsigned long >::operator +(SimpleEigen::ColVector< unsigned long > const &)\n"
    "    SimpleEigen::Scalar< unsigned long >::operator +(SimpleEigen::Matrix< unsigned long > &)\n"
    "    SimpleEigen::Scalar< unsigned long >::operator +(SimpleEigen::Array< unsigned long > &)\n");
  lua_error(L);return 0;
}


static int _wrap_ULongScalar___sub__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  SimpleEigen::Array< unsigned long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator -",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::operator -",2,"SimpleEigen::Array< unsigned long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar___sub",2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_t);
  }
  
  result = (arg1)->operator -(*arg2);
  {
    SimpleEigen::Array< unsigned long > * resultptr = new SimpleEigen::Array< unsigned long >((const SimpleEigen::Array< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULongScalar___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULongScalar___sub__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULongScalar___sub__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULongScalar___sub__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULongScalar___sub__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ULongScalar___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ULongScalar___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< unsigned long >::operator -(SimpleEigen::Scalar< unsigned long > const &)\n"
    "    SimpleEigen::Scalar< unsigned long >::operator -(unsigned long const &)\n"
    "    SimpleEigen::Scalar< unsigned long >::operator -(SimpleEigen::RowVector< unsigned long > const &)\n"
    "    SimpleEigen::Scalar< unsigned long >::operator -(SimpleEigen::ColVector< unsigned long > const &)\n"
    "    SimpleEigen::Scalar< unsigned long >::operator -(SimpleEigen::Matrix< unsigned long > &)\n"
    "    SimpleEigen::Scalar< unsigned long >::operator -(SimpleEigen::Array< unsigned long > &)\n");
  lua_error(L);return 0;
}


static int _wrap_ULongScalar_get_value(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::get_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::get_value",1,"SimpleEigen::Scalar< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar_get_value",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->get_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar_set_value(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::set_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::set_value",1,"SimpleEigen::Scalar< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::set_value",2,"unsigned long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar_set_value",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->set_value((unsigned long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar_abs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::abs",1,"SimpleEigen::Scalar< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar_abs",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  result = (arg1)->abs();
  {
    SimpleEigen::Scalar< unsigned long > * resultptr = new SimpleEigen::Scalar< unsigned long >((const SimpleEigen::Scalar< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar_fabs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::fabs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::fabs",1,"SimpleEigen::Scalar< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar_fabs",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  result = (arg1)->fabs();
  {
    SimpleEigen::Scalar< unsigned long > * resultptr = new SimpleEigen::Scalar< unsigned long >((const SimpleEigen::Scalar< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULongScalar_print(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long >::print",1,"SimpleEigen::Scalar< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,0))){
    SWIG_fail_ptr("ULongScalar_print",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ULongScalar(void *obj) {
SimpleEigen::Scalar< unsigned long > *arg1 = (SimpleEigen::Scalar< unsigned long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ULongScalar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ULongScalar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ULongScalar_attributes[] = {
    { "val", _wrap_ULongScalar_val_get, _wrap_ULongScalar_val_set },
    {0,0,0}
};
static swig_lua_method swig_ULongScalar_methods[]= {
    { "aplus", _wrap_ULongScalar_aplus},
    { "aminus", _wrap_ULongScalar_aminus},
    { "atimes", _wrap_ULongScalar_atimes},
    { "adiv", _wrap_ULongScalar_adiv},
    { "rowvector", _wrap_ULongScalar_rowvector},
    { "colvector", _wrap_ULongScalar_colvector},
    { "matrix", _wrap_ULongScalar_matrix},
    { "array", _wrap_ULongScalar_array},
    { "array2d", _wrap_ULongScalar_array2d},
    { "__mul", _wrap_ULongScalar___mul},
    { "__div", _wrap_ULongScalar___div},
    { "__add", _wrap_ULongScalar___add},
    { "__sub", _wrap_ULongScalar___sub},
    { "get_value", _wrap_ULongScalar_get_value},
    { "set_value", _wrap_ULongScalar_set_value},
    { "abs", _wrap_ULongScalar_abs},
    { "fabs", _wrap_ULongScalar_fabs},
    { "print", _wrap_ULongScalar_print},
    {0,0}
};
static swig_lua_method swig_ULongScalar_meta[] = {
    { "__mul", _wrap_ULongScalar___mul},
    { "__div", _wrap_ULongScalar___div},
    { "__add", _wrap_ULongScalar___add},
    { "__sub", _wrap_ULongScalar___sub},
    {0,0}
};

static swig_lua_attribute swig_ULongScalar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ULongScalar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ULongScalar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ULongScalar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ULongScalar_Sf_SwigStatic = {
    "ULongScalar",
    swig_ULongScalar_Sf_SwigStatic_methods,
    swig_ULongScalar_Sf_SwigStatic_attributes,
    swig_ULongScalar_Sf_SwigStatic_constants,
    swig_ULongScalar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ULongScalar_bases[] = {0,0};
static const char *swig_ULongScalar_base_names[] = {"SimpleEigen::Base *",0};
static swig_lua_class _wrap_class_ULongScalar = { "ULongScalar", "ULongScalar", &SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,_proxy__wrap_new_ULongScalar, swig_delete_ULongScalar, swig_ULongScalar_methods, swig_ULongScalar_attributes, &swig_ULongScalar_Sf_SwigStatic, swig_ULongScalar_meta, swig_ULongScalar_bases, swig_ULongScalar_base_names };

static int _wrap_LLongScalar_val_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  long long arg2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::val",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::val",2,"long long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar_val_set",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  arg2 = (long long)lua_tonumber(L, 2);
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar_val_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::val",1,"SimpleEigen::Scalar< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar_val_get",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  result = (long long) ((arg1)->val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLongScalar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  long long *arg1 = 0 ;
  long long temp1 ;
  SimpleEigen::Scalar< long long > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::Scalar",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::Scalar",1,"long long const &");
  temp1=(long long)lua_tonumber(L,1); arg1=&temp1;
  result = (SimpleEigen::Scalar< long long > *)new SimpleEigen::Scalar< long long >((long long const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLongScalar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = 0 ;
  SimpleEigen::Scalar< long long > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::Scalar",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::Scalar",1,"SimpleEigen::Scalar< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("new_LLongScalar",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  result = (SimpleEigen::Scalar< long long > *)new SimpleEigen::Scalar< long long >((SimpleEigen::Scalar< long long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LLongScalar(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_LLongScalar__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_LLongScalar__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_LLongScalar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long long >::Scalar(long long const &)\n"
    "    SimpleEigen::Scalar< long long >::Scalar(SimpleEigen::Scalar< long long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLongScalar___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  SimpleEigen::Scalar< long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator +",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator +",2,"SimpleEigen::Scalar< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___add",2,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::Scalar< long long > const &)*arg2);
  {
    SimpleEigen::Scalar< long long > * resultptr = new SimpleEigen::Scalar< long long >((const SimpleEigen::Scalar< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  SimpleEigen::Scalar< long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator -",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator -",2,"SimpleEigen::Scalar< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___sub",2,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::Scalar< long long > const &)*arg2);
  {
    SimpleEigen::Scalar< long long > * resultptr = new SimpleEigen::Scalar< long long >((const SimpleEigen::Scalar< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  SimpleEigen::Scalar< long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator *",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator *",2,"SimpleEigen::Scalar< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___mul",2,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::Scalar< long long > const &)*arg2);
  {
    SimpleEigen::Scalar< long long > * resultptr = new SimpleEigen::Scalar< long long >((const SimpleEigen::Scalar< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  SimpleEigen::Scalar< long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator /",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator /",2,"SimpleEigen::Scalar< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___div",2,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::Scalar< long long > const &)*arg2);
  {
    SimpleEigen::Scalar< long long > * resultptr = new SimpleEigen::Scalar< long long >((const SimpleEigen::Scalar< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator +",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator +",2,"long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  temp2=(long long)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator +((long long const &)*arg2);
  {
    SimpleEigen::Scalar< long long > * resultptr = new SimpleEigen::Scalar< long long >((const SimpleEigen::Scalar< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator -",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator -",2,"long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  temp2=(long long)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator -((long long const &)*arg2);
  {
    SimpleEigen::Scalar< long long > * resultptr = new SimpleEigen::Scalar< long long >((const SimpleEigen::Scalar< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator *",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator *",2,"long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  temp2=(long long)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator *((long long const &)*arg2);
  {
    SimpleEigen::Scalar< long long > * resultptr = new SimpleEigen::Scalar< long long >((const SimpleEigen::Scalar< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator /",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator /",2,"long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  temp2=(long long)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator /((long long const &)*arg2);
  {
    SimpleEigen::Scalar< long long > * resultptr = new SimpleEigen::Scalar< long long >((const SimpleEigen::Scalar< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar_aplus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::aplus",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::aplus",2,"long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar_aplus",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  temp2=(long long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aplus((long long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar_aminus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::aminus",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::aminus",2,"long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar_aminus",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  temp2=(long long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aminus((long long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar_atimes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::atimes",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::atimes",2,"long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar_atimes",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  temp2=(long long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->atimes((long long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar_adiv__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::adiv",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::adiv",2,"long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar_adiv",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  temp2=(long long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->adiv((long long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar_aplus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  SimpleEigen::Scalar< long long > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::aplus",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::aplus",2,"SimpleEigen::Scalar< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar_aplus",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar_aplus",2,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  (arg1)->aplus((SimpleEigen::Scalar< long long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar_aplus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLongScalar_aplus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LLongScalar_aplus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LLongScalar_aplus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long long >::aplus(long long const &)\n"
    "    SimpleEigen::Scalar< long long >::aplus(SimpleEigen::Scalar< long long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLongScalar_aminus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  SimpleEigen::Scalar< long long > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::aminus",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::aminus",2,"SimpleEigen::Scalar< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar_aminus",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar_aminus",2,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  (arg1)->aminus((SimpleEigen::Scalar< long long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar_aminus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLongScalar_aminus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LLongScalar_aminus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LLongScalar_aminus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long long >::aminus(long long const &)\n"
    "    SimpleEigen::Scalar< long long >::aminus(SimpleEigen::Scalar< long long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLongScalar_atimes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  SimpleEigen::Scalar< long long > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::atimes",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::atimes",2,"SimpleEigen::Scalar< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar_atimes",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar_atimes",2,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  (arg1)->atimes((SimpleEigen::Scalar< long long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar_atimes(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLongScalar_atimes__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LLongScalar_atimes__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LLongScalar_atimes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long long >::atimes(long long const &)\n"
    "    SimpleEigen::Scalar< long long >::atimes(SimpleEigen::Scalar< long long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLongScalar_adiv__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  SimpleEigen::Scalar< long long > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::adiv",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::adiv",2,"SimpleEigen::Scalar< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar_adiv",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar_adiv",2,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  (arg1)->adiv((SimpleEigen::Scalar< long long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar_adiv(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLongScalar_adiv__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LLongScalar_adiv__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LLongScalar_adiv'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long long >::adiv(long long const &)\n"
    "    SimpleEigen::Scalar< long long >::adiv(SimpleEigen::Scalar< long long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLongScalar_rowvector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  SimpleEigen::RowVector< long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::rowvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::rowvector",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::rowvector",2,"SimpleEigen::RowVector< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar_rowvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar_rowvector",2,SWIGTYPE_p_SimpleEigen__RowVectorT_long_long_t);
  }
  
  result = (arg1)->rowvector((SimpleEigen::RowVector< long long > const &)*arg2);
  {
    SimpleEigen::RowVector< long long > * resultptr = new SimpleEigen::RowVector< long long >((const SimpleEigen::RowVector< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar_colvector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  SimpleEigen::ColVector< long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::colvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::colvector",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::colvector",2,"SimpleEigen::ColVector< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar_colvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar_colvector",2,SWIGTYPE_p_SimpleEigen__ColVectorT_long_long_t);
  }
  
  result = (arg1)->colvector((SimpleEigen::ColVector< long long > const &)*arg2);
  {
    SimpleEigen::ColVector< long long > * resultptr = new SimpleEigen::ColVector< long long >((const SimpleEigen::ColVector< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar_matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  SimpleEigen::Matrix< long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::matrix",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::matrix",2,"SimpleEigen::Matrix< long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar_matrix",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar_matrix",2,SWIGTYPE_p_SimpleEigen__MatrixT_long_long_t);
  }
  
  result = (arg1)->matrix(*arg2);
  {
    SimpleEigen::Matrix< long long > * resultptr = new SimpleEigen::Matrix< long long >((const SimpleEigen::Matrix< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  SimpleEigen::Array< long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::array",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::array",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::array",2,"SimpleEigen::Array< long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar_array",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar_array",2,SWIGTYPE_p_SimpleEigen__ArrayT_long_long_t);
  }
  
  result = (arg1)->array(*arg2);
  {
    SimpleEigen::Array< long long > * resultptr = new SimpleEigen::Array< long long >((const SimpleEigen::Array< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar_array2d__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  SimpleEigen::Array2D< long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array2D< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::array2d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::array2d",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::array2d",2,"SimpleEigen::Array2D< long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar_array2d",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__Array2DT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar_array2d",2,SWIGTYPE_p_SimpleEigen__Array2DT_long_long_t);
  }
  
  result = (arg1)->array2d(*arg2);
  {
    SimpleEigen::Array2D< long long > * resultptr = new SimpleEigen::Array2D< long long >((const SimpleEigen::Array2D< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar_rowvector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< SimpleEigen::RowVector< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::rowvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::rowvector",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::rowvector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar_rowvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->rowvector(arg2);
  {
    SimpleEigen::RowVector< long long > * resultptr = new SimpleEigen::RowVector< long long >((const SimpleEigen::RowVector< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar_rowvector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLongScalar_rowvector__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LLongScalar_rowvector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LLongScalar_rowvector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long long >::rowvector(SimpleEigen::RowVector< long long > const &)\n"
    "    SimpleEigen::Scalar< long long >::rowvector(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_LLongScalar_colvector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< SimpleEigen::ColVector< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::colvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::colvector",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::colvector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar_colvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->colvector(arg2);
  {
    SimpleEigen::ColVector< long long > * resultptr = new SimpleEigen::ColVector< long long >((const SimpleEigen::ColVector< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar_colvector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLongScalar_colvector__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LLongScalar_colvector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LLongScalar_colvector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long long >::colvector(SimpleEigen::ColVector< long long > const &)\n"
    "    SimpleEigen::Scalar< long long >::colvector(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_LLongScalar_matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SwigValueWrapper< SimpleEigen::Matrix< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::matrix",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::matrix",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::matrix",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::matrix",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar_matrix",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->matrix(arg2,arg3);
  {
    SimpleEigen::Matrix< long long > * resultptr = new SimpleEigen::Matrix< long long >((const SimpleEigen::Matrix< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar_matrix(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLongScalar_matrix__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_LLongScalar_matrix__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LLongScalar_matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long long >::matrix(SimpleEigen::Matrix< long long > &)\n"
    "    SimpleEigen::Scalar< long long >::matrix(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_LLongScalar_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< SimpleEigen::Array< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::array",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::array",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::array",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar_array",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->array(arg2);
  {
    SimpleEigen::Array< long long > * resultptr = new SimpleEigen::Array< long long >((const SimpleEigen::Array< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar_array(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLongScalar_array__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LLongScalar_array__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LLongScalar_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long long >::array(SimpleEigen::Array< long long > &)\n"
    "    SimpleEigen::Scalar< long long >::array(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_LLongScalar_array2d__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SwigValueWrapper< SimpleEigen::Array2D< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::array2d",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::array2d",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::array2d",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::array2d",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar_array2d",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->array2d(arg2,arg3);
  {
    SimpleEigen::Array2D< long long > * resultptr = new SimpleEigen::Array2D< long long >((const SimpleEigen::Array2D< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar_array2d(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLongScalar_array2d__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_LLongScalar_array2d__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LLongScalar_array2d'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long long >::array2d(SimpleEigen::Array2D< long long > &)\n"
    "    SimpleEigen::Scalar< long long >::array2d(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_LLongScalar___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  SimpleEigen::RowVector< long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator *",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator *",2,"SimpleEigen::RowVector< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___mul",2,SWIGTYPE_p_SimpleEigen__RowVectorT_long_long_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::RowVector< long long > const &)*arg2);
  {
    SimpleEigen::RowVector< long long > * resultptr = new SimpleEigen::RowVector< long long >((const SimpleEigen::RowVector< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  SimpleEigen::RowVector< long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator /",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator /",2,"SimpleEigen::RowVector< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___div",2,SWIGTYPE_p_SimpleEigen__RowVectorT_long_long_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::RowVector< long long > const &)*arg2);
  {
    SimpleEigen::RowVector< long long > * resultptr = new SimpleEigen::RowVector< long long >((const SimpleEigen::RowVector< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  SimpleEigen::RowVector< long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator +",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator +",2,"SimpleEigen::RowVector< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___add",2,SWIGTYPE_p_SimpleEigen__RowVectorT_long_long_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::RowVector< long long > const &)*arg2);
  {
    SimpleEigen::RowVector< long long > * resultptr = new SimpleEigen::RowVector< long long >((const SimpleEigen::RowVector< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  SimpleEigen::RowVector< long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator -",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator -",2,"SimpleEigen::RowVector< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___sub",2,SWIGTYPE_p_SimpleEigen__RowVectorT_long_long_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::RowVector< long long > const &)*arg2);
  {
    SimpleEigen::RowVector< long long > * resultptr = new SimpleEigen::RowVector< long long >((const SimpleEigen::RowVector< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar___mul__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  SimpleEigen::ColVector< long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator *",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator *",2,"SimpleEigen::ColVector< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___mul",2,SWIGTYPE_p_SimpleEigen__ColVectorT_long_long_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::ColVector< long long > const &)*arg2);
  {
    SimpleEigen::ColVector< long long > * resultptr = new SimpleEigen::ColVector< long long >((const SimpleEigen::ColVector< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar___div__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  SimpleEigen::ColVector< long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator /",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator /",2,"SimpleEigen::ColVector< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___div",2,SWIGTYPE_p_SimpleEigen__ColVectorT_long_long_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::ColVector< long long > const &)*arg2);
  {
    SimpleEigen::ColVector< long long > * resultptr = new SimpleEigen::ColVector< long long >((const SimpleEigen::ColVector< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar___add__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  SimpleEigen::ColVector< long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator +",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator +",2,"SimpleEigen::ColVector< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___add",2,SWIGTYPE_p_SimpleEigen__ColVectorT_long_long_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::ColVector< long long > const &)*arg2);
  {
    SimpleEigen::ColVector< long long > * resultptr = new SimpleEigen::ColVector< long long >((const SimpleEigen::ColVector< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar___sub__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  SimpleEigen::ColVector< long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator -",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator -",2,"SimpleEigen::ColVector< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___sub",2,SWIGTYPE_p_SimpleEigen__ColVectorT_long_long_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::ColVector< long long > const &)*arg2);
  {
    SimpleEigen::ColVector< long long > * resultptr = new SimpleEigen::ColVector< long long >((const SimpleEigen::ColVector< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar___mul__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  SimpleEigen::Matrix< long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator *",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator *",2,"SimpleEigen::Matrix< long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___mul",2,SWIGTYPE_p_SimpleEigen__MatrixT_long_long_t);
  }
  
  result = (arg1)->operator *(*arg2);
  {
    SimpleEigen::Matrix< long long > * resultptr = new SimpleEigen::Matrix< long long >((const SimpleEigen::Matrix< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar___div__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  SimpleEigen::Matrix< long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator /",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator /",2,"SimpleEigen::Matrix< long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___div",2,SWIGTYPE_p_SimpleEigen__MatrixT_long_long_t);
  }
  
  result = (arg1)->operator /(*arg2);
  {
    SimpleEigen::Matrix< long long > * resultptr = new SimpleEigen::Matrix< long long >((const SimpleEigen::Matrix< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar___add__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  SimpleEigen::Matrix< long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator +",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator +",2,"SimpleEigen::Matrix< long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___add",2,SWIGTYPE_p_SimpleEigen__MatrixT_long_long_t);
  }
  
  result = (arg1)->operator +(*arg2);
  {
    SimpleEigen::Matrix< long long > * resultptr = new SimpleEigen::Matrix< long long >((const SimpleEigen::Matrix< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar___sub__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  SimpleEigen::Matrix< long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator -",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator -",2,"SimpleEigen::Matrix< long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___sub",2,SWIGTYPE_p_SimpleEigen__MatrixT_long_long_t);
  }
  
  result = (arg1)->operator -(*arg2);
  {
    SimpleEigen::Matrix< long long > * resultptr = new SimpleEigen::Matrix< long long >((const SimpleEigen::Matrix< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar___mul__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  SimpleEigen::Array< long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator *",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator *",2,"SimpleEigen::Array< long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___mul",2,SWIGTYPE_p_SimpleEigen__ArrayT_long_long_t);
  }
  
  result = (arg1)->operator *(*arg2);
  {
    SimpleEigen::Array< long long > * resultptr = new SimpleEigen::Array< long long >((const SimpleEigen::Array< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLongScalar___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLongScalar___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLongScalar___mul__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLongScalar___mul__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLongScalar___mul__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LLongScalar___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LLongScalar___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long long >::operator *(SimpleEigen::Scalar< long long > const &)\n"
    "    SimpleEigen::Scalar< long long >::operator *(long long const &)\n"
    "    SimpleEigen::Scalar< long long >::operator *(SimpleEigen::RowVector< long long > const &)\n"
    "    SimpleEigen::Scalar< long long >::operator *(SimpleEigen::ColVector< long long > const &)\n"
    "    SimpleEigen::Scalar< long long >::operator *(SimpleEigen::Matrix< long long > &)\n"
    "    SimpleEigen::Scalar< long long >::operator *(SimpleEigen::Array< long long > &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLongScalar___div__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  SimpleEigen::Array< long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator /",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator /",2,"SimpleEigen::Array< long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___div",2,SWIGTYPE_p_SimpleEigen__ArrayT_long_long_t);
  }
  
  result = (arg1)->operator /(*arg2);
  {
    SimpleEigen::Array< long long > * resultptr = new SimpleEigen::Array< long long >((const SimpleEigen::Array< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLongScalar___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLongScalar___div__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLongScalar___div__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLongScalar___div__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLongScalar___div__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LLongScalar___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LLongScalar___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long long >::operator /(SimpleEigen::Scalar< long long > const &)\n"
    "    SimpleEigen::Scalar< long long >::operator /(long long const &)\n"
    "    SimpleEigen::Scalar< long long >::operator /(SimpleEigen::RowVector< long long > const &)\n"
    "    SimpleEigen::Scalar< long long >::operator /(SimpleEigen::ColVector< long long > const &)\n"
    "    SimpleEigen::Scalar< long long >::operator /(SimpleEigen::Matrix< long long > &)\n"
    "    SimpleEigen::Scalar< long long >::operator /(SimpleEigen::Array< long long > &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLongScalar___add__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  SimpleEigen::Array< long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator +",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator +",2,"SimpleEigen::Array< long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___add",2,SWIGTYPE_p_SimpleEigen__ArrayT_long_long_t);
  }
  
  result = (arg1)->operator +(*arg2);
  {
    SimpleEigen::Array< long long > * resultptr = new SimpleEigen::Array< long long >((const SimpleEigen::Array< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLongScalar___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLongScalar___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLongScalar___add__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLongScalar___add__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLongScalar___add__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LLongScalar___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LLongScalar___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long long >::operator +(SimpleEigen::Scalar< long long > const &)\n"
    "    SimpleEigen::Scalar< long long >::operator +(long long const &)\n"
    "    SimpleEigen::Scalar< long long >::operator +(SimpleEigen::RowVector< long long > const &)\n"
    "    SimpleEigen::Scalar< long long >::operator +(SimpleEigen::ColVector< long long > const &)\n"
    "    SimpleEigen::Scalar< long long >::operator +(SimpleEigen::Matrix< long long > &)\n"
    "    SimpleEigen::Scalar< long long >::operator +(SimpleEigen::Array< long long > &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLongScalar___sub__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  SimpleEigen::Array< long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator -",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::operator -",2,"SimpleEigen::Array< long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar___sub",2,SWIGTYPE_p_SimpleEigen__ArrayT_long_long_t);
  }
  
  result = (arg1)->operator -(*arg2);
  {
    SimpleEigen::Array< long long > * resultptr = new SimpleEigen::Array< long long >((const SimpleEigen::Array< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLongScalar___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLongScalar___sub__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLongScalar___sub__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLongScalar___sub__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LLongScalar___sub__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LLongScalar___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LLongScalar___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< long long >::operator -(SimpleEigen::Scalar< long long > const &)\n"
    "    SimpleEigen::Scalar< long long >::operator -(long long const &)\n"
    "    SimpleEigen::Scalar< long long >::operator -(SimpleEigen::RowVector< long long > const &)\n"
    "    SimpleEigen::Scalar< long long >::operator -(SimpleEigen::ColVector< long long > const &)\n"
    "    SimpleEigen::Scalar< long long >::operator -(SimpleEigen::Matrix< long long > &)\n"
    "    SimpleEigen::Scalar< long long >::operator -(SimpleEigen::Array< long long > &)\n");
  lua_error(L);return 0;
}


static int _wrap_LLongScalar_get_value(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::get_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::get_value",1,"SimpleEigen::Scalar< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar_get_value",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  result = (long long)(arg1)->get_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar_set_value(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::set_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::set_value",1,"SimpleEigen::Scalar< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::set_value",2,"long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar_set_value",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  temp2=(long long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->set_value((long long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar_abs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::abs",1,"SimpleEigen::Scalar< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar_abs",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  result = (arg1)->abs();
  {
    SimpleEigen::Scalar< long long > * resultptr = new SimpleEigen::Scalar< long long >((const SimpleEigen::Scalar< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar_fabs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::fabs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::fabs",1,"SimpleEigen::Scalar< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar_fabs",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  result = (arg1)->fabs();
  {
    SimpleEigen::Scalar< long long > * resultptr = new SimpleEigen::Scalar< long long >((const SimpleEigen::Scalar< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LLongScalar_print(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< long long >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< long long >::print",1,"SimpleEigen::Scalar< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,0))){
    SWIG_fail_ptr("LLongScalar_print",1,SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LLongScalar(void *obj) {
SimpleEigen::Scalar< long long > *arg1 = (SimpleEigen::Scalar< long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_LLongScalar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LLongScalar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LLongScalar_attributes[] = {
    { "val", _wrap_LLongScalar_val_get, _wrap_LLongScalar_val_set },
    {0,0,0}
};
static swig_lua_method swig_LLongScalar_methods[]= {
    { "aplus", _wrap_LLongScalar_aplus},
    { "aminus", _wrap_LLongScalar_aminus},
    { "atimes", _wrap_LLongScalar_atimes},
    { "adiv", _wrap_LLongScalar_adiv},
    { "rowvector", _wrap_LLongScalar_rowvector},
    { "colvector", _wrap_LLongScalar_colvector},
    { "matrix", _wrap_LLongScalar_matrix},
    { "array", _wrap_LLongScalar_array},
    { "array2d", _wrap_LLongScalar_array2d},
    { "__mul", _wrap_LLongScalar___mul},
    { "__div", _wrap_LLongScalar___div},
    { "__add", _wrap_LLongScalar___add},
    { "__sub", _wrap_LLongScalar___sub},
    { "get_value", _wrap_LLongScalar_get_value},
    { "set_value", _wrap_LLongScalar_set_value},
    { "abs", _wrap_LLongScalar_abs},
    { "fabs", _wrap_LLongScalar_fabs},
    { "print", _wrap_LLongScalar_print},
    {0,0}
};
static swig_lua_method swig_LLongScalar_meta[] = {
    { "__mul", _wrap_LLongScalar___mul},
    { "__div", _wrap_LLongScalar___div},
    { "__add", _wrap_LLongScalar___add},
    { "__sub", _wrap_LLongScalar___sub},
    {0,0}
};

static swig_lua_attribute swig_LLongScalar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LLongScalar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LLongScalar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LLongScalar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LLongScalar_Sf_SwigStatic = {
    "LLongScalar",
    swig_LLongScalar_Sf_SwigStatic_methods,
    swig_LLongScalar_Sf_SwigStatic_attributes,
    swig_LLongScalar_Sf_SwigStatic_constants,
    swig_LLongScalar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LLongScalar_bases[] = {0,0};
static const char *swig_LLongScalar_base_names[] = {"SimpleEigen::Base *",0};
static swig_lua_class _wrap_class_LLongScalar = { "LLongScalar", "LLongScalar", &SWIGTYPE_p_SimpleEigen__ScalarT_long_long_t,_proxy__wrap_new_LLongScalar, swig_delete_LLongScalar, swig_LLongScalar_methods, swig_LLongScalar_attributes, &swig_LLongScalar_Sf_SwigStatic, swig_LLongScalar_meta, swig_LLongScalar_bases, swig_LLongScalar_base_names };

static int _wrap_ULLongScalar_val_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  unsigned long long arg2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::val",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::val",2,"unsigned long long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar_val_set",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  arg2 = (unsigned long long)lua_tonumber(L, 2);
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar_val_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::val",1,"SimpleEigen::Scalar< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar_val_get",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  result = (unsigned long long) ((arg1)->val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ULLongScalar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  unsigned long long *arg1 = 0 ;
  unsigned long long temp1 ;
  SimpleEigen::Scalar< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::Scalar",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::Scalar",1,"unsigned long long const &");
  temp1=(unsigned long long)lua_tonumber(L,1); arg1=&temp1;
  result = (SimpleEigen::Scalar< unsigned long long > *)new SimpleEigen::Scalar< unsigned long long >((unsigned long long const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ULLongScalar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = 0 ;
  SimpleEigen::Scalar< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::Scalar",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::Scalar",1,"SimpleEigen::Scalar< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("new_ULLongScalar",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  result = (SimpleEigen::Scalar< unsigned long long > *)new SimpleEigen::Scalar< unsigned long long >((SimpleEigen::Scalar< unsigned long long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ULLongScalar(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ULLongScalar__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ULLongScalar__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ULLongScalar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< unsigned long long >::Scalar(unsigned long long const &)\n"
    "    SimpleEigen::Scalar< unsigned long long >::Scalar(SimpleEigen::Scalar< unsigned long long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ULLongScalar___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  SimpleEigen::Scalar< unsigned long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator +",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator +",2,"SimpleEigen::Scalar< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___add",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::Scalar< unsigned long long > const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned long long > * resultptr = new SimpleEigen::Scalar< unsigned long long >((const SimpleEigen::Scalar< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  SimpleEigen::Scalar< unsigned long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator -",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator -",2,"SimpleEigen::Scalar< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___sub",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::Scalar< unsigned long long > const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned long long > * resultptr = new SimpleEigen::Scalar< unsigned long long >((const SimpleEigen::Scalar< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  SimpleEigen::Scalar< unsigned long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator *",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator *",2,"SimpleEigen::Scalar< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___mul",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::Scalar< unsigned long long > const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned long long > * resultptr = new SimpleEigen::Scalar< unsigned long long >((const SimpleEigen::Scalar< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  SimpleEigen::Scalar< unsigned long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator /",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator /",2,"SimpleEigen::Scalar< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___div",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::Scalar< unsigned long long > const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned long long > * resultptr = new SimpleEigen::Scalar< unsigned long long >((const SimpleEigen::Scalar< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator +",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator +",2,"unsigned long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  temp2=(unsigned long long)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator +((unsigned long long const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned long long > * resultptr = new SimpleEigen::Scalar< unsigned long long >((const SimpleEigen::Scalar< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator -",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator -",2,"unsigned long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  temp2=(unsigned long long)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator -((unsigned long long const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned long long > * resultptr = new SimpleEigen::Scalar< unsigned long long >((const SimpleEigen::Scalar< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator *",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator *",2,"unsigned long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  temp2=(unsigned long long)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator *((unsigned long long const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned long long > * resultptr = new SimpleEigen::Scalar< unsigned long long >((const SimpleEigen::Scalar< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator /",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator /",2,"unsigned long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  temp2=(unsigned long long)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator /((unsigned long long const &)*arg2);
  {
    SimpleEigen::Scalar< unsigned long long > * resultptr = new SimpleEigen::Scalar< unsigned long long >((const SimpleEigen::Scalar< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar_aplus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::aplus",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::aplus",2,"unsigned long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar_aplus",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  temp2=(unsigned long long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aplus((unsigned long long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar_aminus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::aminus",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::aminus",2,"unsigned long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar_aminus",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  temp2=(unsigned long long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aminus((unsigned long long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar_atimes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::atimes",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::atimes",2,"unsigned long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar_atimes",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  temp2=(unsigned long long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->atimes((unsigned long long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar_adiv__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::adiv",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::adiv",2,"unsigned long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar_adiv",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  temp2=(unsigned long long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->adiv((unsigned long long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar_aplus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  SimpleEigen::Scalar< unsigned long long > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::aplus",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::aplus",2,"SimpleEigen::Scalar< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar_aplus",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar_aplus",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  (arg1)->aplus((SimpleEigen::Scalar< unsigned long long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar_aplus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULLongScalar_aplus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ULLongScalar_aplus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ULLongScalar_aplus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< unsigned long long >::aplus(unsigned long long const &)\n"
    "    SimpleEigen::Scalar< unsigned long long >::aplus(SimpleEigen::Scalar< unsigned long long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ULLongScalar_aminus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  SimpleEigen::Scalar< unsigned long long > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::aminus",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::aminus",2,"SimpleEigen::Scalar< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar_aminus",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar_aminus",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  (arg1)->aminus((SimpleEigen::Scalar< unsigned long long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar_aminus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULLongScalar_aminus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ULLongScalar_aminus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ULLongScalar_aminus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< unsigned long long >::aminus(unsigned long long const &)\n"
    "    SimpleEigen::Scalar< unsigned long long >::aminus(SimpleEigen::Scalar< unsigned long long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ULLongScalar_atimes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  SimpleEigen::Scalar< unsigned long long > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::atimes",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::atimes",2,"SimpleEigen::Scalar< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar_atimes",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar_atimes",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  (arg1)->atimes((SimpleEigen::Scalar< unsigned long long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar_atimes(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULLongScalar_atimes__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ULLongScalar_atimes__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ULLongScalar_atimes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< unsigned long long >::atimes(unsigned long long const &)\n"
    "    SimpleEigen::Scalar< unsigned long long >::atimes(SimpleEigen::Scalar< unsigned long long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ULLongScalar_adiv__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  SimpleEigen::Scalar< unsigned long long > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::adiv",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::adiv",2,"SimpleEigen::Scalar< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar_adiv",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar_adiv",2,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  (arg1)->adiv((SimpleEigen::Scalar< unsigned long long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar_adiv(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULLongScalar_adiv__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ULLongScalar_adiv__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ULLongScalar_adiv'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< unsigned long long >::adiv(unsigned long long const &)\n"
    "    SimpleEigen::Scalar< unsigned long long >::adiv(SimpleEigen::Scalar< unsigned long long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ULLongScalar_rowvector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  SimpleEigen::RowVector< unsigned long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::rowvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::rowvector",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::rowvector",2,"SimpleEigen::RowVector< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar_rowvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar_rowvector",2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_long_t);
  }
  
  result = (arg1)->rowvector((SimpleEigen::RowVector< unsigned long long > const &)*arg2);
  {
    SimpleEigen::RowVector< unsigned long long > * resultptr = new SimpleEigen::RowVector< unsigned long long >((const SimpleEigen::RowVector< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar_colvector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  SimpleEigen::ColVector< unsigned long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::colvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::colvector",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::colvector",2,"SimpleEigen::ColVector< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar_colvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar_colvector",2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_long_t);
  }
  
  result = (arg1)->colvector((SimpleEigen::ColVector< unsigned long long > const &)*arg2);
  {
    SimpleEigen::ColVector< unsigned long long > * resultptr = new SimpleEigen::ColVector< unsigned long long >((const SimpleEigen::ColVector< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar_matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  SimpleEigen::Matrix< unsigned long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::matrix",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::matrix",2,"SimpleEigen::Matrix< unsigned long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar_matrix",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar_matrix",2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_long_t);
  }
  
  result = (arg1)->matrix(*arg2);
  {
    SimpleEigen::Matrix< unsigned long long > * resultptr = new SimpleEigen::Matrix< unsigned long long >((const SimpleEigen::Matrix< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar_array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  SimpleEigen::Array< unsigned long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::array",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::array",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::array",2,"SimpleEigen::Array< unsigned long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar_array",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar_array",2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_long_t);
  }
  
  result = (arg1)->array(*arg2);
  {
    SimpleEigen::Array< unsigned long long > * resultptr = new SimpleEigen::Array< unsigned long long >((const SimpleEigen::Array< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar_array2d__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  SimpleEigen::Array2D< unsigned long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array2D< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::array2d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::array2d",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::array2d",2,"SimpleEigen::Array2D< unsigned long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar_array2d",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__Array2DT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar_array2d",2,SWIGTYPE_p_SimpleEigen__Array2DT_unsigned_long_long_t);
  }
  
  result = (arg1)->array2d(*arg2);
  {
    SimpleEigen::Array2D< unsigned long long > * resultptr = new SimpleEigen::Array2D< unsigned long long >((const SimpleEigen::Array2D< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar_rowvector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< SimpleEigen::RowVector< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::rowvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::rowvector",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::rowvector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar_rowvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->rowvector(arg2);
  {
    SimpleEigen::RowVector< unsigned long long > * resultptr = new SimpleEigen::RowVector< unsigned long long >((const SimpleEigen::RowVector< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar_rowvector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULLongScalar_rowvector__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ULLongScalar_rowvector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ULLongScalar_rowvector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< unsigned long long >::rowvector(SimpleEigen::RowVector< unsigned long long > const &)\n"
    "    SimpleEigen::Scalar< unsigned long long >::rowvector(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ULLongScalar_colvector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< SimpleEigen::ColVector< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::colvector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::colvector",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::colvector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar_colvector",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->colvector(arg2);
  {
    SimpleEigen::ColVector< unsigned long long > * resultptr = new SimpleEigen::ColVector< unsigned long long >((const SimpleEigen::ColVector< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar_colvector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULLongScalar_colvector__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ULLongScalar_colvector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ULLongScalar_colvector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< unsigned long long >::colvector(SimpleEigen::ColVector< unsigned long long > const &)\n"
    "    SimpleEigen::Scalar< unsigned long long >::colvector(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ULLongScalar_matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SwigValueWrapper< SimpleEigen::Matrix< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::matrix",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::matrix",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::matrix",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::matrix",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar_matrix",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->matrix(arg2,arg3);
  {
    SimpleEigen::Matrix< unsigned long long > * resultptr = new SimpleEigen::Matrix< unsigned long long >((const SimpleEigen::Matrix< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar_matrix(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULLongScalar_matrix__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ULLongScalar_matrix__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ULLongScalar_matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< unsigned long long >::matrix(SimpleEigen::Matrix< unsigned long long > &)\n"
    "    SimpleEigen::Scalar< unsigned long long >::matrix(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ULLongScalar_array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< SimpleEigen::Array< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::array",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::array",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::array",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar_array",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->array(arg2);
  {
    SimpleEigen::Array< unsigned long long > * resultptr = new SimpleEigen::Array< unsigned long long >((const SimpleEigen::Array< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar_array(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULLongScalar_array__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ULLongScalar_array__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ULLongScalar_array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< unsigned long long >::array(SimpleEigen::Array< unsigned long long > &)\n"
    "    SimpleEigen::Scalar< unsigned long long >::array(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ULLongScalar_array2d__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SwigValueWrapper< SimpleEigen::Array2D< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::array2d",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::array2d",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::array2d",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::array2d",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar_array2d",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->array2d(arg2,arg3);
  {
    SimpleEigen::Array2D< unsigned long long > * resultptr = new SimpleEigen::Array2D< unsigned long long >((const SimpleEigen::Array2D< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar_array2d(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULLongScalar_array2d__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ULLongScalar_array2d__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ULLongScalar_array2d'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< unsigned long long >::array2d(SimpleEigen::Array2D< unsigned long long > &)\n"
    "    SimpleEigen::Scalar< unsigned long long >::array2d(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ULLongScalar___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  SimpleEigen::RowVector< unsigned long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator *",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator *",2,"SimpleEigen::RowVector< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___mul",2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_long_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::RowVector< unsigned long long > const &)*arg2);
  {
    SimpleEigen::RowVector< unsigned long long > * resultptr = new SimpleEigen::RowVector< unsigned long long >((const SimpleEigen::RowVector< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  SimpleEigen::RowVector< unsigned long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator /",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator /",2,"SimpleEigen::RowVector< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___div",2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_long_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::RowVector< unsigned long long > const &)*arg2);
  {
    SimpleEigen::RowVector< unsigned long long > * resultptr = new SimpleEigen::RowVector< unsigned long long >((const SimpleEigen::RowVector< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  SimpleEigen::RowVector< unsigned long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator +",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator +",2,"SimpleEigen::RowVector< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___add",2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_long_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::RowVector< unsigned long long > const &)*arg2);
  {
    SimpleEigen::RowVector< unsigned long long > * resultptr = new SimpleEigen::RowVector< unsigned long long >((const SimpleEigen::RowVector< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  SimpleEigen::RowVector< unsigned long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::RowVector< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator -",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator -",2,"SimpleEigen::RowVector< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___sub",2,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_long_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::RowVector< unsigned long long > const &)*arg2);
  {
    SimpleEigen::RowVector< unsigned long long > * resultptr = new SimpleEigen::RowVector< unsigned long long >((const SimpleEigen::RowVector< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar___mul__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  SimpleEigen::ColVector< unsigned long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator *",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator *",2,"SimpleEigen::ColVector< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___mul",2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_long_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::ColVector< unsigned long long > const &)*arg2);
  {
    SimpleEigen::ColVector< unsigned long long > * resultptr = new SimpleEigen::ColVector< unsigned long long >((const SimpleEigen::ColVector< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar___div__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  SimpleEigen::ColVector< unsigned long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator /",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator /",2,"SimpleEigen::ColVector< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___div",2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_long_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::ColVector< unsigned long long > const &)*arg2);
  {
    SimpleEigen::ColVector< unsigned long long > * resultptr = new SimpleEigen::ColVector< unsigned long long >((const SimpleEigen::ColVector< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar___add__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  SimpleEigen::ColVector< unsigned long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator +",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator +",2,"SimpleEigen::ColVector< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___add",2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_long_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::ColVector< unsigned long long > const &)*arg2);
  {
    SimpleEigen::ColVector< unsigned long long > * resultptr = new SimpleEigen::ColVector< unsigned long long >((const SimpleEigen::ColVector< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar___sub__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  SimpleEigen::ColVector< unsigned long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::ColVector< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator -",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator -",2,"SimpleEigen::ColVector< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___sub",2,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_long_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::ColVector< unsigned long long > const &)*arg2);
  {
    SimpleEigen::ColVector< unsigned long long > * resultptr = new SimpleEigen::ColVector< unsigned long long >((const SimpleEigen::ColVector< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar___mul__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  SimpleEigen::Matrix< unsigned long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator *",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator *",2,"SimpleEigen::Matrix< unsigned long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___mul",2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_long_t);
  }
  
  result = (arg1)->operator *(*arg2);
  {
    SimpleEigen::Matrix< unsigned long long > * resultptr = new SimpleEigen::Matrix< unsigned long long >((const SimpleEigen::Matrix< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar___div__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  SimpleEigen::Matrix< unsigned long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator /",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator /",2,"SimpleEigen::Matrix< unsigned long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___div",2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_long_t);
  }
  
  result = (arg1)->operator /(*arg2);
  {
    SimpleEigen::Matrix< unsigned long long > * resultptr = new SimpleEigen::Matrix< unsigned long long >((const SimpleEigen::Matrix< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar___add__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  SimpleEigen::Matrix< unsigned long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator +",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator +",2,"SimpleEigen::Matrix< unsigned long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___add",2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_long_t);
  }
  
  result = (arg1)->operator +(*arg2);
  {
    SimpleEigen::Matrix< unsigned long long > * resultptr = new SimpleEigen::Matrix< unsigned long long >((const SimpleEigen::Matrix< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar___sub__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  SimpleEigen::Matrix< unsigned long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Matrix< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator -",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator -",2,"SimpleEigen::Matrix< unsigned long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___sub",2,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_long_t);
  }
  
  result = (arg1)->operator -(*arg2);
  {
    SimpleEigen::Matrix< unsigned long long > * resultptr = new SimpleEigen::Matrix< unsigned long long >((const SimpleEigen::Matrix< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar___mul__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  SimpleEigen::Array< unsigned long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator *",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator *",2,"SimpleEigen::Array< unsigned long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___mul",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___mul",2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_long_t);
  }
  
  result = (arg1)->operator *(*arg2);
  {
    SimpleEigen::Array< unsigned long long > * resultptr = new SimpleEigen::Array< unsigned long long >((const SimpleEigen::Array< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULLongScalar___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULLongScalar___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULLongScalar___mul__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULLongScalar___mul__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULLongScalar___mul__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ULLongScalar___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ULLongScalar___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< unsigned long long >::operator *(SimpleEigen::Scalar< unsigned long long > const &)\n"
    "    SimpleEigen::Scalar< unsigned long long >::operator *(unsigned long long const &)\n"
    "    SimpleEigen::Scalar< unsigned long long >::operator *(SimpleEigen::RowVector< unsigned long long > const &)\n"
    "    SimpleEigen::Scalar< unsigned long long >::operator *(SimpleEigen::ColVector< unsigned long long > const &)\n"
    "    SimpleEigen::Scalar< unsigned long long >::operator *(SimpleEigen::Matrix< unsigned long long > &)\n"
    "    SimpleEigen::Scalar< unsigned long long >::operator *(SimpleEigen::Array< unsigned long long > &)\n");
  lua_error(L);return 0;
}


static int _wrap_ULLongScalar___div__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  SimpleEigen::Array< unsigned long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator /",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator /",2,"SimpleEigen::Array< unsigned long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___div",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___div",2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_long_t);
  }
  
  result = (arg1)->operator /(*arg2);
  {
    SimpleEigen::Array< unsigned long long > * resultptr = new SimpleEigen::Array< unsigned long long >((const SimpleEigen::Array< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULLongScalar___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULLongScalar___div__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULLongScalar___div__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULLongScalar___div__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULLongScalar___div__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ULLongScalar___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ULLongScalar___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< unsigned long long >::operator /(SimpleEigen::Scalar< unsigned long long > const &)\n"
    "    SimpleEigen::Scalar< unsigned long long >::operator /(unsigned long long const &)\n"
    "    SimpleEigen::Scalar< unsigned long long >::operator /(SimpleEigen::RowVector< unsigned long long > const &)\n"
    "    SimpleEigen::Scalar< unsigned long long >::operator /(SimpleEigen::ColVector< unsigned long long > const &)\n"
    "    SimpleEigen::Scalar< unsigned long long >::operator /(SimpleEigen::Matrix< unsigned long long > &)\n"
    "    SimpleEigen::Scalar< unsigned long long >::operator /(SimpleEigen::Array< unsigned long long > &)\n");
  lua_error(L);return 0;
}


static int _wrap_ULLongScalar___add__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  SimpleEigen::Array< unsigned long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator +",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator +",2,"SimpleEigen::Array< unsigned long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___add",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___add",2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_long_t);
  }
  
  result = (arg1)->operator +(*arg2);
  {
    SimpleEigen::Array< unsigned long long > * resultptr = new SimpleEigen::Array< unsigned long long >((const SimpleEigen::Array< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULLongScalar___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULLongScalar___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULLongScalar___add__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULLongScalar___add__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULLongScalar___add__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ULLongScalar___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ULLongScalar___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< unsigned long long >::operator +(SimpleEigen::Scalar< unsigned long long > const &)\n"
    "    SimpleEigen::Scalar< unsigned long long >::operator +(unsigned long long const &)\n"
    "    SimpleEigen::Scalar< unsigned long long >::operator +(SimpleEigen::RowVector< unsigned long long > const &)\n"
    "    SimpleEigen::Scalar< unsigned long long >::operator +(SimpleEigen::ColVector< unsigned long long > const &)\n"
    "    SimpleEigen::Scalar< unsigned long long >::operator +(SimpleEigen::Matrix< unsigned long long > &)\n"
    "    SimpleEigen::Scalar< unsigned long long >::operator +(SimpleEigen::Array< unsigned long long > &)\n");
  lua_error(L);return 0;
}


static int _wrap_ULLongScalar___sub__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  SimpleEigen::Array< unsigned long long > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Array< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator -",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::operator -",2,"SimpleEigen::Array< unsigned long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___sub",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar___sub",2,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_long_t);
  }
  
  result = (arg1)->operator -(*arg2);
  {
    SimpleEigen::Array< unsigned long long > * resultptr = new SimpleEigen::Array< unsigned long long >((const SimpleEigen::Array< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULLongScalar___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULLongScalar___sub__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULLongScalar___sub__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULLongScalar___sub__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ULLongScalar___sub__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ULLongScalar___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ULLongScalar___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Scalar< unsigned long long >::operator -(SimpleEigen::Scalar< unsigned long long > const &)\n"
    "    SimpleEigen::Scalar< unsigned long long >::operator -(unsigned long long const &)\n"
    "    SimpleEigen::Scalar< unsigned long long >::operator -(SimpleEigen::RowVector< unsigned long long > const &)\n"
    "    SimpleEigen::Scalar< unsigned long long >::operator -(SimpleEigen::ColVector< unsigned long long > const &)\n"
    "    SimpleEigen::Scalar< unsigned long long >::operator -(SimpleEigen::Matrix< unsigned long long > &)\n"
    "    SimpleEigen::Scalar< unsigned long long >::operator -(SimpleEigen::Array< unsigned long long > &)\n");
  lua_error(L);return 0;
}


static int _wrap_ULLongScalar_get_value(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::get_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::get_value",1,"SimpleEigen::Scalar< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar_get_value",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->get_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar_set_value(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::set_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::set_value",1,"SimpleEigen::Scalar< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::set_value",2,"unsigned long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar_set_value",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  temp2=(unsigned long long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->set_value((unsigned long long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar_abs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::abs",1,"SimpleEigen::Scalar< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar_abs",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  result = (arg1)->abs();
  {
    SimpleEigen::Scalar< unsigned long long > * resultptr = new SimpleEigen::Scalar< unsigned long long >((const SimpleEigen::Scalar< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar_fabs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned long long > > result;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::fabs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::fabs",1,"SimpleEigen::Scalar< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar_fabs",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  result = (arg1)->fabs();
  {
    SimpleEigen::Scalar< unsigned long long > * resultptr = new SimpleEigen::Scalar< unsigned long long >((const SimpleEigen::Scalar< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ULLongScalar_print(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Scalar< unsigned long long >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Scalar< unsigned long long >::print",1,"SimpleEigen::Scalar< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ULLongScalar_print",1,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ULLongScalar(void *obj) {
SimpleEigen::Scalar< unsigned long long > *arg1 = (SimpleEigen::Scalar< unsigned long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ULLongScalar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ULLongScalar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ULLongScalar_attributes[] = {
    { "val", _wrap_ULLongScalar_val_get, _wrap_ULLongScalar_val_set },
    {0,0,0}
};
static swig_lua_method swig_ULLongScalar_methods[]= {
    { "aplus", _wrap_ULLongScalar_aplus},
    { "aminus", _wrap_ULLongScalar_aminus},
    { "atimes", _wrap_ULLongScalar_atimes},
    { "adiv", _wrap_ULLongScalar_adiv},
    { "rowvector", _wrap_ULLongScalar_rowvector},
    { "colvector", _wrap_ULLongScalar_colvector},
    { "matrix", _wrap_ULLongScalar_matrix},
    { "array", _wrap_ULLongScalar_array},
    { "array2d", _wrap_ULLongScalar_array2d},
    { "__mul", _wrap_ULLongScalar___mul},
    { "__div", _wrap_ULLongScalar___div},
    { "__add", _wrap_ULLongScalar___add},
    { "__sub", _wrap_ULLongScalar___sub},
    { "get_value", _wrap_ULLongScalar_get_value},
    { "set_value", _wrap_ULLongScalar_set_value},
    { "abs", _wrap_ULLongScalar_abs},
    { "fabs", _wrap_ULLongScalar_fabs},
    { "print", _wrap_ULLongScalar_print},
    {0,0}
};
static swig_lua_method swig_ULLongScalar_meta[] = {
    { "__mul", _wrap_ULLongScalar___mul},
    { "__div", _wrap_ULLongScalar___div},
    { "__add", _wrap_ULLongScalar___add},
    { "__sub", _wrap_ULLongScalar___sub},
    {0,0}
};

static swig_lua_attribute swig_ULLongScalar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ULLongScalar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ULLongScalar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ULLongScalar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ULLongScalar_Sf_SwigStatic = {
    "ULLongScalar",
    swig_ULLongScalar_Sf_SwigStatic_methods,
    swig_ULLongScalar_Sf_SwigStatic_attributes,
    swig_ULLongScalar_Sf_SwigStatic_constants,
    swig_ULLongScalar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ULLongScalar_bases[] = {0,0};
static const char *swig_ULLongScalar_base_names[] = {"SimpleEigen::Base *",0};
static swig_lua_class _wrap_class_ULLongScalar = { "ULLongScalar", "ULLongScalar", &SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_long_t,_proxy__wrap_new_ULLongScalar, swig_delete_ULLongScalar, swig_ULLongScalar_methods, swig_ULLongScalar_attributes, &swig_ULLongScalar_Sf_SwigStatic, swig_ULLongScalar_meta, swig_ULLongScalar_bases, swig_ULLongScalar_base_names };

static int _wrap_FloatRowVector_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  SimpleEigen::EigenRowVector< float > *arg2 = (SimpleEigen::EigenRowVector< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::vector",1,"SimpleEigen::RowVector< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< float >::vector",2,"SimpleEigen::EigenRowVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_vector_set",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__EigenRowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_vector_set",2,SWIGTYPE_p_SimpleEigen__EigenRowVectorT_float_t);
  }
  
  if (arg1) (arg1)->vector = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  SimpleEigen::EigenRowVector< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::vector",1,"SimpleEigen::RowVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_vector_get",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = (SimpleEigen::EigenRowVector< float > *)& ((arg1)->vector);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__EigenRowVectorT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatRowVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::RowVector",0,0)
  result = (SimpleEigen::RowVector< float > *)new SimpleEigen::RowVector< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatRowVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SimpleEigen::RowVector< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::RowVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::RowVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (SimpleEigen::RowVector< float > *)new SimpleEigen::RowVector< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatRowVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float *arg2 = 0 ;
  float temp2 ;
  SimpleEigen::RowVector< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::RowVector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::RowVector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< float >::RowVector",2,"float const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (SimpleEigen::RowVector< float > *)new SimpleEigen::RowVector< float >(arg1,(float const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatRowVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = 0 ;
  SimpleEigen::RowVector< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::RowVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::RowVector",1,"SimpleEigen::RowVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("new_FloatRowVector",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = (SimpleEigen::RowVector< float > *)new SimpleEigen::RowVector< float >((SimpleEigen::RowVector< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatRowVector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::EigenRowVector< float > *arg1 = 0 ;
  SimpleEigen::RowVector< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::RowVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::RowVector",1,"SimpleEigen::EigenRowVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__EigenRowVectorT_float_t,0))){
    SWIG_fail_ptr("new_FloatRowVector",1,SWIGTYPE_p_SimpleEigen__EigenRowVectorT_float_t);
  }
  
  result = (SimpleEigen::RowVector< float > *)new SimpleEigen::RowVector< float >((SimpleEigen::EigenRowVector< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatRowVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FloatRowVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatRowVector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__EigenRowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatRowVector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_FloatRowVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FloatRowVector__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatRowVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::RowVector< float >::RowVector()\n"
    "    SimpleEigen::RowVector< float >::RowVector(size_t)\n"
    "    SimpleEigen::RowVector< float >::RowVector(size_t,float const &)\n"
    "    SimpleEigen::RowVector< float >::RowVector(SimpleEigen::RowVector< float > const &)\n"
    "    SimpleEigen::RowVector< float >::RowVector(SimpleEigen::EigenRowVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatRowVector_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  int arg2 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::get",1,"SimpleEigen::RowVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< float >::get",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_get",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)(arg1)->get(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::set",1,"SimpleEigen::RowVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< float >::set",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::RowVector< float >::set",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_set",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->set(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_random__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::random",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::random",1,"SimpleEigen::RowVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< float >::random",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_random",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->random(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_random__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::random",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::random",1,"SimpleEigen::RowVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_random",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  (arg1)->random();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_random(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatRowVector_random__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatRowVector_random__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatRowVector_random'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::RowVector< float >::random(int)\n"
    "    SimpleEigen::RowVector< float >::random()\n");
  lua_error(L);return 0;
}


static int _wrap_FloatRowVector_zero(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::zero",1,"SimpleEigen::RowVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_zero",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  (arg1)->zero();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_ones(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::ones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::ones",1,"SimpleEigen::RowVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_ones",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  (arg1)->ones();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_innerStride(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::innerStride",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::innerStride",1,"SimpleEigen::RowVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_innerStride",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = (arg1)->innerStride();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_data(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::data",1,"SimpleEigen::RowVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_data",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = (float *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_resize(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::resize",1,"SimpleEigen::RowVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< float >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_resize",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_resizeLike(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  SimpleEigen::RowVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::resizeLike",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::resizeLike",1,"SimpleEigen::RowVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< float >::resizeLike",2,"SimpleEigen::RowVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_resizeLike",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_resizeLike",2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  (arg1)->resizeLike((SimpleEigen::RowVector< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_conservativeResize(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::conservativeResize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::conservativeResize",1,"SimpleEigen::RowVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< float >::conservativeResize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_conservativeResize",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->conservativeResize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_coeff(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::coeff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::coeff",1,"SimpleEigen::RowVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< float >::coeff",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_coeff",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)(arg1)->coeff(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_coeffRef(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  size_t arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::coeffRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::coeffRef",1,"SimpleEigen::RowVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< float >::coeffRef",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_coeffRef",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float *) &(arg1)->coeffRef(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_normalize(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::normalize",1,"SimpleEigen::RowVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_normalize",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_normalized(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::normalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::normalized",1,"SimpleEigen::RowVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_normalized",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = (arg1)->normalized();
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_print(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::print",1,"SimpleEigen::RowVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_print",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_cols(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::cols",1,"SimpleEigen::RowVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_cols",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = (arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_dot(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  SimpleEigen::RowVector< float > *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::dot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::dot",1,"SimpleEigen::RowVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< float >::dot",2,"SimpleEigen::RowVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_dot",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_dot",2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = (float)(arg1)->dot((SimpleEigen::RowVector< float > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_size(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::size",1,"SimpleEigen::RowVector< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_size",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = ((SimpleEigen::RowVector< float > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_fill(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::fill",1,"SimpleEigen::RowVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< float >::fill",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_fill",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_eval(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  SimpleEigen::RowVector< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::eval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::eval",1,"SimpleEigen::RowVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_eval",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = (SimpleEigen::RowVector< float > *) &(arg1)->eval();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_norm(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::norm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::norm",1,"SimpleEigen::RowVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_norm",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = (float)(arg1)->norm();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_squaredNorm(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::squaredNorm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::squaredNorm",1,"SimpleEigen::RowVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_squaredNorm",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = (float)(arg1)->squaredNorm();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_map(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  std::vector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::map",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::map",1,"SimpleEigen::RowVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< float >::map",2,"std::vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_map",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_map",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->map(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_head(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  SimpleEigen::RowVector< float > *arg2 = 0 ;
  size_t arg3 ;
  SimpleEigen::RowVector< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::head",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::head",1,"SimpleEigen::RowVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< float >::head",2,"SimpleEigen::RowVector< float > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::RowVector< float >::head",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_head",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_head",2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (SimpleEigen::RowVector< float > *) &(arg1)->head(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_tail(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  SimpleEigen::RowVector< float > *arg2 = 0 ;
  size_t arg3 ;
  SimpleEigen::RowVector< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::tail",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::tail",1,"SimpleEigen::RowVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< float >::tail",2,"SimpleEigen::RowVector< float > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::RowVector< float >::tail",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_tail",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_tail",2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (SimpleEigen::RowVector< float > *) &(arg1)->tail(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_segment(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  SimpleEigen::RowVector< float > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  SimpleEigen::RowVector< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::segment",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::segment",1,"SimpleEigen::RowVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< float >::segment",2,"SimpleEigen::RowVector< float > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::RowVector< float >::segment",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::RowVector< float >::segment",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_segment",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_segment",2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (SimpleEigen::RowVector< float > *) &(arg1)->segment(*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_LinSpaced(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  SimpleEigen::RowVector< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::LinSpaced",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::LinSpaced",1,"SimpleEigen::RowVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< float >::LinSpaced",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::RowVector< float >::LinSpaced",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::RowVector< float >::LinSpaced",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_LinSpaced",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (SimpleEigen::RowVector< float > *) &(arg1)->LinSpaced(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector___call(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::operator ()",1,"SimpleEigen::RowVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< float >::operator ()",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector___call",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)(arg1)->operator ()(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::__getitem",1,"SimpleEigen::RowVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< float >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector___getitem",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::__setitem",1,"SimpleEigen::RowVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< float >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::RowVector< float >::__setitem",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector___setitem",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  SimpleEigen::RowVector< float > *arg2 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::operator +",1,"SimpleEigen::RowVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< float >::operator +",2,"SimpleEigen::RowVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector___add",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector___add",2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::RowVector< float > const &)*arg2);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  SimpleEigen::RowVector< float > *arg2 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::operator -",1,"SimpleEigen::RowVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< float >::operator -",2,"SimpleEigen::RowVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector___sub",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector___sub",2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::RowVector< float > const &)*arg2);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  SimpleEigen::RowVector< float > *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::operator *",1,"SimpleEigen::RowVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< float >::operator *",2,"SimpleEigen::RowVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector___mul",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector___mul",2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = (float)(arg1)->operator *((SimpleEigen::RowVector< float > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  float arg2 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::operator *",1,"SimpleEigen::RowVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< float >::operator *",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector___mul",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = (arg1)->operator *(arg2);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  float arg2 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::operator /",1,"SimpleEigen::RowVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< float >::operator /",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector___div",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = (arg1)->operator /(arg2);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_aplus(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  SimpleEigen::RowVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::aplus",1,"SimpleEigen::RowVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< float >::aplus",2,"SimpleEigen::RowVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_aplus",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_aplus",2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  (arg1)->aplus((SimpleEigen::RowVector< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_aminus(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  SimpleEigen::RowVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::aminus",1,"SimpleEigen::RowVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< float >::aminus",2,"SimpleEigen::RowVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_aminus",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_aminus",2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  (arg1)->aminus((SimpleEigen::RowVector< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_adot(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  SimpleEigen::RowVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::adot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::adot",1,"SimpleEigen::RowVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< float >::adot",2,"SimpleEigen::RowVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_adot",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_adot",2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  (arg1)->adot((SimpleEigen::RowVector< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_atimes(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::atimes",1,"SimpleEigen::RowVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< float >::atimes",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_atimes",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->atimes((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_adiv(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::adiv",1,"SimpleEigen::RowVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< float >::adiv",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_adiv",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->adiv((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_t(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::t",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::t",1,"SimpleEigen::RowVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_t",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = (arg1)->t();
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_abs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::abs",1,"SimpleEigen::RowVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_abs",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = (arg1)->abs();
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_inverse(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::inverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::inverse",1,"SimpleEigen::RowVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_inverse",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = (arg1)->inverse();
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_sqrt(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::sqrt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::sqrt",1,"SimpleEigen::RowVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_sqrt",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = (arg1)->sqrt();
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_abs2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::abs2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::abs2",1,"SimpleEigen::RowVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_abs2",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = (arg1)->abs2();
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::operator *",1,"SimpleEigen::RowVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< float >::operator *",2,"SimpleEigen::Matrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector___mul",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector___mul",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->operator *(*arg2);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatRowVector___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatRowVector___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatRowVector___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatRowVector___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::RowVector< float >::operator *(SimpleEigen::RowVector< float > const &)\n"
    "    SimpleEigen::RowVector< float >::operator *(float const)\n"
    "    SimpleEigen::RowVector< float >::operator *(SimpleEigen::Matrix< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatRowVector___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::operator +",1,"SimpleEigen::RowVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< float >::operator +",2,"SimpleEigen::Matrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector___add",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector___add",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->operator +(*arg2);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatRowVector___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatRowVector___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatRowVector___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::RowVector< float >::operator +(SimpleEigen::RowVector< float > const &)\n"
    "    SimpleEigen::RowVector< float >::operator +(SimpleEigen::Matrix< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatRowVector___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::operator -",1,"SimpleEigen::RowVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< float >::operator -",2,"SimpleEigen::Matrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector___sub",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector___sub",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->operator -(*arg2);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatRowVector___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatRowVector___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatRowVector___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::RowVector< float >::operator -(SimpleEigen::RowVector< float > const &)\n"
    "    SimpleEigen::RowVector< float >::operator -(SimpleEigen::Matrix< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatRowVector___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::operator /",1,"SimpleEigen::RowVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< float >::operator /",2,"SimpleEigen::Matrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector___div",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector___div",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->operator /(*arg2);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatRowVector___div__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatRowVector___div__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatRowVector___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::RowVector< float >::operator /(float const)\n"
    "    SimpleEigen::RowVector< float >::operator /(SimpleEigen::Matrix< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatRowVector_matrix(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< float >::matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< float >::matrix",1,"SimpleEigen::RowVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatRowVector_matrix",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = (arg1)->matrix();
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatRowVector(void *obj) {
SimpleEigen::RowVector< float > *arg1 = (SimpleEigen::RowVector< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatRowVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatRowVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatRowVector_attributes[] = {
    { "vector", _wrap_FloatRowVector_vector_get, _wrap_FloatRowVector_vector_set },
    {0,0,0}
};
static swig_lua_method swig_FloatRowVector_methods[]= {
    { "get", _wrap_FloatRowVector_get},
    { "set", _wrap_FloatRowVector_set},
    { "random", _wrap_FloatRowVector_random},
    { "zero", _wrap_FloatRowVector_zero},
    { "ones", _wrap_FloatRowVector_ones},
    { "innerStride", _wrap_FloatRowVector_innerStride},
    { "data", _wrap_FloatRowVector_data},
    { "resize", _wrap_FloatRowVector_resize},
    { "resizeLike", _wrap_FloatRowVector_resizeLike},
    { "conservativeResize", _wrap_FloatRowVector_conservativeResize},
    { "coeff", _wrap_FloatRowVector_coeff},
    { "coeffRef", _wrap_FloatRowVector_coeffRef},
    { "normalize", _wrap_FloatRowVector_normalize},
    { "normalized", _wrap_FloatRowVector_normalized},
    { "print", _wrap_FloatRowVector_print},
    { "cols", _wrap_FloatRowVector_cols},
    { "dot", _wrap_FloatRowVector_dot},
    { "size", _wrap_FloatRowVector_size},
    { "fill", _wrap_FloatRowVector_fill},
    { "eval", _wrap_FloatRowVector_eval},
    { "norm", _wrap_FloatRowVector_norm},
    { "squaredNorm", _wrap_FloatRowVector_squaredNorm},
    { "map", _wrap_FloatRowVector_map},
    { "head", _wrap_FloatRowVector_head},
    { "tail", _wrap_FloatRowVector_tail},
    { "segment", _wrap_FloatRowVector_segment},
    { "LinSpaced", _wrap_FloatRowVector_LinSpaced},
    { "__call", _wrap_FloatRowVector___call},
    { "__getitem", _wrap_FloatRowVector___getitem},
    { "__setitem", _wrap_FloatRowVector___setitem},
    { "aplus", _wrap_FloatRowVector_aplus},
    { "aminus", _wrap_FloatRowVector_aminus},
    { "adot", _wrap_FloatRowVector_adot},
    { "atimes", _wrap_FloatRowVector_atimes},
    { "adiv", _wrap_FloatRowVector_adiv},
    { "t", _wrap_FloatRowVector_t},
    { "abs", _wrap_FloatRowVector_abs},
    { "inverse", _wrap_FloatRowVector_inverse},
    { "sqrt", _wrap_FloatRowVector_sqrt},
    { "abs2", _wrap_FloatRowVector_abs2},
    { "__mul", _wrap_FloatRowVector___mul},
    { "__add", _wrap_FloatRowVector___add},
    { "__sub", _wrap_FloatRowVector___sub},
    { "__div", _wrap_FloatRowVector___div},
    { "matrix", _wrap_FloatRowVector_matrix},
    {0,0}
};
static swig_lua_method swig_FloatRowVector_meta[] = {
    { "__call", _wrap_FloatRowVector___call},
    { "__getitem", _wrap_FloatRowVector___getitem},
    { "__setitem", _wrap_FloatRowVector___setitem},
    { "__mul", _wrap_FloatRowVector___mul},
    { "__add", _wrap_FloatRowVector___add},
    { "__sub", _wrap_FloatRowVector___sub},
    { "__div", _wrap_FloatRowVector___div},
    {0,0}
};

static swig_lua_attribute swig_FloatRowVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatRowVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatRowVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatRowVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatRowVector_Sf_SwigStatic = {
    "FloatRowVector",
    swig_FloatRowVector_Sf_SwigStatic_methods,
    swig_FloatRowVector_Sf_SwigStatic_attributes,
    swig_FloatRowVector_Sf_SwigStatic_constants,
    swig_FloatRowVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatRowVector_bases[] = {0};
static const char *swig_FloatRowVector_base_names[] = {0};
static swig_lua_class _wrap_class_FloatRowVector = { "FloatRowVector", "FloatRowVector", &SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,_proxy__wrap_new_FloatRowVector, swig_delete_FloatRowVector, swig_FloatRowVector_methods, swig_FloatRowVector_attributes, &swig_FloatRowVector_Sf_SwigStatic, swig_FloatRowVector_meta, swig_FloatRowVector_bases, swig_FloatRowVector_base_names };

static int _wrap_DoubleRowVector_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  SimpleEigen::EigenRowVector< double > *arg2 = (SimpleEigen::EigenRowVector< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::vector",1,"SimpleEigen::RowVector< double > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< double >::vector",2,"SimpleEigen::EigenRowVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_vector_set",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__EigenRowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_vector_set",2,SWIGTYPE_p_SimpleEigen__EigenRowVectorT_double_t);
  }
  
  if (arg1) (arg1)->vector = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  SimpleEigen::EigenRowVector< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::vector",1,"SimpleEigen::RowVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_vector_get",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  result = (SimpleEigen::EigenRowVector< double > *)& ((arg1)->vector);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__EigenRowVectorT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleRowVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::RowVector",0,0)
  result = (SimpleEigen::RowVector< double > *)new SimpleEigen::RowVector< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleRowVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SimpleEigen::RowVector< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::RowVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::RowVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (SimpleEigen::RowVector< double > *)new SimpleEigen::RowVector< double >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleRowVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double *arg2 = 0 ;
  double temp2 ;
  SimpleEigen::RowVector< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::RowVector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::RowVector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< double >::RowVector",2,"double const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (SimpleEigen::RowVector< double > *)new SimpleEigen::RowVector< double >(arg1,(double const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleRowVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = 0 ;
  SimpleEigen::RowVector< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::RowVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::RowVector",1,"SimpleEigen::RowVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("new_DoubleRowVector",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  result = (SimpleEigen::RowVector< double > *)new SimpleEigen::RowVector< double >((SimpleEigen::RowVector< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleRowVector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::EigenRowVector< double > *arg1 = 0 ;
  SimpleEigen::RowVector< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::RowVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::RowVector",1,"SimpleEigen::EigenRowVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__EigenRowVectorT_double_t,0))){
    SWIG_fail_ptr("new_DoubleRowVector",1,SWIGTYPE_p_SimpleEigen__EigenRowVectorT_double_t);
  }
  
  result = (SimpleEigen::RowVector< double > *)new SimpleEigen::RowVector< double >((SimpleEigen::EigenRowVector< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleRowVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DoubleRowVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleRowVector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__EigenRowVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleRowVector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_DoubleRowVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_DoubleRowVector__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DoubleRowVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::RowVector< double >::RowVector()\n"
    "    SimpleEigen::RowVector< double >::RowVector(size_t)\n"
    "    SimpleEigen::RowVector< double >::RowVector(size_t,double const &)\n"
    "    SimpleEigen::RowVector< double >::RowVector(SimpleEigen::RowVector< double > const &)\n"
    "    SimpleEigen::RowVector< double >::RowVector(SimpleEigen::EigenRowVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleRowVector_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::get",1,"SimpleEigen::RowVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< double >::get",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_get",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)(arg1)->get(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::set",1,"SimpleEigen::RowVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< double >::set",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::RowVector< double >::set",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_set",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->set(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_random__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::random",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::random",1,"SimpleEigen::RowVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< double >::random",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_random",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->random(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_random__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::random",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::random",1,"SimpleEigen::RowVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_random",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  (arg1)->random();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_random(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DoubleRowVector_random__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleRowVector_random__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleRowVector_random'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::RowVector< double >::random(int)\n"
    "    SimpleEigen::RowVector< double >::random()\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleRowVector_zero(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::zero",1,"SimpleEigen::RowVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_zero",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  (arg1)->zero();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_ones(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::ones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::ones",1,"SimpleEigen::RowVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_ones",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  (arg1)->ones();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_innerStride(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::innerStride",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::innerStride",1,"SimpleEigen::RowVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_innerStride",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  result = (arg1)->innerStride();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_data(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::data",1,"SimpleEigen::RowVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_data",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  result = (double *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_resize(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::resize",1,"SimpleEigen::RowVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< double >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_resize",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_resizeLike(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  SimpleEigen::RowVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::resizeLike",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::resizeLike",1,"SimpleEigen::RowVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< double >::resizeLike",2,"SimpleEigen::RowVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_resizeLike",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_resizeLike",2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  (arg1)->resizeLike((SimpleEigen::RowVector< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_conservativeResize(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::conservativeResize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::conservativeResize",1,"SimpleEigen::RowVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< double >::conservativeResize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_conservativeResize",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->conservativeResize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_coeff(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::coeff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::coeff",1,"SimpleEigen::RowVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< double >::coeff",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_coeff",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)(arg1)->coeff(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_coeffRef(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  size_t arg2 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::coeffRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::coeffRef",1,"SimpleEigen::RowVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< double >::coeffRef",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_coeffRef",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double *) &(arg1)->coeffRef(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_normalize(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::normalize",1,"SimpleEigen::RowVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_normalize",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_normalized(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  SimpleEigen::RowVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::normalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::normalized",1,"SimpleEigen::RowVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_normalized",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  result = (arg1)->normalized();
  {
    SimpleEigen::RowVector< double > * resultptr = new SimpleEigen::RowVector< double >((const SimpleEigen::RowVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_print(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::print",1,"SimpleEigen::RowVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_print",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_cols(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::cols",1,"SimpleEigen::RowVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_cols",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  result = (arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_dot(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  SimpleEigen::RowVector< double > *arg2 = 0 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::dot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::dot",1,"SimpleEigen::RowVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< double >::dot",2,"SimpleEigen::RowVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_dot",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_dot",2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  result = (double)(arg1)->dot((SimpleEigen::RowVector< double > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_size(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::size",1,"SimpleEigen::RowVector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_size",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  result = ((SimpleEigen::RowVector< double > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_fill(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::fill",1,"SimpleEigen::RowVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< double >::fill",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_fill",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_eval(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  SimpleEigen::RowVector< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::eval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::eval",1,"SimpleEigen::RowVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_eval",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  result = (SimpleEigen::RowVector< double > *) &(arg1)->eval();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_norm(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::norm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::norm",1,"SimpleEigen::RowVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_norm",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  result = (double)(arg1)->norm();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_squaredNorm(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::squaredNorm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::squaredNorm",1,"SimpleEigen::RowVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_squaredNorm",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  result = (double)(arg1)->squaredNorm();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_map(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::map",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::map",1,"SimpleEigen::RowVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< double >::map",2,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_map",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_map",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->map(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_head(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  SimpleEigen::RowVector< double > *arg2 = 0 ;
  size_t arg3 ;
  SimpleEigen::RowVector< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::head",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::head",1,"SimpleEigen::RowVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< double >::head",2,"SimpleEigen::RowVector< double > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::RowVector< double >::head",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_head",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_head",2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (SimpleEigen::RowVector< double > *) &(arg1)->head(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_tail(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  SimpleEigen::RowVector< double > *arg2 = 0 ;
  size_t arg3 ;
  SimpleEigen::RowVector< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::tail",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::tail",1,"SimpleEigen::RowVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< double >::tail",2,"SimpleEigen::RowVector< double > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::RowVector< double >::tail",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_tail",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_tail",2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (SimpleEigen::RowVector< double > *) &(arg1)->tail(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_segment(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  SimpleEigen::RowVector< double > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  SimpleEigen::RowVector< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::segment",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::segment",1,"SimpleEigen::RowVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< double >::segment",2,"SimpleEigen::RowVector< double > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::RowVector< double >::segment",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::RowVector< double >::segment",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_segment",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_segment",2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (SimpleEigen::RowVector< double > *) &(arg1)->segment(*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_LinSpaced(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  SimpleEigen::RowVector< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::LinSpaced",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::LinSpaced",1,"SimpleEigen::RowVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< double >::LinSpaced",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::RowVector< double >::LinSpaced",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::RowVector< double >::LinSpaced",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_LinSpaced",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (SimpleEigen::RowVector< double > *) &(arg1)->LinSpaced(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector___call(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::operator ()",1,"SimpleEigen::RowVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< double >::operator ()",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector___call",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)(arg1)->operator ()(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::__getitem",1,"SimpleEigen::RowVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< double >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector___getitem",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::__setitem",1,"SimpleEigen::RowVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< double >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::RowVector< double >::__setitem",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector___setitem",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  SimpleEigen::RowVector< double > *arg2 = 0 ;
  SimpleEigen::RowVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::operator +",1,"SimpleEigen::RowVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< double >::operator +",2,"SimpleEigen::RowVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector___add",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector___add",2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::RowVector< double > const &)*arg2);
  {
    SimpleEigen::RowVector< double > * resultptr = new SimpleEigen::RowVector< double >((const SimpleEigen::RowVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  SimpleEigen::RowVector< double > *arg2 = 0 ;
  SimpleEigen::RowVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::operator -",1,"SimpleEigen::RowVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< double >::operator -",2,"SimpleEigen::RowVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector___sub",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector___sub",2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::RowVector< double > const &)*arg2);
  {
    SimpleEigen::RowVector< double > * resultptr = new SimpleEigen::RowVector< double >((const SimpleEigen::RowVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  SimpleEigen::RowVector< double > *arg2 = 0 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::operator *",1,"SimpleEigen::RowVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< double >::operator *",2,"SimpleEigen::RowVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector___mul",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector___mul",2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  result = (double)(arg1)->operator *((SimpleEigen::RowVector< double > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  double arg2 ;
  SimpleEigen::RowVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::operator *",1,"SimpleEigen::RowVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< double >::operator *",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector___mul",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = (arg1)->operator *(arg2);
  {
    SimpleEigen::RowVector< double > * resultptr = new SimpleEigen::RowVector< double >((const SimpleEigen::RowVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  double arg2 ;
  SimpleEigen::RowVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::operator /",1,"SimpleEigen::RowVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< double >::operator /",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector___div",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = (arg1)->operator /(arg2);
  {
    SimpleEigen::RowVector< double > * resultptr = new SimpleEigen::RowVector< double >((const SimpleEigen::RowVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_aplus(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  SimpleEigen::RowVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::aplus",1,"SimpleEigen::RowVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< double >::aplus",2,"SimpleEigen::RowVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_aplus",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_aplus",2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  (arg1)->aplus((SimpleEigen::RowVector< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_aminus(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  SimpleEigen::RowVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::aminus",1,"SimpleEigen::RowVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< double >::aminus",2,"SimpleEigen::RowVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_aminus",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_aminus",2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  (arg1)->aminus((SimpleEigen::RowVector< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_adot(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  SimpleEigen::RowVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::adot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::adot",1,"SimpleEigen::RowVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< double >::adot",2,"SimpleEigen::RowVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_adot",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_adot",2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  (arg1)->adot((SimpleEigen::RowVector< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_atimes(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::atimes",1,"SimpleEigen::RowVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< double >::atimes",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_atimes",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->atimes((double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_adiv(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::adiv",1,"SimpleEigen::RowVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< double >::adiv",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_adiv",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->adiv((double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_t(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  SimpleEigen::RowVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::t",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::t",1,"SimpleEigen::RowVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_t",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  result = (arg1)->t();
  {
    SimpleEigen::RowVector< double > * resultptr = new SimpleEigen::RowVector< double >((const SimpleEigen::RowVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_abs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  SimpleEigen::RowVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::abs",1,"SimpleEigen::RowVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_abs",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  result = (arg1)->abs();
  {
    SimpleEigen::RowVector< double > * resultptr = new SimpleEigen::RowVector< double >((const SimpleEigen::RowVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_inverse(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  SimpleEigen::RowVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::inverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::inverse",1,"SimpleEigen::RowVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_inverse",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  result = (arg1)->inverse();
  {
    SimpleEigen::RowVector< double > * resultptr = new SimpleEigen::RowVector< double >((const SimpleEigen::RowVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_sqrt(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  SimpleEigen::RowVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::sqrt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::sqrt",1,"SimpleEigen::RowVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_sqrt",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  result = (arg1)->sqrt();
  {
    SimpleEigen::RowVector< double > * resultptr = new SimpleEigen::RowVector< double >((const SimpleEigen::RowVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector_abs2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  SimpleEigen::RowVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::abs2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::abs2",1,"SimpleEigen::RowVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_abs2",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  result = (arg1)->abs2();
  {
    SimpleEigen::RowVector< double > * resultptr = new SimpleEigen::RowVector< double >((const SimpleEigen::RowVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  SimpleEigen::RowVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::operator *",1,"SimpleEigen::RowVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< double >::operator *",2,"SimpleEigen::Matrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector___mul",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector___mul",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->operator *(*arg2);
  {
    SimpleEigen::RowVector< double > * resultptr = new SimpleEigen::RowVector< double >((const SimpleEigen::RowVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleRowVector___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleRowVector___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleRowVector___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleRowVector___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::RowVector< double >::operator *(SimpleEigen::RowVector< double > const &)\n"
    "    SimpleEigen::RowVector< double >::operator *(double const)\n"
    "    SimpleEigen::RowVector< double >::operator *(SimpleEigen::Matrix< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleRowVector___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::operator +",1,"SimpleEigen::RowVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< double >::operator +",2,"SimpleEigen::Matrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector___add",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector___add",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->operator +(*arg2);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleRowVector___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleRowVector___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleRowVector___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::RowVector< double >::operator +(SimpleEigen::RowVector< double > const &)\n"
    "    SimpleEigen::RowVector< double >::operator +(SimpleEigen::Matrix< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleRowVector___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::operator -",1,"SimpleEigen::RowVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< double >::operator -",2,"SimpleEigen::Matrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector___sub",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector___sub",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->operator -(*arg2);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleRowVector___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleRowVector___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleRowVector___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::RowVector< double >::operator -(SimpleEigen::RowVector< double > const &)\n"
    "    SimpleEigen::RowVector< double >::operator -(SimpleEigen::Matrix< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleRowVector___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::operator /",1,"SimpleEigen::RowVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::RowVector< double >::operator /",2,"SimpleEigen::Matrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector___div",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector___div",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->operator /(*arg2);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRowVector___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleRowVector___div__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleRowVector___div__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleRowVector___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::RowVector< double >::operator /(double const)\n"
    "    SimpleEigen::RowVector< double >::operator /(SimpleEigen::Matrix< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleRowVector_matrix(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::RowVector< double >::matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::RowVector< double >::matrix",1,"SimpleEigen::RowVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleRowVector_matrix",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  result = (arg1)->matrix();
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleRowVector(void *obj) {
SimpleEigen::RowVector< double > *arg1 = (SimpleEigen::RowVector< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleRowVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleRowVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleRowVector_attributes[] = {
    { "vector", _wrap_DoubleRowVector_vector_get, _wrap_DoubleRowVector_vector_set },
    {0,0,0}
};
static swig_lua_method swig_DoubleRowVector_methods[]= {
    { "get", _wrap_DoubleRowVector_get},
    { "set", _wrap_DoubleRowVector_set},
    { "random", _wrap_DoubleRowVector_random},
    { "zero", _wrap_DoubleRowVector_zero},
    { "ones", _wrap_DoubleRowVector_ones},
    { "innerStride", _wrap_DoubleRowVector_innerStride},
    { "data", _wrap_DoubleRowVector_data},
    { "resize", _wrap_DoubleRowVector_resize},
    { "resizeLike", _wrap_DoubleRowVector_resizeLike},
    { "conservativeResize", _wrap_DoubleRowVector_conservativeResize},
    { "coeff", _wrap_DoubleRowVector_coeff},
    { "coeffRef", _wrap_DoubleRowVector_coeffRef},
    { "normalize", _wrap_DoubleRowVector_normalize},
    { "normalized", _wrap_DoubleRowVector_normalized},
    { "print", _wrap_DoubleRowVector_print},
    { "cols", _wrap_DoubleRowVector_cols},
    { "dot", _wrap_DoubleRowVector_dot},
    { "size", _wrap_DoubleRowVector_size},
    { "fill", _wrap_DoubleRowVector_fill},
    { "eval", _wrap_DoubleRowVector_eval},
    { "norm", _wrap_DoubleRowVector_norm},
    { "squaredNorm", _wrap_DoubleRowVector_squaredNorm},
    { "map", _wrap_DoubleRowVector_map},
    { "head", _wrap_DoubleRowVector_head},
    { "tail", _wrap_DoubleRowVector_tail},
    { "segment", _wrap_DoubleRowVector_segment},
    { "LinSpaced", _wrap_DoubleRowVector_LinSpaced},
    { "__call", _wrap_DoubleRowVector___call},
    { "__getitem", _wrap_DoubleRowVector___getitem},
    { "__setitem", _wrap_DoubleRowVector___setitem},
    { "aplus", _wrap_DoubleRowVector_aplus},
    { "aminus", _wrap_DoubleRowVector_aminus},
    { "adot", _wrap_DoubleRowVector_adot},
    { "atimes", _wrap_DoubleRowVector_atimes},
    { "adiv", _wrap_DoubleRowVector_adiv},
    { "t", _wrap_DoubleRowVector_t},
    { "abs", _wrap_DoubleRowVector_abs},
    { "inverse", _wrap_DoubleRowVector_inverse},
    { "sqrt", _wrap_DoubleRowVector_sqrt},
    { "abs2", _wrap_DoubleRowVector_abs2},
    { "__mul", _wrap_DoubleRowVector___mul},
    { "__add", _wrap_DoubleRowVector___add},
    { "__sub", _wrap_DoubleRowVector___sub},
    { "__div", _wrap_DoubleRowVector___div},
    { "matrix", _wrap_DoubleRowVector_matrix},
    {0,0}
};
static swig_lua_method swig_DoubleRowVector_meta[] = {
    { "__call", _wrap_DoubleRowVector___call},
    { "__getitem", _wrap_DoubleRowVector___getitem},
    { "__setitem", _wrap_DoubleRowVector___setitem},
    { "__mul", _wrap_DoubleRowVector___mul},
    { "__add", _wrap_DoubleRowVector___add},
    { "__sub", _wrap_DoubleRowVector___sub},
    { "__div", _wrap_DoubleRowVector___div},
    {0,0}
};

static swig_lua_attribute swig_DoubleRowVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleRowVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleRowVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleRowVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleRowVector_Sf_SwigStatic = {
    "DoubleRowVector",
    swig_DoubleRowVector_Sf_SwigStatic_methods,
    swig_DoubleRowVector_Sf_SwigStatic_attributes,
    swig_DoubleRowVector_Sf_SwigStatic_constants,
    swig_DoubleRowVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleRowVector_bases[] = {0};
static const char *swig_DoubleRowVector_base_names[] = {0};
static swig_lua_class _wrap_class_DoubleRowVector = { "DoubleRowVector", "DoubleRowVector", &SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,_proxy__wrap_new_DoubleRowVector, swig_delete_DoubleRowVector, swig_DoubleRowVector_methods, swig_DoubleRowVector_attributes, &swig_DoubleRowVector_Sf_SwigStatic, swig_DoubleRowVector_meta, swig_DoubleRowVector_bases, swig_DoubleRowVector_base_names };

static int _wrap_FloatColVector_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  SimpleEigen::EigenColVector< float > *arg2 = (SimpleEigen::EigenColVector< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::vector",1,"SimpleEigen::ColVector< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< float >::vector",2,"SimpleEigen::EigenColVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_vector_set",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__EigenColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_vector_set",2,SWIGTYPE_p_SimpleEigen__EigenColVectorT_float_t);
  }
  
  if (arg1) (arg1)->vector = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  SimpleEigen::EigenColVector< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::vector",1,"SimpleEigen::ColVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_vector_get",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = (SimpleEigen::EigenColVector< float > *)& ((arg1)->vector);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__EigenColVectorT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatColVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::ColVector",0,0)
  result = (SimpleEigen::ColVector< float > *)new SimpleEigen::ColVector< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatColVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SimpleEigen::ColVector< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::ColVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::ColVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (SimpleEigen::ColVector< float > *)new SimpleEigen::ColVector< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatColVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float *arg2 = 0 ;
  float temp2 ;
  SimpleEigen::ColVector< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::ColVector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::ColVector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< float >::ColVector",2,"float const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (SimpleEigen::ColVector< float > *)new SimpleEigen::ColVector< float >(arg1,(float const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatColVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = 0 ;
  SimpleEigen::ColVector< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::ColVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::ColVector",1,"SimpleEigen::ColVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("new_FloatColVector",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = (SimpleEigen::ColVector< float > *)new SimpleEigen::ColVector< float >((SimpleEigen::ColVector< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatColVector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::EigenColVector< float > *arg1 = 0 ;
  SimpleEigen::ColVector< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::ColVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::ColVector",1,"SimpleEigen::EigenColVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__EigenColVectorT_float_t,0))){
    SWIG_fail_ptr("new_FloatColVector",1,SWIGTYPE_p_SimpleEigen__EigenColVectorT_float_t);
  }
  
  result = (SimpleEigen::ColVector< float > *)new SimpleEigen::ColVector< float >((SimpleEigen::EigenColVector< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatColVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FloatColVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatColVector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__EigenColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatColVector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_FloatColVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FloatColVector__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatColVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColVector< float >::ColVector()\n"
    "    SimpleEigen::ColVector< float >::ColVector(size_t)\n"
    "    SimpleEigen::ColVector< float >::ColVector(size_t,float const &)\n"
    "    SimpleEigen::ColVector< float >::ColVector(SimpleEigen::ColVector< float > const &)\n"
    "    SimpleEigen::ColVector< float >::ColVector(SimpleEigen::EigenColVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatColVector_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  int arg2 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::get",1,"SimpleEigen::ColVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< float >::get",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_get",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)(arg1)->get(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::set",1,"SimpleEigen::ColVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< float >::set",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColVector< float >::set",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_set",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->set(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_random__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::random",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::random",1,"SimpleEigen::ColVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< float >::random",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_random",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->random(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_random__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::random",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::random",1,"SimpleEigen::ColVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_random",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  (arg1)->random();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_random(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatColVector_random__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatColVector_random__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatColVector_random'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColVector< float >::random(int)\n"
    "    SimpleEigen::ColVector< float >::random()\n");
  lua_error(L);return 0;
}


static int _wrap_FloatColVector_zero(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::zero",1,"SimpleEigen::ColVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_zero",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  (arg1)->zero();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_ones(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::ones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::ones",1,"SimpleEigen::ColVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_ones",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  (arg1)->ones();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_innerStride(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::innerStride",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::innerStride",1,"SimpleEigen::ColVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_innerStride",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = (arg1)->innerStride();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_data(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::data",1,"SimpleEigen::ColVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_data",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = (float *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_resize(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::resize",1,"SimpleEigen::ColVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< float >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_resize",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_resizeLike(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  SimpleEigen::ColVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::resizeLike",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::resizeLike",1,"SimpleEigen::ColVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< float >::resizeLike",2,"SimpleEigen::ColVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_resizeLike",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_resizeLike",2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  (arg1)->resizeLike((SimpleEigen::ColVector< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_conservativeResize(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::conservativeResize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::conservativeResize",1,"SimpleEigen::ColVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< float >::conservativeResize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_conservativeResize",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->conservativeResize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_coeff(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::coeff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::coeff",1,"SimpleEigen::ColVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< float >::coeff",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_coeff",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)(arg1)->coeff(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_coeffRef(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  size_t arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::coeffRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::coeffRef",1,"SimpleEigen::ColVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< float >::coeffRef",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_coeffRef",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float *) &(arg1)->coeffRef(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_print(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::print",1,"SimpleEigen::ColVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_print",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_cols(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::cols",1,"SimpleEigen::ColVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_cols",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = (arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_dot(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  SimpleEigen::ColVector< float > *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::dot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::dot",1,"SimpleEigen::ColVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< float >::dot",2,"SimpleEigen::ColVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_dot",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_dot",2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = (float)(arg1)->dot((SimpleEigen::ColVector< float > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_size(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::size",1,"SimpleEigen::ColVector< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_size",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = ((SimpleEigen::ColVector< float > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_fill(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::fill",1,"SimpleEigen::ColVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< float >::fill",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_fill",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_norm(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::norm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::norm",1,"SimpleEigen::ColVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_norm",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = (float)(arg1)->norm();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_squaredNorm(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::squaredNorm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::squaredNorm",1,"SimpleEigen::ColVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_squaredNorm",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = (float)(arg1)->squaredNorm();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_eval(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  SimpleEigen::ColVector< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::eval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::eval",1,"SimpleEigen::ColVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_eval",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = (SimpleEigen::ColVector< float > *) &(arg1)->eval();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_normalize(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::normalize",1,"SimpleEigen::ColVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_normalize",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_normalized(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::normalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::normalized",1,"SimpleEigen::ColVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_normalized",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = (arg1)->normalized();
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_map(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  std::vector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::map",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::map",1,"SimpleEigen::ColVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< float >::map",2,"std::vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_map",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_map",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->map(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_head(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  SimpleEigen::ColVector< float > *arg2 = 0 ;
  size_t arg3 ;
  SimpleEigen::ColVector< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::head",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::head",1,"SimpleEigen::ColVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< float >::head",2,"SimpleEigen::ColVector< float > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColVector< float >::head",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_head",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_head",2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (SimpleEigen::ColVector< float > *) &(arg1)->head(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_tail(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  SimpleEigen::ColVector< float > *arg2 = 0 ;
  size_t arg3 ;
  SimpleEigen::ColVector< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::tail",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::tail",1,"SimpleEigen::ColVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< float >::tail",2,"SimpleEigen::ColVector< float > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColVector< float >::tail",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_tail",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_tail",2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (SimpleEigen::ColVector< float > *) &(arg1)->tail(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_segment(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  SimpleEigen::ColVector< float > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  SimpleEigen::ColVector< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::segment",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::segment",1,"SimpleEigen::ColVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< float >::segment",2,"SimpleEigen::ColVector< float > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColVector< float >::segment",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::ColVector< float >::segment",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_segment",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_segment",2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (SimpleEigen::ColVector< float > *) &(arg1)->segment(*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_LinSpaced(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  SimpleEigen::ColVector< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::LinSpaced",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::LinSpaced",1,"SimpleEigen::ColVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< float >::LinSpaced",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColVector< float >::LinSpaced",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::ColVector< float >::LinSpaced",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_LinSpaced",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (SimpleEigen::ColVector< float > *) &(arg1)->LinSpaced(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector___call(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::operator ()",1,"SimpleEigen::ColVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< float >::operator ()",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector___call",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)(arg1)->operator ()(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::__getitem",1,"SimpleEigen::ColVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< float >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector___getitem",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::__setitem",1,"SimpleEigen::ColVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< float >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColVector< float >::__setitem",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector___setitem",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  SimpleEigen::ColVector< float > *arg2 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::operator +",1,"SimpleEigen::ColVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< float >::operator +",2,"SimpleEigen::ColVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector___add",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector___add",2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::ColVector< float > const &)*arg2);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  SimpleEigen::ColVector< float > *arg2 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::operator -",1,"SimpleEigen::ColVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< float >::operator -",2,"SimpleEigen::ColVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector___sub",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector___sub",2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::ColVector< float > const &)*arg2);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  SimpleEigen::ColVector< float > *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::operator *",1,"SimpleEigen::ColVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< float >::operator *",2,"SimpleEigen::ColVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector___mul",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector___mul",2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = (float)(arg1)->operator *((SimpleEigen::ColVector< float > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  float arg2 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::operator *",1,"SimpleEigen::ColVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< float >::operator *",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector___mul",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = (arg1)->operator *(arg2);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  float arg2 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::operator /",1,"SimpleEigen::ColVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< float >::operator /",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector___div",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = (arg1)->operator /(arg2);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_aplus(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  SimpleEigen::ColVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::aplus",1,"SimpleEigen::ColVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< float >::aplus",2,"SimpleEigen::ColVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_aplus",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_aplus",2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  (arg1)->aplus((SimpleEigen::ColVector< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_aminus(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  SimpleEigen::ColVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::aminus",1,"SimpleEigen::ColVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< float >::aminus",2,"SimpleEigen::ColVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_aminus",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_aminus",2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  (arg1)->aminus((SimpleEigen::ColVector< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_adot(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  SimpleEigen::ColVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::adot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::adot",1,"SimpleEigen::ColVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< float >::adot",2,"SimpleEigen::ColVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_adot",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_adot",2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  (arg1)->adot((SimpleEigen::ColVector< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_atimes(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::atimes",1,"SimpleEigen::ColVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< float >::atimes",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_atimes",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->atimes((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_adiv(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::adiv",1,"SimpleEigen::ColVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< float >::adiv",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_adiv",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->adiv((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_t(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::t",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::t",1,"SimpleEigen::ColVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_t",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = (arg1)->t();
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_abs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::abs",1,"SimpleEigen::ColVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_abs",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = (arg1)->abs();
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_inverse(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::inverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::inverse",1,"SimpleEigen::ColVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_inverse",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = (arg1)->inverse();
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_sqrt(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::sqrt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::sqrt",1,"SimpleEigen::ColVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_sqrt",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = (arg1)->sqrt();
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector_abs2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::abs2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::abs2",1,"SimpleEigen::ColVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_abs2",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = (arg1)->abs2();
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::operator *",1,"SimpleEigen::ColVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< float >::operator *",2,"SimpleEigen::Matrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector___mul",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColVector___mul",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->operator *(*arg2);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatColVector___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatColVector___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatColVector___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatColVector___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColVector< float >::operator *(SimpleEigen::ColVector< float > const &)\n"
    "    SimpleEigen::ColVector< float >::operator *(float const)\n"
    "    SimpleEigen::ColVector< float >::operator *(SimpleEigen::Matrix< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatColVector___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::operator +",1,"SimpleEigen::ColVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< float >::operator +",2,"SimpleEigen::Matrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector___add",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColVector___add",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->operator +(*arg2);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatColVector___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatColVector___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatColVector___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColVector< float >::operator +(SimpleEigen::ColVector< float > const &)\n"
    "    SimpleEigen::ColVector< float >::operator +(SimpleEigen::Matrix< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatColVector___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::operator -",1,"SimpleEigen::ColVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< float >::operator -",2,"SimpleEigen::Matrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector___sub",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColVector___sub",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->operator -(*arg2);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatColVector___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatColVector___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatColVector___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColVector< float >::operator -(SimpleEigen::ColVector< float > const &)\n"
    "    SimpleEigen::ColVector< float >::operator -(SimpleEigen::Matrix< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatColVector___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::operator /",1,"SimpleEigen::ColVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< float >::operator /",2,"SimpleEigen::Matrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector___div",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColVector___div",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->operator /(*arg2);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColVector___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatColVector___div__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatColVector___div__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatColVector___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColVector< float >::operator /(float const)\n"
    "    SimpleEigen::ColVector< float >::operator /(SimpleEigen::Matrix< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatColVector_matrix(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< float >::matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< float >::matrix",1,"SimpleEigen::ColVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColVector_matrix",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = (arg1)->matrix();
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatColVector(void *obj) {
SimpleEigen::ColVector< float > *arg1 = (SimpleEigen::ColVector< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatColVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatColVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatColVector_attributes[] = {
    { "vector", _wrap_FloatColVector_vector_get, _wrap_FloatColVector_vector_set },
    {0,0,0}
};
static swig_lua_method swig_FloatColVector_methods[]= {
    { "get", _wrap_FloatColVector_get},
    { "set", _wrap_FloatColVector_set},
    { "random", _wrap_FloatColVector_random},
    { "zero", _wrap_FloatColVector_zero},
    { "ones", _wrap_FloatColVector_ones},
    { "innerStride", _wrap_FloatColVector_innerStride},
    { "data", _wrap_FloatColVector_data},
    { "resize", _wrap_FloatColVector_resize},
    { "resizeLike", _wrap_FloatColVector_resizeLike},
    { "conservativeResize", _wrap_FloatColVector_conservativeResize},
    { "coeff", _wrap_FloatColVector_coeff},
    { "coeffRef", _wrap_FloatColVector_coeffRef},
    { "print", _wrap_FloatColVector_print},
    { "cols", _wrap_FloatColVector_cols},
    { "dot", _wrap_FloatColVector_dot},
    { "size", _wrap_FloatColVector_size},
    { "fill", _wrap_FloatColVector_fill},
    { "norm", _wrap_FloatColVector_norm},
    { "squaredNorm", _wrap_FloatColVector_squaredNorm},
    { "eval", _wrap_FloatColVector_eval},
    { "normalize", _wrap_FloatColVector_normalize},
    { "normalized", _wrap_FloatColVector_normalized},
    { "map", _wrap_FloatColVector_map},
    { "head", _wrap_FloatColVector_head},
    { "tail", _wrap_FloatColVector_tail},
    { "segment", _wrap_FloatColVector_segment},
    { "LinSpaced", _wrap_FloatColVector_LinSpaced},
    { "__call", _wrap_FloatColVector___call},
    { "__getitem", _wrap_FloatColVector___getitem},
    { "__setitem", _wrap_FloatColVector___setitem},
    { "aplus", _wrap_FloatColVector_aplus},
    { "aminus", _wrap_FloatColVector_aminus},
    { "adot", _wrap_FloatColVector_adot},
    { "atimes", _wrap_FloatColVector_atimes},
    { "adiv", _wrap_FloatColVector_adiv},
    { "t", _wrap_FloatColVector_t},
    { "abs", _wrap_FloatColVector_abs},
    { "inverse", _wrap_FloatColVector_inverse},
    { "sqrt", _wrap_FloatColVector_sqrt},
    { "abs2", _wrap_FloatColVector_abs2},
    { "__mul", _wrap_FloatColVector___mul},
    { "__add", _wrap_FloatColVector___add},
    { "__sub", _wrap_FloatColVector___sub},
    { "__div", _wrap_FloatColVector___div},
    { "matrix", _wrap_FloatColVector_matrix},
    {0,0}
};
static swig_lua_method swig_FloatColVector_meta[] = {
    { "__call", _wrap_FloatColVector___call},
    { "__getitem", _wrap_FloatColVector___getitem},
    { "__setitem", _wrap_FloatColVector___setitem},
    { "__mul", _wrap_FloatColVector___mul},
    { "__add", _wrap_FloatColVector___add},
    { "__sub", _wrap_FloatColVector___sub},
    { "__div", _wrap_FloatColVector___div},
    {0,0}
};

static swig_lua_attribute swig_FloatColVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatColVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatColVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatColVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatColVector_Sf_SwigStatic = {
    "FloatColVector",
    swig_FloatColVector_Sf_SwigStatic_methods,
    swig_FloatColVector_Sf_SwigStatic_attributes,
    swig_FloatColVector_Sf_SwigStatic_constants,
    swig_FloatColVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatColVector_bases[] = {0,0};
static const char *swig_FloatColVector_base_names[] = {"SimpleEigen::Base *",0};
static swig_lua_class _wrap_class_FloatColVector = { "FloatColVector", "FloatColVector", &SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,_proxy__wrap_new_FloatColVector, swig_delete_FloatColVector, swig_FloatColVector_methods, swig_FloatColVector_attributes, &swig_FloatColVector_Sf_SwigStatic, swig_FloatColVector_meta, swig_FloatColVector_bases, swig_FloatColVector_base_names };

static int _wrap_DoubleColVector_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  SimpleEigen::EigenColVector< double > *arg2 = (SimpleEigen::EigenColVector< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::vector",1,"SimpleEigen::ColVector< double > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< double >::vector",2,"SimpleEigen::EigenColVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_vector_set",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__EigenColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_vector_set",2,SWIGTYPE_p_SimpleEigen__EigenColVectorT_double_t);
  }
  
  if (arg1) (arg1)->vector = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  SimpleEigen::EigenColVector< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::vector",1,"SimpleEigen::ColVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_vector_get",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  result = (SimpleEigen::EigenColVector< double > *)& ((arg1)->vector);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__EigenColVectorT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleColVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::ColVector",0,0)
  result = (SimpleEigen::ColVector< double > *)new SimpleEigen::ColVector< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleColVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SimpleEigen::ColVector< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::ColVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::ColVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (SimpleEigen::ColVector< double > *)new SimpleEigen::ColVector< double >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleColVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double *arg2 = 0 ;
  double temp2 ;
  SimpleEigen::ColVector< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::ColVector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::ColVector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< double >::ColVector",2,"double const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (SimpleEigen::ColVector< double > *)new SimpleEigen::ColVector< double >(arg1,(double const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleColVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = 0 ;
  SimpleEigen::ColVector< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::ColVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::ColVector",1,"SimpleEigen::ColVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("new_DoubleColVector",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  result = (SimpleEigen::ColVector< double > *)new SimpleEigen::ColVector< double >((SimpleEigen::ColVector< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleColVector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::EigenColVector< double > *arg1 = 0 ;
  SimpleEigen::ColVector< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::ColVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::ColVector",1,"SimpleEigen::EigenColVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__EigenColVectorT_double_t,0))){
    SWIG_fail_ptr("new_DoubleColVector",1,SWIGTYPE_p_SimpleEigen__EigenColVectorT_double_t);
  }
  
  result = (SimpleEigen::ColVector< double > *)new SimpleEigen::ColVector< double >((SimpleEigen::EigenColVector< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleColVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DoubleColVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleColVector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__EigenColVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleColVector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_DoubleColVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_DoubleColVector__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DoubleColVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColVector< double >::ColVector()\n"
    "    SimpleEigen::ColVector< double >::ColVector(size_t)\n"
    "    SimpleEigen::ColVector< double >::ColVector(size_t,double const &)\n"
    "    SimpleEigen::ColVector< double >::ColVector(SimpleEigen::ColVector< double > const &)\n"
    "    SimpleEigen::ColVector< double >::ColVector(SimpleEigen::EigenColVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleColVector_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::get",1,"SimpleEigen::ColVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< double >::get",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_get",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)(arg1)->get(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::set",1,"SimpleEigen::ColVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< double >::set",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColVector< double >::set",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_set",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->set(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_random__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::random",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::random",1,"SimpleEigen::ColVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< double >::random",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_random",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->random(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_random__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::random",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::random",1,"SimpleEigen::ColVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_random",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  (arg1)->random();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_random(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DoubleColVector_random__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleColVector_random__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleColVector_random'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColVector< double >::random(int)\n"
    "    SimpleEigen::ColVector< double >::random()\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleColVector_zero(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::zero",1,"SimpleEigen::ColVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_zero",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  (arg1)->zero();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_ones(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::ones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::ones",1,"SimpleEigen::ColVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_ones",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  (arg1)->ones();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_innerStride(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::innerStride",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::innerStride",1,"SimpleEigen::ColVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_innerStride",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  result = (arg1)->innerStride();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_data(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::data",1,"SimpleEigen::ColVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_data",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  result = (double *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_resize(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::resize",1,"SimpleEigen::ColVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< double >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_resize",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_resizeLike(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  SimpleEigen::ColVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::resizeLike",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::resizeLike",1,"SimpleEigen::ColVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< double >::resizeLike",2,"SimpleEigen::ColVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_resizeLike",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_resizeLike",2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  (arg1)->resizeLike((SimpleEigen::ColVector< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_conservativeResize(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::conservativeResize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::conservativeResize",1,"SimpleEigen::ColVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< double >::conservativeResize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_conservativeResize",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->conservativeResize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_coeff(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::coeff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::coeff",1,"SimpleEigen::ColVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< double >::coeff",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_coeff",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)(arg1)->coeff(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_coeffRef(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  size_t arg2 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::coeffRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::coeffRef",1,"SimpleEigen::ColVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< double >::coeffRef",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_coeffRef",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double *) &(arg1)->coeffRef(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_print(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::print",1,"SimpleEigen::ColVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_print",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_cols(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::cols",1,"SimpleEigen::ColVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_cols",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  result = (arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_dot(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  SimpleEigen::ColVector< double > *arg2 = 0 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::dot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::dot",1,"SimpleEigen::ColVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< double >::dot",2,"SimpleEigen::ColVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_dot",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_dot",2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  result = (double)(arg1)->dot((SimpleEigen::ColVector< double > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_size(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::size",1,"SimpleEigen::ColVector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_size",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  result = ((SimpleEigen::ColVector< double > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_fill(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::fill",1,"SimpleEigen::ColVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< double >::fill",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_fill",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_norm(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::norm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::norm",1,"SimpleEigen::ColVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_norm",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  result = (double)(arg1)->norm();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_squaredNorm(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::squaredNorm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::squaredNorm",1,"SimpleEigen::ColVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_squaredNorm",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  result = (double)(arg1)->squaredNorm();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_eval(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  SimpleEigen::ColVector< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::eval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::eval",1,"SimpleEigen::ColVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_eval",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  result = (SimpleEigen::ColVector< double > *) &(arg1)->eval();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_normalize(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::normalize",1,"SimpleEigen::ColVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_normalize",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_normalized(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  SimpleEigen::ColVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::normalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::normalized",1,"SimpleEigen::ColVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_normalized",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  result = (arg1)->normalized();
  {
    SimpleEigen::ColVector< double > * resultptr = new SimpleEigen::ColVector< double >((const SimpleEigen::ColVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_map(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::map",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::map",1,"SimpleEigen::ColVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< double >::map",2,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_map",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_map",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->map(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_head(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  SimpleEigen::ColVector< double > *arg2 = 0 ;
  size_t arg3 ;
  SimpleEigen::ColVector< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::head",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::head",1,"SimpleEigen::ColVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< double >::head",2,"SimpleEigen::ColVector< double > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColVector< double >::head",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_head",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_head",2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (SimpleEigen::ColVector< double > *) &(arg1)->head(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_tail(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  SimpleEigen::ColVector< double > *arg2 = 0 ;
  size_t arg3 ;
  SimpleEigen::ColVector< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::tail",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::tail",1,"SimpleEigen::ColVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< double >::tail",2,"SimpleEigen::ColVector< double > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColVector< double >::tail",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_tail",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_tail",2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (SimpleEigen::ColVector< double > *) &(arg1)->tail(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_segment(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  SimpleEigen::ColVector< double > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  SimpleEigen::ColVector< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::segment",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::segment",1,"SimpleEigen::ColVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< double >::segment",2,"SimpleEigen::ColVector< double > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColVector< double >::segment",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::ColVector< double >::segment",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_segment",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_segment",2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (SimpleEigen::ColVector< double > *) &(arg1)->segment(*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_LinSpaced(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  SimpleEigen::ColVector< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::LinSpaced",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::LinSpaced",1,"SimpleEigen::ColVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< double >::LinSpaced",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColVector< double >::LinSpaced",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::ColVector< double >::LinSpaced",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_LinSpaced",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (SimpleEigen::ColVector< double > *) &(arg1)->LinSpaced(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector___call(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::operator ()",1,"SimpleEigen::ColVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< double >::operator ()",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector___call",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)(arg1)->operator ()(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::__getitem",1,"SimpleEigen::ColVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< double >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector___getitem",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::__setitem",1,"SimpleEigen::ColVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< double >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColVector< double >::__setitem",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector___setitem",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  SimpleEigen::ColVector< double > *arg2 = 0 ;
  SimpleEigen::ColVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::operator +",1,"SimpleEigen::ColVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< double >::operator +",2,"SimpleEigen::ColVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector___add",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector___add",2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::ColVector< double > const &)*arg2);
  {
    SimpleEigen::ColVector< double > * resultptr = new SimpleEigen::ColVector< double >((const SimpleEigen::ColVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  SimpleEigen::ColVector< double > *arg2 = 0 ;
  SimpleEigen::ColVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::operator -",1,"SimpleEigen::ColVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< double >::operator -",2,"SimpleEigen::ColVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector___sub",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector___sub",2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::ColVector< double > const &)*arg2);
  {
    SimpleEigen::ColVector< double > * resultptr = new SimpleEigen::ColVector< double >((const SimpleEigen::ColVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  SimpleEigen::ColVector< double > *arg2 = 0 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::operator *",1,"SimpleEigen::ColVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< double >::operator *",2,"SimpleEigen::ColVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector___mul",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector___mul",2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  result = (double)(arg1)->operator *((SimpleEigen::ColVector< double > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  double arg2 ;
  SimpleEigen::ColVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::operator *",1,"SimpleEigen::ColVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< double >::operator *",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector___mul",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = (arg1)->operator *(arg2);
  {
    SimpleEigen::ColVector< double > * resultptr = new SimpleEigen::ColVector< double >((const SimpleEigen::ColVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  double arg2 ;
  SimpleEigen::ColVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::operator /",1,"SimpleEigen::ColVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< double >::operator /",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector___div",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = (arg1)->operator /(arg2);
  {
    SimpleEigen::ColVector< double > * resultptr = new SimpleEigen::ColVector< double >((const SimpleEigen::ColVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_aplus(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  SimpleEigen::ColVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::aplus",1,"SimpleEigen::ColVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< double >::aplus",2,"SimpleEigen::ColVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_aplus",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_aplus",2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  (arg1)->aplus((SimpleEigen::ColVector< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_aminus(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  SimpleEigen::ColVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::aminus",1,"SimpleEigen::ColVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< double >::aminus",2,"SimpleEigen::ColVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_aminus",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_aminus",2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  (arg1)->aminus((SimpleEigen::ColVector< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_adot(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  SimpleEigen::ColVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::adot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::adot",1,"SimpleEigen::ColVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< double >::adot",2,"SimpleEigen::ColVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_adot",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_adot",2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  (arg1)->adot((SimpleEigen::ColVector< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_atimes(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::atimes",1,"SimpleEigen::ColVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< double >::atimes",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_atimes",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->atimes((double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_adiv(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::adiv",1,"SimpleEigen::ColVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< double >::adiv",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_adiv",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->adiv((double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_t(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  SimpleEigen::ColVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::t",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::t",1,"SimpleEigen::ColVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_t",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  result = (arg1)->t();
  {
    SimpleEigen::ColVector< double > * resultptr = new SimpleEigen::ColVector< double >((const SimpleEigen::ColVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_abs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  SimpleEigen::ColVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::abs",1,"SimpleEigen::ColVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_abs",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  result = (arg1)->abs();
  {
    SimpleEigen::ColVector< double > * resultptr = new SimpleEigen::ColVector< double >((const SimpleEigen::ColVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_inverse(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  SimpleEigen::ColVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::inverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::inverse",1,"SimpleEigen::ColVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_inverse",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  result = (arg1)->inverse();
  {
    SimpleEigen::ColVector< double > * resultptr = new SimpleEigen::ColVector< double >((const SimpleEigen::ColVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_sqrt(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  SimpleEigen::ColVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::sqrt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::sqrt",1,"SimpleEigen::ColVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_sqrt",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  result = (arg1)->sqrt();
  {
    SimpleEigen::ColVector< double > * resultptr = new SimpleEigen::ColVector< double >((const SimpleEigen::ColVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector_abs2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  SimpleEigen::ColVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::abs2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::abs2",1,"SimpleEigen::ColVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_abs2",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  result = (arg1)->abs2();
  {
    SimpleEigen::ColVector< double > * resultptr = new SimpleEigen::ColVector< double >((const SimpleEigen::ColVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  SimpleEigen::ColVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::operator *",1,"SimpleEigen::ColVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< double >::operator *",2,"SimpleEigen::Matrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector___mul",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector___mul",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->operator *(*arg2);
  {
    SimpleEigen::ColVector< double > * resultptr = new SimpleEigen::ColVector< double >((const SimpleEigen::ColVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleColVector___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleColVector___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleColVector___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleColVector___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColVector< double >::operator *(SimpleEigen::ColVector< double > const &)\n"
    "    SimpleEigen::ColVector< double >::operator *(double const)\n"
    "    SimpleEigen::ColVector< double >::operator *(SimpleEigen::Matrix< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleColVector___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::operator +",1,"SimpleEigen::ColVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< double >::operator +",2,"SimpleEigen::Matrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector___add",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector___add",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->operator +(*arg2);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleColVector___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleColVector___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleColVector___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColVector< double >::operator +(SimpleEigen::ColVector< double > const &)\n"
    "    SimpleEigen::ColVector< double >::operator +(SimpleEigen::Matrix< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleColVector___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::operator -",1,"SimpleEigen::ColVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< double >::operator -",2,"SimpleEigen::Matrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector___sub",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector___sub",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->operator -(*arg2);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleColVector___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleColVector___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleColVector___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColVector< double >::operator -(SimpleEigen::ColVector< double > const &)\n"
    "    SimpleEigen::ColVector< double >::operator -(SimpleEigen::Matrix< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleColVector___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::operator /",1,"SimpleEigen::ColVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColVector< double >::operator /",2,"SimpleEigen::Matrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector___div",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector___div",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->operator /(*arg2);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColVector___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleColVector___div__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleColVector___div__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleColVector___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColVector< double >::operator /(double const)\n"
    "    SimpleEigen::ColVector< double >::operator /(SimpleEigen::Matrix< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleColVector_matrix(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColVector< double >::matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColVector< double >::matrix",1,"SimpleEigen::ColVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColVector_matrix",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  result = (arg1)->matrix();
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleColVector(void *obj) {
SimpleEigen::ColVector< double > *arg1 = (SimpleEigen::ColVector< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleColVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleColVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleColVector_attributes[] = {
    { "vector", _wrap_DoubleColVector_vector_get, _wrap_DoubleColVector_vector_set },
    {0,0,0}
};
static swig_lua_method swig_DoubleColVector_methods[]= {
    { "get", _wrap_DoubleColVector_get},
    { "set", _wrap_DoubleColVector_set},
    { "random", _wrap_DoubleColVector_random},
    { "zero", _wrap_DoubleColVector_zero},
    { "ones", _wrap_DoubleColVector_ones},
    { "innerStride", _wrap_DoubleColVector_innerStride},
    { "data", _wrap_DoubleColVector_data},
    { "resize", _wrap_DoubleColVector_resize},
    { "resizeLike", _wrap_DoubleColVector_resizeLike},
    { "conservativeResize", _wrap_DoubleColVector_conservativeResize},
    { "coeff", _wrap_DoubleColVector_coeff},
    { "coeffRef", _wrap_DoubleColVector_coeffRef},
    { "print", _wrap_DoubleColVector_print},
    { "cols", _wrap_DoubleColVector_cols},
    { "dot", _wrap_DoubleColVector_dot},
    { "size", _wrap_DoubleColVector_size},
    { "fill", _wrap_DoubleColVector_fill},
    { "norm", _wrap_DoubleColVector_norm},
    { "squaredNorm", _wrap_DoubleColVector_squaredNorm},
    { "eval", _wrap_DoubleColVector_eval},
    { "normalize", _wrap_DoubleColVector_normalize},
    { "normalized", _wrap_DoubleColVector_normalized},
    { "map", _wrap_DoubleColVector_map},
    { "head", _wrap_DoubleColVector_head},
    { "tail", _wrap_DoubleColVector_tail},
    { "segment", _wrap_DoubleColVector_segment},
    { "LinSpaced", _wrap_DoubleColVector_LinSpaced},
    { "__call", _wrap_DoubleColVector___call},
    { "__getitem", _wrap_DoubleColVector___getitem},
    { "__setitem", _wrap_DoubleColVector___setitem},
    { "aplus", _wrap_DoubleColVector_aplus},
    { "aminus", _wrap_DoubleColVector_aminus},
    { "adot", _wrap_DoubleColVector_adot},
    { "atimes", _wrap_DoubleColVector_atimes},
    { "adiv", _wrap_DoubleColVector_adiv},
    { "t", _wrap_DoubleColVector_t},
    { "abs", _wrap_DoubleColVector_abs},
    { "inverse", _wrap_DoubleColVector_inverse},
    { "sqrt", _wrap_DoubleColVector_sqrt},
    { "abs2", _wrap_DoubleColVector_abs2},
    { "__mul", _wrap_DoubleColVector___mul},
    { "__add", _wrap_DoubleColVector___add},
    { "__sub", _wrap_DoubleColVector___sub},
    { "__div", _wrap_DoubleColVector___div},
    { "matrix", _wrap_DoubleColVector_matrix},
    {0,0}
};
static swig_lua_method swig_DoubleColVector_meta[] = {
    { "__call", _wrap_DoubleColVector___call},
    { "__getitem", _wrap_DoubleColVector___getitem},
    { "__setitem", _wrap_DoubleColVector___setitem},
    { "__mul", _wrap_DoubleColVector___mul},
    { "__add", _wrap_DoubleColVector___add},
    { "__sub", _wrap_DoubleColVector___sub},
    { "__div", _wrap_DoubleColVector___div},
    {0,0}
};

static swig_lua_attribute swig_DoubleColVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleColVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleColVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleColVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleColVector_Sf_SwigStatic = {
    "DoubleColVector",
    swig_DoubleColVector_Sf_SwigStatic_methods,
    swig_DoubleColVector_Sf_SwigStatic_attributes,
    swig_DoubleColVector_Sf_SwigStatic_constants,
    swig_DoubleColVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleColVector_bases[] = {0,0};
static const char *swig_DoubleColVector_base_names[] = {"SimpleEigen::Base *",0};
static swig_lua_class _wrap_class_DoubleColVector = { "DoubleColVector", "DoubleColVector", &SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,_proxy__wrap_new_DoubleColVector, swig_delete_DoubleColVector, swig_DoubleColVector_methods, swig_DoubleColVector_attributes, &swig_DoubleColVector_Sf_SwigStatic, swig_DoubleColVector_meta, swig_DoubleColVector_bases, swig_DoubleColVector_base_names };

static int _wrap_new_FloatMatrixView(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::EigenMatrix< float > *arg1 = (SimpleEigen::EigenMatrix< float > *) 0 ;
  size_t arg2 ;
  SimpleEigen::MatrixView< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::MatrixView< float >::MatrixView",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::MatrixView< float >::MatrixView",1,"SimpleEigen::EigenMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::MatrixView< float >::MatrixView",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__EigenMatrixT_float_t,0))){
    SWIG_fail_ptr("new_FloatMatrixView",1,SWIGTYPE_p_SimpleEigen__EigenMatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (SimpleEigen::MatrixView< float > *)new SimpleEigen::MatrixView< float >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__MatrixViewT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrixView___getitem(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::MatrixView< float > *arg1 = (SimpleEigen::MatrixView< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::MatrixView< float >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::MatrixView< float >::__getitem",1,"SimpleEigen::MatrixView< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::MatrixView< float >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixViewT_float_t,0))){
    SWIG_fail_ptr("FloatMatrixView___getitem",1,SWIGTYPE_p_SimpleEigen__MatrixViewT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrixView___setitem(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::MatrixView< float > *arg1 = (SimpleEigen::MatrixView< float > *) 0 ;
  size_t arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("SimpleEigen::MatrixView< float >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::MatrixView< float >::__setitem",1,"SimpleEigen::MatrixView< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::MatrixView< float >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::MatrixView< float >::__setitem",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixViewT_float_t,0))){
    SWIG_fail_ptr("FloatMatrixView___setitem",1,SWIGTYPE_p_SimpleEigen__MatrixViewT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->__setitem(arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrixView_use_rows(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::MatrixView< float > *arg1 = (SimpleEigen::MatrixView< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::MatrixView< float >::use_rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::MatrixView< float >::use_rows",1,"SimpleEigen::MatrixView< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixViewT_float_t,0))){
    SWIG_fail_ptr("FloatMatrixView_use_rows",1,SWIGTYPE_p_SimpleEigen__MatrixViewT_float_t);
  }
  
  (arg1)->use_rows();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrixView_use_cols(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::MatrixView< float > *arg1 = (SimpleEigen::MatrixView< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::MatrixView< float >::use_cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::MatrixView< float >::use_cols",1,"SimpleEigen::MatrixView< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixViewT_float_t,0))){
    SWIG_fail_ptr("FloatMatrixView_use_cols",1,SWIGTYPE_p_SimpleEigen__MatrixViewT_float_t);
  }
  
  (arg1)->use_cols();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrixView_rows(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::MatrixView< float > *arg1 = (SimpleEigen::MatrixView< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::MatrixView< float >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::MatrixView< float >::rows",1,"SimpleEigen::MatrixView< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixViewT_float_t,0))){
    SWIG_fail_ptr("FloatMatrixView_rows",1,SWIGTYPE_p_SimpleEigen__MatrixViewT_float_t);
  }
  
  result = (arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrixView_cols(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::MatrixView< float > *arg1 = (SimpleEigen::MatrixView< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::MatrixView< float >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::MatrixView< float >::cols",1,"SimpleEigen::MatrixView< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixViewT_float_t,0))){
    SWIG_fail_ptr("FloatMatrixView_cols",1,SWIGTYPE_p_SimpleEigen__MatrixViewT_float_t);
  }
  
  result = (arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrixView_set_row(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::MatrixView< float > *arg1 = (SimpleEigen::MatrixView< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("SimpleEigen::MatrixView< float >::set_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::MatrixView< float >::set_row",1,"SimpleEigen::MatrixView< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::MatrixView< float >::set_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixViewT_float_t,0))){
    SWIG_fail_ptr("FloatMatrixView_set_row",1,SWIGTYPE_p_SimpleEigen__MatrixViewT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->set_row(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrixView_set_col(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::MatrixView< float > *arg1 = (SimpleEigen::MatrixView< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("SimpleEigen::MatrixView< float >::set_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::MatrixView< float >::set_col",1,"SimpleEigen::MatrixView< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::MatrixView< float >::set_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixViewT_float_t,0))){
    SWIG_fail_ptr("FloatMatrixView_set_col",1,SWIGTYPE_p_SimpleEigen__MatrixViewT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->set_col(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatMatrixView(void *obj) {
SimpleEigen::MatrixView< float > *arg1 = (SimpleEigen::MatrixView< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatMatrixView(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatMatrixView);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatMatrixView_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FloatMatrixView_methods[]= {
    { "__getitem", _wrap_FloatMatrixView___getitem},
    { "__setitem", _wrap_FloatMatrixView___setitem},
    { "use_rows", _wrap_FloatMatrixView_use_rows},
    { "use_cols", _wrap_FloatMatrixView_use_cols},
    { "rows", _wrap_FloatMatrixView_rows},
    { "cols", _wrap_FloatMatrixView_cols},
    { "set_row", _wrap_FloatMatrixView_set_row},
    { "set_col", _wrap_FloatMatrixView_set_col},
    {0,0}
};
static swig_lua_method swig_FloatMatrixView_meta[] = {
    { "__getitem", _wrap_FloatMatrixView___getitem},
    { "__setitem", _wrap_FloatMatrixView___setitem},
    {0,0}
};

static swig_lua_attribute swig_FloatMatrixView_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatMatrixView_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatMatrixView_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatMatrixView_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatMatrixView_Sf_SwigStatic = {
    "FloatMatrixView",
    swig_FloatMatrixView_Sf_SwigStatic_methods,
    swig_FloatMatrixView_Sf_SwigStatic_attributes,
    swig_FloatMatrixView_Sf_SwigStatic_constants,
    swig_FloatMatrixView_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatMatrixView_bases[] = {0,0};
static const char *swig_FloatMatrixView_base_names[] = {"SimpleEigen::Base *",0};
static swig_lua_class _wrap_class_FloatMatrixView = { "FloatMatrixView", "FloatMatrixView", &SWIGTYPE_p_SimpleEigen__MatrixViewT_float_t,_proxy__wrap_new_FloatMatrixView, swig_delete_FloatMatrixView, swig_FloatMatrixView_methods, swig_FloatMatrixView_attributes, &swig_FloatMatrixView_Sf_SwigStatic, swig_FloatMatrixView_meta, swig_FloatMatrixView_bases, swig_FloatMatrixView_base_names };

static int _wrap_new_DoubleMatrixView(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::EigenMatrix< double > *arg1 = (SimpleEigen::EigenMatrix< double > *) 0 ;
  size_t arg2 ;
  SimpleEigen::MatrixView< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::MatrixView< double >::MatrixView",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::MatrixView< double >::MatrixView",1,"SimpleEigen::EigenMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::MatrixView< double >::MatrixView",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__EigenMatrixT_double_t,0))){
    SWIG_fail_ptr("new_DoubleMatrixView",1,SWIGTYPE_p_SimpleEigen__EigenMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (SimpleEigen::MatrixView< double > *)new SimpleEigen::MatrixView< double >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__MatrixViewT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrixView___getitem(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::MatrixView< double > *arg1 = (SimpleEigen::MatrixView< double > *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::MatrixView< double >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::MatrixView< double >::__getitem",1,"SimpleEigen::MatrixView< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::MatrixView< double >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixViewT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrixView___getitem",1,SWIGTYPE_p_SimpleEigen__MatrixViewT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrixView___setitem(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::MatrixView< double > *arg1 = (SimpleEigen::MatrixView< double > *) 0 ;
  size_t arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  SWIG_check_num_args("SimpleEigen::MatrixView< double >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::MatrixView< double >::__setitem",1,"SimpleEigen::MatrixView< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::MatrixView< double >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::MatrixView< double >::__setitem",3,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixViewT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrixView___setitem",1,SWIGTYPE_p_SimpleEigen__MatrixViewT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->__setitem(arg2,(double const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrixView_use_rows(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::MatrixView< double > *arg1 = (SimpleEigen::MatrixView< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::MatrixView< double >::use_rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::MatrixView< double >::use_rows",1,"SimpleEigen::MatrixView< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixViewT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrixView_use_rows",1,SWIGTYPE_p_SimpleEigen__MatrixViewT_double_t);
  }
  
  (arg1)->use_rows();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrixView_use_cols(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::MatrixView< double > *arg1 = (SimpleEigen::MatrixView< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::MatrixView< double >::use_cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::MatrixView< double >::use_cols",1,"SimpleEigen::MatrixView< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixViewT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrixView_use_cols",1,SWIGTYPE_p_SimpleEigen__MatrixViewT_double_t);
  }
  
  (arg1)->use_cols();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrixView_rows(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::MatrixView< double > *arg1 = (SimpleEigen::MatrixView< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::MatrixView< double >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::MatrixView< double >::rows",1,"SimpleEigen::MatrixView< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixViewT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrixView_rows",1,SWIGTYPE_p_SimpleEigen__MatrixViewT_double_t);
  }
  
  result = (arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrixView_cols(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::MatrixView< double > *arg1 = (SimpleEigen::MatrixView< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::MatrixView< double >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::MatrixView< double >::cols",1,"SimpleEigen::MatrixView< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixViewT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrixView_cols",1,SWIGTYPE_p_SimpleEigen__MatrixViewT_double_t);
  }
  
  result = (arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrixView_set_row(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::MatrixView< double > *arg1 = (SimpleEigen::MatrixView< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("SimpleEigen::MatrixView< double >::set_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::MatrixView< double >::set_row",1,"SimpleEigen::MatrixView< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::MatrixView< double >::set_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixViewT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrixView_set_row",1,SWIGTYPE_p_SimpleEigen__MatrixViewT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->set_row(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrixView_set_col(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::MatrixView< double > *arg1 = (SimpleEigen::MatrixView< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("SimpleEigen::MatrixView< double >::set_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::MatrixView< double >::set_col",1,"SimpleEigen::MatrixView< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::MatrixView< double >::set_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixViewT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrixView_set_col",1,SWIGTYPE_p_SimpleEigen__MatrixViewT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->set_col(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleMatrixView(void *obj) {
SimpleEigen::MatrixView< double > *arg1 = (SimpleEigen::MatrixView< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleMatrixView(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleMatrixView);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleMatrixView_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DoubleMatrixView_methods[]= {
    { "__getitem", _wrap_DoubleMatrixView___getitem},
    { "__setitem", _wrap_DoubleMatrixView___setitem},
    { "use_rows", _wrap_DoubleMatrixView_use_rows},
    { "use_cols", _wrap_DoubleMatrixView_use_cols},
    { "rows", _wrap_DoubleMatrixView_rows},
    { "cols", _wrap_DoubleMatrixView_cols},
    { "set_row", _wrap_DoubleMatrixView_set_row},
    { "set_col", _wrap_DoubleMatrixView_set_col},
    {0,0}
};
static swig_lua_method swig_DoubleMatrixView_meta[] = {
    { "__getitem", _wrap_DoubleMatrixView___getitem},
    { "__setitem", _wrap_DoubleMatrixView___setitem},
    {0,0}
};

static swig_lua_attribute swig_DoubleMatrixView_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleMatrixView_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleMatrixView_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleMatrixView_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleMatrixView_Sf_SwigStatic = {
    "DoubleMatrixView",
    swig_DoubleMatrixView_Sf_SwigStatic_methods,
    swig_DoubleMatrixView_Sf_SwigStatic_attributes,
    swig_DoubleMatrixView_Sf_SwigStatic_constants,
    swig_DoubleMatrixView_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleMatrixView_bases[] = {0,0};
static const char *swig_DoubleMatrixView_base_names[] = {"SimpleEigen::Base *",0};
static swig_lua_class _wrap_class_DoubleMatrixView = { "DoubleMatrixView", "DoubleMatrixView", &SWIGTYPE_p_SimpleEigen__MatrixViewT_double_t,_proxy__wrap_new_DoubleMatrixView, swig_delete_DoubleMatrixView, swig_DoubleMatrixView_methods, swig_DoubleMatrixView_attributes, &swig_DoubleMatrixView_Sf_SwigStatic, swig_DoubleMatrixView_meta, swig_DoubleMatrixView_bases, swig_DoubleMatrixView_base_names };

static int _wrap_FloatMatrix_matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::EigenMatrix< float > *arg2 = (SimpleEigen::EigenMatrix< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::matrix",1,"SimpleEigen::Matrix< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::matrix",2,"SimpleEigen::EigenMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_matrix_set",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__EigenMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_matrix_set",2,SWIGTYPE_p_SimpleEigen__EigenMatrixT_float_t);
  }
  
  if (arg1) (arg1)->matrix = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::EigenMatrix< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::matrix",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_matrix_get",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (SimpleEigen::EigenMatrix< float > *)& ((arg1)->matrix);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__EigenMatrixT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMatrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::Matrix",0,0)
  result = (SimpleEigen::Matrix< float > *)new SimpleEigen::Matrix< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMatrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  SimpleEigen::Matrix< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::Matrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::Matrix",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::Matrix",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (SimpleEigen::Matrix< float > *)new SimpleEigen::Matrix< float >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMatrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  SimpleEigen::Matrix< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::Matrix",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::Matrix",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::Matrix",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::Matrix",3,"float const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  result = (SimpleEigen::Matrix< float > *)new SimpleEigen::Matrix< float >(arg1,arg2,(float const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMatrix__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::Matrix",1,"SimpleEigen::RowVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("new_FloatMatrix",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = (SimpleEigen::Matrix< float > *)new SimpleEigen::Matrix< float >((SimpleEigen::RowVector< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMatrix__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::Matrix",1,"SimpleEigen::ColVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("new_FloatMatrix",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = (SimpleEigen::Matrix< float > *)new SimpleEigen::Matrix< float >((SimpleEigen::ColVector< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMatrix__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::Matrix",1,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("new_FloatMatrix",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (SimpleEigen::Matrix< float > *)new SimpleEigen::Matrix< float >((SimpleEigen::Matrix< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMatrix__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::EigenMatrix< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::Matrix",1,"SimpleEigen::EigenMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__EigenMatrixT_float_t,0))){
    SWIG_fail_ptr("new_FloatMatrix",1,SWIGTYPE_p_SimpleEigen__EigenMatrixT_float_t);
  }
  
  result = (SimpleEigen::Matrix< float > *)new SimpleEigen::Matrix< float >((SimpleEigen::EigenMatrix< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMatrix__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  Eigen::Matrix< float,1,Eigen::Dynamic > *arg1 = 0 ;
  SimpleEigen::Matrix< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::Matrix",1,"Eigen::Matrix< float,1,Eigen::Dynamic > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Eigen__MatrixT_float_1_Eigen__Dynamic_t,0))){
    SWIG_fail_ptr("new_FloatMatrix",1,SWIGTYPE_p_Eigen__MatrixT_float_1_Eigen__Dynamic_t);
  }
  
  result = (SimpleEigen::Matrix< float > *)new SimpleEigen::Matrix< float >((Eigen::Matrix< float,1,Eigen::Dynamic > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMatrix__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  Eigen::Matrix< float,Eigen::Dynamic,1 > *arg1 = 0 ;
  SimpleEigen::Matrix< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::Matrix",1,"Eigen::Matrix< float,Eigen::Dynamic,1 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Eigen__MatrixT_float_Eigen__Dynamic_1_t,0))){
    SWIG_fail_ptr("new_FloatMatrix",1,SWIGTYPE_p_Eigen__MatrixT_float_Eigen__Dynamic_1_t);
  }
  
  result = (SimpleEigen::Matrix< float > *)new SimpleEigen::Matrix< float >((Eigen::Matrix< float,Eigen::Dynamic,1 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMatrix__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  Eigen::Array< float,Eigen::Dynamic,Eigen::Dynamic > *arg1 = 0 ;
  SimpleEigen::Matrix< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::Matrix",1,"Eigen::Array< float,Eigen::Dynamic,Eigen::Dynamic > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Eigen__ArrayT_float_Eigen__Dynamic_Eigen__Dynamic_t,0))){
    SWIG_fail_ptr("new_FloatMatrix",1,SWIGTYPE_p_Eigen__ArrayT_float_Eigen__Dynamic_Eigen__Dynamic_t);
  }
  
  result = (SimpleEigen::Matrix< float > *)new SimpleEigen::Matrix< float >((Eigen::Array< float,Eigen::Dynamic,Eigen::Dynamic > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMatrix__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SimpleEigen::Matrix< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::Matrix",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::Matrix",1,"std::vector< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::Matrix",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::Matrix",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("new_FloatMatrix",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (SimpleEigen::Matrix< float > *)new SimpleEigen::Matrix< float >((std::vector< float > const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMatrix(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FloatMatrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatMatrix__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatMatrix__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatMatrix__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__EigenMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatMatrix__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Eigen__MatrixT_float_1_Eigen__Dynamic_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatMatrix__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Eigen__MatrixT_float_Eigen__Dynamic_1_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatMatrix__SWIG_8(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Eigen__ArrayT_float_Eigen__Dynamic_Eigen__Dynamic_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatMatrix__SWIG_9(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FloatMatrix__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_FloatMatrix__SWIG_10(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_FloatMatrix__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatMatrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Matrix< float >::Matrix()\n"
    "    SimpleEigen::Matrix< float >::Matrix(int,int)\n"
    "    SimpleEigen::Matrix< float >::Matrix(int,int,float const &)\n"
    "    SimpleEigen::Matrix< float >::Matrix(SimpleEigen::RowVector< float > const &)\n"
    "    SimpleEigen::Matrix< float >::Matrix(SimpleEigen::ColVector< float > const &)\n"
    "    SimpleEigen::Matrix< float >::Matrix(SimpleEigen::Matrix< float > const &)\n"
    "    SimpleEigen::Matrix< float >::Matrix(SimpleEigen::EigenMatrix< float > const &)\n"
    "    SimpleEigen::Matrix< float >::Matrix(Eigen::Matrix< float,1,Eigen::Dynamic > const &)\n"
    "    SimpleEigen::Matrix< float >::Matrix(Eigen::Matrix< float,Eigen::Dynamic,1 > const &)\n"
    "    SimpleEigen::Matrix< float >::Matrix(Eigen::Array< float,Eigen::Dynamic,Eigen::Dynamic > const &)\n"
    "    SimpleEigen::Matrix< float >::Matrix(std::vector< float > const &,size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix___call(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator ()",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___call",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (float *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_random__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::random",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::random",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::random",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::random",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_random",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->random(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_random__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::random",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::random",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_random",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  (arg1)->random();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_random(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatMatrix_random__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatMatrix_random__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatMatrix_random'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Matrix< float >::random(int,int)\n"
    "    SimpleEigen::Matrix< float >::random()\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix_identity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::identity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::identity",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::identity",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::identity",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_identity",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->identity(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_identity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::identity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::identity",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_identity",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  (arg1)->identity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_identity(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatMatrix_identity__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatMatrix_identity__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatMatrix_identity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Matrix< float >::identity(int,int)\n"
    "    SimpleEigen::Matrix< float >::identity()\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix_zero__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::zero",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::zero",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::zero",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::zero",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_zero",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->zero(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_zero__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::zero",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_zero",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  (arg1)->zero();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_zero(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatMatrix_zero__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatMatrix_zero__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatMatrix_zero'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Matrix< float >::zero(int,int)\n"
    "    SimpleEigen::Matrix< float >::zero()\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix_ones__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::ones",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::ones",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::ones",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::ones",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_ones",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->ones(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_ones__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::ones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::ones",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_ones",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  (arg1)->ones();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_ones(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatMatrix_ones__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatMatrix_ones__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatMatrix_ones'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Matrix< float >::ones(int,int)\n"
    "    SimpleEigen::Matrix< float >::ones()\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::get",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::get",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::get",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_get",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (float)(arg1)->get(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::set",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::set",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::set",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::Matrix< float >::set",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_set",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_norm(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::norm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::norm",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_norm",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (float)(arg1)->norm();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_squaredNorm(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::squaredNorm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::squaredNorm",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_squaredNorm",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (float)(arg1)->squaredNorm();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_all(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::all",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::all",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_all",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (bool)(arg1)->all();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_allFinite(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::allFinite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::allFinite",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_allFinite",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (bool)(arg1)->allFinite();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_any(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::any",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::any",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_any",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (bool)(arg1)->any();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_count(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::count",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::count",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_count",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (bool)(arg1)->count();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_rows(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::rows",1,"SimpleEigen::Matrix< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_rows",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = ((SimpleEigen::Matrix< float > const *)arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_cols(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::cols",1,"SimpleEigen::Matrix< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_cols",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = ((SimpleEigen::Matrix< float > const *)arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_resize(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::resize",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::resize",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::resize",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_resize",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_data(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::data",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_data",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (float *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix___getitem(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  int arg2 ;
  SwigValueWrapper< SimpleEigen::MatrixView< float > > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::__getitem",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::__getitem",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___getitem",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (arg1)->__getitem(arg2);
  {
    SimpleEigen::MatrixView< float > * resultptr = new SimpleEigen::MatrixView< float >((const SimpleEigen::MatrixView< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixViewT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix___setitem(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  int arg2 ;
  SimpleEigen::RowVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::__setitem",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::__setitem",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::__setitem",3,"SimpleEigen::RowVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___setitem",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___setitem",3,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  (arg1)->__setitem(arg2,(SimpleEigen::RowVector< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_normalize(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::normalize",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_normalize",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_normalized(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::normalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::normalized",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_normalized",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->normalized();
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_fill(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::fill",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::fill",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_fill",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_eval(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::eval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::eval",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_eval",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->eval();
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_hasNaN(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::hasNaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::hasNaN",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_hasNaN",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (bool)(arg1)->hasNaN();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_innerSize(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::innerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::innerSize",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_innerSize",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->innerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_outerSize(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::outerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::outerSize",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_outerSize",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->outerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_isMuchSmallerThan(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  float arg3 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::isMuchSmallerThan",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::isMuchSmallerThan",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::isMuchSmallerThan",2,"SimpleEigen::Matrix< float > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::isMuchSmallerThan",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_isMuchSmallerThan",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_isMuchSmallerThan",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (bool)(arg1)->isMuchSmallerThan((SimpleEigen::Matrix< float > const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_isOnes(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::isOnes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::isOnes",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_isOnes",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (bool)(arg1)->isOnes();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_isZero(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::isZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::isZero",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_isZero",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (bool)(arg1)->isZero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_row_vector(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  size_t arg2 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::row_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::row_vector",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::row_vector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_row_vector",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->row_vector(arg2);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_row(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  size_t arg2 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::row",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_row",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->row(arg2);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_set_row(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  size_t arg2 ;
  std::vector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::set_row",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::set_row",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::set_row",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::set_row",3,"std::vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_set_row",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_set_row",3,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->set_row(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_set_row_vector(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  size_t arg2 ;
  SimpleEigen::RowVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::set_row_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::set_row_vector",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::set_row_vector",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::set_row_vector",3,"SimpleEigen::RowVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_set_row_vector",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_set_row_vector",3,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  (arg1)->set_row_vector(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_set_row_matrix(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  size_t arg2 ;
  SimpleEigen::Matrix< float > *arg3 = 0 ;
  size_t arg4 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::set_row_matrix",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::set_row_matrix",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::set_row_matrix",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::set_row_matrix",3,"SimpleEigen::Matrix< float > &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::Matrix< float >::set_row_matrix",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_set_row_matrix",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_set_row_matrix",3,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  (arg1)->set_row_matrix(arg2,*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_col_vector(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  size_t arg2 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::col_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::col_vector",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::col_vector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_col_vector",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->col_vector(arg2);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_col(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  size_t arg2 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::col",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_col",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->col(arg2);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_set_col(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  size_t arg2 ;
  std::vector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::set_col",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::set_col",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::set_col",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::set_col",3,"std::vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_set_col",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_set_col",3,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->set_col(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_set_col_vector(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  size_t arg2 ;
  SimpleEigen::ColVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::set_col_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::set_col_vector",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::set_col_vector",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::set_col_vector",3,"SimpleEigen::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_set_col_vector",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_set_col_vector",3,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  (arg1)->set_col_vector(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_set_col_matrix(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  size_t arg2 ;
  SimpleEigen::Matrix< float > *arg3 = 0 ;
  size_t arg4 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::set_col_matrix",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::set_col_matrix",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::set_col_matrix",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::set_col_matrix",3,"SimpleEigen::Matrix< float > &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::Matrix< float >::set_col_matrix",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_set_col_matrix",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_set_col_matrix",3,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  (arg1)->set_col_matrix(arg2,*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_leftCols(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  size_t arg3 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::leftCols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::leftCols",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::leftCols",2,"SimpleEigen::Matrix< float > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::leftCols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_leftCols",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_leftCols",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->leftCols(*arg2,arg3);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_middleCols(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::middleCols",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::middleCols",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::middleCols",2,"SimpleEigen::Matrix< float > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::middleCols",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::Matrix< float >::middleCols",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_middleCols",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_middleCols",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->middleCols(*arg2,arg3,arg4);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_rightCols(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  size_t arg3 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::rightCols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::rightCols",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::rightCols",2,"SimpleEigen::Matrix< float > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::rightCols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_rightCols",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_rightCols",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->rightCols(*arg2,arg3);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_topRows(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  size_t arg3 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::topRows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::topRows",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::topRows",2,"SimpleEigen::Matrix< float > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::topRows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_topRows",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_topRows",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->topRows(*arg2,arg3);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_middleRows(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::middleRows",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::middleRows",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::middleRows",2,"SimpleEigen::Matrix< float > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::middleRows",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::Matrix< float >::middleRows",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_middleRows",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_middleRows",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->middleRows(*arg2,arg3,arg4);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_bottomRows(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  size_t arg3 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::bottomRows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::bottomRows",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::bottomRows",2,"SimpleEigen::Matrix< float > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::bottomRows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_bottomRows",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_bottomRows",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->bottomRows(*arg2,arg3);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_topLeftCorner(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::topLeftCorner",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::topLeftCorner",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::topLeftCorner",2,"SimpleEigen::Matrix< float > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::topLeftCorner",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::Matrix< float >::topLeftCorner",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_topLeftCorner",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_topLeftCorner",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->topLeftCorner(*arg2,arg3,arg4);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_topRightCorner(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::topRightCorner",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::topRightCorner",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::topRightCorner",2,"SimpleEigen::Matrix< float > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::topRightCorner",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::Matrix< float >::topRightCorner",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_topRightCorner",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_topRightCorner",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->topRightCorner(*arg2,arg3,arg4);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_adjoint(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::adjoint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::adjoint",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_adjoint",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->adjoint();
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_transpose(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::transpose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::transpose",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_transpose",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->transpose();
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_diagonal(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::diagonal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::diagonal",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_diagonal",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->diagonal();
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_reverse(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::reverse",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_reverse",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->reverse();
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_replicate(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::replicate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::replicate",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::replicate",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::replicate",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_replicate",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->replicate(arg2,arg3);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_adjointInPlace(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::adjointInPlace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::adjointInPlace",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_adjointInPlace",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  (arg1)->adjointInPlace();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_transposeInPlace(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::transposeInPlace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::transposeInPlace",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_transposeInPlace",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  (arg1)->transposeInPlace();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_reverseInPlace(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::reverseInPlace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::reverseInPlace",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_reverseInPlace",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  (arg1)->reverseInPlace();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_adjointInto(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::adjointInto",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::adjointInto",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::adjointInto",2,"SimpleEigen::Matrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_adjointInto",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_adjointInto",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->adjointInto(*arg2);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_transposeInto(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::transposeInto",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::transposeInto",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::transposeInto",2,"SimpleEigen::Matrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_transposeInto",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_transposeInto",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->transposeInto(*arg2);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_diagonalInto(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::diagonalInto",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::diagonalInto",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::diagonalInto",2,"SimpleEigen::Matrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_diagonalInto",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_diagonalInto",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->diagonalInto(*arg2);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_reverseInto(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::reverseInto",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::reverseInto",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::reverseInto",2,"SimpleEigen::Matrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_reverseInto",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_reverseInto",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->reverseInto(*arg2);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_replicateInto(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::replicateInto",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::replicateInto",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::replicateInto",2,"SimpleEigen::Matrix< float > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::replicateInto",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::Matrix< float >::replicateInto",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_replicateInto",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_replicateInto",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->replicateInto(*arg2,arg3,arg4);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_sum(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::sum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::sum",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_sum",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (float)(arg1)->sum();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_prod(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::prod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::prod",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_prod",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (float)(arg1)->prod();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_mean(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::mean",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::mean",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_mean",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (float)(arg1)->mean();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_minCoeff(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::minCoeff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::minCoeff",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_minCoeff",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (float)(arg1)->minCoeff();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_maxCoeff(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::maxCoeff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::maxCoeff",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_maxCoeff",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (float)(arg1)->maxCoeff();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_trace(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::trace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::trace",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_trace",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (float)(arg1)->trace();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_addToEachRow(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::addToEachRow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::addToEachRow",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::addToEachRow",2,"SimpleEigen::Matrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_addToEachRow",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_addToEachRow",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->addToEachRow(*arg2);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_cwiseAbs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::cwiseAbs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::cwiseAbs",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_cwiseAbs",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->cwiseAbs();
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_cwiseAbs2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::cwiseAbs2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::cwiseAbs2",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_cwiseAbs2",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->cwiseAbs2();
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_cwiseProduct(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::cwiseProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::cwiseProduct",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::cwiseProduct",2,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_cwiseProduct",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_cwiseProduct",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->cwiseProduct((SimpleEigen::Matrix< float > const &)*arg2);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_cwiseQuotient(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::cwiseQuotient",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::cwiseQuotient",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::cwiseQuotient",2,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_cwiseQuotient",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_cwiseQuotient",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->cwiseQuotient((SimpleEigen::Matrix< float > const &)*arg2);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_cwiseInverse(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::cwiseInverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::cwiseInverse",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_cwiseInverse",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->cwiseInverse();
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_cwiseSqrt(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::cwiseSqrt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::cwiseSqrt",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::cwiseSqrt",2,"SimpleEigen::Matrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_cwiseSqrt",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_cwiseSqrt",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->cwiseSqrt(*arg2);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_cwiseMax(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::cwiseMax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::cwiseMax",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::cwiseMax",2,"SimpleEigen::Matrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_cwiseMax",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_cwiseMax",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->cwiseMax(*arg2);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_cwiseMin(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::cwiseMin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::cwiseMin",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::cwiseMin",2,"SimpleEigen::Matrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_cwiseMin",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_cwiseMin",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->cwiseMin(*arg2);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix___eq(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator ==",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator ==",2,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___eq",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___eq",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (bool)(arg1)->operator ==((SimpleEigen::Matrix< float > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator *",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator *",2,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___mul",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___mul",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::Matrix< float > const &)*arg2);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator +",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator +",2,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___add",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___add",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::Matrix< float > const &)*arg2);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator -",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator -",2,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___sub",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___sub",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::Matrix< float > const &)*arg2);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator *",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator *",2,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___mul",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___mul",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::Scalar< float > const &)*arg2);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator +",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator +",2,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___add",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___add",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::Scalar< float > const &)*arg2);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator -",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator -",2,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___sub",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___sub",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::Scalar< float > const &)*arg2);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator /",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator /",2,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___div",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___div",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::Scalar< float > const &)*arg2);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix___unm(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator -",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___unm",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->operator -();
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::RowVector< float > *arg2 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator *",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator *",2,"SimpleEigen::RowVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___mul",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___mul",2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::RowVector< float > const &)*arg2);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::RowVector< float > *arg2 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator +",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator +",2,"SimpleEigen::RowVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___add",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___add",2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::RowVector< float > const &)*arg2);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::RowVector< float > *arg2 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator -",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator -",2,"SimpleEigen::RowVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___sub",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___sub",2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::RowVector< float > const &)*arg2);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix___mul__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::ColVector< float > *arg2 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator *",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator *",2,"SimpleEigen::ColVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___mul",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___mul",2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::ColVector< float > const &)*arg2);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix___add__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::ColVector< float > *arg2 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator +",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator +",2,"SimpleEigen::ColVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___add",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___add",2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::ColVector< float > const &)*arg2);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix___add__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix___add__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatMatrix___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Matrix< float >::operator +(SimpleEigen::Matrix< float > const &)\n"
    "    SimpleEigen::Matrix< float >::operator +(SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::Matrix< float >::operator +(SimpleEigen::RowVector< float > const &)\n"
    "    SimpleEigen::Matrix< float >::operator +(SimpleEigen::ColVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix___sub__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::ColVector< float > *arg2 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator -",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator -",2,"SimpleEigen::ColVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___sub",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___sub",2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::ColVector< float > const &)*arg2);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix___sub__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix___sub__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix___sub__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatMatrix___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Matrix< float >::operator -(SimpleEigen::Matrix< float > const &)\n"
    "    SimpleEigen::Matrix< float >::operator -(SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::Matrix< float >::operator -(SimpleEigen::RowVector< float > const &)\n"
    "    SimpleEigen::Matrix< float >::operator -(SimpleEigen::ColVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix___mul__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  float arg2 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator *",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator *",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___mul",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = (arg1)->operator *(arg2);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix___mul__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatMatrix___mul__SWIG_4(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatMatrix___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Matrix< float >::operator *(SimpleEigen::Matrix< float > const &)\n"
    "    SimpleEigen::Matrix< float >::operator *(SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::Matrix< float >::operator *(SimpleEigen::RowVector< float > const &)\n"
    "    SimpleEigen::Matrix< float >::operator *(SimpleEigen::ColVector< float > const &)\n"
    "    SimpleEigen::Matrix< float >::operator *(float const)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  float arg2 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator /",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::operator /",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix___div",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = (arg1)->operator /(arg2);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatMatrix___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatMatrix___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Matrix< float >::operator /(SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::Matrix< float >::operator /(float const)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix_print(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::print",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_print",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_t(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::t",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::t",1,"SimpleEigen::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_t",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = (arg1)->t();
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_slice__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::slice",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::slice",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::slice",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::slice",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::Matrix< float >::slice",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SimpleEigen::Matrix< float >::slice",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_slice",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (arg1)->slice(arg2,arg3,arg4,arg5);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_slice__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::slice",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::slice",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::slice",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::slice",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::Matrix< float >::slice",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_slice",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->slice(arg2,arg3,arg4);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_slice__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::slice",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::slice",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::slice",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::slice",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_slice",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (arg1)->slice(arg2,arg3);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_slice(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatMatrix_slice__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatMatrix_slice__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_FloatMatrix_slice__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatMatrix_slice'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Matrix< float >::slice(int,int,int,int)\n"
    "    SimpleEigen::Matrix< float >::slice(int,int,int)\n"
    "    SimpleEigen::Matrix< float >::slice(int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix_sliceN1__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::sliceN1",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::sliceN1",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::sliceN1",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::sliceN1",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::Matrix< float >::sliceN1",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SimpleEigen::Matrix< float >::sliceN1",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_sliceN1",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (arg1)->sliceN1(arg2,arg3,arg4,arg5);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_sliceN1__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::sliceN1",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::sliceN1",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::sliceN1",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::sliceN1",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::Matrix< float >::sliceN1",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_sliceN1",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->sliceN1(arg2,arg3,arg4);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_sliceN1(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatMatrix_sliceN1__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_FloatMatrix_sliceN1__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatMatrix_sliceN1'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Matrix< float >::sliceN1(int,int,int,int)\n"
    "    SimpleEigen::Matrix< float >::sliceN1(int,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix_sliceN2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::sliceN2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::sliceN2",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::sliceN2",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::sliceN2",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::Matrix< float >::sliceN2",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SimpleEigen::Matrix< float >::sliceN2",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_sliceN2",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (arg1)->sliceN2(arg2,arg3,arg4,arg5);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_sliceN2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::sliceN2",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::sliceN2",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::sliceN2",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::sliceN2",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::Matrix< float >::sliceN2",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_sliceN2",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->sliceN2(arg2,arg3,arg4);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_sliceN2(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatMatrix_sliceN2__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_FloatMatrix_sliceN2__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatMatrix_sliceN2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Matrix< float >::sliceN2(int,int,int,int)\n"
    "    SimpleEigen::Matrix< float >::sliceN2(int,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix_slicen(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::slicen",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::slicen",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::slicen",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< float >::slicen",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::Matrix< float >::slicen",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SimpleEigen::Matrix< float >::slicen",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_slicen",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (arg1)->slicen(arg2,arg3,arg4,arg5);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_rowwise_add(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::RowVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::rowwise_add",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::rowwise_add",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::rowwise_add",2,"SimpleEigen::RowVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_rowwise_add",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_rowwise_add",2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  (arg1)->rowwise_add(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_rowwise_sub(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::RowVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::rowwise_sub",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::rowwise_sub",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::rowwise_sub",2,"SimpleEigen::RowVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_rowwise_sub",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_rowwise_sub",2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  (arg1)->rowwise_sub(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_rowwise_mul(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::RowVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::rowwise_mul",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::rowwise_mul",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::rowwise_mul",2,"SimpleEigen::RowVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_rowwise_mul",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_rowwise_mul",2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  (arg1)->rowwise_mul(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_rowwise_div(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::RowVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::rowwise_div",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::rowwise_div",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::rowwise_div",2,"SimpleEigen::RowVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_rowwise_div",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_rowwise_div",2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  (arg1)->rowwise_div(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_colwise_add(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::ColVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::colwise_add",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::colwise_add",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::colwise_add",2,"SimpleEigen::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_colwise_add",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_colwise_add",2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  (arg1)->colwise_add(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_colwise_sub(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::ColVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::colwise_sub",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::colwise_sub",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::colwise_sub",2,"SimpleEigen::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_colwise_sub",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_colwise_sub",2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  (arg1)->colwise_sub(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_colwise_mul(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::ColVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::colwise_mul",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::colwise_mul",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::colwise_mul",2,"SimpleEigen::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_colwise_mul",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_colwise_mul",2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  (arg1)->colwise_mul(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_colwise_div(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SimpleEigen::ColVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::colwise_div",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::colwise_div",1,"SimpleEigen::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< float >::colwise_div",2,"SimpleEigen::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_colwise_div",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_colwise_div",2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  (arg1)->colwise_div(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_array(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) 0 ;
  SwigValueWrapper< SimpleEigen::Eigen2DArray< float > > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< float >::array",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< float >::array",1,"SimpleEigen::Matrix< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatMatrix_array",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = ((SimpleEigen::Matrix< float > const *)arg1)->array();
  {
    SimpleEigen::Eigen2DArray< float > * resultptr = new SimpleEigen::Eigen2DArray< float >((const SimpleEigen::Eigen2DArray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Eigen2DArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatMatrix(void *obj) {
SimpleEigen::Matrix< float > *arg1 = (SimpleEigen::Matrix< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatMatrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatMatrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatMatrix_attributes[] = {
    { "matrix", _wrap_FloatMatrix_matrix_get, _wrap_FloatMatrix_matrix_set },
    {0,0,0}
};
static swig_lua_method swig_FloatMatrix_methods[]= {
    { "__call", _wrap_FloatMatrix___call},
    { "random", _wrap_FloatMatrix_random},
    { "identity", _wrap_FloatMatrix_identity},
    { "zero", _wrap_FloatMatrix_zero},
    { "ones", _wrap_FloatMatrix_ones},
    { "get", _wrap_FloatMatrix_get},
    { "set", _wrap_FloatMatrix_set},
    { "norm", _wrap_FloatMatrix_norm},
    { "squaredNorm", _wrap_FloatMatrix_squaredNorm},
    { "all", _wrap_FloatMatrix_all},
    { "allFinite", _wrap_FloatMatrix_allFinite},
    { "any", _wrap_FloatMatrix_any},
    { "count", _wrap_FloatMatrix_count},
    { "rows", _wrap_FloatMatrix_rows},
    { "cols", _wrap_FloatMatrix_cols},
    { "resize", _wrap_FloatMatrix_resize},
    { "data", _wrap_FloatMatrix_data},
    { "__getitem", _wrap_FloatMatrix___getitem},
    { "__setitem", _wrap_FloatMatrix___setitem},
    { "normalize", _wrap_FloatMatrix_normalize},
    { "normalized", _wrap_FloatMatrix_normalized},
    { "fill", _wrap_FloatMatrix_fill},
    { "eval", _wrap_FloatMatrix_eval},
    { "hasNaN", _wrap_FloatMatrix_hasNaN},
    { "innerSize", _wrap_FloatMatrix_innerSize},
    { "outerSize", _wrap_FloatMatrix_outerSize},
    { "isMuchSmallerThan", _wrap_FloatMatrix_isMuchSmallerThan},
    { "isOnes", _wrap_FloatMatrix_isOnes},
    { "isZero", _wrap_FloatMatrix_isZero},
    { "row_vector", _wrap_FloatMatrix_row_vector},
    { "row", _wrap_FloatMatrix_row},
    { "set_row", _wrap_FloatMatrix_set_row},
    { "set_row_vector", _wrap_FloatMatrix_set_row_vector},
    { "set_row_matrix", _wrap_FloatMatrix_set_row_matrix},
    { "col_vector", _wrap_FloatMatrix_col_vector},
    { "col", _wrap_FloatMatrix_col},
    { "set_col", _wrap_FloatMatrix_set_col},
    { "set_col_vector", _wrap_FloatMatrix_set_col_vector},
    { "set_col_matrix", _wrap_FloatMatrix_set_col_matrix},
    { "leftCols", _wrap_FloatMatrix_leftCols},
    { "middleCols", _wrap_FloatMatrix_middleCols},
    { "rightCols", _wrap_FloatMatrix_rightCols},
    { "topRows", _wrap_FloatMatrix_topRows},
    { "middleRows", _wrap_FloatMatrix_middleRows},
    { "bottomRows", _wrap_FloatMatrix_bottomRows},
    { "topLeftCorner", _wrap_FloatMatrix_topLeftCorner},
    { "topRightCorner", _wrap_FloatMatrix_topRightCorner},
    { "adjoint", _wrap_FloatMatrix_adjoint},
    { "transpose", _wrap_FloatMatrix_transpose},
    { "diagonal", _wrap_FloatMatrix_diagonal},
    { "reverse", _wrap_FloatMatrix_reverse},
    { "replicate", _wrap_FloatMatrix_replicate},
    { "adjointInPlace", _wrap_FloatMatrix_adjointInPlace},
    { "transposeInPlace", _wrap_FloatMatrix_transposeInPlace},
    { "reverseInPlace", _wrap_FloatMatrix_reverseInPlace},
    { "adjointInto", _wrap_FloatMatrix_adjointInto},
    { "transposeInto", _wrap_FloatMatrix_transposeInto},
    { "diagonalInto", _wrap_FloatMatrix_diagonalInto},
    { "reverseInto", _wrap_FloatMatrix_reverseInto},
    { "replicateInto", _wrap_FloatMatrix_replicateInto},
    { "sum", _wrap_FloatMatrix_sum},
    { "prod", _wrap_FloatMatrix_prod},
    { "mean", _wrap_FloatMatrix_mean},
    { "minCoeff", _wrap_FloatMatrix_minCoeff},
    { "maxCoeff", _wrap_FloatMatrix_maxCoeff},
    { "trace", _wrap_FloatMatrix_trace},
    { "addToEachRow", _wrap_FloatMatrix_addToEachRow},
    { "cwiseAbs", _wrap_FloatMatrix_cwiseAbs},
    { "cwiseAbs2", _wrap_FloatMatrix_cwiseAbs2},
    { "cwiseProduct", _wrap_FloatMatrix_cwiseProduct},
    { "cwiseQuotient", _wrap_FloatMatrix_cwiseQuotient},
    { "cwiseInverse", _wrap_FloatMatrix_cwiseInverse},
    { "cwiseSqrt", _wrap_FloatMatrix_cwiseSqrt},
    { "cwiseMax", _wrap_FloatMatrix_cwiseMax},
    { "cwiseMin", _wrap_FloatMatrix_cwiseMin},
    { "__eq", _wrap_FloatMatrix___eq},
    { "__unm", _wrap_FloatMatrix___unm},
    { "__add", _wrap_FloatMatrix___add},
    { "__sub", _wrap_FloatMatrix___sub},
    { "__mul", _wrap_FloatMatrix___mul},
    { "__div", _wrap_FloatMatrix___div},
    { "print", _wrap_FloatMatrix_print},
    { "t", _wrap_FloatMatrix_t},
    { "slice", _wrap_FloatMatrix_slice},
    { "sliceN1", _wrap_FloatMatrix_sliceN1},
    { "sliceN2", _wrap_FloatMatrix_sliceN2},
    { "slicen", _wrap_FloatMatrix_slicen},
    { "rowwise_add", _wrap_FloatMatrix_rowwise_add},
    { "rowwise_sub", _wrap_FloatMatrix_rowwise_sub},
    { "rowwise_mul", _wrap_FloatMatrix_rowwise_mul},
    { "rowwise_div", _wrap_FloatMatrix_rowwise_div},
    { "colwise_add", _wrap_FloatMatrix_colwise_add},
    { "colwise_sub", _wrap_FloatMatrix_colwise_sub},
    { "colwise_mul", _wrap_FloatMatrix_colwise_mul},
    { "colwise_div", _wrap_FloatMatrix_colwise_div},
    { "array", _wrap_FloatMatrix_array},
    {0,0}
};
static swig_lua_method swig_FloatMatrix_meta[] = {
    { "__call", _wrap_FloatMatrix___call},
    { "__getitem", _wrap_FloatMatrix___getitem},
    { "__setitem", _wrap_FloatMatrix___setitem},
    { "__eq", _wrap_FloatMatrix___eq},
    { "__unm", _wrap_FloatMatrix___unm},
    { "__add", _wrap_FloatMatrix___add},
    { "__sub", _wrap_FloatMatrix___sub},
    { "__mul", _wrap_FloatMatrix___mul},
    { "__div", _wrap_FloatMatrix___div},
    {0,0}
};

static swig_lua_attribute swig_FloatMatrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatMatrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatMatrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatMatrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatMatrix_Sf_SwigStatic = {
    "FloatMatrix",
    swig_FloatMatrix_Sf_SwigStatic_methods,
    swig_FloatMatrix_Sf_SwigStatic_attributes,
    swig_FloatMatrix_Sf_SwigStatic_constants,
    swig_FloatMatrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatMatrix_bases[] = {0};
static const char *swig_FloatMatrix_base_names[] = {0};
static swig_lua_class _wrap_class_FloatMatrix = { "FloatMatrix", "FloatMatrix", &SWIGTYPE_p_SimpleEigen__MatrixT_float_t,_proxy__wrap_new_FloatMatrix, swig_delete_FloatMatrix, swig_FloatMatrix_methods, swig_FloatMatrix_attributes, &swig_FloatMatrix_Sf_SwigStatic, swig_FloatMatrix_meta, swig_FloatMatrix_bases, swig_FloatMatrix_base_names };

static int _wrap_DoubleMatrix_matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::EigenMatrix< double > *arg2 = (SimpleEigen::EigenMatrix< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::matrix",1,"SimpleEigen::Matrix< double > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::matrix",2,"SimpleEigen::EigenMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_matrix_set",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__EigenMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_matrix_set",2,SWIGTYPE_p_SimpleEigen__EigenMatrixT_double_t);
  }
  
  if (arg1) (arg1)->matrix = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::EigenMatrix< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::matrix",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_matrix_get",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (SimpleEigen::EigenMatrix< double > *)& ((arg1)->matrix);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__EigenMatrixT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleMatrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::Matrix",0,0)
  result = (SimpleEigen::Matrix< double > *)new SimpleEigen::Matrix< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleMatrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  SimpleEigen::Matrix< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::Matrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::Matrix",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::Matrix",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (SimpleEigen::Matrix< double > *)new SimpleEigen::Matrix< double >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleMatrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  SimpleEigen::Matrix< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::Matrix",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::Matrix",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::Matrix",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::Matrix",3,"double const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  result = (SimpleEigen::Matrix< double > *)new SimpleEigen::Matrix< double >(arg1,arg2,(double const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleMatrix__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = 0 ;
  SimpleEigen::Matrix< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::Matrix",1,"SimpleEigen::RowVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("new_DoubleMatrix",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  result = (SimpleEigen::Matrix< double > *)new SimpleEigen::Matrix< double >((SimpleEigen::RowVector< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleMatrix__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = 0 ;
  SimpleEigen::Matrix< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::Matrix",1,"SimpleEigen::ColVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("new_DoubleMatrix",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  result = (SimpleEigen::Matrix< double > *)new SimpleEigen::Matrix< double >((SimpleEigen::ColVector< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleMatrix__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = 0 ;
  SimpleEigen::Matrix< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::Matrix",1,"SimpleEigen::Matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("new_DoubleMatrix",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (SimpleEigen::Matrix< double > *)new SimpleEigen::Matrix< double >((SimpleEigen::Matrix< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleMatrix__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::EigenMatrix< double > *arg1 = 0 ;
  SimpleEigen::Matrix< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::Matrix",1,"SimpleEigen::EigenMatrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__EigenMatrixT_double_t,0))){
    SWIG_fail_ptr("new_DoubleMatrix",1,SWIGTYPE_p_SimpleEigen__EigenMatrixT_double_t);
  }
  
  result = (SimpleEigen::Matrix< double > *)new SimpleEigen::Matrix< double >((SimpleEigen::EigenMatrix< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleMatrix__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  Eigen::Matrix< double,1,Eigen::Dynamic > *arg1 = 0 ;
  SimpleEigen::Matrix< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::Matrix",1,"Eigen::Matrix< double,1,Eigen::Dynamic > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Eigen__MatrixT_double_1_Eigen__Dynamic_t,0))){
    SWIG_fail_ptr("new_DoubleMatrix",1,SWIGTYPE_p_Eigen__MatrixT_double_1_Eigen__Dynamic_t);
  }
  
  result = (SimpleEigen::Matrix< double > *)new SimpleEigen::Matrix< double >((Eigen::Matrix< double,1,Eigen::Dynamic > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleMatrix__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  Eigen::Matrix< double,Eigen::Dynamic,1 > *arg1 = 0 ;
  SimpleEigen::Matrix< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::Matrix",1,"Eigen::Matrix< double,Eigen::Dynamic,1 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_1_t,0))){
    SWIG_fail_ptr("new_DoubleMatrix",1,SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_1_t);
  }
  
  result = (SimpleEigen::Matrix< double > *)new SimpleEigen::Matrix< double >((Eigen::Matrix< double,Eigen::Dynamic,1 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleMatrix__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  Eigen::Array< double,Eigen::Dynamic,Eigen::Dynamic > *arg1 = 0 ;
  SimpleEigen::Matrix< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::Matrix",1,"Eigen::Array< double,Eigen::Dynamic,Eigen::Dynamic > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Eigen__ArrayT_double_Eigen__Dynamic_Eigen__Dynamic_t,0))){
    SWIG_fail_ptr("new_DoubleMatrix",1,SWIGTYPE_p_Eigen__ArrayT_double_Eigen__Dynamic_Eigen__Dynamic_t);
  }
  
  result = (SimpleEigen::Matrix< double > *)new SimpleEigen::Matrix< double >((Eigen::Array< double,Eigen::Dynamic,Eigen::Dynamic > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleMatrix__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SimpleEigen::Matrix< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::Matrix",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::Matrix",1,"std::vector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::Matrix",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::Matrix",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("new_DoubleMatrix",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (SimpleEigen::Matrix< double > *)new SimpleEigen::Matrix< double >((std::vector< double > const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleMatrix(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DoubleMatrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleMatrix__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleMatrix__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleMatrix__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__EigenMatrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleMatrix__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Eigen__MatrixT_double_1_Eigen__Dynamic_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleMatrix__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_1_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleMatrix__SWIG_8(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Eigen__ArrayT_double_Eigen__Dynamic_Eigen__Dynamic_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleMatrix__SWIG_9(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_DoubleMatrix__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_DoubleMatrix__SWIG_10(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_DoubleMatrix__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DoubleMatrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Matrix< double >::Matrix()\n"
    "    SimpleEigen::Matrix< double >::Matrix(int,int)\n"
    "    SimpleEigen::Matrix< double >::Matrix(int,int,double const &)\n"
    "    SimpleEigen::Matrix< double >::Matrix(SimpleEigen::RowVector< double > const &)\n"
    "    SimpleEigen::Matrix< double >::Matrix(SimpleEigen::ColVector< double > const &)\n"
    "    SimpleEigen::Matrix< double >::Matrix(SimpleEigen::Matrix< double > const &)\n"
    "    SimpleEigen::Matrix< double >::Matrix(SimpleEigen::EigenMatrix< double > const &)\n"
    "    SimpleEigen::Matrix< double >::Matrix(Eigen::Matrix< double,1,Eigen::Dynamic > const &)\n"
    "    SimpleEigen::Matrix< double >::Matrix(Eigen::Matrix< double,Eigen::Dynamic,1 > const &)\n"
    "    SimpleEigen::Matrix< double >::Matrix(Eigen::Array< double,Eigen::Dynamic,Eigen::Dynamic > const &)\n"
    "    SimpleEigen::Matrix< double >::Matrix(std::vector< double > const &,size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleMatrix___call(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator ()",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___call",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (double *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_random__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::random",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::random",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::random",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::random",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_random",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->random(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_random__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::random",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::random",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_random",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  (arg1)->random();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_random(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DoubleMatrix_random__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DoubleMatrix_random__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleMatrix_random'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Matrix< double >::random(int,int)\n"
    "    SimpleEigen::Matrix< double >::random()\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleMatrix_identity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::identity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::identity",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::identity",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::identity",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_identity",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->identity(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_identity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::identity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::identity",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_identity",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  (arg1)->identity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_identity(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DoubleMatrix_identity__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DoubleMatrix_identity__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleMatrix_identity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Matrix< double >::identity(int,int)\n"
    "    SimpleEigen::Matrix< double >::identity()\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleMatrix_zero__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::zero",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::zero",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::zero",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::zero",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_zero",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->zero(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_zero__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::zero",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_zero",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  (arg1)->zero();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_zero(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DoubleMatrix_zero__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DoubleMatrix_zero__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleMatrix_zero'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Matrix< double >::zero(int,int)\n"
    "    SimpleEigen::Matrix< double >::zero()\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleMatrix_ones__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::ones",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::ones",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::ones",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::ones",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_ones",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->ones(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_ones__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::ones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::ones",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_ones",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  (arg1)->ones();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_ones(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DoubleMatrix_ones__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DoubleMatrix_ones__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleMatrix_ones'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Matrix< double >::ones(int,int)\n"
    "    SimpleEigen::Matrix< double >::ones()\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleMatrix_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::get",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::get",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::get",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_get",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (double)(arg1)->get(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::set",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::set",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::set",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::Matrix< double >::set",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_set",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_norm(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::norm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::norm",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_norm",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (double)(arg1)->norm();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_squaredNorm(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::squaredNorm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::squaredNorm",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_squaredNorm",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (double)(arg1)->squaredNorm();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_all(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::all",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::all",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_all",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (bool)(arg1)->all();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_allFinite(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::allFinite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::allFinite",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_allFinite",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (bool)(arg1)->allFinite();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_any(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::any",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::any",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_any",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (bool)(arg1)->any();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_count(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::count",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::count",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_count",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (bool)(arg1)->count();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_rows(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::rows",1,"SimpleEigen::Matrix< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_rows",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = ((SimpleEigen::Matrix< double > const *)arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_cols(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::cols",1,"SimpleEigen::Matrix< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_cols",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = ((SimpleEigen::Matrix< double > const *)arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_resize(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::resize",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::resize",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::resize",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_resize",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_data(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::data",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_data",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (double *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix___getitem(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  int arg2 ;
  SwigValueWrapper< SimpleEigen::MatrixView< double > > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::__getitem",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::__getitem",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___getitem",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (arg1)->__getitem(arg2);
  {
    SimpleEigen::MatrixView< double > * resultptr = new SimpleEigen::MatrixView< double >((const SimpleEigen::MatrixView< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixViewT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix___setitem(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  int arg2 ;
  SimpleEigen::RowVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::__setitem",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::__setitem",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::__setitem",3,"SimpleEigen::RowVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___setitem",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___setitem",3,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  (arg1)->__setitem(arg2,(SimpleEigen::RowVector< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_normalize(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::normalize",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_normalize",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_normalized(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::normalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::normalized",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_normalized",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->normalized();
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_fill(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::fill",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::fill",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_fill",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_eval(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::eval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::eval",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_eval",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->eval();
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_hasNaN(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::hasNaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::hasNaN",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_hasNaN",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (bool)(arg1)->hasNaN();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_innerSize(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::innerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::innerSize",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_innerSize",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->innerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_outerSize(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::outerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::outerSize",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_outerSize",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->outerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_isMuchSmallerThan(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::isMuchSmallerThan",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::isMuchSmallerThan",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::isMuchSmallerThan",2,"SimpleEigen::Matrix< double > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::isMuchSmallerThan",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_isMuchSmallerThan",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_isMuchSmallerThan",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->isMuchSmallerThan((SimpleEigen::Matrix< double > const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_isOnes(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::isOnes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::isOnes",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_isOnes",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (bool)(arg1)->isOnes();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_isZero(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::isZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::isZero",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_isZero",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (bool)(arg1)->isZero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_row_vector(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  size_t arg2 ;
  SimpleEigen::RowVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::row_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::row_vector",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::row_vector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_row_vector",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->row_vector(arg2);
  {
    SimpleEigen::RowVector< double > * resultptr = new SimpleEigen::RowVector< double >((const SimpleEigen::RowVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_row(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  size_t arg2 ;
  SimpleEigen::RowVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::row",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_row",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->row(arg2);
  {
    SimpleEigen::RowVector< double > * resultptr = new SimpleEigen::RowVector< double >((const SimpleEigen::RowVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_set_row(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  size_t arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::set_row",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::set_row",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::set_row",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::set_row",3,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_set_row",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_set_row",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->set_row(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_set_row_vector(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  size_t arg2 ;
  SimpleEigen::RowVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::set_row_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::set_row_vector",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::set_row_vector",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::set_row_vector",3,"SimpleEigen::RowVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_set_row_vector",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_set_row_vector",3,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  (arg1)->set_row_vector(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_set_row_matrix(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  size_t arg2 ;
  SimpleEigen::Matrix< double > *arg3 = 0 ;
  size_t arg4 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::set_row_matrix",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::set_row_matrix",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::set_row_matrix",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::set_row_matrix",3,"SimpleEigen::Matrix< double > &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::Matrix< double >::set_row_matrix",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_set_row_matrix",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_set_row_matrix",3,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  (arg1)->set_row_matrix(arg2,*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_col_vector(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  size_t arg2 ;
  SimpleEigen::ColVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::col_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::col_vector",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::col_vector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_col_vector",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->col_vector(arg2);
  {
    SimpleEigen::ColVector< double > * resultptr = new SimpleEigen::ColVector< double >((const SimpleEigen::ColVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_col(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  size_t arg2 ;
  SimpleEigen::ColVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::col",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_col",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->col(arg2);
  {
    SimpleEigen::ColVector< double > * resultptr = new SimpleEigen::ColVector< double >((const SimpleEigen::ColVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_set_col(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  size_t arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::set_col",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::set_col",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::set_col",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::set_col",3,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_set_col",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_set_col",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->set_col(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_set_col_vector(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  size_t arg2 ;
  SimpleEigen::ColVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::set_col_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::set_col_vector",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::set_col_vector",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::set_col_vector",3,"SimpleEigen::ColVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_set_col_vector",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_set_col_vector",3,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  (arg1)->set_col_vector(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_set_col_matrix(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  size_t arg2 ;
  SimpleEigen::Matrix< double > *arg3 = 0 ;
  size_t arg4 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::set_col_matrix",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::set_col_matrix",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::set_col_matrix",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::set_col_matrix",3,"SimpleEigen::Matrix< double > &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::Matrix< double >::set_col_matrix",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_set_col_matrix",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_set_col_matrix",3,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  (arg1)->set_col_matrix(arg2,*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_leftCols(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  size_t arg3 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::leftCols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::leftCols",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::leftCols",2,"SimpleEigen::Matrix< double > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::leftCols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_leftCols",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_leftCols",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->leftCols(*arg2,arg3);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_middleCols(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::middleCols",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::middleCols",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::middleCols",2,"SimpleEigen::Matrix< double > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::middleCols",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::Matrix< double >::middleCols",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_middleCols",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_middleCols",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->middleCols(*arg2,arg3,arg4);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_rightCols(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  size_t arg3 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::rightCols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::rightCols",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::rightCols",2,"SimpleEigen::Matrix< double > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::rightCols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_rightCols",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_rightCols",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->rightCols(*arg2,arg3);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_topRows(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  size_t arg3 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::topRows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::topRows",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::topRows",2,"SimpleEigen::Matrix< double > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::topRows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_topRows",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_topRows",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->topRows(*arg2,arg3);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_middleRows(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::middleRows",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::middleRows",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::middleRows",2,"SimpleEigen::Matrix< double > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::middleRows",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::Matrix< double >::middleRows",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_middleRows",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_middleRows",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->middleRows(*arg2,arg3,arg4);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_bottomRows(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  size_t arg3 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::bottomRows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::bottomRows",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::bottomRows",2,"SimpleEigen::Matrix< double > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::bottomRows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_bottomRows",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_bottomRows",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->bottomRows(*arg2,arg3);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_topLeftCorner(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::topLeftCorner",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::topLeftCorner",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::topLeftCorner",2,"SimpleEigen::Matrix< double > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::topLeftCorner",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::Matrix< double >::topLeftCorner",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_topLeftCorner",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_topLeftCorner",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->topLeftCorner(*arg2,arg3,arg4);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_topRightCorner(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::topRightCorner",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::topRightCorner",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::topRightCorner",2,"SimpleEigen::Matrix< double > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::topRightCorner",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::Matrix< double >::topRightCorner",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_topRightCorner",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_topRightCorner",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->topRightCorner(*arg2,arg3,arg4);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_adjoint(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::adjoint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::adjoint",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_adjoint",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->adjoint();
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_transpose(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::transpose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::transpose",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_transpose",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->transpose();
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_diagonal(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::diagonal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::diagonal",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_diagonal",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->diagonal();
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_reverse(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::reverse",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_reverse",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->reverse();
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_replicate(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::replicate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::replicate",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::replicate",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::replicate",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_replicate",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->replicate(arg2,arg3);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_adjointInPlace(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::adjointInPlace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::adjointInPlace",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_adjointInPlace",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  (arg1)->adjointInPlace();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_transposeInPlace(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::transposeInPlace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::transposeInPlace",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_transposeInPlace",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  (arg1)->transposeInPlace();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_reverseInPlace(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::reverseInPlace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::reverseInPlace",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_reverseInPlace",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  (arg1)->reverseInPlace();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_adjointInto(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::adjointInto",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::adjointInto",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::adjointInto",2,"SimpleEigen::Matrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_adjointInto",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_adjointInto",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->adjointInto(*arg2);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_transposeInto(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::transposeInto",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::transposeInto",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::transposeInto",2,"SimpleEigen::Matrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_transposeInto",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_transposeInto",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->transposeInto(*arg2);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_diagonalInto(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::diagonalInto",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::diagonalInto",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::diagonalInto",2,"SimpleEigen::Matrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_diagonalInto",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_diagonalInto",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->diagonalInto(*arg2);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_reverseInto(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::reverseInto",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::reverseInto",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::reverseInto",2,"SimpleEigen::Matrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_reverseInto",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_reverseInto",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->reverseInto(*arg2);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_replicateInto(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::replicateInto",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::replicateInto",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::replicateInto",2,"SimpleEigen::Matrix< double > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::replicateInto",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::Matrix< double >::replicateInto",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_replicateInto",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_replicateInto",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->replicateInto(*arg2,arg3,arg4);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_sum(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::sum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::sum",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_sum",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (double)(arg1)->sum();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_prod(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::prod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::prod",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_prod",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (double)(arg1)->prod();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_mean(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::mean",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::mean",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_mean",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (double)(arg1)->mean();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_minCoeff(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::minCoeff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::minCoeff",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_minCoeff",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (double)(arg1)->minCoeff();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_maxCoeff(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::maxCoeff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::maxCoeff",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_maxCoeff",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (double)(arg1)->maxCoeff();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_trace(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::trace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::trace",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_trace",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (double)(arg1)->trace();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_addToEachRow(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::addToEachRow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::addToEachRow",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::addToEachRow",2,"SimpleEigen::Matrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_addToEachRow",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_addToEachRow",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->addToEachRow(*arg2);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_cwiseAbs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::cwiseAbs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::cwiseAbs",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_cwiseAbs",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->cwiseAbs();
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_cwiseAbs2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::cwiseAbs2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::cwiseAbs2",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_cwiseAbs2",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->cwiseAbs2();
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_cwiseProduct(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::cwiseProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::cwiseProduct",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::cwiseProduct",2,"SimpleEigen::Matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_cwiseProduct",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_cwiseProduct",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->cwiseProduct((SimpleEigen::Matrix< double > const &)*arg2);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_cwiseQuotient(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::cwiseQuotient",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::cwiseQuotient",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::cwiseQuotient",2,"SimpleEigen::Matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_cwiseQuotient",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_cwiseQuotient",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->cwiseQuotient((SimpleEigen::Matrix< double > const &)*arg2);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_cwiseInverse(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::cwiseInverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::cwiseInverse",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_cwiseInverse",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->cwiseInverse();
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_cwiseSqrt(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::cwiseSqrt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::cwiseSqrt",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::cwiseSqrt",2,"SimpleEigen::Matrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_cwiseSqrt",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_cwiseSqrt",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->cwiseSqrt(*arg2);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_cwiseMax(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::cwiseMax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::cwiseMax",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::cwiseMax",2,"SimpleEigen::Matrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_cwiseMax",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_cwiseMax",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->cwiseMax(*arg2);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_cwiseMin(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::cwiseMin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::cwiseMin",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::cwiseMin",2,"SimpleEigen::Matrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_cwiseMin",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_cwiseMin",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->cwiseMin(*arg2);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix___eq(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator ==",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator ==",2,"SimpleEigen::Matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___eq",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___eq",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (bool)(arg1)->operator ==((SimpleEigen::Matrix< double > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator *",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator *",2,"SimpleEigen::Matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___mul",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___mul",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::Matrix< double > const &)*arg2);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator +",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator +",2,"SimpleEigen::Matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___add",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___add",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::Matrix< double > const &)*arg2);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator -",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator -",2,"SimpleEigen::Matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___sub",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___sub",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::Matrix< double > const &)*arg2);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Scalar< double > *arg2 = 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator *",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator *",2,"SimpleEigen::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___mul",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___mul",2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::Scalar< double > const &)*arg2);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Scalar< double > *arg2 = 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator +",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator +",2,"SimpleEigen::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___add",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___add",2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::Scalar< double > const &)*arg2);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Scalar< double > *arg2 = 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator -",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator -",2,"SimpleEigen::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___sub",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___sub",2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::Scalar< double > const &)*arg2);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Scalar< double > *arg2 = 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator /",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator /",2,"SimpleEigen::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___div",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___div",2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::Scalar< double > const &)*arg2);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix___unm(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator -",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___unm",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->operator -();
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::RowVector< double > *arg2 = 0 ;
  SimpleEigen::RowVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator *",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator *",2,"SimpleEigen::RowVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___mul",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___mul",2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::RowVector< double > const &)*arg2);
  {
    SimpleEigen::RowVector< double > * resultptr = new SimpleEigen::RowVector< double >((const SimpleEigen::RowVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::RowVector< double > *arg2 = 0 ;
  SimpleEigen::RowVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator +",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator +",2,"SimpleEigen::RowVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___add",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___add",2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::RowVector< double > const &)*arg2);
  {
    SimpleEigen::RowVector< double > * resultptr = new SimpleEigen::RowVector< double >((const SimpleEigen::RowVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::RowVector< double > *arg2 = 0 ;
  SimpleEigen::RowVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator -",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator -",2,"SimpleEigen::RowVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___sub",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___sub",2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::RowVector< double > const &)*arg2);
  {
    SimpleEigen::RowVector< double > * resultptr = new SimpleEigen::RowVector< double >((const SimpleEigen::RowVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix___mul__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::ColVector< double > *arg2 = 0 ;
  SimpleEigen::ColVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator *",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator *",2,"SimpleEigen::ColVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___mul",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___mul",2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::ColVector< double > const &)*arg2);
  {
    SimpleEigen::ColVector< double > * resultptr = new SimpleEigen::ColVector< double >((const SimpleEigen::ColVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix___add__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::ColVector< double > *arg2 = 0 ;
  SimpleEigen::ColVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator +",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator +",2,"SimpleEigen::ColVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___add",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___add",2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::ColVector< double > const &)*arg2);
  {
    SimpleEigen::ColVector< double > * resultptr = new SimpleEigen::ColVector< double >((const SimpleEigen::ColVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleMatrix___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleMatrix___add__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleMatrix___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleMatrix___add__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleMatrix___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Matrix< double >::operator +(SimpleEigen::Matrix< double > const &)\n"
    "    SimpleEigen::Matrix< double >::operator +(SimpleEigen::Scalar< double > const &)\n"
    "    SimpleEigen::Matrix< double >::operator +(SimpleEigen::RowVector< double > const &)\n"
    "    SimpleEigen::Matrix< double >::operator +(SimpleEigen::ColVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleMatrix___sub__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::ColVector< double > *arg2 = 0 ;
  SimpleEigen::ColVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator -",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator -",2,"SimpleEigen::ColVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___sub",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___sub",2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::ColVector< double > const &)*arg2);
  {
    SimpleEigen::ColVector< double > * resultptr = new SimpleEigen::ColVector< double >((const SimpleEigen::ColVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleMatrix___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleMatrix___sub__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleMatrix___sub__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleMatrix___sub__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleMatrix___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Matrix< double >::operator -(SimpleEigen::Matrix< double > const &)\n"
    "    SimpleEigen::Matrix< double >::operator -(SimpleEigen::Scalar< double > const &)\n"
    "    SimpleEigen::Matrix< double >::operator -(SimpleEigen::RowVector< double > const &)\n"
    "    SimpleEigen::Matrix< double >::operator -(SimpleEigen::ColVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleMatrix___mul__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  double arg2 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator *",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator *",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___mul",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = (arg1)->operator *(arg2);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleMatrix___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleMatrix___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleMatrix___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleMatrix___mul__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleMatrix___mul__SWIG_4(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleMatrix___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Matrix< double >::operator *(SimpleEigen::Matrix< double > const &)\n"
    "    SimpleEigen::Matrix< double >::operator *(SimpleEigen::Scalar< double > const &)\n"
    "    SimpleEigen::Matrix< double >::operator *(SimpleEigen::RowVector< double > const &)\n"
    "    SimpleEigen::Matrix< double >::operator *(SimpleEigen::ColVector< double > const &)\n"
    "    SimpleEigen::Matrix< double >::operator *(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleMatrix___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  double arg2 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator /",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::operator /",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix___div",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = (arg1)->operator /(arg2);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleMatrix___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleMatrix___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleMatrix___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Matrix< double >::operator /(SimpleEigen::Scalar< double > const &)\n"
    "    SimpleEigen::Matrix< double >::operator /(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleMatrix_print(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::print",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_print",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_t(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::t",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::t",1,"SimpleEigen::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_t",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (arg1)->t();
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_slice__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::slice",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::slice",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::slice",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::slice",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::Matrix< double >::slice",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SimpleEigen::Matrix< double >::slice",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_slice",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (arg1)->slice(arg2,arg3,arg4,arg5);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_slice__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::slice",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::slice",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::slice",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::slice",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::Matrix< double >::slice",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_slice",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->slice(arg2,arg3,arg4);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_slice__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::slice",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::slice",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::slice",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::slice",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_slice",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (arg1)->slice(arg2,arg3);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_slice(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DoubleMatrix_slice__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_DoubleMatrix_slice__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_DoubleMatrix_slice__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleMatrix_slice'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Matrix< double >::slice(int,int,int,int)\n"
    "    SimpleEigen::Matrix< double >::slice(int,int,int)\n"
    "    SimpleEigen::Matrix< double >::slice(int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleMatrix_sliceN1__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::sliceN1",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::sliceN1",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::sliceN1",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::sliceN1",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::Matrix< double >::sliceN1",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SimpleEigen::Matrix< double >::sliceN1",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_sliceN1",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (arg1)->sliceN1(arg2,arg3,arg4,arg5);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_sliceN1__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::sliceN1",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::sliceN1",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::sliceN1",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::sliceN1",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::Matrix< double >::sliceN1",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_sliceN1",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->sliceN1(arg2,arg3,arg4);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_sliceN1(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_DoubleMatrix_sliceN1__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_DoubleMatrix_sliceN1__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleMatrix_sliceN1'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Matrix< double >::sliceN1(int,int,int,int)\n"
    "    SimpleEigen::Matrix< double >::sliceN1(int,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleMatrix_sliceN2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::sliceN2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::sliceN2",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::sliceN2",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::sliceN2",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::Matrix< double >::sliceN2",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SimpleEigen::Matrix< double >::sliceN2",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_sliceN2",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (arg1)->sliceN2(arg2,arg3,arg4,arg5);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_sliceN2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::sliceN2",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::sliceN2",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::sliceN2",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::sliceN2",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::Matrix< double >::sliceN2",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_sliceN2",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->sliceN2(arg2,arg3,arg4);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_sliceN2(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_DoubleMatrix_sliceN2__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_DoubleMatrix_sliceN2__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleMatrix_sliceN2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Matrix< double >::sliceN2(int,int,int,int)\n"
    "    SimpleEigen::Matrix< double >::sliceN2(int,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleMatrix_slicen(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::slicen",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::slicen",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::slicen",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Matrix< double >::slicen",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::Matrix< double >::slicen",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SimpleEigen::Matrix< double >::slicen",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_slicen",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (arg1)->slicen(arg2,arg3,arg4,arg5);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_rowwise_add(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::RowVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::rowwise_add",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::rowwise_add",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::rowwise_add",2,"SimpleEigen::RowVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_rowwise_add",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_rowwise_add",2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  (arg1)->rowwise_add(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_rowwise_sub(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::RowVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::rowwise_sub",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::rowwise_sub",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::rowwise_sub",2,"SimpleEigen::RowVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_rowwise_sub",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_rowwise_sub",2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  (arg1)->rowwise_sub(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_rowwise_mul(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::RowVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::rowwise_mul",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::rowwise_mul",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::rowwise_mul",2,"SimpleEigen::RowVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_rowwise_mul",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_rowwise_mul",2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  (arg1)->rowwise_mul(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_rowwise_div(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::RowVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::rowwise_div",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::rowwise_div",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::rowwise_div",2,"SimpleEigen::RowVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_rowwise_div",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_rowwise_div",2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  (arg1)->rowwise_div(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_colwise_add(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::ColVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::colwise_add",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::colwise_add",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::colwise_add",2,"SimpleEigen::ColVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_colwise_add",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_colwise_add",2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  (arg1)->colwise_add(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_colwise_sub(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::ColVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::colwise_sub",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::colwise_sub",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::colwise_sub",2,"SimpleEigen::ColVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_colwise_sub",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_colwise_sub",2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  (arg1)->colwise_sub(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_colwise_mul(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::ColVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::colwise_mul",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::colwise_mul",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::colwise_mul",2,"SimpleEigen::ColVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_colwise_mul",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_colwise_mul",2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  (arg1)->colwise_mul(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_colwise_div(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SimpleEigen::ColVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::colwise_div",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::colwise_div",1,"SimpleEigen::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Matrix< double >::colwise_div",2,"SimpleEigen::ColVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_colwise_div",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_colwise_div",2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  (arg1)->colwise_div(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMatrix_array(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) 0 ;
  SwigValueWrapper< SimpleEigen::Eigen2DArray< double > > result;
  
  SWIG_check_num_args("SimpleEigen::Matrix< double >::array",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Matrix< double >::array",1,"SimpleEigen::Matrix< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleMatrix_array",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = ((SimpleEigen::Matrix< double > const *)arg1)->array();
  {
    SimpleEigen::Eigen2DArray< double > * resultptr = new SimpleEigen::Eigen2DArray< double >((const SimpleEigen::Eigen2DArray< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Eigen2DArrayT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleMatrix(void *obj) {
SimpleEigen::Matrix< double > *arg1 = (SimpleEigen::Matrix< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleMatrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleMatrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleMatrix_attributes[] = {
    { "matrix", _wrap_DoubleMatrix_matrix_get, _wrap_DoubleMatrix_matrix_set },
    {0,0,0}
};
static swig_lua_method swig_DoubleMatrix_methods[]= {
    { "__call", _wrap_DoubleMatrix___call},
    { "random", _wrap_DoubleMatrix_random},
    { "identity", _wrap_DoubleMatrix_identity},
    { "zero", _wrap_DoubleMatrix_zero},
    { "ones", _wrap_DoubleMatrix_ones},
    { "get", _wrap_DoubleMatrix_get},
    { "set", _wrap_DoubleMatrix_set},
    { "norm", _wrap_DoubleMatrix_norm},
    { "squaredNorm", _wrap_DoubleMatrix_squaredNorm},
    { "all", _wrap_DoubleMatrix_all},
    { "allFinite", _wrap_DoubleMatrix_allFinite},
    { "any", _wrap_DoubleMatrix_any},
    { "count", _wrap_DoubleMatrix_count},
    { "rows", _wrap_DoubleMatrix_rows},
    { "cols", _wrap_DoubleMatrix_cols},
    { "resize", _wrap_DoubleMatrix_resize},
    { "data", _wrap_DoubleMatrix_data},
    { "__getitem", _wrap_DoubleMatrix___getitem},
    { "__setitem", _wrap_DoubleMatrix___setitem},
    { "normalize", _wrap_DoubleMatrix_normalize},
    { "normalized", _wrap_DoubleMatrix_normalized},
    { "fill", _wrap_DoubleMatrix_fill},
    { "eval", _wrap_DoubleMatrix_eval},
    { "hasNaN", _wrap_DoubleMatrix_hasNaN},
    { "innerSize", _wrap_DoubleMatrix_innerSize},
    { "outerSize", _wrap_DoubleMatrix_outerSize},
    { "isMuchSmallerThan", _wrap_DoubleMatrix_isMuchSmallerThan},
    { "isOnes", _wrap_DoubleMatrix_isOnes},
    { "isZero", _wrap_DoubleMatrix_isZero},
    { "row_vector", _wrap_DoubleMatrix_row_vector},
    { "row", _wrap_DoubleMatrix_row},
    { "set_row", _wrap_DoubleMatrix_set_row},
    { "set_row_vector", _wrap_DoubleMatrix_set_row_vector},
    { "set_row_matrix", _wrap_DoubleMatrix_set_row_matrix},
    { "col_vector", _wrap_DoubleMatrix_col_vector},
    { "col", _wrap_DoubleMatrix_col},
    { "set_col", _wrap_DoubleMatrix_set_col},
    { "set_col_vector", _wrap_DoubleMatrix_set_col_vector},
    { "set_col_matrix", _wrap_DoubleMatrix_set_col_matrix},
    { "leftCols", _wrap_DoubleMatrix_leftCols},
    { "middleCols", _wrap_DoubleMatrix_middleCols},
    { "rightCols", _wrap_DoubleMatrix_rightCols},
    { "topRows", _wrap_DoubleMatrix_topRows},
    { "middleRows", _wrap_DoubleMatrix_middleRows},
    { "bottomRows", _wrap_DoubleMatrix_bottomRows},
    { "topLeftCorner", _wrap_DoubleMatrix_topLeftCorner},
    { "topRightCorner", _wrap_DoubleMatrix_topRightCorner},
    { "adjoint", _wrap_DoubleMatrix_adjoint},
    { "transpose", _wrap_DoubleMatrix_transpose},
    { "diagonal", _wrap_DoubleMatrix_diagonal},
    { "reverse", _wrap_DoubleMatrix_reverse},
    { "replicate", _wrap_DoubleMatrix_replicate},
    { "adjointInPlace", _wrap_DoubleMatrix_adjointInPlace},
    { "transposeInPlace", _wrap_DoubleMatrix_transposeInPlace},
    { "reverseInPlace", _wrap_DoubleMatrix_reverseInPlace},
    { "adjointInto", _wrap_DoubleMatrix_adjointInto},
    { "transposeInto", _wrap_DoubleMatrix_transposeInto},
    { "diagonalInto", _wrap_DoubleMatrix_diagonalInto},
    { "reverseInto", _wrap_DoubleMatrix_reverseInto},
    { "replicateInto", _wrap_DoubleMatrix_replicateInto},
    { "sum", _wrap_DoubleMatrix_sum},
    { "prod", _wrap_DoubleMatrix_prod},
    { "mean", _wrap_DoubleMatrix_mean},
    { "minCoeff", _wrap_DoubleMatrix_minCoeff},
    { "maxCoeff", _wrap_DoubleMatrix_maxCoeff},
    { "trace", _wrap_DoubleMatrix_trace},
    { "addToEachRow", _wrap_DoubleMatrix_addToEachRow},
    { "cwiseAbs", _wrap_DoubleMatrix_cwiseAbs},
    { "cwiseAbs2", _wrap_DoubleMatrix_cwiseAbs2},
    { "cwiseProduct", _wrap_DoubleMatrix_cwiseProduct},
    { "cwiseQuotient", _wrap_DoubleMatrix_cwiseQuotient},
    { "cwiseInverse", _wrap_DoubleMatrix_cwiseInverse},
    { "cwiseSqrt", _wrap_DoubleMatrix_cwiseSqrt},
    { "cwiseMax", _wrap_DoubleMatrix_cwiseMax},
    { "cwiseMin", _wrap_DoubleMatrix_cwiseMin},
    { "__eq", _wrap_DoubleMatrix___eq},
    { "__unm", _wrap_DoubleMatrix___unm},
    { "__add", _wrap_DoubleMatrix___add},
    { "__sub", _wrap_DoubleMatrix___sub},
    { "__mul", _wrap_DoubleMatrix___mul},
    { "__div", _wrap_DoubleMatrix___div},
    { "print", _wrap_DoubleMatrix_print},
    { "t", _wrap_DoubleMatrix_t},
    { "slice", _wrap_DoubleMatrix_slice},
    { "sliceN1", _wrap_DoubleMatrix_sliceN1},
    { "sliceN2", _wrap_DoubleMatrix_sliceN2},
    { "slicen", _wrap_DoubleMatrix_slicen},
    { "rowwise_add", _wrap_DoubleMatrix_rowwise_add},
    { "rowwise_sub", _wrap_DoubleMatrix_rowwise_sub},
    { "rowwise_mul", _wrap_DoubleMatrix_rowwise_mul},
    { "rowwise_div", _wrap_DoubleMatrix_rowwise_div},
    { "colwise_add", _wrap_DoubleMatrix_colwise_add},
    { "colwise_sub", _wrap_DoubleMatrix_colwise_sub},
    { "colwise_mul", _wrap_DoubleMatrix_colwise_mul},
    { "colwise_div", _wrap_DoubleMatrix_colwise_div},
    { "array", _wrap_DoubleMatrix_array},
    {0,0}
};
static swig_lua_method swig_DoubleMatrix_meta[] = {
    { "__call", _wrap_DoubleMatrix___call},
    { "__getitem", _wrap_DoubleMatrix___getitem},
    { "__setitem", _wrap_DoubleMatrix___setitem},
    { "__eq", _wrap_DoubleMatrix___eq},
    { "__unm", _wrap_DoubleMatrix___unm},
    { "__add", _wrap_DoubleMatrix___add},
    { "__sub", _wrap_DoubleMatrix___sub},
    { "__mul", _wrap_DoubleMatrix___mul},
    { "__div", _wrap_DoubleMatrix___div},
    {0,0}
};

static swig_lua_attribute swig_DoubleMatrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleMatrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleMatrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleMatrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleMatrix_Sf_SwigStatic = {
    "DoubleMatrix",
    swig_DoubleMatrix_Sf_SwigStatic_methods,
    swig_DoubleMatrix_Sf_SwigStatic_attributes,
    swig_DoubleMatrix_Sf_SwigStatic_constants,
    swig_DoubleMatrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleMatrix_bases[] = {0};
static const char *swig_DoubleMatrix_base_names[] = {0};
static swig_lua_class _wrap_class_DoubleMatrix = { "DoubleMatrix", "DoubleMatrix", &SWIGTYPE_p_SimpleEigen__MatrixT_double_t,_proxy__wrap_new_DoubleMatrix, swig_delete_DoubleMatrix, swig_DoubleMatrix_methods, swig_DoubleMatrix_attributes, &swig_DoubleMatrix_Sf_SwigStatic, swig_DoubleMatrix_meta, swig_DoubleMatrix_bases, swig_DoubleMatrix_base_names };

static int _wrap_new_FloatColMatrixView(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::EigenColMatrix< float > *arg1 = (SimpleEigen::EigenColMatrix< float > *) 0 ;
  size_t arg2 ;
  SimpleEigen::ColMatrixView< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrixView< float >::ColMatrixView",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrixView< float >::ColMatrixView",1,"SimpleEigen::EigenColMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrixView< float >::ColMatrixView",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__EigenColMatrixT_float_t,0))){
    SWIG_fail_ptr("new_FloatColMatrixView",1,SWIGTYPE_p_SimpleEigen__EigenColMatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (SimpleEigen::ColMatrixView< float > *)new SimpleEigen::ColMatrixView< float >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrixView___getitem(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrixView< float > *arg1 = (SimpleEigen::ColMatrixView< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrixView< float >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrixView< float >::__getitem",1,"SimpleEigen::ColMatrixView< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrixView< float >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrixView___getitem",1,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrixView___setitem(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrixView< float > *arg1 = (SimpleEigen::ColMatrixView< float > *) 0 ;
  size_t arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrixView< float >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrixView< float >::__setitem",1,"SimpleEigen::ColMatrixView< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrixView< float >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrixView< float >::__setitem",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrixView___setitem",1,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->__setitem(arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrixView_use_rows(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrixView< float > *arg1 = (SimpleEigen::ColMatrixView< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrixView< float >::use_rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrixView< float >::use_rows",1,"SimpleEigen::ColMatrixView< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrixView_use_rows",1,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_float_t);
  }
  
  (arg1)->use_rows();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrixView_use_cols(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrixView< float > *arg1 = (SimpleEigen::ColMatrixView< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrixView< float >::use_cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrixView< float >::use_cols",1,"SimpleEigen::ColMatrixView< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrixView_use_cols",1,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_float_t);
  }
  
  (arg1)->use_cols();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrixView_rows(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrixView< float > *arg1 = (SimpleEigen::ColMatrixView< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrixView< float >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrixView< float >::rows",1,"SimpleEigen::ColMatrixView< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrixView_rows",1,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_float_t);
  }
  
  result = (arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrixView_cols(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrixView< float > *arg1 = (SimpleEigen::ColMatrixView< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrixView< float >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrixView< float >::cols",1,"SimpleEigen::ColMatrixView< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrixView_cols",1,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_float_t);
  }
  
  result = (arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrixView_set_row(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrixView< float > *arg1 = (SimpleEigen::ColMatrixView< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrixView< float >::set_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrixView< float >::set_row",1,"SimpleEigen::ColMatrixView< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrixView< float >::set_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrixView_set_row",1,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->set_row(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrixView_set_col(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrixView< float > *arg1 = (SimpleEigen::ColMatrixView< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrixView< float >::set_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrixView< float >::set_col",1,"SimpleEigen::ColMatrixView< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrixView< float >::set_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrixView_set_col",1,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->set_col(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatColMatrixView(void *obj) {
SimpleEigen::ColMatrixView< float > *arg1 = (SimpleEigen::ColMatrixView< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatColMatrixView(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatColMatrixView);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatColMatrixView_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FloatColMatrixView_methods[]= {
    { "__getitem", _wrap_FloatColMatrixView___getitem},
    { "__setitem", _wrap_FloatColMatrixView___setitem},
    { "use_rows", _wrap_FloatColMatrixView_use_rows},
    { "use_cols", _wrap_FloatColMatrixView_use_cols},
    { "rows", _wrap_FloatColMatrixView_rows},
    { "cols", _wrap_FloatColMatrixView_cols},
    { "set_row", _wrap_FloatColMatrixView_set_row},
    { "set_col", _wrap_FloatColMatrixView_set_col},
    {0,0}
};
static swig_lua_method swig_FloatColMatrixView_meta[] = {
    { "__getitem", _wrap_FloatColMatrixView___getitem},
    { "__setitem", _wrap_FloatColMatrixView___setitem},
    {0,0}
};

static swig_lua_attribute swig_FloatColMatrixView_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatColMatrixView_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatColMatrixView_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatColMatrixView_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatColMatrixView_Sf_SwigStatic = {
    "FloatColMatrixView",
    swig_FloatColMatrixView_Sf_SwigStatic_methods,
    swig_FloatColMatrixView_Sf_SwigStatic_attributes,
    swig_FloatColMatrixView_Sf_SwigStatic_constants,
    swig_FloatColMatrixView_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatColMatrixView_bases[] = {0,0};
static const char *swig_FloatColMatrixView_base_names[] = {"SimpleEigen::Base *",0};
static swig_lua_class _wrap_class_FloatColMatrixView = { "FloatColMatrixView", "FloatColMatrixView", &SWIGTYPE_p_SimpleEigen__ColMatrixViewT_float_t,_proxy__wrap_new_FloatColMatrixView, swig_delete_FloatColMatrixView, swig_FloatColMatrixView_methods, swig_FloatColMatrixView_attributes, &swig_FloatColMatrixView_Sf_SwigStatic, swig_FloatColMatrixView_meta, swig_FloatColMatrixView_bases, swig_FloatColMatrixView_base_names };

static int _wrap_new_DoubleCOlMatrixView(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::EigenColMatrix< double > *arg1 = (SimpleEigen::EigenColMatrix< double > *) 0 ;
  size_t arg2 ;
  SimpleEigen::ColMatrixView< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrixView< double >::ColMatrixView",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrixView< double >::ColMatrixView",1,"SimpleEigen::EigenColMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrixView< double >::ColMatrixView",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__EigenColMatrixT_double_t,0))){
    SWIG_fail_ptr("new_DoubleCOlMatrixView",1,SWIGTYPE_p_SimpleEigen__EigenColMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (SimpleEigen::ColMatrixView< double > *)new SimpleEigen::ColMatrixView< double >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleCOlMatrixView___getitem(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrixView< double > *arg1 = (SimpleEigen::ColMatrixView< double > *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrixView< double >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrixView< double >::__getitem",1,"SimpleEigen::ColMatrixView< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrixView< double >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_double_t,0))){
    SWIG_fail_ptr("DoubleCOlMatrixView___getitem",1,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleCOlMatrixView___setitem(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrixView< double > *arg1 = (SimpleEigen::ColMatrixView< double > *) 0 ;
  size_t arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrixView< double >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrixView< double >::__setitem",1,"SimpleEigen::ColMatrixView< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrixView< double >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrixView< double >::__setitem",3,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_double_t,0))){
    SWIG_fail_ptr("DoubleCOlMatrixView___setitem",1,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->__setitem(arg2,(double const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleCOlMatrixView_use_rows(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrixView< double > *arg1 = (SimpleEigen::ColMatrixView< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrixView< double >::use_rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrixView< double >::use_rows",1,"SimpleEigen::ColMatrixView< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_double_t,0))){
    SWIG_fail_ptr("DoubleCOlMatrixView_use_rows",1,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_double_t);
  }
  
  (arg1)->use_rows();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleCOlMatrixView_use_cols(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrixView< double > *arg1 = (SimpleEigen::ColMatrixView< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrixView< double >::use_cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrixView< double >::use_cols",1,"SimpleEigen::ColMatrixView< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_double_t,0))){
    SWIG_fail_ptr("DoubleCOlMatrixView_use_cols",1,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_double_t);
  }
  
  (arg1)->use_cols();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleCOlMatrixView_rows(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrixView< double > *arg1 = (SimpleEigen::ColMatrixView< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrixView< double >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrixView< double >::rows",1,"SimpleEigen::ColMatrixView< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_double_t,0))){
    SWIG_fail_ptr("DoubleCOlMatrixView_rows",1,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_double_t);
  }
  
  result = (arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleCOlMatrixView_cols(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrixView< double > *arg1 = (SimpleEigen::ColMatrixView< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrixView< double >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrixView< double >::cols",1,"SimpleEigen::ColMatrixView< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_double_t,0))){
    SWIG_fail_ptr("DoubleCOlMatrixView_cols",1,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_double_t);
  }
  
  result = (arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleCOlMatrixView_set_row(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrixView< double > *arg1 = (SimpleEigen::ColMatrixView< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrixView< double >::set_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrixView< double >::set_row",1,"SimpleEigen::ColMatrixView< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrixView< double >::set_row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_double_t,0))){
    SWIG_fail_ptr("DoubleCOlMatrixView_set_row",1,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->set_row(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleCOlMatrixView_set_col(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrixView< double > *arg1 = (SimpleEigen::ColMatrixView< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrixView< double >::set_col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrixView< double >::set_col",1,"SimpleEigen::ColMatrixView< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrixView< double >::set_col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_double_t,0))){
    SWIG_fail_ptr("DoubleCOlMatrixView_set_col",1,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->set_col(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleCOlMatrixView(void *obj) {
SimpleEigen::ColMatrixView< double > *arg1 = (SimpleEigen::ColMatrixView< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleCOlMatrixView(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleCOlMatrixView);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleCOlMatrixView_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DoubleCOlMatrixView_methods[]= {
    { "__getitem", _wrap_DoubleCOlMatrixView___getitem},
    { "__setitem", _wrap_DoubleCOlMatrixView___setitem},
    { "use_rows", _wrap_DoubleCOlMatrixView_use_rows},
    { "use_cols", _wrap_DoubleCOlMatrixView_use_cols},
    { "rows", _wrap_DoubleCOlMatrixView_rows},
    { "cols", _wrap_DoubleCOlMatrixView_cols},
    { "set_row", _wrap_DoubleCOlMatrixView_set_row},
    { "set_col", _wrap_DoubleCOlMatrixView_set_col},
    {0,0}
};
static swig_lua_method swig_DoubleCOlMatrixView_meta[] = {
    { "__getitem", _wrap_DoubleCOlMatrixView___getitem},
    { "__setitem", _wrap_DoubleCOlMatrixView___setitem},
    {0,0}
};

static swig_lua_attribute swig_DoubleCOlMatrixView_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleCOlMatrixView_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleCOlMatrixView_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleCOlMatrixView_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleCOlMatrixView_Sf_SwigStatic = {
    "DoubleCOlMatrixView",
    swig_DoubleCOlMatrixView_Sf_SwigStatic_methods,
    swig_DoubleCOlMatrixView_Sf_SwigStatic_attributes,
    swig_DoubleCOlMatrixView_Sf_SwigStatic_constants,
    swig_DoubleCOlMatrixView_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleCOlMatrixView_bases[] = {0,0};
static const char *swig_DoubleCOlMatrixView_base_names[] = {"SimpleEigen::Base *",0};
static swig_lua_class _wrap_class_DoubleCOlMatrixView = { "DoubleCOlMatrixView", "DoubleCOlMatrixView", &SWIGTYPE_p_SimpleEigen__ColMatrixViewT_double_t,_proxy__wrap_new_DoubleCOlMatrixView, swig_delete_DoubleCOlMatrixView, swig_DoubleCOlMatrixView_methods, swig_DoubleCOlMatrixView_attributes, &swig_DoubleCOlMatrixView_Sf_SwigStatic, swig_DoubleCOlMatrixView_meta, swig_DoubleCOlMatrixView_bases, swig_DoubleCOlMatrixView_base_names };

static int _wrap_FloatColMatrix_matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::EigenColMatrix< float > *arg2 = (SimpleEigen::EigenColMatrix< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::matrix",1,"SimpleEigen::ColMatrix< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::matrix",2,"SimpleEigen::EigenColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_matrix_set",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__EigenColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_matrix_set",2,SWIGTYPE_p_SimpleEigen__EigenColMatrixT_float_t);
  }
  
  if (arg1) (arg1)->matrix = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::EigenColMatrix< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::matrix",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_matrix_get",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (SimpleEigen::EigenColMatrix< float > *)& ((arg1)->matrix);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__EigenColMatrixT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatColMatrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::ColMatrix",0,0)
  result = (SimpleEigen::ColMatrix< float > *)new SimpleEigen::ColMatrix< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatColMatrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  SimpleEigen::ColMatrix< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::ColMatrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::ColMatrix",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::ColMatrix",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (SimpleEigen::ColMatrix< float > *)new SimpleEigen::ColMatrix< float >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatColMatrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  SimpleEigen::ColMatrix< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::ColMatrix",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::ColMatrix",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::ColMatrix",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::ColMatrix",3,"float const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  result = (SimpleEigen::ColMatrix< float > *)new SimpleEigen::ColMatrix< float >(arg1,arg2,(float const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatColMatrix__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = 0 ;
  SimpleEigen::ColMatrix< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::ColMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::ColMatrix",1,"SimpleEigen::RowVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("new_FloatColMatrix",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = (SimpleEigen::ColMatrix< float > *)new SimpleEigen::ColMatrix< float >((SimpleEigen::RowVector< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatColMatrix__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = 0 ;
  SimpleEigen::ColMatrix< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::ColMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::ColMatrix",1,"SimpleEigen::ColVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("new_FloatColMatrix",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = (SimpleEigen::ColMatrix< float > *)new SimpleEigen::ColMatrix< float >((SimpleEigen::ColVector< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatColMatrix__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = 0 ;
  SimpleEigen::ColMatrix< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::ColMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::ColMatrix",1,"SimpleEigen::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("new_FloatColMatrix",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (SimpleEigen::ColMatrix< float > *)new SimpleEigen::ColMatrix< float >((SimpleEigen::ColMatrix< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatColMatrix__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::EigenColMatrix< float > *arg1 = 0 ;
  SimpleEigen::ColMatrix< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::ColMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::ColMatrix",1,"SimpleEigen::EigenColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__EigenColMatrixT_float_t,0))){
    SWIG_fail_ptr("new_FloatColMatrix",1,SWIGTYPE_p_SimpleEigen__EigenColMatrixT_float_t);
  }
  
  result = (SimpleEigen::ColMatrix< float > *)new SimpleEigen::ColMatrix< float >((SimpleEigen::EigenColMatrix< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatColMatrix__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  Eigen::Matrix< float,1,Eigen::Dynamic > *arg1 = 0 ;
  SimpleEigen::ColMatrix< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::ColMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::ColMatrix",1,"Eigen::Matrix< float,1,Eigen::Dynamic > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Eigen__MatrixT_float_1_Eigen__Dynamic_t,0))){
    SWIG_fail_ptr("new_FloatColMatrix",1,SWIGTYPE_p_Eigen__MatrixT_float_1_Eigen__Dynamic_t);
  }
  
  result = (SimpleEigen::ColMatrix< float > *)new SimpleEigen::ColMatrix< float >((Eigen::Matrix< float,1,Eigen::Dynamic > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatColMatrix__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  Eigen::Matrix< float,Eigen::Dynamic,1 > *arg1 = 0 ;
  SimpleEigen::ColMatrix< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::ColMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::ColMatrix",1,"Eigen::Matrix< float,Eigen::Dynamic,1 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Eigen__MatrixT_float_Eigen__Dynamic_1_t,0))){
    SWIG_fail_ptr("new_FloatColMatrix",1,SWIGTYPE_p_Eigen__MatrixT_float_Eigen__Dynamic_1_t);
  }
  
  result = (SimpleEigen::ColMatrix< float > *)new SimpleEigen::ColMatrix< float >((Eigen::Matrix< float,Eigen::Dynamic,1 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatColMatrix__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  Eigen::Array< float,Eigen::Dynamic,Eigen::Dynamic > *arg1 = 0 ;
  SimpleEigen::ColMatrix< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::ColMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::ColMatrix",1,"Eigen::Array< float,Eigen::Dynamic,Eigen::Dynamic > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Eigen__ArrayT_float_Eigen__Dynamic_Eigen__Dynamic_t,0))){
    SWIG_fail_ptr("new_FloatColMatrix",1,SWIGTYPE_p_Eigen__ArrayT_float_Eigen__Dynamic_Eigen__Dynamic_t);
  }
  
  result = (SimpleEigen::ColMatrix< float > *)new SimpleEigen::ColMatrix< float >((Eigen::Array< float,Eigen::Dynamic,Eigen::Dynamic > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatColMatrix__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SimpleEigen::ColMatrix< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::ColMatrix",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::ColMatrix",1,"std::vector< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::ColMatrix",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::ColMatrix",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("new_FloatColMatrix",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (SimpleEigen::ColMatrix< float > *)new SimpleEigen::ColMatrix< float >((std::vector< float > const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatColMatrix(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FloatColMatrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatColMatrix__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatColMatrix__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatColMatrix__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__EigenColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatColMatrix__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Eigen__MatrixT_float_1_Eigen__Dynamic_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatColMatrix__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Eigen__MatrixT_float_Eigen__Dynamic_1_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatColMatrix__SWIG_8(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Eigen__ArrayT_float_Eigen__Dynamic_Eigen__Dynamic_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatColMatrix__SWIG_9(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FloatColMatrix__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_FloatColMatrix__SWIG_10(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_FloatColMatrix__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatColMatrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColMatrix< float >::ColMatrix()\n"
    "    SimpleEigen::ColMatrix< float >::ColMatrix(int,int)\n"
    "    SimpleEigen::ColMatrix< float >::ColMatrix(int,int,float const &)\n"
    "    SimpleEigen::ColMatrix< float >::ColMatrix(SimpleEigen::RowVector< float > const &)\n"
    "    SimpleEigen::ColMatrix< float >::ColMatrix(SimpleEigen::ColVector< float > const &)\n"
    "    SimpleEigen::ColMatrix< float >::ColMatrix(SimpleEigen::ColMatrix< float > const &)\n"
    "    SimpleEigen::ColMatrix< float >::ColMatrix(SimpleEigen::EigenColMatrix< float > const &)\n"
    "    SimpleEigen::ColMatrix< float >::ColMatrix(Eigen::Matrix< float,1,Eigen::Dynamic > const &)\n"
    "    SimpleEigen::ColMatrix< float >::ColMatrix(Eigen::Matrix< float,Eigen::Dynamic,1 > const &)\n"
    "    SimpleEigen::ColMatrix< float >::ColMatrix(Eigen::Array< float,Eigen::Dynamic,Eigen::Dynamic > const &)\n"
    "    SimpleEigen::ColMatrix< float >::ColMatrix(std::vector< float > const &,size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatColMatrix___call(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator ()",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___call",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (float *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_random__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::random",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::random",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::random",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::random",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_random",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->random(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_random__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::random",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::random",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_random",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  (arg1)->random();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_random(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatColMatrix_random__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatColMatrix_random__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatColMatrix_random'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColMatrix< float >::random(int,int)\n"
    "    SimpleEigen::ColMatrix< float >::random()\n");
  lua_error(L);return 0;
}


static int _wrap_FloatColMatrix_identity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::identity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::identity",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::identity",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::identity",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_identity",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->identity(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_identity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::identity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::identity",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_identity",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  (arg1)->identity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_identity(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatColMatrix_identity__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatColMatrix_identity__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatColMatrix_identity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColMatrix< float >::identity(int,int)\n"
    "    SimpleEigen::ColMatrix< float >::identity()\n");
  lua_error(L);return 0;
}


static int _wrap_FloatColMatrix_zero__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::zero",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::zero",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::zero",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::zero",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_zero",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->zero(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_zero__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::zero",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_zero",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  (arg1)->zero();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_zero(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatColMatrix_zero__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatColMatrix_zero__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatColMatrix_zero'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColMatrix< float >::zero(int,int)\n"
    "    SimpleEigen::ColMatrix< float >::zero()\n");
  lua_error(L);return 0;
}


static int _wrap_FloatColMatrix_ones__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::ones",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::ones",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::ones",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::ones",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_ones",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->ones(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_ones__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::ones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::ones",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_ones",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  (arg1)->ones();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_ones(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatColMatrix_ones__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatColMatrix_ones__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatColMatrix_ones'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColMatrix< float >::ones(int,int)\n"
    "    SimpleEigen::ColMatrix< float >::ones()\n");
  lua_error(L);return 0;
}


static int _wrap_FloatColMatrix_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::get",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::get",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::get",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_get",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (float)(arg1)->get(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::set",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::set",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::set",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::set",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_set",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_norm(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::norm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::norm",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_norm",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (float)(arg1)->norm();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_squaredNorm(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::squaredNorm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::squaredNorm",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_squaredNorm",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (float)(arg1)->squaredNorm();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_all(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::all",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::all",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_all",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (bool)(arg1)->all();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_allFinite(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::allFinite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::allFinite",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_allFinite",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (bool)(arg1)->allFinite();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_any(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::any",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::any",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_any",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (bool)(arg1)->any();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_count(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::count",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::count",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_count",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (bool)(arg1)->count();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_rows(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::rows",1,"SimpleEigen::ColMatrix< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_rows",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = ((SimpleEigen::ColMatrix< float > const *)arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_cols(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::cols",1,"SimpleEigen::ColMatrix< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_cols",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = ((SimpleEigen::ColMatrix< float > const *)arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_resize(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::resize",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::resize",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::resize",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_resize",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_data(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::data",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_data",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (float *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix___getitem(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  int arg2 ;
  SwigValueWrapper< SimpleEigen::ColMatrixView< float > > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::__getitem",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::__getitem",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___getitem",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (arg1)->__getitem(arg2);
  {
    SimpleEigen::ColMatrixView< float > * resultptr = new SimpleEigen::ColMatrixView< float >((const SimpleEigen::ColMatrixView< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix___setitem(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  int arg2 ;
  SimpleEigen::RowVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::__setitem",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::__setitem",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::__setitem",3,"SimpleEigen::RowVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___setitem",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___setitem",3,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  (arg1)->__setitem(arg2,(SimpleEigen::RowVector< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_normalize(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::normalize",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_normalize",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_normalized(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::normalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::normalized",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_normalized",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (arg1)->normalized();
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_fill(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::fill",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::fill",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_fill",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_eval(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::eval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::eval",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_eval",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (arg1)->eval();
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_hasNaN(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::hasNaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::hasNaN",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_hasNaN",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (bool)(arg1)->hasNaN();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_innerSize(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::innerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::innerSize",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_innerSize",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (arg1)->innerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_outerSize(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::outerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::outerSize",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_outerSize",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (arg1)->outerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_isMuchSmallerThan(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > *arg2 = 0 ;
  float arg3 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::isMuchSmallerThan",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::isMuchSmallerThan",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::isMuchSmallerThan",2,"SimpleEigen::ColMatrix< float > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::isMuchSmallerThan",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_isMuchSmallerThan",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_isMuchSmallerThan",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (bool)(arg1)->isMuchSmallerThan((SimpleEigen::ColMatrix< float > const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_isOnes(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::isOnes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::isOnes",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_isOnes",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (bool)(arg1)->isOnes();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_isZero(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::isZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::isZero",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_isZero",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (bool)(arg1)->isZero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_row_vector(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  size_t arg2 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::row_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::row_vector",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::row_vector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_row_vector",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->row_vector(arg2);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_row(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  size_t arg2 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::row",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_row",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->row(arg2);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_set_row(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  size_t arg2 ;
  std::vector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::set_row",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::set_row",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::set_row",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::set_row",3,"std::vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_set_row",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_set_row",3,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->set_row(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_set_row_vector(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  size_t arg2 ;
  SimpleEigen::RowVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::set_row_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::set_row_vector",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::set_row_vector",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::set_row_vector",3,"SimpleEigen::RowVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_set_row_vector",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_set_row_vector",3,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  (arg1)->set_row_vector(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_set_row_matrix(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  size_t arg2 ;
  SimpleEigen::ColMatrix< float > *arg3 = 0 ;
  size_t arg4 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::set_row_matrix",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::set_row_matrix",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::set_row_matrix",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::set_row_matrix",3,"SimpleEigen::ColMatrix< float > &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::set_row_matrix",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_set_row_matrix",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_set_row_matrix",3,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  (arg1)->set_row_matrix(arg2,*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_col_vector(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  size_t arg2 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::col_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::col_vector",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::col_vector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_col_vector",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->col_vector(arg2);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_col(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  size_t arg2 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::col",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_col",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->col(arg2);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_set_col(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  size_t arg2 ;
  std::vector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::set_col",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::set_col",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::set_col",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::set_col",3,"std::vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_set_col",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_set_col",3,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->set_col(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_set_col_vector(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  size_t arg2 ;
  SimpleEigen::ColVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::set_col_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::set_col_vector",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::set_col_vector",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::set_col_vector",3,"SimpleEigen::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_set_col_vector",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_set_col_vector",3,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  (arg1)->set_col_vector(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_set_col_matrix(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  size_t arg2 ;
  SimpleEigen::ColMatrix< float > *arg3 = 0 ;
  size_t arg4 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::set_col_matrix",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::set_col_matrix",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::set_col_matrix",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::set_col_matrix",3,"SimpleEigen::ColMatrix< float > &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::set_col_matrix",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_set_col_matrix",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_set_col_matrix",3,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  (arg1)->set_col_matrix(arg2,*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_leftCols(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > *arg2 = 0 ;
  size_t arg3 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::leftCols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::leftCols",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::leftCols",2,"SimpleEigen::ColMatrix< float > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::leftCols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_leftCols",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_leftCols",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->leftCols(*arg2,arg3);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_middleCols(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::middleCols",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::middleCols",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::middleCols",2,"SimpleEigen::ColMatrix< float > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::middleCols",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::middleCols",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_middleCols",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_middleCols",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->middleCols(*arg2,arg3,arg4);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_rightCols(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > *arg2 = 0 ;
  size_t arg3 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::rightCols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::rightCols",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::rightCols",2,"SimpleEigen::ColMatrix< float > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::rightCols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_rightCols",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_rightCols",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->rightCols(*arg2,arg3);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_topRows(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > *arg2 = 0 ;
  size_t arg3 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::topRows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::topRows",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::topRows",2,"SimpleEigen::ColMatrix< float > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::topRows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_topRows",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_topRows",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->topRows(*arg2,arg3);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_middleRows(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::middleRows",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::middleRows",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::middleRows",2,"SimpleEigen::ColMatrix< float > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::middleRows",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::middleRows",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_middleRows",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_middleRows",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->middleRows(*arg2,arg3,arg4);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_bottomRows(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > *arg2 = 0 ;
  size_t arg3 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::bottomRows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::bottomRows",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::bottomRows",2,"SimpleEigen::ColMatrix< float > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::bottomRows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_bottomRows",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_bottomRows",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->bottomRows(*arg2,arg3);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_topLeftCorner(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::topLeftCorner",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::topLeftCorner",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::topLeftCorner",2,"SimpleEigen::ColMatrix< float > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::topLeftCorner",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::topLeftCorner",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_topLeftCorner",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_topLeftCorner",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->topLeftCorner(*arg2,arg3,arg4);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_topRightCorner(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::topRightCorner",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::topRightCorner",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::topRightCorner",2,"SimpleEigen::ColMatrix< float > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::topRightCorner",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::topRightCorner",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_topRightCorner",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_topRightCorner",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->topRightCorner(*arg2,arg3,arg4);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_adjoint(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::adjoint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::adjoint",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_adjoint",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (arg1)->adjoint();
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_transpose(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::transpose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::transpose",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_transpose",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (arg1)->transpose();
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_diagonal(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::diagonal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::diagonal",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_diagonal",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (arg1)->diagonal();
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_reverse(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::reverse",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_reverse",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (arg1)->reverse();
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_replicate(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::replicate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::replicate",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::replicate",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::replicate",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_replicate",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->replicate(arg2,arg3);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_adjointInPlace(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::adjointInPlace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::adjointInPlace",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_adjointInPlace",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  (arg1)->adjointInPlace();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_transposeInPlace(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::transposeInPlace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::transposeInPlace",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_transposeInPlace",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  (arg1)->transposeInPlace();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_reverseInPlace(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::reverseInPlace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::reverseInPlace",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_reverseInPlace",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  (arg1)->reverseInPlace();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_adjointInto(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > *arg2 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::adjointInto",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::adjointInto",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::adjointInto",2,"SimpleEigen::ColMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_adjointInto",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_adjointInto",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (arg1)->adjointInto(*arg2);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_transposeInto(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > *arg2 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::transposeInto",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::transposeInto",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::transposeInto",2,"SimpleEigen::ColMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_transposeInto",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_transposeInto",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (arg1)->transposeInto(*arg2);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_diagonalInto(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > *arg2 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::diagonalInto",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::diagonalInto",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::diagonalInto",2,"SimpleEigen::ColMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_diagonalInto",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_diagonalInto",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (arg1)->diagonalInto(*arg2);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_reverseInto(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > *arg2 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::reverseInto",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::reverseInto",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::reverseInto",2,"SimpleEigen::ColMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_reverseInto",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_reverseInto",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (arg1)->reverseInto(*arg2);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_replicateInto(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::replicateInto",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::replicateInto",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::replicateInto",2,"SimpleEigen::ColMatrix< float > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::replicateInto",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::replicateInto",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_replicateInto",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_replicateInto",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->replicateInto(*arg2,arg3,arg4);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_sum(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::sum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::sum",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_sum",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (float)(arg1)->sum();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_prod(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::prod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::prod",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_prod",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (float)(arg1)->prod();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_mean(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::mean",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::mean",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_mean",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (float)(arg1)->mean();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_minCoeff(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::minCoeff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::minCoeff",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_minCoeff",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (float)(arg1)->minCoeff();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_maxCoeff(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::maxCoeff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::maxCoeff",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_maxCoeff",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (float)(arg1)->maxCoeff();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_trace(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::trace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::trace",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_trace",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (float)(arg1)->trace();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_addToEachRow(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > *arg2 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::addToEachRow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::addToEachRow",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::addToEachRow",2,"SimpleEigen::ColMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_addToEachRow",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_addToEachRow",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (arg1)->addToEachRow(*arg2);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_cwiseAbs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::cwiseAbs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::cwiseAbs",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_cwiseAbs",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (arg1)->cwiseAbs();
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_cwiseAbs2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::cwiseAbs2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::cwiseAbs2",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_cwiseAbs2",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (arg1)->cwiseAbs2();
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_cwiseProduct(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > *arg2 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::cwiseProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::cwiseProduct",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::cwiseProduct",2,"SimpleEigen::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_cwiseProduct",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_cwiseProduct",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (arg1)->cwiseProduct((SimpleEigen::ColMatrix< float > const &)*arg2);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_cwiseQuotient(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > *arg2 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::cwiseQuotient",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::cwiseQuotient",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::cwiseQuotient",2,"SimpleEigen::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_cwiseQuotient",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_cwiseQuotient",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (arg1)->cwiseQuotient((SimpleEigen::ColMatrix< float > const &)*arg2);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_cwiseInverse(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::cwiseInverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::cwiseInverse",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_cwiseInverse",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (arg1)->cwiseInverse();
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_cwiseSqrt(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::cwiseSqrt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::cwiseSqrt",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_cwiseSqrt",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (arg1)->cwiseSqrt();
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_cwiseMax(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > *arg2 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::cwiseMax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::cwiseMax",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::cwiseMax",2,"SimpleEigen::ColMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_cwiseMax",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_cwiseMax",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (arg1)->cwiseMax(*arg2);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_cwiseMin(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > *arg2 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::cwiseMin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::cwiseMin",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::cwiseMin",2,"SimpleEigen::ColMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_cwiseMin",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_cwiseMin",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (arg1)->cwiseMin(*arg2);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix___eq(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator ==",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator ==",2,"SimpleEigen::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___eq",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___eq",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (bool)(arg1)->operator ==((SimpleEigen::ColMatrix< float > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > *arg2 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator *",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator *",2,"SimpleEigen::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___mul",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___mul",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::ColMatrix< float > const &)*arg2);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > *arg2 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator +",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator +",2,"SimpleEigen::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___add",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___add",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::ColMatrix< float > const &)*arg2);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > *arg2 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator -",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator -",2,"SimpleEigen::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___sub",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___sub",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::ColMatrix< float > const &)*arg2);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator *",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator *",2,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___mul",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___mul",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::Scalar< float > const &)*arg2);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator +",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator +",2,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___add",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___add",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::Scalar< float > const &)*arg2);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator -",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator -",2,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___sub",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___sub",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::Scalar< float > const &)*arg2);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator /",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator /",2,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___div",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___div",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::Scalar< float > const &)*arg2);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix___unm(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator -",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___unm",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (arg1)->operator -();
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::RowVector< float > *arg2 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator *",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator *",2,"SimpleEigen::RowVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___mul",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___mul",2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::RowVector< float > const &)*arg2);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::RowVector< float > *arg2 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator +",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator +",2,"SimpleEigen::RowVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___add",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___add",2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::RowVector< float > const &)*arg2);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::RowVector< float > *arg2 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator -",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator -",2,"SimpleEigen::RowVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___sub",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___sub",2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::RowVector< float > const &)*arg2);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix___mul__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColVector< float > *arg2 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator *",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator *",2,"SimpleEigen::ColVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___mul",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___mul",2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::ColVector< float > const &)*arg2);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix___add__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColVector< float > *arg2 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator +",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator +",2,"SimpleEigen::ColVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___add",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___add",2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::ColVector< float > const &)*arg2);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatColMatrix___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatColMatrix___add__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatColMatrix___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatColMatrix___add__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatColMatrix___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColMatrix< float >::operator +(SimpleEigen::ColMatrix< float > const &)\n"
    "    SimpleEigen::ColMatrix< float >::operator +(SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::ColMatrix< float >::operator +(SimpleEigen::RowVector< float > const &)\n"
    "    SimpleEigen::ColMatrix< float >::operator +(SimpleEigen::ColVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatColMatrix___sub__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColVector< float > *arg2 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator -",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator -",2,"SimpleEigen::ColVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___sub",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___sub",2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::ColVector< float > const &)*arg2);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatColMatrix___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatColMatrix___sub__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatColMatrix___sub__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatColMatrix___sub__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatColMatrix___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColMatrix< float >::operator -(SimpleEigen::ColMatrix< float > const &)\n"
    "    SimpleEigen::ColMatrix< float >::operator -(SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::ColMatrix< float >::operator -(SimpleEigen::RowVector< float > const &)\n"
    "    SimpleEigen::ColMatrix< float >::operator -(SimpleEigen::ColVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatColMatrix___mul__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  float arg2 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator *",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator *",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___mul",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = (arg1)->operator *(arg2);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatColMatrix___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatColMatrix___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatColMatrix___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatColMatrix___mul__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatColMatrix___mul__SWIG_4(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatColMatrix___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColMatrix< float >::operator *(SimpleEigen::ColMatrix< float > const &)\n"
    "    SimpleEigen::ColMatrix< float >::operator *(SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::ColMatrix< float >::operator *(SimpleEigen::RowVector< float > const &)\n"
    "    SimpleEigen::ColMatrix< float >::operator *(SimpleEigen::ColVector< float > const &)\n"
    "    SimpleEigen::ColMatrix< float >::operator *(float const)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatColMatrix___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  float arg2 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator /",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::operator /",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix___div",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = (arg1)->operator /(arg2);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatColMatrix___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatColMatrix___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatColMatrix___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColMatrix< float >::operator /(SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::ColMatrix< float >::operator /(float const)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatColMatrix_print(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::print",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_print",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_t(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::t",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::t",1,"SimpleEigen::ColMatrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_t",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = (arg1)->t();
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_slice__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::slice",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::slice",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::slice",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::slice",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::slice",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::slice",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_slice",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (arg1)->slice(arg2,arg3,arg4,arg5);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_slice__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::slice",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::slice",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::slice",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::slice",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::slice",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_slice",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->slice(arg2,arg3,arg4);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_slice__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::slice",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::slice",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::slice",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::slice",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_slice",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (arg1)->slice(arg2,arg3);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_slice(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatColMatrix_slice__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatColMatrix_slice__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_FloatColMatrix_slice__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatColMatrix_slice'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColMatrix< float >::slice(int,int,int,int)\n"
    "    SimpleEigen::ColMatrix< float >::slice(int,int,int)\n"
    "    SimpleEigen::ColMatrix< float >::slice(int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatColMatrix_sliceN1__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::sliceN1",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::sliceN1",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::sliceN1",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::sliceN1",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::sliceN1",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::sliceN1",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_sliceN1",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (arg1)->sliceN1(arg2,arg3,arg4,arg5);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_sliceN1__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::sliceN1",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::sliceN1",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::sliceN1",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::sliceN1",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::sliceN1",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_sliceN1",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->sliceN1(arg2,arg3,arg4);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_sliceN1(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatColMatrix_sliceN1__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_FloatColMatrix_sliceN1__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatColMatrix_sliceN1'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColMatrix< float >::sliceN1(int,int,int,int)\n"
    "    SimpleEigen::ColMatrix< float >::sliceN1(int,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatColMatrix_sliceN2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::sliceN2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::sliceN2",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::sliceN2",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::sliceN2",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::sliceN2",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::sliceN2",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_sliceN2",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (arg1)->sliceN2(arg2,arg3,arg4,arg5);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_sliceN2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::sliceN2",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::sliceN2",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::sliceN2",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::sliceN2",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::sliceN2",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_sliceN2",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->sliceN2(arg2,arg3,arg4);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_sliceN2(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatColMatrix_sliceN2__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_FloatColMatrix_sliceN2__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatColMatrix_sliceN2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColMatrix< float >::sliceN2(int,int,int,int)\n"
    "    SimpleEigen::ColMatrix< float >::sliceN2(int,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatColMatrix_slicen(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::slicen",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::slicen",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::slicen",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::slicen",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::slicen",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::slicen",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_slicen",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (arg1)->slicen(arg2,arg3,arg4,arg5);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_rowwise_add(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::RowVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::rowwise_add",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::rowwise_add",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::rowwise_add",2,"SimpleEigen::RowVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_rowwise_add",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_rowwise_add",2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  (arg1)->rowwise_add(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_rowwise_sub(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::RowVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::rowwise_sub",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::rowwise_sub",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::rowwise_sub",2,"SimpleEigen::RowVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_rowwise_sub",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_rowwise_sub",2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  (arg1)->rowwise_sub(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_rowwise_mul(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::RowVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::rowwise_mul",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::rowwise_mul",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::rowwise_mul",2,"SimpleEigen::RowVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_rowwise_mul",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_rowwise_mul",2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  (arg1)->rowwise_mul(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_rowwise_div(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::RowVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::rowwise_div",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::rowwise_div",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::rowwise_div",2,"SimpleEigen::RowVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_rowwise_div",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_rowwise_div",2,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  (arg1)->rowwise_div(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_colwise_add(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::colwise_add",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::colwise_add",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::colwise_add",2,"SimpleEigen::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_colwise_add",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_colwise_add",2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  (arg1)->colwise_add(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_colwise_sub(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::colwise_sub",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::colwise_sub",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::colwise_sub",2,"SimpleEigen::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_colwise_sub",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_colwise_sub",2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  (arg1)->colwise_sub(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_colwise_mul(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::colwise_mul",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::colwise_mul",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::colwise_mul",2,"SimpleEigen::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_colwise_mul",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_colwise_mul",2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  (arg1)->colwise_mul(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_colwise_div(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SimpleEigen::ColVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::colwise_div",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::colwise_div",1,"SimpleEigen::ColMatrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::colwise_div",2,"SimpleEigen::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_colwise_div",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_colwise_div",2,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  (arg1)->colwise_div(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColMatrix_array(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) 0 ;
  SwigValueWrapper< SimpleEigen::EigenCol2DArray< float > > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< float >::array",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< float >::array",1,"SimpleEigen::ColMatrix< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("FloatColMatrix_array",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = ((SimpleEigen::ColMatrix< float > const *)arg1)->array();
  {
    SimpleEigen::EigenCol2DArray< float > * resultptr = new SimpleEigen::EigenCol2DArray< float >((const SimpleEigen::EigenCol2DArray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__EigenCol2DArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatColMatrix(void *obj) {
SimpleEigen::ColMatrix< float > *arg1 = (SimpleEigen::ColMatrix< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatColMatrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatColMatrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatColMatrix_attributes[] = {
    { "matrix", _wrap_FloatColMatrix_matrix_get, _wrap_FloatColMatrix_matrix_set },
    {0,0,0}
};
static swig_lua_method swig_FloatColMatrix_methods[]= {
    { "__call", _wrap_FloatColMatrix___call},
    { "random", _wrap_FloatColMatrix_random},
    { "identity", _wrap_FloatColMatrix_identity},
    { "zero", _wrap_FloatColMatrix_zero},
    { "ones", _wrap_FloatColMatrix_ones},
    { "get", _wrap_FloatColMatrix_get},
    { "set", _wrap_FloatColMatrix_set},
    { "norm", _wrap_FloatColMatrix_norm},
    { "squaredNorm", _wrap_FloatColMatrix_squaredNorm},
    { "all", _wrap_FloatColMatrix_all},
    { "allFinite", _wrap_FloatColMatrix_allFinite},
    { "any", _wrap_FloatColMatrix_any},
    { "count", _wrap_FloatColMatrix_count},
    { "rows", _wrap_FloatColMatrix_rows},
    { "cols", _wrap_FloatColMatrix_cols},
    { "resize", _wrap_FloatColMatrix_resize},
    { "data", _wrap_FloatColMatrix_data},
    { "__getitem", _wrap_FloatColMatrix___getitem},
    { "__setitem", _wrap_FloatColMatrix___setitem},
    { "normalize", _wrap_FloatColMatrix_normalize},
    { "normalized", _wrap_FloatColMatrix_normalized},
    { "fill", _wrap_FloatColMatrix_fill},
    { "eval", _wrap_FloatColMatrix_eval},
    { "hasNaN", _wrap_FloatColMatrix_hasNaN},
    { "innerSize", _wrap_FloatColMatrix_innerSize},
    { "outerSize", _wrap_FloatColMatrix_outerSize},
    { "isMuchSmallerThan", _wrap_FloatColMatrix_isMuchSmallerThan},
    { "isOnes", _wrap_FloatColMatrix_isOnes},
    { "isZero", _wrap_FloatColMatrix_isZero},
    { "row_vector", _wrap_FloatColMatrix_row_vector},
    { "row", _wrap_FloatColMatrix_row},
    { "set_row", _wrap_FloatColMatrix_set_row},
    { "set_row_vector", _wrap_FloatColMatrix_set_row_vector},
    { "set_row_matrix", _wrap_FloatColMatrix_set_row_matrix},
    { "col_vector", _wrap_FloatColMatrix_col_vector},
    { "col", _wrap_FloatColMatrix_col},
    { "set_col", _wrap_FloatColMatrix_set_col},
    { "set_col_vector", _wrap_FloatColMatrix_set_col_vector},
    { "set_col_matrix", _wrap_FloatColMatrix_set_col_matrix},
    { "leftCols", _wrap_FloatColMatrix_leftCols},
    { "middleCols", _wrap_FloatColMatrix_middleCols},
    { "rightCols", _wrap_FloatColMatrix_rightCols},
    { "topRows", _wrap_FloatColMatrix_topRows},
    { "middleRows", _wrap_FloatColMatrix_middleRows},
    { "bottomRows", _wrap_FloatColMatrix_bottomRows},
    { "topLeftCorner", _wrap_FloatColMatrix_topLeftCorner},
    { "topRightCorner", _wrap_FloatColMatrix_topRightCorner},
    { "adjoint", _wrap_FloatColMatrix_adjoint},
    { "transpose", _wrap_FloatColMatrix_transpose},
    { "diagonal", _wrap_FloatColMatrix_diagonal},
    { "reverse", _wrap_FloatColMatrix_reverse},
    { "replicate", _wrap_FloatColMatrix_replicate},
    { "adjointInPlace", _wrap_FloatColMatrix_adjointInPlace},
    { "transposeInPlace", _wrap_FloatColMatrix_transposeInPlace},
    { "reverseInPlace", _wrap_FloatColMatrix_reverseInPlace},
    { "adjointInto", _wrap_FloatColMatrix_adjointInto},
    { "transposeInto", _wrap_FloatColMatrix_transposeInto},
    { "diagonalInto", _wrap_FloatColMatrix_diagonalInto},
    { "reverseInto", _wrap_FloatColMatrix_reverseInto},
    { "replicateInto", _wrap_FloatColMatrix_replicateInto},
    { "sum", _wrap_FloatColMatrix_sum},
    { "prod", _wrap_FloatColMatrix_prod},
    { "mean", _wrap_FloatColMatrix_mean},
    { "minCoeff", _wrap_FloatColMatrix_minCoeff},
    { "maxCoeff", _wrap_FloatColMatrix_maxCoeff},
    { "trace", _wrap_FloatColMatrix_trace},
    { "addToEachRow", _wrap_FloatColMatrix_addToEachRow},
    { "cwiseAbs", _wrap_FloatColMatrix_cwiseAbs},
    { "cwiseAbs2", _wrap_FloatColMatrix_cwiseAbs2},
    { "cwiseProduct", _wrap_FloatColMatrix_cwiseProduct},
    { "cwiseQuotient", _wrap_FloatColMatrix_cwiseQuotient},
    { "cwiseInverse", _wrap_FloatColMatrix_cwiseInverse},
    { "cwiseSqrt", _wrap_FloatColMatrix_cwiseSqrt},
    { "cwiseMax", _wrap_FloatColMatrix_cwiseMax},
    { "cwiseMin", _wrap_FloatColMatrix_cwiseMin},
    { "__eq", _wrap_FloatColMatrix___eq},
    { "__unm", _wrap_FloatColMatrix___unm},
    { "__add", _wrap_FloatColMatrix___add},
    { "__sub", _wrap_FloatColMatrix___sub},
    { "__mul", _wrap_FloatColMatrix___mul},
    { "__div", _wrap_FloatColMatrix___div},
    { "print", _wrap_FloatColMatrix_print},
    { "t", _wrap_FloatColMatrix_t},
    { "slice", _wrap_FloatColMatrix_slice},
    { "sliceN1", _wrap_FloatColMatrix_sliceN1},
    { "sliceN2", _wrap_FloatColMatrix_sliceN2},
    { "slicen", _wrap_FloatColMatrix_slicen},
    { "rowwise_add", _wrap_FloatColMatrix_rowwise_add},
    { "rowwise_sub", _wrap_FloatColMatrix_rowwise_sub},
    { "rowwise_mul", _wrap_FloatColMatrix_rowwise_mul},
    { "rowwise_div", _wrap_FloatColMatrix_rowwise_div},
    { "colwise_add", _wrap_FloatColMatrix_colwise_add},
    { "colwise_sub", _wrap_FloatColMatrix_colwise_sub},
    { "colwise_mul", _wrap_FloatColMatrix_colwise_mul},
    { "colwise_div", _wrap_FloatColMatrix_colwise_div},
    { "array", _wrap_FloatColMatrix_array},
    {0,0}
};
static swig_lua_method swig_FloatColMatrix_meta[] = {
    { "__call", _wrap_FloatColMatrix___call},
    { "__getitem", _wrap_FloatColMatrix___getitem},
    { "__setitem", _wrap_FloatColMatrix___setitem},
    { "__eq", _wrap_FloatColMatrix___eq},
    { "__unm", _wrap_FloatColMatrix___unm},
    { "__add", _wrap_FloatColMatrix___add},
    { "__sub", _wrap_FloatColMatrix___sub},
    { "__mul", _wrap_FloatColMatrix___mul},
    { "__div", _wrap_FloatColMatrix___div},
    {0,0}
};

static swig_lua_attribute swig_FloatColMatrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatColMatrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatColMatrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatColMatrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatColMatrix_Sf_SwigStatic = {
    "FloatColMatrix",
    swig_FloatColMatrix_Sf_SwigStatic_methods,
    swig_FloatColMatrix_Sf_SwigStatic_attributes,
    swig_FloatColMatrix_Sf_SwigStatic_constants,
    swig_FloatColMatrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatColMatrix_bases[] = {0};
static const char *swig_FloatColMatrix_base_names[] = {0};
static swig_lua_class _wrap_class_FloatColMatrix = { "FloatColMatrix", "FloatColMatrix", &SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,_proxy__wrap_new_FloatColMatrix, swig_delete_FloatColMatrix, swig_FloatColMatrix_methods, swig_FloatColMatrix_attributes, &swig_FloatColMatrix_Sf_SwigStatic, swig_FloatColMatrix_meta, swig_FloatColMatrix_bases, swig_FloatColMatrix_base_names };

static int _wrap_DoubleColMatrix_matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::EigenColMatrix< double > *arg2 = (SimpleEigen::EigenColMatrix< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::matrix",1,"SimpleEigen::ColMatrix< double > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::matrix",2,"SimpleEigen::EigenColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_matrix_set",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__EigenColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_matrix_set",2,SWIGTYPE_p_SimpleEigen__EigenColMatrixT_double_t);
  }
  
  if (arg1) (arg1)->matrix = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::EigenColMatrix< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::matrix",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_matrix_get",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (SimpleEigen::EigenColMatrix< double > *)& ((arg1)->matrix);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__EigenColMatrixT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleColMatrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::ColMatrix",0,0)
  result = (SimpleEigen::ColMatrix< double > *)new SimpleEigen::ColMatrix< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleColMatrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  SimpleEigen::ColMatrix< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::ColMatrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::ColMatrix",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::ColMatrix",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (SimpleEigen::ColMatrix< double > *)new SimpleEigen::ColMatrix< double >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleColMatrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  SimpleEigen::ColMatrix< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::ColMatrix",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::ColMatrix",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::ColMatrix",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::ColMatrix",3,"double const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  result = (SimpleEigen::ColMatrix< double > *)new SimpleEigen::ColMatrix< double >(arg1,arg2,(double const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleColMatrix__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< double > *arg1 = 0 ;
  SimpleEigen::ColMatrix< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::ColMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::ColMatrix",1,"SimpleEigen::RowVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("new_DoubleColMatrix",1,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  result = (SimpleEigen::ColMatrix< double > *)new SimpleEigen::ColMatrix< double >((SimpleEigen::RowVector< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleColMatrix__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< double > *arg1 = 0 ;
  SimpleEigen::ColMatrix< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::ColMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::ColMatrix",1,"SimpleEigen::ColVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("new_DoubleColMatrix",1,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  result = (SimpleEigen::ColMatrix< double > *)new SimpleEigen::ColMatrix< double >((SimpleEigen::ColVector< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleColMatrix__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = 0 ;
  SimpleEigen::ColMatrix< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::ColMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::ColMatrix",1,"SimpleEigen::ColMatrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("new_DoubleColMatrix",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (SimpleEigen::ColMatrix< double > *)new SimpleEigen::ColMatrix< double >((SimpleEigen::ColMatrix< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleColMatrix__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::EigenColMatrix< double > *arg1 = 0 ;
  SimpleEigen::ColMatrix< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::ColMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::ColMatrix",1,"SimpleEigen::EigenColMatrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__EigenColMatrixT_double_t,0))){
    SWIG_fail_ptr("new_DoubleColMatrix",1,SWIGTYPE_p_SimpleEigen__EigenColMatrixT_double_t);
  }
  
  result = (SimpleEigen::ColMatrix< double > *)new SimpleEigen::ColMatrix< double >((SimpleEigen::EigenColMatrix< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleColMatrix__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  Eigen::Matrix< double,1,Eigen::Dynamic > *arg1 = 0 ;
  SimpleEigen::ColMatrix< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::ColMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::ColMatrix",1,"Eigen::Matrix< double,1,Eigen::Dynamic > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Eigen__MatrixT_double_1_Eigen__Dynamic_t,0))){
    SWIG_fail_ptr("new_DoubleColMatrix",1,SWIGTYPE_p_Eigen__MatrixT_double_1_Eigen__Dynamic_t);
  }
  
  result = (SimpleEigen::ColMatrix< double > *)new SimpleEigen::ColMatrix< double >((Eigen::Matrix< double,1,Eigen::Dynamic > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleColMatrix__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  Eigen::Matrix< double,Eigen::Dynamic,1 > *arg1 = 0 ;
  SimpleEigen::ColMatrix< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::ColMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::ColMatrix",1,"Eigen::Matrix< double,Eigen::Dynamic,1 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_1_t,0))){
    SWIG_fail_ptr("new_DoubleColMatrix",1,SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_1_t);
  }
  
  result = (SimpleEigen::ColMatrix< double > *)new SimpleEigen::ColMatrix< double >((Eigen::Matrix< double,Eigen::Dynamic,1 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleColMatrix__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  Eigen::Array< double,Eigen::Dynamic,Eigen::Dynamic > *arg1 = 0 ;
  SimpleEigen::ColMatrix< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::ColMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::ColMatrix",1,"Eigen::Array< double,Eigen::Dynamic,Eigen::Dynamic > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Eigen__ArrayT_double_Eigen__Dynamic_Eigen__Dynamic_t,0))){
    SWIG_fail_ptr("new_DoubleColMatrix",1,SWIGTYPE_p_Eigen__ArrayT_double_Eigen__Dynamic_Eigen__Dynamic_t);
  }
  
  result = (SimpleEigen::ColMatrix< double > *)new SimpleEigen::ColMatrix< double >((Eigen::Array< double,Eigen::Dynamic,Eigen::Dynamic > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleColMatrix__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SimpleEigen::ColMatrix< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::ColMatrix",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::ColMatrix",1,"std::vector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::ColMatrix",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::ColMatrix",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("new_DoubleColMatrix",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (SimpleEigen::ColMatrix< double > *)new SimpleEigen::ColMatrix< double >((std::vector< double > const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleColMatrix(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DoubleColMatrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleColMatrix__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleColMatrix__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleColMatrix__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__EigenColMatrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleColMatrix__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Eigen__MatrixT_double_1_Eigen__Dynamic_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleColMatrix__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_1_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleColMatrix__SWIG_8(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Eigen__ArrayT_double_Eigen__Dynamic_Eigen__Dynamic_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleColMatrix__SWIG_9(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_DoubleColMatrix__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_DoubleColMatrix__SWIG_10(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_DoubleColMatrix__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DoubleColMatrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColMatrix< double >::ColMatrix()\n"
    "    SimpleEigen::ColMatrix< double >::ColMatrix(int,int)\n"
    "    SimpleEigen::ColMatrix< double >::ColMatrix(int,int,double const &)\n"
    "    SimpleEigen::ColMatrix< double >::ColMatrix(SimpleEigen::RowVector< double > const &)\n"
    "    SimpleEigen::ColMatrix< double >::ColMatrix(SimpleEigen::ColVector< double > const &)\n"
    "    SimpleEigen::ColMatrix< double >::ColMatrix(SimpleEigen::ColMatrix< double > const &)\n"
    "    SimpleEigen::ColMatrix< double >::ColMatrix(SimpleEigen::EigenColMatrix< double > const &)\n"
    "    SimpleEigen::ColMatrix< double >::ColMatrix(Eigen::Matrix< double,1,Eigen::Dynamic > const &)\n"
    "    SimpleEigen::ColMatrix< double >::ColMatrix(Eigen::Matrix< double,Eigen::Dynamic,1 > const &)\n"
    "    SimpleEigen::ColMatrix< double >::ColMatrix(Eigen::Array< double,Eigen::Dynamic,Eigen::Dynamic > const &)\n"
    "    SimpleEigen::ColMatrix< double >::ColMatrix(std::vector< double > const &,size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleColMatrix___call(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator ()",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___call",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (double *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_random__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::random",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::random",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::random",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::random",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_random",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->random(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_random__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::random",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::random",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_random",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  (arg1)->random();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_random(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DoubleColMatrix_random__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DoubleColMatrix_random__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleColMatrix_random'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColMatrix< double >::random(int,int)\n"
    "    SimpleEigen::ColMatrix< double >::random()\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleColMatrix_identity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::identity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::identity",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::identity",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::identity",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_identity",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->identity(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_identity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::identity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::identity",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_identity",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  (arg1)->identity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_identity(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DoubleColMatrix_identity__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DoubleColMatrix_identity__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleColMatrix_identity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColMatrix< double >::identity(int,int)\n"
    "    SimpleEigen::ColMatrix< double >::identity()\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleColMatrix_zero__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::zero",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::zero",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::zero",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::zero",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_zero",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->zero(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_zero__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::zero",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_zero",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  (arg1)->zero();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_zero(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DoubleColMatrix_zero__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DoubleColMatrix_zero__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleColMatrix_zero'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColMatrix< double >::zero(int,int)\n"
    "    SimpleEigen::ColMatrix< double >::zero()\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleColMatrix_ones__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::ones",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::ones",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::ones",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::ones",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_ones",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->ones(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_ones__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::ones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::ones",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_ones",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  (arg1)->ones();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_ones(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DoubleColMatrix_ones__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DoubleColMatrix_ones__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleColMatrix_ones'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColMatrix< double >::ones(int,int)\n"
    "    SimpleEigen::ColMatrix< double >::ones()\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleColMatrix_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::get",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::get",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::get",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_get",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (double)(arg1)->get(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::set",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::set",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::set",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::set",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_set",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_norm(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::norm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::norm",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_norm",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (double)(arg1)->norm();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_squaredNorm(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::squaredNorm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::squaredNorm",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_squaredNorm",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (double)(arg1)->squaredNorm();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_all(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::all",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::all",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_all",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (bool)(arg1)->all();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_allFinite(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::allFinite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::allFinite",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_allFinite",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (bool)(arg1)->allFinite();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_any(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::any",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::any",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_any",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (bool)(arg1)->any();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_count(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::count",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::count",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_count",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (bool)(arg1)->count();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_rows(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::rows",1,"SimpleEigen::ColMatrix< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_rows",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = ((SimpleEigen::ColMatrix< double > const *)arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_cols(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::cols",1,"SimpleEigen::ColMatrix< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_cols",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = ((SimpleEigen::ColMatrix< double > const *)arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_resize(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::resize",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::resize",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::resize",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_resize",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_data(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::data",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_data",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (double *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix___getitem(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  int arg2 ;
  SwigValueWrapper< SimpleEigen::ColMatrixView< double > > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::__getitem",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::__getitem",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___getitem",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (arg1)->__getitem(arg2);
  {
    SimpleEigen::ColMatrixView< double > * resultptr = new SimpleEigen::ColMatrixView< double >((const SimpleEigen::ColMatrixView< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixViewT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix___setitem(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  int arg2 ;
  SimpleEigen::RowVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::__setitem",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::__setitem",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::__setitem",3,"SimpleEigen::RowVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___setitem",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___setitem",3,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  (arg1)->__setitem(arg2,(SimpleEigen::RowVector< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_normalize(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::normalize",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_normalize",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_normalized(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::normalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::normalized",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_normalized",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (arg1)->normalized();
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_fill(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::fill",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::fill",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_fill",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_eval(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::eval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::eval",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_eval",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (arg1)->eval();
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_hasNaN(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::hasNaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::hasNaN",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_hasNaN",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (bool)(arg1)->hasNaN();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_innerSize(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::innerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::innerSize",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_innerSize",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (arg1)->innerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_outerSize(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::outerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::outerSize",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_outerSize",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (arg1)->outerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_isMuchSmallerThan(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::isMuchSmallerThan",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::isMuchSmallerThan",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::isMuchSmallerThan",2,"SimpleEigen::ColMatrix< double > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::isMuchSmallerThan",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_isMuchSmallerThan",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_isMuchSmallerThan",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->isMuchSmallerThan((SimpleEigen::ColMatrix< double > const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_isOnes(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::isOnes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::isOnes",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_isOnes",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (bool)(arg1)->isOnes();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_isZero(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::isZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::isZero",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_isZero",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (bool)(arg1)->isZero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_row_vector(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  size_t arg2 ;
  SimpleEigen::RowVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::row_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::row_vector",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::row_vector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_row_vector",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->row_vector(arg2);
  {
    SimpleEigen::RowVector< double > * resultptr = new SimpleEigen::RowVector< double >((const SimpleEigen::RowVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_row(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  size_t arg2 ;
  SimpleEigen::RowVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::row",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_row",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->row(arg2);
  {
    SimpleEigen::RowVector< double > * resultptr = new SimpleEigen::RowVector< double >((const SimpleEigen::RowVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_set_row(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  size_t arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::set_row",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::set_row",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::set_row",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::set_row",3,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_set_row",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_set_row",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->set_row(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_set_row_vector(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  size_t arg2 ;
  SimpleEigen::RowVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::set_row_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::set_row_vector",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::set_row_vector",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::set_row_vector",3,"SimpleEigen::RowVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_set_row_vector",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_set_row_vector",3,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  (arg1)->set_row_vector(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_set_row_matrix(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  size_t arg2 ;
  SimpleEigen::ColMatrix< double > *arg3 = 0 ;
  size_t arg4 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::set_row_matrix",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::set_row_matrix",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::set_row_matrix",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::set_row_matrix",3,"SimpleEigen::ColMatrix< double > &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::set_row_matrix",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_set_row_matrix",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_set_row_matrix",3,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  (arg1)->set_row_matrix(arg2,*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_col_vector(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  size_t arg2 ;
  SimpleEigen::ColVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::col_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::col_vector",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::col_vector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_col_vector",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->col_vector(arg2);
  {
    SimpleEigen::ColVector< double > * resultptr = new SimpleEigen::ColVector< double >((const SimpleEigen::ColVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_col(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  size_t arg2 ;
  SimpleEigen::ColVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::col",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::col",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::col",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_col",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->col(arg2);
  {
    SimpleEigen::ColVector< double > * resultptr = new SimpleEigen::ColVector< double >((const SimpleEigen::ColVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_set_col(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  size_t arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::set_col",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::set_col",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::set_col",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::set_col",3,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_set_col",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_set_col",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->set_col(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_set_col_vector(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  size_t arg2 ;
  SimpleEigen::ColVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::set_col_vector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::set_col_vector",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::set_col_vector",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::set_col_vector",3,"SimpleEigen::ColVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_set_col_vector",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_set_col_vector",3,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  (arg1)->set_col_vector(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_set_col_matrix(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  size_t arg2 ;
  SimpleEigen::ColMatrix< double > *arg3 = 0 ;
  size_t arg4 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::set_col_matrix",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::set_col_matrix",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::set_col_matrix",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::set_col_matrix",3,"SimpleEigen::ColMatrix< double > &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::set_col_matrix",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_set_col_matrix",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_set_col_matrix",3,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  (arg1)->set_col_matrix(arg2,*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_leftCols(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > *arg2 = 0 ;
  size_t arg3 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::leftCols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::leftCols",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::leftCols",2,"SimpleEigen::ColMatrix< double > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::leftCols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_leftCols",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_leftCols",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->leftCols(*arg2,arg3);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_middleCols(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::middleCols",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::middleCols",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::middleCols",2,"SimpleEigen::ColMatrix< double > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::middleCols",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::middleCols",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_middleCols",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_middleCols",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->middleCols(*arg2,arg3,arg4);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_rightCols(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > *arg2 = 0 ;
  size_t arg3 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::rightCols",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::rightCols",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::rightCols",2,"SimpleEigen::ColMatrix< double > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::rightCols",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_rightCols",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_rightCols",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->rightCols(*arg2,arg3);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_topRows(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > *arg2 = 0 ;
  size_t arg3 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::topRows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::topRows",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::topRows",2,"SimpleEigen::ColMatrix< double > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::topRows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_topRows",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_topRows",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->topRows(*arg2,arg3);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_middleRows(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::middleRows",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::middleRows",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::middleRows",2,"SimpleEigen::ColMatrix< double > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::middleRows",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::middleRows",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_middleRows",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_middleRows",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->middleRows(*arg2,arg3,arg4);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_bottomRows(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > *arg2 = 0 ;
  size_t arg3 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::bottomRows",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::bottomRows",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::bottomRows",2,"SimpleEigen::ColMatrix< double > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::bottomRows",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_bottomRows",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_bottomRows",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->bottomRows(*arg2,arg3);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_topLeftCorner(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::topLeftCorner",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::topLeftCorner",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::topLeftCorner",2,"SimpleEigen::ColMatrix< double > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::topLeftCorner",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::topLeftCorner",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_topLeftCorner",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_topLeftCorner",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->topLeftCorner(*arg2,arg3,arg4);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_topRightCorner(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::topRightCorner",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::topRightCorner",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::topRightCorner",2,"SimpleEigen::ColMatrix< double > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::topRightCorner",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::topRightCorner",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_topRightCorner",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_topRightCorner",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->topRightCorner(*arg2,arg3,arg4);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_adjoint(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::adjoint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::adjoint",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_adjoint",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (arg1)->adjoint();
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_transpose(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::transpose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::transpose",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_transpose",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (arg1)->transpose();
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_diagonal(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::diagonal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::diagonal",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_diagonal",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (arg1)->diagonal();
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_reverse(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::reverse",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_reverse",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (arg1)->reverse();
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_replicate(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::replicate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::replicate",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::replicate",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::replicate",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_replicate",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->replicate(arg2,arg3);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_adjointInPlace(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::adjointInPlace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::adjointInPlace",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_adjointInPlace",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  (arg1)->adjointInPlace();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_transposeInPlace(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::transposeInPlace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::transposeInPlace",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_transposeInPlace",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  (arg1)->transposeInPlace();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_reverseInPlace(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::reverseInPlace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::reverseInPlace",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_reverseInPlace",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  (arg1)->reverseInPlace();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_adjointInto(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > *arg2 = 0 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::adjointInto",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::adjointInto",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::adjointInto",2,"SimpleEigen::ColMatrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_adjointInto",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_adjointInto",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (arg1)->adjointInto(*arg2);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_transposeInto(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > *arg2 = 0 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::transposeInto",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::transposeInto",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::transposeInto",2,"SimpleEigen::ColMatrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_transposeInto",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_transposeInto",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (arg1)->transposeInto(*arg2);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_diagonalInto(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > *arg2 = 0 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::diagonalInto",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::diagonalInto",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::diagonalInto",2,"SimpleEigen::ColMatrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_diagonalInto",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_diagonalInto",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (arg1)->diagonalInto(*arg2);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_reverseInto(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > *arg2 = 0 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::reverseInto",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::reverseInto",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::reverseInto",2,"SimpleEigen::ColMatrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_reverseInto",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_reverseInto",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (arg1)->reverseInto(*arg2);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_replicateInto(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::replicateInto",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::replicateInto",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::replicateInto",2,"SimpleEigen::ColMatrix< double > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::replicateInto",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::replicateInto",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_replicateInto",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_replicateInto",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->replicateInto(*arg2,arg3,arg4);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_sum(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::sum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::sum",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_sum",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (double)(arg1)->sum();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_prod(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::prod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::prod",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_prod",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (double)(arg1)->prod();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_mean(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::mean",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::mean",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_mean",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (double)(arg1)->mean();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_minCoeff(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::minCoeff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::minCoeff",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_minCoeff",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (double)(arg1)->minCoeff();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_maxCoeff(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::maxCoeff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::maxCoeff",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_maxCoeff",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (double)(arg1)->maxCoeff();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_trace(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::trace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::trace",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_trace",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (double)(arg1)->trace();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_addToEachRow(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > *arg2 = 0 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::addToEachRow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::addToEachRow",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::addToEachRow",2,"SimpleEigen::ColMatrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_addToEachRow",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_addToEachRow",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (arg1)->addToEachRow(*arg2);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_cwiseAbs(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::cwiseAbs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::cwiseAbs",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_cwiseAbs",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (arg1)->cwiseAbs();
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_cwiseAbs2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::cwiseAbs2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::cwiseAbs2",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_cwiseAbs2",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (arg1)->cwiseAbs2();
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_cwiseProduct(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > *arg2 = 0 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::cwiseProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::cwiseProduct",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::cwiseProduct",2,"SimpleEigen::ColMatrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_cwiseProduct",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_cwiseProduct",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (arg1)->cwiseProduct((SimpleEigen::ColMatrix< double > const &)*arg2);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_cwiseQuotient(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > *arg2 = 0 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::cwiseQuotient",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::cwiseQuotient",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::cwiseQuotient",2,"SimpleEigen::ColMatrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_cwiseQuotient",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_cwiseQuotient",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (arg1)->cwiseQuotient((SimpleEigen::ColMatrix< double > const &)*arg2);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_cwiseInverse(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::cwiseInverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::cwiseInverse",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_cwiseInverse",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (arg1)->cwiseInverse();
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_cwiseSqrt(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::cwiseSqrt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::cwiseSqrt",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_cwiseSqrt",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (arg1)->cwiseSqrt();
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_cwiseMax(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > *arg2 = 0 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::cwiseMax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::cwiseMax",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::cwiseMax",2,"SimpleEigen::ColMatrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_cwiseMax",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_cwiseMax",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (arg1)->cwiseMax(*arg2);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_cwiseMin(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > *arg2 = 0 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::cwiseMin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::cwiseMin",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::cwiseMin",2,"SimpleEigen::ColMatrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_cwiseMin",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_cwiseMin",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (arg1)->cwiseMin(*arg2);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix___eq(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator ==",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator ==",2,"SimpleEigen::ColMatrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___eq",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___eq",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (bool)(arg1)->operator ==((SimpleEigen::ColMatrix< double > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > *arg2 = 0 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator *",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator *",2,"SimpleEigen::ColMatrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___mul",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___mul",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::ColMatrix< double > const &)*arg2);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > *arg2 = 0 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator +",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator +",2,"SimpleEigen::ColMatrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___add",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___add",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::ColMatrix< double > const &)*arg2);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > *arg2 = 0 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator -",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator -",2,"SimpleEigen::ColMatrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___sub",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___sub",2,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::ColMatrix< double > const &)*arg2);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::Scalar< double > *arg2 = 0 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator *",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator *",2,"SimpleEigen::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___mul",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___mul",2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::Scalar< double > const &)*arg2);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::Scalar< double > *arg2 = 0 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator +",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator +",2,"SimpleEigen::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___add",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___add",2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::Scalar< double > const &)*arg2);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::Scalar< double > *arg2 = 0 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator -",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator -",2,"SimpleEigen::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___sub",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___sub",2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::Scalar< double > const &)*arg2);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::Scalar< double > *arg2 = 0 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator /",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator /",2,"SimpleEigen::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___div",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___div",2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::Scalar< double > const &)*arg2);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix___unm(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator -",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___unm",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (arg1)->operator -();
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::RowVector< double > *arg2 = 0 ;
  SimpleEigen::RowVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator *",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator *",2,"SimpleEigen::RowVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___mul",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___mul",2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::RowVector< double > const &)*arg2);
  {
    SimpleEigen::RowVector< double > * resultptr = new SimpleEigen::RowVector< double >((const SimpleEigen::RowVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::RowVector< double > *arg2 = 0 ;
  SimpleEigen::RowVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator +",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator +",2,"SimpleEigen::RowVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___add",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___add",2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::RowVector< double > const &)*arg2);
  {
    SimpleEigen::RowVector< double > * resultptr = new SimpleEigen::RowVector< double >((const SimpleEigen::RowVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::RowVector< double > *arg2 = 0 ;
  SimpleEigen::RowVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator -",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator -",2,"SimpleEigen::RowVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___sub",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___sub",2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::RowVector< double > const &)*arg2);
  {
    SimpleEigen::RowVector< double > * resultptr = new SimpleEigen::RowVector< double >((const SimpleEigen::RowVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix___mul__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColVector< double > *arg2 = 0 ;
  SimpleEigen::ColVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator *",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator *",2,"SimpleEigen::ColVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___mul",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___mul",2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::ColVector< double > const &)*arg2);
  {
    SimpleEigen::ColVector< double > * resultptr = new SimpleEigen::ColVector< double >((const SimpleEigen::ColVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix___add__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColVector< double > *arg2 = 0 ;
  SimpleEigen::ColVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator +",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator +",2,"SimpleEigen::ColVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___add",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___add",2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::ColVector< double > const &)*arg2);
  {
    SimpleEigen::ColVector< double > * resultptr = new SimpleEigen::ColVector< double >((const SimpleEigen::ColVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleColMatrix___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleColMatrix___add__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleColMatrix___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleColMatrix___add__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleColMatrix___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColMatrix< double >::operator +(SimpleEigen::ColMatrix< double > const &)\n"
    "    SimpleEigen::ColMatrix< double >::operator +(SimpleEigen::Scalar< double > const &)\n"
    "    SimpleEigen::ColMatrix< double >::operator +(SimpleEigen::RowVector< double > const &)\n"
    "    SimpleEigen::ColMatrix< double >::operator +(SimpleEigen::ColVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleColMatrix___sub__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColVector< double > *arg2 = 0 ;
  SimpleEigen::ColVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator -",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator -",2,"SimpleEigen::ColVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___sub",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___sub",2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::ColVector< double > const &)*arg2);
  {
    SimpleEigen::ColVector< double > * resultptr = new SimpleEigen::ColVector< double >((const SimpleEigen::ColVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleColMatrix___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleColMatrix___sub__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleColMatrix___sub__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleColMatrix___sub__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleColMatrix___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColMatrix< double >::operator -(SimpleEigen::ColMatrix< double > const &)\n"
    "    SimpleEigen::ColMatrix< double >::operator -(SimpleEigen::Scalar< double > const &)\n"
    "    SimpleEigen::ColMatrix< double >::operator -(SimpleEigen::RowVector< double > const &)\n"
    "    SimpleEigen::ColMatrix< double >::operator -(SimpleEigen::ColVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleColMatrix___mul__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  double arg2 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator *",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator *",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___mul",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = (arg1)->operator *(arg2);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleColMatrix___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleColMatrix___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleColMatrix___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleColMatrix___mul__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleColMatrix___mul__SWIG_4(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleColMatrix___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColMatrix< double >::operator *(SimpleEigen::ColMatrix< double > const &)\n"
    "    SimpleEigen::ColMatrix< double >::operator *(SimpleEigen::Scalar< double > const &)\n"
    "    SimpleEigen::ColMatrix< double >::operator *(SimpleEigen::RowVector< double > const &)\n"
    "    SimpleEigen::ColMatrix< double >::operator *(SimpleEigen::ColVector< double > const &)\n"
    "    SimpleEigen::ColMatrix< double >::operator *(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleColMatrix___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  double arg2 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator /",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::operator /",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix___div",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = (arg1)->operator /(arg2);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleColMatrix___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleColMatrix___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleColMatrix___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColMatrix< double >::operator /(SimpleEigen::Scalar< double > const &)\n"
    "    SimpleEigen::ColMatrix< double >::operator /(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleColMatrix_print(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::print",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_print",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_t(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::t",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::t",1,"SimpleEigen::ColMatrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_t",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = (arg1)->t();
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_slice__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::slice",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::slice",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::slice",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::slice",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::slice",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::slice",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_slice",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (arg1)->slice(arg2,arg3,arg4,arg5);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_slice__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::slice",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::slice",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::slice",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::slice",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::slice",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_slice",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->slice(arg2,arg3,arg4);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_slice__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::slice",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::slice",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::slice",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::slice",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_slice",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (arg1)->slice(arg2,arg3);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_slice(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DoubleColMatrix_slice__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_DoubleColMatrix_slice__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_DoubleColMatrix_slice__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleColMatrix_slice'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColMatrix< double >::slice(int,int,int,int)\n"
    "    SimpleEigen::ColMatrix< double >::slice(int,int,int)\n"
    "    SimpleEigen::ColMatrix< double >::slice(int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleColMatrix_sliceN1__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::sliceN1",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::sliceN1",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::sliceN1",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::sliceN1",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::sliceN1",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::sliceN1",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_sliceN1",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (arg1)->sliceN1(arg2,arg3,arg4,arg5);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_sliceN1__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::sliceN1",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::sliceN1",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::sliceN1",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::sliceN1",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::sliceN1",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_sliceN1",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->sliceN1(arg2,arg3,arg4);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_sliceN1(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_DoubleColMatrix_sliceN1__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_DoubleColMatrix_sliceN1__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleColMatrix_sliceN1'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColMatrix< double >::sliceN1(int,int,int,int)\n"
    "    SimpleEigen::ColMatrix< double >::sliceN1(int,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleColMatrix_sliceN2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::sliceN2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::sliceN2",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::sliceN2",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::sliceN2",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::sliceN2",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::sliceN2",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_sliceN2",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (arg1)->sliceN2(arg2,arg3,arg4,arg5);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_sliceN2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::sliceN2",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::sliceN2",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::sliceN2",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::sliceN2",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::sliceN2",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_sliceN2",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->sliceN2(arg2,arg3,arg4);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_sliceN2(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_DoubleColMatrix_sliceN2__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_DoubleColMatrix_sliceN2__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleColMatrix_sliceN2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ColMatrix< double >::sliceN2(int,int,int,int)\n"
    "    SimpleEigen::ColMatrix< double >::sliceN2(int,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleColMatrix_slicen(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  SimpleEigen::ColMatrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::slicen",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::slicen",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::slicen",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::slicen",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::slicen",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::slicen",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_slicen",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (arg1)->slicen(arg2,arg3,arg4,arg5);
  {
    SimpleEigen::ColMatrix< double > * resultptr = new SimpleEigen::ColMatrix< double >((const SimpleEigen::ColMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_rowwise_add(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::RowVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::rowwise_add",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::rowwise_add",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::rowwise_add",2,"SimpleEigen::RowVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_rowwise_add",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_rowwise_add",2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  (arg1)->rowwise_add(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_rowwise_sub(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::RowVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::rowwise_sub",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::rowwise_sub",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::rowwise_sub",2,"SimpleEigen::RowVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_rowwise_sub",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_rowwise_sub",2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  (arg1)->rowwise_sub(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_rowwise_mul(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::RowVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::rowwise_mul",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::rowwise_mul",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::rowwise_mul",2,"SimpleEigen::RowVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_rowwise_mul",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_rowwise_mul",2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  (arg1)->rowwise_mul(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_rowwise_div(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::RowVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::rowwise_div",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::rowwise_div",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::rowwise_div",2,"SimpleEigen::RowVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_rowwise_div",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_rowwise_div",2,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t);
  }
  
  (arg1)->rowwise_div(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_colwise_add(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::colwise_add",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::colwise_add",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::colwise_add",2,"SimpleEigen::ColVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_colwise_add",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_colwise_add",2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  (arg1)->colwise_add(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_colwise_sub(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::colwise_sub",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::colwise_sub",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::colwise_sub",2,"SimpleEigen::ColVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_colwise_sub",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_colwise_sub",2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  (arg1)->colwise_sub(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_colwise_mul(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::colwise_mul",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::colwise_mul",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::colwise_mul",2,"SimpleEigen::ColVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_colwise_mul",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_colwise_mul",2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  (arg1)->colwise_mul(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_colwise_div(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SimpleEigen::ColVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::colwise_div",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::colwise_div",1,"SimpleEigen::ColMatrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::colwise_div",2,"SimpleEigen::ColVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_colwise_div",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_colwise_div",2,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t);
  }
  
  (arg1)->colwise_div(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleColMatrix_array(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) 0 ;
  SwigValueWrapper< SimpleEigen::EigenCol2DArray< double > > result;
  
  SWIG_check_num_args("SimpleEigen::ColMatrix< double >::array",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::ColMatrix< double >::array",1,"SimpleEigen::ColMatrix< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleColMatrix_array",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t);
  }
  
  result = ((SimpleEigen::ColMatrix< double > const *)arg1)->array();
  {
    SimpleEigen::EigenCol2DArray< double > * resultptr = new SimpleEigen::EigenCol2DArray< double >((const SimpleEigen::EigenCol2DArray< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__EigenCol2DArrayT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleColMatrix(void *obj) {
SimpleEigen::ColMatrix< double > *arg1 = (SimpleEigen::ColMatrix< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleColMatrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleColMatrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleColMatrix_attributes[] = {
    { "matrix", _wrap_DoubleColMatrix_matrix_get, _wrap_DoubleColMatrix_matrix_set },
    {0,0,0}
};
static swig_lua_method swig_DoubleColMatrix_methods[]= {
    { "__call", _wrap_DoubleColMatrix___call},
    { "random", _wrap_DoubleColMatrix_random},
    { "identity", _wrap_DoubleColMatrix_identity},
    { "zero", _wrap_DoubleColMatrix_zero},
    { "ones", _wrap_DoubleColMatrix_ones},
    { "get", _wrap_DoubleColMatrix_get},
    { "set", _wrap_DoubleColMatrix_set},
    { "norm", _wrap_DoubleColMatrix_norm},
    { "squaredNorm", _wrap_DoubleColMatrix_squaredNorm},
    { "all", _wrap_DoubleColMatrix_all},
    { "allFinite", _wrap_DoubleColMatrix_allFinite},
    { "any", _wrap_DoubleColMatrix_any},
    { "count", _wrap_DoubleColMatrix_count},
    { "rows", _wrap_DoubleColMatrix_rows},
    { "cols", _wrap_DoubleColMatrix_cols},
    { "resize", _wrap_DoubleColMatrix_resize},
    { "data", _wrap_DoubleColMatrix_data},
    { "__getitem", _wrap_DoubleColMatrix___getitem},
    { "__setitem", _wrap_DoubleColMatrix___setitem},
    { "normalize", _wrap_DoubleColMatrix_normalize},
    { "normalized", _wrap_DoubleColMatrix_normalized},
    { "fill", _wrap_DoubleColMatrix_fill},
    { "eval", _wrap_DoubleColMatrix_eval},
    { "hasNaN", _wrap_DoubleColMatrix_hasNaN},
    { "innerSize", _wrap_DoubleColMatrix_innerSize},
    { "outerSize", _wrap_DoubleColMatrix_outerSize},
    { "isMuchSmallerThan", _wrap_DoubleColMatrix_isMuchSmallerThan},
    { "isOnes", _wrap_DoubleColMatrix_isOnes},
    { "isZero", _wrap_DoubleColMatrix_isZero},
    { "row_vector", _wrap_DoubleColMatrix_row_vector},
    { "row", _wrap_DoubleColMatrix_row},
    { "set_row", _wrap_DoubleColMatrix_set_row},
    { "set_row_vector", _wrap_DoubleColMatrix_set_row_vector},
    { "set_row_matrix", _wrap_DoubleColMatrix_set_row_matrix},
    { "col_vector", _wrap_DoubleColMatrix_col_vector},
    { "col", _wrap_DoubleColMatrix_col},
    { "set_col", _wrap_DoubleColMatrix_set_col},
    { "set_col_vector", _wrap_DoubleColMatrix_set_col_vector},
    { "set_col_matrix", _wrap_DoubleColMatrix_set_col_matrix},
    { "leftCols", _wrap_DoubleColMatrix_leftCols},
    { "middleCols", _wrap_DoubleColMatrix_middleCols},
    { "rightCols", _wrap_DoubleColMatrix_rightCols},
    { "topRows", _wrap_DoubleColMatrix_topRows},
    { "middleRows", _wrap_DoubleColMatrix_middleRows},
    { "bottomRows", _wrap_DoubleColMatrix_bottomRows},
    { "topLeftCorner", _wrap_DoubleColMatrix_topLeftCorner},
    { "topRightCorner", _wrap_DoubleColMatrix_topRightCorner},
    { "adjoint", _wrap_DoubleColMatrix_adjoint},
    { "transpose", _wrap_DoubleColMatrix_transpose},
    { "diagonal", _wrap_DoubleColMatrix_diagonal},
    { "reverse", _wrap_DoubleColMatrix_reverse},
    { "replicate", _wrap_DoubleColMatrix_replicate},
    { "adjointInPlace", _wrap_DoubleColMatrix_adjointInPlace},
    { "transposeInPlace", _wrap_DoubleColMatrix_transposeInPlace},
    { "reverseInPlace", _wrap_DoubleColMatrix_reverseInPlace},
    { "adjointInto", _wrap_DoubleColMatrix_adjointInto},
    { "transposeInto", _wrap_DoubleColMatrix_transposeInto},
    { "diagonalInto", _wrap_DoubleColMatrix_diagonalInto},
    { "reverseInto", _wrap_DoubleColMatrix_reverseInto},
    { "replicateInto", _wrap_DoubleColMatrix_replicateInto},
    { "sum", _wrap_DoubleColMatrix_sum},
    { "prod", _wrap_DoubleColMatrix_prod},
    { "mean", _wrap_DoubleColMatrix_mean},
    { "minCoeff", _wrap_DoubleColMatrix_minCoeff},
    { "maxCoeff", _wrap_DoubleColMatrix_maxCoeff},
    { "trace", _wrap_DoubleColMatrix_trace},
    { "addToEachRow", _wrap_DoubleColMatrix_addToEachRow},
    { "cwiseAbs", _wrap_DoubleColMatrix_cwiseAbs},
    { "cwiseAbs2", _wrap_DoubleColMatrix_cwiseAbs2},
    { "cwiseProduct", _wrap_DoubleColMatrix_cwiseProduct},
    { "cwiseQuotient", _wrap_DoubleColMatrix_cwiseQuotient},
    { "cwiseInverse", _wrap_DoubleColMatrix_cwiseInverse},
    { "cwiseSqrt", _wrap_DoubleColMatrix_cwiseSqrt},
    { "cwiseMax", _wrap_DoubleColMatrix_cwiseMax},
    { "cwiseMin", _wrap_DoubleColMatrix_cwiseMin},
    { "__eq", _wrap_DoubleColMatrix___eq},
    { "__unm", _wrap_DoubleColMatrix___unm},
    { "__add", _wrap_DoubleColMatrix___add},
    { "__sub", _wrap_DoubleColMatrix___sub},
    { "__mul", _wrap_DoubleColMatrix___mul},
    { "__div", _wrap_DoubleColMatrix___div},
    { "print", _wrap_DoubleColMatrix_print},
    { "t", _wrap_DoubleColMatrix_t},
    { "slice", _wrap_DoubleColMatrix_slice},
    { "sliceN1", _wrap_DoubleColMatrix_sliceN1},
    { "sliceN2", _wrap_DoubleColMatrix_sliceN2},
    { "slicen", _wrap_DoubleColMatrix_slicen},
    { "rowwise_add", _wrap_DoubleColMatrix_rowwise_add},
    { "rowwise_sub", _wrap_DoubleColMatrix_rowwise_sub},
    { "rowwise_mul", _wrap_DoubleColMatrix_rowwise_mul},
    { "rowwise_div", _wrap_DoubleColMatrix_rowwise_div},
    { "colwise_add", _wrap_DoubleColMatrix_colwise_add},
    { "colwise_sub", _wrap_DoubleColMatrix_colwise_sub},
    { "colwise_mul", _wrap_DoubleColMatrix_colwise_mul},
    { "colwise_div", _wrap_DoubleColMatrix_colwise_div},
    { "array", _wrap_DoubleColMatrix_array},
    {0,0}
};
static swig_lua_method swig_DoubleColMatrix_meta[] = {
    { "__call", _wrap_DoubleColMatrix___call},
    { "__getitem", _wrap_DoubleColMatrix___getitem},
    { "__setitem", _wrap_DoubleColMatrix___setitem},
    { "__eq", _wrap_DoubleColMatrix___eq},
    { "__unm", _wrap_DoubleColMatrix___unm},
    { "__add", _wrap_DoubleColMatrix___add},
    { "__sub", _wrap_DoubleColMatrix___sub},
    { "__mul", _wrap_DoubleColMatrix___mul},
    { "__div", _wrap_DoubleColMatrix___div},
    {0,0}
};

static swig_lua_attribute swig_DoubleColMatrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleColMatrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleColMatrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleColMatrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleColMatrix_Sf_SwigStatic = {
    "DoubleColMatrix",
    swig_DoubleColMatrix_Sf_SwigStatic_methods,
    swig_DoubleColMatrix_Sf_SwigStatic_attributes,
    swig_DoubleColMatrix_Sf_SwigStatic_constants,
    swig_DoubleColMatrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleColMatrix_bases[] = {0};
static const char *swig_DoubleColMatrix_base_names[] = {0};
static swig_lua_class _wrap_class_DoubleColMatrix = { "DoubleColMatrix", "DoubleColMatrix", &SWIGTYPE_p_SimpleEigen__ColMatrixT_double_t,_proxy__wrap_new_DoubleColMatrix, swig_delete_DoubleColMatrix, swig_DoubleColMatrix_methods, swig_DoubleColMatrix_attributes, &swig_DoubleColMatrix_Sf_SwigStatic, swig_DoubleColMatrix_meta, swig_DoubleColMatrix_bases, swig_DoubleColMatrix_base_names };

static int _wrap_FloatArray_array_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = (SimpleEigen::Array< float > *) 0 ;
  SimpleEigen::EigenArray< float > *arg2 = (SimpleEigen::EigenArray< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array< float >::array",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< float >::array",1,"SimpleEigen::Array< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SimpleEigen::Array< float >::array",2,"SimpleEigen::EigenArray< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_array_set",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__EigenArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_array_set",2,SWIGTYPE_p_SimpleEigen__EigenArrayT_float_t);
  }
  
  if (arg1) (arg1)->array = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray_array_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = (SimpleEigen::Array< float > *) 0 ;
  SimpleEigen::EigenArray< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array< float >::array",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< float >::array",1,"SimpleEigen::Array< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_array_get",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = (SimpleEigen::EigenArray< float > *)& ((arg1)->array);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__EigenArrayT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatArray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array< float >::Array",0,0)
  result = (SimpleEigen::Array< float > *)new SimpleEigen::Array< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatArray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SimpleEigen::Array< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array< float >::Array",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::Array< float >::Array",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (SimpleEigen::Array< float > *)new SimpleEigen::Array< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatArray__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float *arg2 = 0 ;
  float temp2 ;
  SimpleEigen::Array< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array< float >::Array",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::Array< float >::Array",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Array< float >::Array",2,"float const &");
  arg1 = (int)lua_tonumber(L, 1);
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (SimpleEigen::Array< float > *)new SimpleEigen::Array< float >(arg1,(float const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatArray__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = 0 ;
  SimpleEigen::Array< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array< float >::Array",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Array< float >::Array",1,"SimpleEigen::Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("new_FloatArray",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = (SimpleEigen::Array< float > *)new SimpleEigen::Array< float >((SimpleEigen::Array< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatArray__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::EigenArray< float > *arg1 = 0 ;
  SimpleEigen::Array< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array< float >::Array",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Array< float >::Array",1,"SimpleEigen::EigenArray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__EigenArrayT_float_t,0))){
    SWIG_fail_ptr("new_FloatArray",1,SWIGTYPE_p_SimpleEigen__EigenArrayT_float_t);
  }
  
  result = (SimpleEigen::Array< float > *)new SimpleEigen::Array< float >((SimpleEigen::EigenArray< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatArray(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FloatArray__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatArray__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__EigenArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatArray__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_FloatArray__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FloatArray__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatArray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Array< float >::Array()\n"
    "    SimpleEigen::Array< float >::Array(int)\n"
    "    SimpleEigen::Array< float >::Array(int,float const &)\n"
    "    SimpleEigen::Array< float >::Array(SimpleEigen::Array< float > const &)\n"
    "    SimpleEigen::Array< float >::Array(SimpleEigen::EigenArray< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatArray___call(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = (SimpleEigen::Array< float > *) 0 ;
  size_t arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array< float >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< float >::operator ()",1,"SimpleEigen::Array< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Array< float >::operator ()",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray___call",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float *) &(arg1)->operator ()(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray___setitem(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = (SimpleEigen::Array< float > *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("SimpleEigen::Array< float >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< float >::__setitem",1,"SimpleEigen::Array< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Array< float >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Array< float >::__setitem",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray___setitem",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray___getitem(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = (SimpleEigen::Array< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("SimpleEigen::Array< float >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< float >::__getitem",1,"SimpleEigen::Array< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Array< float >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray___getitem",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray_size(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = (SimpleEigen::Array< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::Array< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< float >::size",1,"SimpleEigen::Array< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_size",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = ((SimpleEigen::Array< float > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray_random__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = (SimpleEigen::Array< float > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SimpleEigen::Array< float >::random",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< float >::random",1,"SimpleEigen::Array< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Array< float >::random",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_random",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->random(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray_random__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = (SimpleEigen::Array< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array< float >::random",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< float >::random",1,"SimpleEigen::Array< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_random",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  (arg1)->random();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray_random(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatArray_random__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatArray_random__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatArray_random'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Array< float >::random(int)\n"
    "    SimpleEigen::Array< float >::random()\n");
  lua_error(L);return 0;
}


static int _wrap_FloatArray_fill(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = (SimpleEigen::Array< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SimpleEigen::Array< float >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< float >::fill",1,"SimpleEigen::Array< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Array< float >::fill",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_fill",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray_cols(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = (SimpleEigen::Array< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::Array< float >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< float >::cols",1,"SimpleEigen::Array< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_cols",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = ((SimpleEigen::Array< float > const *)arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = (SimpleEigen::Array< float > *) 0 ;
  SimpleEigen::Array< float > *arg2 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::Array< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< float >::operator +",1,"SimpleEigen::Array< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Array< float >::operator +",2,"SimpleEigen::Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray___add",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray___add",2,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::Array< float > const &)*arg2);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = (SimpleEigen::Array< float > *) 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::Array< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< float >::operator +",1,"SimpleEigen::Array< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Array< float >::operator +",2,"SimpleEigen::Scalar< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray___add",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatArray___add",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (arg1)->operator +(*arg2);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatArray___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatArray___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatArray___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Array< float >::operator +(SimpleEigen::Array< float > const &)\n"
    "    SimpleEigen::Array< float >::operator +(SimpleEigen::Scalar< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatArray___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = (SimpleEigen::Array< float > *) 0 ;
  SimpleEigen::Array< float > *arg2 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::Array< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< float >::operator -",1,"SimpleEigen::Array< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Array< float >::operator -",2,"SimpleEigen::Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray___sub",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray___sub",2,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::Array< float > const &)*arg2);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = (SimpleEigen::Array< float > *) 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::Array< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< float >::operator -",1,"SimpleEigen::Array< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Array< float >::operator -",2,"SimpleEigen::Scalar< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray___sub",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatArray___sub",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (arg1)->operator -(*arg2);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatArray___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatArray___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatArray___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Array< float >::operator -(SimpleEigen::Array< float > const &)\n"
    "    SimpleEigen::Array< float >::operator -(SimpleEigen::Scalar< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatArray___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = (SimpleEigen::Array< float > *) 0 ;
  SimpleEigen::Array< float > *arg2 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::Array< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< float >::operator *",1,"SimpleEigen::Array< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Array< float >::operator *",2,"SimpleEigen::Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray___mul",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray___mul",2,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::Array< float > const &)*arg2);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = (SimpleEigen::Array< float > *) 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::Array< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< float >::operator *",1,"SimpleEigen::Array< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Array< float >::operator *",2,"SimpleEigen::Scalar< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray___mul",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatArray___mul",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (arg1)->operator *(*arg2);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatArray___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatArray___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatArray___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Array< float >::operator *(SimpleEigen::Array< float > const &)\n"
    "    SimpleEigen::Array< float >::operator *(SimpleEigen::Scalar< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatArray___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = (SimpleEigen::Array< float > *) 0 ;
  SimpleEigen::Array< float > *arg2 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::Array< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< float >::operator /",1,"SimpleEigen::Array< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Array< float >::operator /",2,"SimpleEigen::Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray___div",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray___div",2,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::Array< float > const &)*arg2);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = (SimpleEigen::Array< float > *) 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::Array< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< float >::operator /",1,"SimpleEigen::Array< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Array< float >::operator /",2,"SimpleEigen::Scalar< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray___div",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatArray___div",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (arg1)->operator /(*arg2);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatArray___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatArray___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatArray___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Array< float >::operator /(SimpleEigen::Array< float > const &)\n"
    "    SimpleEigen::Array< float >::operator /(SimpleEigen::Scalar< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatArray_get_row_vector(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = (SimpleEigen::Array< float > *) 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::Array< float >::get_row_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< float >::get_row_vector",1,"SimpleEigen::Array< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_get_row_vector",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = (arg1)->get_row_vector();
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray_get_col_vector(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = (SimpleEigen::Array< float > *) 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::Array< float >::get_col_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< float >::get_col_vector",1,"SimpleEigen::Array< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_get_col_vector",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = (arg1)->get_col_vector();
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray_print(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = (SimpleEigen::Array< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array< float >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< float >::print",1,"SimpleEigen::Array< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_print",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray_resize(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = (SimpleEigen::Array< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("SimpleEigen::Array< float >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< float >::resize",1,"SimpleEigen::Array< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Array< float >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("FloatArray_resize",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatArray(void *obj) {
SimpleEigen::Array< float > *arg1 = (SimpleEigen::Array< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatArray(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatArray);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatArray_attributes[] = {
    { "array", _wrap_FloatArray_array_get, _wrap_FloatArray_array_set },
    {0,0,0}
};
static swig_lua_method swig_FloatArray_methods[]= {
    { "__call", _wrap_FloatArray___call},
    { "__setitem", _wrap_FloatArray___setitem},
    { "__getitem", _wrap_FloatArray___getitem},
    { "size", _wrap_FloatArray_size},
    { "random", _wrap_FloatArray_random},
    { "fill", _wrap_FloatArray_fill},
    { "cols", _wrap_FloatArray_cols},
    { "__add", _wrap_FloatArray___add},
    { "__sub", _wrap_FloatArray___sub},
    { "__mul", _wrap_FloatArray___mul},
    { "__div", _wrap_FloatArray___div},
    { "get_row_vector", _wrap_FloatArray_get_row_vector},
    { "get_col_vector", _wrap_FloatArray_get_col_vector},
    { "print", _wrap_FloatArray_print},
    { "resize", _wrap_FloatArray_resize},
    {0,0}
};
static swig_lua_method swig_FloatArray_meta[] = {
    { "__call", _wrap_FloatArray___call},
    { "__setitem", _wrap_FloatArray___setitem},
    { "__getitem", _wrap_FloatArray___getitem},
    { "__add", _wrap_FloatArray___add},
    { "__sub", _wrap_FloatArray___sub},
    { "__mul", _wrap_FloatArray___mul},
    { "__div", _wrap_FloatArray___div},
    {0,0}
};

static swig_lua_attribute swig_FloatArray_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatArray_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatArray_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatArray_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatArray_Sf_SwigStatic = {
    "FloatArray",
    swig_FloatArray_Sf_SwigStatic_methods,
    swig_FloatArray_Sf_SwigStatic_attributes,
    swig_FloatArray_Sf_SwigStatic_constants,
    swig_FloatArray_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatArray_bases[] = {0,0};
static const char *swig_FloatArray_base_names[] = {"SimpleEigen::Base *",0};
static swig_lua_class _wrap_class_FloatArray = { "FloatArray", "FloatArray", &SWIGTYPE_p_SimpleEigen__ArrayT_float_t,_proxy__wrap_new_FloatArray, swig_delete_FloatArray, swig_FloatArray_methods, swig_FloatArray_attributes, &swig_FloatArray_Sf_SwigStatic, swig_FloatArray_meta, swig_FloatArray_bases, swig_FloatArray_base_names };

static int _wrap_DoubleArray_array_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< double > *arg1 = (SimpleEigen::Array< double > *) 0 ;
  SimpleEigen::EigenArray< double > *arg2 = (SimpleEigen::EigenArray< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array< double >::array",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< double >::array",1,"SimpleEigen::Array< double > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SimpleEigen::Array< double >::array",2,"SimpleEigen::EigenArray< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_array_set",1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__EigenArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_array_set",2,SWIGTYPE_p_SimpleEigen__EigenArrayT_double_t);
  }
  
  if (arg1) (arg1)->array = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray_array_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< double > *arg1 = (SimpleEigen::Array< double > *) 0 ;
  SimpleEigen::EigenArray< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array< double >::array",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< double >::array",1,"SimpleEigen::Array< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_array_get",1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t);
  }
  
  result = (SimpleEigen::EigenArray< double > *)& ((arg1)->array);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__EigenArrayT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleArray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array< double >::Array",0,0)
  result = (SimpleEigen::Array< double > *)new SimpleEigen::Array< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleArray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SimpleEigen::Array< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array< double >::Array",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::Array< double >::Array",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (SimpleEigen::Array< double > *)new SimpleEigen::Array< double >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleArray__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double *arg2 = 0 ;
  double temp2 ;
  SimpleEigen::Array< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array< double >::Array",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::Array< double >::Array",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Array< double >::Array",2,"double const &");
  arg1 = (int)lua_tonumber(L, 1);
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (SimpleEigen::Array< double > *)new SimpleEigen::Array< double >(arg1,(double const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleArray__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< double > *arg1 = 0 ;
  SimpleEigen::Array< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array< double >::Array",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Array< double >::Array",1,"SimpleEigen::Array< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,0))){
    SWIG_fail_ptr("new_DoubleArray",1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t);
  }
  
  result = (SimpleEigen::Array< double > *)new SimpleEigen::Array< double >((SimpleEigen::Array< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleArray__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::EigenArray< double > *arg1 = 0 ;
  SimpleEigen::Array< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array< double >::Array",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Array< double >::Array",1,"SimpleEigen::EigenArray< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__EigenArrayT_double_t,0))){
    SWIG_fail_ptr("new_DoubleArray",1,SWIGTYPE_p_SimpleEigen__EigenArrayT_double_t);
  }
  
  result = (SimpleEigen::Array< double > *)new SimpleEigen::Array< double >((SimpleEigen::EigenArray< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleArray(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DoubleArray__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleArray__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__EigenArrayT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleArray__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_DoubleArray__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_DoubleArray__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DoubleArray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Array< double >::Array()\n"
    "    SimpleEigen::Array< double >::Array(int)\n"
    "    SimpleEigen::Array< double >::Array(int,double const &)\n"
    "    SimpleEigen::Array< double >::Array(SimpleEigen::Array< double > const &)\n"
    "    SimpleEigen::Array< double >::Array(SimpleEigen::EigenArray< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleArray___call(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< double > *arg1 = (SimpleEigen::Array< double > *) 0 ;
  size_t arg2 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array< double >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< double >::operator ()",1,"SimpleEigen::Array< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Array< double >::operator ()",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray___call",1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double *) &(arg1)->operator ()(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray___setitem(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< double > *arg1 = (SimpleEigen::Array< double > *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("SimpleEigen::Array< double >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< double >::__setitem",1,"SimpleEigen::Array< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Array< double >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Array< double >::__setitem",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray___setitem",1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray___getitem(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< double > *arg1 = (SimpleEigen::Array< double > *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("SimpleEigen::Array< double >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< double >::__getitem",1,"SimpleEigen::Array< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Array< double >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray___getitem",1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray_size(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< double > *arg1 = (SimpleEigen::Array< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::Array< double >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< double >::size",1,"SimpleEigen::Array< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_size",1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t);
  }
  
  result = ((SimpleEigen::Array< double > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray_random__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< double > *arg1 = (SimpleEigen::Array< double > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SimpleEigen::Array< double >::random",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< double >::random",1,"SimpleEigen::Array< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Array< double >::random",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_random",1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->random(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray_random__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< double > *arg1 = (SimpleEigen::Array< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array< double >::random",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< double >::random",1,"SimpleEigen::Array< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_random",1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t);
  }
  
  (arg1)->random();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray_random(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DoubleArray_random__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleArray_random__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleArray_random'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Array< double >::random(int)\n"
    "    SimpleEigen::Array< double >::random()\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleArray_fill(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< double > *arg1 = (SimpleEigen::Array< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SimpleEigen::Array< double >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< double >::fill",1,"SimpleEigen::Array< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Array< double >::fill",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_fill",1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray_cols(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< double > *arg1 = (SimpleEigen::Array< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::Array< double >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< double >::cols",1,"SimpleEigen::Array< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_cols",1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t);
  }
  
  result = ((SimpleEigen::Array< double > const *)arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< double > *arg1 = (SimpleEigen::Array< double > *) 0 ;
  SimpleEigen::Array< double > *arg2 = 0 ;
  SimpleEigen::Array< double > result;
  
  SWIG_check_num_args("SimpleEigen::Array< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< double >::operator +",1,"SimpleEigen::Array< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Array< double >::operator +",2,"SimpleEigen::Array< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray___add",1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray___add",2,SWIGTYPE_p_SimpleEigen__ArrayT_double_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::Array< double > const &)*arg2);
  {
    SimpleEigen::Array< double > * resultptr = new SimpleEigen::Array< double >((const SimpleEigen::Array< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< double > *arg1 = (SimpleEigen::Array< double > *) 0 ;
  SimpleEigen::Scalar< double > *arg2 = 0 ;
  SimpleEigen::Array< double > result;
  
  SWIG_check_num_args("SimpleEigen::Array< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< double >::operator +",1,"SimpleEigen::Array< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Array< double >::operator +",2,"SimpleEigen::Scalar< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray___add",1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleArray___add",2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  result = (arg1)->operator +(*arg2);
  {
    SimpleEigen::Array< double > * resultptr = new SimpleEigen::Array< double >((const SimpleEigen::Array< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleArray___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleArray___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleArray___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Array< double >::operator +(SimpleEigen::Array< double > const &)\n"
    "    SimpleEigen::Array< double >::operator +(SimpleEigen::Scalar< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleArray___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< double > *arg1 = (SimpleEigen::Array< double > *) 0 ;
  SimpleEigen::Array< double > *arg2 = 0 ;
  SimpleEigen::Array< double > result;
  
  SWIG_check_num_args("SimpleEigen::Array< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< double >::operator -",1,"SimpleEigen::Array< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Array< double >::operator -",2,"SimpleEigen::Array< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray___sub",1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray___sub",2,SWIGTYPE_p_SimpleEigen__ArrayT_double_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::Array< double > const &)*arg2);
  {
    SimpleEigen::Array< double > * resultptr = new SimpleEigen::Array< double >((const SimpleEigen::Array< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< double > *arg1 = (SimpleEigen::Array< double > *) 0 ;
  SimpleEigen::Scalar< double > *arg2 = 0 ;
  SimpleEigen::Array< double > result;
  
  SWIG_check_num_args("SimpleEigen::Array< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< double >::operator -",1,"SimpleEigen::Array< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Array< double >::operator -",2,"SimpleEigen::Scalar< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray___sub",1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleArray___sub",2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  result = (arg1)->operator -(*arg2);
  {
    SimpleEigen::Array< double > * resultptr = new SimpleEigen::Array< double >((const SimpleEigen::Array< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleArray___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleArray___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleArray___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Array< double >::operator -(SimpleEigen::Array< double > const &)\n"
    "    SimpleEigen::Array< double >::operator -(SimpleEigen::Scalar< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleArray___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< double > *arg1 = (SimpleEigen::Array< double > *) 0 ;
  SimpleEigen::Array< double > *arg2 = 0 ;
  SimpleEigen::Array< double > result;
  
  SWIG_check_num_args("SimpleEigen::Array< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< double >::operator *",1,"SimpleEigen::Array< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Array< double >::operator *",2,"SimpleEigen::Array< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray___mul",1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray___mul",2,SWIGTYPE_p_SimpleEigen__ArrayT_double_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::Array< double > const &)*arg2);
  {
    SimpleEigen::Array< double > * resultptr = new SimpleEigen::Array< double >((const SimpleEigen::Array< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< double > *arg1 = (SimpleEigen::Array< double > *) 0 ;
  SimpleEigen::Scalar< double > *arg2 = 0 ;
  SimpleEigen::Array< double > result;
  
  SWIG_check_num_args("SimpleEigen::Array< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< double >::operator *",1,"SimpleEigen::Array< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Array< double >::operator *",2,"SimpleEigen::Scalar< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray___mul",1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleArray___mul",2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  result = (arg1)->operator *(*arg2);
  {
    SimpleEigen::Array< double > * resultptr = new SimpleEigen::Array< double >((const SimpleEigen::Array< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleArray___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleArray___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleArray___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Array< double >::operator *(SimpleEigen::Array< double > const &)\n"
    "    SimpleEigen::Array< double >::operator *(SimpleEigen::Scalar< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleArray___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< double > *arg1 = (SimpleEigen::Array< double > *) 0 ;
  SimpleEigen::Array< double > *arg2 = 0 ;
  SimpleEigen::Array< double > result;
  
  SWIG_check_num_args("SimpleEigen::Array< double >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< double >::operator /",1,"SimpleEigen::Array< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Array< double >::operator /",2,"SimpleEigen::Array< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray___div",1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray___div",2,SWIGTYPE_p_SimpleEigen__ArrayT_double_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::Array< double > const &)*arg2);
  {
    SimpleEigen::Array< double > * resultptr = new SimpleEigen::Array< double >((const SimpleEigen::Array< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< double > *arg1 = (SimpleEigen::Array< double > *) 0 ;
  SimpleEigen::Scalar< double > *arg2 = 0 ;
  SimpleEigen::Array< double > result;
  
  SWIG_check_num_args("SimpleEigen::Array< double >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< double >::operator /",1,"SimpleEigen::Array< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Array< double >::operator /",2,"SimpleEigen::Scalar< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray___div",1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleArray___div",2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  result = (arg1)->operator /(*arg2);
  {
    SimpleEigen::Array< double > * resultptr = new SimpleEigen::Array< double >((const SimpleEigen::Array< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleArray___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleArray___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleArray___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Array< double >::operator /(SimpleEigen::Array< double > const &)\n"
    "    SimpleEigen::Array< double >::operator /(SimpleEigen::Scalar< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleArray_get_row_vector(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< double > *arg1 = (SimpleEigen::Array< double > *) 0 ;
  SimpleEigen::RowVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::Array< double >::get_row_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< double >::get_row_vector",1,"SimpleEigen::Array< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_get_row_vector",1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t);
  }
  
  result = (arg1)->get_row_vector();
  {
    SimpleEigen::RowVector< double > * resultptr = new SimpleEigen::RowVector< double >((const SimpleEigen::RowVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray_get_col_vector(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< double > *arg1 = (SimpleEigen::Array< double > *) 0 ;
  SimpleEigen::ColVector< double > result;
  
  SWIG_check_num_args("SimpleEigen::Array< double >::get_col_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< double >::get_col_vector",1,"SimpleEigen::Array< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_get_col_vector",1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t);
  }
  
  result = (arg1)->get_col_vector();
  {
    SimpleEigen::ColVector< double > * resultptr = new SimpleEigen::ColVector< double >((const SimpleEigen::ColVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray_print(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< double > *arg1 = (SimpleEigen::Array< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array< double >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< double >::print",1,"SimpleEigen::Array< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_print",1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray_resize(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< double > *arg1 = (SimpleEigen::Array< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("SimpleEigen::Array< double >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array< double >::resize",1,"SimpleEigen::Array< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Array< double >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,0))){
    SWIG_fail_ptr("DoubleArray_resize",1,SWIGTYPE_p_SimpleEigen__ArrayT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleArray(void *obj) {
SimpleEigen::Array< double > *arg1 = (SimpleEigen::Array< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleArray(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleArray);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleArray_attributes[] = {
    { "array", _wrap_DoubleArray_array_get, _wrap_DoubleArray_array_set },
    {0,0,0}
};
static swig_lua_method swig_DoubleArray_methods[]= {
    { "__call", _wrap_DoubleArray___call},
    { "__setitem", _wrap_DoubleArray___setitem},
    { "__getitem", _wrap_DoubleArray___getitem},
    { "size", _wrap_DoubleArray_size},
    { "random", _wrap_DoubleArray_random},
    { "fill", _wrap_DoubleArray_fill},
    { "cols", _wrap_DoubleArray_cols},
    { "__add", _wrap_DoubleArray___add},
    { "__sub", _wrap_DoubleArray___sub},
    { "__mul", _wrap_DoubleArray___mul},
    { "__div", _wrap_DoubleArray___div},
    { "get_row_vector", _wrap_DoubleArray_get_row_vector},
    { "get_col_vector", _wrap_DoubleArray_get_col_vector},
    { "print", _wrap_DoubleArray_print},
    { "resize", _wrap_DoubleArray_resize},
    {0,0}
};
static swig_lua_method swig_DoubleArray_meta[] = {
    { "__call", _wrap_DoubleArray___call},
    { "__setitem", _wrap_DoubleArray___setitem},
    { "__getitem", _wrap_DoubleArray___getitem},
    { "__add", _wrap_DoubleArray___add},
    { "__sub", _wrap_DoubleArray___sub},
    { "__mul", _wrap_DoubleArray___mul},
    { "__div", _wrap_DoubleArray___div},
    {0,0}
};

static swig_lua_attribute swig_DoubleArray_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleArray_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleArray_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleArray_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleArray_Sf_SwigStatic = {
    "DoubleArray",
    swig_DoubleArray_Sf_SwigStatic_methods,
    swig_DoubleArray_Sf_SwigStatic_attributes,
    swig_DoubleArray_Sf_SwigStatic_constants,
    swig_DoubleArray_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleArray_bases[] = {0,0};
static const char *swig_DoubleArray_base_names[] = {"SimpleEigen::Base *",0};
static swig_lua_class _wrap_class_DoubleArray = { "DoubleArray", "DoubleArray", &SWIGTYPE_p_SimpleEigen__ArrayT_double_t,_proxy__wrap_new_DoubleArray, swig_delete_DoubleArray, swig_DoubleArray_methods, swig_DoubleArray_attributes, &swig_DoubleArray_Sf_SwigStatic, swig_DoubleArray_meta, swig_DoubleArray_bases, swig_DoubleArray_base_names };

static int _wrap_FloatArray2D_array_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = (SimpleEigen::Array2D< float > *) 0 ;
  SimpleEigen::EigenArray2D< float > *arg2 = (SimpleEigen::EigenArray2D< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array2D< float >::array",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< float >::array",1,"SimpleEigen::Array2D< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SimpleEigen::Array2D< float >::array",2,"SimpleEigen::EigenArray2D< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("FloatArray2D_array_set",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__EigenArray2DT_float_t,0))){
    SWIG_fail_ptr("FloatArray2D_array_set",2,SWIGTYPE_p_SimpleEigen__EigenArray2DT_float_t);
  }
  
  if (arg1) (arg1)->array = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray2D_array_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = (SimpleEigen::Array2D< float > *) 0 ;
  SimpleEigen::EigenArray2D< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array2D< float >::array",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< float >::array",1,"SimpleEigen::Array2D< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("FloatArray2D_array_get",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = (SimpleEigen::EigenArray2D< float > *)& ((arg1)->array);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__EigenArray2DT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatArray2D__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array2D< float >::Array2D",0,0)
  result = (SimpleEigen::Array2D< float > *)new SimpleEigen::Array2D< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatArray2D__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  SimpleEigen::Array2D< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array2D< float >::Array2D",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< float >::Array2D",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Array2D< float >::Array2D",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (SimpleEigen::Array2D< float > *)new SimpleEigen::Array2D< float >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatArray2D__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  SimpleEigen::Array2D< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array2D< float >::Array2D",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< float >::Array2D",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Array2D< float >::Array2D",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Array2D< float >::Array2D",3,"float const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  result = (SimpleEigen::Array2D< float > *)new SimpleEigen::Array2D< float >(arg1,arg2,(float const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatArray2D__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = 0 ;
  SimpleEigen::Array2D< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array2D< float >::Array2D",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< float >::Array2D",1,"SimpleEigen::Array2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("new_FloatArray2D",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = (SimpleEigen::Array2D< float > *)new SimpleEigen::Array2D< float >((SimpleEigen::Array2D< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatArray2D__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::EigenArray2D< float > *arg1 = 0 ;
  SimpleEigen::Array2D< float > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array2D< float >::Array2D",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< float >::Array2D",1,"SimpleEigen::EigenArray2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__EigenArray2DT_float_t,0))){
    SWIG_fail_ptr("new_FloatArray2D",1,SWIGTYPE_p_SimpleEigen__EigenArray2DT_float_t);
  }
  
  result = (SimpleEigen::Array2D< float > *)new SimpleEigen::Array2D< float >((SimpleEigen::EigenArray2D< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatArray2D(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FloatArray2D__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatArray2D__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__EigenArray2DT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatArray2D__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FloatArray2D__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_FloatArray2D__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatArray2D'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Array2D< float >::Array2D()\n"
    "    SimpleEigen::Array2D< float >::Array2D(int,int)\n"
    "    SimpleEigen::Array2D< float >::Array2D(int,int,float const &)\n"
    "    SimpleEigen::Array2D< float >::Array2D(SimpleEigen::Array2D< float > const &)\n"
    "    SimpleEigen::Array2D< float >::Array2D(SimpleEigen::EigenArray2D< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatArray2D___call(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = (SimpleEigen::Array2D< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array2D< float >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< float >::operator ()",1,"SimpleEigen::Array2D< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Array2D< float >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Array2D< float >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("FloatArray2D___call",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (float *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray2D_size(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = (SimpleEigen::Array2D< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::Array2D< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< float >::size",1,"SimpleEigen::Array2D< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("FloatArray2D_size",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = ((SimpleEigen::Array2D< float > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray2D_rows(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = (SimpleEigen::Array2D< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::Array2D< float >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< float >::rows",1,"SimpleEigen::Array2D< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("FloatArray2D_rows",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = ((SimpleEigen::Array2D< float > const *)arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray2D_cols(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = (SimpleEigen::Array2D< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::Array2D< float >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< float >::cols",1,"SimpleEigen::Array2D< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("FloatArray2D_cols",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = ((SimpleEigen::Array2D< float > const *)arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray2D_random__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = (SimpleEigen::Array2D< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("SimpleEigen::Array2D< float >::random",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< float >::random",1,"SimpleEigen::Array2D< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Array2D< float >::random",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Array2D< float >::random",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("FloatArray2D_random",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->random(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray2D_random__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = (SimpleEigen::Array2D< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array2D< float >::random",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< float >::random",1,"SimpleEigen::Array2D< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("FloatArray2D_random",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  (arg1)->random();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray2D_random(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatArray2D_random__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatArray2D_random__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatArray2D_random'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Array2D< float >::random(int,int)\n"
    "    SimpleEigen::Array2D< float >::random()\n");
  lua_error(L);return 0;
}


static int _wrap_FloatArray2D_fill(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = (SimpleEigen::Array2D< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SimpleEigen::Array2D< float >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< float >::fill",1,"SimpleEigen::Array2D< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Array2D< float >::fill",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("FloatArray2D_fill",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray2D_resize(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = (SimpleEigen::Array2D< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("SimpleEigen::Array2D< float >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< float >::resize",1,"SimpleEigen::Array2D< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Array2D< float >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Array2D< float >::resize",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("FloatArray2D_resize",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray2D___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = (SimpleEigen::Array2D< float > *) 0 ;
  SimpleEigen::Array2D< float > *arg2 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::Array2D< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< float >::operator +",1,"SimpleEigen::Array2D< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Array2D< float >::operator +",2,"SimpleEigen::Array2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("FloatArray2D___add",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("FloatArray2D___add",2,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::Array2D< float > const &)*arg2);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray2D___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = (SimpleEigen::Array2D< float > *) 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::Array2D< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< float >::operator +",1,"SimpleEigen::Array2D< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Array2D< float >::operator +",2,"SimpleEigen::Scalar< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("FloatArray2D___add",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatArray2D___add",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (arg1)->operator +(*arg2);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray2D___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatArray2D___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatArray2D___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatArray2D___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Array2D< float >::operator +(SimpleEigen::Array2D< float > const &)\n"
    "    SimpleEigen::Array2D< float >::operator +(SimpleEigen::Scalar< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatArray2D___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = (SimpleEigen::Array2D< float > *) 0 ;
  SimpleEigen::Array2D< float > *arg2 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::Array2D< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< float >::operator -",1,"SimpleEigen::Array2D< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Array2D< float >::operator -",2,"SimpleEigen::Array2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("FloatArray2D___sub",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("FloatArray2D___sub",2,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::Array2D< float > const &)*arg2);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray2D___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = (SimpleEigen::Array2D< float > *) 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::Array2D< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< float >::operator -",1,"SimpleEigen::Array2D< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Array2D< float >::operator -",2,"SimpleEigen::Scalar< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("FloatArray2D___sub",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatArray2D___sub",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (arg1)->operator -(*arg2);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray2D___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatArray2D___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatArray2D___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatArray2D___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Array2D< float >::operator -(SimpleEigen::Array2D< float > const &)\n"
    "    SimpleEigen::Array2D< float >::operator -(SimpleEigen::Scalar< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatArray2D___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = (SimpleEigen::Array2D< float > *) 0 ;
  SimpleEigen::Array2D< float > *arg2 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::Array2D< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< float >::operator *",1,"SimpleEigen::Array2D< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Array2D< float >::operator *",2,"SimpleEigen::Array2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("FloatArray2D___mul",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("FloatArray2D___mul",2,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::Array2D< float > const &)*arg2);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray2D___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = (SimpleEigen::Array2D< float > *) 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::Array2D< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< float >::operator *",1,"SimpleEigen::Array2D< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Array2D< float >::operator *",2,"SimpleEigen::Scalar< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("FloatArray2D___mul",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatArray2D___mul",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (arg1)->operator *(*arg2);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray2D___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatArray2D___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatArray2D___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatArray2D___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Array2D< float >::operator *(SimpleEigen::Array2D< float > const &)\n"
    "    SimpleEigen::Array2D< float >::operator *(SimpleEigen::Scalar< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatArray2D___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = (SimpleEigen::Array2D< float > *) 0 ;
  SimpleEigen::Array2D< float > *arg2 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::Array2D< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< float >::operator /",1,"SimpleEigen::Array2D< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Array2D< float >::operator /",2,"SimpleEigen::Array2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("FloatArray2D___div",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("FloatArray2D___div",2,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::Array2D< float > const &)*arg2);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray2D___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = (SimpleEigen::Array2D< float > *) 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::Array2D< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< float >::operator /",1,"SimpleEigen::Array2D< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Array2D< float >::operator /",2,"SimpleEigen::Scalar< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("FloatArray2D___div",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatArray2D___div",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (arg1)->operator /(*arg2);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray2D___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatArray2D___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatArray2D___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatArray2D___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Array2D< float >::operator /(SimpleEigen::Array2D< float > const &)\n"
    "    SimpleEigen::Array2D< float >::operator /(SimpleEigen::Scalar< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatArray2D_to_matrix(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = (SimpleEigen::Array2D< float > *) 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::Array2D< float >::to_matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< float >::to_matrix",1,"SimpleEigen::Array2D< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("FloatArray2D_to_matrix",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = (arg1)->to_matrix();
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray2D_from_matrix(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = (SimpleEigen::Array2D< float > *) 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array2D< float >::from_matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< float >::from_matrix",1,"SimpleEigen::Array2D< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Array2D< float >::from_matrix",2,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("FloatArray2D_from_matrix",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("FloatArray2D_from_matrix",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  (arg1)->from_matrix((SimpleEigen::Matrix< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatArray2D_print(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = (SimpleEigen::Array2D< float > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array2D< float >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< float >::print",1,"SimpleEigen::Array2D< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("FloatArray2D_print",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatArray2D(void *obj) {
SimpleEigen::Array2D< float > *arg1 = (SimpleEigen::Array2D< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatArray2D(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatArray2D);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatArray2D_attributes[] = {
    { "array", _wrap_FloatArray2D_array_get, _wrap_FloatArray2D_array_set },
    {0,0,0}
};
static swig_lua_method swig_FloatArray2D_methods[]= {
    { "__call", _wrap_FloatArray2D___call},
    { "size", _wrap_FloatArray2D_size},
    { "rows", _wrap_FloatArray2D_rows},
    { "cols", _wrap_FloatArray2D_cols},
    { "random", _wrap_FloatArray2D_random},
    { "fill", _wrap_FloatArray2D_fill},
    { "resize", _wrap_FloatArray2D_resize},
    { "__add", _wrap_FloatArray2D___add},
    { "__sub", _wrap_FloatArray2D___sub},
    { "__mul", _wrap_FloatArray2D___mul},
    { "__div", _wrap_FloatArray2D___div},
    { "to_matrix", _wrap_FloatArray2D_to_matrix},
    { "from_matrix", _wrap_FloatArray2D_from_matrix},
    { "print", _wrap_FloatArray2D_print},
    {0,0}
};
static swig_lua_method swig_FloatArray2D_meta[] = {
    { "__call", _wrap_FloatArray2D___call},
    { "__add", _wrap_FloatArray2D___add},
    { "__sub", _wrap_FloatArray2D___sub},
    { "__mul", _wrap_FloatArray2D___mul},
    { "__div", _wrap_FloatArray2D___div},
    {0,0}
};

static swig_lua_attribute swig_FloatArray2D_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatArray2D_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatArray2D_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatArray2D_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatArray2D_Sf_SwigStatic = {
    "FloatArray2D",
    swig_FloatArray2D_Sf_SwigStatic_methods,
    swig_FloatArray2D_Sf_SwigStatic_attributes,
    swig_FloatArray2D_Sf_SwigStatic_constants,
    swig_FloatArray2D_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatArray2D_bases[] = {0,0};
static const char *swig_FloatArray2D_base_names[] = {"SimpleEigen::Base *",0};
static swig_lua_class _wrap_class_FloatArray2D = { "FloatArray2D", "FloatArray2D", &SWIGTYPE_p_SimpleEigen__Array2DT_float_t,_proxy__wrap_new_FloatArray2D, swig_delete_FloatArray2D, swig_FloatArray2D_methods, swig_FloatArray2D_attributes, &swig_FloatArray2D_Sf_SwigStatic, swig_FloatArray2D_meta, swig_FloatArray2D_bases, swig_FloatArray2D_base_names };

static int _wrap_DoubleArray2D_array_set(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< double > *arg1 = (SimpleEigen::Array2D< double > *) 0 ;
  SimpleEigen::EigenArray2D< double > *arg2 = (SimpleEigen::EigenArray2D< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array2D< double >::array",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< double >::array",1,"SimpleEigen::Array2D< double > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SimpleEigen::Array2D< double >::array",2,"SimpleEigen::EigenArray2D< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,0))){
    SWIG_fail_ptr("DoubleArray2D_array_set",1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__EigenArray2DT_double_t,0))){
    SWIG_fail_ptr("DoubleArray2D_array_set",2,SWIGTYPE_p_SimpleEigen__EigenArray2DT_double_t);
  }
  
  if (arg1) (arg1)->array = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray2D_array_get(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< double > *arg1 = (SimpleEigen::Array2D< double > *) 0 ;
  SimpleEigen::EigenArray2D< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array2D< double >::array",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< double >::array",1,"SimpleEigen::Array2D< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,0))){
    SWIG_fail_ptr("DoubleArray2D_array_get",1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t);
  }
  
  result = (SimpleEigen::EigenArray2D< double > *)& ((arg1)->array);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__EigenArray2DT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleArray2D__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array2D< double >::Array2D",0,0)
  result = (SimpleEigen::Array2D< double > *)new SimpleEigen::Array2D< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleArray2D__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  SimpleEigen::Array2D< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array2D< double >::Array2D",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< double >::Array2D",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Array2D< double >::Array2D",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (SimpleEigen::Array2D< double > *)new SimpleEigen::Array2D< double >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleArray2D__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  SimpleEigen::Array2D< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array2D< double >::Array2D",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< double >::Array2D",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Array2D< double >::Array2D",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Array2D< double >::Array2D",3,"double const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  result = (SimpleEigen::Array2D< double > *)new SimpleEigen::Array2D< double >(arg1,arg2,(double const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleArray2D__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< double > *arg1 = 0 ;
  SimpleEigen::Array2D< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array2D< double >::Array2D",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< double >::Array2D",1,"SimpleEigen::Array2D< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,0))){
    SWIG_fail_ptr("new_DoubleArray2D",1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t);
  }
  
  result = (SimpleEigen::Array2D< double > *)new SimpleEigen::Array2D< double >((SimpleEigen::Array2D< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleArray2D__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::EigenArray2D< double > *arg1 = 0 ;
  SimpleEigen::Array2D< double > *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array2D< double >::Array2D",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< double >::Array2D",1,"SimpleEigen::EigenArray2D< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__EigenArray2DT_double_t,0))){
    SWIG_fail_ptr("new_DoubleArray2D",1,SWIGTYPE_p_SimpleEigen__EigenArray2DT_double_t);
  }
  
  result = (SimpleEigen::Array2D< double > *)new SimpleEigen::Array2D< double >((SimpleEigen::EigenArray2D< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleArray2D(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DoubleArray2D__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleArray2D__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__EigenArray2DT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleArray2D__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_DoubleArray2D__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_DoubleArray2D__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DoubleArray2D'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Array2D< double >::Array2D()\n"
    "    SimpleEigen::Array2D< double >::Array2D(int,int)\n"
    "    SimpleEigen::Array2D< double >::Array2D(int,int,double const &)\n"
    "    SimpleEigen::Array2D< double >::Array2D(SimpleEigen::Array2D< double > const &)\n"
    "    SimpleEigen::Array2D< double >::Array2D(SimpleEigen::EigenArray2D< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleArray2D___call(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< double > *arg1 = (SimpleEigen::Array2D< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array2D< double >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< double >::operator ()",1,"SimpleEigen::Array2D< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Array2D< double >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Array2D< double >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,0))){
    SWIG_fail_ptr("DoubleArray2D___call",1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (double *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray2D_size(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< double > *arg1 = (SimpleEigen::Array2D< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::Array2D< double >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< double >::size",1,"SimpleEigen::Array2D< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,0))){
    SWIG_fail_ptr("DoubleArray2D_size",1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t);
  }
  
  result = ((SimpleEigen::Array2D< double > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray2D_rows(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< double > *arg1 = (SimpleEigen::Array2D< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::Array2D< double >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< double >::rows",1,"SimpleEigen::Array2D< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,0))){
    SWIG_fail_ptr("DoubleArray2D_rows",1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t);
  }
  
  result = ((SimpleEigen::Array2D< double > const *)arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray2D_cols(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< double > *arg1 = (SimpleEigen::Array2D< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SimpleEigen::Array2D< double >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< double >::cols",1,"SimpleEigen::Array2D< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,0))){
    SWIG_fail_ptr("DoubleArray2D_cols",1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t);
  }
  
  result = ((SimpleEigen::Array2D< double > const *)arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray2D_random__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< double > *arg1 = (SimpleEigen::Array2D< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("SimpleEigen::Array2D< double >::random",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< double >::random",1,"SimpleEigen::Array2D< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Array2D< double >::random",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Array2D< double >::random",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,0))){
    SWIG_fail_ptr("DoubleArray2D_random",1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->random(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray2D_random__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< double > *arg1 = (SimpleEigen::Array2D< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array2D< double >::random",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< double >::random",1,"SimpleEigen::Array2D< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,0))){
    SWIG_fail_ptr("DoubleArray2D_random",1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t);
  }
  
  (arg1)->random();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray2D_random(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DoubleArray2D_random__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DoubleArray2D_random__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleArray2D_random'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Array2D< double >::random(int,int)\n"
    "    SimpleEigen::Array2D< double >::random()\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleArray2D_fill(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< double > *arg1 = (SimpleEigen::Array2D< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SimpleEigen::Array2D< double >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< double >::fill",1,"SimpleEigen::Array2D< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Array2D< double >::fill",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,0))){
    SWIG_fail_ptr("DoubleArray2D_fill",1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray2D_resize(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< double > *arg1 = (SimpleEigen::Array2D< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("SimpleEigen::Array2D< double >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< double >::resize",1,"SimpleEigen::Array2D< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::Array2D< double >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SimpleEigen::Array2D< double >::resize",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,0))){
    SWIG_fail_ptr("DoubleArray2D_resize",1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray2D___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< double > *arg1 = (SimpleEigen::Array2D< double > *) 0 ;
  SimpleEigen::Array2D< double > *arg2 = 0 ;
  SimpleEigen::Array2D< double > result;
  
  SWIG_check_num_args("SimpleEigen::Array2D< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< double >::operator +",1,"SimpleEigen::Array2D< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Array2D< double >::operator +",2,"SimpleEigen::Array2D< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,0))){
    SWIG_fail_ptr("DoubleArray2D___add",1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,0))){
    SWIG_fail_ptr("DoubleArray2D___add",2,SWIGTYPE_p_SimpleEigen__Array2DT_double_t);
  }
  
  result = (arg1)->operator +((SimpleEigen::Array2D< double > const &)*arg2);
  {
    SimpleEigen::Array2D< double > * resultptr = new SimpleEigen::Array2D< double >((const SimpleEigen::Array2D< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray2D___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< double > *arg1 = (SimpleEigen::Array2D< double > *) 0 ;
  SimpleEigen::Scalar< double > *arg2 = 0 ;
  SimpleEigen::Array2D< double > result;
  
  SWIG_check_num_args("SimpleEigen::Array2D< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< double >::operator +",1,"SimpleEigen::Array2D< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Array2D< double >::operator +",2,"SimpleEigen::Scalar< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,0))){
    SWIG_fail_ptr("DoubleArray2D___add",1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleArray2D___add",2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  result = (arg1)->operator +(*arg2);
  {
    SimpleEigen::Array2D< double > * resultptr = new SimpleEigen::Array2D< double >((const SimpleEigen::Array2D< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray2D___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleArray2D___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleArray2D___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleArray2D___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Array2D< double >::operator +(SimpleEigen::Array2D< double > const &)\n"
    "    SimpleEigen::Array2D< double >::operator +(SimpleEigen::Scalar< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleArray2D___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< double > *arg1 = (SimpleEigen::Array2D< double > *) 0 ;
  SimpleEigen::Array2D< double > *arg2 = 0 ;
  SimpleEigen::Array2D< double > result;
  
  SWIG_check_num_args("SimpleEigen::Array2D< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< double >::operator -",1,"SimpleEigen::Array2D< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Array2D< double >::operator -",2,"SimpleEigen::Array2D< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,0))){
    SWIG_fail_ptr("DoubleArray2D___sub",1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,0))){
    SWIG_fail_ptr("DoubleArray2D___sub",2,SWIGTYPE_p_SimpleEigen__Array2DT_double_t);
  }
  
  result = (arg1)->operator -((SimpleEigen::Array2D< double > const &)*arg2);
  {
    SimpleEigen::Array2D< double > * resultptr = new SimpleEigen::Array2D< double >((const SimpleEigen::Array2D< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray2D___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< double > *arg1 = (SimpleEigen::Array2D< double > *) 0 ;
  SimpleEigen::Scalar< double > *arg2 = 0 ;
  SimpleEigen::Array2D< double > result;
  
  SWIG_check_num_args("SimpleEigen::Array2D< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< double >::operator -",1,"SimpleEigen::Array2D< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Array2D< double >::operator -",2,"SimpleEigen::Scalar< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,0))){
    SWIG_fail_ptr("DoubleArray2D___sub",1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleArray2D___sub",2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  result = (arg1)->operator -(*arg2);
  {
    SimpleEigen::Array2D< double > * resultptr = new SimpleEigen::Array2D< double >((const SimpleEigen::Array2D< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray2D___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleArray2D___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleArray2D___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleArray2D___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Array2D< double >::operator -(SimpleEigen::Array2D< double > const &)\n"
    "    SimpleEigen::Array2D< double >::operator -(SimpleEigen::Scalar< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleArray2D___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< double > *arg1 = (SimpleEigen::Array2D< double > *) 0 ;
  SimpleEigen::Array2D< double > *arg2 = 0 ;
  SimpleEigen::Array2D< double > result;
  
  SWIG_check_num_args("SimpleEigen::Array2D< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< double >::operator *",1,"SimpleEigen::Array2D< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Array2D< double >::operator *",2,"SimpleEigen::Array2D< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,0))){
    SWIG_fail_ptr("DoubleArray2D___mul",1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,0))){
    SWIG_fail_ptr("DoubleArray2D___mul",2,SWIGTYPE_p_SimpleEigen__Array2DT_double_t);
  }
  
  result = (arg1)->operator *((SimpleEigen::Array2D< double > const &)*arg2);
  {
    SimpleEigen::Array2D< double > * resultptr = new SimpleEigen::Array2D< double >((const SimpleEigen::Array2D< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray2D___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< double > *arg1 = (SimpleEigen::Array2D< double > *) 0 ;
  SimpleEigen::Scalar< double > *arg2 = 0 ;
  SimpleEigen::Array2D< double > result;
  
  SWIG_check_num_args("SimpleEigen::Array2D< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< double >::operator *",1,"SimpleEigen::Array2D< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Array2D< double >::operator *",2,"SimpleEigen::Scalar< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,0))){
    SWIG_fail_ptr("DoubleArray2D___mul",1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleArray2D___mul",2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  result = (arg1)->operator *(*arg2);
  {
    SimpleEigen::Array2D< double > * resultptr = new SimpleEigen::Array2D< double >((const SimpleEigen::Array2D< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray2D___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleArray2D___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleArray2D___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleArray2D___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Array2D< double >::operator *(SimpleEigen::Array2D< double > const &)\n"
    "    SimpleEigen::Array2D< double >::operator *(SimpleEigen::Scalar< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleArray2D___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< double > *arg1 = (SimpleEigen::Array2D< double > *) 0 ;
  SimpleEigen::Array2D< double > *arg2 = 0 ;
  SimpleEigen::Array2D< double > result;
  
  SWIG_check_num_args("SimpleEigen::Array2D< double >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< double >::operator /",1,"SimpleEigen::Array2D< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Array2D< double >::operator /",2,"SimpleEigen::Array2D< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,0))){
    SWIG_fail_ptr("DoubleArray2D___div",1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,0))){
    SWIG_fail_ptr("DoubleArray2D___div",2,SWIGTYPE_p_SimpleEigen__Array2DT_double_t);
  }
  
  result = (arg1)->operator /((SimpleEigen::Array2D< double > const &)*arg2);
  {
    SimpleEigen::Array2D< double > * resultptr = new SimpleEigen::Array2D< double >((const SimpleEigen::Array2D< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray2D___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< double > *arg1 = (SimpleEigen::Array2D< double > *) 0 ;
  SimpleEigen::Scalar< double > *arg2 = 0 ;
  SimpleEigen::Array2D< double > result;
  
  SWIG_check_num_args("SimpleEigen::Array2D< double >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< double >::operator /",1,"SimpleEigen::Array2D< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Array2D< double >::operator /",2,"SimpleEigen::Scalar< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,0))){
    SWIG_fail_ptr("DoubleArray2D___div",1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleArray2D___div",2,SWIGTYPE_p_SimpleEigen__ScalarT_double_t);
  }
  
  result = (arg1)->operator /(*arg2);
  {
    SimpleEigen::Array2D< double > * resultptr = new SimpleEigen::Array2D< double >((const SimpleEigen::Array2D< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray2D___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleArray2D___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleArray2D___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleArray2D___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::Array2D< double >::operator /(SimpleEigen::Array2D< double > const &)\n"
    "    SimpleEigen::Array2D< double >::operator /(SimpleEigen::Scalar< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleArray2D_to_matrix(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< double > *arg1 = (SimpleEigen::Array2D< double > *) 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::Array2D< double >::to_matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< double >::to_matrix",1,"SimpleEigen::Array2D< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,0))){
    SWIG_fail_ptr("DoubleArray2D_to_matrix",1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t);
  }
  
  result = (arg1)->to_matrix();
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray2D_from_matrix(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< double > *arg1 = (SimpleEigen::Array2D< double > *) 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array2D< double >::from_matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< double >::from_matrix",1,"SimpleEigen::Array2D< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::Array2D< double >::from_matrix",2,"SimpleEigen::Matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,0))){
    SWIG_fail_ptr("DoubleArray2D_from_matrix",1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("DoubleArray2D_from_matrix",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  (arg1)->from_matrix((SimpleEigen::Matrix< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleArray2D_print(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< double > *arg1 = (SimpleEigen::Array2D< double > *) 0 ;
  
  SWIG_check_num_args("SimpleEigen::Array2D< double >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SimpleEigen::Array2D< double >::print",1,"SimpleEigen::Array2D< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,0))){
    SWIG_fail_ptr("DoubleArray2D_print",1,SWIGTYPE_p_SimpleEigen__Array2DT_double_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleArray2D(void *obj) {
SimpleEigen::Array2D< double > *arg1 = (SimpleEigen::Array2D< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleArray2D(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleArray2D);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleArray2D_attributes[] = {
    { "array", _wrap_DoubleArray2D_array_get, _wrap_DoubleArray2D_array_set },
    {0,0,0}
};
static swig_lua_method swig_DoubleArray2D_methods[]= {
    { "__call", _wrap_DoubleArray2D___call},
    { "size", _wrap_DoubleArray2D_size},
    { "rows", _wrap_DoubleArray2D_rows},
    { "cols", _wrap_DoubleArray2D_cols},
    { "random", _wrap_DoubleArray2D_random},
    { "fill", _wrap_DoubleArray2D_fill},
    { "resize", _wrap_DoubleArray2D_resize},
    { "__add", _wrap_DoubleArray2D___add},
    { "__sub", _wrap_DoubleArray2D___sub},
    { "__mul", _wrap_DoubleArray2D___mul},
    { "__div", _wrap_DoubleArray2D___div},
    { "to_matrix", _wrap_DoubleArray2D_to_matrix},
    { "from_matrix", _wrap_DoubleArray2D_from_matrix},
    { "print", _wrap_DoubleArray2D_print},
    {0,0}
};
static swig_lua_method swig_DoubleArray2D_meta[] = {
    { "__call", _wrap_DoubleArray2D___call},
    { "__add", _wrap_DoubleArray2D___add},
    { "__sub", _wrap_DoubleArray2D___sub},
    { "__mul", _wrap_DoubleArray2D___mul},
    { "__div", _wrap_DoubleArray2D___div},
    {0,0}
};

static swig_lua_attribute swig_DoubleArray2D_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleArray2D_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleArray2D_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleArray2D_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleArray2D_Sf_SwigStatic = {
    "DoubleArray2D",
    swig_DoubleArray2D_Sf_SwigStatic_methods,
    swig_DoubleArray2D_Sf_SwigStatic_attributes,
    swig_DoubleArray2D_Sf_SwigStatic_constants,
    swig_DoubleArray2D_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleArray2D_bases[] = {0,0};
static const char *swig_DoubleArray2D_base_names[] = {"SimpleEigen::Base *",0};
static swig_lua_class _wrap_class_DoubleArray2D = { "DoubleArray2D", "DoubleArray2D", &SWIGTYPE_p_SimpleEigen__Array2DT_double_t,_proxy__wrap_new_DoubleArray2D, swig_delete_DoubleArray2D, swig_DoubleArray2D_methods, swig_DoubleArray2D_attributes, &swig_DoubleArray2D_Sf_SwigStatic, swig_DoubleArray2D_meta, swig_DoubleArray2D_bases, swig_DoubleArray2D_base_names };

static int _wrap_hadamard_float(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::hadamard< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::hadamard< float >",1,"SimpleEigen::Matrix< float > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::hadamard< float >",2,"SimpleEigen::Matrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("hadamard_float",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("hadamard_float",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR hadamard< float >(*arg1,*arg2);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hadamard_double(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("SimpleEigen::hadamard< double >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::hadamard< double >",1,"SimpleEigen::Matrix< double > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::hadamard< double >",2,"SimpleEigen::Matrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("hadamard_double",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("hadamard_double",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR hadamard< double >(*arg1,*arg2);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sigmoid_float(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::sigmoid< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::sigmoid< float >",1,"SimpleEigen::Matrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("sigmoid_float",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR sigmoid< float >(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sigmoid_double(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::sigmoid< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::sigmoid< double >",1,"SimpleEigen::Matrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("sigmoid_double",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR sigmoid< double >(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sigmoid_deriv_float(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::sigmoidd< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::sigmoidd< float >",1,"SimpleEigen::Matrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("sigmoid_deriv_float",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR sigmoidd< float >(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sigmoid_deriv_double(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::sigmoidd< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::sigmoidd< double >",1,"SimpleEigen::Matrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("sigmoid_deriv_double",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR sigmoidd< double >(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanh_float(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::tanH< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::tanH< float >",1,"SimpleEigen::Matrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("tanh_float",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR tanH< float >(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanh_double(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::tanH< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::tanH< double >",1,"SimpleEigen::Matrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("tanh_double",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR tanH< double >(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanh_deriv_float(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::tanHd< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::tanHd< float >",1,"SimpleEigen::Matrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("tanh_deriv_float",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR tanHd< float >(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanh_deriv_double(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::tanHd< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::tanHd< double >",1,"SimpleEigen::Matrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("tanh_deriv_double",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR tanHd< double >(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_relu_float(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::relu< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::relu< float >",1,"SimpleEigen::Matrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("relu_float",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR relu< float >(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_relu_double(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::relu< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::relu< double >",1,"SimpleEigen::Matrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("relu_double",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR relu< double >(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_relu_deriv_float(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::relud< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::relud< float >",1,"SimpleEigen::Matrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("relu_deriv_float",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR relud< float >(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_relu_deriv_double(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::relud< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::relud< double >",1,"SimpleEigen::Matrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("relu_deriv_double",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR relud< double >(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_softmax_float(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::softmax< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::softmax< float >",1,"SimpleEigen::Matrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("softmax_float",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR softmax< float >(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_softmax_double(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::softmax< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::softmax< double >",1,"SimpleEigen::Matrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("softmax_double",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR softmax< double >(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_noalias_float(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::noalias< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::noalias< float >",1,"SimpleEigen::Matrix< float > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::noalias< float >",2,"SimpleEigen::Matrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("noalias_float",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("noalias_float",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR noalias< float >(*arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_noalias_double(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::noalias< double >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::noalias< double >",1,"SimpleEigen::Matrix< double > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::noalias< double >",2,"SimpleEigen::Matrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("noalias_double",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("noalias_double",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR noalias< double >(*arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mish_activate_float(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::mish_activate< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::mish_activate< float >",1,"SimpleEigen::Matrix< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::mish_activate< float >",2,"SimpleEigen::Matrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("mish_activate_float",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("mish_activate_float",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR mish_activate< float >((SimpleEigen::Matrix< float > const &)*arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mish_activate_double(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::mish_activate< double >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::mish_activate< double >",1,"SimpleEigen::Matrix< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::mish_activate< double >",2,"SimpleEigen::Matrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("mish_activate_double",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("mish_activate_double",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR mish_activate< double >((SimpleEigen::Matrix< double > const &)*arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mish_apply_jacobian_float(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > *arg2 = 0 ;
  SimpleEigen::Matrix< float > *arg3 = 0 ;
  SimpleEigen::Matrix< float > *arg4 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::mish_apply_jacobian< float >",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::mish_apply_jacobian< float >",1,"SimpleEigen::Matrix< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::mish_apply_jacobian< float >",2,"SimpleEigen::Matrix< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SimpleEigen::mish_apply_jacobian< float >",3,"SimpleEigen::Matrix< float > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SimpleEigen::mish_apply_jacobian< float >",4,"SimpleEigen::Matrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("mish_apply_jacobian_float",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("mish_apply_jacobian_float",2,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("mish_apply_jacobian_float",3,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("mish_apply_jacobian_float",4,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR mish_apply_jacobian< float >((SimpleEigen::Matrix< float > const &)*arg1,(SimpleEigen::Matrix< float > const &)*arg2,(SimpleEigen::Matrix< float > const &)*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mish_apply_jacobian_double(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< double > *arg1 = 0 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  SimpleEigen::Matrix< double > *arg3 = 0 ;
  SimpleEigen::Matrix< double > *arg4 = 0 ;
  
  SWIG_check_num_args("SimpleEigen::mish_apply_jacobian< double >",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::mish_apply_jacobian< double >",1,"SimpleEigen::Matrix< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::mish_apply_jacobian< double >",2,"SimpleEigen::Matrix< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SimpleEigen::mish_apply_jacobian< double >",3,"SimpleEigen::Matrix< double > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SimpleEigen::mish_apply_jacobian< double >",4,"SimpleEigen::Matrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("mish_apply_jacobian_double",1,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("mish_apply_jacobian_double",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("mish_apply_jacobian_double",3,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("mish_apply_jacobian_double",4,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR mish_apply_jacobian< double >((SimpleEigen::Matrix< double > const &)*arg1,(SimpleEigen::Matrix< double > const &)*arg2,(SimpleEigen::Matrix< double > const &)*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SwigRefTableGet(lua_State* L) {
  int SWIG_arg = 0;
  SWIGLUA_REF arg1 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("SwigRefTableGet",2,2)
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SwigRefTableGet",2,"size_t");
  swiglua_ref_set(&arg1,L,1); 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)SwigRefTableGet(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SwigRefTableGet2(lua_State* L) {
  int SWIG_arg = 0;
  SWIGLUA_REF arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  double result;
  
  SWIG_check_num_args("SwigRefTableGet2",3,3)
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SwigRefTableGet2",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SwigRefTableGet2",3,"size_t");
  swiglua_ref_set(&arg1,L,1); 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (double)SwigRefTableGet2(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SwigRefTableSet(lua_State* L) {
  int SWIG_arg = 0;
  SWIGLUA_REF arg1 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("SwigRefTableSet",3,3)
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SwigRefTableSet",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SwigRefTableSet",3,"double");
  swiglua_ref_set(&arg1,L,1); 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  SwigRefTableSet(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SwigRefTableSet2(lua_State* L) {
  int SWIG_arg = 0;
  SWIGLUA_REF arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("SwigRefTableSet2",4,4)
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SwigRefTableSet2",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SwigRefTableSet2",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SwigRefTableSet2",4,"double");
  swiglua_ref_set(&arg1,L,1); 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  SwigRefTableSet2(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Lua_TablesToMatrix(lua_State* L) {
  int SWIG_arg = 0;
  SWIGLUA_REF arg1 ;
  SimpleEigen::Matrix< double > *arg2 = 0 ;
  SimpleEigen::Matrix< double > *result = 0 ;
  
  SWIG_check_num_args("Lua_TablesToMatrix",2,2)
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Lua_TablesToMatrix",2,"SimpleEigen::Matrix< double > &");
  swiglua_ref_set(&arg1,L,1); 
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0))){
    SWIG_fail_ptr("Lua_TablesToMatrix",2,SWIGTYPE_p_SimpleEigen__MatrixT_double_t);
  }
  
  result = (SimpleEigen::Matrix< double > *) &Lua_TablesToMatrix(arg1,*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CreateRowVectorFloat(lua_State* L) {
  int SWIG_arg = 0;
  SWIGLUA_REF arg1 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("CreateRowVectorFloat",1,1)
  swiglua_ref_set(&arg1,L,1); 
  result = CreateRowVectorFloat(arg1);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CreateRowVectorDouble(lua_State* L) {
  int SWIG_arg = 0;
  SWIGLUA_REF arg1 ;
  SimpleEigen::RowVector< double > result;
  
  SWIG_check_num_args("CreateRowVectorDouble",1,1)
  swiglua_ref_set(&arg1,L,1); 
  result = CreateRowVectorDouble(arg1);
  {
    SimpleEigen::RowVector< double > * resultptr = new SimpleEigen::RowVector< double >((const SimpleEigen::RowVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CreateColVectorFloat(lua_State* L) {
  int SWIG_arg = 0;
  SWIGLUA_REF arg1 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("CreateColVectorFloat",1,1)
  swiglua_ref_set(&arg1,L,1); 
  result = CreateColVectorFloat(arg1);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CreateColVectorDouble(lua_State* L) {
  int SWIG_arg = 0;
  SWIGLUA_REF arg1 ;
  SimpleEigen::ColVector< double > result;
  
  SWIG_check_num_args("CreateColVectorDouble",1,1)
  swiglua_ref_set(&arg1,L,1); 
  result = CreateColVectorDouble(arg1);
  {
    SimpleEigen::ColVector< double > * resultptr = new SimpleEigen::ColVector< double >((const SimpleEigen::ColVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CreateArrayFloat(lua_State* L) {
  int SWIG_arg = 0;
  SWIGLUA_REF arg1 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("CreateArrayFloat",1,1)
  swiglua_ref_set(&arg1,L,1); 
  result = CreateArrayFloat(arg1);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CreateArrayDouble(lua_State* L) {
  int SWIG_arg = 0;
  SWIGLUA_REF arg1 ;
  SimpleEigen::Array< double > result;
  
  SWIG_check_num_args("CreateArrayDouble",1,1)
  swiglua_ref_set(&arg1,L,1); 
  result = CreateArrayDouble(arg1);
  {
    SimpleEigen::Array< double > * resultptr = new SimpleEigen::Array< double >((const SimpleEigen::Array< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CreateMatrixFloat(lua_State* L) {
  int SWIG_arg = 0;
  SWIGLUA_REF arg1 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("CreateMatrixFloat",1,1)
  swiglua_ref_set(&arg1,L,1); 
  result = CreateMatrixFloat(arg1);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CreateMatrixDouble(lua_State* L) {
  int SWIG_arg = 0;
  SWIGLUA_REF arg1 ;
  SimpleEigen::Matrix< double > result;
  
  SWIG_check_num_args("CreateMatrixDouble",1,1)
  swiglua_ref_set(&arg1,L,1); 
  result = CreateMatrixDouble(arg1);
  {
    SimpleEigen::Matrix< double > * resultptr = new SimpleEigen::Matrix< double >((const SimpleEigen::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CreateArray2DFloat(lua_State* L) {
  int SWIG_arg = 0;
  SWIGLUA_REF arg1 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("CreateArray2DFloat",1,1)
  swiglua_ref_set(&arg1,L,1); 
  result = CreateArray2DFloat(arg1);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CreateArray2DDouble(lua_State* L) {
  int SWIG_arg = 0;
  SWIGLUA_REF arg1 ;
  SimpleEigen::Array2D< double > result;
  
  SWIG_check_num_args("CreateArray2DDouble",1,1)
  swiglua_ref_set(&arg1,L,1); 
  result = CreateArray2DDouble(arg1);
  {
    SimpleEigen::Array2D< double > * resultptr = new SimpleEigen::Array2D< double >((const SimpleEigen::Array2D< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::abs< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::abs< float >",1,"SimpleEigen::RowVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("absf",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR abs< float >(*arg1);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::abs< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::abs< float >",1,"SimpleEigen::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("absf",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR abs< float >(*arg1);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::abs< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::abs< float >",1,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("absf",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR abs< float >((SimpleEigen::Matrix< float > const &)*arg1);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::abs< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::abs< float >",1,"SimpleEigen::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("absf",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR abs< float >((SimpleEigen::ColMatrix< float > const &)*arg1);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::abs< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::abs< float >",1,"SimpleEigen::Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("absf",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR abs< float >((SimpleEigen::Array< float > const &)*arg1);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::abs< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::abs< float >",1,"SimpleEigen::Array2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("absf",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR abs< float >((SimpleEigen::Array2D< float > const &)*arg1);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_absf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_absf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_absf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_absf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_absf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_absf__SWIG_5(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'absf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::abs< float >(SimpleEigen::RowVector< float > &)\n"
    "    SimpleEigen::abs< float >(SimpleEigen::ColVector< float > &)\n"
    "    SimpleEigen::abs< float >(SimpleEigen::Matrix< float > const &)\n"
    "    SimpleEigen::abs< float >(SimpleEigen::ColMatrix< float > const &)\n"
    "    SimpleEigen::abs< float >(SimpleEigen::Array< float > const &)\n"
    "    SimpleEigen::abs< float >(SimpleEigen::Array2D< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_inversef__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::inverse< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::inverse< float >",1,"SimpleEigen::RowVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("inversef",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR inverse< float >(*arg1);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_inversef__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::inverse< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::inverse< float >",1,"SimpleEigen::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("inversef",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR inverse< float >(*arg1);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_inversef__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::inverse< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::inverse< float >",1,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("inversef",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR inverse< float >((SimpleEigen::Matrix< float > const &)*arg1);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_inversef__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::inverse< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::inverse< float >",1,"SimpleEigen::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("inversef",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR inverse< float >((SimpleEigen::ColMatrix< float > const &)*arg1);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_inversef__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::inverse< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::inverse< float >",1,"SimpleEigen::Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("inversef",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR inverse< float >((SimpleEigen::Array< float > const &)*arg1);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_inversef__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::inverse< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::inverse< float >",1,"SimpleEigen::Array2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("inversef",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR inverse< float >((SimpleEigen::Array2D< float > const &)*arg1);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_inversef(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_inversef__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_inversef__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_inversef__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_inversef__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_inversef__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_inversef__SWIG_5(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'inversef'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::inverse< float >(SimpleEigen::RowVector< float > &)\n"
    "    SimpleEigen::inverse< float >(SimpleEigen::ColVector< float > &)\n"
    "    SimpleEigen::inverse< float >(SimpleEigen::Matrix< float > const &)\n"
    "    SimpleEigen::inverse< float >(SimpleEigen::ColMatrix< float > const &)\n"
    "    SimpleEigen::inverse< float >(SimpleEigen::Array< float > const &)\n"
    "    SimpleEigen::inverse< float >(SimpleEigen::Array2D< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_expf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::exp< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::exp< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("expf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR exp< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::exp< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::exp< float >",1,"SimpleEigen::RowVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("expf",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR exp< float >(*arg1);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::exp< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::exp< float >",1,"SimpleEigen::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("expf",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR exp< float >(*arg1);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::exp< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::exp< float >",1,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("expf",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR exp< float >((SimpleEigen::Matrix< float > const &)*arg1);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::exp< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::exp< float >",1,"SimpleEigen::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("expf",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR exp< float >((SimpleEigen::ColMatrix< float > const &)*arg1);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::exp< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::exp< float >",1,"SimpleEigen::Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("expf",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR exp< float >((SimpleEigen::Array< float > const &)*arg1);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::exp< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::exp< float >",1,"SimpleEigen::Array2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("expf",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR exp< float >((SimpleEigen::Array2D< float > const &)*arg1);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_expf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_expf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_expf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_expf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_expf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_expf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_expf__SWIG_6(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'expf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::exp< float >(SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::exp< float >(SimpleEigen::RowVector< float > &)\n"
    "    SimpleEigen::exp< float >(SimpleEigen::ColVector< float > &)\n"
    "    SimpleEigen::exp< float >(SimpleEigen::Matrix< float > const &)\n"
    "    SimpleEigen::exp< float >(SimpleEigen::ColMatrix< float > const &)\n"
    "    SimpleEigen::exp< float >(SimpleEigen::Array< float > const &)\n"
    "    SimpleEigen::exp< float >(SimpleEigen::Array2D< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_logf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::log< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::log< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("logf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR log< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::log< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::log< float >",1,"SimpleEigen::RowVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("logf",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR log< float >(*arg1);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::log< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::log< float >",1,"SimpleEigen::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("logf",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR log< float >(*arg1);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::log< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::log< float >",1,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("logf",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR log< float >((SimpleEigen::Matrix< float > const &)*arg1);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::log< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::log< float >",1,"SimpleEigen::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("logf",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR log< float >((SimpleEigen::ColMatrix< float > const &)*arg1);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::log< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::log< float >",1,"SimpleEigen::Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("logf",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR log< float >((SimpleEigen::Array< float > const &)*arg1);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::log< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::log< float >",1,"SimpleEigen::Array2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("logf",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR log< float >((SimpleEigen::Array2D< float > const &)*arg1);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_logf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_logf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_logf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_logf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_logf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_logf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_logf__SWIG_6(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'logf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::log< float >(SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::log< float >(SimpleEigen::RowVector< float > &)\n"
    "    SimpleEigen::log< float >(SimpleEigen::ColVector< float > &)\n"
    "    SimpleEigen::log< float >(SimpleEigen::Matrix< float > const &)\n"
    "    SimpleEigen::log< float >(SimpleEigen::ColMatrix< float > const &)\n"
    "    SimpleEigen::log< float >(SimpleEigen::Array< float > const &)\n"
    "    SimpleEigen::log< float >(SimpleEigen::Array2D< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_log1pf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::log1p< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::log1p< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("log1pf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR log1p< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::log1p< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::log1p< float >",1,"SimpleEigen::RowVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("log1pf",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR log1p< float >(*arg1);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::log1p< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::log1p< float >",1,"SimpleEigen::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("log1pf",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR log1p< float >(*arg1);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::log1p< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::log1p< float >",1,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("log1pf",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR log1p< float >((SimpleEigen::Matrix< float > const &)*arg1);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::log1p< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::log1p< float >",1,"SimpleEigen::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("log1pf",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR log1p< float >((SimpleEigen::ColMatrix< float > const &)*arg1);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::log1p< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::log1p< float >",1,"SimpleEigen::Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("log1pf",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR log1p< float >((SimpleEigen::Array< float > const &)*arg1);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::log1p< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::log1p< float >",1,"SimpleEigen::Array2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("log1pf",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR log1p< float >((SimpleEigen::Array2D< float > const &)*arg1);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log1pf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log1pf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log1pf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log1pf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log1pf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log1pf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log1pf__SWIG_6(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'log1pf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::log1p< float >(SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::log1p< float >(SimpleEigen::RowVector< float > &)\n"
    "    SimpleEigen::log1p< float >(SimpleEigen::ColVector< float > &)\n"
    "    SimpleEigen::log1p< float >(SimpleEigen::Matrix< float > const &)\n"
    "    SimpleEigen::log1p< float >(SimpleEigen::ColMatrix< float > const &)\n"
    "    SimpleEigen::log1p< float >(SimpleEigen::Array< float > const &)\n"
    "    SimpleEigen::log1p< float >(SimpleEigen::Array2D< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_log10f__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::log10< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::log10< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("log10f",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR log10< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10f__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::log10< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::log10< float >",1,"SimpleEigen::RowVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("log10f",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR log10< float >(*arg1);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10f__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::log10< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::log10< float >",1,"SimpleEigen::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("log10f",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR log10< float >(*arg1);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10f__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::log10< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::log10< float >",1,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("log10f",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR log10< float >((SimpleEigen::Matrix< float > const &)*arg1);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10f__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::log10< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::log10< float >",1,"SimpleEigen::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("log10f",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR log10< float >((SimpleEigen::ColMatrix< float > const &)*arg1);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10f__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::log10< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::log10< float >",1,"SimpleEigen::Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("log10f",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR log10< float >((SimpleEigen::Array< float > const &)*arg1);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10f__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::log10< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::log10< float >",1,"SimpleEigen::Array2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("log10f",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR log10< float >((SimpleEigen::Array2D< float > const &)*arg1);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10f(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log10f__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log10f__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log10f__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log10f__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log10f__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log10f__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log10f__SWIG_6(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'log10f'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::log10< float >(SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::log10< float >(SimpleEigen::RowVector< float > &)\n"
    "    SimpleEigen::log10< float >(SimpleEigen::ColVector< float > &)\n"
    "    SimpleEigen::log10< float >(SimpleEigen::Matrix< float > const &)\n"
    "    SimpleEigen::log10< float >(SimpleEigen::ColMatrix< float > const &)\n"
    "    SimpleEigen::log10< float >(SimpleEigen::Array< float > const &)\n"
    "    SimpleEigen::log10< float >(SimpleEigen::Array2D< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_powf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::pow< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::pow< float >",1,"SimpleEigen::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::pow< float >",2,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("powf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("powf",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR pow< float >((SimpleEigen::Scalar< float > const &)*arg1,(SimpleEigen::Scalar< float > const &)*arg2);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::pow< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::pow< float >",1,"SimpleEigen::RowVector< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::pow< float >",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("powf",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR pow< float >(*arg1,(float const &)*arg2);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::pow< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::pow< float >",1,"SimpleEigen::ColVector< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::pow< float >",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("powf",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR pow< float >(*arg1,(float const &)*arg2);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::pow< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::pow< float >",1,"SimpleEigen::Matrix< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::pow< float >",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("powf",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR pow< float >((SimpleEigen::Matrix< float > const &)*arg1,(float const &)*arg2);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::pow< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::pow< float >",1,"SimpleEigen::ColMatrix< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::pow< float >",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("powf",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR pow< float >((SimpleEigen::ColMatrix< float > const &)*arg1,(float const &)*arg2);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::pow< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::pow< float >",1,"SimpleEigen::Array< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::pow< float >",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("powf",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR pow< float >((SimpleEigen::Array< float > const &)*arg1,(float const &)*arg2);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::pow< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::pow< float >",1,"SimpleEigen::Array2D< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::pow< float >",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("powf",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR pow< float >((SimpleEigen::Array2D< float > const &)*arg1,(float const &)*arg2);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powf(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_powf__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_powf__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_powf__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_powf__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_powf__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_powf__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_powf__SWIG_6(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'powf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::pow< float >(SimpleEigen::Scalar< float > const &,SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::pow< float >(SimpleEigen::RowVector< float > &,float const &)\n"
    "    SimpleEigen::pow< float >(SimpleEigen::ColVector< float > &,float const &)\n"
    "    SimpleEigen::pow< float >(SimpleEigen::Matrix< float > const &,float const &)\n"
    "    SimpleEigen::pow< float >(SimpleEigen::ColMatrix< float > const &,float const &)\n"
    "    SimpleEigen::pow< float >(SimpleEigen::Array< float > const &,float const &)\n"
    "    SimpleEigen::pow< float >(SimpleEigen::Array2D< float > const &,float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_sqrtf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::sqrt< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::sqrt< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("sqrtf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR sqrt< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::sqrt< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::sqrt< float >",1,"SimpleEigen::RowVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("sqrtf",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR sqrt< float >(*arg1);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::sqrt< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::sqrt< float >",1,"SimpleEigen::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("sqrtf",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR sqrt< float >(*arg1);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::sqrt< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::sqrt< float >",1,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("sqrtf",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR sqrt< float >((SimpleEigen::Matrix< float > const &)*arg1);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::sqrt< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::sqrt< float >",1,"SimpleEigen::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("sqrtf",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR sqrt< float >((SimpleEigen::ColMatrix< float > const &)*arg1);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::sqrt< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::sqrt< float >",1,"SimpleEigen::Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("sqrtf",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR sqrt< float >((SimpleEigen::Array< float > const &)*arg1);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::sqrt< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::sqrt< float >",1,"SimpleEigen::Array2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("sqrtf",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR sqrt< float >((SimpleEigen::Array2D< float > const &)*arg1);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sqrtf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sqrtf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sqrtf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sqrtf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sqrtf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sqrtf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sqrtf__SWIG_6(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sqrtf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::sqrt< float >(SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::sqrt< float >(SimpleEigen::RowVector< float > &)\n"
    "    SimpleEigen::sqrt< float >(SimpleEigen::ColVector< float > &)\n"
    "    SimpleEigen::sqrt< float >(SimpleEigen::Matrix< float > const &)\n"
    "    SimpleEigen::sqrt< float >(SimpleEigen::ColMatrix< float > const &)\n"
    "    SimpleEigen::sqrt< float >(SimpleEigen::Array< float > const &)\n"
    "    SimpleEigen::sqrt< float >(SimpleEigen::Array2D< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_rsqrtf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::rsqrt< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::rsqrt< float >",1,"SimpleEigen::RowVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("rsqrtf",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR rsqrt< float >(*arg1);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rsqrtf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::rsqrt< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::rsqrt< float >",1,"SimpleEigen::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("rsqrtf",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR rsqrt< float >(*arg1);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rsqrtf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::rsqrt< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::rsqrt< float >",1,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("rsqrtf",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR rsqrt< float >((SimpleEigen::Matrix< float > const &)*arg1);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rsqrtf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::rsqrt< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::rsqrt< float >",1,"SimpleEigen::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("rsqrtf",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR rsqrt< float >((SimpleEigen::ColMatrix< float > const &)*arg1);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rsqrtf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::rsqrt< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::rsqrt< float >",1,"SimpleEigen::Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("rsqrtf",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR rsqrt< float >((SimpleEigen::Array< float > const &)*arg1);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rsqrtf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::rsqrt< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::rsqrt< float >",1,"SimpleEigen::Array2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("rsqrtf",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR rsqrt< float >((SimpleEigen::Array2D< float > const &)*arg1);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rsqrtf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_rsqrtf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_rsqrtf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_rsqrtf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_rsqrtf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_rsqrtf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_rsqrtf__SWIG_5(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rsqrtf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::rsqrt< float >(SimpleEigen::RowVector< float > &)\n"
    "    SimpleEigen::rsqrt< float >(SimpleEigen::ColVector< float > &)\n"
    "    SimpleEigen::rsqrt< float >(SimpleEigen::Matrix< float > const &)\n"
    "    SimpleEigen::rsqrt< float >(SimpleEigen::ColMatrix< float > const &)\n"
    "    SimpleEigen::rsqrt< float >(SimpleEigen::Array< float > const &)\n"
    "    SimpleEigen::rsqrt< float >(SimpleEigen::Array2D< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_squaref__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::square< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::square< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("squaref",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR square< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squaref__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::square< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::square< float >",1,"SimpleEigen::RowVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("squaref",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR square< float >(*arg1);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squaref__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::square< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::square< float >",1,"SimpleEigen::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("squaref",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR square< float >(*arg1);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squaref__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::square< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::square< float >",1,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("squaref",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR square< float >((SimpleEigen::Matrix< float > const &)*arg1);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squaref__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::square< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::square< float >",1,"SimpleEigen::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("squaref",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR square< float >((SimpleEigen::ColMatrix< float > const &)*arg1);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squaref__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::square< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::square< float >",1,"SimpleEigen::Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("squaref",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR square< float >((SimpleEigen::Array< float > const &)*arg1);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squaref__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::square< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::square< float >",1,"SimpleEigen::Array2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("squaref",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR square< float >((SimpleEigen::Array2D< float > const &)*arg1);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squaref(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_squaref__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_squaref__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_squaref__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_squaref__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_squaref__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_squaref__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_squaref__SWIG_6(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'squaref'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::square< float >(SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::square< float >(SimpleEigen::RowVector< float > &)\n"
    "    SimpleEigen::square< float >(SimpleEigen::ColVector< float > &)\n"
    "    SimpleEigen::square< float >(SimpleEigen::Matrix< float > const &)\n"
    "    SimpleEigen::square< float >(SimpleEigen::ColMatrix< float > const &)\n"
    "    SimpleEigen::square< float >(SimpleEigen::Array< float > const &)\n"
    "    SimpleEigen::square< float >(SimpleEigen::Array2D< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cubef__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::cube< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::cube< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("cubef",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR cube< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cubef__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::cube< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::cube< float >",1,"SimpleEigen::RowVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("cubef",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR cube< float >(*arg1);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cubef__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::cube< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::cube< float >",1,"SimpleEigen::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("cubef",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR cube< float >(*arg1);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cubef__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::cube< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::cube< float >",1,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("cubef",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR cube< float >((SimpleEigen::Matrix< float > const &)*arg1);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cubef__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::cube< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::cube< float >",1,"SimpleEigen::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("cubef",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR cube< float >((SimpleEigen::ColMatrix< float > const &)*arg1);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cubef__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::cube< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::cube< float >",1,"SimpleEigen::Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("cubef",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR cube< float >((SimpleEigen::Array< float > const &)*arg1);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cubef__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::cube< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::cube< float >",1,"SimpleEigen::Array2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("cubef",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR cube< float >((SimpleEigen::Array2D< float > const &)*arg1);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cubef(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cubef__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cubef__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cubef__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cubef__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cubef__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cubef__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cubef__SWIG_6(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cubef'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::cube< float >(SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::cube< float >(SimpleEigen::RowVector< float > &)\n"
    "    SimpleEigen::cube< float >(SimpleEigen::ColVector< float > &)\n"
    "    SimpleEigen::cube< float >(SimpleEigen::Matrix< float > const &)\n"
    "    SimpleEigen::cube< float >(SimpleEigen::ColMatrix< float > const &)\n"
    "    SimpleEigen::cube< float >(SimpleEigen::Array< float > const &)\n"
    "    SimpleEigen::cube< float >(SimpleEigen::Array2D< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_abs2f__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::abs2< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::abs2< float >",1,"SimpleEigen::RowVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("abs2f",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR abs2< float >(*arg1);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_abs2f__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::abs2< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::abs2< float >",1,"SimpleEigen::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("abs2f",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR abs2< float >(*arg1);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_abs2f__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::abs2< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::abs2< float >",1,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("abs2f",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR abs2< float >((SimpleEigen::Matrix< float > const &)*arg1);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_abs2f__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::abs2< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::abs2< float >",1,"SimpleEigen::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("abs2f",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR abs2< float >((SimpleEigen::ColMatrix< float > const &)*arg1);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_abs2f__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::abs2< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::abs2< float >",1,"SimpleEigen::Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("abs2f",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR abs2< float >((SimpleEigen::Array< float > const &)*arg1);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_abs2f__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::abs2< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::abs2< float >",1,"SimpleEigen::Array2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("abs2f",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR abs2< float >((SimpleEigen::Array2D< float > const &)*arg1);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_abs2f(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_abs2f__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_abs2f__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_abs2f__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_abs2f__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_abs2f__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_abs2f__SWIG_5(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'abs2f'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::abs2< float >(SimpleEigen::RowVector< float > &)\n"
    "    SimpleEigen::abs2< float >(SimpleEigen::ColVector< float > &)\n"
    "    SimpleEigen::abs2< float >(SimpleEigen::Matrix< float > const &)\n"
    "    SimpleEigen::abs2< float >(SimpleEigen::ColMatrix< float > const &)\n"
    "    SimpleEigen::abs2< float >(SimpleEigen::Array< float > const &)\n"
    "    SimpleEigen::abs2< float >(SimpleEigen::Array2D< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_sinf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::sin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::sin< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("sinf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR sin< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::sin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::sin< float >",1,"SimpleEigen::RowVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("sinf",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR sin< float >(*arg1);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::sin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::sin< float >",1,"SimpleEigen::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("sinf",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR sin< float >(*arg1);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::sin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::sin< float >",1,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("sinf",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR sin< float >((SimpleEigen::Matrix< float > const &)*arg1);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::sin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::sin< float >",1,"SimpleEigen::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("sinf",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR sin< float >((SimpleEigen::ColMatrix< float > const &)*arg1);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::sin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::sin< float >",1,"SimpleEigen::Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("sinf",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR sin< float >((SimpleEigen::Array< float > const &)*arg1);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::sin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::sin< float >",1,"SimpleEigen::Array2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("sinf",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR sin< float >((SimpleEigen::Array2D< float > const &)*arg1);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinf__SWIG_6(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sinf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::sin< float >(SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::sin< float >(SimpleEigen::RowVector< float > &)\n"
    "    SimpleEigen::sin< float >(SimpleEigen::ColVector< float > &)\n"
    "    SimpleEigen::sin< float >(SimpleEigen::Matrix< float > const &)\n"
    "    SimpleEigen::sin< float >(SimpleEigen::ColMatrix< float > const &)\n"
    "    SimpleEigen::sin< float >(SimpleEigen::Array< float > const &)\n"
    "    SimpleEigen::sin< float >(SimpleEigen::Array2D< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cosf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::cos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::cos< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("cosf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR cos< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::cos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::cos< float >",1,"SimpleEigen::RowVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("cosf",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR cos< float >(*arg1);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::cos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::cos< float >",1,"SimpleEigen::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("cosf",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR cos< float >(*arg1);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::cos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::cos< float >",1,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("cosf",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR cos< float >((SimpleEigen::Matrix< float > const &)*arg1);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::cos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::cos< float >",1,"SimpleEigen::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("cosf",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR cos< float >((SimpleEigen::ColMatrix< float > const &)*arg1);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::cos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::cos< float >",1,"SimpleEigen::Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("cosf",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR cos< float >((SimpleEigen::Array< float > const &)*arg1);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::cos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::cos< float >",1,"SimpleEigen::Array2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("cosf",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR cos< float >((SimpleEigen::Array2D< float > const &)*arg1);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cosf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cosf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cosf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cosf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cosf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cosf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cosf__SWIG_6(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cosf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::cos< float >(SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::cos< float >(SimpleEigen::RowVector< float > &)\n"
    "    SimpleEigen::cos< float >(SimpleEigen::ColVector< float > &)\n"
    "    SimpleEigen::cos< float >(SimpleEigen::Matrix< float > const &)\n"
    "    SimpleEigen::cos< float >(SimpleEigen::ColMatrix< float > const &)\n"
    "    SimpleEigen::cos< float >(SimpleEigen::Array< float > const &)\n"
    "    SimpleEigen::cos< float >(SimpleEigen::Array2D< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_tanf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::tan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::tan< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("tanf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR tan< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::tan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::tan< float >",1,"SimpleEigen::RowVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("tanf",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR tan< float >(*arg1);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::tan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::tan< float >",1,"SimpleEigen::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("tanf",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR tan< float >(*arg1);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::tan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::tan< float >",1,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("tanf",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR tan< float >((SimpleEigen::Matrix< float > const &)*arg1);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::tan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::tan< float >",1,"SimpleEigen::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("tanf",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR tan< float >((SimpleEigen::ColMatrix< float > const &)*arg1);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::tan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::tan< float >",1,"SimpleEigen::Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("tanf",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR tan< float >((SimpleEigen::Array< float > const &)*arg1);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::tan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::tan< float >",1,"SimpleEigen::Array2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("tanf",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR tan< float >((SimpleEigen::Array2D< float > const &)*arg1);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanf__SWIG_6(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'tanf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::tan< float >(SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::tan< float >(SimpleEigen::RowVector< float > &)\n"
    "    SimpleEigen::tan< float >(SimpleEigen::ColVector< float > &)\n"
    "    SimpleEigen::tan< float >(SimpleEigen::Matrix< float > const &)\n"
    "    SimpleEigen::tan< float >(SimpleEigen::ColMatrix< float > const &)\n"
    "    SimpleEigen::tan< float >(SimpleEigen::Array< float > const &)\n"
    "    SimpleEigen::tan< float >(SimpleEigen::Array2D< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_asinf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::asin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::asin< float >",1,"SimpleEigen::RowVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("asinf",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR asin< float >(*arg1);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::asin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::asin< float >",1,"SimpleEigen::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("asinf",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR asin< float >(*arg1);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::asin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::asin< float >",1,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("asinf",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR asin< float >((SimpleEigen::Matrix< float > const &)*arg1);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::asin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::asin< float >",1,"SimpleEigen::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("asinf",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR asin< float >((SimpleEigen::ColMatrix< float > const &)*arg1);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::asin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::asin< float >",1,"SimpleEigen::Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("asinf",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR asin< float >((SimpleEigen::Array< float > const &)*arg1);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::asin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::asin< float >",1,"SimpleEigen::Array2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("asinf",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR asin< float >((SimpleEigen::Array2D< float > const &)*arg1);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_asinf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_asinf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_asinf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_asinf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_asinf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_asinf__SWIG_5(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'asinf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::asin< float >(SimpleEigen::RowVector< float > &)\n"
    "    SimpleEigen::asin< float >(SimpleEigen::ColVector< float > &)\n"
    "    SimpleEigen::asin< float >(SimpleEigen::Matrix< float > const &)\n"
    "    SimpleEigen::asin< float >(SimpleEigen::ColMatrix< float > const &)\n"
    "    SimpleEigen::asin< float >(SimpleEigen::Array< float > const &)\n"
    "    SimpleEigen::asin< float >(SimpleEigen::Array2D< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_acosf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::acos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::acos< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("acosf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR acos< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::acos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::acos< float >",1,"SimpleEigen::RowVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("acosf",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR acos< float >(*arg1);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::acos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::acos< float >",1,"SimpleEigen::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("acosf",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR acos< float >(*arg1);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::acos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::acos< float >",1,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("acosf",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR acos< float >((SimpleEigen::Matrix< float > const &)*arg1);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::acos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::acos< float >",1,"SimpleEigen::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("acosf",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR acos< float >((SimpleEigen::ColMatrix< float > const &)*arg1);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::acos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::acos< float >",1,"SimpleEigen::Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("acosf",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR acos< float >((SimpleEigen::Array< float > const &)*arg1);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::acos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::acos< float >",1,"SimpleEigen::Array2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("acosf",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR acos< float >((SimpleEigen::Array2D< float > const &)*arg1);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acosf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acosf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acosf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acosf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acosf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acosf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acosf__SWIG_6(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'acosf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::acos< float >(SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::acos< float >(SimpleEigen::RowVector< float > &)\n"
    "    SimpleEigen::acos< float >(SimpleEigen::ColVector< float > &)\n"
    "    SimpleEigen::acos< float >(SimpleEigen::Matrix< float > const &)\n"
    "    SimpleEigen::acos< float >(SimpleEigen::ColMatrix< float > const &)\n"
    "    SimpleEigen::acos< float >(SimpleEigen::Array< float > const &)\n"
    "    SimpleEigen::acos< float >(SimpleEigen::Array2D< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_atanf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::atan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::atan< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("atanf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR atan< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::atan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::atan< float >",1,"SimpleEigen::RowVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("atanf",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR atan< float >(*arg1);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::atan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::atan< float >",1,"SimpleEigen::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("atanf",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR atan< float >(*arg1);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::atan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::atan< float >",1,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("atanf",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR atan< float >((SimpleEigen::Matrix< float > const &)*arg1);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::atan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::atan< float >",1,"SimpleEigen::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("atanf",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR atan< float >((SimpleEigen::ColMatrix< float > const &)*arg1);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::atan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::atan< float >",1,"SimpleEigen::Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("atanf",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR atan< float >((SimpleEigen::Array< float > const &)*arg1);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::atan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::atan< float >",1,"SimpleEigen::Array2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("atanf",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR atan< float >((SimpleEigen::Array2D< float > const &)*arg1);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atanf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atanf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atanf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atanf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atanf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atanf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atanf__SWIG_6(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'atanf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::atan< float >(SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::atan< float >(SimpleEigen::RowVector< float > &)\n"
    "    SimpleEigen::atan< float >(SimpleEigen::ColVector< float > &)\n"
    "    SimpleEigen::atan< float >(SimpleEigen::Matrix< float > const &)\n"
    "    SimpleEigen::atan< float >(SimpleEigen::ColMatrix< float > const &)\n"
    "    SimpleEigen::atan< float >(SimpleEigen::Array< float > const &)\n"
    "    SimpleEigen::atan< float >(SimpleEigen::Array2D< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_sinhf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::sinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::sinh< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("sinhf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR sinh< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::sinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::sinh< float >",1,"SimpleEigen::RowVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("sinhf",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR sinh< float >(*arg1);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::sinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::sinh< float >",1,"SimpleEigen::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("sinhf",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR sinh< float >(*arg1);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::sinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::sinh< float >",1,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("sinhf",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR sinh< float >((SimpleEigen::Matrix< float > const &)*arg1);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::sinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::sinh< float >",1,"SimpleEigen::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("sinhf",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR sinh< float >((SimpleEigen::ColMatrix< float > const &)*arg1);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::sinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::sinh< float >",1,"SimpleEigen::Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("sinhf",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR sinh< float >((SimpleEigen::Array< float > const &)*arg1);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::sinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::sinh< float >",1,"SimpleEigen::Array2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("sinhf",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR sinh< float >((SimpleEigen::Array2D< float > const &)*arg1);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinhf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinhf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinhf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinhf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinhf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinhf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinhf__SWIG_6(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sinhf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::sinh< float >(SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::sinh< float >(SimpleEigen::RowVector< float > &)\n"
    "    SimpleEigen::sinh< float >(SimpleEigen::ColVector< float > &)\n"
    "    SimpleEigen::sinh< float >(SimpleEigen::Matrix< float > const &)\n"
    "    SimpleEigen::sinh< float >(SimpleEigen::ColMatrix< float > const &)\n"
    "    SimpleEigen::sinh< float >(SimpleEigen::Array< float > const &)\n"
    "    SimpleEigen::sinh< float >(SimpleEigen::Array2D< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_coshf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::cosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::cosh< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("coshf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR cosh< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::cosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::cosh< float >",1,"SimpleEigen::RowVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("coshf",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR cosh< float >(*arg1);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::cosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::cosh< float >",1,"SimpleEigen::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("coshf",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR cosh< float >(*arg1);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::cosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::cosh< float >",1,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("coshf",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR cosh< float >((SimpleEigen::Matrix< float > const &)*arg1);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::cosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::cosh< float >",1,"SimpleEigen::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("coshf",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR cosh< float >((SimpleEigen::ColMatrix< float > const &)*arg1);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::cosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::cosh< float >",1,"SimpleEigen::Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("coshf",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR cosh< float >((SimpleEigen::Array< float > const &)*arg1);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::cosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::cosh< float >",1,"SimpleEigen::Array2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("coshf",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR cosh< float >((SimpleEigen::Array2D< float > const &)*arg1);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_coshf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_coshf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_coshf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_coshf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_coshf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_coshf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_coshf__SWIG_6(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'coshf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::cosh< float >(SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::cosh< float >(SimpleEigen::RowVector< float > &)\n"
    "    SimpleEigen::cosh< float >(SimpleEigen::ColVector< float > &)\n"
    "    SimpleEigen::cosh< float >(SimpleEigen::Matrix< float > const &)\n"
    "    SimpleEigen::cosh< float >(SimpleEigen::ColMatrix< float > const &)\n"
    "    SimpleEigen::cosh< float >(SimpleEigen::Array< float > const &)\n"
    "    SimpleEigen::cosh< float >(SimpleEigen::Array2D< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_tanhf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::tanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::tanh< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("tanhf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR tanh< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::tanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::tanh< float >",1,"SimpleEigen::RowVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("tanhf",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR tanh< float >(*arg1);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::tanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::tanh< float >",1,"SimpleEigen::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("tanhf",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR tanh< float >(*arg1);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::tanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::tanh< float >",1,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("tanhf",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR tanh< float >((SimpleEigen::Matrix< float > const &)*arg1);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::tanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::tanh< float >",1,"SimpleEigen::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("tanhf",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR tanh< float >((SimpleEigen::ColMatrix< float > const &)*arg1);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::tanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::tanh< float >",1,"SimpleEigen::Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("tanhf",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR tanh< float >((SimpleEigen::Array< float > const &)*arg1);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::tanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::tanh< float >",1,"SimpleEigen::Array2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("tanhf",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR tanh< float >((SimpleEigen::Array2D< float > const &)*arg1);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanhf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanhf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanhf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanhf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanhf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanhf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanhf__SWIG_6(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'tanhf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::tanh< float >(SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::tanh< float >(SimpleEigen::RowVector< float > &)\n"
    "    SimpleEigen::tanh< float >(SimpleEigen::ColVector< float > &)\n"
    "    SimpleEigen::tanh< float >(SimpleEigen::Matrix< float > const &)\n"
    "    SimpleEigen::tanh< float >(SimpleEigen::ColMatrix< float > const &)\n"
    "    SimpleEigen::tanh< float >(SimpleEigen::Array< float > const &)\n"
    "    SimpleEigen::tanh< float >(SimpleEigen::Array2D< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_asinhf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::asinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::asinh< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("asinhf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR asinh< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinhf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::asinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::asinh< float >",1,"SimpleEigen::RowVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("asinhf",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR asinh< float >((SimpleEigen::RowVector< float > const &)*arg1);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinhf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::asinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::asinh< float >",1,"SimpleEigen::ColVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("asinhf",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR asinh< float >((SimpleEigen::ColVector< float > const &)*arg1);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinhf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::asinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::asinh< float >",1,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("asinhf",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR asinh< float >((SimpleEigen::Matrix< float > const &)*arg1);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinhf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::asinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::asinh< float >",1,"SimpleEigen::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("asinhf",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR asinh< float >((SimpleEigen::ColMatrix< float > const &)*arg1);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinhf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::asinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::asinh< float >",1,"SimpleEigen::Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("asinhf",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR asinh< float >((SimpleEigen::Array< float > const &)*arg1);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinhf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::asinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::asinh< float >",1,"SimpleEigen::Array2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("asinhf",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR asinh< float >((SimpleEigen::Array2D< float > const &)*arg1);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinhf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_asinhf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_asinhf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_asinhf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_asinhf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_asinhf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_asinhf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_asinhf__SWIG_6(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'asinhf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::asinh< float >(SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::asinh< float >(SimpleEigen::RowVector< float > const &)\n"
    "    SimpleEigen::asinh< float >(SimpleEigen::ColVector< float > const &)\n"
    "    SimpleEigen::asinh< float >(SimpleEigen::Matrix< float > const &)\n"
    "    SimpleEigen::asinh< float >(SimpleEigen::ColMatrix< float > const &)\n"
    "    SimpleEigen::asinh< float >(SimpleEigen::Array< float > const &)\n"
    "    SimpleEigen::asinh< float >(SimpleEigen::Array2D< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_acoshf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::acosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::acosh< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("acoshf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR acosh< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acoshf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::acosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::acosh< float >",1,"SimpleEigen::RowVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("acoshf",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR acosh< float >((SimpleEigen::RowVector< float > const &)*arg1);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acoshf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::acosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::acosh< float >",1,"SimpleEigen::ColVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("acoshf",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR acosh< float >((SimpleEigen::ColVector< float > const &)*arg1);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acoshf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::acosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::acosh< float >",1,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("acoshf",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR acosh< float >((SimpleEigen::Matrix< float > const &)*arg1);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acoshf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::acosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::acosh< float >",1,"SimpleEigen::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("acoshf",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR acosh< float >((SimpleEigen::ColMatrix< float > const &)*arg1);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acoshf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::acosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::acosh< float >",1,"SimpleEigen::Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("acoshf",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR acosh< float >((SimpleEigen::Array< float > const &)*arg1);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acoshf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::acosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::acosh< float >",1,"SimpleEigen::Array2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("acoshf",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR acosh< float >((SimpleEigen::Array2D< float > const &)*arg1);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acoshf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acoshf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acoshf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acoshf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acoshf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acoshf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acoshf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acoshf__SWIG_6(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'acoshf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::acosh< float >(SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::acosh< float >(SimpleEigen::RowVector< float > const &)\n"
    "    SimpleEigen::acosh< float >(SimpleEigen::ColVector< float > const &)\n"
    "    SimpleEigen::acosh< float >(SimpleEigen::Matrix< float > const &)\n"
    "    SimpleEigen::acosh< float >(SimpleEigen::ColMatrix< float > const &)\n"
    "    SimpleEigen::acosh< float >(SimpleEigen::Array< float > const &)\n"
    "    SimpleEigen::acosh< float >(SimpleEigen::Array2D< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_atanhf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::atanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::atanh< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("atanhf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR atanh< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanhf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::atanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::atanh< float >",1,"SimpleEigen::RowVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("atanhf",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR atanh< float >((SimpleEigen::RowVector< float > const &)*arg1);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanhf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::atanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::atanh< float >",1,"SimpleEigen::ColVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("atanhf",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR atanh< float >((SimpleEigen::ColVector< float > const &)*arg1);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanhf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::atanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::atanh< float >",1,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("atanhf",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR atanh< float >((SimpleEigen::Matrix< float > const &)*arg1);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanhf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::atanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::atanh< float >",1,"SimpleEigen::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("atanhf",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR atanh< float >((SimpleEigen::ColMatrix< float > const &)*arg1);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanhf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::atanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::atanh< float >",1,"SimpleEigen::Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("atanhf",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR atanh< float >((SimpleEigen::Array< float > const &)*arg1);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanhf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::atanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::atanh< float >",1,"SimpleEigen::Array2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("atanhf",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR atanh< float >((SimpleEigen::Array2D< float > const &)*arg1);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanhf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atanhf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atanhf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atanhf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atanhf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atanhf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atanhf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atanhf__SWIG_6(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'atanhf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::atanh< float >(SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::atanh< float >(SimpleEigen::RowVector< float > const &)\n"
    "    SimpleEigen::atanh< float >(SimpleEigen::ColVector< float > const &)\n"
    "    SimpleEigen::atanh< float >(SimpleEigen::Matrix< float > const &)\n"
    "    SimpleEigen::atanh< float >(SimpleEigen::ColMatrix< float > const &)\n"
    "    SimpleEigen::atanh< float >(SimpleEigen::Array< float > const &)\n"
    "    SimpleEigen::atanh< float >(SimpleEigen::Array2D< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_atan2f(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::atan2< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::atan2< float >",1,"SimpleEigen::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::atan2< float >",2,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("atan2f",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("atan2f",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR atan2< float >((SimpleEigen::Scalar< float > const &)*arg1,(SimpleEigen::Scalar< float > const &)*arg2);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceilf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::ceil< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::ceil< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("ceilf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR ceil< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceilf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::ceil< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::ceil< float >",1,"SimpleEigen::RowVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("ceilf",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR ceil< float >(*arg1);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceilf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::ceil< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::ceil< float >",1,"SimpleEigen::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("ceilf",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR ceil< float >(*arg1);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceilf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ceil< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::ceil< float >",1,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("ceilf",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR ceil< float >((SimpleEigen::Matrix< float > const &)*arg1);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceilf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::ceil< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::ceil< float >",1,"SimpleEigen::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("ceilf",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR ceil< float >((SimpleEigen::ColMatrix< float > const &)*arg1);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceilf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::ceil< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::ceil< float >",1,"SimpleEigen::Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("ceilf",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR ceil< float >((SimpleEigen::Array< float > const &)*arg1);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceilf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::ceil< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::ceil< float >",1,"SimpleEigen::Array2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("ceilf",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR ceil< float >((SimpleEigen::Array2D< float > const &)*arg1);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceilf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ceilf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ceilf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ceilf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ceilf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ceilf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ceilf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ceilf__SWIG_6(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ceilf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::ceil< float >(SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::ceil< float >(SimpleEigen::RowVector< float > &)\n"
    "    SimpleEigen::ceil< float >(SimpleEigen::ColVector< float > &)\n"
    "    SimpleEigen::ceil< float >(SimpleEigen::Matrix< float > const &)\n"
    "    SimpleEigen::ceil< float >(SimpleEigen::ColMatrix< float > const &)\n"
    "    SimpleEigen::ceil< float >(SimpleEigen::Array< float > const &)\n"
    "    SimpleEigen::ceil< float >(SimpleEigen::Array2D< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_floorf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::floor< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::floor< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("floorf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR floor< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floorf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::floor< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::floor< float >",1,"SimpleEigen::RowVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("floorf",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR floor< float >(*arg1);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floorf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::floor< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::floor< float >",1,"SimpleEigen::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("floorf",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR floor< float >(*arg1);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floorf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::floor< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::floor< float >",1,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("floorf",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR floor< float >((SimpleEigen::Matrix< float > const &)*arg1);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floorf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::floor< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::floor< float >",1,"SimpleEigen::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("floorf",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR floor< float >((SimpleEigen::ColMatrix< float > const &)*arg1);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floorf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::floor< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::floor< float >",1,"SimpleEigen::Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("floorf",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR floor< float >((SimpleEigen::Array< float > const &)*arg1);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floorf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::floor< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::floor< float >",1,"SimpleEigen::Array2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("floorf",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR floor< float >((SimpleEigen::Array2D< float > const &)*arg1);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floorf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_floorf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_floorf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_floorf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_floorf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_floorf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_floorf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_floorf__SWIG_6(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'floorf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::floor< float >(SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::floor< float >(SimpleEigen::RowVector< float > &)\n"
    "    SimpleEigen::floor< float >(SimpleEigen::ColVector< float > &)\n"
    "    SimpleEigen::floor< float >(SimpleEigen::Matrix< float > const &)\n"
    "    SimpleEigen::floor< float >(SimpleEigen::ColMatrix< float > const &)\n"
    "    SimpleEigen::floor< float >(SimpleEigen::Array< float > const &)\n"
    "    SimpleEigen::floor< float >(SimpleEigen::Array2D< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_roundf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::round< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::round< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("roundf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR round< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::round< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::round< float >",1,"SimpleEigen::RowVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("roundf",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR round< float >(*arg1);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::round< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::round< float >",1,"SimpleEigen::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("roundf",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR round< float >(*arg1);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::round< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::round< float >",1,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("roundf",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR round< float >((SimpleEigen::Matrix< float > const &)*arg1);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::round< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::round< float >",1,"SimpleEigen::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("roundf",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR round< float >((SimpleEigen::ColMatrix< float > const &)*arg1);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::round< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::round< float >",1,"SimpleEigen::Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("roundf",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR round< float >((SimpleEigen::Array< float > const &)*arg1);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::round< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::round< float >",1,"SimpleEigen::Array2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("roundf",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR round< float >((SimpleEigen::Array2D< float > const &)*arg1);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_roundf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_roundf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_roundf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_roundf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_roundf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_roundf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_roundf__SWIG_6(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'roundf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::round< float >(SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::round< float >(SimpleEigen::RowVector< float > &)\n"
    "    SimpleEigen::round< float >(SimpleEigen::ColVector< float > &)\n"
    "    SimpleEigen::round< float >(SimpleEigen::Matrix< float > const &)\n"
    "    SimpleEigen::round< float >(SimpleEigen::ColMatrix< float > const &)\n"
    "    SimpleEigen::round< float >(SimpleEigen::Array< float > const &)\n"
    "    SimpleEigen::round< float >(SimpleEigen::Array2D< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_rintf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::rint< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::rint< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("rintf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR rint< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rintf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::RowVector< float > *arg1 = 0 ;
  SimpleEigen::RowVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::rint< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::rint< float >",1,"SimpleEigen::RowVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,0))){
    SWIG_fail_ptr("rintf",1,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR rint< float >((SimpleEigen::RowVector< float > const &)*arg1);
  {
    SimpleEigen::RowVector< float > * resultptr = new SimpleEigen::RowVector< float >((const SimpleEigen::RowVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__RowVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rintf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColVector< float > *arg1 = 0 ;
  SimpleEigen::ColVector< float > result;
  
  SWIG_check_num_args("SimpleEigen::rint< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::rint< float >",1,"SimpleEigen::ColVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,0))){
    SWIG_fail_ptr("rintf",1,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR rint< float >((SimpleEigen::ColVector< float > const &)*arg1);
  {
    SimpleEigen::ColVector< float > * resultptr = new SimpleEigen::ColVector< float >((const SimpleEigen::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rintf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Matrix< float > *arg1 = 0 ;
  SimpleEigen::Matrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::rint< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::rint< float >",1,"SimpleEigen::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,0))){
    SWIG_fail_ptr("rintf",1,SWIGTYPE_p_SimpleEigen__MatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR rint< float >((SimpleEigen::Matrix< float > const &)*arg1);
  {
    SimpleEigen::Matrix< float > * resultptr = new SimpleEigen::Matrix< float >((const SimpleEigen::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rintf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::ColMatrix< float > *arg1 = 0 ;
  SimpleEigen::ColMatrix< float > result;
  
  SWIG_check_num_args("SimpleEigen::rint< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::rint< float >",1,"SimpleEigen::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("rintf",1,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR rint< float >((SimpleEigen::ColMatrix< float > const &)*arg1);
  {
    SimpleEigen::ColMatrix< float > * resultptr = new SimpleEigen::ColMatrix< float >((const SimpleEigen::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rintf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array< float > *arg1 = 0 ;
  SimpleEigen::Array< float > result;
  
  SWIG_check_num_args("SimpleEigen::rint< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::rint< float >",1,"SimpleEigen::Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,0))){
    SWIG_fail_ptr("rintf",1,SWIGTYPE_p_SimpleEigen__ArrayT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR rint< float >((SimpleEigen::Array< float > const &)*arg1);
  {
    SimpleEigen::Array< float > * resultptr = new SimpleEigen::Array< float >((const SimpleEigen::Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rintf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Array2D< float > *arg1 = 0 ;
  SimpleEigen::Array2D< float > result;
  
  SWIG_check_num_args("SimpleEigen::rint< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::rint< float >",1,"SimpleEigen::Array2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,0))){
    SWIG_fail_ptr("rintf",1,SWIGTYPE_p_SimpleEigen__Array2DT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR rint< float >((SimpleEigen::Array2D< float > const &)*arg1);
  {
    SimpleEigen::Array2D< float > * resultptr = new SimpleEigen::Array2D< float >((const SimpleEigen::Array2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__Array2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rintf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_rintf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__RowVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_rintf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_rintf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_rintf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_rintf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_rintf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimpleEigen__Array2DT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_rintf__SWIG_6(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rintf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SimpleEigen::rint< float >(SimpleEigen::Scalar< float > const &)\n"
    "    SimpleEigen::rint< float >(SimpleEigen::RowVector< float > const &)\n"
    "    SimpleEigen::rint< float >(SimpleEigen::ColVector< float > const &)\n"
    "    SimpleEigen::rint< float >(SimpleEigen::Matrix< float > const &)\n"
    "    SimpleEigen::rint< float >(SimpleEigen::ColMatrix< float > const &)\n"
    "    SimpleEigen::rint< float >(SimpleEigen::Array< float > const &)\n"
    "    SimpleEigen::rint< float >(SimpleEigen::Array2D< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cbrtf(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::cbrt< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::cbrt< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("cbrtf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR cbrt< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copysignf(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::copysign< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::copysign< float >",1,"SimpleEigen::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::copysign< float >",2,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("copysignf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("copysignf",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR copysign< float >((SimpleEigen::Scalar< float > const &)*arg1,(SimpleEigen::Scalar< float > const &)*arg2);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erff(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::erf< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::erf< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("erff",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR erf< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfcf(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::erfc< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::erfc< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("erfcf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR erfc< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp2f(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::exp2< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::exp2< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("exp2f",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR exp2< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expm1f(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::expm1< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::expm1< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("expm1f",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR expm1< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fdimf(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::fdim< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::fdim< float >",1,"SimpleEigen::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::fdim< float >",2,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("fdimf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("fdimf",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR fdim< float >((SimpleEigen::Scalar< float > const &)*arg1,(SimpleEigen::Scalar< float > const &)*arg2);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaf(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  SimpleEigen::Scalar< float > *arg3 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::fma< float >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::fma< float >",1,"SimpleEigen::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::fma< float >",2,"SimpleEigen::Scalar< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SimpleEigen::fma< float >",3,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("fmaf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("fmaf",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("fmaf",3,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR fma< float >((SimpleEigen::Scalar< float > const &)*arg1,(SimpleEigen::Scalar< float > const &)*arg2,(SimpleEigen::Scalar< float > const &)*arg3);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaxf(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::fmax< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::fmax< float >",1,"SimpleEigen::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::fmax< float >",2,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("fmaxf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("fmaxf",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR fmax< float >((SimpleEigen::Scalar< float > const &)*arg1,(SimpleEigen::Scalar< float > const &)*arg2);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fminf(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::fmin< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::fmin< float >",1,"SimpleEigen::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::fmin< float >",2,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("fminf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("fminf",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR fmin< float >((SimpleEigen::Scalar< float > const &)*arg1,(SimpleEigen::Scalar< float > const &)*arg2);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmodf(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::fmod< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::fmod< float >",1,"SimpleEigen::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::fmod< float >",2,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("fmodf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("fmodf",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR fmod< float >((SimpleEigen::Scalar< float > const &)*arg1,(SimpleEigen::Scalar< float > const &)*arg2);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fpclassifyf(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  int result;
  
  SWIG_check_num_args("SimpleEigen::fpclassify< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::fpclassify< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("fpclassifyf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (int)SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR fpclassify< float >((SimpleEigen::Scalar< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hypot(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::hypot< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::hypot< float >",1,"SimpleEigen::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::hypot< float >",2,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("hypot",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("hypot",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR hypot< float >((SimpleEigen::Scalar< float > const &)*arg1,(SimpleEigen::Scalar< float > const &)*arg2);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ilogbf(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  int result;
  
  SWIG_check_num_args("SimpleEigen::ilogb< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::ilogb< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("ilogbf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (int)SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR ilogb< float >((SimpleEigen::Scalar< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isfinitef(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::isfinite< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::isfinite< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("isfinitef",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (bool)SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR isfinite< float >((SimpleEigen::Scalar< float > const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterf(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::isgreater< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::isgreater< float >",1,"SimpleEigen::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::isgreater< float >",2,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("isgreaterf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("isgreaterf",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (bool)SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR isgreater< float >((SimpleEigen::Scalar< float > const &)*arg1,(SimpleEigen::Scalar< float > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterequalf(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::isgreaterequal< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::isgreaterequal< float >",1,"SimpleEigen::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::isgreaterequal< float >",2,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("isgreaterequalf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("isgreaterequalf",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (bool)SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR isgreaterequal< float >((SimpleEigen::Scalar< float > const &)*arg1,(SimpleEigen::Scalar< float > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isinff(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::isinf< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::isinf< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("isinff",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (bool)SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR isinf< float >((SimpleEigen::Scalar< float > const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessf(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::isless< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::isless< float >",1,"SimpleEigen::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::isless< float >",2,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("islessf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("islessf",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (bool)SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR isless< float >((SimpleEigen::Scalar< float > const &)*arg1,(SimpleEigen::Scalar< float > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessequalf(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::islessequal< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::islessequal< float >",1,"SimpleEigen::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::islessequal< float >",2,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("islessequalf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("islessequalf",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (bool)SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR islessequal< float >((SimpleEigen::Scalar< float > const &)*arg1,(SimpleEigen::Scalar< float > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessgreaterf(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::islessgreater< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::islessgreater< float >",1,"SimpleEigen::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::islessgreater< float >",2,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("islessgreaterf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("islessgreaterf",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (bool)SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR islessgreater< float >((SimpleEigen::Scalar< float > const &)*arg1,(SimpleEigen::Scalar< float > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnanf(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::isnan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::isnan< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("isnanf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (bool)SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR isnan< float >((SimpleEigen::Scalar< float > const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnormalf(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::isnormal< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::isnormal< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("isnormalf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (bool)SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR isnormal< float >((SimpleEigen::Scalar< float > const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isunorderedf(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SimpleEigen::isunordered< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::isunordered< float >",1,"SimpleEigen::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::isunordered< float >",2,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("isunorderedf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("isunorderedf",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = (bool)SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR isunordered< float >((SimpleEigen::Scalar< float > const &)*arg1,(SimpleEigen::Scalar< float > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldexpf(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  int arg2 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::ldexp< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::ldexp< float >",1,"SimpleEigen::Scalar< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::ldexp< float >",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("ldexpf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR ldexp< float >((SimpleEigen::Scalar< float > const &)*arg1,arg2);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lgammaf(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::lgamma< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::lgamma< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("lgammaf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR lgamma< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llrintf(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::llrint< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::llrint< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("llrintf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR llrint< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llroundf(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::llround< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::llround< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("llroundf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR llround< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log2f(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::log2< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::log2< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("log2f",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR log2< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logbf(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::logb< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::logb< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("logbf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR logb< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lrintf(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::lrint< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::lrint< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("lrintf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR lrint< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lroundf(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::lround< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::lround< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("lroundf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR lround< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanf(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::nan< float >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SimpleEigen::nan< float >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR nan< float >((char const *)arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanff(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::nanf< float >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SimpleEigen::nanf< float >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR nanf< float >((char const *)arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanlf(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::nanl< float >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SimpleEigen::nanl< float >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR nanl< float >((char const *)arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nearbyintf(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::nearbyint< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::nearbyint< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("nearbyintf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR nearbyint< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nextafterf(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::nextafter< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::nextafter< float >",1,"SimpleEigen::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::nextafter< float >",2,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("nextafterf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("nextafterf",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR nextafter< float >((SimpleEigen::Scalar< float > const &)*arg1,(SimpleEigen::Scalar< float > const &)*arg2);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nexttowardf(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SimpleEigen::Scalar< float > *arg2 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::nexttoward< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::nexttoward< float >",1,"SimpleEigen::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SimpleEigen::nexttoward< float >",2,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("nexttowardf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("nexttowardf",2,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR nexttoward< float >((SimpleEigen::Scalar< float > const &)*arg1,(SimpleEigen::Scalar< float > const &)*arg2);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalblnf(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  long arg2 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::scalbln< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::scalbln< float >",1,"SimpleEigen::Scalar< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::scalbln< float >",2,"long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("scalblnf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  arg2 = (long)lua_tonumber(L, 2);
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR scalbln< float >((SimpleEigen::Scalar< float > const &)*arg1,arg2);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalbnf(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  int arg2 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::scalbn< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::scalbn< float >",1,"SimpleEigen::Scalar< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SimpleEigen::scalbn< float >",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("scalbnf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR scalbn< float >((SimpleEigen::Scalar< float > const &)*arg1,arg2);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tgammaf(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::tgamma< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::tgamma< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("tgammaf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR tgamma< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_truncf(lua_State* L) {
  int SWIG_arg = 0;
  SimpleEigen::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SimpleEigen::trunc< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SimpleEigen::trunc< float >",1,"SimpleEigen::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,0))){
    SWIG_fail_ptr("truncf",1,SWIGTYPE_p_SimpleEigen__ScalarT_float_t);
  }
  
  result = SimpleEigen::SWIGTEMPLATEDISAMBIGUATOR trunc< float >((SimpleEigen::Scalar< float > const &)*arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SF32(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  SwigValueWrapper< SimpleEigen::Scalar< float > > result;
  
  SWIG_check_num_args("SF32",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SF32",1,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  result = SF32(arg1);
  {
    SimpleEigen::Scalar< float > * resultptr = new SimpleEigen::Scalar< float >((const SimpleEigen::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SF64(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  SwigValueWrapper< SimpleEigen::Scalar< double > > result;
  
  SWIG_check_num_args("SF64",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SF64",1,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  result = SF64(arg1);
  {
    SimpleEigen::Scalar< double > * resultptr = new SimpleEigen::Scalar< double >((const SimpleEigen::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SFI8(lua_State* L) {
  int SWIG_arg = 0;
  int8_t arg1 ;
  SwigValueWrapper< SimpleEigen::Scalar< signed char > > result;
  
  SWIG_check_num_args("SFI8",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SFI8",1,"int8_t const");
  arg1 = (int8_t const)lua_tonumber(L, 1);
  result = SFI8(arg1);
  {
    SimpleEigen::Scalar< int8_t > * resultptr = new SimpleEigen::Scalar< int8_t >((const SimpleEigen::Scalar< int8_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SFUI8(lua_State* L) {
  int SWIG_arg = 0;
  uint8_t arg1 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned char > > result;
  
  SWIG_check_num_args("SFUI8",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SFUI8",1,"uint8_t const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (uint8_t const)lua_tonumber(L, 1);
  result = SFUI8(arg1);
  {
    SimpleEigen::Scalar< uint8_t > * resultptr = new SimpleEigen::Scalar< uint8_t >((const SimpleEigen::Scalar< uint8_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SFI16(lua_State* L) {
  int SWIG_arg = 0;
  int16_t arg1 ;
  SwigValueWrapper< SimpleEigen::Scalar< short > > result;
  
  SWIG_check_num_args("SFI16",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SFI16",1,"int16_t const");
  arg1 = (int16_t const)lua_tonumber(L, 1);
  result = SFI16(arg1);
  {
    SimpleEigen::Scalar< int16_t > * resultptr = new SimpleEigen::Scalar< int16_t >((const SimpleEigen::Scalar< int16_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SFUI16(lua_State* L) {
  int SWIG_arg = 0;
  uint16_t arg1 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned short > > result;
  
  SWIG_check_num_args("SFUI16",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SFUI16",1,"uint16_t const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (uint16_t const)lua_tonumber(L, 1);
  result = SFUI16(arg1);
  {
    SimpleEigen::Scalar< uint16_t > * resultptr = new SimpleEigen::Scalar< uint16_t >((const SimpleEigen::Scalar< uint16_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SFI32(lua_State* L) {
  int SWIG_arg = 0;
  int32_t arg1 ;
  SwigValueWrapper< SimpleEigen::Scalar< int > > result;
  
  SWIG_check_num_args("SFI32",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SFI32",1,"int32_t const");
  arg1 = (int32_t const)lua_tonumber(L, 1);
  result = SFI32(arg1);
  {
    SimpleEigen::Scalar< int32_t > * resultptr = new SimpleEigen::Scalar< int32_t >((const SimpleEigen::Scalar< int32_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SFUI32(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned int > > result;
  
  SWIG_check_num_args("SFUI32",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SFUI32",1,"uint32_t const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (uint32_t const)lua_tonumber(L, 1);
  result = SFUI32(arg1);
  {
    SimpleEigen::Scalar< uint32_t > * resultptr = new SimpleEigen::Scalar< uint32_t >((const SimpleEigen::Scalar< uint32_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SFI64(lua_State* L) {
  int SWIG_arg = 0;
  int64_t arg1 ;
  SwigValueWrapper< SimpleEigen::Scalar< long > > result;
  
  SWIG_check_num_args("SFI64",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SFI64",1,"int64_t const");
  arg1 = (int64_t const)lua_tonumber(L, 1);
  result = SFI64(arg1);
  {
    SimpleEigen::Scalar< int64_t > * resultptr = new SimpleEigen::Scalar< int64_t >((const SimpleEigen::Scalar< int64_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SFUI64(lua_State* L) {
  int SWIG_arg = 0;
  uint64_t arg1 ;
  SwigValueWrapper< SimpleEigen::Scalar< unsigned long > > result;
  
  SWIG_check_num_args("SFUI64",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SFUI64",1,"uint64_t const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (uint64_t const)lua_tonumber(L, 1);
  result = SFUI64(arg1);
  {
    SimpleEigen::Scalar< uint64_t > * resultptr = new SimpleEigen::Scalar< uint64_t >((const SimpleEigen::Scalar< uint64_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SimpleEigen__ScalarT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_SwigModule_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_FLOAT("Huge", HUGE_VAL)},
    {SWIG_LUA_CONSTTAB_FLOAT("Hugef", HUGE_VALF)},
    {SWIG_LUA_CONSTTAB_FLOAT("Infinity", INFINITY)},
    {SWIG_LUA_CONSTTAB_FLOAT("NaN", NAN)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "hadamard_float", _wrap_hadamard_float},
    { "hadamard_double", _wrap_hadamard_double},
    { "sigmoid_float", _wrap_sigmoid_float},
    { "sigmoid_double", _wrap_sigmoid_double},
    { "sigmoid_deriv_float", _wrap_sigmoid_deriv_float},
    { "sigmoid_deriv_double", _wrap_sigmoid_deriv_double},
    { "tanh_float", _wrap_tanh_float},
    { "tanh_double", _wrap_tanh_double},
    { "tanh_deriv_float", _wrap_tanh_deriv_float},
    { "tanh_deriv_double", _wrap_tanh_deriv_double},
    { "relu_float", _wrap_relu_float},
    { "relu_double", _wrap_relu_double},
    { "relu_deriv_float", _wrap_relu_deriv_float},
    { "relu_deriv_double", _wrap_relu_deriv_double},
    { "softmax_float", _wrap_softmax_float},
    { "softmax_double", _wrap_softmax_double},
    { "noalias_float", _wrap_noalias_float},
    { "noalias_double", _wrap_noalias_double},
    { "mish_activate_float", _wrap_mish_activate_float},
    { "mish_activate_double", _wrap_mish_activate_double},
    { "mish_apply_jacobian_float", _wrap_mish_apply_jacobian_float},
    { "mish_apply_jacobian_double", _wrap_mish_apply_jacobian_double},
    { "SwigRefTableGet", _wrap_SwigRefTableGet},
    { "SwigRefTableGet2", _wrap_SwigRefTableGet2},
    { "SwigRefTableSet", _wrap_SwigRefTableSet},
    { "SwigRefTableSet2", _wrap_SwigRefTableSet2},
    { "Lua_TablesToMatrix", _wrap_Lua_TablesToMatrix},
    { "CreateRowVectorFloat", _wrap_CreateRowVectorFloat},
    { "CreateRowVectorDouble", _wrap_CreateRowVectorDouble},
    { "CreateColVectorFloat", _wrap_CreateColVectorFloat},
    { "CreateColVectorDouble", _wrap_CreateColVectorDouble},
    { "CreateArrayFloat", _wrap_CreateArrayFloat},
    { "CreateArrayDouble", _wrap_CreateArrayDouble},
    { "CreateMatrixFloat", _wrap_CreateMatrixFloat},
    { "CreateMatrixDouble", _wrap_CreateMatrixDouble},
    { "CreateArray2DFloat", _wrap_CreateArray2DFloat},
    { "CreateArray2DDouble", _wrap_CreateArray2DDouble},
    { "absf", _wrap_absf},
    { "inversef", _wrap_inversef},
    { "expf", _wrap_expf},
    { "logf", _wrap_logf},
    { "log1pf", _wrap_log1pf},
    { "log10f", _wrap_log10f},
    { "powf", _wrap_powf},
    { "sqrtf", _wrap_sqrtf},
    { "rsqrtf", _wrap_rsqrtf},
    { "squaref", _wrap_squaref},
    { "cubef", _wrap_cubef},
    { "abs2f", _wrap_abs2f},
    { "sinf", _wrap_sinf},
    { "cosf", _wrap_cosf},
    { "tanf", _wrap_tanf},
    { "asinf", _wrap_asinf},
    { "acosf", _wrap_acosf},
    { "atanf", _wrap_atanf},
    { "sinhf", _wrap_sinhf},
    { "coshf", _wrap_coshf},
    { "tanhf", _wrap_tanhf},
    { "asinhf", _wrap_asinhf},
    { "acoshf", _wrap_acoshf},
    { "atanhf", _wrap_atanhf},
    { "atan2f", _wrap_atan2f},
    { "ceilf", _wrap_ceilf},
    { "floorf", _wrap_floorf},
    { "roundf", _wrap_roundf},
    { "rintf", _wrap_rintf},
    { "cbrtf", _wrap_cbrtf},
    { "copysignf", _wrap_copysignf},
    { "erff", _wrap_erff},
    { "erfcf", _wrap_erfcf},
    { "exp2f", _wrap_exp2f},
    { "expm1f", _wrap_expm1f},
    { "fdimf", _wrap_fdimf},
    { "fmaf", _wrap_fmaf},
    { "fmaxf", _wrap_fmaxf},
    { "fminf", _wrap_fminf},
    { "fmodf", _wrap_fmodf},
    { "fpclassifyf", _wrap_fpclassifyf},
    { "hypot", _wrap_hypot},
    { "ilogbf", _wrap_ilogbf},
    { "isfinitef", _wrap_isfinitef},
    { "isgreaterf", _wrap_isgreaterf},
    { "isgreaterequalf", _wrap_isgreaterequalf},
    { "isinff", _wrap_isinff},
    { "islessf", _wrap_islessf},
    { "islessequalf", _wrap_islessequalf},
    { "islessgreaterf", _wrap_islessgreaterf},
    { "isnanf", _wrap_isnanf},
    { "isnormalf", _wrap_isnormalf},
    { "isunorderedf", _wrap_isunorderedf},
    { "ldexpf", _wrap_ldexpf},
    { "lgammaf", _wrap_lgammaf},
    { "llrintf", _wrap_llrintf},
    { "llroundf", _wrap_llroundf},
    { "log2f", _wrap_log2f},
    { "logbf", _wrap_logbf},
    { "lrintf", _wrap_lrintf},
    { "lroundf", _wrap_lroundf},
    { "nanf", _wrap_nanf},
    { "nanff", _wrap_nanff},
    { "nanlf", _wrap_nanlf},
    { "nearbyintf", _wrap_nearbyintf},
    { "nextafterf", _wrap_nextafterf},
    { "nexttowardf", _wrap_nexttowardf},
    { "scalblnf", _wrap_scalblnf},
    { "scalbnf", _wrap_scalbnf},
    { "tgammaf", _wrap_tgammaf},
    { "truncf", _wrap_truncf},
    { "SF32", _wrap_SF32},
    { "SF64", _wrap_SF64},
    { "SFI8", _wrap_SFI8},
    { "SFUI8", _wrap_SFUI8},
    { "SFI16", _wrap_SFI16},
    { "SFUI16", _wrap_SFUI16},
    { "SFI32", _wrap_SFI32},
    { "SFUI32", _wrap_SFUI32},
    { "SFI64", _wrap_SFI64},
    { "SFUI64", _wrap_SFUI64},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_string,
&_wrap_class_float_vector,
&_wrap_class_float_matrix,
&_wrap_class_double_vector,
&_wrap_class_double_matrix,
&_wrap_class_ldouble_vector,
&_wrap_class_ldouble_matrix,
&_wrap_class_char_vector,
&_wrap_class_byte_matrix,
&_wrap_class_short_vector,
&_wrap_class_ushort_matrix,
&_wrap_class_int_vector,
&_wrap_class_uint_matrix,
&_wrap_class_long_vector,
&_wrap_class_ulong_matrix,
&_wrap_class_ll_vector,
&_wrap_class_ull_matrix,
&_wrap_class_Base,
&_wrap_class_ComplexFloat,
&_wrap_class_ComplexDouble,
&_wrap_class_FloatScalar,
&_wrap_class_DoubleScalar,
&_wrap_class_LongDoubleScalar,
&_wrap_class_Int8Scalar,
&_wrap_class_UInt8Scalar,
&_wrap_class_Int16Scalar,
&_wrap_class_UInt16Scalar,
&_wrap_class_Int32Scalar,
&_wrap_class_UInt32Scalar,
&_wrap_class_LongScalar,
&_wrap_class_ULongScalar,
&_wrap_class_LLongScalar,
&_wrap_class_ULLongScalar,
&_wrap_class_FloatRowVector,
&_wrap_class_DoubleRowVector,
&_wrap_class_FloatColVector,
&_wrap_class_DoubleColVector,
&_wrap_class_FloatMatrixView,
&_wrap_class_DoubleMatrixView,
&_wrap_class_FloatMatrix,
&_wrap_class_DoubleMatrix,
&_wrap_class_FloatColMatrixView,
&_wrap_class_DoubleCOlMatrixView,
&_wrap_class_FloatColMatrix,
&_wrap_class_DoubleColMatrix,
&_wrap_class_FloatArray,
&_wrap_class_DoubleArray,
&_wrap_class_FloatArray2D,
&_wrap_class_DoubleArray2D,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "se",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_SimpleEigen__ScalarT_unsigned_char_tTo_p_SimpleEigen__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SimpleEigen::Base *)  ((SimpleEigen::Scalar< unsigned char > *) x));
}
static void *_p_SimpleEigen__ScalarT_signed_char_tTo_p_SimpleEigen__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SimpleEigen::Base *)  ((SimpleEigen::Scalar< signed char > *) x));
}
static void *_p_SimpleEigen__ScalarT_float_tTo_p_SimpleEigen__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SimpleEigen::Base *)  ((SimpleEigen::Scalar< float > *) x));
}
static void *_p_SimpleEigen__ComplexT_float_tTo_p_SimpleEigen__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SimpleEigen::Base *)  ((SimpleEigen::Complex< float > *) x));
}
static void *_p_SimpleEigen__ColVectorT_float_tTo_p_SimpleEigen__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SimpleEigen::Base *)  ((SimpleEigen::ColVector< float > *) x));
}
static void *_p_SimpleEigen__MatrixViewT_float_tTo_p_SimpleEigen__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SimpleEigen::Base *)  ((SimpleEigen::MatrixView< float > *) x));
}
static void *_p_SimpleEigen__ColMatrixViewT_float_tTo_p_SimpleEigen__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SimpleEigen::Base *)  ((SimpleEigen::ColMatrixView< float > *) x));
}
static void *_p_SimpleEigen__ArrayT_float_tTo_p_SimpleEigen__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SimpleEigen::Base *)  ((SimpleEigen::Array< float > *) x));
}
static void *_p_SimpleEigen__Array2DT_float_tTo_p_SimpleEigen__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SimpleEigen::Base *)  ((SimpleEigen::Array2D< float > *) x));
}
static void *_p_SimpleEigen__ScalarT_long_double_tTo_p_SimpleEigen__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SimpleEigen::Base *)  ((SimpleEigen::Scalar< long double > *) x));
}
static void *_p_SimpleEigen__ScalarT_double_tTo_p_SimpleEigen__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SimpleEigen::Base *)  ((SimpleEigen::Scalar< double > *) x));
}
static void *_p_SimpleEigen__ComplexT_double_tTo_p_SimpleEigen__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SimpleEigen::Base *)  ((SimpleEigen::Complex< double > *) x));
}
static void *_p_SimpleEigen__ColVectorT_double_tTo_p_SimpleEigen__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SimpleEigen::Base *)  ((SimpleEigen::ColVector< double > *) x));
}
static void *_p_SimpleEigen__MatrixViewT_double_tTo_p_SimpleEigen__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SimpleEigen::Base *)  ((SimpleEigen::MatrixView< double > *) x));
}
static void *_p_SimpleEigen__ColMatrixViewT_double_tTo_p_SimpleEigen__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SimpleEigen::Base *)  ((SimpleEigen::ColMatrixView< double > *) x));
}
static void *_p_SimpleEigen__ArrayT_double_tTo_p_SimpleEigen__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SimpleEigen::Base *)  ((SimpleEigen::Array< double > *) x));
}
static void *_p_SimpleEigen__Array2DT_double_tTo_p_SimpleEigen__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SimpleEigen::Base *)  ((SimpleEigen::Array2D< double > *) x));
}
static void *_p_SimpleEigen__ScalarT_int_tTo_p_SimpleEigen__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SimpleEigen::Base *)  ((SimpleEigen::Scalar< int > *) x));
}
static void *_p_SimpleEigen__ScalarT_unsigned_short_tTo_p_SimpleEigen__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SimpleEigen::Base *)  ((SimpleEigen::Scalar< unsigned short > *) x));
}
static void *_p_SimpleEigen__ScalarT_short_tTo_p_SimpleEigen__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SimpleEigen::Base *)  ((SimpleEigen::Scalar< short > *) x));
}
static void *_p_SimpleEigen__ScalarT_long_long_tTo_p_SimpleEigen__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SimpleEigen::Base *)  ((SimpleEigen::Scalar< long long > *) x));
}
static void *_p_SimpleEigen__ScalarT_unsigned_long_tTo_p_SimpleEigen__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SimpleEigen::Base *)  ((SimpleEigen::Scalar< unsigned long > *) x));
}
static void *_p_SimpleEigen__ScalarT_long_tTo_p_SimpleEigen__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SimpleEigen::Base *)  ((SimpleEigen::Scalar< long > *) x));
}
static void *_p_SimpleEigen__ScalarT_unsigned_int_tTo_p_SimpleEigen__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SimpleEigen::Base *)  ((SimpleEigen::Scalar< unsigned int > *) x));
}
static void *_p_SimpleEigen__ScalarT_unsigned_long_long_tTo_p_SimpleEigen__Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SimpleEigen::Base *)  ((SimpleEigen::Scalar< unsigned long long > *) x));
}
static swig_type_info _swigt__p_Eigen__ArrayT_double_Eigen__Dynamic_Eigen__Dynamic_t = {"_p_Eigen__ArrayT_double_Eigen__Dynamic_Eigen__Dynamic_t", "Eigen::Array< double,Eigen::Dynamic,Eigen::Dynamic > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__ArrayT_float_Eigen__Dynamic_Eigen__Dynamic_t = {"_p_Eigen__ArrayT_float_Eigen__Dynamic_Eigen__Dynamic_t", "Eigen::Array< float,Eigen::Dynamic,Eigen::Dynamic > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__MatrixT_double_1_Eigen__Dynamic_t = {"_p_Eigen__MatrixT_double_1_Eigen__Dynamic_t", "Eigen::Matrix< double,1,Eigen::Dynamic > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__MatrixT_double_Eigen__Dynamic_1_t = {"_p_Eigen__MatrixT_double_Eigen__Dynamic_1_t", "Eigen::Matrix< double,Eigen::Dynamic,1 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__MatrixT_float_1_Eigen__Dynamic_t = {"_p_Eigen__MatrixT_float_1_Eigen__Dynamic_t", "Eigen::Matrix< float,1,Eigen::Dynamic > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__MatrixT_float_Eigen__Dynamic_1_t = {"_p_Eigen__MatrixT_float_Eigen__Dynamic_1_t", "Eigen::Matrix< float,Eigen::Dynamic,1 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SWIGLUA_REF = {"_p_SWIGLUA_REF", "SWIGLUA_REF *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__Array2DT_double_t = {"_p_SimpleEigen__Array2DT_double_t", "SimpleEigen::Array2D< double > *", 0, 0, (void*)&_wrap_class_DoubleArray2D, 0};
static swig_type_info _swigt__p_SimpleEigen__Array2DT_float_t = {"_p_SimpleEigen__Array2DT_float_t", "SimpleEigen::Array2D< float > *", 0, 0, (void*)&_wrap_class_FloatArray2D, 0};
static swig_type_info _swigt__p_SimpleEigen__Array2DT_int_t = {"_p_SimpleEigen__Array2DT_int_t", "SimpleEigen::Array2D< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__Array2DT_long_double_t = {"_p_SimpleEigen__Array2DT_long_double_t", "SimpleEigen::Array2D< long double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__Array2DT_long_long_t = {"_p_SimpleEigen__Array2DT_long_long_t", "SimpleEigen::Array2D< long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__Array2DT_long_t = {"_p_SimpleEigen__Array2DT_long_t", "SimpleEigen::Array2D< long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__Array2DT_short_t = {"_p_SimpleEigen__Array2DT_short_t", "SimpleEigen::Array2D< short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__Array2DT_signed_char_t = {"_p_SimpleEigen__Array2DT_signed_char_t", "SimpleEigen::Array2D< signed char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__Array2DT_unsigned_char_t = {"_p_SimpleEigen__Array2DT_unsigned_char_t", "SimpleEigen::Array2D< unsigned char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__Array2DT_unsigned_int_t = {"_p_SimpleEigen__Array2DT_unsigned_int_t", "SimpleEigen::Array2D< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__Array2DT_unsigned_long_long_t = {"_p_SimpleEigen__Array2DT_unsigned_long_long_t", "SimpleEigen::Array2D< unsigned long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__Array2DT_unsigned_long_t = {"_p_SimpleEigen__Array2DT_unsigned_long_t", "SimpleEigen::Array2D< unsigned long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__Array2DT_unsigned_short_t = {"_p_SimpleEigen__Array2DT_unsigned_short_t", "SimpleEigen::Array2D< unsigned short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__ArrayT_double_t = {"_p_SimpleEigen__ArrayT_double_t", "SimpleEigen::Array< double > *", 0, 0, (void*)&_wrap_class_DoubleArray, 0};
static swig_type_info _swigt__p_SimpleEigen__ArrayT_float_t = {"_p_SimpleEigen__ArrayT_float_t", "SimpleEigen::Array< float > *", 0, 0, (void*)&_wrap_class_FloatArray, 0};
static swig_type_info _swigt__p_SimpleEigen__ArrayT_int_t = {"_p_SimpleEigen__ArrayT_int_t", "SimpleEigen::Array< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__ArrayT_long_double_t = {"_p_SimpleEigen__ArrayT_long_double_t", "SimpleEigen::Array< long double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__ArrayT_long_long_t = {"_p_SimpleEigen__ArrayT_long_long_t", "SimpleEigen::Array< long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__ArrayT_long_t = {"_p_SimpleEigen__ArrayT_long_t", "SimpleEigen::Array< long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__ArrayT_short_t = {"_p_SimpleEigen__ArrayT_short_t", "SimpleEigen::Array< short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__ArrayT_signed_char_t = {"_p_SimpleEigen__ArrayT_signed_char_t", "SimpleEigen::Array< signed char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__ArrayT_unsigned_char_t = {"_p_SimpleEigen__ArrayT_unsigned_char_t", "SimpleEigen::Array< unsigned char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__ArrayT_unsigned_int_t = {"_p_SimpleEigen__ArrayT_unsigned_int_t", "SimpleEigen::Array< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__ArrayT_unsigned_long_long_t = {"_p_SimpleEigen__ArrayT_unsigned_long_long_t", "SimpleEigen::Array< unsigned long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__ArrayT_unsigned_long_t = {"_p_SimpleEigen__ArrayT_unsigned_long_t", "SimpleEigen::Array< unsigned long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__ArrayT_unsigned_short_t = {"_p_SimpleEigen__ArrayT_unsigned_short_t", "SimpleEigen::Array< unsigned short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__Base = {"_p_SimpleEigen__Base", "SimpleEigen::Base *", 0, 0, (void*)&_wrap_class_Base, 0};
static swig_type_info _swigt__p_SimpleEigen__ColMatrixT_double_t = {"_p_SimpleEigen__ColMatrixT_double_t", "SimpleEigen::ColMatrix< double > *", 0, 0, (void*)&_wrap_class_DoubleColMatrix, 0};
static swig_type_info _swigt__p_SimpleEigen__ColMatrixT_float_t = {"_p_SimpleEigen__ColMatrixT_float_t", "SimpleEigen::ColMatrix< float > *", 0, 0, (void*)&_wrap_class_FloatColMatrix, 0};
static swig_type_info _swigt__p_SimpleEigen__ColMatrixViewT_double_t = {"_p_SimpleEigen__ColMatrixViewT_double_t", "SimpleEigen::ColMatrixView< double > *", 0, 0, (void*)&_wrap_class_DoubleCOlMatrixView, 0};
static swig_type_info _swigt__p_SimpleEigen__ColMatrixViewT_float_t = {"_p_SimpleEigen__ColMatrixViewT_float_t", "SimpleEigen::ColMatrixView< float > *", 0, 0, (void*)&_wrap_class_FloatColMatrixView, 0};
static swig_type_info _swigt__p_SimpleEigen__ColVectorT_double_t = {"_p_SimpleEigen__ColVectorT_double_t", "SimpleEigen::ColVector< double > *", 0, 0, (void*)&_wrap_class_DoubleColVector, 0};
static swig_type_info _swigt__p_SimpleEigen__ColVectorT_float_t = {"_p_SimpleEigen__ColVectorT_float_t", "SimpleEigen::ColVector< float > *", 0, 0, (void*)&_wrap_class_FloatColVector, 0};
static swig_type_info _swigt__p_SimpleEigen__ColVectorT_int_t = {"_p_SimpleEigen__ColVectorT_int_t", "SimpleEigen::ColVector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__ColVectorT_long_double_t = {"_p_SimpleEigen__ColVectorT_long_double_t", "SimpleEigen::ColVector< long double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__ColVectorT_long_long_t = {"_p_SimpleEigen__ColVectorT_long_long_t", "SimpleEigen::ColVector< long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__ColVectorT_long_t = {"_p_SimpleEigen__ColVectorT_long_t", "SimpleEigen::ColVector< long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__ColVectorT_short_t = {"_p_SimpleEigen__ColVectorT_short_t", "SimpleEigen::ColVector< short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__ColVectorT_signed_char_t = {"_p_SimpleEigen__ColVectorT_signed_char_t", "SimpleEigen::ColVector< signed char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__ColVectorT_unsigned_char_t = {"_p_SimpleEigen__ColVectorT_unsigned_char_t", "SimpleEigen::ColVector< unsigned char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__ColVectorT_unsigned_int_t = {"_p_SimpleEigen__ColVectorT_unsigned_int_t", "SimpleEigen::ColVector< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__ColVectorT_unsigned_long_long_t = {"_p_SimpleEigen__ColVectorT_unsigned_long_long_t", "SimpleEigen::ColVector< unsigned long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__ColVectorT_unsigned_long_t = {"_p_SimpleEigen__ColVectorT_unsigned_long_t", "SimpleEigen::ColVector< unsigned long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__ColVectorT_unsigned_short_t = {"_p_SimpleEigen__ColVectorT_unsigned_short_t", "SimpleEigen::ColVector< unsigned short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__ComplexT_double_t = {"_p_SimpleEigen__ComplexT_double_t", "SimpleEigen::Complex< double > *", 0, 0, (void*)&_wrap_class_ComplexDouble, 0};
static swig_type_info _swigt__p_SimpleEigen__ComplexT_float_t = {"_p_SimpleEigen__ComplexT_float_t", "SimpleEigen::Complex< float > *", 0, 0, (void*)&_wrap_class_ComplexFloat, 0};
static swig_type_info _swigt__p_SimpleEigen__Eigen2DArrayT_double_t = {"_p_SimpleEigen__Eigen2DArrayT_double_t", "SimpleEigen::Eigen2DArray< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__Eigen2DArrayT_float_t = {"_p_SimpleEigen__Eigen2DArrayT_float_t", "SimpleEigen::Eigen2DArray< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__EigenArray2DT_double_t = {"_p_SimpleEigen__EigenArray2DT_double_t", "SimpleEigen::EigenArray2D< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__EigenArray2DT_float_t = {"_p_SimpleEigen__EigenArray2DT_float_t", "SimpleEigen::EigenArray2D< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__EigenArrayT_double_t = {"_p_SimpleEigen__EigenArrayT_double_t", "SimpleEigen::EigenArray< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__EigenArrayT_float_t = {"_p_SimpleEigen__EigenArrayT_float_t", "SimpleEigen::EigenArray< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__EigenCol2DArrayT_double_t = {"_p_SimpleEigen__EigenCol2DArrayT_double_t", "SimpleEigen::EigenCol2DArray< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__EigenCol2DArrayT_float_t = {"_p_SimpleEigen__EigenCol2DArrayT_float_t", "SimpleEigen::EigenCol2DArray< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__EigenColMatrixT_double_t = {"_p_SimpleEigen__EigenColMatrixT_double_t", "SimpleEigen::EigenColMatrix< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__EigenColMatrixT_float_t = {"_p_SimpleEigen__EigenColMatrixT_float_t", "SimpleEigen::EigenColMatrix< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__EigenColVectorT_double_t = {"_p_SimpleEigen__EigenColVectorT_double_t", "SimpleEigen::EigenColVector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__EigenColVectorT_float_t = {"_p_SimpleEigen__EigenColVectorT_float_t", "SimpleEigen::EigenColVector< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__EigenMatrixT_double_t = {"_p_SimpleEigen__EigenMatrixT_double_t", "SimpleEigen::EigenMatrix< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__EigenMatrixT_float_t = {"_p_SimpleEigen__EigenMatrixT_float_t", "SimpleEigen::EigenMatrix< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__EigenRowVectorT_double_t = {"_p_SimpleEigen__EigenRowVectorT_double_t", "SimpleEigen::EigenRowVector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__EigenRowVectorT_float_t = {"_p_SimpleEigen__EigenRowVectorT_float_t", "SimpleEigen::EigenRowVector< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__MatrixT_double_t = {"_p_SimpleEigen__MatrixT_double_t", "SimpleEigen::Matrix< double > *", 0, 0, (void*)&_wrap_class_DoubleMatrix, 0};
static swig_type_info _swigt__p_SimpleEigen__MatrixT_float_t = {"_p_SimpleEigen__MatrixT_float_t", "SimpleEigen::Matrix< float > *", 0, 0, (void*)&_wrap_class_FloatMatrix, 0};
static swig_type_info _swigt__p_SimpleEigen__MatrixT_int_t = {"_p_SimpleEigen__MatrixT_int_t", "SimpleEigen::Matrix< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__MatrixT_long_double_t = {"_p_SimpleEigen__MatrixT_long_double_t", "SimpleEigen::Matrix< long double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__MatrixT_long_long_t = {"_p_SimpleEigen__MatrixT_long_long_t", "SimpleEigen::Matrix< long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__MatrixT_long_t = {"_p_SimpleEigen__MatrixT_long_t", "SimpleEigen::Matrix< long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__MatrixT_short_t = {"_p_SimpleEigen__MatrixT_short_t", "SimpleEigen::Matrix< short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__MatrixT_signed_char_t = {"_p_SimpleEigen__MatrixT_signed_char_t", "SimpleEigen::Matrix< signed char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__MatrixT_unsigned_char_t = {"_p_SimpleEigen__MatrixT_unsigned_char_t", "SimpleEigen::Matrix< unsigned char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__MatrixT_unsigned_int_t = {"_p_SimpleEigen__MatrixT_unsigned_int_t", "SimpleEigen::Matrix< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__MatrixT_unsigned_long_long_t = {"_p_SimpleEigen__MatrixT_unsigned_long_long_t", "SimpleEigen::Matrix< unsigned long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__MatrixT_unsigned_long_t = {"_p_SimpleEigen__MatrixT_unsigned_long_t", "SimpleEigen::Matrix< unsigned long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__MatrixT_unsigned_short_t = {"_p_SimpleEigen__MatrixT_unsigned_short_t", "SimpleEigen::Matrix< unsigned short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__MatrixViewT_double_t = {"_p_SimpleEigen__MatrixViewT_double_t", "SimpleEigen::MatrixView< double > *", 0, 0, (void*)&_wrap_class_DoubleMatrixView, 0};
static swig_type_info _swigt__p_SimpleEigen__MatrixViewT_float_t = {"_p_SimpleEigen__MatrixViewT_float_t", "SimpleEigen::MatrixView< float > *", 0, 0, (void*)&_wrap_class_FloatMatrixView, 0};
static swig_type_info _swigt__p_SimpleEigen__RowVectorT_double_t = {"_p_SimpleEigen__RowVectorT_double_t", "SimpleEigen::RowVector< double > *", 0, 0, (void*)&_wrap_class_DoubleRowVector, 0};
static swig_type_info _swigt__p_SimpleEigen__RowVectorT_float_t = {"_p_SimpleEigen__RowVectorT_float_t", "SimpleEigen::RowVector< float > *", 0, 0, (void*)&_wrap_class_FloatRowVector, 0};
static swig_type_info _swigt__p_SimpleEigen__RowVectorT_int_t = {"_p_SimpleEigen__RowVectorT_int_t", "SimpleEigen::RowVector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__RowVectorT_long_double_t = {"_p_SimpleEigen__RowVectorT_long_double_t", "SimpleEigen::RowVector< long double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__RowVectorT_long_long_t = {"_p_SimpleEigen__RowVectorT_long_long_t", "SimpleEigen::RowVector< long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__RowVectorT_long_t = {"_p_SimpleEigen__RowVectorT_long_t", "SimpleEigen::RowVector< long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__RowVectorT_short_t = {"_p_SimpleEigen__RowVectorT_short_t", "SimpleEigen::RowVector< short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__RowVectorT_signed_char_t = {"_p_SimpleEigen__RowVectorT_signed_char_t", "SimpleEigen::RowVector< signed char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__RowVectorT_unsigned_char_t = {"_p_SimpleEigen__RowVectorT_unsigned_char_t", "SimpleEigen::RowVector< unsigned char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__RowVectorT_unsigned_int_t = {"_p_SimpleEigen__RowVectorT_unsigned_int_t", "SimpleEigen::RowVector< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__RowVectorT_unsigned_long_long_t = {"_p_SimpleEigen__RowVectorT_unsigned_long_long_t", "SimpleEigen::RowVector< unsigned long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__RowVectorT_unsigned_long_t = {"_p_SimpleEigen__RowVectorT_unsigned_long_t", "SimpleEigen::RowVector< unsigned long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__RowVectorT_unsigned_short_t = {"_p_SimpleEigen__RowVectorT_unsigned_short_t", "SimpleEigen::RowVector< unsigned short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleEigen__ScalarT_double_t = {"_p_SimpleEigen__ScalarT_double_t", "SimpleEigen::Scalar< double > *", 0, 0, (void*)&_wrap_class_DoubleScalar, 0};
static swig_type_info _swigt__p_SimpleEigen__ScalarT_float_t = {"_p_SimpleEigen__ScalarT_float_t", "SimpleEigen::Scalar< float > *", 0, 0, (void*)&_wrap_class_FloatScalar, 0};
static swig_type_info _swigt__p_SimpleEigen__ScalarT_int_t = {"_p_SimpleEigen__ScalarT_int_t", "SimpleEigen::Scalar< int32_t > *|SimpleEigen::Scalar< int > *", 0, 0, (void*)&_wrap_class_Int32Scalar, 0};
static swig_type_info _swigt__p_SimpleEigen__ScalarT_long_double_t = {"_p_SimpleEigen__ScalarT_long_double_t", "SimpleEigen::Scalar< long double > *", 0, 0, (void*)&_wrap_class_LongDoubleScalar, 0};
static swig_type_info _swigt__p_SimpleEigen__ScalarT_long_long_t = {"_p_SimpleEigen__ScalarT_long_long_t", "SimpleEigen::Scalar< long long > *", 0, 0, (void*)&_wrap_class_LLongScalar, 0};
static swig_type_info _swigt__p_SimpleEigen__ScalarT_long_t = {"_p_SimpleEigen__ScalarT_long_t", "SimpleEigen::Scalar< long > *|SimpleEigen::Scalar< int64_t > *", 0, 0, (void*)&_wrap_class_LongScalar, 0};
static swig_type_info _swigt__p_SimpleEigen__ScalarT_short_t = {"_p_SimpleEigen__ScalarT_short_t", "SimpleEigen::Scalar< short > *|SimpleEigen::Scalar< int16_t > *", 0, 0, (void*)&_wrap_class_Int16Scalar, 0};
static swig_type_info _swigt__p_SimpleEigen__ScalarT_signed_char_t = {"_p_SimpleEigen__ScalarT_signed_char_t", "SimpleEigen::Scalar< signed char > *|SimpleEigen::Scalar< int8_t > *", 0, 0, (void*)&_wrap_class_Int8Scalar, 0};
static swig_type_info _swigt__p_SimpleEigen__ScalarT_unsigned_char_t = {"_p_SimpleEigen__ScalarT_unsigned_char_t", "SimpleEigen::Scalar< unsigned char > *|SimpleEigen::Scalar< uint8_t > *", 0, 0, (void*)&_wrap_class_UInt8Scalar, 0};
static swig_type_info _swigt__p_SimpleEigen__ScalarT_unsigned_int_t = {"_p_SimpleEigen__ScalarT_unsigned_int_t", "SimpleEigen::Scalar< uint32_t > *|SimpleEigen::Scalar< unsigned int > *", 0, 0, (void*)&_wrap_class_UInt32Scalar, 0};
static swig_type_info _swigt__p_SimpleEigen__ScalarT_unsigned_long_long_t = {"_p_SimpleEigen__ScalarT_unsigned_long_long_t", "SimpleEigen::Scalar< unsigned long long > *", 0, 0, (void*)&_wrap_class_ULLongScalar, 0};
static swig_type_info _swigt__p_SimpleEigen__ScalarT_unsigned_long_t = {"_p_SimpleEigen__ScalarT_unsigned_long_t", "SimpleEigen::Scalar< unsigned long > *|SimpleEigen::Scalar< uint64_t > *", 0, 0, (void*)&_wrap_class_ULongScalar, 0};
static swig_type_info _swigt__p_SimpleEigen__ScalarT_unsigned_short_t = {"_p_SimpleEigen__ScalarT_unsigned_short_t", "SimpleEigen::Scalar< unsigned short > *|SimpleEigen::Scalar< uint16_t > *", 0, 0, (void*)&_wrap_class_UInt16Scalar, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "f64_t *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "f32_t *|float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|int32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "int64_t *|long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_double = {"_p_long_double", "f80_t *|long double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_double_t = {"_p_std__complexT_double_t", "std::complex< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_float_t = {"_p_std__complexT_float_t", "std::complex< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)&_wrap_class_string, 0};
static swig_type_info _swigt__p_std__vectorT_char_t = {"_p_std__vectorT_char_t", "std::vector< char > *", 0, 0, (void*)&_wrap_class_char_vector, 0};
static swig_type_info _swigt__p_std__vectorT_double_t = {"_p_std__vectorT_double_t", "std::vector< double > *", 0, 0, (void*)&_wrap_class_double_vector, 0};
static swig_type_info _swigt__p_std__vectorT_float_t = {"_p_std__vectorT_float_t", "std::vector< float > *", 0, 0, (void*)&_wrap_class_float_vector, 0};
static swig_type_info _swigt__p_std__vectorT_int_t = {"_p_std__vectorT_int_t", "std::vector< int > *", 0, 0, (void*)&_wrap_class_int_vector, 0};
static swig_type_info _swigt__p_std__vectorT_long_double_t = {"_p_std__vectorT_long_double_t", "std::vector< long double > *", 0, 0, (void*)&_wrap_class_ldouble_vector, 0};
static swig_type_info _swigt__p_std__vectorT_long_long_t = {"_p_std__vectorT_long_long_t", "std::vector< long long > *", 0, 0, (void*)&_wrap_class_ll_vector, 0};
static swig_type_info _swigt__p_std__vectorT_long_t = {"_p_std__vectorT_long_t", "std::vector< long > *", 0, 0, (void*)&_wrap_class_long_vector, 0};
static swig_type_info _swigt__p_std__vectorT_short_t = {"_p_std__vectorT_short_t", "std::vector< short > *", 0, 0, (void*)&_wrap_class_short_vector, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_double_t_t = {"_p_std__vectorT_std__vectorT_double_t_t", "std::vector< std::vector< double > > *", 0, 0, (void*)&_wrap_class_double_matrix, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_float_t_t = {"_p_std__vectorT_std__vectorT_float_t_t", "std::vector< std::vector< float > > *", 0, 0, (void*)&_wrap_class_float_matrix, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_long_double_t_t = {"_p_std__vectorT_std__vectorT_long_double_t_t", "std::vector< std::vector< long double > > *", 0, 0, (void*)&_wrap_class_ldouble_matrix, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_unsigned_char_t_t = {"_p_std__vectorT_std__vectorT_unsigned_char_t_t", "std::vector< std::vector< unsigned char > > *", 0, 0, (void*)&_wrap_class_byte_matrix, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_unsigned_int_t_t = {"_p_std__vectorT_std__vectorT_unsigned_int_t_t", "std::vector< std::vector< unsigned int > > *", 0, 0, (void*)&_wrap_class_uint_matrix, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_unsigned_long_long_t_t = {"_p_std__vectorT_std__vectorT_unsigned_long_long_t_t", "std::vector< std::vector< unsigned long long > > *", 0, 0, (void*)&_wrap_class_ull_matrix, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_unsigned_long_t_t = {"_p_std__vectorT_std__vectorT_unsigned_long_t_t", "std::vector< std::vector< unsigned long > > *", 0, 0, (void*)&_wrap_class_ulong_matrix, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_unsigned_short_t_t = {"_p_std__vectorT_std__vectorT_unsigned_short_t_t", "std::vector< std::vector< unsigned short > > *", 0, 0, (void*)&_wrap_class_ushort_matrix, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_char_t = {"_p_std__vectorT_unsigned_char_t", "std::vector< unsigned char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_t = {"_p_std__vectorT_unsigned_int_t", "std::vector< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_long_long_t = {"_p_std__vectorT_unsigned_long_long_t", "std::vector< unsigned long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_long_t = {"_p_std__vectorT_unsigned_long_t", "std::vector< unsigned long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_short_t = {"_p_std__vectorT_unsigned_short_t", "std::vector< unsigned short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_char_t = {"_p_std__vector_iteratorT_char_t", "std::vector_iterator< char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_double_t = {"_p_std__vector_iteratorT_double_t", "std::vector_iterator< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_float_t = {"_p_std__vector_iteratorT_float_t", "std::vector_iterator< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_int_t = {"_p_std__vector_iteratorT_int_t", "std::vector_iterator< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_long_double_t = {"_p_std__vector_iteratorT_long_double_t", "std::vector_iterator< long double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_long_long_t = {"_p_std__vector_iteratorT_long_long_t", "std::vector_iterator< long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_long_t = {"_p_std__vector_iteratorT_long_t", "std::vector_iterator< long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_short_t = {"_p_std__vector_iteratorT_short_t", "std::vector_iterator< short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_std__vectorT_double_t_t = {"_p_std__vector_iteratorT_std__vectorT_double_t_t", "std::vector_iterator< std::vector< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_std__vectorT_float_t_t = {"_p_std__vector_iteratorT_std__vectorT_float_t_t", "std::vector_iterator< std::vector< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_std__vectorT_long_double_t_t = {"_p_std__vector_iteratorT_std__vectorT_long_double_t_t", "std::vector_iterator< std::vector< long double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_std__vectorT_unsigned_char_t_t = {"_p_std__vector_iteratorT_std__vectorT_unsigned_char_t_t", "std::vector_iterator< std::vector< unsigned char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_std__vectorT_unsigned_int_t_t = {"_p_std__vector_iteratorT_std__vectorT_unsigned_int_t_t", "std::vector_iterator< std::vector< unsigned int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_std__vectorT_unsigned_long_long_t_t = {"_p_std__vector_iteratorT_std__vectorT_unsigned_long_long_t_t", "std::vector_iterator< std::vector< unsigned long long > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_std__vectorT_unsigned_long_t_t = {"_p_std__vector_iteratorT_std__vectorT_unsigned_long_t_t", "std::vector_iterator< std::vector< unsigned long > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_std__vectorT_unsigned_short_t_t = {"_p_std__vector_iteratorT_std__vectorT_unsigned_short_t_t", "std::vector_iterator< std::vector< unsigned short > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uint32_t *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "uint64_t *|unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint16_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Eigen__ArrayT_double_Eigen__Dynamic_Eigen__Dynamic_t,
  &_swigt__p_Eigen__ArrayT_float_Eigen__Dynamic_Eigen__Dynamic_t,
  &_swigt__p_Eigen__MatrixT_double_1_Eigen__Dynamic_t,
  &_swigt__p_Eigen__MatrixT_double_Eigen__Dynamic_1_t,
  &_swigt__p_Eigen__MatrixT_float_1_Eigen__Dynamic_t,
  &_swigt__p_Eigen__MatrixT_float_Eigen__Dynamic_1_t,
  &_swigt__p_SWIGLUA_REF,
  &_swigt__p_SimpleEigen__Array2DT_double_t,
  &_swigt__p_SimpleEigen__Array2DT_float_t,
  &_swigt__p_SimpleEigen__Array2DT_int_t,
  &_swigt__p_SimpleEigen__Array2DT_long_double_t,
  &_swigt__p_SimpleEigen__Array2DT_long_long_t,
  &_swigt__p_SimpleEigen__Array2DT_long_t,
  &_swigt__p_SimpleEigen__Array2DT_short_t,
  &_swigt__p_SimpleEigen__Array2DT_signed_char_t,
  &_swigt__p_SimpleEigen__Array2DT_unsigned_char_t,
  &_swigt__p_SimpleEigen__Array2DT_unsigned_int_t,
  &_swigt__p_SimpleEigen__Array2DT_unsigned_long_long_t,
  &_swigt__p_SimpleEigen__Array2DT_unsigned_long_t,
  &_swigt__p_SimpleEigen__Array2DT_unsigned_short_t,
  &_swigt__p_SimpleEigen__ArrayT_double_t,
  &_swigt__p_SimpleEigen__ArrayT_float_t,
  &_swigt__p_SimpleEigen__ArrayT_int_t,
  &_swigt__p_SimpleEigen__ArrayT_long_double_t,
  &_swigt__p_SimpleEigen__ArrayT_long_long_t,
  &_swigt__p_SimpleEigen__ArrayT_long_t,
  &_swigt__p_SimpleEigen__ArrayT_short_t,
  &_swigt__p_SimpleEigen__ArrayT_signed_char_t,
  &_swigt__p_SimpleEigen__ArrayT_unsigned_char_t,
  &_swigt__p_SimpleEigen__ArrayT_unsigned_int_t,
  &_swigt__p_SimpleEigen__ArrayT_unsigned_long_long_t,
  &_swigt__p_SimpleEigen__ArrayT_unsigned_long_t,
  &_swigt__p_SimpleEigen__ArrayT_unsigned_short_t,
  &_swigt__p_SimpleEigen__Base,
  &_swigt__p_SimpleEigen__ColMatrixT_double_t,
  &_swigt__p_SimpleEigen__ColMatrixT_float_t,
  &_swigt__p_SimpleEigen__ColMatrixViewT_double_t,
  &_swigt__p_SimpleEigen__ColMatrixViewT_float_t,
  &_swigt__p_SimpleEigen__ColVectorT_double_t,
  &_swigt__p_SimpleEigen__ColVectorT_float_t,
  &_swigt__p_SimpleEigen__ColVectorT_int_t,
  &_swigt__p_SimpleEigen__ColVectorT_long_double_t,
  &_swigt__p_SimpleEigen__ColVectorT_long_long_t,
  &_swigt__p_SimpleEigen__ColVectorT_long_t,
  &_swigt__p_SimpleEigen__ColVectorT_short_t,
  &_swigt__p_SimpleEigen__ColVectorT_signed_char_t,
  &_swigt__p_SimpleEigen__ColVectorT_unsigned_char_t,
  &_swigt__p_SimpleEigen__ColVectorT_unsigned_int_t,
  &_swigt__p_SimpleEigen__ColVectorT_unsigned_long_long_t,
  &_swigt__p_SimpleEigen__ColVectorT_unsigned_long_t,
  &_swigt__p_SimpleEigen__ColVectorT_unsigned_short_t,
  &_swigt__p_SimpleEigen__ComplexT_double_t,
  &_swigt__p_SimpleEigen__ComplexT_float_t,
  &_swigt__p_SimpleEigen__Eigen2DArrayT_double_t,
  &_swigt__p_SimpleEigen__Eigen2DArrayT_float_t,
  &_swigt__p_SimpleEigen__EigenArray2DT_double_t,
  &_swigt__p_SimpleEigen__EigenArray2DT_float_t,
  &_swigt__p_SimpleEigen__EigenArrayT_double_t,
  &_swigt__p_SimpleEigen__EigenArrayT_float_t,
  &_swigt__p_SimpleEigen__EigenCol2DArrayT_double_t,
  &_swigt__p_SimpleEigen__EigenCol2DArrayT_float_t,
  &_swigt__p_SimpleEigen__EigenColMatrixT_double_t,
  &_swigt__p_SimpleEigen__EigenColMatrixT_float_t,
  &_swigt__p_SimpleEigen__EigenColVectorT_double_t,
  &_swigt__p_SimpleEigen__EigenColVectorT_float_t,
  &_swigt__p_SimpleEigen__EigenMatrixT_double_t,
  &_swigt__p_SimpleEigen__EigenMatrixT_float_t,
  &_swigt__p_SimpleEigen__EigenRowVectorT_double_t,
  &_swigt__p_SimpleEigen__EigenRowVectorT_float_t,
  &_swigt__p_SimpleEigen__MatrixT_double_t,
  &_swigt__p_SimpleEigen__MatrixT_float_t,
  &_swigt__p_SimpleEigen__MatrixT_int_t,
  &_swigt__p_SimpleEigen__MatrixT_long_double_t,
  &_swigt__p_SimpleEigen__MatrixT_long_long_t,
  &_swigt__p_SimpleEigen__MatrixT_long_t,
  &_swigt__p_SimpleEigen__MatrixT_short_t,
  &_swigt__p_SimpleEigen__MatrixT_signed_char_t,
  &_swigt__p_SimpleEigen__MatrixT_unsigned_char_t,
  &_swigt__p_SimpleEigen__MatrixT_unsigned_int_t,
  &_swigt__p_SimpleEigen__MatrixT_unsigned_long_long_t,
  &_swigt__p_SimpleEigen__MatrixT_unsigned_long_t,
  &_swigt__p_SimpleEigen__MatrixT_unsigned_short_t,
  &_swigt__p_SimpleEigen__MatrixViewT_double_t,
  &_swigt__p_SimpleEigen__MatrixViewT_float_t,
  &_swigt__p_SimpleEigen__RowVectorT_double_t,
  &_swigt__p_SimpleEigen__RowVectorT_float_t,
  &_swigt__p_SimpleEigen__RowVectorT_int_t,
  &_swigt__p_SimpleEigen__RowVectorT_long_double_t,
  &_swigt__p_SimpleEigen__RowVectorT_long_long_t,
  &_swigt__p_SimpleEigen__RowVectorT_long_t,
  &_swigt__p_SimpleEigen__RowVectorT_short_t,
  &_swigt__p_SimpleEigen__RowVectorT_signed_char_t,
  &_swigt__p_SimpleEigen__RowVectorT_unsigned_char_t,
  &_swigt__p_SimpleEigen__RowVectorT_unsigned_int_t,
  &_swigt__p_SimpleEigen__RowVectorT_unsigned_long_long_t,
  &_swigt__p_SimpleEigen__RowVectorT_unsigned_long_t,
  &_swigt__p_SimpleEigen__RowVectorT_unsigned_short_t,
  &_swigt__p_SimpleEigen__ScalarT_double_t,
  &_swigt__p_SimpleEigen__ScalarT_float_t,
  &_swigt__p_SimpleEigen__ScalarT_int_t,
  &_swigt__p_SimpleEigen__ScalarT_long_double_t,
  &_swigt__p_SimpleEigen__ScalarT_long_long_t,
  &_swigt__p_SimpleEigen__ScalarT_long_t,
  &_swigt__p_SimpleEigen__ScalarT_short_t,
  &_swigt__p_SimpleEigen__ScalarT_signed_char_t,
  &_swigt__p_SimpleEigen__ScalarT_unsigned_char_t,
  &_swigt__p_SimpleEigen__ScalarT_unsigned_int_t,
  &_swigt__p_SimpleEigen__ScalarT_unsigned_long_long_t,
  &_swigt__p_SimpleEigen__ScalarT_unsigned_long_t,
  &_swigt__p_SimpleEigen__ScalarT_unsigned_short_t,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_long,
  &_swigt__p_long_double,
  &_swigt__p_long_long,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_std__complexT_double_t,
  &_swigt__p_std__complexT_float_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_char_t,
  &_swigt__p_std__vectorT_double_t,
  &_swigt__p_std__vectorT_float_t,
  &_swigt__p_std__vectorT_int_t,
  &_swigt__p_std__vectorT_long_double_t,
  &_swigt__p_std__vectorT_long_long_t,
  &_swigt__p_std__vectorT_long_t,
  &_swigt__p_std__vectorT_short_t,
  &_swigt__p_std__vectorT_std__vectorT_double_t_t,
  &_swigt__p_std__vectorT_std__vectorT_float_t_t,
  &_swigt__p_std__vectorT_std__vectorT_long_double_t_t,
  &_swigt__p_std__vectorT_std__vectorT_unsigned_char_t_t,
  &_swigt__p_std__vectorT_std__vectorT_unsigned_int_t_t,
  &_swigt__p_std__vectorT_std__vectorT_unsigned_long_long_t_t,
  &_swigt__p_std__vectorT_std__vectorT_unsigned_long_t_t,
  &_swigt__p_std__vectorT_std__vectorT_unsigned_short_t_t,
  &_swigt__p_std__vectorT_unsigned_char_t,
  &_swigt__p_std__vectorT_unsigned_int_t,
  &_swigt__p_std__vectorT_unsigned_long_long_t,
  &_swigt__p_std__vectorT_unsigned_long_t,
  &_swigt__p_std__vectorT_unsigned_short_t,
  &_swigt__p_std__vector_iteratorT_char_t,
  &_swigt__p_std__vector_iteratorT_double_t,
  &_swigt__p_std__vector_iteratorT_float_t,
  &_swigt__p_std__vector_iteratorT_int_t,
  &_swigt__p_std__vector_iteratorT_long_double_t,
  &_swigt__p_std__vector_iteratorT_long_long_t,
  &_swigt__p_std__vector_iteratorT_long_t,
  &_swigt__p_std__vector_iteratorT_short_t,
  &_swigt__p_std__vector_iteratorT_std__vectorT_double_t_t,
  &_swigt__p_std__vector_iteratorT_std__vectorT_float_t_t,
  &_swigt__p_std__vector_iteratorT_std__vectorT_long_double_t_t,
  &_swigt__p_std__vector_iteratorT_std__vectorT_unsigned_char_t_t,
  &_swigt__p_std__vector_iteratorT_std__vectorT_unsigned_int_t_t,
  &_swigt__p_std__vector_iteratorT_std__vectorT_unsigned_long_long_t_t,
  &_swigt__p_std__vector_iteratorT_std__vectorT_unsigned_long_t_t,
  &_swigt__p_std__vector_iteratorT_std__vectorT_unsigned_short_t_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_short,
};

static swig_cast_info _swigc__p_Eigen__ArrayT_double_Eigen__Dynamic_Eigen__Dynamic_t[] = {  {&_swigt__p_Eigen__ArrayT_double_Eigen__Dynamic_Eigen__Dynamic_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__ArrayT_float_Eigen__Dynamic_Eigen__Dynamic_t[] = {  {&_swigt__p_Eigen__ArrayT_float_Eigen__Dynamic_Eigen__Dynamic_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__MatrixT_double_1_Eigen__Dynamic_t[] = {  {&_swigt__p_Eigen__MatrixT_double_1_Eigen__Dynamic_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__MatrixT_double_Eigen__Dynamic_1_t[] = {  {&_swigt__p_Eigen__MatrixT_double_Eigen__Dynamic_1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__MatrixT_float_1_Eigen__Dynamic_t[] = {  {&_swigt__p_Eigen__MatrixT_float_1_Eigen__Dynamic_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__MatrixT_float_Eigen__Dynamic_1_t[] = {  {&_swigt__p_Eigen__MatrixT_float_Eigen__Dynamic_1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SWIGLUA_REF[] = {  {&_swigt__p_SWIGLUA_REF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__Array2DT_double_t[] = {  {&_swigt__p_SimpleEigen__Array2DT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__Array2DT_float_t[] = {  {&_swigt__p_SimpleEigen__Array2DT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__Array2DT_int_t[] = {  {&_swigt__p_SimpleEigen__Array2DT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__Array2DT_long_double_t[] = {  {&_swigt__p_SimpleEigen__Array2DT_long_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__Array2DT_long_long_t[] = {  {&_swigt__p_SimpleEigen__Array2DT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__Array2DT_long_t[] = {  {&_swigt__p_SimpleEigen__Array2DT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__Array2DT_short_t[] = {  {&_swigt__p_SimpleEigen__Array2DT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__Array2DT_signed_char_t[] = {  {&_swigt__p_SimpleEigen__Array2DT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__Array2DT_unsigned_char_t[] = {  {&_swigt__p_SimpleEigen__Array2DT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__Array2DT_unsigned_int_t[] = {  {&_swigt__p_SimpleEigen__Array2DT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__Array2DT_unsigned_long_long_t[] = {  {&_swigt__p_SimpleEigen__Array2DT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__Array2DT_unsigned_long_t[] = {  {&_swigt__p_SimpleEigen__Array2DT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__Array2DT_unsigned_short_t[] = {  {&_swigt__p_SimpleEigen__Array2DT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ArrayT_double_t[] = {  {&_swigt__p_SimpleEigen__ArrayT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ArrayT_float_t[] = {  {&_swigt__p_SimpleEigen__ArrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ArrayT_int_t[] = {  {&_swigt__p_SimpleEigen__ArrayT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ArrayT_long_double_t[] = {  {&_swigt__p_SimpleEigen__ArrayT_long_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ArrayT_long_long_t[] = {  {&_swigt__p_SimpleEigen__ArrayT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ArrayT_long_t[] = {  {&_swigt__p_SimpleEigen__ArrayT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ArrayT_short_t[] = {  {&_swigt__p_SimpleEigen__ArrayT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ArrayT_signed_char_t[] = {  {&_swigt__p_SimpleEigen__ArrayT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ArrayT_unsigned_char_t[] = {  {&_swigt__p_SimpleEigen__ArrayT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ArrayT_unsigned_int_t[] = {  {&_swigt__p_SimpleEigen__ArrayT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ArrayT_unsigned_long_long_t[] = {  {&_swigt__p_SimpleEigen__ArrayT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ArrayT_unsigned_long_t[] = {  {&_swigt__p_SimpleEigen__ArrayT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ArrayT_unsigned_short_t[] = {  {&_swigt__p_SimpleEigen__ArrayT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__Base[] = {  {&_swigt__p_SimpleEigen__ScalarT_unsigned_long_long_t, _p_SimpleEigen__ScalarT_unsigned_long_long_tTo_p_SimpleEigen__Base, 0, 0},  {&_swigt__p_SimpleEigen__ScalarT_long_t, _p_SimpleEigen__ScalarT_long_tTo_p_SimpleEigen__Base, 0, 0},  {&_swigt__p_SimpleEigen__ScalarT_unsigned_long_t, _p_SimpleEigen__ScalarT_unsigned_long_tTo_p_SimpleEigen__Base, 0, 0},  {&_swigt__p_SimpleEigen__ScalarT_long_long_t, _p_SimpleEigen__ScalarT_long_long_tTo_p_SimpleEigen__Base, 0, 0},  {&_swigt__p_SimpleEigen__ScalarT_unsigned_char_t, _p_SimpleEigen__ScalarT_unsigned_char_tTo_p_SimpleEigen__Base, 0, 0},  {&_swigt__p_SimpleEigen__ScalarT_signed_char_t, _p_SimpleEigen__ScalarT_signed_char_tTo_p_SimpleEigen__Base, 0, 0},  {&_swigt__p_SimpleEigen__Base, 0, 0, 0},  {&_swigt__p_SimpleEigen__ArrayT_double_t, _p_SimpleEigen__ArrayT_double_tTo_p_SimpleEigen__Base, 0, 0},  {&_swigt__p_SimpleEigen__ColMatrixViewT_double_t, _p_SimpleEigen__ColMatrixViewT_double_tTo_p_SimpleEigen__Base, 0, 0},  {&_swigt__p_SimpleEigen__MatrixViewT_double_t, _p_SimpleEigen__MatrixViewT_double_tTo_p_SimpleEigen__Base, 0, 0},  {&_swigt__p_SimpleEigen__ScalarT_long_double_t, _p_SimpleEigen__ScalarT_long_double_tTo_p_SimpleEigen__Base, 0, 0},  {&_swigt__p_SimpleEigen__ScalarT_double_t, _p_SimpleEigen__ScalarT_double_tTo_p_SimpleEigen__Base, 0, 0},  {&_swigt__p_SimpleEigen__ComplexT_double_t, _p_SimpleEigen__ComplexT_double_tTo_p_SimpleEigen__Base, 0, 0},  {&_swigt__p_SimpleEigen__ColVectorT_double_t, _p_SimpleEigen__ColVectorT_double_tTo_p_SimpleEigen__Base, 0, 0},  {&_swigt__p_SimpleEigen__Array2DT_double_t, _p_SimpleEigen__Array2DT_double_tTo_p_SimpleEigen__Base, 0, 0},  {&_swigt__p_SimpleEigen__ScalarT_int_t, _p_SimpleEigen__ScalarT_int_tTo_p_SimpleEigen__Base, 0, 0},  {&_swigt__p_SimpleEigen__ScalarT_unsigned_int_t, _p_SimpleEigen__ScalarT_unsigned_int_tTo_p_SimpleEigen__Base, 0, 0},  {&_swigt__p_SimpleEigen__ScalarT_unsigned_short_t, _p_SimpleEigen__ScalarT_unsigned_short_tTo_p_SimpleEigen__Base, 0, 0},  {&_swigt__p_SimpleEigen__ScalarT_short_t, _p_SimpleEigen__ScalarT_short_tTo_p_SimpleEigen__Base, 0, 0},  {&_swigt__p_SimpleEigen__Array2DT_float_t, _p_SimpleEigen__Array2DT_float_tTo_p_SimpleEigen__Base, 0, 0},  {&_swigt__p_SimpleEigen__ArrayT_float_t, _p_SimpleEigen__ArrayT_float_tTo_p_SimpleEigen__Base, 0, 0},  {&_swigt__p_SimpleEigen__ColMatrixViewT_float_t, _p_SimpleEigen__ColMatrixViewT_float_tTo_p_SimpleEigen__Base, 0, 0},  {&_swigt__p_SimpleEigen__MatrixViewT_float_t, _p_SimpleEigen__MatrixViewT_float_tTo_p_SimpleEigen__Base, 0, 0},  {&_swigt__p_SimpleEigen__ColVectorT_float_t, _p_SimpleEigen__ColVectorT_float_tTo_p_SimpleEigen__Base, 0, 0},  {&_swigt__p_SimpleEigen__ComplexT_float_t, _p_SimpleEigen__ComplexT_float_tTo_p_SimpleEigen__Base, 0, 0},  {&_swigt__p_SimpleEigen__ScalarT_float_t, _p_SimpleEigen__ScalarT_float_tTo_p_SimpleEigen__Base, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ColMatrixT_double_t[] = {  {&_swigt__p_SimpleEigen__ColMatrixT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ColMatrixT_float_t[] = {  {&_swigt__p_SimpleEigen__ColMatrixT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ColMatrixViewT_double_t[] = {  {&_swigt__p_SimpleEigen__ColMatrixViewT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ColMatrixViewT_float_t[] = {  {&_swigt__p_SimpleEigen__ColMatrixViewT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ColVectorT_double_t[] = {  {&_swigt__p_SimpleEigen__ColVectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ColVectorT_float_t[] = {  {&_swigt__p_SimpleEigen__ColVectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ColVectorT_int_t[] = {  {&_swigt__p_SimpleEigen__ColVectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ColVectorT_long_double_t[] = {  {&_swigt__p_SimpleEigen__ColVectorT_long_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ColVectorT_long_long_t[] = {  {&_swigt__p_SimpleEigen__ColVectorT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ColVectorT_long_t[] = {  {&_swigt__p_SimpleEigen__ColVectorT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ColVectorT_short_t[] = {  {&_swigt__p_SimpleEigen__ColVectorT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ColVectorT_signed_char_t[] = {  {&_swigt__p_SimpleEigen__ColVectorT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ColVectorT_unsigned_char_t[] = {  {&_swigt__p_SimpleEigen__ColVectorT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ColVectorT_unsigned_int_t[] = {  {&_swigt__p_SimpleEigen__ColVectorT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ColVectorT_unsigned_long_long_t[] = {  {&_swigt__p_SimpleEigen__ColVectorT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ColVectorT_unsigned_long_t[] = {  {&_swigt__p_SimpleEigen__ColVectorT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ColVectorT_unsigned_short_t[] = {  {&_swigt__p_SimpleEigen__ColVectorT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ComplexT_double_t[] = {  {&_swigt__p_SimpleEigen__ComplexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ComplexT_float_t[] = {  {&_swigt__p_SimpleEigen__ComplexT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__Eigen2DArrayT_double_t[] = {  {&_swigt__p_SimpleEigen__Eigen2DArrayT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__Eigen2DArrayT_float_t[] = {  {&_swigt__p_SimpleEigen__Eigen2DArrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__EigenArray2DT_double_t[] = {  {&_swigt__p_SimpleEigen__EigenArray2DT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__EigenArray2DT_float_t[] = {  {&_swigt__p_SimpleEigen__EigenArray2DT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__EigenArrayT_double_t[] = {  {&_swigt__p_SimpleEigen__EigenArrayT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__EigenArrayT_float_t[] = {  {&_swigt__p_SimpleEigen__EigenArrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__EigenCol2DArrayT_double_t[] = {  {&_swigt__p_SimpleEigen__EigenCol2DArrayT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__EigenCol2DArrayT_float_t[] = {  {&_swigt__p_SimpleEigen__EigenCol2DArrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__EigenColMatrixT_double_t[] = {  {&_swigt__p_SimpleEigen__EigenColMatrixT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__EigenColMatrixT_float_t[] = {  {&_swigt__p_SimpleEigen__EigenColMatrixT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__EigenColVectorT_double_t[] = {  {&_swigt__p_SimpleEigen__EigenColVectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__EigenColVectorT_float_t[] = {  {&_swigt__p_SimpleEigen__EigenColVectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__EigenMatrixT_double_t[] = {  {&_swigt__p_SimpleEigen__EigenMatrixT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__EigenMatrixT_float_t[] = {  {&_swigt__p_SimpleEigen__EigenMatrixT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__EigenRowVectorT_double_t[] = {  {&_swigt__p_SimpleEigen__EigenRowVectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__EigenRowVectorT_float_t[] = {  {&_swigt__p_SimpleEigen__EigenRowVectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__MatrixT_double_t[] = {  {&_swigt__p_SimpleEigen__MatrixT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__MatrixT_float_t[] = {  {&_swigt__p_SimpleEigen__MatrixT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__MatrixT_int_t[] = {  {&_swigt__p_SimpleEigen__MatrixT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__MatrixT_long_double_t[] = {  {&_swigt__p_SimpleEigen__MatrixT_long_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__MatrixT_long_long_t[] = {  {&_swigt__p_SimpleEigen__MatrixT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__MatrixT_long_t[] = {  {&_swigt__p_SimpleEigen__MatrixT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__MatrixT_short_t[] = {  {&_swigt__p_SimpleEigen__MatrixT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__MatrixT_signed_char_t[] = {  {&_swigt__p_SimpleEigen__MatrixT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__MatrixT_unsigned_char_t[] = {  {&_swigt__p_SimpleEigen__MatrixT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__MatrixT_unsigned_int_t[] = {  {&_swigt__p_SimpleEigen__MatrixT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__MatrixT_unsigned_long_long_t[] = {  {&_swigt__p_SimpleEigen__MatrixT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__MatrixT_unsigned_long_t[] = {  {&_swigt__p_SimpleEigen__MatrixT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__MatrixT_unsigned_short_t[] = {  {&_swigt__p_SimpleEigen__MatrixT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__MatrixViewT_double_t[] = {  {&_swigt__p_SimpleEigen__MatrixViewT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__MatrixViewT_float_t[] = {  {&_swigt__p_SimpleEigen__MatrixViewT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__RowVectorT_double_t[] = {  {&_swigt__p_SimpleEigen__RowVectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__RowVectorT_float_t[] = {  {&_swigt__p_SimpleEigen__RowVectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__RowVectorT_int_t[] = {  {&_swigt__p_SimpleEigen__RowVectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__RowVectorT_long_double_t[] = {  {&_swigt__p_SimpleEigen__RowVectorT_long_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__RowVectorT_long_long_t[] = {  {&_swigt__p_SimpleEigen__RowVectorT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__RowVectorT_long_t[] = {  {&_swigt__p_SimpleEigen__RowVectorT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__RowVectorT_short_t[] = {  {&_swigt__p_SimpleEigen__RowVectorT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__RowVectorT_signed_char_t[] = {  {&_swigt__p_SimpleEigen__RowVectorT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__RowVectorT_unsigned_char_t[] = {  {&_swigt__p_SimpleEigen__RowVectorT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__RowVectorT_unsigned_int_t[] = {  {&_swigt__p_SimpleEigen__RowVectorT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__RowVectorT_unsigned_long_long_t[] = {  {&_swigt__p_SimpleEigen__RowVectorT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__RowVectorT_unsigned_long_t[] = {  {&_swigt__p_SimpleEigen__RowVectorT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__RowVectorT_unsigned_short_t[] = {  {&_swigt__p_SimpleEigen__RowVectorT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ScalarT_double_t[] = {  {&_swigt__p_SimpleEigen__ScalarT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ScalarT_float_t[] = {  {&_swigt__p_SimpleEigen__ScalarT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ScalarT_int_t[] = {  {&_swigt__p_SimpleEigen__ScalarT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ScalarT_long_double_t[] = {  {&_swigt__p_SimpleEigen__ScalarT_long_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ScalarT_long_long_t[] = {  {&_swigt__p_SimpleEigen__ScalarT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ScalarT_long_t[] = {  {&_swigt__p_SimpleEigen__ScalarT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ScalarT_short_t[] = {  {&_swigt__p_SimpleEigen__ScalarT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ScalarT_signed_char_t[] = {  {&_swigt__p_SimpleEigen__ScalarT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ScalarT_unsigned_char_t[] = {  {&_swigt__p_SimpleEigen__ScalarT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ScalarT_unsigned_int_t[] = {  {&_swigt__p_SimpleEigen__ScalarT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ScalarT_unsigned_long_long_t[] = {  {&_swigt__p_SimpleEigen__ScalarT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ScalarT_unsigned_long_t[] = {  {&_swigt__p_SimpleEigen__ScalarT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleEigen__ScalarT_unsigned_short_t[] = {  {&_swigt__p_SimpleEigen__ScalarT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_double[] = {  {&_swigt__p_long_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_double_t[] = {  {&_swigt__p_std__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_float_t[] = {  {&_swigt__p_std__complexT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_char_t[] = {  {&_swigt__p_std__vectorT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t[] = {  {&_swigt__p_std__vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_t[] = {  {&_swigt__p_std__vectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_t[] = {  {&_swigt__p_std__vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_long_double_t[] = {  {&_swigt__p_std__vectorT_long_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_long_long_t[] = {  {&_swigt__p_std__vectorT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_long_t[] = {  {&_swigt__p_std__vectorT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_short_t[] = {  {&_swigt__p_std__vectorT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_double_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_float_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_long_double_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_long_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_unsigned_char_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_unsigned_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_unsigned_int_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_unsigned_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_unsigned_long_long_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_unsigned_long_long_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_unsigned_long_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_unsigned_long_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_unsigned_short_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_unsigned_short_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_char_t[] = {  {&_swigt__p_std__vectorT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_t[] = {  {&_swigt__p_std__vectorT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_long_long_t[] = {  {&_swigt__p_std__vectorT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_long_t[] = {  {&_swigt__p_std__vectorT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_short_t[] = {  {&_swigt__p_std__vectorT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_char_t[] = {  {&_swigt__p_std__vector_iteratorT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_double_t[] = {  {&_swigt__p_std__vector_iteratorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_float_t[] = {  {&_swigt__p_std__vector_iteratorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_int_t[] = {  {&_swigt__p_std__vector_iteratorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_long_double_t[] = {  {&_swigt__p_std__vector_iteratorT_long_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_long_long_t[] = {  {&_swigt__p_std__vector_iteratorT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_long_t[] = {  {&_swigt__p_std__vector_iteratorT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_short_t[] = {  {&_swigt__p_std__vector_iteratorT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_std__vectorT_double_t_t[] = {  {&_swigt__p_std__vector_iteratorT_std__vectorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_std__vectorT_float_t_t[] = {  {&_swigt__p_std__vector_iteratorT_std__vectorT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_std__vectorT_long_double_t_t[] = {  {&_swigt__p_std__vector_iteratorT_std__vectorT_long_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_std__vectorT_unsigned_char_t_t[] = {  {&_swigt__p_std__vector_iteratorT_std__vectorT_unsigned_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_std__vectorT_unsigned_int_t_t[] = {  {&_swigt__p_std__vector_iteratorT_std__vectorT_unsigned_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_std__vectorT_unsigned_long_long_t_t[] = {  {&_swigt__p_std__vector_iteratorT_std__vectorT_unsigned_long_long_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_std__vectorT_unsigned_long_t_t[] = {  {&_swigt__p_std__vector_iteratorT_std__vectorT_unsigned_long_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_std__vectorT_unsigned_short_t_t[] = {  {&_swigt__p_std__vector_iteratorT_std__vectorT_unsigned_short_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Eigen__ArrayT_double_Eigen__Dynamic_Eigen__Dynamic_t,
  _swigc__p_Eigen__ArrayT_float_Eigen__Dynamic_Eigen__Dynamic_t,
  _swigc__p_Eigen__MatrixT_double_1_Eigen__Dynamic_t,
  _swigc__p_Eigen__MatrixT_double_Eigen__Dynamic_1_t,
  _swigc__p_Eigen__MatrixT_float_1_Eigen__Dynamic_t,
  _swigc__p_Eigen__MatrixT_float_Eigen__Dynamic_1_t,
  _swigc__p_SWIGLUA_REF,
  _swigc__p_SimpleEigen__Array2DT_double_t,
  _swigc__p_SimpleEigen__Array2DT_float_t,
  _swigc__p_SimpleEigen__Array2DT_int_t,
  _swigc__p_SimpleEigen__Array2DT_long_double_t,
  _swigc__p_SimpleEigen__Array2DT_long_long_t,
  _swigc__p_SimpleEigen__Array2DT_long_t,
  _swigc__p_SimpleEigen__Array2DT_short_t,
  _swigc__p_SimpleEigen__Array2DT_signed_char_t,
  _swigc__p_SimpleEigen__Array2DT_unsigned_char_t,
  _swigc__p_SimpleEigen__Array2DT_unsigned_int_t,
  _swigc__p_SimpleEigen__Array2DT_unsigned_long_long_t,
  _swigc__p_SimpleEigen__Array2DT_unsigned_long_t,
  _swigc__p_SimpleEigen__Array2DT_unsigned_short_t,
  _swigc__p_SimpleEigen__ArrayT_double_t,
  _swigc__p_SimpleEigen__ArrayT_float_t,
  _swigc__p_SimpleEigen__ArrayT_int_t,
  _swigc__p_SimpleEigen__ArrayT_long_double_t,
  _swigc__p_SimpleEigen__ArrayT_long_long_t,
  _swigc__p_SimpleEigen__ArrayT_long_t,
  _swigc__p_SimpleEigen__ArrayT_short_t,
  _swigc__p_SimpleEigen__ArrayT_signed_char_t,
  _swigc__p_SimpleEigen__ArrayT_unsigned_char_t,
  _swigc__p_SimpleEigen__ArrayT_unsigned_int_t,
  _swigc__p_SimpleEigen__ArrayT_unsigned_long_long_t,
  _swigc__p_SimpleEigen__ArrayT_unsigned_long_t,
  _swigc__p_SimpleEigen__ArrayT_unsigned_short_t,
  _swigc__p_SimpleEigen__Base,
  _swigc__p_SimpleEigen__ColMatrixT_double_t,
  _swigc__p_SimpleEigen__ColMatrixT_float_t,
  _swigc__p_SimpleEigen__ColMatrixViewT_double_t,
  _swigc__p_SimpleEigen__ColMatrixViewT_float_t,
  _swigc__p_SimpleEigen__ColVectorT_double_t,
  _swigc__p_SimpleEigen__ColVectorT_float_t,
  _swigc__p_SimpleEigen__ColVectorT_int_t,
  _swigc__p_SimpleEigen__ColVectorT_long_double_t,
  _swigc__p_SimpleEigen__ColVectorT_long_long_t,
  _swigc__p_SimpleEigen__ColVectorT_long_t,
  _swigc__p_SimpleEigen__ColVectorT_short_t,
  _swigc__p_SimpleEigen__ColVectorT_signed_char_t,
  _swigc__p_SimpleEigen__ColVectorT_unsigned_char_t,
  _swigc__p_SimpleEigen__ColVectorT_unsigned_int_t,
  _swigc__p_SimpleEigen__ColVectorT_unsigned_long_long_t,
  _swigc__p_SimpleEigen__ColVectorT_unsigned_long_t,
  _swigc__p_SimpleEigen__ColVectorT_unsigned_short_t,
  _swigc__p_SimpleEigen__ComplexT_double_t,
  _swigc__p_SimpleEigen__ComplexT_float_t,
  _swigc__p_SimpleEigen__Eigen2DArrayT_double_t,
  _swigc__p_SimpleEigen__Eigen2DArrayT_float_t,
  _swigc__p_SimpleEigen__EigenArray2DT_double_t,
  _swigc__p_SimpleEigen__EigenArray2DT_float_t,
  _swigc__p_SimpleEigen__EigenArrayT_double_t,
  _swigc__p_SimpleEigen__EigenArrayT_float_t,
  _swigc__p_SimpleEigen__EigenCol2DArrayT_double_t,
  _swigc__p_SimpleEigen__EigenCol2DArrayT_float_t,
  _swigc__p_SimpleEigen__EigenColMatrixT_double_t,
  _swigc__p_SimpleEigen__EigenColMatrixT_float_t,
  _swigc__p_SimpleEigen__EigenColVectorT_double_t,
  _swigc__p_SimpleEigen__EigenColVectorT_float_t,
  _swigc__p_SimpleEigen__EigenMatrixT_double_t,
  _swigc__p_SimpleEigen__EigenMatrixT_float_t,
  _swigc__p_SimpleEigen__EigenRowVectorT_double_t,
  _swigc__p_SimpleEigen__EigenRowVectorT_float_t,
  _swigc__p_SimpleEigen__MatrixT_double_t,
  _swigc__p_SimpleEigen__MatrixT_float_t,
  _swigc__p_SimpleEigen__MatrixT_int_t,
  _swigc__p_SimpleEigen__MatrixT_long_double_t,
  _swigc__p_SimpleEigen__MatrixT_long_long_t,
  _swigc__p_SimpleEigen__MatrixT_long_t,
  _swigc__p_SimpleEigen__MatrixT_short_t,
  _swigc__p_SimpleEigen__MatrixT_signed_char_t,
  _swigc__p_SimpleEigen__MatrixT_unsigned_char_t,
  _swigc__p_SimpleEigen__MatrixT_unsigned_int_t,
  _swigc__p_SimpleEigen__MatrixT_unsigned_long_long_t,
  _swigc__p_SimpleEigen__MatrixT_unsigned_long_t,
  _swigc__p_SimpleEigen__MatrixT_unsigned_short_t,
  _swigc__p_SimpleEigen__MatrixViewT_double_t,
  _swigc__p_SimpleEigen__MatrixViewT_float_t,
  _swigc__p_SimpleEigen__RowVectorT_double_t,
  _swigc__p_SimpleEigen__RowVectorT_float_t,
  _swigc__p_SimpleEigen__RowVectorT_int_t,
  _swigc__p_SimpleEigen__RowVectorT_long_double_t,
  _swigc__p_SimpleEigen__RowVectorT_long_long_t,
  _swigc__p_SimpleEigen__RowVectorT_long_t,
  _swigc__p_SimpleEigen__RowVectorT_short_t,
  _swigc__p_SimpleEigen__RowVectorT_signed_char_t,
  _swigc__p_SimpleEigen__RowVectorT_unsigned_char_t,
  _swigc__p_SimpleEigen__RowVectorT_unsigned_int_t,
  _swigc__p_SimpleEigen__RowVectorT_unsigned_long_long_t,
  _swigc__p_SimpleEigen__RowVectorT_unsigned_long_t,
  _swigc__p_SimpleEigen__RowVectorT_unsigned_short_t,
  _swigc__p_SimpleEigen__ScalarT_double_t,
  _swigc__p_SimpleEigen__ScalarT_float_t,
  _swigc__p_SimpleEigen__ScalarT_int_t,
  _swigc__p_SimpleEigen__ScalarT_long_double_t,
  _swigc__p_SimpleEigen__ScalarT_long_long_t,
  _swigc__p_SimpleEigen__ScalarT_long_t,
  _swigc__p_SimpleEigen__ScalarT_short_t,
  _swigc__p_SimpleEigen__ScalarT_signed_char_t,
  _swigc__p_SimpleEigen__ScalarT_unsigned_char_t,
  _swigc__p_SimpleEigen__ScalarT_unsigned_int_t,
  _swigc__p_SimpleEigen__ScalarT_unsigned_long_long_t,
  _swigc__p_SimpleEigen__ScalarT_unsigned_long_t,
  _swigc__p_SimpleEigen__ScalarT_unsigned_short_t,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_long,
  _swigc__p_long_double,
  _swigc__p_long_long,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_std__complexT_double_t,
  _swigc__p_std__complexT_float_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_char_t,
  _swigc__p_std__vectorT_double_t,
  _swigc__p_std__vectorT_float_t,
  _swigc__p_std__vectorT_int_t,
  _swigc__p_std__vectorT_long_double_t,
  _swigc__p_std__vectorT_long_long_t,
  _swigc__p_std__vectorT_long_t,
  _swigc__p_std__vectorT_short_t,
  _swigc__p_std__vectorT_std__vectorT_double_t_t,
  _swigc__p_std__vectorT_std__vectorT_float_t_t,
  _swigc__p_std__vectorT_std__vectorT_long_double_t_t,
  _swigc__p_std__vectorT_std__vectorT_unsigned_char_t_t,
  _swigc__p_std__vectorT_std__vectorT_unsigned_int_t_t,
  _swigc__p_std__vectorT_std__vectorT_unsigned_long_long_t_t,
  _swigc__p_std__vectorT_std__vectorT_unsigned_long_t_t,
  _swigc__p_std__vectorT_std__vectorT_unsigned_short_t_t,
  _swigc__p_std__vectorT_unsigned_char_t,
  _swigc__p_std__vectorT_unsigned_int_t,
  _swigc__p_std__vectorT_unsigned_long_long_t,
  _swigc__p_std__vectorT_unsigned_long_t,
  _swigc__p_std__vectorT_unsigned_short_t,
  _swigc__p_std__vector_iteratorT_char_t,
  _swigc__p_std__vector_iteratorT_double_t,
  _swigc__p_std__vector_iteratorT_float_t,
  _swigc__p_std__vector_iteratorT_int_t,
  _swigc__p_std__vector_iteratorT_long_double_t,
  _swigc__p_std__vector_iteratorT_long_long_t,
  _swigc__p_std__vector_iteratorT_long_t,
  _swigc__p_std__vector_iteratorT_short_t,
  _swigc__p_std__vector_iteratorT_std__vectorT_double_t_t,
  _swigc__p_std__vector_iteratorT_std__vectorT_float_t_t,
  _swigc__p_std__vector_iteratorT_std__vectorT_long_double_t_t,
  _swigc__p_std__vector_iteratorT_std__vectorT_unsigned_char_t_t,
  _swigc__p_std__vector_iteratorT_std__vectorT_unsigned_int_t_t,
  _swigc__p_std__vector_iteratorT_std__vectorT_unsigned_long_long_t_t,
  _swigc__p_std__vector_iteratorT_std__vectorT_unsigned_long_t_t,
  _swigc__p_std__vector_iteratorT_std__vectorT_unsigned_short_t_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_short,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

