/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  do { if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } } while (0)


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all its bases (recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metamethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows skipping searching metamethod in the given class and immediately going to searching in bases. skip_check
 * is not carried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metamethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result = 0;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_CuRand swig_types[0]
#define SWIGTYPE_p_Cublas swig_types[1]
#define SWIGTYPE_p_CublasAtomicsMode swig_types[2]
#define SWIGTYPE_p_CublasMathMode swig_types[3]
#define SWIGTYPE_p_CublasPointerMode swig_types[4]
#define SWIGTYPE_p_CudaStream swig_types[5]
#define SWIGTYPE_p_SchemaMemory swig_types[6]
#define SWIGTYPE_p_Viper__MatrixT_double_t swig_types[7]
#define SWIGTYPE_p_Viper__MatrixT_float_t swig_types[8]
#define SWIGTYPE_p_Viper__VectorT_double_t swig_types[9]
#define SWIGTYPE_p_Viper__VectorT_float_t swig_types[10]
#define SWIGTYPE_p___half swig_types[11]
#define SWIGTYPE_p_cuComplex swig_types[12]
#define SWIGTYPE_p_cuDoubleComplex swig_types[13]
#define SWIGTYPE_p_cublasAtomicsMode_t swig_types[14]
#define SWIGTYPE_p_cublasComputeType_t swig_types[15]
#define SWIGTYPE_p_cublasContext swig_types[16]
#define SWIGTYPE_p_cublasDiagType_t swig_types[17]
#define SWIGTYPE_p_cublasFillMode_t swig_types[18]
#define SWIGTYPE_p_cublasGemmAlgo_t swig_types[19]
#define SWIGTYPE_p_cublasMath_t swig_types[20]
#define SWIGTYPE_p_cublasOperation_t swig_types[21]
#define SWIGTYPE_p_cublasPointerMode_t swig_types[22]
#define SWIGTYPE_p_cublasSideMode_t swig_types[23]
#define SWIGTYPE_p_cublasStatus_t swig_types[24]
#define SWIGTYPE_p_cudaDataType_t swig_types[25]
#define SWIGTYPE_p_cudaStream_t swig_types[26]
#define SWIGTYPE_p_curandGenerator_t swig_types[27]
#define SWIGTYPE_p_double swig_types[28]
#define SWIGTYPE_p_f_float__float swig_types[29]
#define SWIGTYPE_p_f_p_q_const__char__void swig_types[30]
#define SWIGTYPE_p_f_r_q_const__float__float swig_types[31]
#define SWIGTYPE_p_fenv_t swig_types[32]
#define SWIGTYPE_p_fexcept_t swig_types[33]
#define SWIGTYPE_p_float swig_types[34]
#define SWIGTYPE_p_int swig_types[35]
#define SWIGTYPE_p_libraryPropertyType_t swig_types[36]
#define SWIGTYPE_p_long swig_types[37]
#define SWIGTYPE_p_long_long swig_types[38]
#define SWIGTYPE_p_p___half swig_types[39]
#define SWIGTYPE_p_p_cuComplex swig_types[40]
#define SWIGTYPE_p_p_cuDoubleComplex swig_types[41]
#define SWIGTYPE_p_p_cublasContext swig_types[42]
#define SWIGTYPE_p_p_double swig_types[43]
#define SWIGTYPE_p_p_f_p_q_const__char__void swig_types[44]
#define SWIGTYPE_p_p_float swig_types[45]
#define SWIGTYPE_p_p_void swig_types[46]
#define SWIGTYPE_p_pthread_mutex_t swig_types[47]
#define SWIGTYPE_p_short swig_types[48]
#define SWIGTYPE_p_signed_char swig_types[49]
#define SWIGTYPE_p_std__complexT_double_t swig_types[50]
#define SWIGTYPE_p_std__complexT_float_t swig_types[51]
#define SWIGTYPE_p_std__gslice swig_types[52]
#define SWIGTYPE_p_std__gslice_arrayT_float_t swig_types[53]
#define SWIGTYPE_p_std__indirect_arrayT_float_t swig_types[54]
#define SWIGTYPE_p_std__initializer_listT_double_t swig_types[55]
#define SWIGTYPE_p_std__initializer_listT_float_t swig_types[56]
#define SWIGTYPE_p_std__mask_arrayT_float_t swig_types[57]
#define SWIGTYPE_p_std__multimapT_int_std__pairT_void_p_void_p_t_t swig_types[58]
#define SWIGTYPE_p_std__numeric_limitsT_double_t swig_types[59]
#define SWIGTYPE_p_std__numeric_limitsT_float_t swig_types[60]
#define SWIGTYPE_p_std__numeric_limitsT_int_t swig_types[61]
#define SWIGTYPE_p_std__numeric_limitsT_long_long_t swig_types[62]
#define SWIGTYPE_p_std__numeric_limitsT_long_t swig_types[63]
#define SWIGTYPE_p_std__numeric_limitsT_short_t swig_types[64]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t swig_types[65]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t swig_types[66]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t swig_types[67]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t swig_types[68]
#define SWIGTYPE_p_std__pairT_void_p_void_p_t swig_types[69]
#define SWIGTYPE_p_std__shared_ptrT_DevPtrT_double_t_t swig_types[70]
#define SWIGTYPE_p_std__shared_ptrT_DevPtrT_float_t_t swig_types[71]
#define SWIGTYPE_p_std__slice swig_types[72]
#define SWIGTYPE_p_std__slice_arrayT_float_t swig_types[73]
#define SWIGTYPE_p_std__valarrayT_float_t swig_types[74]
#define SWIGTYPE_p_std__vectorT_double_t swig_types[75]
#define SWIGTYPE_p_std__vectorT_float_t swig_types[76]
#define SWIGTYPE_p_std__vectorT_std__complexT_double_t_t swig_types[77]
#define SWIGTYPE_p_std__vectorT_std__complexT_float_t_t swig_types[78]
#define SWIGTYPE_p_std__vector_iteratorT_double_t swig_types[79]
#define SWIGTYPE_p_std__vector_iteratorT_float_t swig_types[80]
#define SWIGTYPE_p_std__vector_iteratorT_std__complexT_double_t_t swig_types[81]
#define SWIGTYPE_p_std__vector_iteratorT_std__complexT_float_t_t swig_types[82]
#define SWIGTYPE_p_unsigned_char swig_types[83]
#define SWIGTYPE_p_unsigned_int swig_types[84]
#define SWIGTYPE_p_unsigned_long swig_types[85]
#define SWIGTYPE_p_unsigned_long_long swig_types[86]
#define SWIGTYPE_p_unsigned_short swig_types[87]
#define SWIGTYPE_p_void swig_types[88]
static swig_type_info *swig_types[90];
static swig_module_info swig_module = {swig_types, 89, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "viper"
#define SWIG_init      luaopen_viper
#define SWIG_init_user luaopen_viper_user

#define SWIG_LUACODE   luaopen_viper_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include "viper.hpp"
using namespace Viper;


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include <string.h>


#include <complex>
#include <valarray>
#include <fenv.h>


#include <complex>


#include <valarray>
#include <algorithm>

SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____add____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self + b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____sub____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self - b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____div____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self / b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____mul____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self * b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____pow____SWIG_0(std::complex< float > *self,std::complex< float > const &b){ return std::pow(*self,b); }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____pow____SWIG_1(std::complex< float > *self,float const &b){ return std::pow(*self,b); }
SWIGINTERN bool std_complex_Sl_float_Sg____eq____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self == b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____add____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self + b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____sub____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self - b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____div____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self / b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____mul____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self * b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____pow____SWIG_0(std::complex< double > *self,std::complex< double > const &b){ return std::pow(*self,b); }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____pow____SWIG_1(std::complex< double > *self,double const &b){ return std::pow(*self,b); }
SWIGINTERN bool std_complex_Sl_double_Sg____eq____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self == b; }
SWIGINTERN float std_valarray_Sl_float_Sg____getitem____SWIG_0(std::valarray< float > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_valarray_Sl_float_Sg____setitem____SWIG_0(std::valarray< float > *self,size_t i,float const &v){ (*self)[i-1] = v; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____getitem____SWIG_1(std::valarray< float > *self,std::gslice const &i){ return (*self)[i]; }
SWIGINTERN void std_valarray_Sl_float_Sg____setitem____SWIG_1(std::valarray< float > *self,std::gslice const &i,float const &v){ (*self)[i] = v; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____getitem____SWIG_2(std::valarray< float > *self,std::slice const &i){ return (*self)[i]; }
SWIGINTERN void std_valarray_Sl_float_Sg____setitem____SWIG_2(std::valarray< float > *self,std::slice const &i,float const &v){ (*self)[i] = v; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____add____SWIG(std::valarray< float > *self,std::valarray< float > const &b){ return *self + b; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____sub____SWIG(std::valarray< float > *self,std::valarray< float > const &b){ return *self - b; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____mul____SWIG(std::valarray< float > *self,std::valarray< float > const &b){ return *self * b; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____div____SWIG(std::valarray< float > *self,std::valarray< float > const &b){ return *self / b; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____unm____SWIG(std::valarray< float > *self,std::valarray< float > const &b){ return -*self; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____pow____SWIG_0(std::valarray< float > *self,std::valarray< float > const &b){ return std::pow(*self,b); }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____pow____SWIG_1(std::valarray< float > *self,float const &b){ return std::pow(*self,b); }

#include <limits>



    typedef float f32;
    typedef double f64;
    typedef signed char i8;
    typedef unsigned char u8;
    typedef signed short i16;
    typedef unsigned short u16;
    typedef signed int i32;
    typedef unsigned int u32;
    typedef signed long ilong;
    typedef unsigned long ulong;
    typedef signed long long i64;
    typedef unsigned long long u64;
    
    
    
    
    template<typename T> T abs(const T& x) { return std::abs(x); }
    template<typename T> T fabs(const T& x) { return std::fabs(x); }
    template<typename T> T acos(const T& x) { return std::acos(x); }
    template<typename T> T acosh(const T& x) { return std::acosh(x); }
    template<typename T> T asinh(const T& x) { return std::asinh(x); }
    template<typename T> T asin(const T& x) { return std::asinh(x); }
    template<typename T> T atan(const T& x) { return std::atan(x); }
    template<typename T> T atan2(const T& x,const T& y) { return std::atan2(x,y); }
    template<typename T> T atanh(const T& x) { return std::atanh(x); }
    template<typename T> T cbrt(const T& x) { return std::cbrt(x); }
    template<typename T> T ceil(const T& x) { return std::ceil(x); }    
    template<typename T> T copysign(const T& x, const T& y) { return std::copysign(x,y); }
    template<typename T> T cos(const T& x) { return std::cos(x); }
    template<typename T> T cosh(const T& x) { return std::cosh(x); }
    template<typename T> T erf(const T& x) { return std::erf(x); }
    template<typename T> T erfc(const T& x) { return std::erfc(x); }
    template<typename T> T exp(const T& x) { return std::exp(x); }
    template<typename T> T exp2(const T& x) { return std::exp2(x); }
    template<typename T> T expm1(const T& x) { return std::expm1(x); }
    template<typename T> T fdim(const T & x, const T & y) { return std::fdim(x,y); }
    template<typename T> T floor(const T & x) { return std::floor(x); }
    template<typename T> T fma(const T & x, const T & y, const T& z) { return std::fma(x,y,z); }
    template<typename T> T fmax(const T & x, const T & y) { return std::fmax(x,y); }
    template<typename T> T fmin(const T & x, const T & y) { return std::fmax(x,y); }
    template<typename T> T fmod(const T & x, const T & y) { return std::fmod(x,y); }
    template<typename T> int fpclassify(const T & x) { return std::fpclassify(x); }
    template<typename T> T hypot(const T & x, const T & y) { return std::hypot(x,y); }
    template<typename T> int ilogb(const T & x) { return std::ilogb(x); }
    template<typename T> bool isfinite(const T & x) { return std::isfinite(x); }
    template<typename T> bool isgreater(const T & x, const T & y) { return std::isgreater(x,y); }
    template<typename T> bool isgreaterequal(const T & x, const T & y) { return std::isgreaterequal(x,y); }
    template<typename T> bool isinf(const T & x) { return std::isinf(x); }
    template<typename T> bool isless(const T & x, const T & y) { return std::isless(x,y); }
    template<typename T> bool islessequal(const T & x, const T & y) { return std::islessequal(x,y); }
    template<typename T> bool islessgreater(const T & x, const T & y) { return std::islessgreater(x,y); }
    template<typename T> bool isnan(const T & x) { return std::isnan(x); }
    template<typename T> bool isnormal(const T & x) { return std::isnormal(x); }
    template<typename T> bool isunordered(const T & x, const T& y) { return std::isunordered(x,y); }
    template<typename T> T ldexp(const T & x, int exp) { return std::ldexp(x,exp); }
    template<typename T> T lgamma(const T & x) { return std::lgamma(x); }
    template<typename T> T llrint(const T & x) { return std::llrint(x); }
    template<typename T> T llround(const T & x) { return std::llround(x); }
    template<typename T> T log(const T & x) { return std::log(x); }
    template<typename T> T log10(const T & x) { return std::log10(x); }
    template<typename T> T log1p(const T & x) { return std::log1p(x); }
    template<typename T> T log2(const T & x) { return std::log2(x); }
    template<typename T> T logb(const T & x) { return std::logb(x); }
    template<typename T> T lrint(const T & x) { return std::lrint(x); }
    template<typename T> T lround(const T & x) { return std::lround(x); }
    template<typename T> T nan(const char *tagp) { return std::nan(tagp);}
    template<typename T> T nanf(const char *tagp) { return std::nanf(tagp);}
    template<typename T> T nanl(const char *tagp) { return std::nanl(tagp);}
    template<typename T> T nearbyint(const T &x) { return std::nearbyint(x); }
    template<typename T> T nextafter(const T & x, const T & y) { return std::nextafter(x,y); }
    template<typename T> T nexttoward(const T & x, const T & y) { return std::nexttoward(x,y); }
    template<typename T> T pow(const T & b, const T & e) { return std::pow(b,e); }
    template<typename T> T remainder(const T & n, const T & d) { return std::remainder(n,d); }
    template<typename T> T rint(const T& x) { return std::rint(x); }
    template<typename T> T round(const T& x) { return std::round(x); }
    template<typename T> T scalbln(const T& x, long int n) { return std::scalbln(x,n);}
    template<typename T> T scalbn(const T& x, int n) { return std::scalbln(x,n);}
    template<typename T> bool signbit(const T & x) { return signbit(x); }
    template<typename T> T sin(const T& x) { return std::sin(x); }
    template<typename T> T sinh(const T& x) { return std::sinh(x); }    
    template<typename T> T sqrt(const T& x) { return std::sqrt(x); }
    template<typename T> T square(const T& x) { return x*x; }
    template<typename T> T cube(const T& x) { return x*x*x; }
    template<typename T> T tan(const T& x) { return std::tan(x); }
    template<typename T> T tanh(const T& x) { return std::tanh(x); }        
    template<typename T> T tgamma(const T& x) { return std::tgamma(x); }    
    template<typename T> T trunc(const T& x) { return std::trunc(x); }
    double Huge() { return HUGE_VAL; }
    float Hugef() { return HUGE_VALF; }
    double Infinity() { return INFINITY; }
    double NaN() { return NAN; }

    


#include <algorithm>
#include <vector>
#include <map>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <cassert>
#include <iostream>
#include <random>
#include <memory>


namespace std {
    template<typename T>
    struct vector_iterator
    {
        typename std::vector<T>::iterator iter;
        std::vector<T> v;

        vector_iterator(const std::vector<T> & vec) {
            v = vec;
        }   
        vector_iterator(const std::vector<T> & vec, const typename std::vector<T>::iterator & i) {
            iter = i;
            v = vec;
        }

        vector_iterator<T>& operator = (const T& val) {
            *iter = val;
            return *this;
        }
        vector_iterator<T>& operator = (const vector_iterator<T>& val) {
            iter = val.iter;
            v    = val.v;
            return *this;;
        }
                
        void next() {
            if(iter != v.end()) iter++;
        }
        void prev() {
            if(iter != v.begin()) iter--;
        }
        void forward(size_t i) {
            iter += i;
        }
        void backward(size_t i) {
            iter -= i;
        }
        void jump(size_t i) {
            iter = i;
        }
        
        T value() { return *iter; }
        void set_value(const T& val) { *iter = val; }
    };
}

#include "cuda_runtime.h"
#include "cublas_v2.h"


SWIGINTERN float std_vector_Sl_float_Sg____getitem__SWIG(std::vector< float > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_float_Sg____setitem__SWIG(std::vector< float > *self,size_t i,float val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< float > std_vector_Sl_float_Sg__begin__SWIG(std::vector< float > *self){
                std::vector_iterator<float> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< float > std_vector_Sl_float_Sg__end__SWIG(std::vector< float > *self){
                std::vector_iterator<float> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_float_Sg__erase__SWIG_0(std::vector< float > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_float_Sg__erase__SWIG_1(std::vector< float > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN double std_vector_Sl_double_Sg____getitem__SWIG(std::vector< double > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_double_Sg____setitem__SWIG(std::vector< double > *self,size_t i,double val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< double > std_vector_Sl_double_Sg__begin__SWIG(std::vector< double > *self){
                std::vector_iterator<double> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< double > std_vector_Sl_double_Sg__end__SWIG(std::vector< double > *self){
                std::vector_iterator<double> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_double_Sg__erase__SWIG_0(std::vector< double > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_double_Sg__erase__SWIG_1(std::vector< double > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN std::complex< float > std_vector_Sl_std_complex_Sl_float_Sg__Sg____getitem__SWIG(std::vector< std::complex< float > > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_std_complex_Sl_float_Sg__Sg____setitem__SWIG(std::vector< std::complex< float > > *self,size_t i,std::complex< float > val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< std::complex< float > > std_vector_Sl_std_complex_Sl_float_Sg__Sg__begin__SWIG(std::vector< std::complex< float > > *self){
                std::vector_iterator<std::complex< float >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< std::complex< float > > std_vector_Sl_std_complex_Sl_float_Sg__Sg__end__SWIG(std::vector< std::complex< float > > *self){
                std::vector_iterator<std::complex< float >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_std_complex_Sl_float_Sg__Sg__erase__SWIG_0(std::vector< std::complex< float > > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_std_complex_Sl_float_Sg__Sg__erase__SWIG_1(std::vector< std::complex< float > > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN std::complex< double > std_vector_Sl_std_complex_Sl_double_Sg__Sg____getitem__SWIG(std::vector< std::complex< double > > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_std_complex_Sl_double_Sg__Sg____setitem__SWIG(std::vector< std::complex< double > > *self,size_t i,std::complex< double > val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< std::complex< double > > std_vector_Sl_std_complex_Sl_double_Sg__Sg__begin__SWIG(std::vector< std::complex< double > > *self){
                std::vector_iterator<std::complex< double >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< std::complex< double > > std_vector_Sl_std_complex_Sl_double_Sg__Sg__end__SWIG(std::vector< std::complex< double > > *self){
                std::vector_iterator<std::complex< double >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_std_complex_Sl_double_Sg__Sg__erase__SWIG_0(std::vector< std::complex< double > > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_std_complex_Sl_double_Sg__Sg__erase__SWIG_1(std::vector< std::complex< double > > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
 

Cublas  _cublas;
Cublas *cublas = &_cublas;

void CreateCublas() { 
    cublas = new Cublas();
    assert(cublas != NULL);
}
void DeleteCublas() { 
    if(cublas) delete cublas;
    cublas = NULL;
}
void synchronize() {
    cudaDeviceSynchronize();
}
unsigned seed = 0;

void set_seed()
{
    typedef std::chrono::high_resolution_clock myclock;
    myclock::time_point beginning = myclock::now();
    myclock::duration d = myclock::now() - beginning;    
    seed = d.count();
}


template<typename T>
float cast_float(T val) { return (float)val; }

template<typename T>
double cast_double(T val) { return (double)val; }

template<typename T>
int8_t cast_int8(T val) { return (int8_t)val; }

template<typename T>
uint8_t cast_uint8(T val) { return (uint8_t)val; }

template<typename T>
int16_t cast_int16(T val) { return (int16_t)val; }

template<typename T>
uint16_t cast_uint16(T val) { return (uint16_t)val; }

template<typename T>
int32_t cast_int32(T val) { return (int32_t)val; }

template<typename T>
uint32_t cast_uint32(T val) { return (uint32_t)val; }

template<typename T>
int64_t cast_int64(T val) { return (int64_t)val; }

template<typename T>
uint64_t cast_uint64(T val) { return (uint64_t)val; }

std::vector<float> vector_range(int start, int end, int inc=1) {
    std::vector<float> r;    
    for(int i = start; i <= end; i+=inc) {
        r.push_back((float)i);
    }
    return r;
}


#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_cublasGetErrorString(lua_State* L) {
  int SWIG_arg = 0;
  cublasStatus_t arg1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("cublasGetErrorString",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cublasGetErrorString",1,"cublasStatus_t");
  arg1 = (cublasStatus_t)(int)lua_tonumber(L, 1);
  result = (char *)cublasGetErrorString(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mutex_set(lua_State* L) {
  int SWIG_arg = 0;
  pthread_mutex_t arg1 ;
  pthread_mutex_t *argp1 ;
  
  SWIG_check_num_args("mutex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("mutex",1,"pthread_mutex_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_pthread_mutex_t,0))){
    SWIG_fail_ptr("mutex_set",1,SWIGTYPE_p_pthread_mutex_t);
  }
  arg1 = *argp1;
  
  mutex = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mutex_get(lua_State* L) {
  int SWIG_arg = 0;
  pthread_mutex_t result;
  
  SWIG_check_num_args("mutex",0,0)
  result = mutex;
  {
    pthread_mutex_t * resultptr = new pthread_mutex_t((const pthread_mutex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pthread_mutex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CudaStream_stream_set(lua_State* L) {
  int SWIG_arg = 0;
  CudaStream *arg1 = (CudaStream *) 0 ;
  cudaStream_t arg2 ;
  cudaStream_t *argp2 ;
  
  SWIG_check_num_args("CudaStream::stream",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CudaStream::stream",1,"CudaStream *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("CudaStream::stream",2,"cudaStream_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CudaStream,0))){
    SWIG_fail_ptr("CudaStream_stream_set",1,SWIGTYPE_p_CudaStream);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_cudaStream_t,0))){
    SWIG_fail_ptr("CudaStream_stream_set",2,SWIGTYPE_p_cudaStream_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->stream = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CudaStream_stream_get(lua_State* L) {
  int SWIG_arg = 0;
  CudaStream *arg1 = (CudaStream *) 0 ;
  cudaStream_t result;
  
  SWIG_check_num_args("CudaStream::stream",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CudaStream::stream",1,"CudaStream *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CudaStream,0))){
    SWIG_fail_ptr("CudaStream_stream_get",1,SWIGTYPE_p_CudaStream);
  }
  
  result =  ((arg1)->stream);
  {
    cudaStream_t * resultptr = new cudaStream_t((const cudaStream_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cudaStream_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CudaStream(lua_State* L) {
  int SWIG_arg = 0;
  CudaStream *result = 0 ;
  
  SWIG_check_num_args("CudaStream::CudaStream",0,0)
  result = (CudaStream *)new CudaStream();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CudaStream,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CudaStream(void *obj) {
CudaStream *arg1 = (CudaStream *) obj;
delete arg1;
}
static int _proxy__wrap_new_CudaStream(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CudaStream);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CudaStream_attributes[] = {
    { "stream", _wrap_CudaStream_stream_get, _wrap_CudaStream_stream_set },
    {0,0,0}
};
static swig_lua_method swig_CudaStream_methods[]= {
    {0,0}
};
static swig_lua_method swig_CudaStream_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CudaStream_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CudaStream_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CudaStream_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CudaStream_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CudaStream_Sf_SwigStatic = {
    "CudaStream",
    swig_CudaStream_Sf_SwigStatic_methods,
    swig_CudaStream_Sf_SwigStatic_attributes,
    swig_CudaStream_Sf_SwigStatic_constants,
    swig_CudaStream_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CudaStream_bases[] = {0};
static const char *swig_CudaStream_base_names[] = {0};
static swig_lua_class _wrap_class_CudaStream = { "CudaStream", "CudaStream", &SWIGTYPE_p_CudaStream,_proxy__wrap_new_CudaStream, swig_delete_CudaStream, swig_CudaStream_methods, swig_CudaStream_attributes, &swig_CudaStream_Sf_SwigStatic, swig_CudaStream_meta, swig_CudaStream_bases, swig_CudaStream_base_names };

static int _wrap_CublasPointerMode_pointer_mode_set(lua_State* L) {
  int SWIG_arg = 0;
  CublasPointerMode *arg1 = (CublasPointerMode *) 0 ;
  cublasPointerMode_t arg2 ;
  
  SWIG_check_num_args("CublasPointerMode::pointer_mode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CublasPointerMode::pointer_mode",1,"CublasPointerMode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CublasPointerMode::pointer_mode",2,"cublasPointerMode_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CublasPointerMode,0))){
    SWIG_fail_ptr("CublasPointerMode_pointer_mode_set",1,SWIGTYPE_p_CublasPointerMode);
  }
  
  arg2 = (cublasPointerMode_t)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->pointer_mode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CublasPointerMode_pointer_mode_get(lua_State* L) {
  int SWIG_arg = 0;
  CublasPointerMode *arg1 = (CublasPointerMode *) 0 ;
  cublasPointerMode_t result;
  
  SWIG_check_num_args("CublasPointerMode::pointer_mode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CublasPointerMode::pointer_mode",1,"CublasPointerMode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CublasPointerMode,0))){
    SWIG_fail_ptr("CublasPointerMode_pointer_mode_get",1,SWIGTYPE_p_CublasPointerMode);
  }
  
  result = (cublasPointerMode_t) ((arg1)->pointer_mode);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CublasPointerMode(lua_State* L) {
  int SWIG_arg = 0;
  CublasPointerMode *result = 0 ;
  
  SWIG_check_num_args("CublasPointerMode::CublasPointerMode",0,0)
  result = (CublasPointerMode *)new CublasPointerMode();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CublasPointerMode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CublasPointerMode(void *obj) {
CublasPointerMode *arg1 = (CublasPointerMode *) obj;
delete arg1;
}
static int _proxy__wrap_new_CublasPointerMode(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CublasPointerMode);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CublasPointerMode_attributes[] = {
    { "pointer_mode", _wrap_CublasPointerMode_pointer_mode_get, _wrap_CublasPointerMode_pointer_mode_set },
    {0,0,0}
};
static swig_lua_method swig_CublasPointerMode_methods[]= {
    {0,0}
};
static swig_lua_method swig_CublasPointerMode_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CublasPointerMode_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CublasPointerMode_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CublasPointerMode_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CublasPointerMode_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CublasPointerMode_Sf_SwigStatic = {
    "CublasPointerMode",
    swig_CublasPointerMode_Sf_SwigStatic_methods,
    swig_CublasPointerMode_Sf_SwigStatic_attributes,
    swig_CublasPointerMode_Sf_SwigStatic_constants,
    swig_CublasPointerMode_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CublasPointerMode_bases[] = {0};
static const char *swig_CublasPointerMode_base_names[] = {0};
static swig_lua_class _wrap_class_CublasPointerMode = { "CublasPointerMode", "CublasPointerMode", &SWIGTYPE_p_CublasPointerMode,_proxy__wrap_new_CublasPointerMode, swig_delete_CublasPointerMode, swig_CublasPointerMode_methods, swig_CublasPointerMode_attributes, &swig_CublasPointerMode_Sf_SwigStatic, swig_CublasPointerMode_meta, swig_CublasPointerMode_bases, swig_CublasPointerMode_base_names };

static int _wrap_CublasAtomicsMode_atomics_mode_set(lua_State* L) {
  int SWIG_arg = 0;
  CublasAtomicsMode *arg1 = (CublasAtomicsMode *) 0 ;
  cublasAtomicsMode_t arg2 ;
  
  SWIG_check_num_args("CublasAtomicsMode::atomics_mode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CublasAtomicsMode::atomics_mode",1,"CublasAtomicsMode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CublasAtomicsMode::atomics_mode",2,"cublasAtomicsMode_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CublasAtomicsMode,0))){
    SWIG_fail_ptr("CublasAtomicsMode_atomics_mode_set",1,SWIGTYPE_p_CublasAtomicsMode);
  }
  
  arg2 = (cublasAtomicsMode_t)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->atomics_mode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CublasAtomicsMode_atomics_mode_get(lua_State* L) {
  int SWIG_arg = 0;
  CublasAtomicsMode *arg1 = (CublasAtomicsMode *) 0 ;
  cublasAtomicsMode_t result;
  
  SWIG_check_num_args("CublasAtomicsMode::atomics_mode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CublasAtomicsMode::atomics_mode",1,"CublasAtomicsMode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CublasAtomicsMode,0))){
    SWIG_fail_ptr("CublasAtomicsMode_atomics_mode_get",1,SWIGTYPE_p_CublasAtomicsMode);
  }
  
  result = (cublasAtomicsMode_t) ((arg1)->atomics_mode);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CublasAtomicsMode(lua_State* L) {
  int SWIG_arg = 0;
  CublasAtomicsMode *result = 0 ;
  
  SWIG_check_num_args("CublasAtomicsMode::CublasAtomicsMode",0,0)
  result = (CublasAtomicsMode *)new CublasAtomicsMode();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CublasAtomicsMode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CublasAtomicsMode(void *obj) {
CublasAtomicsMode *arg1 = (CublasAtomicsMode *) obj;
delete arg1;
}
static int _proxy__wrap_new_CublasAtomicsMode(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CublasAtomicsMode);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CublasAtomicsMode_attributes[] = {
    { "atomics_mode", _wrap_CublasAtomicsMode_atomics_mode_get, _wrap_CublasAtomicsMode_atomics_mode_set },
    {0,0,0}
};
static swig_lua_method swig_CublasAtomicsMode_methods[]= {
    {0,0}
};
static swig_lua_method swig_CublasAtomicsMode_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CublasAtomicsMode_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CublasAtomicsMode_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CublasAtomicsMode_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CublasAtomicsMode_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CublasAtomicsMode_Sf_SwigStatic = {
    "CublasAtomicsMode",
    swig_CublasAtomicsMode_Sf_SwigStatic_methods,
    swig_CublasAtomicsMode_Sf_SwigStatic_attributes,
    swig_CublasAtomicsMode_Sf_SwigStatic_constants,
    swig_CublasAtomicsMode_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CublasAtomicsMode_bases[] = {0};
static const char *swig_CublasAtomicsMode_base_names[] = {0};
static swig_lua_class _wrap_class_CublasAtomicsMode = { "CublasAtomicsMode", "CublasAtomicsMode", &SWIGTYPE_p_CublasAtomicsMode,_proxy__wrap_new_CublasAtomicsMode, swig_delete_CublasAtomicsMode, swig_CublasAtomicsMode_methods, swig_CublasAtomicsMode_attributes, &swig_CublasAtomicsMode_Sf_SwigStatic, swig_CublasAtomicsMode_meta, swig_CublasAtomicsMode_bases, swig_CublasAtomicsMode_base_names };

static int _wrap_CublasMathMode_math_mode_set(lua_State* L) {
  int SWIG_arg = 0;
  CublasMathMode *arg1 = (CublasMathMode *) 0 ;
  cublasMath_t arg2 ;
  
  SWIG_check_num_args("CublasMathMode::math_mode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CublasMathMode::math_mode",1,"CublasMathMode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CublasMathMode::math_mode",2,"cublasMath_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CublasMathMode,0))){
    SWIG_fail_ptr("CublasMathMode_math_mode_set",1,SWIGTYPE_p_CublasMathMode);
  }
  
  arg2 = (cublasMath_t)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->math_mode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CublasMathMode_math_mode_get(lua_State* L) {
  int SWIG_arg = 0;
  CublasMathMode *arg1 = (CublasMathMode *) 0 ;
  cublasMath_t result;
  
  SWIG_check_num_args("CublasMathMode::math_mode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CublasMathMode::math_mode",1,"CublasMathMode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CublasMathMode,0))){
    SWIG_fail_ptr("CublasMathMode_math_mode_get",1,SWIGTYPE_p_CublasMathMode);
  }
  
  result = (cublasMath_t) ((arg1)->math_mode);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CublasMathMode(lua_State* L) {
  int SWIG_arg = 0;
  CublasMathMode *result = 0 ;
  
  SWIG_check_num_args("CublasMathMode::CublasMathMode",0,0)
  result = (CublasMathMode *)new CublasMathMode();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CublasMathMode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CublasMathMode(void *obj) {
CublasMathMode *arg1 = (CublasMathMode *) obj;
delete arg1;
}
static int _proxy__wrap_new_CublasMathMode(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CublasMathMode);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CublasMathMode_attributes[] = {
    { "math_mode", _wrap_CublasMathMode_math_mode_get, _wrap_CublasMathMode_math_mode_set },
    {0,0,0}
};
static swig_lua_method swig_CublasMathMode_methods[]= {
    {0,0}
};
static swig_lua_method swig_CublasMathMode_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CublasMathMode_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CublasMathMode_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CublasMathMode_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CublasMathMode_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CublasMathMode_Sf_SwigStatic = {
    "CublasMathMode",
    swig_CublasMathMode_Sf_SwigStatic_methods,
    swig_CublasMathMode_Sf_SwigStatic_attributes,
    swig_CublasMathMode_Sf_SwigStatic_constants,
    swig_CublasMathMode_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CublasMathMode_bases[] = {0};
static const char *swig_CublasMathMode_base_names[] = {0};
static swig_lua_class _wrap_class_CublasMathMode = { "CublasMathMode", "CublasMathMode", &SWIGTYPE_p_CublasMathMode,_proxy__wrap_new_CublasMathMode, swig_delete_CublasMathMode, swig_CublasMathMode_methods, swig_CublasMathMode_attributes, &swig_CublasMathMode_Sf_SwigStatic, swig_CublasMathMode_meta, swig_CublasMathMode_bases, swig_CublasMathMode_base_names };

static int _wrap_Cublas_status_set(lua_State* L) {
  int SWIG_arg = 0;
  Cublas *arg1 = (Cublas *) 0 ;
  cublasStatus_t arg2 ;
  
  SWIG_check_num_args("Cublas::status",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Cublas::status",1,"Cublas *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Cublas::status",2,"cublasStatus_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Cublas,0))){
    SWIG_fail_ptr("Cublas_status_set",1,SWIGTYPE_p_Cublas);
  }
  
  arg2 = (cublasStatus_t)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->status = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cublas_status_get(lua_State* L) {
  int SWIG_arg = 0;
  Cublas *arg1 = (Cublas *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("Cublas::status",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Cublas::status",1,"Cublas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Cublas,0))){
    SWIG_fail_ptr("Cublas_status_get",1,SWIGTYPE_p_Cublas);
  }
  
  result = (cublasStatus_t) ((arg1)->status);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cublas_handle_set(lua_State* L) {
  int SWIG_arg = 0;
  Cublas *arg1 = (Cublas *) 0 ;
  cublasHandle_t arg2 = (cublasHandle_t) 0 ;
  
  SWIG_check_num_args("Cublas::handle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Cublas::handle",1,"Cublas *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Cublas::handle",2,"cublasHandle_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Cublas,0))){
    SWIG_fail_ptr("Cublas_handle_set",1,SWIGTYPE_p_Cublas);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cublasContext,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("Cublas_handle_set",2,SWIGTYPE_p_cublasContext);
  }
  
  if (arg1) (arg1)->handle = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cublas_handle_get(lua_State* L) {
  int SWIG_arg = 0;
  Cublas *arg1 = (Cublas *) 0 ;
  cublasHandle_t result;
  
  SWIG_check_num_args("Cublas::handle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Cublas::handle",1,"Cublas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Cublas,0))){
    SWIG_fail_ptr("Cublas_handle_get",1,SWIGTYPE_p_Cublas);
  }
  
  result = (cublasHandle_t) ((arg1)->handle);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_cublasContext,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Cublas(lua_State* L) {
  int SWIG_arg = 0;
  Cublas *result = 0 ;
  
  SWIG_check_num_args("Cublas::Cublas",0,0)
  result = (Cublas *)new Cublas();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Cublas,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cublas_GetVersion(lua_State* L) {
  int SWIG_arg = 0;
  Cublas *arg1 = (Cublas *) 0 ;
  int result;
  
  SWIG_check_num_args("Cublas::GetVersion",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Cublas::GetVersion",1,"Cublas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Cublas,0))){
    SWIG_fail_ptr("Cublas_GetVersion",1,SWIGTYPE_p_Cublas);
  }
  
  result = (int)(arg1)->GetVersion();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cublas_GetStatusName(lua_State* L) {
  int SWIG_arg = 0;
  Cublas *arg1 = (Cublas *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Cublas::GetStatusName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Cublas::GetStatusName",1,"Cublas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Cublas,0))){
    SWIG_fail_ptr("Cublas_GetStatusName",1,SWIGTYPE_p_Cublas);
  }
  
  result = (char *)(arg1)->GetStatusName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cublas_SetWorkspace(lua_State* L) {
  int SWIG_arg = 0;
  Cublas *arg1 = (Cublas *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Cublas::SetWorkspace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Cublas::SetWorkspace",1,"Cublas *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Cublas::SetWorkspace",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Cublas::SetWorkspace",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Cublas,0))){
    SWIG_fail_ptr("Cublas_SetWorkspace",1,SWIGTYPE_p_Cublas);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Cublas_SetWorkspace");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->SetWorkspace(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cublas_SetStream(lua_State* L) {
  int SWIG_arg = 0;
  Cublas *arg1 = (Cublas *) 0 ;
  CudaStream *arg2 = 0 ;
  
  SWIG_check_num_args("Cublas::SetStream",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Cublas::SetStream",1,"Cublas *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Cublas::SetStream",2,"CudaStream const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Cublas,0))){
    SWIG_fail_ptr("Cublas_SetStream",1,SWIGTYPE_p_Cublas);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CudaStream,0))){
    SWIG_fail_ptr("Cublas_SetStream",2,SWIGTYPE_p_CudaStream);
  }
  
  (arg1)->SetStream((CudaStream const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cublas_GetStream(lua_State* L) {
  int SWIG_arg = 0;
  Cublas *arg1 = (Cublas *) 0 ;
  CudaStream *arg2 = 0 ;
  
  SWIG_check_num_args("Cublas::GetStream",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Cublas::GetStream",1,"Cublas *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Cublas::GetStream",2,"CudaStream &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Cublas,0))){
    SWIG_fail_ptr("Cublas_GetStream",1,SWIGTYPE_p_Cublas);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CudaStream,0))){
    SWIG_fail_ptr("Cublas_GetStream",2,SWIGTYPE_p_CudaStream);
  }
  
  (arg1)->GetStream(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cublas_SetPointerMode(lua_State* L) {
  int SWIG_arg = 0;
  Cublas *arg1 = (Cublas *) 0 ;
  CublasPointerMode *arg2 = 0 ;
  
  SWIG_check_num_args("Cublas::SetPointerMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Cublas::SetPointerMode",1,"Cublas *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Cublas::SetPointerMode",2,"CublasPointerMode &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Cublas,0))){
    SWIG_fail_ptr("Cublas_SetPointerMode",1,SWIGTYPE_p_Cublas);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CublasPointerMode,0))){
    SWIG_fail_ptr("Cublas_SetPointerMode",2,SWIGTYPE_p_CublasPointerMode);
  }
  
  (arg1)->SetPointerMode(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cublas_GetPointerMode(lua_State* L) {
  int SWIG_arg = 0;
  Cublas *arg1 = (Cublas *) 0 ;
  CublasPointerMode *arg2 = 0 ;
  
  SWIG_check_num_args("Cublas::GetPointerMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Cublas::GetPointerMode",1,"Cublas *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Cublas::GetPointerMode",2,"CublasPointerMode &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Cublas,0))){
    SWIG_fail_ptr("Cublas_GetPointerMode",1,SWIGTYPE_p_Cublas);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CublasPointerMode,0))){
    SWIG_fail_ptr("Cublas_GetPointerMode",2,SWIGTYPE_p_CublasPointerMode);
  }
  
  (arg1)->GetPointerMode(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cublas_SetAtomicsMode(lua_State* L) {
  int SWIG_arg = 0;
  Cublas *arg1 = (Cublas *) 0 ;
  CublasAtomicsMode *arg2 = 0 ;
  
  SWIG_check_num_args("Cublas::SetAtomicsMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Cublas::SetAtomicsMode",1,"Cublas *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Cublas::SetAtomicsMode",2,"CublasAtomicsMode &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Cublas,0))){
    SWIG_fail_ptr("Cublas_SetAtomicsMode",1,SWIGTYPE_p_Cublas);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CublasAtomicsMode,0))){
    SWIG_fail_ptr("Cublas_SetAtomicsMode",2,SWIGTYPE_p_CublasAtomicsMode);
  }
  
  (arg1)->SetAtomicsMode(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cublas_GetAtomicsMode(lua_State* L) {
  int SWIG_arg = 0;
  Cublas *arg1 = (Cublas *) 0 ;
  CublasAtomicsMode *arg2 = 0 ;
  
  SWIG_check_num_args("Cublas::GetAtomicsMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Cublas::GetAtomicsMode",1,"Cublas *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Cublas::GetAtomicsMode",2,"CublasAtomicsMode &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Cublas,0))){
    SWIG_fail_ptr("Cublas_GetAtomicsMode",1,SWIGTYPE_p_Cublas);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CublasAtomicsMode,0))){
    SWIG_fail_ptr("Cublas_GetAtomicsMode",2,SWIGTYPE_p_CublasAtomicsMode);
  }
  
  (arg1)->GetAtomicsMode(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cublas_SetMathMode(lua_State* L) {
  int SWIG_arg = 0;
  Cublas *arg1 = (Cublas *) 0 ;
  CublasMathMode *arg2 = 0 ;
  
  SWIG_check_num_args("Cublas::SetMathMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Cublas::SetMathMode",1,"Cublas *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Cublas::SetMathMode",2,"CublasMathMode &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Cublas,0))){
    SWIG_fail_ptr("Cublas_SetMathMode",1,SWIGTYPE_p_Cublas);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CublasMathMode,0))){
    SWIG_fail_ptr("Cublas_SetMathMode",2,SWIGTYPE_p_CublasMathMode);
  }
  
  (arg1)->SetMathMode(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cublas_GetMathMode(lua_State* L) {
  int SWIG_arg = 0;
  Cublas *arg1 = (Cublas *) 0 ;
  CublasMathMode *arg2 = 0 ;
  
  SWIG_check_num_args("Cublas::GetMathMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Cublas::GetMathMode",1,"Cublas *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Cublas::GetMathMode",2,"CublasMathMode &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Cublas,0))){
    SWIG_fail_ptr("Cublas_GetMathMode",1,SWIGTYPE_p_Cublas);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CublasMathMode,0))){
    SWIG_fail_ptr("Cublas_GetMathMode",2,SWIGTYPE_p_CublasMathMode);
  }
  
  (arg1)->GetMathMode(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cublas_SetSmCountTarget(lua_State* L) {
  int SWIG_arg = 0;
  Cublas *arg1 = (Cublas *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Cublas::SetSmCountTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Cublas::SetSmCountTarget",1,"Cublas *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Cublas::SetSmCountTarget",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Cublas,0))){
    SWIG_fail_ptr("Cublas_SetSmCountTarget",1,SWIGTYPE_p_Cublas);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetSmCountTarget(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cublas_GetSmCountTarget(lua_State* L) {
  int SWIG_arg = 0;
  Cublas *arg1 = (Cublas *) 0 ;
  int result;
  
  SWIG_check_num_args("Cublas::GetSmCountTarget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Cublas::GetSmCountTarget",1,"Cublas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Cublas,0))){
    SWIG_fail_ptr("Cublas_GetSmCountTarget",1,SWIGTYPE_p_Cublas);
  }
  
  result = (int)(arg1)->GetSmCountTarget();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cublas_LoggerConfigure(lua_State* L) {
  int SWIG_arg = 0;
  Cublas *arg1 = (Cublas *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  
  SWIG_check_num_args("Cublas::LoggerConfigure",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Cublas::LoggerConfigure",1,"Cublas *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Cublas::LoggerConfigure",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Cublas::LoggerConfigure",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Cublas::LoggerConfigure",4,"int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("Cublas::LoggerConfigure",5,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Cublas,0))){
    SWIG_fail_ptr("Cublas_LoggerConfigure",1,SWIGTYPE_p_Cublas);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  (arg1)->LoggerConfigure(arg2,arg3,arg4,(char const *)arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Cublas(void *obj) {
Cublas *arg1 = (Cublas *) obj;
delete arg1;
}
static int _proxy__wrap_new_Cublas(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Cublas);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Cublas_attributes[] = {
    { "status", _wrap_Cublas_status_get, _wrap_Cublas_status_set },
    { "handle", _wrap_Cublas_handle_get, _wrap_Cublas_handle_set },
    {0,0,0}
};
static swig_lua_method swig_Cublas_methods[]= {
    { "GetVersion", _wrap_Cublas_GetVersion},
    { "GetStatusName", _wrap_Cublas_GetStatusName},
    { "SetWorkspace", _wrap_Cublas_SetWorkspace},
    { "SetStream", _wrap_Cublas_SetStream},
    { "GetStream", _wrap_Cublas_GetStream},
    { "SetPointerMode", _wrap_Cublas_SetPointerMode},
    { "GetPointerMode", _wrap_Cublas_GetPointerMode},
    { "SetAtomicsMode", _wrap_Cublas_SetAtomicsMode},
    { "GetAtomicsMode", _wrap_Cublas_GetAtomicsMode},
    { "SetMathMode", _wrap_Cublas_SetMathMode},
    { "GetMathMode", _wrap_Cublas_GetMathMode},
    { "SetSmCountTarget", _wrap_Cublas_SetSmCountTarget},
    { "GetSmCountTarget", _wrap_Cublas_GetSmCountTarget},
    { "LoggerConfigure", _wrap_Cublas_LoggerConfigure},
    {0,0}
};
static swig_lua_method swig_Cublas_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Cublas_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Cublas_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Cublas_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Cublas_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Cublas_Sf_SwigStatic = {
    "Cublas",
    swig_Cublas_Sf_SwigStatic_methods,
    swig_Cublas_Sf_SwigStatic_attributes,
    swig_Cublas_Sf_SwigStatic_constants,
    swig_Cublas_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Cublas_bases[] = {0};
static const char *swig_Cublas_base_names[] = {0};
static swig_lua_class _wrap_class_Cublas = { "Cublas", "Cublas", &SWIGTYPE_p_Cublas,_proxy__wrap_new_Cublas, swig_delete_Cublas, swig_Cublas_methods, swig_Cublas_attributes, &swig_Cublas_Sf_SwigStatic, swig_Cublas_meta, swig_Cublas_bases, swig_Cublas_base_names };

static int _wrap_CuRand_gen_set(lua_State* L) {
  int SWIG_arg = 0;
  CuRand *arg1 = (CuRand *) 0 ;
  curandGenerator_t arg2 ;
  curandGenerator_t *argp2 ;
  
  SWIG_check_num_args("CuRand::gen",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CuRand::gen",1,"CuRand *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("CuRand::gen",2,"curandGenerator_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CuRand,0))){
    SWIG_fail_ptr("CuRand_gen_set",1,SWIGTYPE_p_CuRand);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_curandGenerator_t,0))){
    SWIG_fail_ptr("CuRand_gen_set",2,SWIGTYPE_p_curandGenerator_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->gen = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CuRand_gen_get(lua_State* L) {
  int SWIG_arg = 0;
  CuRand *arg1 = (CuRand *) 0 ;
  curandGenerator_t result;
  
  SWIG_check_num_args("CuRand::gen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CuRand::gen",1,"CuRand *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CuRand,0))){
    SWIG_fail_ptr("CuRand_gen_get",1,SWIGTYPE_p_CuRand);
  }
  
  result =  ((arg1)->gen);
  {
    curandGenerator_t * resultptr = new curandGenerator_t((const curandGenerator_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_curandGenerator_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CuRand__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  unsigned long long arg1 ;
  CuRand *result = 0 ;
  
  SWIG_check_num_args("CuRand::CuRand",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("CuRand::CuRand",1,"unsigned long long");
  arg1 = (unsigned long long)lua_tonumber(L, 1);
  result = (CuRand *)new CuRand(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CuRand,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CuRand__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CuRand *result = 0 ;
  
  SWIG_check_num_args("CuRand::CuRand",0,0)
  result = (CuRand *)new CuRand();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CuRand,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CuRand(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CuRand__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_CuRand__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CuRand'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CuRand::CuRand(unsigned long long)\n"
    "    CuRand::CuRand()\n");
  lua_error(L);return 0;
}


static void swig_delete_CuRand(void *obj) {
CuRand *arg1 = (CuRand *) obj;
delete arg1;
}
static int _proxy__wrap_new_CuRand(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CuRand);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CuRand_attributes[] = {
    { "gen", _wrap_CuRand_gen_get, _wrap_CuRand_gen_set },
    {0,0,0}
};
static swig_lua_method swig_CuRand_methods[]= {
    {0,0}
};
static swig_lua_method swig_CuRand_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CuRand_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CuRand_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CuRand_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CuRand_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CuRand_Sf_SwigStatic = {
    "CuRand",
    swig_CuRand_Sf_SwigStatic_methods,
    swig_CuRand_Sf_SwigStatic_attributes,
    swig_CuRand_Sf_SwigStatic_constants,
    swig_CuRand_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CuRand_bases[] = {0};
static const char *swig_CuRand_base_names[] = {0};
static swig_lua_class _wrap_class_CuRand = { "CuRand", "CuRand", &SWIGTYPE_p_CuRand,_proxy__wrap_new_CuRand, swig_delete_CuRand, swig_CuRand_methods, swig_CuRand_attributes, &swig_CuRand_Sf_SwigStatic, swig_CuRand_meta, swig_CuRand_bases, swig_CuRand_base_names };

static int _wrap_cublas_set(lua_State* L) {
  int SWIG_arg = 0;
  Cublas *arg1 = (Cublas *) 0 ;
  
  SWIG_check_num_args("cublas",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublas",1,"Cublas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Cublas,0))){
    SWIG_fail_ptr("cublas_set",1,SWIGTYPE_p_Cublas);
  }
  
  cublas = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublas_get(lua_State* L) {
  int SWIG_arg = 0;
  Cublas *result = 0 ;
  
  SWIG_check_num_args("cublas",0,0)
  result = (Cublas *)cublas;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Cublas,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_get_cuda_stream(lua_State* L) {
  int SWIG_arg = 0;
  cudaStream_t result;
  
  SWIG_check_num_args("get_cuda_stream",0,0)
  result = get_cuda_stream();
  {
    cudaStream_t * resultptr = new cudaStream_t((const cudaStream_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cudaStream_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_set_stream(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  
  SWIG_check_num_args("set_stream",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("set_stream",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  set_stream(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_get_stream(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("get_stream",0,0)
  result = (int)get_stream();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_random_stream(lua_State* L) {
  int SWIG_arg = 0;
  cudaStream_t result;
  
  SWIG_check_num_args("random_stream",0,0)
  result = random_stream();
  {
    cudaStream_t * resultptr = new cudaStream_t((const cudaStream_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_cudaStream_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_current_stream_set(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  
  SWIG_check_num_args("current_stream",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("current_stream",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  current_stream = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_current_stream_get(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("current_stream",0,0)
  result = (int)current_stream;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cuda_streams_set(lua_State* L) {
  int SWIG_arg = 0;
  CudaStream *arg1 ;
  
  SWIG_check_num_args("cuda_streams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cuda_streams",1,"CudaStream [16]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CudaStream,0))){
    SWIG_fail_ptr("cuda_streams_set",1,SWIGTYPE_p_CudaStream);
  }
  
  {
    size_t ii;
    CudaStream *b = (CudaStream *) cuda_streams;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((CudaStream *) arg1 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cuda_streams_get(lua_State* L) {
  int SWIG_arg = 0;
  CudaStream *result = 0 ;
  
  SWIG_check_num_args("cuda_streams",0,0)
  result = (CudaStream *)(CudaStream *)cuda_streams;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CudaStream,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Memcpy(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  enum cudaMemcpyKind arg4 ;
  
  SWIG_check_num_args("Memcpy",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Memcpy",1,"void *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Memcpy",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Memcpy",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Memcpy",4,"enum cudaMemcpyKind");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"Memcpy");
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Memcpy");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (enum cudaMemcpyKind)(int)lua_tonumber(L, 4);
  Memcpy(arg1,(void const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SchemaMemory_ptr_set(lua_State* L) {
  int SWIG_arg = 0;
  SchemaMemory *arg1 = (SchemaMemory *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("SchemaMemory::ptr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SchemaMemory::ptr",1,"SchemaMemory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SchemaMemory::ptr",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SchemaMemory,0))){
    SWIG_fail_ptr("SchemaMemory_ptr_set",1,SWIGTYPE_p_SchemaMemory);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"SchemaMemory_ptr_set");
  if (arg1) (arg1)->ptr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SchemaMemory_ptr_get(lua_State* L) {
  int SWIG_arg = 0;
  SchemaMemory *arg1 = (SchemaMemory *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("SchemaMemory::ptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SchemaMemory::ptr",1,"SchemaMemory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SchemaMemory,0))){
    SWIG_fail_ptr("SchemaMemory_ptr_get",1,SWIGTYPE_p_SchemaMemory);
  }
  
  result = (void *) ((arg1)->ptr);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SchemaMemory_length_set(lua_State* L) {
  int SWIG_arg = 0;
  SchemaMemory *arg1 = (SchemaMemory *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("SchemaMemory::length",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SchemaMemory::length",1,"SchemaMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SchemaMemory::length",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SchemaMemory,0))){
    SWIG_fail_ptr("SchemaMemory_length_set",1,SWIGTYPE_p_SchemaMemory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->length = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SchemaMemory_length_get(lua_State* L) {
  int SWIG_arg = 0;
  SchemaMemory *arg1 = (SchemaMemory *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SchemaMemory::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SchemaMemory::length",1,"SchemaMemory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SchemaMemory,0))){
    SWIG_fail_ptr("SchemaMemory_length_get",1,SWIGTYPE_p_SchemaMemory);
  }
  
  result =  ((arg1)->length);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SchemaMemory__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SchemaMemory *result = 0 ;
  
  SWIG_check_num_args("SchemaMemory::SchemaMemory",0,0)
  result = (SchemaMemory *)new SchemaMemory();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SchemaMemory,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SchemaMemory__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SchemaMemory *result = 0 ;
  
  SWIG_check_num_args("SchemaMemory::SchemaMemory",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SchemaMemory::SchemaMemory",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (SchemaMemory *)new SchemaMemory(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SchemaMemory,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SchemaMemory(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SchemaMemory__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_SchemaMemory__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SchemaMemory'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SchemaMemory::SchemaMemory()\n"
    "    SchemaMemory::SchemaMemory(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_SchemaMemory_allocate(lua_State* L) {
  int SWIG_arg = 0;
  SchemaMemory *arg1 = (SchemaMemory *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("SchemaMemory::allocate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SchemaMemory::allocate",1,"SchemaMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SchemaMemory::allocate",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SchemaMemory,0))){
    SWIG_fail_ptr("SchemaMemory_allocate",1,SWIGTYPE_p_SchemaMemory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->allocate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SchemaMemory_zero(lua_State* L) {
  int SWIG_arg = 0;
  SchemaMemory *arg1 = (SchemaMemory *) 0 ;
  
  SWIG_check_num_args("SchemaMemory::zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SchemaMemory::zero",1,"SchemaMemory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SchemaMemory,0))){
    SWIG_fail_ptr("SchemaMemory_zero",1,SWIGTYPE_p_SchemaMemory);
  }
  
  (arg1)->zero();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SchemaMemory_fillui8(lua_State* L) {
  int SWIG_arg = 0;
  SchemaMemory *arg1 = (SchemaMemory *) 0 ;
  uint8_t arg2 ;
  
  SWIG_check_num_args("SchemaMemory::fillui8",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SchemaMemory::fillui8",1,"SchemaMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SchemaMemory::fillui8",2,"uint8_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SchemaMemory,0))){
    SWIG_fail_ptr("SchemaMemory_fillui8",1,SWIGTYPE_p_SchemaMemory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint8_t)lua_tonumber(L, 2);
  (arg1)->fillui8(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SchemaMemory_fillui16(lua_State* L) {
  int SWIG_arg = 0;
  SchemaMemory *arg1 = (SchemaMemory *) 0 ;
  uint16_t arg2 ;
  
  SWIG_check_num_args("SchemaMemory::fillui16",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SchemaMemory::fillui16",1,"SchemaMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SchemaMemory::fillui16",2,"uint16_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SchemaMemory,0))){
    SWIG_fail_ptr("SchemaMemory_fillui16",1,SWIGTYPE_p_SchemaMemory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint16_t)lua_tonumber(L, 2);
  (arg1)->fillui16(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SchemaMemory_fillui32(lua_State* L) {
  int SWIG_arg = 0;
  SchemaMemory *arg1 = (SchemaMemory *) 0 ;
  uint32_t arg2 ;
  
  SWIG_check_num_args("SchemaMemory::fillui32",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SchemaMemory::fillui32",1,"SchemaMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SchemaMemory::fillui32",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SchemaMemory,0))){
    SWIG_fail_ptr("SchemaMemory_fillui32",1,SWIGTYPE_p_SchemaMemory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint32_t)lua_tonumber(L, 2);
  (arg1)->fillui32(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SchemaMemory_fillui64(lua_State* L) {
  int SWIG_arg = 0;
  SchemaMemory *arg1 = (SchemaMemory *) 0 ;
  uint64_t arg2 ;
  
  SWIG_check_num_args("SchemaMemory::fillui64",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SchemaMemory::fillui64",1,"SchemaMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SchemaMemory::fillui64",2,"uint64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SchemaMemory,0))){
    SWIG_fail_ptr("SchemaMemory_fillui64",1,SWIGTYPE_p_SchemaMemory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint64_t)lua_tonumber(L, 2);
  (arg1)->fillui64(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SchemaMemory_filli8(lua_State* L) {
  int SWIG_arg = 0;
  SchemaMemory *arg1 = (SchemaMemory *) 0 ;
  int8_t arg2 ;
  
  SWIG_check_num_args("SchemaMemory::filli8",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SchemaMemory::filli8",1,"SchemaMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SchemaMemory::filli8",2,"int8_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SchemaMemory,0))){
    SWIG_fail_ptr("SchemaMemory_filli8",1,SWIGTYPE_p_SchemaMemory);
  }
  
  arg2 = (int8_t)lua_tonumber(L, 2);
  (arg1)->filli8(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SchemaMemory_filli16(lua_State* L) {
  int SWIG_arg = 0;
  SchemaMemory *arg1 = (SchemaMemory *) 0 ;
  int16_t arg2 ;
  
  SWIG_check_num_args("SchemaMemory::filli16",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SchemaMemory::filli16",1,"SchemaMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SchemaMemory::filli16",2,"int16_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SchemaMemory,0))){
    SWIG_fail_ptr("SchemaMemory_filli16",1,SWIGTYPE_p_SchemaMemory);
  }
  
  arg2 = (int16_t)lua_tonumber(L, 2);
  (arg1)->filli16(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SchemaMemory_filli32(lua_State* L) {
  int SWIG_arg = 0;
  SchemaMemory *arg1 = (SchemaMemory *) 0 ;
  int32_t arg2 ;
  
  SWIG_check_num_args("SchemaMemory::filli32",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SchemaMemory::filli32",1,"SchemaMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SchemaMemory::filli32",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SchemaMemory,0))){
    SWIG_fail_ptr("SchemaMemory_filli32",1,SWIGTYPE_p_SchemaMemory);
  }
  
  arg2 = (int32_t)lua_tonumber(L, 2);
  (arg1)->filli32(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SchemaMemory_filli64(lua_State* L) {
  int SWIG_arg = 0;
  SchemaMemory *arg1 = (SchemaMemory *) 0 ;
  int64_t arg2 ;
  
  SWIG_check_num_args("SchemaMemory::filli64",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SchemaMemory::filli64",1,"SchemaMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SchemaMemory::filli64",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SchemaMemory,0))){
    SWIG_fail_ptr("SchemaMemory_filli64",1,SWIGTYPE_p_SchemaMemory);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  (arg1)->filli64(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SchemaMemory_fillf32(lua_State* L) {
  int SWIG_arg = 0;
  SchemaMemory *arg1 = (SchemaMemory *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SchemaMemory::fillf32",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SchemaMemory::fillf32",1,"SchemaMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SchemaMemory::fillf32",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SchemaMemory,0))){
    SWIG_fail_ptr("SchemaMemory_fillf32",1,SWIGTYPE_p_SchemaMemory);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->fillf32(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SchemaMemory_fillf64(lua_State* L) {
  int SWIG_arg = 0;
  SchemaMemory *arg1 = (SchemaMemory *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SchemaMemory::fillf64",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SchemaMemory::fillf64",1,"SchemaMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SchemaMemory::fillf64",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SchemaMemory,0))){
    SWIG_fail_ptr("SchemaMemory_fillf64",1,SWIGTYPE_p_SchemaMemory);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->fillf64(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SchemaMemory_f32(lua_State* L) {
  int SWIG_arg = 0;
  SchemaMemory *arg1 = (SchemaMemory *) 0 ;
  size_t arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("SchemaMemory::f32",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SchemaMemory::f32",1,"SchemaMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SchemaMemory::f32",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SchemaMemory,0))){
    SWIG_fail_ptr("SchemaMemory_f32",1,SWIGTYPE_p_SchemaMemory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float *) &(arg1)->f32(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SchemaMemory_f64(lua_State* L) {
  int SWIG_arg = 0;
  SchemaMemory *arg1 = (SchemaMemory *) 0 ;
  size_t arg2 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SchemaMemory::f64",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SchemaMemory::f64",1,"SchemaMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SchemaMemory::f64",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SchemaMemory,0))){
    SWIG_fail_ptr("SchemaMemory_f64",1,SWIGTYPE_p_SchemaMemory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double *) &(arg1)->f64(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SchemaMemory_i8(lua_State* L) {
  int SWIG_arg = 0;
  SchemaMemory *arg1 = (SchemaMemory *) 0 ;
  size_t arg2 ;
  int8_t *result = 0 ;
  
  SWIG_check_num_args("SchemaMemory::i8",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SchemaMemory::i8",1,"SchemaMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SchemaMemory::i8",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SchemaMemory,0))){
    SWIG_fail_ptr("SchemaMemory_i8",1,SWIGTYPE_p_SchemaMemory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (int8_t *) &(arg1)->i8(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_signed_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SchemaMemory_ui8(lua_State* L) {
  int SWIG_arg = 0;
  SchemaMemory *arg1 = (SchemaMemory *) 0 ;
  size_t arg2 ;
  uint8_t *result = 0 ;
  
  SWIG_check_num_args("SchemaMemory::ui8",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SchemaMemory::ui8",1,"SchemaMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SchemaMemory::ui8",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SchemaMemory,0))){
    SWIG_fail_ptr("SchemaMemory_ui8",1,SWIGTYPE_p_SchemaMemory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (uint8_t *) &(arg1)->ui8(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SchemaMemory_i16(lua_State* L) {
  int SWIG_arg = 0;
  SchemaMemory *arg1 = (SchemaMemory *) 0 ;
  size_t arg2 ;
  int16_t *result = 0 ;
  
  SWIG_check_num_args("SchemaMemory::i16",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SchemaMemory::i16",1,"SchemaMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SchemaMemory::i16",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SchemaMemory,0))){
    SWIG_fail_ptr("SchemaMemory_i16",1,SWIGTYPE_p_SchemaMemory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (int16_t *) &(arg1)->i16(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SchemaMemory_ui16(lua_State* L) {
  int SWIG_arg = 0;
  SchemaMemory *arg1 = (SchemaMemory *) 0 ;
  size_t arg2 ;
  uint16_t *result = 0 ;
  
  SWIG_check_num_args("SchemaMemory::ui16",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SchemaMemory::ui16",1,"SchemaMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SchemaMemory::ui16",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SchemaMemory,0))){
    SWIG_fail_ptr("SchemaMemory_ui16",1,SWIGTYPE_p_SchemaMemory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (uint16_t *) &(arg1)->ui16(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SchemaMemory_i32(lua_State* L) {
  int SWIG_arg = 0;
  SchemaMemory *arg1 = (SchemaMemory *) 0 ;
  size_t arg2 ;
  int32_t *result = 0 ;
  
  SWIG_check_num_args("SchemaMemory::i32",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SchemaMemory::i32",1,"SchemaMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SchemaMemory::i32",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SchemaMemory,0))){
    SWIG_fail_ptr("SchemaMemory_i32",1,SWIGTYPE_p_SchemaMemory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (int32_t *) &(arg1)->i32(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SchemaMemory_ui32(lua_State* L) {
  int SWIG_arg = 0;
  SchemaMemory *arg1 = (SchemaMemory *) 0 ;
  size_t arg2 ;
  uint32_t *result = 0 ;
  
  SWIG_check_num_args("SchemaMemory::ui32",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SchemaMemory::ui32",1,"SchemaMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SchemaMemory::ui32",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SchemaMemory,0))){
    SWIG_fail_ptr("SchemaMemory_ui32",1,SWIGTYPE_p_SchemaMemory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (uint32_t *) &(arg1)->ui32(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SchemaMemory_i64(lua_State* L) {
  int SWIG_arg = 0;
  SchemaMemory *arg1 = (SchemaMemory *) 0 ;
  size_t arg2 ;
  int64_t *result = 0 ;
  
  SWIG_check_num_args("SchemaMemory::i64",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SchemaMemory::i64",1,"SchemaMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SchemaMemory::i64",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SchemaMemory,0))){
    SWIG_fail_ptr("SchemaMemory_i64",1,SWIGTYPE_p_SchemaMemory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (int64_t *) &(arg1)->i64(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SchemaMemory_ui64(lua_State* L) {
  int SWIG_arg = 0;
  SchemaMemory *arg1 = (SchemaMemory *) 0 ;
  size_t arg2 ;
  uint64_t *result = 0 ;
  
  SWIG_check_num_args("SchemaMemory::ui64",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SchemaMemory::ui64",1,"SchemaMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SchemaMemory::ui64",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SchemaMemory,0))){
    SWIG_fail_ptr("SchemaMemory_ui64",1,SWIGTYPE_p_SchemaMemory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (uint64_t *) &(arg1)->ui64(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SchemaMemory_flip(lua_State* L) {
  int SWIG_arg = 0;
  SchemaMemory *arg1 = (SchemaMemory *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("SchemaMemory::flip",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SchemaMemory::flip",1,"SchemaMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SchemaMemory::flip",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SchemaMemory,0))){
    SWIG_fail_ptr("SchemaMemory_flip",1,SWIGTYPE_p_SchemaMemory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->flip(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SchemaMemory_num_bits(lua_State* L) {
  int SWIG_arg = 0;
  SchemaMemory *arg1 = (SchemaMemory *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SchemaMemory::num_bits",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SchemaMemory::num_bits",1,"SchemaMemory const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SchemaMemory,0))){
    SWIG_fail_ptr("SchemaMemory_num_bits",1,SWIGTYPE_p_SchemaMemory);
  }
  
  result = ((SchemaMemory const *)arg1)->num_bits();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SchemaMemory_set(lua_State* L) {
  int SWIG_arg = 0;
  SchemaMemory *arg1 = (SchemaMemory *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("SchemaMemory::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SchemaMemory::set",1,"SchemaMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SchemaMemory::set",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SchemaMemory,0))){
    SWIG_fail_ptr("SchemaMemory_set",1,SWIGTYPE_p_SchemaMemory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->set(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SchemaMemory_get(lua_State* L) {
  int SWIG_arg = 0;
  SchemaMemory *arg1 = (SchemaMemory *) 0 ;
  size_t arg2 ;
  int8_t result;
  
  SWIG_check_num_args("SchemaMemory::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SchemaMemory::get",1,"SchemaMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SchemaMemory::get",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SchemaMemory,0))){
    SWIG_fail_ptr("SchemaMemory_get",1,SWIGTYPE_p_SchemaMemory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (int8_t)(arg1)->get(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SchemaMemory_set_range(lua_State* L) {
  int SWIG_arg = 0;
  SchemaMemory *arg1 = (SchemaMemory *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("SchemaMemory::set_range",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SchemaMemory::set_range",1,"SchemaMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SchemaMemory::set_range",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SchemaMemory::set_range",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SchemaMemory,0))){
    SWIG_fail_ptr("SchemaMemory_set_range",1,SWIGTYPE_p_SchemaMemory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->set_range(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SchemaMemory(void *obj) {
SchemaMemory *arg1 = (SchemaMemory *) obj;
delete arg1;
}
static int _proxy__wrap_new_SchemaMemory(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SchemaMemory);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SchemaMemory_attributes[] = {
    { "ptr", _wrap_SchemaMemory_ptr_get, _wrap_SchemaMemory_ptr_set },
    { "length", _wrap_SchemaMemory_length_get, _wrap_SchemaMemory_length_set },
    {0,0,0}
};
static swig_lua_method swig_SchemaMemory_methods[]= {
    { "allocate", _wrap_SchemaMemory_allocate},
    { "zero", _wrap_SchemaMemory_zero},
    { "fillui8", _wrap_SchemaMemory_fillui8},
    { "fillui16", _wrap_SchemaMemory_fillui16},
    { "fillui32", _wrap_SchemaMemory_fillui32},
    { "fillui64", _wrap_SchemaMemory_fillui64},
    { "filli8", _wrap_SchemaMemory_filli8},
    { "filli16", _wrap_SchemaMemory_filli16},
    { "filli32", _wrap_SchemaMemory_filli32},
    { "filli64", _wrap_SchemaMemory_filli64},
    { "fillf32", _wrap_SchemaMemory_fillf32},
    { "fillf64", _wrap_SchemaMemory_fillf64},
    { "f32", _wrap_SchemaMemory_f32},
    { "f64", _wrap_SchemaMemory_f64},
    { "i8", _wrap_SchemaMemory_i8},
    { "ui8", _wrap_SchemaMemory_ui8},
    { "i16", _wrap_SchemaMemory_i16},
    { "ui16", _wrap_SchemaMemory_ui16},
    { "i32", _wrap_SchemaMemory_i32},
    { "ui32", _wrap_SchemaMemory_ui32},
    { "i64", _wrap_SchemaMemory_i64},
    { "ui64", _wrap_SchemaMemory_ui64},
    { "flip", _wrap_SchemaMemory_flip},
    { "num_bits", _wrap_SchemaMemory_num_bits},
    { "set", _wrap_SchemaMemory_set},
    { "get", _wrap_SchemaMemory_get},
    { "set_range", _wrap_SchemaMemory_set_range},
    {0,0}
};
static swig_lua_method swig_SchemaMemory_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SchemaMemory_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SchemaMemory_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SchemaMemory_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SchemaMemory_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SchemaMemory_Sf_SwigStatic = {
    "SchemaMemory",
    swig_SchemaMemory_Sf_SwigStatic_methods,
    swig_SchemaMemory_Sf_SwigStatic_attributes,
    swig_SchemaMemory_Sf_SwigStatic_constants,
    swig_SchemaMemory_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SchemaMemory_bases[] = {0};
static const char *swig_SchemaMemory_base_names[] = {0};
static swig_lua_class _wrap_class_SchemaMemory = { "SchemaMemory", "SchemaMemory", &SWIGTYPE_p_SchemaMemory,_proxy__wrap_new_SchemaMemory, swig_delete_SchemaMemory, swig_SchemaMemory_methods, swig_SchemaMemory_attributes, &swig_SchemaMemory_Sf_SwigStatic, swig_SchemaMemory_meta, swig_SchemaMemory_bases, swig_SchemaMemory_base_names };

static int _wrap_host_memory_set(lua_State* L) {
  int SWIG_arg = 0;
  std::multimap< int,std::pair< void *,void * > > arg1 ;
  std::multimap< int,std::pair< void *,void * > > *argp1 ;
  
  SWIG_check_num_args("host_memory",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("host_memory",1,"std::multimap< int,std::pair< void *,void * > >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__multimapT_int_std__pairT_void_p_void_p_t_t,0))){
    SWIG_fail_ptr("host_memory_set",1,SWIGTYPE_p_std__multimapT_int_std__pairT_void_p_void_p_t_t);
  }
  arg1 = *argp1;
  
  host_memory = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_host_memory_get(lua_State* L) {
  int SWIG_arg = 0;
  std::multimap< int,std::pair< void *,void * > > result;
  
  SWIG_check_num_args("host_memory",0,0)
  result = host_memory;
  {
    std::multimap< int,std::pair< void *,void * > > * resultptr = new std::multimap< int,std::pair< void *,void * > >((const std::multimap< int,std::pair< void *,void * > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__multimapT_int_std__pairT_void_p_void_p_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_return_host(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  std::pair< void *,void * > *arg2 = 0 ;
  
  SWIG_check_num_args("return_host",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("return_host",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("return_host",2,"std::pair< void *,void * > const &");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__pairT_void_p_void_p_t,0))){
    SWIG_fail_ptr("return_host",2,SWIGTYPE_p_std__pairT_void_p_void_p_t);
  }
  
  return_host(arg1,(std::pair< void *,void * > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_find_host(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  std::pair< void *,void * > result;
  
  SWIG_check_num_args("find_host",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("find_host",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = find_host(arg1);
  {
    std::pair< void *,void * > * resultptr = new std::pair< void *,void * >((const std::pair< void *,void * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__pairT_void_p_void_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_max_index__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = 0 ;
  int result;
  
  SWIG_check_num_args("Viper::max_index",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Viper::max_index",1,"Viper::Vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("max_index",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  result = (int)Viper::max_index((Viper::Vector< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_min_index__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = 0 ;
  int result;
  
  SWIG_check_num_args("Viper::min_index",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Viper::min_index",1,"Viper::Vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("min_index",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  result = (int)Viper::min_index((Viper::Vector< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nrm2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("Viper::nrm2",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Viper::nrm2",1,"Viper::Vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("nrm2",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  result = (float)Viper::nrm2((Viper::Vector< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = 0 ;
  float arg2 ;
  Viper::Vector< float > result;
  
  SWIG_check_num_args("Viper::scale",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Viper::scale",1,"Viper::Vector< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::scale",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("scale",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = Viper::scale((Viper::Vector< float > const &)*arg1,arg2);
  {
    Viper::Vector< float > * resultptr = new Viper::Vector< float >((const Viper::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_swap__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = 0 ;
  Viper::Vector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::swap",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Viper::swap",1,"Viper::Vector< float > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::swap",2,"Viper::Vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("swap",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("swap",2,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  Viper::swap(*arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_max_index__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = 0 ;
  int result;
  
  SWIG_check_num_args("Viper::max_index",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Viper::max_index",1,"Viper::Vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("max_index",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  result = (int)Viper::max_index((Viper::Vector< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_max_index(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_max_index__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_max_index__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'max_index'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viper::max_index(Viper::Vector< float > const &)\n"
    "    Viper::max_index(Viper::Vector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_min_index__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = 0 ;
  int result;
  
  SWIG_check_num_args("Viper::min_index",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Viper::min_index",1,"Viper::Vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("min_index",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  result = (int)Viper::min_index((Viper::Vector< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_min_index(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_min_index__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_min_index__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'min_index'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viper::min_index(Viper::Vector< float > const &)\n"
    "    Viper::min_index(Viper::Vector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_nrm2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("Viper::nrm2",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Viper::nrm2",1,"Viper::Vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("nrm2",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  result = (double)Viper::nrm2((Viper::Vector< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nrm2(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_nrm2__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_nrm2__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'nrm2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viper::nrm2(Viper::Vector< float > const &)\n"
    "    Viper::nrm2(Viper::Vector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_scale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = 0 ;
  double arg2 ;
  Viper::Vector< double > result;
  
  SWIG_check_num_args("Viper::scale",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Viper::scale",1,"Viper::Vector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::scale",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("scale",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = Viper::scale((Viper::Vector< double > const &)*arg1,arg2);
  {
    Viper::Vector< double > * resultptr = new Viper::Vector< double >((const Viper::Vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__VectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scale(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_scale__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_scale__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'scale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viper::scale(Viper::Vector< float > const &,float)\n"
    "    Viper::scale(Viper::Vector< double > const &,double)\n");
  lua_error(L);return 0;
}


static int _wrap_swap__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = 0 ;
  Viper::Vector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::swap",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Viper::swap",1,"Viper::Vector< double > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::swap",2,"Viper::Vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("swap",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("swap",2,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  Viper::swap(*arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_swap(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_swap__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_swap__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'swap'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viper::swap(Viper::Vector< float > &,Viper::Vector< float > &)\n"
    "    Viper::swap(Viper::Vector< double > &,Viper::Vector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_copy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = 0 ;
  Viper::Vector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::copy",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Viper::copy",1,"Viper::Vector< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::copy",2,"Viper::Vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("copy",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("copy",2,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  Viper::copy((Viper::Vector< float > const &)*arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = 0 ;
  Viper::Vector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::copy",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Viper::copy",1,"Viper::Vector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::copy",2,"Viper::Vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("copy",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("copy",2,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  Viper::copy((Viper::Vector< double > const &)*arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copy__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = 0 ;
  Viper::Matrix< float > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::copy",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Viper::copy",1,"Viper::Matrix< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::copy",2,"Viper::Matrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("copy",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("copy",2,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  Viper::copy((Viper::Matrix< float > const &)*arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copy__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = 0 ;
  Viper::Matrix< double > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::copy",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Viper::copy",1,"Viper::Matrix< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::copy",2,"Viper::Matrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("copy",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("copy",2,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  Viper::copy((Viper::Matrix< double > const &)*arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copy(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_copy__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_copy__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_copy__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_copy__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'copy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viper::copy(Viper::Vector< float > const &,Viper::Vector< float > &)\n"
    "    Viper::copy(Viper::Vector< double > const &,Viper::Vector< double > &)\n"
    "    Viper::copy(Viper::Matrix< float > const &,Viper::Matrix< float > &)\n"
    "    Viper::copy(Viper::Matrix< double > const &,Viper::Matrix< double > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_gslice(void *obj) {
std::gslice *arg1 = (std::gslice *) obj;
delete arg1;
}
static swig_lua_attribute swig_gslice_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_gslice_methods[]= {
    {0,0}
};
static swig_lua_method swig_gslice_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_gslice_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_gslice_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_gslice_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_gslice_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_gslice_Sf_SwigStatic = {
    "gslice",
    swig_gslice_Sf_SwigStatic_methods,
    swig_gslice_Sf_SwigStatic_attributes,
    swig_gslice_Sf_SwigStatic_constants,
    swig_gslice_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_gslice_bases[] = {0};
static const char *swig_gslice_base_names[] = {0};
static swig_lua_class _wrap_class_gslice = { "gslice", "gslice", &SWIGTYPE_p_std__gslice,0, swig_delete_gslice, swig_gslice_methods, swig_gslice_attributes, &swig_gslice_Sf_SwigStatic, swig_gslice_meta, swig_gslice_bases, swig_gslice_base_names };

static void swig_delete_slice(void *obj) {
std::slice *arg1 = (std::slice *) obj;
delete arg1;
}
static swig_lua_attribute swig_slice_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_slice_methods[]= {
    {0,0}
};
static swig_lua_method swig_slice_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_slice_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_slice_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_slice_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_slice_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_slice_Sf_SwigStatic = {
    "slice",
    swig_slice_Sf_SwigStatic_methods,
    swig_slice_Sf_SwigStatic_attributes,
    swig_slice_Sf_SwigStatic_constants,
    swig_slice_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_slice_bases[] = {0};
static const char *swig_slice_base_names[] = {0};
static swig_lua_class _wrap_class_slice = { "slice", "slice", &SWIGTYPE_p_std__slice,0, swig_delete_slice, swig_slice_methods, swig_slice_attributes, &swig_slice_Sf_SwigStatic, swig_slice_meta, swig_slice_bases, swig_slice_base_names };

static int _wrap_new_float_complex__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< float >::complex",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::complex",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (std::complex< float > *)new std::complex< float >((float const &)*arg1,(float const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_complex__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< float >::complex",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (std::complex< float > *)new std::complex< float >((float const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_complex__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",0,0)
  result = (std::complex< float > *)new std::complex< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_complex__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::complex< float >::complex",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("new_float_complex",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (std::complex< float > *)new std::complex< float >((std::complex< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_complex(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_float_complex__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_complex__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_float_complex__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_float_complex__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_float_complex'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::complex(float const &,float const &)\n"
    "    std::complex< float >::complex(float const &)\n"
    "    std::complex< float >::complex()\n"
    "    std::complex< float >::complex(std::complex< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_complex_real__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::complex< float >::real",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::real",1,"std::complex< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex_real",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)((std::complex< float > const *)arg1)->real();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex_imag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::complex< float >::imag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::imag",1,"std::complex< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex_imag",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)((std::complex< float > const *)arg1)->imag();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex_real__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("std::complex< float >::real",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::real",1,"std::complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::real",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex_real",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->real(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex_real(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_float_complex_real__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_complex_real__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_complex_real'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::real() const\n"
    "    std::complex< float >::real(float)\n");
  lua_error(L);return 0;
}


static int _wrap_float_complex_imag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("std::complex< float >::imag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::imag",1,"std::complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::imag",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex_imag",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->imag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex_imag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_float_complex_imag__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_complex_imag__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_complex_imag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::imag() const\n"
    "    std::complex< float >::imag(float)\n");
  lua_error(L);return 0;
}


static int _wrap_float_complex___add(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__add__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__add__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___add",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___add",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____add____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___sub(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__sub__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__sub__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___sub",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___sub",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____sub____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___div(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__div__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__div__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___div",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___div",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____div____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___mul(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__mul__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__mul__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___mul",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___mul",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____mul____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__pow__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__pow__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___pow",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___pow",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____pow____SWIG_0(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__pow__",1,"std::complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::__pow__",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___pow",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = std_complex_Sl_float_Sg____pow____SWIG_1(arg1,(float const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_complex___pow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_complex___pow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_complex___pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::__pow__(std::complex< float > const &)\n"
    "    std::complex< float >::__pow__(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_complex___eq(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("std::complex< float >::__eq__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__eq__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__eq__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___eq",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___eq",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (bool)std_complex_Sl_float_Sg____eq____SWIG(arg1,(std::complex< float > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_complex(void *obj) {
std::complex< float > *arg1 = (std::complex< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_complex(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_complex);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_complex_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_complex_methods[]= {
    { "real", _wrap_float_complex_real},
    { "imag", _wrap_float_complex_imag},
    { "__add", _wrap_float_complex___add},
    { "__sub", _wrap_float_complex___sub},
    { "__div", _wrap_float_complex___div},
    { "__mul", _wrap_float_complex___mul},
    { "__pow", _wrap_float_complex___pow},
    { "__eq", _wrap_float_complex___eq},
    {0,0}
};
static swig_lua_method swig_float_complex_meta[] = {
    { "__add", _wrap_float_complex___add},
    { "__sub", _wrap_float_complex___sub},
    { "__div", _wrap_float_complex___div},
    { "__mul", _wrap_float_complex___mul},
    { "__pow", _wrap_float_complex___pow},
    { "__eq", _wrap_float_complex___eq},
    {0,0}
};

static swig_lua_attribute swig_float_complex_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_complex_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_complex_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_complex_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_complex_Sf_SwigStatic = {
    "float_complex",
    swig_float_complex_Sf_SwigStatic_methods,
    swig_float_complex_Sf_SwigStatic_attributes,
    swig_float_complex_Sf_SwigStatic_constants,
    swig_float_complex_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_complex_bases[] = {0};
static const char *swig_float_complex_base_names[] = {0};
static swig_lua_class _wrap_class_float_complex = { "float_complex", "float_complex", &SWIGTYPE_p_std__complexT_float_t,_proxy__wrap_new_float_complex, swig_delete_float_complex, swig_float_complex_methods, swig_float_complex_attributes, &swig_float_complex_Sf_SwigStatic, swig_float_complex_meta, swig_float_complex_bases, swig_float_complex_base_names };

static int _wrap_new_double_complex__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< double >::complex",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::complex",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (std::complex< double > *)new std::complex< double >((double const &)*arg1,(double const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< double >::complex",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (std::complex< double > *)new std::complex< double >((double const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",0,0)
  result = (std::complex< double > *)new std::complex< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::complex< double >::complex",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("new_double_complex",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (std::complex< double > *)new std::complex< double >((std::complex< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_double_complex__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_double_complex__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_double_complex__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_double_complex__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_double_complex'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::complex(double const &,double const &)\n"
    "    std::complex< double >::complex(double const &)\n"
    "    std::complex< double >::complex()\n"
    "    std::complex< double >::complex(std::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_double_complex_real__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::complex< double >::real",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::real",1,"std::complex< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_real",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)((std::complex< double > const *)arg1)->real();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_imag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::complex< double >::imag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::imag",1,"std::complex< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_imag",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)((std::complex< double > const *)arg1)->imag();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_real__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("std::complex< double >::real",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::real",1,"std::complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::real",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_real",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->real(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_real(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_double_complex_real__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_complex_real__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_complex_real'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::real() const\n"
    "    std::complex< double >::real(double)\n");
  lua_error(L);return 0;
}


static int _wrap_double_complex_imag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("std::complex< double >::imag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::imag",1,"std::complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::imag",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_imag",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->imag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_imag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_double_complex_imag__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_complex_imag__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_complex_imag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::imag() const\n"
    "    std::complex< double >::imag(double)\n");
  lua_error(L);return 0;
}


static int _wrap_double_complex___add(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__add__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__add__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___add",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___add",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____add____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___sub(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__sub__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__sub__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___sub",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___sub",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____sub____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___div(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__div__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__div__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___div",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___div",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____div____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___mul(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__mul__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__mul__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___mul",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___mul",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____mul____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__pow__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__pow__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___pow",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___pow",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____pow____SWIG_0(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__pow__",1,"std::complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::__pow__",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___pow",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = std_complex_Sl_double_Sg____pow____SWIG_1(arg1,(double const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_double_complex___pow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_complex___pow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_complex___pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::__pow__(std::complex< double > const &)\n"
    "    std::complex< double >::__pow__(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_double_complex___eq(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("std::complex< double >::__eq__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__eq__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__eq__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___eq",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___eq",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (bool)std_complex_Sl_double_Sg____eq____SWIG(arg1,(std::complex< double > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_complex(void *obj) {
std::complex< double > *arg1 = (std::complex< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_complex(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_complex);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_complex_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_double_complex_methods[]= {
    { "real", _wrap_double_complex_real},
    { "imag", _wrap_double_complex_imag},
    { "__add", _wrap_double_complex___add},
    { "__sub", _wrap_double_complex___sub},
    { "__div", _wrap_double_complex___div},
    { "__mul", _wrap_double_complex___mul},
    { "__pow", _wrap_double_complex___pow},
    { "__eq", _wrap_double_complex___eq},
    {0,0}
};
static swig_lua_method swig_double_complex_meta[] = {
    { "__add", _wrap_double_complex___add},
    { "__sub", _wrap_double_complex___sub},
    { "__div", _wrap_double_complex___div},
    { "__mul", _wrap_double_complex___mul},
    { "__pow", _wrap_double_complex___pow},
    { "__eq", _wrap_double_complex___eq},
    {0,0}
};

static swig_lua_attribute swig_double_complex_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_complex_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_complex_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_complex_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_complex_Sf_SwigStatic = {
    "double_complex",
    swig_double_complex_Sf_SwigStatic_methods,
    swig_double_complex_Sf_SwigStatic_attributes,
    swig_double_complex_Sf_SwigStatic_constants,
    swig_double_complex_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_complex_bases[] = {0};
static const char *swig_double_complex_base_names[] = {0};
static swig_lua_class _wrap_class_double_complex = { "double_complex", "double_complex", &SWIGTYPE_p_std__complexT_double_t,_proxy__wrap_new_double_complex, swig_delete_double_complex, swig_double_complex_methods, swig_double_complex_attributes, &swig_double_complex_Sf_SwigStatic, swig_double_complex_meta, swig_double_complex_bases, swig_double_complex_base_names };

static int _wrap_new_float_valarray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",0,0)
  result = (std::valarray< float > *)new std::valarray< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::valarray< float > *)new std::valarray< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  size_t arg2 ;
  float temp1 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::valarray",2,"size_t");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::valarray< float > *)new std::valarray< float >((float const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  size_t arg2 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"float const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::valarray",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::valarray< float > *)new std::valarray< float >((float const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = 0 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = (std::valarray< float > *)new std::valarray< float >((std::valarray< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  std::slice_array< float > *arg1 = 0 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"std::slice_array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__slice_arrayT_float_t,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_std__slice_arrayT_float_t);
  }
  
  result = (std::valarray< float > *)new std::valarray< float >((std::slice_array< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  std::gslice_array< float > *arg1 = 0 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"std::gslice_array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__gslice_arrayT_float_t,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_std__gslice_arrayT_float_t);
  }
  
  result = (std::valarray< float > *)new std::valarray< float >((std::gslice_array< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  std::mask_array< float > *arg1 = 0 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"std::mask_array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mask_arrayT_float_t,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_std__mask_arrayT_float_t);
  }
  
  result = (std::valarray< float > *)new std::valarray< float >((std::mask_array< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  std::indirect_array< float > *arg1 = 0 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"std::indirect_array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__indirect_arrayT_float_t,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_std__indirect_arrayT_float_t);
  }
  
  result = (std::valarray< float > *)new std::valarray< float >((std::indirect_array< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_float_valarray__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__slice_arrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__gslice_arrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__mask_arrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__indirect_arrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_8(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_float_valarray__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_float_valarray__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_float_valarray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::valarray()\n"
    "    std::valarray< float >::valarray(size_t)\n"
    "    std::valarray< float >::valarray(float const &,size_t)\n"
    "    std::valarray< float >::valarray(float const *,size_t)\n"
    "    std::valarray< float >::valarray(std::valarray< float > const &)\n"
    "    std::valarray< float >::valarray(std::slice_array< float > const &)\n"
    "    std::valarray< float >::valarray(std::gslice_array< float > const &)\n"
    "    std::valarray< float >::valarray(std::mask_array< float > const &)\n"
    "    std::valarray< float >::valarray(std::indirect_array< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_valarray___getitem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("std::valarray< float >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__getitem__",1,"std::valarray< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___getitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)std_valarray_Sl_float_Sg____getitem____SWIG_0(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___setitem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  size_t arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("std::valarray< float >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__setitem__",1,"std::valarray< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::__setitem__",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::valarray< float >::__setitem__",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___setitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  std_valarray_Sl_float_Sg____setitem____SWIG_0(arg1,arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___getitem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::gslice *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__getitem__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__getitem__",2,"std::gslice const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___getitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__gslice,0))){
    SWIG_fail_ptr("float_valarray___getitem",2,SWIGTYPE_p_std__gslice);
  }
  
  result = std_valarray_Sl_float_Sg____getitem____SWIG_1(arg1,(std::gslice const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___setitem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::gslice *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("std::valarray< float >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__setitem__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__setitem__",2,"std::gslice const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::valarray< float >::__setitem__",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___setitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__gslice,0))){
    SWIG_fail_ptr("float_valarray___setitem",2,SWIGTYPE_p_std__gslice);
  }
  
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  std_valarray_Sl_float_Sg____setitem____SWIG_1(arg1,(std::gslice const &)*arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___getitem__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::slice *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__getitem__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__getitem__",2,"std::slice const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___getitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__slice,0))){
    SWIG_fail_ptr("float_valarray___getitem",2,SWIGTYPE_p_std__slice);
  }
  
  result = std_valarray_Sl_float_Sg____getitem____SWIG_2(arg1,(std::slice const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___getitem(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__gslice, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_valarray___getitem__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__slice, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_valarray___getitem__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_valarray___getitem__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_valarray___getitem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::__getitem__(size_t)\n"
    "    std::valarray< float >::__getitem__(std::gslice const &)\n"
    "    std::valarray< float >::__getitem__(std::slice const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_valarray___setitem__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::slice *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("std::valarray< float >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__setitem__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__setitem__",2,"std::slice const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::valarray< float >::__setitem__",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___setitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__slice,0))){
    SWIG_fail_ptr("float_valarray___setitem",2,SWIGTYPE_p_std__slice);
  }
  
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  std_valarray_Sl_float_Sg____setitem____SWIG_2(arg1,(std::slice const &)*arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___setitem(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__gslice, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_valarray___setitem__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__slice, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_valarray___setitem__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_valarray___setitem__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_valarray___setitem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::__setitem__(size_t,float const &)\n"
    "    std::valarray< float >::__setitem__(std::gslice const &,float const &)\n"
    "    std::valarray< float >::__setitem__(std::slice const &,float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_valarray___add(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__add__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__add__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___add",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___add",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____add____SWIG(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___sub(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__sub__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__sub__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___sub",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___sub",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____sub____SWIG(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___mul(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__mul__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__mul__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___mul",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___mul",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____mul____SWIG(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___div(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__div__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__div__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___div",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___div",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____div____SWIG(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___unm__(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__unm__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__unm__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__unm__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___unm__",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___unm__",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____unm____SWIG(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__pow__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__pow__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___pow",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___pow",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____pow____SWIG_0(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__pow__",1,"std::valarray< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::__pow__",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___pow",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = std_valarray_Sl_float_Sg____pow____SWIG_1(arg1,(float const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_valarray___pow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_valarray___pow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_valarray___pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::__pow__(std::valarray< float > const &)\n"
    "    std::valarray< float >::__pow__(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_valarray_size(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::valarray< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::size",1,"std::valarray< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_size",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = ((std::valarray< float > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_resize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("std::valarray< float >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::resize",1,"std::valarray< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::valarray< float >::resize",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_resize",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_resize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::valarray< float >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::resize",1,"std::valarray< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_resize",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_resize(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_valarray_resize__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_valarray_resize__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_valarray_resize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::resize(size_t,float)\n"
    "    std::valarray< float >::resize(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_float_valarray_sum(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::valarray< float >::sum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::sum",1,"std::valarray< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_sum",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = (float)((std::valarray< float > const *)arg1)->sum();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_min(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::valarray< float >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::min",1,"std::valarray< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_min",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = (float)((std::valarray< float > const *)arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_max(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::valarray< float >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::max",1,"std::valarray< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_max",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = (float)((std::valarray< float > const *)arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_shift(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  int arg2 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::shift",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::shift",1,"std::valarray< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::shift",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_shift",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((std::valarray< float > const *)arg1)->shift(arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_cshift(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  int arg2 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::cshift",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::cshift",1,"std::valarray< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::cshift",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_cshift",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((std::valarray< float > const *)arg1)->cshift(arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float (*arg2)(float) = (float (*)(float)) 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::apply",1,"std::valarray< float > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::valarray< float >::apply",2,"float (*)(float)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_apply",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_float__float,0))){
    SWIG_fail_ptr("float_valarray_apply",2,SWIGTYPE_p_f_float__float);
  }
  
  result = ((std::valarray< float > const *)arg1)->apply(arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float (*arg2)(float const &) = (float (*)(float const &)) 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::apply",1,"std::valarray< float > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::valarray< float >::apply",2,"float (*)(float const &)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_apply",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_r_q_const__float__float,0))){
    SWIG_fail_ptr("float_valarray_apply",2,SWIGTYPE_p_f_r_q_const__float__float);
  }
  
  result = ((std::valarray< float > const *)arg1)->apply(arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_apply(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_f_float__float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_valarray_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_f_r_q_const__float__float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_valarray_apply__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_valarray_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::apply(float (*)(float)) const\n"
    "    std::valarray< float >::apply(float (*)(float const &)) const\n");
  lua_error(L);return 0;
}


static void swig_delete_float_valarray(void *obj) {
std::valarray< float > *arg1 = (std::valarray< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_valarray(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_valarray);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_valarray_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_valarray_methods[]= {
    { "__getitem", _wrap_float_valarray___getitem},
    { "__setitem", _wrap_float_valarray___setitem},
    { "__add", _wrap_float_valarray___add},
    { "__sub", _wrap_float_valarray___sub},
    { "__mul", _wrap_float_valarray___mul},
    { "__div", _wrap_float_valarray___div},
    { "__unm__", _wrap_float_valarray___unm__},
    { "__pow", _wrap_float_valarray___pow},
    { "size", _wrap_float_valarray_size},
    { "resize", _wrap_float_valarray_resize},
    { "sum", _wrap_float_valarray_sum},
    { "min", _wrap_float_valarray_min},
    { "max", _wrap_float_valarray_max},
    { "shift", _wrap_float_valarray_shift},
    { "cshift", _wrap_float_valarray_cshift},
    { "apply", _wrap_float_valarray_apply},
    {0,0}
};
static swig_lua_method swig_float_valarray_meta[] = {
    { "__getitem", _wrap_float_valarray___getitem},
    { "__setitem", _wrap_float_valarray___setitem},
    { "__add", _wrap_float_valarray___add},
    { "__sub", _wrap_float_valarray___sub},
    { "__mul", _wrap_float_valarray___mul},
    { "__div", _wrap_float_valarray___div},
    { "__unm__", _wrap_float_valarray___unm__},
    { "__pow", _wrap_float_valarray___pow},
    {0,0}
};

static swig_lua_attribute swig_float_valarray_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_valarray_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_valarray_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_valarray_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_valarray_Sf_SwigStatic = {
    "float_valarray",
    swig_float_valarray_Sf_SwigStatic_methods,
    swig_float_valarray_Sf_SwigStatic_attributes,
    swig_float_valarray_Sf_SwigStatic_constants,
    swig_float_valarray_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_valarray_bases[] = {0};
static const char *swig_float_valarray_base_names[] = {0};
static swig_lua_class _wrap_class_float_valarray = { "float_valarray", "float_valarray", &SWIGTYPE_p_std__valarrayT_float_t,_proxy__wrap_new_float_valarray, swig_delete_float_valarray, swig_float_valarray_methods, swig_float_valarray_attributes, &swig_float_valarray_Sf_SwigStatic, swig_float_valarray_meta, swig_float_valarray_bases, swig_float_valarray_base_names };

static int _wrap_float_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::min",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::max",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::epsilon",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::round_error",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::infinity",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::quiet_NaN",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::signaling_NaN",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::denorm_min",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< float >::numeric_limits",0,0)
  result = (std::numeric_limits< float > *)new std::numeric_limits< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_numeric_limits(void *obj) {
std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_numeric_limits_methods[]= {
    { "min", _wrap_float_numeric_limits_min},
    { "max", _wrap_float_numeric_limits_max},
    { "epsilon", _wrap_float_numeric_limits_epsilon},
    { "round_error", _wrap_float_numeric_limits_round_error},
    { "infinity", _wrap_float_numeric_limits_infinity},
    { "quiet_NaN", _wrap_float_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_float_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_float_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_float_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_float_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_numeric_limits_Sf_SwigStatic = {
    "float_numeric_limits",
    swig_float_numeric_limits_Sf_SwigStatic_methods,
    swig_float_numeric_limits_Sf_SwigStatic_attributes,
    swig_float_numeric_limits_Sf_SwigStatic_constants,
    swig_float_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_numeric_limits_bases[] = {0};
static const char *swig_float_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_float_numeric_limits = { "float_numeric_limits", "float_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_float_t,_proxy__wrap_new_float_numeric_limits, swig_delete_float_numeric_limits, swig_float_numeric_limits_methods, swig_float_numeric_limits_attributes, &swig_float_numeric_limits_Sf_SwigStatic, swig_float_numeric_limits_meta, swig_float_numeric_limits_bases, swig_float_numeric_limits_base_names };

static int _wrap_double_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::min",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::max",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::epsilon",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::round_error",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::infinity",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::quiet_NaN",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::signaling_NaN",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::denorm_min",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< double >::numeric_limits",0,0)
  result = (std::numeric_limits< double > *)new std::numeric_limits< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_numeric_limits(void *obj) {
std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_double_numeric_limits_methods[]= {
    { "min", _wrap_double_numeric_limits_min},
    { "max", _wrap_double_numeric_limits_max},
    { "epsilon", _wrap_double_numeric_limits_epsilon},
    { "round_error", _wrap_double_numeric_limits_round_error},
    { "infinity", _wrap_double_numeric_limits_infinity},
    { "quiet_NaN", _wrap_double_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_double_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_double_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_double_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_double_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_numeric_limits_Sf_SwigStatic = {
    "double_numeric_limits",
    swig_double_numeric_limits_Sf_SwigStatic_methods,
    swig_double_numeric_limits_Sf_SwigStatic_attributes,
    swig_double_numeric_limits_Sf_SwigStatic_constants,
    swig_double_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_numeric_limits_bases[] = {0};
static const char *swig_double_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_double_numeric_limits = { "double_numeric_limits", "double_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_double_t,_proxy__wrap_new_double_numeric_limits, swig_delete_double_numeric_limits, swig_double_numeric_limits_methods, swig_double_numeric_limits_attributes, &swig_double_numeric_limits_Sf_SwigStatic, swig_double_numeric_limits_meta, swig_double_numeric_limits_bases, swig_double_numeric_limits_base_names };

static int _wrap_int_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::min",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::max",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::epsilon",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::round_error",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::infinity",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::quiet_NaN",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::signaling_NaN",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::denorm_min",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< int >::numeric_limits",0,0)
  result = (std::numeric_limits< int > *)new std::numeric_limits< int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_int_numeric_limits(void *obj) {
std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_int_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_int_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_int_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_int_numeric_limits_methods[]= {
    { "min", _wrap_int_numeric_limits_min},
    { "max", _wrap_int_numeric_limits_max},
    { "epsilon", _wrap_int_numeric_limits_epsilon},
    { "round_error", _wrap_int_numeric_limits_round_error},
    { "infinity", _wrap_int_numeric_limits_infinity},
    { "quiet_NaN", _wrap_int_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_int_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_int_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_int_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_int_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_int_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_int_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_int_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_int_numeric_limits_Sf_SwigStatic = {
    "int_numeric_limits",
    swig_int_numeric_limits_Sf_SwigStatic_methods,
    swig_int_numeric_limits_Sf_SwigStatic_attributes,
    swig_int_numeric_limits_Sf_SwigStatic_constants,
    swig_int_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_int_numeric_limits_bases[] = {0};
static const char *swig_int_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_int_numeric_limits = { "int_numeric_limits", "int_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_int_t,_proxy__wrap_new_int_numeric_limits, swig_delete_int_numeric_limits, swig_int_numeric_limits_methods, swig_int_numeric_limits_attributes, &swig_int_numeric_limits_Sf_SwigStatic, swig_int_numeric_limits_meta, swig_int_numeric_limits_bases, swig_int_numeric_limits_base_names };

static int _wrap_uint_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::min",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::max",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::epsilon",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::round_error",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::infinity",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::quiet_NaN",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::signaling_NaN",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::denorm_min",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned int > *)new std::numeric_limits< unsigned int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uint_numeric_limits(void *obj) {
std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_uint_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uint_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uint_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uint_numeric_limits_methods[]= {
    { "min", _wrap_uint_numeric_limits_min},
    { "max", _wrap_uint_numeric_limits_max},
    { "epsilon", _wrap_uint_numeric_limits_epsilon},
    { "round_error", _wrap_uint_numeric_limits_round_error},
    { "infinity", _wrap_uint_numeric_limits_infinity},
    { "quiet_NaN", _wrap_uint_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_uint_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_uint_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_uint_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uint_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uint_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uint_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uint_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uint_numeric_limits_Sf_SwigStatic = {
    "uint_numeric_limits",
    swig_uint_numeric_limits_Sf_SwigStatic_methods,
    swig_uint_numeric_limits_Sf_SwigStatic_attributes,
    swig_uint_numeric_limits_Sf_SwigStatic_constants,
    swig_uint_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uint_numeric_limits_bases[] = {0};
static const char *swig_uint_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_uint_numeric_limits = { "uint_numeric_limits", "uint_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,_proxy__wrap_new_uint_numeric_limits, swig_delete_uint_numeric_limits, swig_uint_numeric_limits_methods, swig_uint_numeric_limits_attributes, &swig_uint_numeric_limits_Sf_SwigStatic, swig_uint_numeric_limits_meta, swig_uint_numeric_limits_bases, swig_uint_numeric_limits_base_names };

static int _wrap_short_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::min",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::max",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::epsilon",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::round_error",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::infinity",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::quiet_NaN",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::signaling_NaN",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::denorm_min",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_short_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< short >::numeric_limits",0,0)
  result = (std::numeric_limits< short > *)new std::numeric_limits< short >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_short_numeric_limits(void *obj) {
std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) obj;
delete arg1;
}
static int _proxy__wrap_new_short_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_short_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_short_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_short_numeric_limits_methods[]= {
    { "min", _wrap_short_numeric_limits_min},
    { "max", _wrap_short_numeric_limits_max},
    { "epsilon", _wrap_short_numeric_limits_epsilon},
    { "round_error", _wrap_short_numeric_limits_round_error},
    { "infinity", _wrap_short_numeric_limits_infinity},
    { "quiet_NaN", _wrap_short_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_short_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_short_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_short_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_short_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_short_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_short_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_short_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_short_numeric_limits_Sf_SwigStatic = {
    "short_numeric_limits",
    swig_short_numeric_limits_Sf_SwigStatic_methods,
    swig_short_numeric_limits_Sf_SwigStatic_attributes,
    swig_short_numeric_limits_Sf_SwigStatic_constants,
    swig_short_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_short_numeric_limits_bases[] = {0};
static const char *swig_short_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_short_numeric_limits = { "short_numeric_limits", "short_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_short_t,_proxy__wrap_new_short_numeric_limits, swig_delete_short_numeric_limits, swig_short_numeric_limits_methods, swig_short_numeric_limits_attributes, &swig_short_numeric_limits_Sf_SwigStatic, swig_short_numeric_limits_meta, swig_short_numeric_limits_bases, swig_short_numeric_limits_base_names };

static int _wrap_ushort_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::min",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::max",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::epsilon",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::round_error",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::infinity",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::quiet_NaN",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::signaling_NaN",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::denorm_min",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ushort_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned short > *)new std::numeric_limits< unsigned short >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ushort_numeric_limits(void *obj) {
std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ushort_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ushort_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ushort_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ushort_numeric_limits_methods[]= {
    { "min", _wrap_ushort_numeric_limits_min},
    { "max", _wrap_ushort_numeric_limits_max},
    { "epsilon", _wrap_ushort_numeric_limits_epsilon},
    { "round_error", _wrap_ushort_numeric_limits_round_error},
    { "infinity", _wrap_ushort_numeric_limits_infinity},
    { "quiet_NaN", _wrap_ushort_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_ushort_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_ushort_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_ushort_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ushort_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ushort_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ushort_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ushort_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ushort_numeric_limits_Sf_SwigStatic = {
    "ushort_numeric_limits",
    swig_ushort_numeric_limits_Sf_SwigStatic_methods,
    swig_ushort_numeric_limits_Sf_SwigStatic_attributes,
    swig_ushort_numeric_limits_Sf_SwigStatic_constants,
    swig_ushort_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ushort_numeric_limits_bases[] = {0};
static const char *swig_ushort_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_ushort_numeric_limits = { "ushort_numeric_limits", "ushort_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,_proxy__wrap_new_ushort_numeric_limits, swig_delete_ushort_numeric_limits, swig_ushort_numeric_limits_methods, swig_ushort_numeric_limits_attributes, &swig_ushort_numeric_limits_Sf_SwigStatic, swig_ushort_numeric_limits_meta, swig_ushort_numeric_limits_bases, swig_ushort_numeric_limits_base_names };

static int _wrap_long_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::min",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::max",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::epsilon",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::round_error",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::infinity",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::quiet_NaN",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::signaling_NaN",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::denorm_min",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_long_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< long >::numeric_limits",0,0)
  result = (std::numeric_limits< long > *)new std::numeric_limits< long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_long_numeric_limits(void *obj) {
std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_long_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_long_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_long_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_long_numeric_limits_methods[]= {
    { "min", _wrap_long_numeric_limits_min},
    { "max", _wrap_long_numeric_limits_max},
    { "epsilon", _wrap_long_numeric_limits_epsilon},
    { "round_error", _wrap_long_numeric_limits_round_error},
    { "infinity", _wrap_long_numeric_limits_infinity},
    { "quiet_NaN", _wrap_long_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_long_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_long_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_long_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_long_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_long_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_long_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_long_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_long_numeric_limits_Sf_SwigStatic = {
    "long_numeric_limits",
    swig_long_numeric_limits_Sf_SwigStatic_methods,
    swig_long_numeric_limits_Sf_SwigStatic_attributes,
    swig_long_numeric_limits_Sf_SwigStatic_constants,
    swig_long_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_long_numeric_limits_bases[] = {0};
static const char *swig_long_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_long_numeric_limits = { "long_numeric_limits", "long_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_long_t,_proxy__wrap_new_long_numeric_limits, swig_delete_long_numeric_limits, swig_long_numeric_limits_methods, swig_long_numeric_limits_attributes, &swig_long_numeric_limits_Sf_SwigStatic, swig_long_numeric_limits_meta, swig_long_numeric_limits_bases, swig_long_numeric_limits_base_names };

static int _wrap_ulong_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::min",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::max",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::epsilon",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::round_error",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::infinity",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::quiet_NaN",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::signaling_NaN",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::denorm_min",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ulong_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned long > *)new std::numeric_limits< unsigned long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ulong_numeric_limits(void *obj) {
std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ulong_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ulong_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ulong_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ulong_numeric_limits_methods[]= {
    { "min", _wrap_ulong_numeric_limits_min},
    { "max", _wrap_ulong_numeric_limits_max},
    { "epsilon", _wrap_ulong_numeric_limits_epsilon},
    { "round_error", _wrap_ulong_numeric_limits_round_error},
    { "infinity", _wrap_ulong_numeric_limits_infinity},
    { "quiet_NaN", _wrap_ulong_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_ulong_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_ulong_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_ulong_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ulong_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ulong_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ulong_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ulong_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ulong_numeric_limits_Sf_SwigStatic = {
    "ulong_numeric_limits",
    swig_ulong_numeric_limits_Sf_SwigStatic_methods,
    swig_ulong_numeric_limits_Sf_SwigStatic_attributes,
    swig_ulong_numeric_limits_Sf_SwigStatic_constants,
    swig_ulong_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ulong_numeric_limits_bases[] = {0};
static const char *swig_ulong_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_ulong_numeric_limits = { "ulong_numeric_limits", "ulong_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,_proxy__wrap_new_ulong_numeric_limits, swig_delete_ulong_numeric_limits, swig_ulong_numeric_limits_methods, swig_ulong_numeric_limits_attributes, &swig_ulong_numeric_limits_Sf_SwigStatic, swig_ulong_numeric_limits_meta, swig_ulong_numeric_limits_bases, swig_ulong_numeric_limits_base_names };

static int _wrap_llong_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::min",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::max",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::epsilon",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::round_error",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::infinity",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::quiet_NaN",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::signaling_NaN",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::denorm_min",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_llong_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< long long >::numeric_limits",0,0)
  result = (std::numeric_limits< long long > *)new std::numeric_limits< long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_llong_numeric_limits(void *obj) {
std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_llong_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_llong_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_llong_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_llong_numeric_limits_methods[]= {
    { "min", _wrap_llong_numeric_limits_min},
    { "max", _wrap_llong_numeric_limits_max},
    { "epsilon", _wrap_llong_numeric_limits_epsilon},
    { "round_error", _wrap_llong_numeric_limits_round_error},
    { "infinity", _wrap_llong_numeric_limits_infinity},
    { "quiet_NaN", _wrap_llong_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_llong_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_llong_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_llong_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_llong_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_llong_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_llong_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_llong_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_llong_numeric_limits_Sf_SwigStatic = {
    "llong_numeric_limits",
    swig_llong_numeric_limits_Sf_SwigStatic_methods,
    swig_llong_numeric_limits_Sf_SwigStatic_attributes,
    swig_llong_numeric_limits_Sf_SwigStatic_constants,
    swig_llong_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_llong_numeric_limits_bases[] = {0};
static const char *swig_llong_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_llong_numeric_limits = { "llong_numeric_limits", "llong_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_long_long_t,_proxy__wrap_new_llong_numeric_limits, swig_delete_llong_numeric_limits, swig_llong_numeric_limits_methods, swig_llong_numeric_limits_attributes, &swig_llong_numeric_limits_Sf_SwigStatic, swig_llong_numeric_limits_meta, swig_llong_numeric_limits_bases, swig_llong_numeric_limits_base_names };

static int _wrap_ullong_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::min",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::max",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::epsilon",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::round_error",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::infinity",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::quiet_NaN",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::signaling_NaN",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::denorm_min",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ullong_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned long long > *)new std::numeric_limits< unsigned long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ullong_numeric_limits(void *obj) {
std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ullong_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ullong_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ullong_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ullong_numeric_limits_methods[]= {
    { "min", _wrap_ullong_numeric_limits_min},
    { "max", _wrap_ullong_numeric_limits_max},
    { "epsilon", _wrap_ullong_numeric_limits_epsilon},
    { "round_error", _wrap_ullong_numeric_limits_round_error},
    { "infinity", _wrap_ullong_numeric_limits_infinity},
    { "quiet_NaN", _wrap_ullong_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_ullong_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_ullong_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_ullong_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ullong_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ullong_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ullong_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ullong_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ullong_numeric_limits_Sf_SwigStatic = {
    "ullong_numeric_limits",
    swig_ullong_numeric_limits_Sf_SwigStatic_methods,
    swig_ullong_numeric_limits_Sf_SwigStatic_attributes,
    swig_ullong_numeric_limits_Sf_SwigStatic_constants,
    swig_ullong_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ullong_numeric_limits_bases[] = {0};
static const char *swig_ullong_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_ullong_numeric_limits = { "ullong_numeric_limits", "ullong_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,_proxy__wrap_new_ullong_numeric_limits, swig_delete_ullong_numeric_limits, swig_ullong_numeric_limits_methods, swig_ullong_numeric_limits_attributes, &swig_ullong_numeric_limits_Sf_SwigStatic, swig_ullong_numeric_limits_meta, swig_ullong_numeric_limits_bases, swig_ullong_numeric_limits_base_names };

static int _wrap_Huge(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("Huge",0,0)
  result = (double)Huge();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Hugef(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("Hugef",0,0)
  result = (float)Hugef();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Infinity(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("Infinity",0,0)
  result = (double)Infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NaN(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("NaN",0,0)
  result = (double)NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("abs< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("abs< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)abs< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cubef(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cube< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cube< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cube< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("sqrt< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sqrt< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)sqrt< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("exp< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("exp< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)exp< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp2f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("exp2< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("exp2< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)exp2< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("log< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)log< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("log10< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log10< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)log10< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log2f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("log2< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log2< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)log2< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logbf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("logb< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("logb< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)logb< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("pow< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("pow< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pow< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)pow< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floorf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("floor< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("floor< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)floor< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("acos< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("acos< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)acos< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("asin< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("asin< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)asin< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("atan< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atan< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)atan< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("atan2< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atan2< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("atan2< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)atan2< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cos< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cos< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cos< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("sin< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sin< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)sin< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("tan< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tan< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)tan< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cosh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cosh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cosh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("sinh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sinh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)sinh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("tanh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tanh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)tanh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lgammaf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("lgamma< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lgamma< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)lgamma< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acoshf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("acosh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("acosh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)acosh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("asinh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("asinh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)asinh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("atanh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atanh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)atanh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cbrtf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cbrt< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cbrt< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cbrt< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceilf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cbrt< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cbrt< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cbrt< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copysignf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("copysign< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("copysign< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("copysign< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)copysign< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erff(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("erf< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("erf< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)erf< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfcf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("erfc< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("erfc< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)erfc< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expm1f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("expm1< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("expm1< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)expm1< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fdimf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("fdim< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fdim< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fdim< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)fdim< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp1 ;
  float temp2 ;
  float temp3 ;
  float result;
  
  SWIG_check_num_args("fma< f32 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fma< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fma< f32 >",2,"float const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("fma< f32 >",3,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  result = (float)fma< f32 >((float const &)*arg1,(float const &)*arg2,(float const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaxf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("fmax< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmax< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmax< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)fmax< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fminf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("fmin< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmin< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmin< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)fmin< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmodf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("fmod< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmod< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmod< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)fmod< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fpclassifyf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  int result;
  
  SWIG_check_num_args("fpclassify< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fpclassify< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (int)fpclassify< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hypotf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("hypot< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("hypot< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("hypot< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)hypot< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ilogbf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  int result;
  
  SWIG_check_num_args("ilogb< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ilogb< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (int)ilogb< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isfinitef(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("isfinite< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isfinite< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isfinite< f32 >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("isgreater< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isgreater< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isgreater< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isgreater< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterequalf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("isgreaterequal< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isgreaterequal< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isgreaterequal< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isgreaterequal< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isinff(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("isinf< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isinf< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isinf< f32 >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("isless< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isless< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isless< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isless< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessequalf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("islessequal< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("islessequal< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("islessequal< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)islessequal< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnanf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("isnan< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isnan< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isnan< f32 >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnormalf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("isnormal< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isnormal< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isnormal< f32 >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isunorderedf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("isunordered< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isunordered< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isunordered< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isunordered< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldexpf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  int arg2 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("ldexp< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ldexp< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ldexp< f32 >",2,"int");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)ldexp< f32 >((float const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llrintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("llrint< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("llrint< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)llrint< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llroundf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("llround< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("llround< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)llround< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("log1p< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log1p< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)log1p< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lrintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("lrint< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lrint< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)lrint< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lroundf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("lround< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lround< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)lround< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanf(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("nan< f32 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nan< f32 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (float)nan< f32 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanff(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("nanf< f32 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nanf< f32 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (float)nanf< f32 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanlf(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("nanl< f32 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nanl< f32 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (float)nanl< f32 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nearbyintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("nearbyint< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nearbyint< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)nearbyint< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nextafterf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("nextafter< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nextafter< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nextafter< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)nextafter< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nexttowardf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("nexttoward< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nexttoward< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nexttoward< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)nexttoward< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_remainderf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("remainder< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("remainder< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("remainder< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)remainder< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("rint< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rint< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)rint< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("round< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("round< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)round< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalblnf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  long arg2 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("scalbln< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scalbln< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scalbln< f32 >",2,"long");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (long)lua_tonumber(L, 2);
  result = (float)scalbln< f32 >((float const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalbnf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  int arg2 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("scalbn< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scalbn< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scalbn< f32 >",2,"int");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)scalbn< f32 >((float const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squaref(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("square< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("square< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)square< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tgammaf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("tgamma< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tgamma< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)tgamma< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_truncf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("trunc< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("trunc< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)trunc< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("abs< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("abs< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)abs< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("sqrt< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sqrt< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)sqrt< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("exp< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("exp< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)exp< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp2d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("exp2< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("exp2< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)exp2< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("log< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)log< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("log10< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log10< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)log10< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log2d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("log2< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log2< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)log2< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logbd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("logb< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("logb< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)logb< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("pow< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("pow< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pow< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)pow< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floord(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("floor< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("floor< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)floor< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("acos< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("acos< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)acos< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asind(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("asin< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("asin< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)asin< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atand(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("atan< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atan< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)atan< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("atan2< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atan2< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("atan2< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)atan2< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("cos< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cos< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)cos< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sind(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("sin< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sin< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)sin< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tand(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("tan< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tan< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)tan< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("cosh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cosh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)cosh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("sinh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sinh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)sinh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("tanh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tanh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)tanh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lgammad(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("lgamma< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lgamma< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)lgamma< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acoshd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("acosh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("acosh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)acosh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("asinh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("asinh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)asinh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("atanh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atanh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)atanh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cbrtd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("cbrt< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cbrt< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)cbrt< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceild(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("cbrt< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cbrt< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)cbrt< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copysignd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("copysign< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("copysign< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("copysign< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)copysign< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("erf< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("erf< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)erf< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfcd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("erfc< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("erfc< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)erfc< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expm1d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("expm1< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("expm1< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)expm1< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fdimd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("fdim< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fdim< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fdim< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)fdim< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmad(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp1 ;
  double temp2 ;
  double temp3 ;
  double result;
  
  SWIG_check_num_args("fma< f64 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fma< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fma< f64 >",2,"double const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("fma< f64 >",3,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  result = (double)fma< f64 >((double const &)*arg1,(double const &)*arg2,(double const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaxd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("fmax< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmax< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmax< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)fmax< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmind(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("fmin< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmin< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmin< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)fmin< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmodd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("fmod< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmod< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmod< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)fmod< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fpclassifyd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  int result;
  
  SWIG_check_num_args("fpclassify< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fpclassify< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (int)fpclassify< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hypotd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("hypot< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("hypot< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("hypot< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)hypot< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ilogbd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  int result;
  
  SWIG_check_num_args("ilogb< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ilogb< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (int)ilogb< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isfinited(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("isfinite< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isfinite< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isfinite< f64 >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("isgreater< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isgreater< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isgreater< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isgreater< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterequald(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("isgreaterequal< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isgreaterequal< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isgreaterequal< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isgreaterequal< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isinfd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("isinf< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isinf< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isinf< f64 >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("isless< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isless< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isless< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isless< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessequald(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("islessequal< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("islessequal< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("islessequal< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)islessequal< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnand(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("isnan< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isnan< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isnan< f64 >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnormald(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("isnormal< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isnormal< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isnormal< f64 >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isunorderedd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("isunordered< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isunordered< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isunordered< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isunordered< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldexpd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("ldexp< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ldexp< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ldexp< f64 >",2,"int");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)ldexp< f64 >((double const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llrintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("llrint< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("llrint< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)llrint< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llroundd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("llround< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("llround< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)llround< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("log1p< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log1p< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)log1p< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lrintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("lrint< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lrint< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)lrint< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lroundd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("lround< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lround< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)lround< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nand(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double result;
  
  SWIG_check_num_args("nan< f64 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nan< f64 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)nan< f64 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanfd(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double result;
  
  SWIG_check_num_args("nanf< f64 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nanf< f64 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)nanf< f64 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanld(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double result;
  
  SWIG_check_num_args("nanl< f64 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nanl< f64 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)nanl< f64 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nearbyintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("nearbyint< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nearbyint< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)nearbyint< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nextafterd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("nextafter< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nextafter< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nextafter< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)nextafter< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nexttowardd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("nexttoward< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nexttoward< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nexttoward< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)nexttoward< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_remainderd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("remainder< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("remainder< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("remainder< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)remainder< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("rint< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rint< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)rint< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("round< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("round< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)round< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalblnd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  long arg2 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("scalbln< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scalbln< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scalbln< f64 >",2,"long");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (long)lua_tonumber(L, 2);
  result = (double)scalbln< f64 >((double const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalbnd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("scalbn< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scalbn< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scalbn< f64 >",2,"int");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)scalbn< f64 >((double const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squared(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("square< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("square< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)square< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tgammad(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("tgamma< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tgamma< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)tgamma< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_truncd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("trunc< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("trunc< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)trunc< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feclearexcept(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("feclearexcept",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("feclearexcept",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)feclearexcept(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fegetexceptflag(lua_State* L) {
  int SWIG_arg = 0;
  fexcept_t *arg1 = (fexcept_t *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("fegetexceptflag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fegetexceptflag",1,"fexcept_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fegetexceptflag",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fexcept_t,0))){
    SWIG_fail_ptr("fegetexceptflag",1,SWIGTYPE_p_fexcept_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)fegetexceptflag(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feraiseexcept(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("feraiseexcept",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("feraiseexcept",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)feraiseexcept(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fesetexceptflag(lua_State* L) {
  int SWIG_arg = 0;
  fexcept_t *arg1 = (fexcept_t *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("fesetexceptflag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fesetexceptflag",1,"fexcept_t const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fesetexceptflag",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fexcept_t,0))){
    SWIG_fail_ptr("fesetexceptflag",1,SWIGTYPE_p_fexcept_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)fesetexceptflag((fexcept_t const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fetestexcept(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("fetestexcept",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fetestexcept",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)fetestexcept(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fegetround(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("fegetround",0,0)
  result = (int)fegetround();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fesetround(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("fesetround",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fesetround",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)fesetround(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fegetenv(lua_State* L) {
  int SWIG_arg = 0;
  fenv_t *arg1 = (fenv_t *) 0 ;
  int result;
  
  SWIG_check_num_args("fegetenv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fegetenv",1,"fenv_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fenv_t,0))){
    SWIG_fail_ptr("fegetenv",1,SWIGTYPE_p_fenv_t);
  }
  
  result = (int)fegetenv(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feholdexcept(lua_State* L) {
  int SWIG_arg = 0;
  fenv_t *arg1 = (fenv_t *) 0 ;
  int result;
  
  SWIG_check_num_args("feholdexcept",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("feholdexcept",1,"fenv_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fenv_t,0))){
    SWIG_fail_ptr("feholdexcept",1,SWIGTYPE_p_fenv_t);
  }
  
  result = (int)feholdexcept(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fesetenv(lua_State* L) {
  int SWIG_arg = 0;
  fenv_t *arg1 = (fenv_t *) 0 ;
  int result;
  
  SWIG_check_num_args("fesetenv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fesetenv",1,"fenv_t const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fenv_t,0))){
    SWIG_fail_ptr("fesetenv",1,SWIGTYPE_p_fenv_t);
  }
  
  result = (int)fesetenv((fenv_t const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feupdateenv(lua_State* L) {
  int SWIG_arg = 0;
  fenv_t *arg1 = (fenv_t *) 0 ;
  int result;
  
  SWIG_check_num_args("feupdateenv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("feupdateenv",1,"fenv_t const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fenv_t,0))){
    SWIG_fail_ptr("feupdateenv",1,SWIGTYPE_p_fenv_t);
  }
  
  result = (int)feupdateenv((fenv_t const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCreate_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t *arg1 = (cublasHandle_t *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCreate_v2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCreate_v2",1,"cublasHandle_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCreate_v2",1,SWIGTYPE_p_p_cublasContext);
  }
  
  result = (cublasStatus_t)cublasCreate_v2(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDestroy_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDestroy_v2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDestroy_v2",1,"cublasHandle_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDestroy_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  result = (cublasStatus_t)cublasDestroy_v2(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasGetVersion_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int *arg2 = (int *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasGetVersion_v2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasGetVersion_v2",1,"cublasHandle_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cublasGetVersion_v2",2,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasGetVersion_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasGetVersion_v2",2,SWIGTYPE_p_int);
  }
  
  result = (cublasStatus_t)cublasGetVersion_v2(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasGetProperty(lua_State* L) {
  int SWIG_arg = 0;
  libraryPropertyType arg1 ;
  int *arg2 = (int *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasGetProperty",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cublasGetProperty",1,"libraryPropertyType");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cublasGetProperty",2,"int *");
  arg1 = (libraryPropertyType)(int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasGetProperty",2,SWIGTYPE_p_int);
  }
  
  result = (cublasStatus_t)cublasGetProperty(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasGetCudartVersion(lua_State* L) {
  int SWIG_arg = 0;
  size_t result;
  
  SWIG_check_num_args("cublasGetCudartVersion",0,0)
  result = cublasGetCudartVersion();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSetWorkspace_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSetWorkspace_v2",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSetWorkspace_v2",1,"cublasHandle_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cublasSetWorkspace_v2",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasSetWorkspace_v2",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSetWorkspace_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"cublasSetWorkspace_v2");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (cublasStatus_t)cublasSetWorkspace_v2(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSetStream_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cudaStream_t arg2 ;
  cudaStream_t *argp2 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSetStream_v2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSetStream_v2",1,"cublasHandle_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cublasSetStream_v2",2,"cudaStream_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSetStream_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_cudaStream_t,0))){
    SWIG_fail_ptr("cublasSetStream_v2",2,SWIGTYPE_p_cudaStream_t);
  }
  arg2 = *argp2;
  
  result = (cublasStatus_t)cublasSetStream_v2(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasGetStream_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cudaStream_t *arg2 = (cudaStream_t *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasGetStream_v2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasGetStream_v2",1,"cublasHandle_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cublasGetStream_v2",2,"cudaStream_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasGetStream_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cudaStream_t,0))){
    SWIG_fail_ptr("cublasGetStream_v2",2,SWIGTYPE_p_cudaStream_t);
  }
  
  result = (cublasStatus_t)cublasGetStream_v2(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasGetPointerMode_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasPointerMode_t *arg2 = (cublasPointerMode_t *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasGetPointerMode_v2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasGetPointerMode_v2",1,"cublasHandle_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cublasGetPointerMode_v2",2,"cublasPointerMode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasGetPointerMode_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cublasPointerMode_t,0))){
    SWIG_fail_ptr("cublasGetPointerMode_v2",2,SWIGTYPE_p_cublasPointerMode_t);
  }
  
  result = (cublasStatus_t)cublasGetPointerMode_v2(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSetPointerMode_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasPointerMode_t arg2 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSetPointerMode_v2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSetPointerMode_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSetPointerMode_v2",2,"cublasPointerMode_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSetPointerMode_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasPointerMode_t)(int)lua_tonumber(L, 2);
  result = (cublasStatus_t)cublasSetPointerMode_v2(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasGetAtomicsMode(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasAtomicsMode_t *arg2 = (cublasAtomicsMode_t *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasGetAtomicsMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasGetAtomicsMode",1,"cublasHandle_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cublasGetAtomicsMode",2,"cublasAtomicsMode_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasGetAtomicsMode",1,SWIGTYPE_p_cublasContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cublasAtomicsMode_t,0))){
    SWIG_fail_ptr("cublasGetAtomicsMode",2,SWIGTYPE_p_cublasAtomicsMode_t);
  }
  
  result = (cublasStatus_t)cublasGetAtomicsMode(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSetAtomicsMode(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasAtomicsMode_t arg2 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSetAtomicsMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSetAtomicsMode",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSetAtomicsMode",2,"cublasAtomicsMode_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSetAtomicsMode",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasAtomicsMode_t)(int)lua_tonumber(L, 2);
  result = (cublasStatus_t)cublasSetAtomicsMode(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasGetMathMode(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasMath_t *arg2 = (cublasMath_t *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasGetMathMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasGetMathMode",1,"cublasHandle_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cublasGetMathMode",2,"cublasMath_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasGetMathMode",1,SWIGTYPE_p_cublasContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cublasMath_t,0))){
    SWIG_fail_ptr("cublasGetMathMode",2,SWIGTYPE_p_cublasMath_t);
  }
  
  result = (cublasStatus_t)cublasGetMathMode(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSetMathMode(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasMath_t arg2 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSetMathMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSetMathMode",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSetMathMode",2,"cublasMath_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSetMathMode",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasMath_t)(int)lua_tonumber(L, 2);
  result = (cublasStatus_t)cublasSetMathMode(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasGetSmCountTarget(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int *arg2 = (int *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasGetSmCountTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasGetSmCountTarget",1,"cublasHandle_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cublasGetSmCountTarget",2,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasGetSmCountTarget",1,SWIGTYPE_p_cublasContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasGetSmCountTarget",2,SWIGTYPE_p_int);
  }
  
  result = (cublasStatus_t)cublasGetSmCountTarget(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSetSmCountTarget(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSetSmCountTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSetSmCountTarget",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSetSmCountTarget",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSetSmCountTarget",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (cublasStatus_t)cublasSetSmCountTarget(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasGetStatusName(lua_State* L) {
  int SWIG_arg = 0;
  cublasStatus_t arg1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("cublasGetStatusName",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cublasGetStatusName",1,"cublasStatus_t");
  arg1 = (cublasStatus_t)(int)lua_tonumber(L, 1);
  result = (char *)cublasGetStatusName(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasGetStatusString(lua_State* L) {
  int SWIG_arg = 0;
  cublasStatus_t arg1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("cublasGetStatusString",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cublasGetStatusString",1,"cublasStatus_t");
  arg1 = (cublasStatus_t)(int)lua_tonumber(L, 1);
  result = (char *)cublasGetStatusString(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasLoggerConfigure(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasLoggerConfigure",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cublasLoggerConfigure",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasLoggerConfigure",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasLoggerConfigure",3,"int");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("cublasLoggerConfigure",4,"char const *");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  result = (cublasStatus_t)cublasLoggerConfigure(arg1,arg2,arg3,(char const *)arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSetLoggerCallback(lua_State* L) {
  int SWIG_arg = 0;
  cublasLogCallback arg1 = (cublasLogCallback) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSetLoggerCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSetLoggerCallback",1,"cublasLogCallback");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_f_p_q_const__char__void,0))){
    SWIG_fail_ptr("cublasSetLoggerCallback",1,SWIGTYPE_p_f_p_q_const__char__void);
  }
  
  result = (cublasStatus_t)cublasSetLoggerCallback(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasGetLoggerCallback(lua_State* L) {
  int SWIG_arg = 0;
  cublasLogCallback *arg1 = (cublasLogCallback *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasGetLoggerCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasGetLoggerCallback",1,"cublasLogCallback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_f_p_q_const__char__void,0))){
    SWIG_fail_ptr("cublasGetLoggerCallback",1,SWIGTYPE_p_p_f_p_q_const__char__void);
  }
  
  result = (cublasStatus_t)cublasGetLoggerCallback(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSetVector(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  int arg6 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSetVector",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cublasSetVector",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSetVector",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasSetVector",3,"void const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasSetVector",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasSetVector",5,"void *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasSetVector",6,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"cublasSetVector");
  arg4 = (int)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"cublasSetVector");
  arg6 = (int)lua_tonumber(L, 6);
  result = (cublasStatus_t)cublasSetVector(arg1,arg2,(void const *)arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasGetVector(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  int arg6 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasGetVector",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cublasGetVector",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasGetVector",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasGetVector",3,"void const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasGetVector",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasGetVector",5,"void *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasGetVector",6,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"cublasGetVector");
  arg4 = (int)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"cublasGetVector");
  arg6 = (int)lua_tonumber(L, 6);
  result = (cublasStatus_t)cublasGetVector(arg1,arg2,(void const *)arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSetMatrix(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  void *arg6 = (void *) 0 ;
  int arg7 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSetMatrix",7,7)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cublasSetMatrix",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSetMatrix",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasSetMatrix",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasSetMatrix",4,"void const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasSetMatrix",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasSetMatrix",6,"void *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasSetMatrix",7,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"cublasSetMatrix");
  arg5 = (int)lua_tonumber(L, 5);
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"cublasSetMatrix");
  arg7 = (int)lua_tonumber(L, 7);
  result = (cublasStatus_t)cublasSetMatrix(arg1,arg2,arg3,(void const *)arg4,arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasGetMatrix(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  void *arg6 = (void *) 0 ;
  int arg7 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasGetMatrix",7,7)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cublasGetMatrix",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasGetMatrix",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasGetMatrix",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasGetMatrix",4,"void const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasGetMatrix",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasGetMatrix",6,"void *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasGetMatrix",7,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"cublasGetMatrix");
  arg5 = (int)lua_tonumber(L, 5);
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"cublasGetMatrix");
  arg7 = (int)lua_tonumber(L, 7);
  result = (cublasStatus_t)cublasGetMatrix(arg1,arg2,arg3,(void const *)arg4,arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSetVectorAsync(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  int arg6 ;
  cudaStream_t arg7 ;
  cudaStream_t *argp7 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSetVectorAsync",7,7)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cublasSetVectorAsync",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSetVectorAsync",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasSetVectorAsync",3,"void const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasSetVectorAsync",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasSetVectorAsync",5,"void *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasSetVectorAsync",6,"int");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("cublasSetVectorAsync",7,"cudaStream_t");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"cublasSetVectorAsync");
  arg4 = (int)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"cublasSetVectorAsync");
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_cudaStream_t,0))){
    SWIG_fail_ptr("cublasSetVectorAsync",7,SWIGTYPE_p_cudaStream_t);
  }
  arg7 = *argp7;
  
  result = (cublasStatus_t)cublasSetVectorAsync(arg1,arg2,(void const *)arg3,arg4,arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasGetVectorAsync(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  int arg6 ;
  cudaStream_t arg7 ;
  cudaStream_t *argp7 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasGetVectorAsync",7,7)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cublasGetVectorAsync",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasGetVectorAsync",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasGetVectorAsync",3,"void const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasGetVectorAsync",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasGetVectorAsync",5,"void *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasGetVectorAsync",6,"int");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("cublasGetVectorAsync",7,"cudaStream_t");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"cublasGetVectorAsync");
  arg4 = (int)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"cublasGetVectorAsync");
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_cudaStream_t,0))){
    SWIG_fail_ptr("cublasGetVectorAsync",7,SWIGTYPE_p_cudaStream_t);
  }
  arg7 = *argp7;
  
  result = (cublasStatus_t)cublasGetVectorAsync(arg1,arg2,(void const *)arg3,arg4,arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSetMatrixAsync(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  void *arg6 = (void *) 0 ;
  int arg7 ;
  cudaStream_t arg8 ;
  cudaStream_t *argp8 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSetMatrixAsync",8,8)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cublasSetMatrixAsync",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSetMatrixAsync",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasSetMatrixAsync",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasSetMatrixAsync",4,"void const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasSetMatrixAsync",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasSetMatrixAsync",6,"void *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasSetMatrixAsync",7,"int");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("cublasSetMatrixAsync",8,"cudaStream_t");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"cublasSetMatrixAsync");
  arg5 = (int)lua_tonumber(L, 5);
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"cublasSetMatrixAsync");
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_cudaStream_t,0))){
    SWIG_fail_ptr("cublasSetMatrixAsync",8,SWIGTYPE_p_cudaStream_t);
  }
  arg8 = *argp8;
  
  result = (cublasStatus_t)cublasSetMatrixAsync(arg1,arg2,arg3,(void const *)arg4,arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasXerbla(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("cublasXerbla",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("cublasXerbla",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasXerbla",2,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  cublasXerbla((char const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasNrm2Ex(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  cudaDataType arg4 ;
  int arg5 ;
  void *arg6 = (void *) 0 ;
  cudaDataType arg7 ;
  cudaDataType arg8 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasNrm2Ex",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasNrm2Ex",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasNrm2Ex",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasNrm2Ex",3,"void const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasNrm2Ex",4,"cudaDataType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasNrm2Ex",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasNrm2Ex",6,"void *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasNrm2Ex",7,"cudaDataType");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasNrm2Ex",8,"cudaDataType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasNrm2Ex",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"cublasNrm2Ex");
  arg4 = (cudaDataType)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"cublasNrm2Ex");
  arg7 = (cudaDataType)(int)lua_tonumber(L, 7);
  arg8 = (cudaDataType)(int)lua_tonumber(L, 8);
  result = (cublasStatus_t)cublasNrm2Ex(arg1,arg2,(void const *)arg3,arg4,arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSnrm2_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  int arg4 ;
  float *arg5 = (float *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSnrm2_v2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSnrm2_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSnrm2_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasSnrm2_v2",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasSnrm2_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasSnrm2_v2",5,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSnrm2_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSnrm2_v2",3,SWIGTYPE_p_float);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSnrm2_v2",5,SWIGTYPE_p_float);
  }
  
  result = (cublasStatus_t)cublasSnrm2_v2(arg1,arg2,(float const *)arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDnrm2_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDnrm2_v2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDnrm2_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDnrm2_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasDnrm2_v2",3,"double const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDnrm2_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasDnrm2_v2",5,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDnrm2_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDnrm2_v2",3,SWIGTYPE_p_double);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDnrm2_v2",5,SWIGTYPE_p_double);
  }
  
  result = (cublasStatus_t)cublasDnrm2_v2(arg1,arg2,(double const *)arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasScnrm2_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  cuComplex *arg3 = (cuComplex *) 0 ;
  int arg4 ;
  float *arg5 = (float *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasScnrm2_v2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasScnrm2_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasScnrm2_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasScnrm2_v2",3,"cuComplex const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasScnrm2_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasScnrm2_v2",5,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasScnrm2_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasScnrm2_v2",3,SWIGTYPE_p_cuComplex);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasScnrm2_v2",5,SWIGTYPE_p_float);
  }
  
  result = (cublasStatus_t)cublasScnrm2_v2(arg1,arg2,(cuComplex const *)arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDznrm2_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  cuDoubleComplex *arg3 = (cuDoubleComplex *) 0 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDznrm2_v2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDznrm2_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDznrm2_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasDznrm2_v2",3,"cuDoubleComplex const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDznrm2_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasDznrm2_v2",5,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDznrm2_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasDznrm2_v2",3,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDznrm2_v2",5,SWIGTYPE_p_double);
  }
  
  result = (cublasStatus_t)cublasDznrm2_v2(arg1,arg2,(cuDoubleComplex const *)arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDotEx(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  cudaDataType arg4 ;
  int arg5 ;
  void *arg6 = (void *) 0 ;
  cudaDataType arg7 ;
  int arg8 ;
  void *arg9 = (void *) 0 ;
  cudaDataType arg10 ;
  cudaDataType arg11 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDotEx",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDotEx",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDotEx",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasDotEx",3,"void const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDotEx",4,"cudaDataType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasDotEx",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasDotEx",6,"void const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasDotEx",7,"cudaDataType");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasDotEx",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasDotEx",9,"void *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasDotEx",10,"cudaDataType");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasDotEx",11,"cudaDataType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDotEx",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"cublasDotEx");
  arg4 = (cudaDataType)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"cublasDotEx");
  arg7 = (cudaDataType)(int)lua_tonumber(L, 7);
  arg8 = (int)lua_tonumber(L, 8);
  arg9=(void *)SWIG_MustGetPtr(L,9,0,0,9,"cublasDotEx");
  arg10 = (cudaDataType)(int)lua_tonumber(L, 10);
  arg11 = (cudaDataType)(int)lua_tonumber(L, 11);
  result = (cublasStatus_t)cublasDotEx(arg1,arg2,(void const *)arg3,arg4,arg5,(void const *)arg6,arg7,arg8,arg9,arg10,arg11);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDotcEx(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  cudaDataType arg4 ;
  int arg5 ;
  void *arg6 = (void *) 0 ;
  cudaDataType arg7 ;
  int arg8 ;
  void *arg9 = (void *) 0 ;
  cudaDataType arg10 ;
  cudaDataType arg11 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDotcEx",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDotcEx",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDotcEx",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasDotcEx",3,"void const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDotcEx",4,"cudaDataType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasDotcEx",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasDotcEx",6,"void const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasDotcEx",7,"cudaDataType");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasDotcEx",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasDotcEx",9,"void *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasDotcEx",10,"cudaDataType");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasDotcEx",11,"cudaDataType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDotcEx",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"cublasDotcEx");
  arg4 = (cudaDataType)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"cublasDotcEx");
  arg7 = (cudaDataType)(int)lua_tonumber(L, 7);
  arg8 = (int)lua_tonumber(L, 8);
  arg9=(void *)SWIG_MustGetPtr(L,9,0,0,9,"cublasDotcEx");
  arg10 = (cudaDataType)(int)lua_tonumber(L, 10);
  arg11 = (cudaDataType)(int)lua_tonumber(L, 11);
  result = (cublasStatus_t)cublasDotcEx(arg1,arg2,(void const *)arg3,arg4,arg5,(void const *)arg6,arg7,arg8,arg9,arg10,arg11);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSdot_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  int arg4 ;
  float *arg5 = (float *) 0 ;
  int arg6 ;
  float *arg7 = (float *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSdot_v2",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSdot_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSdot_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasSdot_v2",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasSdot_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasSdot_v2",5,"float const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasSdot_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasSdot_v2",7,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSdot_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSdot_v2",3,SWIGTYPE_p_float);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSdot_v2",5,SWIGTYPE_p_float);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSdot_v2",7,SWIGTYPE_p_float);
  }
  
  result = (cublasStatus_t)cublasSdot_v2(arg1,arg2,(float const *)arg3,arg4,(float const *)arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDdot_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  double *arg7 = (double *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDdot_v2",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDdot_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDdot_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasDdot_v2",3,"double const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDdot_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasDdot_v2",5,"double const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasDdot_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasDdot_v2",7,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDdot_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDdot_v2",3,SWIGTYPE_p_double);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDdot_v2",5,SWIGTYPE_p_double);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDdot_v2",7,SWIGTYPE_p_double);
  }
  
  result = (cublasStatus_t)cublasDdot_v2(arg1,arg2,(double const *)arg3,arg4,(double const *)arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCdotu_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  cuComplex *arg3 = (cuComplex *) 0 ;
  int arg4 ;
  cuComplex *arg5 = (cuComplex *) 0 ;
  int arg6 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCdotu_v2",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCdotu_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCdotu_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasCdotu_v2",3,"cuComplex const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCdotu_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasCdotu_v2",5,"cuComplex const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasCdotu_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCdotu_v2",7,"cuComplex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCdotu_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCdotu_v2",3,SWIGTYPE_p_cuComplex);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCdotu_v2",5,SWIGTYPE_p_cuComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCdotu_v2",7,SWIGTYPE_p_cuComplex);
  }
  
  result = (cublasStatus_t)cublasCdotu_v2(arg1,arg2,(cuComplex const *)arg3,arg4,(cuComplex const *)arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCdotc_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  cuComplex *arg3 = (cuComplex *) 0 ;
  int arg4 ;
  cuComplex *arg5 = (cuComplex *) 0 ;
  int arg6 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCdotc_v2",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCdotc_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCdotc_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasCdotc_v2",3,"cuComplex const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCdotc_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasCdotc_v2",5,"cuComplex const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasCdotc_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCdotc_v2",7,"cuComplex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCdotc_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCdotc_v2",3,SWIGTYPE_p_cuComplex);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCdotc_v2",5,SWIGTYPE_p_cuComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCdotc_v2",7,SWIGTYPE_p_cuComplex);
  }
  
  result = (cublasStatus_t)cublasCdotc_v2(arg1,arg2,(cuComplex const *)arg3,arg4,(cuComplex const *)arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZdotu_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  cuDoubleComplex *arg3 = (cuDoubleComplex *) 0 ;
  int arg4 ;
  cuDoubleComplex *arg5 = (cuDoubleComplex *) 0 ;
  int arg6 ;
  cuDoubleComplex *arg7 = (cuDoubleComplex *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZdotu_v2",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZdotu_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZdotu_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasZdotu_v2",3,"cuDoubleComplex const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZdotu_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasZdotu_v2",5,"cuDoubleComplex const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasZdotu_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZdotu_v2",7,"cuDoubleComplex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZdotu_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZdotu_v2",3,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZdotu_v2",5,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZdotu_v2",7,SWIGTYPE_p_cuDoubleComplex);
  }
  
  result = (cublasStatus_t)cublasZdotu_v2(arg1,arg2,(cuDoubleComplex const *)arg3,arg4,(cuDoubleComplex const *)arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZdotc_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  cuDoubleComplex *arg3 = (cuDoubleComplex *) 0 ;
  int arg4 ;
  cuDoubleComplex *arg5 = (cuDoubleComplex *) 0 ;
  int arg6 ;
  cuDoubleComplex *arg7 = (cuDoubleComplex *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZdotc_v2",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZdotc_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZdotc_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasZdotc_v2",3,"cuDoubleComplex const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZdotc_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasZdotc_v2",5,"cuDoubleComplex const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasZdotc_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZdotc_v2",7,"cuDoubleComplex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZdotc_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZdotc_v2",3,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZdotc_v2",5,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZdotc_v2",7,SWIGTYPE_p_cuDoubleComplex);
  }
  
  result = (cublasStatus_t)cublasZdotc_v2(arg1,arg2,(cuDoubleComplex const *)arg3,arg4,(cuDoubleComplex const *)arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasScalEx(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  cudaDataType arg4 ;
  void *arg5 = (void *) 0 ;
  cudaDataType arg6 ;
  int arg7 ;
  cudaDataType arg8 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasScalEx",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasScalEx",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasScalEx",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasScalEx",3,"void const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasScalEx",4,"cudaDataType");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasScalEx",5,"void *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasScalEx",6,"cudaDataType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasScalEx",7,"int");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasScalEx",8,"cudaDataType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasScalEx",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"cublasScalEx");
  arg4 = (cudaDataType)(int)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"cublasScalEx");
  arg6 = (cudaDataType)(int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  arg8 = (cudaDataType)(int)lua_tonumber(L, 8);
  result = (cublasStatus_t)cublasScalEx(arg1,arg2,(void const *)arg3,arg4,arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSscal_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int arg5 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSscal_v2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSscal_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSscal_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasSscal_v2",3,"float const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasSscal_v2",4,"float *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasSscal_v2",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSscal_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSscal_v2",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSscal_v2",4,SWIGTYPE_p_float);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  result = (cublasStatus_t)cublasSscal_v2(arg1,arg2,(float const *)arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDscal_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDscal_v2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDscal_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDscal_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasDscal_v2",3,"double const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasDscal_v2",4,"double *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasDscal_v2",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDscal_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDscal_v2",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDscal_v2",4,SWIGTYPE_p_double);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  result = (cublasStatus_t)cublasDscal_v2(arg1,arg2,(double const *)arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCscal_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  cuComplex *arg3 = (cuComplex *) 0 ;
  cuComplex *arg4 = (cuComplex *) 0 ;
  int arg5 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCscal_v2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCscal_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCscal_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasCscal_v2",3,"cuComplex const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasCscal_v2",4,"cuComplex *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCscal_v2",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCscal_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCscal_v2",3,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCscal_v2",4,SWIGTYPE_p_cuComplex);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  result = (cublasStatus_t)cublasCscal_v2(arg1,arg2,(cuComplex const *)arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCsscal_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  cuComplex *arg4 = (cuComplex *) 0 ;
  int arg5 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCsscal_v2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCsscal_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCsscal_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasCsscal_v2",3,"float const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasCsscal_v2",4,"cuComplex *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCsscal_v2",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCsscal_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasCsscal_v2",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsscal_v2",4,SWIGTYPE_p_cuComplex);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  result = (cublasStatus_t)cublasCsscal_v2(arg1,arg2,(float const *)arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZscal_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  cuDoubleComplex *arg3 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg4 = (cuDoubleComplex *) 0 ;
  int arg5 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZscal_v2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZscal_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZscal_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasZscal_v2",3,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasZscal_v2",4,"cuDoubleComplex *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasZscal_v2",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZscal_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZscal_v2",3,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZscal_v2",4,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  result = (cublasStatus_t)cublasZscal_v2(arg1,arg2,(cuDoubleComplex const *)arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZdscal_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  cuDoubleComplex *arg4 = (cuDoubleComplex *) 0 ;
  int arg5 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZdscal_v2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZdscal_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZdscal_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasZdscal_v2",3,"double const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasZdscal_v2",4,"cuDoubleComplex *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasZdscal_v2",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZdscal_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasZdscal_v2",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZdscal_v2",4,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  result = (cublasStatus_t)cublasZdscal_v2(arg1,arg2,(double const *)arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasAxpyEx(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  cudaDataType arg4 ;
  void *arg5 = (void *) 0 ;
  cudaDataType arg6 ;
  int arg7 ;
  void *arg8 = (void *) 0 ;
  cudaDataType arg9 ;
  int arg10 ;
  cudaDataType arg11 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasAxpyEx",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasAxpyEx",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasAxpyEx",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasAxpyEx",3,"void const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasAxpyEx",4,"cudaDataType");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasAxpyEx",5,"void const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasAxpyEx",6,"cudaDataType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasAxpyEx",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasAxpyEx",8,"void *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasAxpyEx",9,"cudaDataType");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasAxpyEx",10,"int");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasAxpyEx",11,"cudaDataType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasAxpyEx",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"cublasAxpyEx");
  arg4 = (cudaDataType)(int)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"cublasAxpyEx");
  arg6 = (cudaDataType)(int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  arg8=(void *)SWIG_MustGetPtr(L,8,0,0,8,"cublasAxpyEx");
  arg9 = (cudaDataType)(int)lua_tonumber(L, 9);
  arg10 = (int)lua_tonumber(L, 10);
  arg11 = (cudaDataType)(int)lua_tonumber(L, 11);
  result = (cublasStatus_t)cublasAxpyEx(arg1,arg2,(void const *)arg3,arg4,(void const *)arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSaxpy_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  int arg5 ;
  float *arg6 = (float *) 0 ;
  int arg7 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSaxpy_v2",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSaxpy_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSaxpy_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasSaxpy_v2",3,"float const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasSaxpy_v2",4,"float const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasSaxpy_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasSaxpy_v2",6,"float *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasSaxpy_v2",7,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSaxpy_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSaxpy_v2",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSaxpy_v2",4,SWIGTYPE_p_float);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSaxpy_v2",6,SWIGTYPE_p_float);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  result = (cublasStatus_t)cublasSaxpy_v2(arg1,arg2,(float const *)arg3,(float const *)arg4,arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDaxpy_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  int arg7 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDaxpy_v2",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDaxpy_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDaxpy_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasDaxpy_v2",3,"double const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasDaxpy_v2",4,"double const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasDaxpy_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasDaxpy_v2",6,"double *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasDaxpy_v2",7,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDaxpy_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDaxpy_v2",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDaxpy_v2",4,SWIGTYPE_p_double);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDaxpy_v2",6,SWIGTYPE_p_double);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  result = (cublasStatus_t)cublasDaxpy_v2(arg1,arg2,(double const *)arg3,(double const *)arg4,arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCaxpy_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  cuComplex *arg3 = (cuComplex *) 0 ;
  cuComplex *arg4 = (cuComplex *) 0 ;
  int arg5 ;
  cuComplex *arg6 = (cuComplex *) 0 ;
  int arg7 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCaxpy_v2",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCaxpy_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCaxpy_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasCaxpy_v2",3,"cuComplex const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasCaxpy_v2",4,"cuComplex const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCaxpy_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasCaxpy_v2",6,"cuComplex *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasCaxpy_v2",7,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCaxpy_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCaxpy_v2",3,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCaxpy_v2",4,SWIGTYPE_p_cuComplex);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCaxpy_v2",6,SWIGTYPE_p_cuComplex);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  result = (cublasStatus_t)cublasCaxpy_v2(arg1,arg2,(cuComplex const *)arg3,(cuComplex const *)arg4,arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZaxpy_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  cuDoubleComplex *arg3 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg4 = (cuDoubleComplex *) 0 ;
  int arg5 ;
  cuDoubleComplex *arg6 = (cuDoubleComplex *) 0 ;
  int arg7 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZaxpy_v2",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZaxpy_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZaxpy_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasZaxpy_v2",3,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasZaxpy_v2",4,"cuDoubleComplex const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasZaxpy_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasZaxpy_v2",6,"cuDoubleComplex *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasZaxpy_v2",7,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZaxpy_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZaxpy_v2",3,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZaxpy_v2",4,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZaxpy_v2",6,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  result = (cublasStatus_t)cublasZaxpy_v2(arg1,arg2,(cuDoubleComplex const *)arg3,(cuDoubleComplex const *)arg4,arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCopyEx(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  cudaDataType arg4 ;
  int arg5 ;
  void *arg6 = (void *) 0 ;
  cudaDataType arg7 ;
  int arg8 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCopyEx",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCopyEx",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCopyEx",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasCopyEx",3,"void const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCopyEx",4,"cudaDataType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCopyEx",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasCopyEx",6,"void *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasCopyEx",7,"cudaDataType");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasCopyEx",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCopyEx",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"cublasCopyEx");
  arg4 = (cudaDataType)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"cublasCopyEx");
  arg7 = (cudaDataType)(int)lua_tonumber(L, 7);
  arg8 = (int)lua_tonumber(L, 8);
  result = (cublasStatus_t)cublasCopyEx(arg1,arg2,(void const *)arg3,arg4,arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasScopy_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  int arg4 ;
  float *arg5 = (float *) 0 ;
  int arg6 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasScopy_v2",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasScopy_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasScopy_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasScopy_v2",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasScopy_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasScopy_v2",5,"float *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasScopy_v2",6,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasScopy_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasScopy_v2",3,SWIGTYPE_p_float);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasScopy_v2",5,SWIGTYPE_p_float);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  result = (cublasStatus_t)cublasScopy_v2(arg1,arg2,(float const *)arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDcopy_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDcopy_v2",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDcopy_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDcopy_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasDcopy_v2",3,"double const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDcopy_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasDcopy_v2",5,"double *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasDcopy_v2",6,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDcopy_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDcopy_v2",3,SWIGTYPE_p_double);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDcopy_v2",5,SWIGTYPE_p_double);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  result = (cublasStatus_t)cublasDcopy_v2(arg1,arg2,(double const *)arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCcopy_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  cuComplex *arg3 = (cuComplex *) 0 ;
  int arg4 ;
  cuComplex *arg5 = (cuComplex *) 0 ;
  int arg6 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCcopy_v2",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCcopy_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCcopy_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasCcopy_v2",3,"cuComplex const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCcopy_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasCcopy_v2",5,"cuComplex *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasCcopy_v2",6,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCcopy_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCcopy_v2",3,SWIGTYPE_p_cuComplex);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCcopy_v2",5,SWIGTYPE_p_cuComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  result = (cublasStatus_t)cublasCcopy_v2(arg1,arg2,(cuComplex const *)arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZcopy_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  cuDoubleComplex *arg3 = (cuDoubleComplex *) 0 ;
  int arg4 ;
  cuDoubleComplex *arg5 = (cuDoubleComplex *) 0 ;
  int arg6 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZcopy_v2",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZcopy_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZcopy_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasZcopy_v2",3,"cuDoubleComplex const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZcopy_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasZcopy_v2",5,"cuDoubleComplex *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasZcopy_v2",6,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZcopy_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZcopy_v2",3,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZcopy_v2",5,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  result = (cublasStatus_t)cublasZcopy_v2(arg1,arg2,(cuDoubleComplex const *)arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSswap_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  int arg4 ;
  float *arg5 = (float *) 0 ;
  int arg6 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSswap_v2",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSswap_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSswap_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasSswap_v2",3,"float *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasSswap_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasSswap_v2",5,"float *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasSswap_v2",6,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSswap_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSswap_v2",3,SWIGTYPE_p_float);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSswap_v2",5,SWIGTYPE_p_float);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  result = (cublasStatus_t)cublasSswap_v2(arg1,arg2,arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDswap_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDswap_v2",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDswap_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDswap_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasDswap_v2",3,"double *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDswap_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasDswap_v2",5,"double *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasDswap_v2",6,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDswap_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDswap_v2",3,SWIGTYPE_p_double);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDswap_v2",5,SWIGTYPE_p_double);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  result = (cublasStatus_t)cublasDswap_v2(arg1,arg2,arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCswap_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  cuComplex *arg3 = (cuComplex *) 0 ;
  int arg4 ;
  cuComplex *arg5 = (cuComplex *) 0 ;
  int arg6 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCswap_v2",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCswap_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCswap_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasCswap_v2",3,"cuComplex *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCswap_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasCswap_v2",5,"cuComplex *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasCswap_v2",6,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCswap_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCswap_v2",3,SWIGTYPE_p_cuComplex);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCswap_v2",5,SWIGTYPE_p_cuComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  result = (cublasStatus_t)cublasCswap_v2(arg1,arg2,arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZswap_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  cuDoubleComplex *arg3 = (cuDoubleComplex *) 0 ;
  int arg4 ;
  cuDoubleComplex *arg5 = (cuDoubleComplex *) 0 ;
  int arg6 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZswap_v2",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZswap_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZswap_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasZswap_v2",3,"cuDoubleComplex *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZswap_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasZswap_v2",5,"cuDoubleComplex *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasZswap_v2",6,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZswap_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZswap_v2",3,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZswap_v2",5,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  result = (cublasStatus_t)cublasZswap_v2(arg1,arg2,arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSwapEx(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  cudaDataType arg4 ;
  int arg5 ;
  void *arg6 = (void *) 0 ;
  cudaDataType arg7 ;
  int arg8 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSwapEx",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSwapEx",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSwapEx",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasSwapEx",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasSwapEx",4,"cudaDataType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasSwapEx",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasSwapEx",6,"void *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasSwapEx",7,"cudaDataType");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasSwapEx",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSwapEx",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"cublasSwapEx");
  arg4 = (cudaDataType)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"cublasSwapEx");
  arg7 = (cudaDataType)(int)lua_tonumber(L, 7);
  arg8 = (int)lua_tonumber(L, 8);
  result = (cublasStatus_t)cublasSwapEx(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasIsamax_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasIsamax_v2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasIsamax_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasIsamax_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasIsamax_v2",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasIsamax_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasIsamax_v2",5,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasIsamax_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasIsamax_v2",3,SWIGTYPE_p_float);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasIsamax_v2",5,SWIGTYPE_p_int);
  }
  
  result = (cublasStatus_t)cublasIsamax_v2(arg1,arg2,(float const *)arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasIdamax_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasIdamax_v2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasIdamax_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasIdamax_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasIdamax_v2",3,"double const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasIdamax_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasIdamax_v2",5,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasIdamax_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasIdamax_v2",3,SWIGTYPE_p_double);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasIdamax_v2",5,SWIGTYPE_p_int);
  }
  
  result = (cublasStatus_t)cublasIdamax_v2(arg1,arg2,(double const *)arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasIcamax_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  cuComplex *arg3 = (cuComplex *) 0 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasIcamax_v2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasIcamax_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasIcamax_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasIcamax_v2",3,"cuComplex const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasIcamax_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasIcamax_v2",5,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasIcamax_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasIcamax_v2",3,SWIGTYPE_p_cuComplex);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasIcamax_v2",5,SWIGTYPE_p_int);
  }
  
  result = (cublasStatus_t)cublasIcamax_v2(arg1,arg2,(cuComplex const *)arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasIzamax_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  cuDoubleComplex *arg3 = (cuDoubleComplex *) 0 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasIzamax_v2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasIzamax_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasIzamax_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasIzamax_v2",3,"cuDoubleComplex const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasIzamax_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasIzamax_v2",5,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasIzamax_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasIzamax_v2",3,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasIzamax_v2",5,SWIGTYPE_p_int);
  }
  
  result = (cublasStatus_t)cublasIzamax_v2(arg1,arg2,(cuDoubleComplex const *)arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasIamaxEx(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  cudaDataType arg4 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasIamaxEx",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasIamaxEx",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasIamaxEx",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasIamaxEx",3,"void const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasIamaxEx",4,"cudaDataType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasIamaxEx",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasIamaxEx",6,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasIamaxEx",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"cublasIamaxEx");
  arg4 = (cudaDataType)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasIamaxEx",6,SWIGTYPE_p_int);
  }
  
  result = (cublasStatus_t)cublasIamaxEx(arg1,arg2,(void const *)arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasIsamin_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasIsamin_v2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasIsamin_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasIsamin_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasIsamin_v2",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasIsamin_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasIsamin_v2",5,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasIsamin_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasIsamin_v2",3,SWIGTYPE_p_float);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasIsamin_v2",5,SWIGTYPE_p_int);
  }
  
  result = (cublasStatus_t)cublasIsamin_v2(arg1,arg2,(float const *)arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasIdamin_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasIdamin_v2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasIdamin_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasIdamin_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasIdamin_v2",3,"double const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasIdamin_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasIdamin_v2",5,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasIdamin_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasIdamin_v2",3,SWIGTYPE_p_double);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasIdamin_v2",5,SWIGTYPE_p_int);
  }
  
  result = (cublasStatus_t)cublasIdamin_v2(arg1,arg2,(double const *)arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasIcamin_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  cuComplex *arg3 = (cuComplex *) 0 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasIcamin_v2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasIcamin_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasIcamin_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasIcamin_v2",3,"cuComplex const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasIcamin_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasIcamin_v2",5,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasIcamin_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasIcamin_v2",3,SWIGTYPE_p_cuComplex);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasIcamin_v2",5,SWIGTYPE_p_int);
  }
  
  result = (cublasStatus_t)cublasIcamin_v2(arg1,arg2,(cuComplex const *)arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasIzamin_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  cuDoubleComplex *arg3 = (cuDoubleComplex *) 0 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasIzamin_v2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasIzamin_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasIzamin_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasIzamin_v2",3,"cuDoubleComplex const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasIzamin_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasIzamin_v2",5,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasIzamin_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasIzamin_v2",3,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasIzamin_v2",5,SWIGTYPE_p_int);
  }
  
  result = (cublasStatus_t)cublasIzamin_v2(arg1,arg2,(cuDoubleComplex const *)arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasIaminEx(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  cudaDataType arg4 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasIaminEx",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasIaminEx",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasIaminEx",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasIaminEx",3,"void const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasIaminEx",4,"cudaDataType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasIaminEx",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasIaminEx",6,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasIaminEx",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"cublasIaminEx");
  arg4 = (cudaDataType)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasIaminEx",6,SWIGTYPE_p_int);
  }
  
  result = (cublasStatus_t)cublasIaminEx(arg1,arg2,(void const *)arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasAsumEx(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  cudaDataType arg4 ;
  int arg5 ;
  void *arg6 = (void *) 0 ;
  cudaDataType arg7 ;
  cudaDataType arg8 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasAsumEx",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasAsumEx",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasAsumEx",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasAsumEx",3,"void const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasAsumEx",4,"cudaDataType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasAsumEx",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasAsumEx",6,"void *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasAsumEx",7,"cudaDataType");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasAsumEx",8,"cudaDataType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasAsumEx",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"cublasAsumEx");
  arg4 = (cudaDataType)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"cublasAsumEx");
  arg7 = (cudaDataType)(int)lua_tonumber(L, 7);
  arg8 = (cudaDataType)(int)lua_tonumber(L, 8);
  result = (cublasStatus_t)cublasAsumEx(arg1,arg2,(void const *)arg3,arg4,arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSasum_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  int arg4 ;
  float *arg5 = (float *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSasum_v2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSasum_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSasum_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasSasum_v2",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasSasum_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasSasum_v2",5,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSasum_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSasum_v2",3,SWIGTYPE_p_float);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSasum_v2",5,SWIGTYPE_p_float);
  }
  
  result = (cublasStatus_t)cublasSasum_v2(arg1,arg2,(float const *)arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDasum_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDasum_v2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDasum_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDasum_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasDasum_v2",3,"double const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDasum_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasDasum_v2",5,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDasum_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDasum_v2",3,SWIGTYPE_p_double);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDasum_v2",5,SWIGTYPE_p_double);
  }
  
  result = (cublasStatus_t)cublasDasum_v2(arg1,arg2,(double const *)arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasScasum_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  cuComplex *arg3 = (cuComplex *) 0 ;
  int arg4 ;
  float *arg5 = (float *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasScasum_v2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasScasum_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasScasum_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasScasum_v2",3,"cuComplex const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasScasum_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasScasum_v2",5,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasScasum_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasScasum_v2",3,SWIGTYPE_p_cuComplex);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasScasum_v2",5,SWIGTYPE_p_float);
  }
  
  result = (cublasStatus_t)cublasScasum_v2(arg1,arg2,(cuComplex const *)arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDzasum_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  cuDoubleComplex *arg3 = (cuDoubleComplex *) 0 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDzasum_v2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDzasum_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDzasum_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasDzasum_v2",3,"cuDoubleComplex const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDzasum_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasDzasum_v2",5,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDzasum_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasDzasum_v2",3,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDzasum_v2",5,SWIGTYPE_p_double);
  }
  
  result = (cublasStatus_t)cublasDzasum_v2(arg1,arg2,(cuDoubleComplex const *)arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSrot_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  int arg4 ;
  float *arg5 = (float *) 0 ;
  int arg6 ;
  float *arg7 = (float *) 0 ;
  float *arg8 = (float *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSrot_v2",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSrot_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSrot_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasSrot_v2",3,"float *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasSrot_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasSrot_v2",5,"float *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasSrot_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasSrot_v2",7,"float const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasSrot_v2",8,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSrot_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSrot_v2",3,SWIGTYPE_p_float);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSrot_v2",5,SWIGTYPE_p_float);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSrot_v2",7,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSrot_v2",8,SWIGTYPE_p_float);
  }
  
  result = (cublasStatus_t)cublasSrot_v2(arg1,arg2,arg3,arg4,arg5,arg6,(float const *)arg7,(float const *)arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDrot_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDrot_v2",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDrot_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDrot_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasDrot_v2",3,"double *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDrot_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasDrot_v2",5,"double *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasDrot_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasDrot_v2",7,"double const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasDrot_v2",8,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDrot_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDrot_v2",3,SWIGTYPE_p_double);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDrot_v2",5,SWIGTYPE_p_double);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDrot_v2",7,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDrot_v2",8,SWIGTYPE_p_double);
  }
  
  result = (cublasStatus_t)cublasDrot_v2(arg1,arg2,arg3,arg4,arg5,arg6,(double const *)arg7,(double const *)arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCrot_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  cuComplex *arg3 = (cuComplex *) 0 ;
  int arg4 ;
  cuComplex *arg5 = (cuComplex *) 0 ;
  int arg6 ;
  float *arg7 = (float *) 0 ;
  cuComplex *arg8 = (cuComplex *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCrot_v2",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCrot_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCrot_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasCrot_v2",3,"cuComplex *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCrot_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasCrot_v2",5,"cuComplex *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasCrot_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCrot_v2",7,"float const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasCrot_v2",8,"cuComplex const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCrot_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCrot_v2",3,SWIGTYPE_p_cuComplex);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCrot_v2",5,SWIGTYPE_p_cuComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasCrot_v2",7,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCrot_v2",8,SWIGTYPE_p_cuComplex);
  }
  
  result = (cublasStatus_t)cublasCrot_v2(arg1,arg2,arg3,arg4,arg5,arg6,(float const *)arg7,(cuComplex const *)arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCsrot_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  cuComplex *arg3 = (cuComplex *) 0 ;
  int arg4 ;
  cuComplex *arg5 = (cuComplex *) 0 ;
  int arg6 ;
  float *arg7 = (float *) 0 ;
  float *arg8 = (float *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCsrot_v2",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCsrot_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCsrot_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasCsrot_v2",3,"cuComplex *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCsrot_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasCsrot_v2",5,"cuComplex *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasCsrot_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCsrot_v2",7,"float const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasCsrot_v2",8,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCsrot_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsrot_v2",3,SWIGTYPE_p_cuComplex);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsrot_v2",5,SWIGTYPE_p_cuComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasCsrot_v2",7,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasCsrot_v2",8,SWIGTYPE_p_float);
  }
  
  result = (cublasStatus_t)cublasCsrot_v2(arg1,arg2,arg3,arg4,arg5,arg6,(float const *)arg7,(float const *)arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZrot_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  cuDoubleComplex *arg3 = (cuDoubleComplex *) 0 ;
  int arg4 ;
  cuDoubleComplex *arg5 = (cuDoubleComplex *) 0 ;
  int arg6 ;
  double *arg7 = (double *) 0 ;
  cuDoubleComplex *arg8 = (cuDoubleComplex *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZrot_v2",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZrot_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZrot_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasZrot_v2",3,"cuDoubleComplex *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZrot_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasZrot_v2",5,"cuDoubleComplex *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasZrot_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZrot_v2",7,"double const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasZrot_v2",8,"cuDoubleComplex const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZrot_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZrot_v2",3,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZrot_v2",5,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasZrot_v2",7,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZrot_v2",8,SWIGTYPE_p_cuDoubleComplex);
  }
  
  result = (cublasStatus_t)cublasZrot_v2(arg1,arg2,arg3,arg4,arg5,arg6,(double const *)arg7,(cuDoubleComplex const *)arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZdrot_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  cuDoubleComplex *arg3 = (cuDoubleComplex *) 0 ;
  int arg4 ;
  cuDoubleComplex *arg5 = (cuDoubleComplex *) 0 ;
  int arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZdrot_v2",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZdrot_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZdrot_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasZdrot_v2",3,"cuDoubleComplex *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZdrot_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasZdrot_v2",5,"cuDoubleComplex *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasZdrot_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZdrot_v2",7,"double const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasZdrot_v2",8,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZdrot_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZdrot_v2",3,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZdrot_v2",5,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasZdrot_v2",7,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasZdrot_v2",8,SWIGTYPE_p_double);
  }
  
  result = (cublasStatus_t)cublasZdrot_v2(arg1,arg2,arg3,arg4,arg5,arg6,(double const *)arg7,(double const *)arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasRotEx(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  cudaDataType arg4 ;
  int arg5 ;
  void *arg6 = (void *) 0 ;
  cudaDataType arg7 ;
  int arg8 ;
  void *arg9 = (void *) 0 ;
  void *arg10 = (void *) 0 ;
  cudaDataType arg11 ;
  cudaDataType arg12 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasRotEx",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasRotEx",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasRotEx",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasRotEx",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasRotEx",4,"cudaDataType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasRotEx",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasRotEx",6,"void *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasRotEx",7,"cudaDataType");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasRotEx",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasRotEx",9,"void const *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasRotEx",10,"void const *");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasRotEx",11,"cudaDataType");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasRotEx",12,"cudaDataType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasRotEx",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"cublasRotEx");
  arg4 = (cudaDataType)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"cublasRotEx");
  arg7 = (cudaDataType)(int)lua_tonumber(L, 7);
  arg8 = (int)lua_tonumber(L, 8);
  arg9=(void *)SWIG_MustGetPtr(L,9,0,0,9,"cublasRotEx");
  arg10=(void *)SWIG_MustGetPtr(L,10,0,0,10,"cublasRotEx");
  arg11 = (cudaDataType)(int)lua_tonumber(L, 11);
  arg12 = (cudaDataType)(int)lua_tonumber(L, 12);
  result = (cublasStatus_t)cublasRotEx(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,(void const *)arg9,(void const *)arg10,arg11,arg12);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSrotg_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSrotg_v2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSrotg_v2",1,"cublasHandle_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cublasSrotg_v2",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasSrotg_v2",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasSrotg_v2",4,"float *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasSrotg_v2",5,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSrotg_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSrotg_v2",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSrotg_v2",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSrotg_v2",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSrotg_v2",5,SWIGTYPE_p_float);
  }
  
  result = (cublasStatus_t)cublasSrotg_v2(arg1,arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDrotg_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDrotg_v2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDrotg_v2",1,"cublasHandle_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cublasDrotg_v2",2,"double *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasDrotg_v2",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasDrotg_v2",4,"double *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasDrotg_v2",5,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDrotg_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDrotg_v2",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDrotg_v2",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDrotg_v2",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDrotg_v2",5,SWIGTYPE_p_double);
  }
  
  result = (cublasStatus_t)cublasDrotg_v2(arg1,arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCrotg_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cuComplex *arg2 = (cuComplex *) 0 ;
  cuComplex *arg3 = (cuComplex *) 0 ;
  float *arg4 = (float *) 0 ;
  cuComplex *arg5 = (cuComplex *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCrotg_v2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCrotg_v2",1,"cublasHandle_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cublasCrotg_v2",2,"cuComplex *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasCrotg_v2",3,"cuComplex *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasCrotg_v2",4,"float *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasCrotg_v2",5,"cuComplex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCrotg_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCrotg_v2",2,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCrotg_v2",3,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasCrotg_v2",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCrotg_v2",5,SWIGTYPE_p_cuComplex);
  }
  
  result = (cublasStatus_t)cublasCrotg_v2(arg1,arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZrotg_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cuDoubleComplex *arg2 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg3 = (cuDoubleComplex *) 0 ;
  double *arg4 = (double *) 0 ;
  cuDoubleComplex *arg5 = (cuDoubleComplex *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZrotg_v2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZrotg_v2",1,"cublasHandle_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cublasZrotg_v2",2,"cuDoubleComplex *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasZrotg_v2",3,"cuDoubleComplex *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasZrotg_v2",4,"double *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasZrotg_v2",5,"cuDoubleComplex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZrotg_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZrotg_v2",2,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZrotg_v2",3,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasZrotg_v2",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZrotg_v2",5,SWIGTYPE_p_cuDoubleComplex);
  }
  
  result = (cublasStatus_t)cublasZrotg_v2(arg1,arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasRotgEx(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  cudaDataType arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  cudaDataType arg7 ;
  cudaDataType arg8 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasRotgEx",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasRotgEx",1,"cublasHandle_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cublasRotgEx",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasRotgEx",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasRotgEx",4,"cudaDataType");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasRotgEx",5,"void *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasRotgEx",6,"void *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasRotgEx",7,"cudaDataType");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasRotgEx",8,"cudaDataType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasRotgEx",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"cublasRotgEx");
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"cublasRotgEx");
  arg4 = (cudaDataType)(int)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"cublasRotgEx");
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"cublasRotgEx");
  arg7 = (cudaDataType)(int)lua_tonumber(L, 7);
  arg8 = (cudaDataType)(int)lua_tonumber(L, 8);
  result = (cublasStatus_t)cublasRotgEx(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSrotm_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  int arg4 ;
  float *arg5 = (float *) 0 ;
  int arg6 ;
  float *arg7 = (float *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSrotm_v2",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSrotm_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSrotm_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasSrotm_v2",3,"float *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasSrotm_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasSrotm_v2",5,"float *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasSrotm_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasSrotm_v2",7,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSrotm_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSrotm_v2",3,SWIGTYPE_p_float);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSrotm_v2",5,SWIGTYPE_p_float);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSrotm_v2",7,SWIGTYPE_p_float);
  }
  
  result = (cublasStatus_t)cublasSrotm_v2(arg1,arg2,arg3,arg4,arg5,arg6,(float const *)arg7);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDrotm_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  double *arg7 = (double *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDrotm_v2",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDrotm_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDrotm_v2",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasDrotm_v2",3,"double *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDrotm_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasDrotm_v2",5,"double *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasDrotm_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasDrotm_v2",7,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDrotm_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDrotm_v2",3,SWIGTYPE_p_double);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDrotm_v2",5,SWIGTYPE_p_double);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDrotm_v2",7,SWIGTYPE_p_double);
  }
  
  result = (cublasStatus_t)cublasDrotm_v2(arg1,arg2,arg3,arg4,arg5,arg6,(double const *)arg7);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasRotmEx(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  cudaDataType arg4 ;
  int arg5 ;
  void *arg6 = (void *) 0 ;
  cudaDataType arg7 ;
  int arg8 ;
  void *arg9 = (void *) 0 ;
  cudaDataType arg10 ;
  cudaDataType arg11 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasRotmEx",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasRotmEx",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasRotmEx",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasRotmEx",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasRotmEx",4,"cudaDataType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasRotmEx",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasRotmEx",6,"void *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasRotmEx",7,"cudaDataType");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasRotmEx",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasRotmEx",9,"void const *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasRotmEx",10,"cudaDataType");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasRotmEx",11,"cudaDataType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasRotmEx",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"cublasRotmEx");
  arg4 = (cudaDataType)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"cublasRotmEx");
  arg7 = (cudaDataType)(int)lua_tonumber(L, 7);
  arg8 = (int)lua_tonumber(L, 8);
  arg9=(void *)SWIG_MustGetPtr(L,9,0,0,9,"cublasRotmEx");
  arg10 = (cudaDataType)(int)lua_tonumber(L, 10);
  arg11 = (cudaDataType)(int)lua_tonumber(L, 11);
  result = (cublasStatus_t)cublasRotmEx(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,(void const *)arg9,arg10,arg11);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSrotmg_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSrotmg_v2",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSrotmg_v2",1,"cublasHandle_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cublasSrotmg_v2",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasSrotmg_v2",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasSrotmg_v2",4,"float *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasSrotmg_v2",5,"float const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasSrotmg_v2",6,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSrotmg_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSrotmg_v2",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSrotmg_v2",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSrotmg_v2",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSrotmg_v2",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSrotmg_v2",6,SWIGTYPE_p_float);
  }
  
  result = (cublasStatus_t)cublasSrotmg_v2(arg1,arg2,arg3,arg4,(float const *)arg5,arg6);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDrotmg_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDrotmg_v2",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDrotmg_v2",1,"cublasHandle_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cublasDrotmg_v2",2,"double *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasDrotmg_v2",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasDrotmg_v2",4,"double *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasDrotmg_v2",5,"double const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasDrotmg_v2",6,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDrotmg_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDrotmg_v2",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDrotmg_v2",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDrotmg_v2",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDrotmg_v2",5,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDrotmg_v2",6,SWIGTYPE_p_double);
  }
  
  result = (cublasStatus_t)cublasDrotmg_v2(arg1,arg2,arg3,arg4,(double const *)arg5,arg6);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasRotmgEx(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  void *arg2 = (void *) 0 ;
  cudaDataType arg3 ;
  void *arg4 = (void *) 0 ;
  cudaDataType arg5 ;
  void *arg6 = (void *) 0 ;
  cudaDataType arg7 ;
  void *arg8 = (void *) 0 ;
  cudaDataType arg9 ;
  void *arg10 = (void *) 0 ;
  cudaDataType arg11 ;
  cudaDataType arg12 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasRotmgEx",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasRotmgEx",1,"cublasHandle_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cublasRotmgEx",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasRotmgEx",3,"cudaDataType");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasRotmgEx",4,"void *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasRotmgEx",5,"cudaDataType");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasRotmgEx",6,"void *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasRotmgEx",7,"cudaDataType");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasRotmgEx",8,"void const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasRotmgEx",9,"cudaDataType");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasRotmgEx",10,"void *");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasRotmgEx",11,"cudaDataType");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasRotmgEx",12,"cudaDataType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasRotmgEx",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"cublasRotmgEx");
  arg3 = (cudaDataType)(int)lua_tonumber(L, 3);
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"cublasRotmgEx");
  arg5 = (cudaDataType)(int)lua_tonumber(L, 5);
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"cublasRotmgEx");
  arg7 = (cudaDataType)(int)lua_tonumber(L, 7);
  arg8=(void *)SWIG_MustGetPtr(L,8,0,0,8,"cublasRotmgEx");
  arg9 = (cudaDataType)(int)lua_tonumber(L, 9);
  arg10=(void *)SWIG_MustGetPtr(L,10,0,0,10,"cublasRotmgEx");
  arg11 = (cudaDataType)(int)lua_tonumber(L, 11);
  arg12 = (cudaDataType)(int)lua_tonumber(L, 12);
  result = (cublasStatus_t)cublasRotmgEx(arg1,arg2,arg3,arg4,arg5,arg6,arg7,(void const *)arg8,arg9,arg10,arg11,arg12);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSgemv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  int arg3 ;
  int arg4 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  int arg7 ;
  float *arg8 = (float *) 0 ;
  int arg9 ;
  float *arg10 = (float *) 0 ;
  float *arg11 = (float *) 0 ;
  int arg12 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSgemv_v2",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSgemv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSgemv_v2",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasSgemv_v2",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasSgemv_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasSgemv_v2",5,"float const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasSgemv_v2",6,"float const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasSgemv_v2",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasSgemv_v2",8,"float const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasSgemv_v2",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasSgemv_v2",10,"float const *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasSgemv_v2",11,"float *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasSgemv_v2",12,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSgemv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSgemv_v2",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSgemv_v2",6,SWIGTYPE_p_float);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSgemv_v2",8,SWIGTYPE_p_float);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSgemv_v2",10,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSgemv_v2",11,SWIGTYPE_p_float);
  }
  
  arg12 = (int)lua_tonumber(L, 12);
  result = (cublasStatus_t)cublasSgemv_v2(arg1,arg2,arg3,arg4,(float const *)arg5,(float const *)arg6,arg7,(float const *)arg8,arg9,(float const *)arg10,arg11,arg12);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDgemv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int arg7 ;
  double *arg8 = (double *) 0 ;
  int arg9 ;
  double *arg10 = (double *) 0 ;
  double *arg11 = (double *) 0 ;
  int arg12 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDgemv_v2",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDgemv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDgemv_v2",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasDgemv_v2",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDgemv_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasDgemv_v2",5,"double const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasDgemv_v2",6,"double const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasDgemv_v2",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasDgemv_v2",8,"double const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasDgemv_v2",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasDgemv_v2",10,"double const *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasDgemv_v2",11,"double *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasDgemv_v2",12,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDgemv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDgemv_v2",5,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDgemv_v2",6,SWIGTYPE_p_double);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDgemv_v2",8,SWIGTYPE_p_double);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDgemv_v2",10,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDgemv_v2",11,SWIGTYPE_p_double);
  }
  
  arg12 = (int)lua_tonumber(L, 12);
  result = (cublasStatus_t)cublasDgemv_v2(arg1,arg2,arg3,arg4,(double const *)arg5,(double const *)arg6,arg7,(double const *)arg8,arg9,(double const *)arg10,arg11,arg12);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCgemv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  int arg3 ;
  int arg4 ;
  cuComplex *arg5 = (cuComplex *) 0 ;
  cuComplex *arg6 = (cuComplex *) 0 ;
  int arg7 ;
  cuComplex *arg8 = (cuComplex *) 0 ;
  int arg9 ;
  cuComplex *arg10 = (cuComplex *) 0 ;
  cuComplex *arg11 = (cuComplex *) 0 ;
  int arg12 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCgemv_v2",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCgemv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCgemv_v2",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCgemv_v2",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCgemv_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasCgemv_v2",5,"cuComplex const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasCgemv_v2",6,"cuComplex const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasCgemv_v2",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasCgemv_v2",8,"cuComplex const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasCgemv_v2",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasCgemv_v2",10,"cuComplex const *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasCgemv_v2",11,"cuComplex *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasCgemv_v2",12,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCgemv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemv_v2",5,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemv_v2",6,SWIGTYPE_p_cuComplex);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemv_v2",8,SWIGTYPE_p_cuComplex);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemv_v2",10,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemv_v2",11,SWIGTYPE_p_cuComplex);
  }
  
  arg12 = (int)lua_tonumber(L, 12);
  result = (cublasStatus_t)cublasCgemv_v2(arg1,arg2,arg3,arg4,(cuComplex const *)arg5,(cuComplex const *)arg6,arg7,(cuComplex const *)arg8,arg9,(cuComplex const *)arg10,arg11,arg12);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZgemv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  int arg3 ;
  int arg4 ;
  cuDoubleComplex *arg5 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg6 = (cuDoubleComplex *) 0 ;
  int arg7 ;
  cuDoubleComplex *arg8 = (cuDoubleComplex *) 0 ;
  int arg9 ;
  cuDoubleComplex *arg10 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg11 = (cuDoubleComplex *) 0 ;
  int arg12 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZgemv_v2",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZgemv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZgemv_v2",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZgemv_v2",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZgemv_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasZgemv_v2",5,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasZgemv_v2",6,"cuDoubleComplex const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasZgemv_v2",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasZgemv_v2",8,"cuDoubleComplex const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasZgemv_v2",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasZgemv_v2",10,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasZgemv_v2",11,"cuDoubleComplex *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasZgemv_v2",12,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZgemv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgemv_v2",5,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgemv_v2",6,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgemv_v2",8,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgemv_v2",10,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgemv_v2",11,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg12 = (int)lua_tonumber(L, 12);
  result = (cublasStatus_t)cublasZgemv_v2(arg1,arg2,arg3,arg4,(cuDoubleComplex const *)arg5,(cuDoubleComplex const *)arg6,arg7,(cuDoubleComplex const *)arg8,arg9,(cuDoubleComplex const *)arg10,arg11,arg12);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSgbmv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  float *arg7 = (float *) 0 ;
  float *arg8 = (float *) 0 ;
  int arg9 ;
  float *arg10 = (float *) 0 ;
  int arg11 ;
  float *arg12 = (float *) 0 ;
  float *arg13 = (float *) 0 ;
  int arg14 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSgbmv_v2",14,14)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSgbmv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSgbmv_v2",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasSgbmv_v2",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasSgbmv_v2",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasSgbmv_v2",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasSgbmv_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasSgbmv_v2",7,"float const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasSgbmv_v2",8,"float const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasSgbmv_v2",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasSgbmv_v2",10,"float const *");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasSgbmv_v2",11,"int");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasSgbmv_v2",12,"float const *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("cublasSgbmv_v2",13,"float *");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("cublasSgbmv_v2",14,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSgbmv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSgbmv_v2",7,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSgbmv_v2",8,SWIGTYPE_p_float);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSgbmv_v2",10,SWIGTYPE_p_float);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSgbmv_v2",12,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSgbmv_v2",13,SWIGTYPE_p_float);
  }
  
  arg14 = (int)lua_tonumber(L, 14);
  result = (cublasStatus_t)cublasSgbmv_v2(arg1,arg2,arg3,arg4,arg5,arg6,(float const *)arg7,(float const *)arg8,arg9,(float const *)arg10,arg11,(float const *)arg12,arg13,arg14);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDgbmv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  int arg9 ;
  double *arg10 = (double *) 0 ;
  int arg11 ;
  double *arg12 = (double *) 0 ;
  double *arg13 = (double *) 0 ;
  int arg14 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDgbmv_v2",14,14)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDgbmv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDgbmv_v2",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasDgbmv_v2",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDgbmv_v2",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasDgbmv_v2",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasDgbmv_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasDgbmv_v2",7,"double const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasDgbmv_v2",8,"double const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasDgbmv_v2",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasDgbmv_v2",10,"double const *");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasDgbmv_v2",11,"int");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasDgbmv_v2",12,"double const *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("cublasDgbmv_v2",13,"double *");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("cublasDgbmv_v2",14,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDgbmv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDgbmv_v2",7,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDgbmv_v2",8,SWIGTYPE_p_double);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDgbmv_v2",10,SWIGTYPE_p_double);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDgbmv_v2",12,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDgbmv_v2",13,SWIGTYPE_p_double);
  }
  
  arg14 = (int)lua_tonumber(L, 14);
  result = (cublasStatus_t)cublasDgbmv_v2(arg1,arg2,arg3,arg4,arg5,arg6,(double const *)arg7,(double const *)arg8,arg9,(double const *)arg10,arg11,(double const *)arg12,arg13,arg14);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCgbmv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  cuComplex *arg8 = (cuComplex *) 0 ;
  int arg9 ;
  cuComplex *arg10 = (cuComplex *) 0 ;
  int arg11 ;
  cuComplex *arg12 = (cuComplex *) 0 ;
  cuComplex *arg13 = (cuComplex *) 0 ;
  int arg14 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCgbmv_v2",14,14)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCgbmv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCgbmv_v2",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCgbmv_v2",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCgbmv_v2",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCgbmv_v2",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasCgbmv_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCgbmv_v2",7,"cuComplex const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasCgbmv_v2",8,"cuComplex const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasCgbmv_v2",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasCgbmv_v2",10,"cuComplex const *");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasCgbmv_v2",11,"int");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasCgbmv_v2",12,"cuComplex const *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("cublasCgbmv_v2",13,"cuComplex *");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("cublasCgbmv_v2",14,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCgbmv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgbmv_v2",7,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgbmv_v2",8,SWIGTYPE_p_cuComplex);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgbmv_v2",10,SWIGTYPE_p_cuComplex);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgbmv_v2",12,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgbmv_v2",13,SWIGTYPE_p_cuComplex);
  }
  
  arg14 = (int)lua_tonumber(L, 14);
  result = (cublasStatus_t)cublasCgbmv_v2(arg1,arg2,arg3,arg4,arg5,arg6,(cuComplex const *)arg7,(cuComplex const *)arg8,arg9,(cuComplex const *)arg10,arg11,(cuComplex const *)arg12,arg13,arg14);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZgbmv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  cuDoubleComplex *arg7 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg8 = (cuDoubleComplex *) 0 ;
  int arg9 ;
  cuDoubleComplex *arg10 = (cuDoubleComplex *) 0 ;
  int arg11 ;
  cuDoubleComplex *arg12 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg13 = (cuDoubleComplex *) 0 ;
  int arg14 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZgbmv_v2",14,14)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZgbmv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZgbmv_v2",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZgbmv_v2",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZgbmv_v2",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasZgbmv_v2",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasZgbmv_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZgbmv_v2",7,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasZgbmv_v2",8,"cuDoubleComplex const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasZgbmv_v2",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasZgbmv_v2",10,"cuDoubleComplex const *");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasZgbmv_v2",11,"int");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasZgbmv_v2",12,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("cublasZgbmv_v2",13,"cuDoubleComplex *");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("cublasZgbmv_v2",14,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZgbmv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgbmv_v2",7,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgbmv_v2",8,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgbmv_v2",10,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgbmv_v2",12,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgbmv_v2",13,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg14 = (int)lua_tonumber(L, 14);
  result = (cublasStatus_t)cublasZgbmv_v2(arg1,arg2,arg3,arg4,arg5,arg6,(cuDoubleComplex const *)arg7,(cuDoubleComplex const *)arg8,arg9,(cuDoubleComplex const *)arg10,arg11,(cuDoubleComplex const *)arg12,arg13,arg14);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasStrmv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  cublasDiagType_t arg4 ;
  int arg5 ;
  float *arg6 = (float *) 0 ;
  int arg7 ;
  float *arg8 = (float *) 0 ;
  int arg9 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasStrmv_v2",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasStrmv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasStrmv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasStrmv_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasStrmv_v2",4,"cublasDiagType_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasStrmv_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasStrmv_v2",6,"float const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasStrmv_v2",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasStrmv_v2",8,"float *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasStrmv_v2",9,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasStrmv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasDiagType_t)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasStrmv_v2",6,SWIGTYPE_p_float);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasStrmv_v2",8,SWIGTYPE_p_float);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  result = (cublasStatus_t)cublasStrmv_v2(arg1,arg2,arg3,arg4,arg5,(float const *)arg6,arg7,arg8,arg9);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDtrmv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  cublasDiagType_t arg4 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  int arg7 ;
  double *arg8 = (double *) 0 ;
  int arg9 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDtrmv_v2",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDtrmv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDtrmv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasDtrmv_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDtrmv_v2",4,"cublasDiagType_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasDtrmv_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasDtrmv_v2",6,"double const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasDtrmv_v2",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasDtrmv_v2",8,"double *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasDtrmv_v2",9,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDtrmv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasDiagType_t)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDtrmv_v2",6,SWIGTYPE_p_double);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDtrmv_v2",8,SWIGTYPE_p_double);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  result = (cublasStatus_t)cublasDtrmv_v2(arg1,arg2,arg3,arg4,arg5,(double const *)arg6,arg7,arg8,arg9);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCtrmv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  cublasDiagType_t arg4 ;
  int arg5 ;
  cuComplex *arg6 = (cuComplex *) 0 ;
  int arg7 ;
  cuComplex *arg8 = (cuComplex *) 0 ;
  int arg9 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCtrmv_v2",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCtrmv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCtrmv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCtrmv_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCtrmv_v2",4,"cublasDiagType_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCtrmv_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasCtrmv_v2",6,"cuComplex const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasCtrmv_v2",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasCtrmv_v2",8,"cuComplex *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasCtrmv_v2",9,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCtrmv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasDiagType_t)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCtrmv_v2",6,SWIGTYPE_p_cuComplex);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCtrmv_v2",8,SWIGTYPE_p_cuComplex);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  result = (cublasStatus_t)cublasCtrmv_v2(arg1,arg2,arg3,arg4,arg5,(cuComplex const *)arg6,arg7,arg8,arg9);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZtrmv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  cublasDiagType_t arg4 ;
  int arg5 ;
  cuDoubleComplex *arg6 = (cuDoubleComplex *) 0 ;
  int arg7 ;
  cuDoubleComplex *arg8 = (cuDoubleComplex *) 0 ;
  int arg9 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZtrmv_v2",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZtrmv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZtrmv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZtrmv_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZtrmv_v2",4,"cublasDiagType_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasZtrmv_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasZtrmv_v2",6,"cuDoubleComplex const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasZtrmv_v2",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasZtrmv_v2",8,"cuDoubleComplex *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasZtrmv_v2",9,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZtrmv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasDiagType_t)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZtrmv_v2",6,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZtrmv_v2",8,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  result = (cublasStatus_t)cublasZtrmv_v2(arg1,arg2,arg3,arg4,arg5,(cuDoubleComplex const *)arg6,arg7,arg8,arg9);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasStbmv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  cublasDiagType_t arg4 ;
  int arg5 ;
  int arg6 ;
  float *arg7 = (float *) 0 ;
  int arg8 ;
  float *arg9 = (float *) 0 ;
  int arg10 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasStbmv_v2",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasStbmv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasStbmv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasStbmv_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasStbmv_v2",4,"cublasDiagType_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasStbmv_v2",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasStbmv_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasStbmv_v2",7,"float const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasStbmv_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasStbmv_v2",9,"float *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasStbmv_v2",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasStbmv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasDiagType_t)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasStbmv_v2",7,SWIGTYPE_p_float);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasStbmv_v2",9,SWIGTYPE_p_float);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  result = (cublasStatus_t)cublasStbmv_v2(arg1,arg2,arg3,arg4,arg5,arg6,(float const *)arg7,arg8,arg9,arg10);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDtbmv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  cublasDiagType_t arg4 ;
  int arg5 ;
  int arg6 ;
  double *arg7 = (double *) 0 ;
  int arg8 ;
  double *arg9 = (double *) 0 ;
  int arg10 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDtbmv_v2",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDtbmv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDtbmv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasDtbmv_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDtbmv_v2",4,"cublasDiagType_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasDtbmv_v2",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasDtbmv_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasDtbmv_v2",7,"double const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasDtbmv_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasDtbmv_v2",9,"double *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasDtbmv_v2",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDtbmv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasDiagType_t)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDtbmv_v2",7,SWIGTYPE_p_double);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDtbmv_v2",9,SWIGTYPE_p_double);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  result = (cublasStatus_t)cublasDtbmv_v2(arg1,arg2,arg3,arg4,arg5,arg6,(double const *)arg7,arg8,arg9,arg10);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCtbmv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  cublasDiagType_t arg4 ;
  int arg5 ;
  int arg6 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  int arg8 ;
  cuComplex *arg9 = (cuComplex *) 0 ;
  int arg10 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCtbmv_v2",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCtbmv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCtbmv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCtbmv_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCtbmv_v2",4,"cublasDiagType_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCtbmv_v2",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasCtbmv_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCtbmv_v2",7,"cuComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasCtbmv_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasCtbmv_v2",9,"cuComplex *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasCtbmv_v2",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCtbmv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasDiagType_t)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCtbmv_v2",7,SWIGTYPE_p_cuComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCtbmv_v2",9,SWIGTYPE_p_cuComplex);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  result = (cublasStatus_t)cublasCtbmv_v2(arg1,arg2,arg3,arg4,arg5,arg6,(cuComplex const *)arg7,arg8,arg9,arg10);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZtbmv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  cublasDiagType_t arg4 ;
  int arg5 ;
  int arg6 ;
  cuDoubleComplex *arg7 = (cuDoubleComplex *) 0 ;
  int arg8 ;
  cuDoubleComplex *arg9 = (cuDoubleComplex *) 0 ;
  int arg10 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZtbmv_v2",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZtbmv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZtbmv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZtbmv_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZtbmv_v2",4,"cublasDiagType_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasZtbmv_v2",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasZtbmv_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZtbmv_v2",7,"cuDoubleComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasZtbmv_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasZtbmv_v2",9,"cuDoubleComplex *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasZtbmv_v2",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZtbmv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasDiagType_t)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZtbmv_v2",7,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZtbmv_v2",9,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  result = (cublasStatus_t)cublasZtbmv_v2(arg1,arg2,arg3,arg4,arg5,arg6,(cuDoubleComplex const *)arg7,arg8,arg9,arg10);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasStpmv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  cublasDiagType_t arg4 ;
  int arg5 ;
  float *arg6 = (float *) 0 ;
  float *arg7 = (float *) 0 ;
  int arg8 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasStpmv_v2",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasStpmv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasStpmv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasStpmv_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasStpmv_v2",4,"cublasDiagType_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasStpmv_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasStpmv_v2",6,"float const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasStpmv_v2",7,"float *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasStpmv_v2",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasStpmv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasDiagType_t)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasStpmv_v2",6,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasStpmv_v2",7,SWIGTYPE_p_float);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  result = (cublasStatus_t)cublasStpmv_v2(arg1,arg2,arg3,arg4,arg5,(float const *)arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDtpmv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  cublasDiagType_t arg4 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  int arg8 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDtpmv_v2",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDtpmv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDtpmv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasDtpmv_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDtpmv_v2",4,"cublasDiagType_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasDtpmv_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasDtpmv_v2",6,"double const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasDtpmv_v2",7,"double *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasDtpmv_v2",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDtpmv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasDiagType_t)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDtpmv_v2",6,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDtpmv_v2",7,SWIGTYPE_p_double);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  result = (cublasStatus_t)cublasDtpmv_v2(arg1,arg2,arg3,arg4,arg5,(double const *)arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCtpmv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  cublasDiagType_t arg4 ;
  int arg5 ;
  cuComplex *arg6 = (cuComplex *) 0 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  int arg8 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCtpmv_v2",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCtpmv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCtpmv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCtpmv_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCtpmv_v2",4,"cublasDiagType_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCtpmv_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasCtpmv_v2",6,"cuComplex const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCtpmv_v2",7,"cuComplex *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasCtpmv_v2",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCtpmv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasDiagType_t)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCtpmv_v2",6,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCtpmv_v2",7,SWIGTYPE_p_cuComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  result = (cublasStatus_t)cublasCtpmv_v2(arg1,arg2,arg3,arg4,arg5,(cuComplex const *)arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZtpmv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  cublasDiagType_t arg4 ;
  int arg5 ;
  cuDoubleComplex *arg6 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg7 = (cuDoubleComplex *) 0 ;
  int arg8 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZtpmv_v2",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZtpmv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZtpmv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZtpmv_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZtpmv_v2",4,"cublasDiagType_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasZtpmv_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasZtpmv_v2",6,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZtpmv_v2",7,"cuDoubleComplex *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasZtpmv_v2",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZtpmv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasDiagType_t)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZtpmv_v2",6,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZtpmv_v2",7,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  result = (cublasStatus_t)cublasZtpmv_v2(arg1,arg2,arg3,arg4,arg5,(cuDoubleComplex const *)arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasStrsv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  cublasDiagType_t arg4 ;
  int arg5 ;
  float *arg6 = (float *) 0 ;
  int arg7 ;
  float *arg8 = (float *) 0 ;
  int arg9 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasStrsv_v2",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasStrsv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasStrsv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasStrsv_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasStrsv_v2",4,"cublasDiagType_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasStrsv_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasStrsv_v2",6,"float const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasStrsv_v2",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasStrsv_v2",8,"float *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasStrsv_v2",9,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasStrsv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasDiagType_t)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasStrsv_v2",6,SWIGTYPE_p_float);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasStrsv_v2",8,SWIGTYPE_p_float);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  result = (cublasStatus_t)cublasStrsv_v2(arg1,arg2,arg3,arg4,arg5,(float const *)arg6,arg7,arg8,arg9);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDtrsv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  cublasDiagType_t arg4 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  int arg7 ;
  double *arg8 = (double *) 0 ;
  int arg9 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDtrsv_v2",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDtrsv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDtrsv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasDtrsv_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDtrsv_v2",4,"cublasDiagType_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasDtrsv_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasDtrsv_v2",6,"double const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasDtrsv_v2",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasDtrsv_v2",8,"double *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasDtrsv_v2",9,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDtrsv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasDiagType_t)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDtrsv_v2",6,SWIGTYPE_p_double);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDtrsv_v2",8,SWIGTYPE_p_double);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  result = (cublasStatus_t)cublasDtrsv_v2(arg1,arg2,arg3,arg4,arg5,(double const *)arg6,arg7,arg8,arg9);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCtrsv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  cublasDiagType_t arg4 ;
  int arg5 ;
  cuComplex *arg6 = (cuComplex *) 0 ;
  int arg7 ;
  cuComplex *arg8 = (cuComplex *) 0 ;
  int arg9 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCtrsv_v2",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCtrsv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCtrsv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCtrsv_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCtrsv_v2",4,"cublasDiagType_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCtrsv_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasCtrsv_v2",6,"cuComplex const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasCtrsv_v2",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasCtrsv_v2",8,"cuComplex *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasCtrsv_v2",9,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCtrsv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasDiagType_t)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCtrsv_v2",6,SWIGTYPE_p_cuComplex);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCtrsv_v2",8,SWIGTYPE_p_cuComplex);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  result = (cublasStatus_t)cublasCtrsv_v2(arg1,arg2,arg3,arg4,arg5,(cuComplex const *)arg6,arg7,arg8,arg9);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZtrsv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  cublasDiagType_t arg4 ;
  int arg5 ;
  cuDoubleComplex *arg6 = (cuDoubleComplex *) 0 ;
  int arg7 ;
  cuDoubleComplex *arg8 = (cuDoubleComplex *) 0 ;
  int arg9 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZtrsv_v2",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZtrsv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZtrsv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZtrsv_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZtrsv_v2",4,"cublasDiagType_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasZtrsv_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasZtrsv_v2",6,"cuDoubleComplex const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasZtrsv_v2",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasZtrsv_v2",8,"cuDoubleComplex *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasZtrsv_v2",9,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZtrsv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasDiagType_t)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZtrsv_v2",6,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZtrsv_v2",8,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  result = (cublasStatus_t)cublasZtrsv_v2(arg1,arg2,arg3,arg4,arg5,(cuDoubleComplex const *)arg6,arg7,arg8,arg9);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasStpsv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  cublasDiagType_t arg4 ;
  int arg5 ;
  float *arg6 = (float *) 0 ;
  float *arg7 = (float *) 0 ;
  int arg8 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasStpsv_v2",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasStpsv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasStpsv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasStpsv_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasStpsv_v2",4,"cublasDiagType_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasStpsv_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasStpsv_v2",6,"float const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasStpsv_v2",7,"float *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasStpsv_v2",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasStpsv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasDiagType_t)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasStpsv_v2",6,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasStpsv_v2",7,SWIGTYPE_p_float);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  result = (cublasStatus_t)cublasStpsv_v2(arg1,arg2,arg3,arg4,arg5,(float const *)arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDtpsv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  cublasDiagType_t arg4 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  int arg8 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDtpsv_v2",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDtpsv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDtpsv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasDtpsv_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDtpsv_v2",4,"cublasDiagType_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasDtpsv_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasDtpsv_v2",6,"double const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasDtpsv_v2",7,"double *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasDtpsv_v2",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDtpsv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasDiagType_t)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDtpsv_v2",6,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDtpsv_v2",7,SWIGTYPE_p_double);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  result = (cublasStatus_t)cublasDtpsv_v2(arg1,arg2,arg3,arg4,arg5,(double const *)arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCtpsv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  cublasDiagType_t arg4 ;
  int arg5 ;
  cuComplex *arg6 = (cuComplex *) 0 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  int arg8 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCtpsv_v2",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCtpsv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCtpsv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCtpsv_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCtpsv_v2",4,"cublasDiagType_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCtpsv_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasCtpsv_v2",6,"cuComplex const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCtpsv_v2",7,"cuComplex *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasCtpsv_v2",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCtpsv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasDiagType_t)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCtpsv_v2",6,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCtpsv_v2",7,SWIGTYPE_p_cuComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  result = (cublasStatus_t)cublasCtpsv_v2(arg1,arg2,arg3,arg4,arg5,(cuComplex const *)arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZtpsv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  cublasDiagType_t arg4 ;
  int arg5 ;
  cuDoubleComplex *arg6 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg7 = (cuDoubleComplex *) 0 ;
  int arg8 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZtpsv_v2",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZtpsv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZtpsv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZtpsv_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZtpsv_v2",4,"cublasDiagType_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasZtpsv_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasZtpsv_v2",6,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZtpsv_v2",7,"cuDoubleComplex *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasZtpsv_v2",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZtpsv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasDiagType_t)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZtpsv_v2",6,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZtpsv_v2",7,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  result = (cublasStatus_t)cublasZtpsv_v2(arg1,arg2,arg3,arg4,arg5,(cuDoubleComplex const *)arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasStbsv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  cublasDiagType_t arg4 ;
  int arg5 ;
  int arg6 ;
  float *arg7 = (float *) 0 ;
  int arg8 ;
  float *arg9 = (float *) 0 ;
  int arg10 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasStbsv_v2",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasStbsv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasStbsv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasStbsv_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasStbsv_v2",4,"cublasDiagType_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasStbsv_v2",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasStbsv_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasStbsv_v2",7,"float const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasStbsv_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasStbsv_v2",9,"float *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasStbsv_v2",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasStbsv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasDiagType_t)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasStbsv_v2",7,SWIGTYPE_p_float);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasStbsv_v2",9,SWIGTYPE_p_float);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  result = (cublasStatus_t)cublasStbsv_v2(arg1,arg2,arg3,arg4,arg5,arg6,(float const *)arg7,arg8,arg9,arg10);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDtbsv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  cublasDiagType_t arg4 ;
  int arg5 ;
  int arg6 ;
  double *arg7 = (double *) 0 ;
  int arg8 ;
  double *arg9 = (double *) 0 ;
  int arg10 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDtbsv_v2",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDtbsv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDtbsv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasDtbsv_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDtbsv_v2",4,"cublasDiagType_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasDtbsv_v2",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasDtbsv_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasDtbsv_v2",7,"double const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasDtbsv_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasDtbsv_v2",9,"double *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasDtbsv_v2",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDtbsv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasDiagType_t)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDtbsv_v2",7,SWIGTYPE_p_double);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDtbsv_v2",9,SWIGTYPE_p_double);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  result = (cublasStatus_t)cublasDtbsv_v2(arg1,arg2,arg3,arg4,arg5,arg6,(double const *)arg7,arg8,arg9,arg10);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCtbsv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  cublasDiagType_t arg4 ;
  int arg5 ;
  int arg6 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  int arg8 ;
  cuComplex *arg9 = (cuComplex *) 0 ;
  int arg10 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCtbsv_v2",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCtbsv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCtbsv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCtbsv_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCtbsv_v2",4,"cublasDiagType_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCtbsv_v2",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasCtbsv_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCtbsv_v2",7,"cuComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasCtbsv_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasCtbsv_v2",9,"cuComplex *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasCtbsv_v2",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCtbsv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasDiagType_t)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCtbsv_v2",7,SWIGTYPE_p_cuComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCtbsv_v2",9,SWIGTYPE_p_cuComplex);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  result = (cublasStatus_t)cublasCtbsv_v2(arg1,arg2,arg3,arg4,arg5,arg6,(cuComplex const *)arg7,arg8,arg9,arg10);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZtbsv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  cublasDiagType_t arg4 ;
  int arg5 ;
  int arg6 ;
  cuDoubleComplex *arg7 = (cuDoubleComplex *) 0 ;
  int arg8 ;
  cuDoubleComplex *arg9 = (cuDoubleComplex *) 0 ;
  int arg10 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZtbsv_v2",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZtbsv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZtbsv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZtbsv_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZtbsv_v2",4,"cublasDiagType_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasZtbsv_v2",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasZtbsv_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZtbsv_v2",7,"cuDoubleComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasZtbsv_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasZtbsv_v2",9,"cuDoubleComplex *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasZtbsv_v2",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZtbsv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasDiagType_t)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZtbsv_v2",7,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZtbsv_v2",9,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  result = (cublasStatus_t)cublasZtbsv_v2(arg1,arg2,arg3,arg4,arg5,arg6,(cuDoubleComplex const *)arg7,arg8,arg9,arg10);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSsymv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  int arg6 ;
  float *arg7 = (float *) 0 ;
  int arg8 ;
  float *arg9 = (float *) 0 ;
  float *arg10 = (float *) 0 ;
  int arg11 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSsymv_v2",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSsymv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSsymv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasSsymv_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasSsymv_v2",4,"float const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasSsymv_v2",5,"float const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasSsymv_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasSsymv_v2",7,"float const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasSsymv_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasSsymv_v2",9,"float const *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasSsymv_v2",10,"float *");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasSsymv_v2",11,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSsymv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsymv_v2",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsymv_v2",5,SWIGTYPE_p_float);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsymv_v2",7,SWIGTYPE_p_float);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsymv_v2",9,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsymv_v2",10,SWIGTYPE_p_float);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  result = (cublasStatus_t)cublasSsymv_v2(arg1,arg2,arg3,(float const *)arg4,(float const *)arg5,arg6,(float const *)arg7,arg8,(float const *)arg9,arg10,arg11);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDsymv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  double *arg7 = (double *) 0 ;
  int arg8 ;
  double *arg9 = (double *) 0 ;
  double *arg10 = (double *) 0 ;
  int arg11 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDsymv_v2",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDsymv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDsymv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasDsymv_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasDsymv_v2",4,"double const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasDsymv_v2",5,"double const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasDsymv_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasDsymv_v2",7,"double const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasDsymv_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasDsymv_v2",9,"double const *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasDsymv_v2",10,"double *");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasDsymv_v2",11,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDsymv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsymv_v2",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsymv_v2",5,SWIGTYPE_p_double);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsymv_v2",7,SWIGTYPE_p_double);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsymv_v2",9,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsymv_v2",10,SWIGTYPE_p_double);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  result = (cublasStatus_t)cublasDsymv_v2(arg1,arg2,arg3,(double const *)arg4,(double const *)arg5,arg6,(double const *)arg7,arg8,(double const *)arg9,arg10,arg11);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCsymv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  cuComplex *arg4 = (cuComplex *) 0 ;
  cuComplex *arg5 = (cuComplex *) 0 ;
  int arg6 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  int arg8 ;
  cuComplex *arg9 = (cuComplex *) 0 ;
  cuComplex *arg10 = (cuComplex *) 0 ;
  int arg11 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCsymv_v2",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCsymv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCsymv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCsymv_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasCsymv_v2",4,"cuComplex const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasCsymv_v2",5,"cuComplex const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasCsymv_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCsymv_v2",7,"cuComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasCsymv_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasCsymv_v2",9,"cuComplex const *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasCsymv_v2",10,"cuComplex *");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasCsymv_v2",11,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCsymv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsymv_v2",4,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsymv_v2",5,SWIGTYPE_p_cuComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsymv_v2",7,SWIGTYPE_p_cuComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsymv_v2",9,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsymv_v2",10,SWIGTYPE_p_cuComplex);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  result = (cublasStatus_t)cublasCsymv_v2(arg1,arg2,arg3,(cuComplex const *)arg4,(cuComplex const *)arg5,arg6,(cuComplex const *)arg7,arg8,(cuComplex const *)arg9,arg10,arg11);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZsymv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  cuDoubleComplex *arg4 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg5 = (cuDoubleComplex *) 0 ;
  int arg6 ;
  cuDoubleComplex *arg7 = (cuDoubleComplex *) 0 ;
  int arg8 ;
  cuDoubleComplex *arg9 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg10 = (cuDoubleComplex *) 0 ;
  int arg11 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZsymv_v2",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZsymv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZsymv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZsymv_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasZsymv_v2",4,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasZsymv_v2",5,"cuDoubleComplex const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasZsymv_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZsymv_v2",7,"cuDoubleComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasZsymv_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasZsymv_v2",9,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasZsymv_v2",10,"cuDoubleComplex *");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasZsymv_v2",11,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZsymv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZsymv_v2",4,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZsymv_v2",5,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZsymv_v2",7,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZsymv_v2",9,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZsymv_v2",10,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  result = (cublasStatus_t)cublasZsymv_v2(arg1,arg2,arg3,(cuDoubleComplex const *)arg4,(cuDoubleComplex const *)arg5,arg6,(cuDoubleComplex const *)arg7,arg8,(cuDoubleComplex const *)arg9,arg10,arg11);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasChemv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  cuComplex *arg4 = (cuComplex *) 0 ;
  cuComplex *arg5 = (cuComplex *) 0 ;
  int arg6 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  int arg8 ;
  cuComplex *arg9 = (cuComplex *) 0 ;
  cuComplex *arg10 = (cuComplex *) 0 ;
  int arg11 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasChemv_v2",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasChemv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasChemv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasChemv_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasChemv_v2",4,"cuComplex const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasChemv_v2",5,"cuComplex const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasChemv_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasChemv_v2",7,"cuComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasChemv_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasChemv_v2",9,"cuComplex const *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasChemv_v2",10,"cuComplex *");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasChemv_v2",11,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasChemv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasChemv_v2",4,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasChemv_v2",5,SWIGTYPE_p_cuComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasChemv_v2",7,SWIGTYPE_p_cuComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasChemv_v2",9,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasChemv_v2",10,SWIGTYPE_p_cuComplex);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  result = (cublasStatus_t)cublasChemv_v2(arg1,arg2,arg3,(cuComplex const *)arg4,(cuComplex const *)arg5,arg6,(cuComplex const *)arg7,arg8,(cuComplex const *)arg9,arg10,arg11);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZhemv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  cuDoubleComplex *arg4 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg5 = (cuDoubleComplex *) 0 ;
  int arg6 ;
  cuDoubleComplex *arg7 = (cuDoubleComplex *) 0 ;
  int arg8 ;
  cuDoubleComplex *arg9 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg10 = (cuDoubleComplex *) 0 ;
  int arg11 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZhemv_v2",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZhemv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZhemv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZhemv_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasZhemv_v2",4,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasZhemv_v2",5,"cuDoubleComplex const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasZhemv_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZhemv_v2",7,"cuDoubleComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasZhemv_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasZhemv_v2",9,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasZhemv_v2",10,"cuDoubleComplex *");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasZhemv_v2",11,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZhemv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZhemv_v2",4,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZhemv_v2",5,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZhemv_v2",7,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZhemv_v2",9,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZhemv_v2",10,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  result = (cublasStatus_t)cublasZhemv_v2(arg1,arg2,arg3,(cuDoubleComplex const *)arg4,(cuDoubleComplex const *)arg5,arg6,(cuDoubleComplex const *)arg7,arg8,(cuDoubleComplex const *)arg9,arg10,arg11);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSsbmv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  int arg4 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  int arg7 ;
  float *arg8 = (float *) 0 ;
  int arg9 ;
  float *arg10 = (float *) 0 ;
  float *arg11 = (float *) 0 ;
  int arg12 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSsbmv_v2",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSsbmv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSsbmv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasSsbmv_v2",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasSsbmv_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasSsbmv_v2",5,"float const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasSsbmv_v2",6,"float const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasSsbmv_v2",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasSsbmv_v2",8,"float const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasSsbmv_v2",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasSsbmv_v2",10,"float const *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasSsbmv_v2",11,"float *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasSsbmv_v2",12,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSsbmv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsbmv_v2",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsbmv_v2",6,SWIGTYPE_p_float);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsbmv_v2",8,SWIGTYPE_p_float);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsbmv_v2",10,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsbmv_v2",11,SWIGTYPE_p_float);
  }
  
  arg12 = (int)lua_tonumber(L, 12);
  result = (cublasStatus_t)cublasSsbmv_v2(arg1,arg2,arg3,arg4,(float const *)arg5,(float const *)arg6,arg7,(float const *)arg8,arg9,(float const *)arg10,arg11,arg12);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDsbmv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int arg7 ;
  double *arg8 = (double *) 0 ;
  int arg9 ;
  double *arg10 = (double *) 0 ;
  double *arg11 = (double *) 0 ;
  int arg12 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDsbmv_v2",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDsbmv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDsbmv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasDsbmv_v2",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDsbmv_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasDsbmv_v2",5,"double const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasDsbmv_v2",6,"double const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasDsbmv_v2",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasDsbmv_v2",8,"double const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasDsbmv_v2",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasDsbmv_v2",10,"double const *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasDsbmv_v2",11,"double *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasDsbmv_v2",12,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDsbmv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsbmv_v2",5,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsbmv_v2",6,SWIGTYPE_p_double);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsbmv_v2",8,SWIGTYPE_p_double);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsbmv_v2",10,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsbmv_v2",11,SWIGTYPE_p_double);
  }
  
  arg12 = (int)lua_tonumber(L, 12);
  result = (cublasStatus_t)cublasDsbmv_v2(arg1,arg2,arg3,arg4,(double const *)arg5,(double const *)arg6,arg7,(double const *)arg8,arg9,(double const *)arg10,arg11,arg12);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasChbmv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  int arg4 ;
  cuComplex *arg5 = (cuComplex *) 0 ;
  cuComplex *arg6 = (cuComplex *) 0 ;
  int arg7 ;
  cuComplex *arg8 = (cuComplex *) 0 ;
  int arg9 ;
  cuComplex *arg10 = (cuComplex *) 0 ;
  cuComplex *arg11 = (cuComplex *) 0 ;
  int arg12 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasChbmv_v2",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasChbmv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasChbmv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasChbmv_v2",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasChbmv_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasChbmv_v2",5,"cuComplex const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasChbmv_v2",6,"cuComplex const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasChbmv_v2",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasChbmv_v2",8,"cuComplex const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasChbmv_v2",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasChbmv_v2",10,"cuComplex const *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasChbmv_v2",11,"cuComplex *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasChbmv_v2",12,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasChbmv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasChbmv_v2",5,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasChbmv_v2",6,SWIGTYPE_p_cuComplex);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasChbmv_v2",8,SWIGTYPE_p_cuComplex);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasChbmv_v2",10,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasChbmv_v2",11,SWIGTYPE_p_cuComplex);
  }
  
  arg12 = (int)lua_tonumber(L, 12);
  result = (cublasStatus_t)cublasChbmv_v2(arg1,arg2,arg3,arg4,(cuComplex const *)arg5,(cuComplex const *)arg6,arg7,(cuComplex const *)arg8,arg9,(cuComplex const *)arg10,arg11,arg12);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZhbmv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  int arg4 ;
  cuDoubleComplex *arg5 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg6 = (cuDoubleComplex *) 0 ;
  int arg7 ;
  cuDoubleComplex *arg8 = (cuDoubleComplex *) 0 ;
  int arg9 ;
  cuDoubleComplex *arg10 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg11 = (cuDoubleComplex *) 0 ;
  int arg12 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZhbmv_v2",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZhbmv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZhbmv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZhbmv_v2",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZhbmv_v2",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasZhbmv_v2",5,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasZhbmv_v2",6,"cuDoubleComplex const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasZhbmv_v2",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasZhbmv_v2",8,"cuDoubleComplex const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasZhbmv_v2",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasZhbmv_v2",10,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasZhbmv_v2",11,"cuDoubleComplex *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasZhbmv_v2",12,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZhbmv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZhbmv_v2",5,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZhbmv_v2",6,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZhbmv_v2",8,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZhbmv_v2",10,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZhbmv_v2",11,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg12 = (int)lua_tonumber(L, 12);
  result = (cublasStatus_t)cublasZhbmv_v2(arg1,arg2,arg3,arg4,(cuDoubleComplex const *)arg5,(cuDoubleComplex const *)arg6,arg7,(cuDoubleComplex const *)arg8,arg9,(cuDoubleComplex const *)arg10,arg11,arg12);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSspmv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  int arg7 ;
  float *arg8 = (float *) 0 ;
  float *arg9 = (float *) 0 ;
  int arg10 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSspmv_v2",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSspmv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSspmv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasSspmv_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasSspmv_v2",4,"float const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasSspmv_v2",5,"float const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasSspmv_v2",6,"float const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasSspmv_v2",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasSspmv_v2",8,"float const *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasSspmv_v2",9,"float *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasSspmv_v2",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSspmv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSspmv_v2",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSspmv_v2",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSspmv_v2",6,SWIGTYPE_p_float);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSspmv_v2",8,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSspmv_v2",9,SWIGTYPE_p_float);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  result = (cublasStatus_t)cublasSspmv_v2(arg1,arg2,arg3,(float const *)arg4,(float const *)arg5,(float const *)arg6,arg7,(float const *)arg8,arg9,arg10);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDspmv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int arg7 ;
  double *arg8 = (double *) 0 ;
  double *arg9 = (double *) 0 ;
  int arg10 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDspmv_v2",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDspmv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDspmv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasDspmv_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasDspmv_v2",4,"double const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasDspmv_v2",5,"double const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasDspmv_v2",6,"double const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasDspmv_v2",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasDspmv_v2",8,"double const *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasDspmv_v2",9,"double *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasDspmv_v2",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDspmv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDspmv_v2",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDspmv_v2",5,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDspmv_v2",6,SWIGTYPE_p_double);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDspmv_v2",8,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDspmv_v2",9,SWIGTYPE_p_double);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  result = (cublasStatus_t)cublasDspmv_v2(arg1,arg2,arg3,(double const *)arg4,(double const *)arg5,(double const *)arg6,arg7,(double const *)arg8,arg9,arg10);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasChpmv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  cuComplex *arg4 = (cuComplex *) 0 ;
  cuComplex *arg5 = (cuComplex *) 0 ;
  cuComplex *arg6 = (cuComplex *) 0 ;
  int arg7 ;
  cuComplex *arg8 = (cuComplex *) 0 ;
  cuComplex *arg9 = (cuComplex *) 0 ;
  int arg10 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasChpmv_v2",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasChpmv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasChpmv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasChpmv_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasChpmv_v2",4,"cuComplex const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasChpmv_v2",5,"cuComplex const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasChpmv_v2",6,"cuComplex const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasChpmv_v2",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasChpmv_v2",8,"cuComplex const *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasChpmv_v2",9,"cuComplex *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasChpmv_v2",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasChpmv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasChpmv_v2",4,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasChpmv_v2",5,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasChpmv_v2",6,SWIGTYPE_p_cuComplex);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasChpmv_v2",8,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasChpmv_v2",9,SWIGTYPE_p_cuComplex);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  result = (cublasStatus_t)cublasChpmv_v2(arg1,arg2,arg3,(cuComplex const *)arg4,(cuComplex const *)arg5,(cuComplex const *)arg6,arg7,(cuComplex const *)arg8,arg9,arg10);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZhpmv_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  cuDoubleComplex *arg4 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg5 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg6 = (cuDoubleComplex *) 0 ;
  int arg7 ;
  cuDoubleComplex *arg8 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg9 = (cuDoubleComplex *) 0 ;
  int arg10 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZhpmv_v2",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZhpmv_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZhpmv_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZhpmv_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasZhpmv_v2",4,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasZhpmv_v2",5,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasZhpmv_v2",6,"cuDoubleComplex const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasZhpmv_v2",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasZhpmv_v2",8,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasZhpmv_v2",9,"cuDoubleComplex *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasZhpmv_v2",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZhpmv_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZhpmv_v2",4,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZhpmv_v2",5,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZhpmv_v2",6,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZhpmv_v2",8,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZhpmv_v2",9,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  result = (cublasStatus_t)cublasZhpmv_v2(arg1,arg2,arg3,(cuDoubleComplex const *)arg4,(cuDoubleComplex const *)arg5,(cuDoubleComplex const *)arg6,arg7,(cuDoubleComplex const *)arg8,arg9,arg10);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSger_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  int arg3 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  int arg6 ;
  float *arg7 = (float *) 0 ;
  int arg8 ;
  float *arg9 = (float *) 0 ;
  int arg10 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSger_v2",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSger_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSger_v2",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasSger_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasSger_v2",4,"float const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasSger_v2",5,"float const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasSger_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasSger_v2",7,"float const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasSger_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasSger_v2",9,"float *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasSger_v2",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSger_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSger_v2",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSger_v2",5,SWIGTYPE_p_float);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSger_v2",7,SWIGTYPE_p_float);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSger_v2",9,SWIGTYPE_p_float);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  result = (cublasStatus_t)cublasSger_v2(arg1,arg2,arg3,(float const *)arg4,(float const *)arg5,arg6,(float const *)arg7,arg8,arg9,arg10);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDger_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  double *arg7 = (double *) 0 ;
  int arg8 ;
  double *arg9 = (double *) 0 ;
  int arg10 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDger_v2",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDger_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDger_v2",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasDger_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasDger_v2",4,"double const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasDger_v2",5,"double const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasDger_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasDger_v2",7,"double const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasDger_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasDger_v2",9,"double *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasDger_v2",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDger_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDger_v2",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDger_v2",5,SWIGTYPE_p_double);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDger_v2",7,SWIGTYPE_p_double);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDger_v2",9,SWIGTYPE_p_double);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  result = (cublasStatus_t)cublasDger_v2(arg1,arg2,arg3,(double const *)arg4,(double const *)arg5,arg6,(double const *)arg7,arg8,arg9,arg10);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCgeru_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  int arg3 ;
  cuComplex *arg4 = (cuComplex *) 0 ;
  cuComplex *arg5 = (cuComplex *) 0 ;
  int arg6 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  int arg8 ;
  cuComplex *arg9 = (cuComplex *) 0 ;
  int arg10 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCgeru_v2",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCgeru_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCgeru_v2",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCgeru_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasCgeru_v2",4,"cuComplex const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasCgeru_v2",5,"cuComplex const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasCgeru_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCgeru_v2",7,"cuComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasCgeru_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasCgeru_v2",9,"cuComplex *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasCgeru_v2",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCgeru_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgeru_v2",4,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgeru_v2",5,SWIGTYPE_p_cuComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgeru_v2",7,SWIGTYPE_p_cuComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgeru_v2",9,SWIGTYPE_p_cuComplex);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  result = (cublasStatus_t)cublasCgeru_v2(arg1,arg2,arg3,(cuComplex const *)arg4,(cuComplex const *)arg5,arg6,(cuComplex const *)arg7,arg8,arg9,arg10);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCgerc_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  int arg3 ;
  cuComplex *arg4 = (cuComplex *) 0 ;
  cuComplex *arg5 = (cuComplex *) 0 ;
  int arg6 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  int arg8 ;
  cuComplex *arg9 = (cuComplex *) 0 ;
  int arg10 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCgerc_v2",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCgerc_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCgerc_v2",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCgerc_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasCgerc_v2",4,"cuComplex const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasCgerc_v2",5,"cuComplex const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasCgerc_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCgerc_v2",7,"cuComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasCgerc_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasCgerc_v2",9,"cuComplex *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasCgerc_v2",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCgerc_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgerc_v2",4,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgerc_v2",5,SWIGTYPE_p_cuComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgerc_v2",7,SWIGTYPE_p_cuComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgerc_v2",9,SWIGTYPE_p_cuComplex);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  result = (cublasStatus_t)cublasCgerc_v2(arg1,arg2,arg3,(cuComplex const *)arg4,(cuComplex const *)arg5,arg6,(cuComplex const *)arg7,arg8,arg9,arg10);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZgeru_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  int arg3 ;
  cuDoubleComplex *arg4 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg5 = (cuDoubleComplex *) 0 ;
  int arg6 ;
  cuDoubleComplex *arg7 = (cuDoubleComplex *) 0 ;
  int arg8 ;
  cuDoubleComplex *arg9 = (cuDoubleComplex *) 0 ;
  int arg10 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZgeru_v2",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZgeru_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZgeru_v2",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZgeru_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasZgeru_v2",4,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasZgeru_v2",5,"cuDoubleComplex const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasZgeru_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZgeru_v2",7,"cuDoubleComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasZgeru_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasZgeru_v2",9,"cuDoubleComplex *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasZgeru_v2",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZgeru_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgeru_v2",4,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgeru_v2",5,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgeru_v2",7,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgeru_v2",9,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  result = (cublasStatus_t)cublasZgeru_v2(arg1,arg2,arg3,(cuDoubleComplex const *)arg4,(cuDoubleComplex const *)arg5,arg6,(cuDoubleComplex const *)arg7,arg8,arg9,arg10);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZgerc_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  int arg3 ;
  cuDoubleComplex *arg4 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg5 = (cuDoubleComplex *) 0 ;
  int arg6 ;
  cuDoubleComplex *arg7 = (cuDoubleComplex *) 0 ;
  int arg8 ;
  cuDoubleComplex *arg9 = (cuDoubleComplex *) 0 ;
  int arg10 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZgerc_v2",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZgerc_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZgerc_v2",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZgerc_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasZgerc_v2",4,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasZgerc_v2",5,"cuDoubleComplex const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasZgerc_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZgerc_v2",7,"cuDoubleComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasZgerc_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasZgerc_v2",9,"cuDoubleComplex *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasZgerc_v2",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZgerc_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgerc_v2",4,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgerc_v2",5,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgerc_v2",7,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgerc_v2",9,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  result = (cublasStatus_t)cublasZgerc_v2(arg1,arg2,arg3,(cuDoubleComplex const *)arg4,(cuDoubleComplex const *)arg5,arg6,(cuDoubleComplex const *)arg7,arg8,arg9,arg10);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSsyr_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  int arg6 ;
  float *arg7 = (float *) 0 ;
  int arg8 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSsyr_v2",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSsyr_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSsyr_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasSsyr_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasSsyr_v2",4,"float const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasSsyr_v2",5,"float const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasSsyr_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasSsyr_v2",7,"float *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasSsyr_v2",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSsyr_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsyr_v2",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsyr_v2",5,SWIGTYPE_p_float);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsyr_v2",7,SWIGTYPE_p_float);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  result = (cublasStatus_t)cublasSsyr_v2(arg1,arg2,arg3,(float const *)arg4,(float const *)arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDsyr_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  double *arg7 = (double *) 0 ;
  int arg8 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDsyr_v2",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDsyr_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDsyr_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasDsyr_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasDsyr_v2",4,"double const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasDsyr_v2",5,"double const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasDsyr_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasDsyr_v2",7,"double *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasDsyr_v2",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDsyr_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsyr_v2",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsyr_v2",5,SWIGTYPE_p_double);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsyr_v2",7,SWIGTYPE_p_double);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  result = (cublasStatus_t)cublasDsyr_v2(arg1,arg2,arg3,(double const *)arg4,(double const *)arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCsyr_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  cuComplex *arg4 = (cuComplex *) 0 ;
  cuComplex *arg5 = (cuComplex *) 0 ;
  int arg6 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  int arg8 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCsyr_v2",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCsyr_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCsyr_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCsyr_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasCsyr_v2",4,"cuComplex const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasCsyr_v2",5,"cuComplex const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasCsyr_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCsyr_v2",7,"cuComplex *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasCsyr_v2",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCsyr_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsyr_v2",4,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsyr_v2",5,SWIGTYPE_p_cuComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsyr_v2",7,SWIGTYPE_p_cuComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  result = (cublasStatus_t)cublasCsyr_v2(arg1,arg2,arg3,(cuComplex const *)arg4,(cuComplex const *)arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZsyr_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  cuDoubleComplex *arg4 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg5 = (cuDoubleComplex *) 0 ;
  int arg6 ;
  cuDoubleComplex *arg7 = (cuDoubleComplex *) 0 ;
  int arg8 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZsyr_v2",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZsyr_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZsyr_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZsyr_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasZsyr_v2",4,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasZsyr_v2",5,"cuDoubleComplex const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasZsyr_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZsyr_v2",7,"cuDoubleComplex *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasZsyr_v2",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZsyr_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZsyr_v2",4,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZsyr_v2",5,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZsyr_v2",7,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  result = (cublasStatus_t)cublasZsyr_v2(arg1,arg2,arg3,(cuDoubleComplex const *)arg4,(cuDoubleComplex const *)arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCher_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  float *arg4 = (float *) 0 ;
  cuComplex *arg5 = (cuComplex *) 0 ;
  int arg6 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  int arg8 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCher_v2",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCher_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCher_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCher_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasCher_v2",4,"float const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasCher_v2",5,"cuComplex const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasCher_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCher_v2",7,"cuComplex *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasCher_v2",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCher_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasCher_v2",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCher_v2",5,SWIGTYPE_p_cuComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCher_v2",7,SWIGTYPE_p_cuComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  result = (cublasStatus_t)cublasCher_v2(arg1,arg2,arg3,(float const *)arg4,(cuComplex const *)arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZher_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  cuDoubleComplex *arg5 = (cuDoubleComplex *) 0 ;
  int arg6 ;
  cuDoubleComplex *arg7 = (cuDoubleComplex *) 0 ;
  int arg8 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZher_v2",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZher_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZher_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZher_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasZher_v2",4,"double const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasZher_v2",5,"cuDoubleComplex const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasZher_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZher_v2",7,"cuDoubleComplex *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasZher_v2",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZher_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasZher_v2",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZher_v2",5,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZher_v2",7,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  result = (cublasStatus_t)cublasZher_v2(arg1,arg2,arg3,(double const *)arg4,(cuDoubleComplex const *)arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSspr_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  int arg6 ;
  float *arg7 = (float *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSspr_v2",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSspr_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSspr_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasSspr_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasSspr_v2",4,"float const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasSspr_v2",5,"float const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasSspr_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasSspr_v2",7,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSspr_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSspr_v2",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSspr_v2",5,SWIGTYPE_p_float);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSspr_v2",7,SWIGTYPE_p_float);
  }
  
  result = (cublasStatus_t)cublasSspr_v2(arg1,arg2,arg3,(float const *)arg4,(float const *)arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDspr_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  double *arg7 = (double *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDspr_v2",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDspr_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDspr_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasDspr_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasDspr_v2",4,"double const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasDspr_v2",5,"double const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasDspr_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasDspr_v2",7,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDspr_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDspr_v2",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDspr_v2",5,SWIGTYPE_p_double);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDspr_v2",7,SWIGTYPE_p_double);
  }
  
  result = (cublasStatus_t)cublasDspr_v2(arg1,arg2,arg3,(double const *)arg4,(double const *)arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasChpr_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  float *arg4 = (float *) 0 ;
  cuComplex *arg5 = (cuComplex *) 0 ;
  int arg6 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasChpr_v2",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasChpr_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasChpr_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasChpr_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasChpr_v2",4,"float const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasChpr_v2",5,"cuComplex const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasChpr_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasChpr_v2",7,"cuComplex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasChpr_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasChpr_v2",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasChpr_v2",5,SWIGTYPE_p_cuComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasChpr_v2",7,SWIGTYPE_p_cuComplex);
  }
  
  result = (cublasStatus_t)cublasChpr_v2(arg1,arg2,arg3,(float const *)arg4,(cuComplex const *)arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZhpr_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  cuDoubleComplex *arg5 = (cuDoubleComplex *) 0 ;
  int arg6 ;
  cuDoubleComplex *arg7 = (cuDoubleComplex *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZhpr_v2",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZhpr_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZhpr_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZhpr_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasZhpr_v2",4,"double const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasZhpr_v2",5,"cuDoubleComplex const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasZhpr_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZhpr_v2",7,"cuDoubleComplex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZhpr_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasZhpr_v2",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZhpr_v2",5,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZhpr_v2",7,SWIGTYPE_p_cuDoubleComplex);
  }
  
  result = (cublasStatus_t)cublasZhpr_v2(arg1,arg2,arg3,(double const *)arg4,(cuDoubleComplex const *)arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSsyr2_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  int arg6 ;
  float *arg7 = (float *) 0 ;
  int arg8 ;
  float *arg9 = (float *) 0 ;
  int arg10 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSsyr2_v2",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSsyr2_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSsyr2_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasSsyr2_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasSsyr2_v2",4,"float const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasSsyr2_v2",5,"float const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasSsyr2_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasSsyr2_v2",7,"float const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasSsyr2_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasSsyr2_v2",9,"float *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasSsyr2_v2",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSsyr2_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsyr2_v2",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsyr2_v2",5,SWIGTYPE_p_float);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsyr2_v2",7,SWIGTYPE_p_float);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsyr2_v2",9,SWIGTYPE_p_float);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  result = (cublasStatus_t)cublasSsyr2_v2(arg1,arg2,arg3,(float const *)arg4,(float const *)arg5,arg6,(float const *)arg7,arg8,arg9,arg10);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDsyr2_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  double *arg7 = (double *) 0 ;
  int arg8 ;
  double *arg9 = (double *) 0 ;
  int arg10 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDsyr2_v2",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDsyr2_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDsyr2_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasDsyr2_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasDsyr2_v2",4,"double const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasDsyr2_v2",5,"double const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasDsyr2_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasDsyr2_v2",7,"double const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasDsyr2_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasDsyr2_v2",9,"double *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasDsyr2_v2",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDsyr2_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsyr2_v2",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsyr2_v2",5,SWIGTYPE_p_double);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsyr2_v2",7,SWIGTYPE_p_double);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsyr2_v2",9,SWIGTYPE_p_double);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  result = (cublasStatus_t)cublasDsyr2_v2(arg1,arg2,arg3,(double const *)arg4,(double const *)arg5,arg6,(double const *)arg7,arg8,arg9,arg10);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCsyr2_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  cuComplex *arg4 = (cuComplex *) 0 ;
  cuComplex *arg5 = (cuComplex *) 0 ;
  int arg6 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  int arg8 ;
  cuComplex *arg9 = (cuComplex *) 0 ;
  int arg10 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCsyr2_v2",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCsyr2_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCsyr2_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCsyr2_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasCsyr2_v2",4,"cuComplex const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasCsyr2_v2",5,"cuComplex const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasCsyr2_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCsyr2_v2",7,"cuComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasCsyr2_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasCsyr2_v2",9,"cuComplex *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasCsyr2_v2",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCsyr2_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsyr2_v2",4,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsyr2_v2",5,SWIGTYPE_p_cuComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsyr2_v2",7,SWIGTYPE_p_cuComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsyr2_v2",9,SWIGTYPE_p_cuComplex);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  result = (cublasStatus_t)cublasCsyr2_v2(arg1,arg2,arg3,(cuComplex const *)arg4,(cuComplex const *)arg5,arg6,(cuComplex const *)arg7,arg8,arg9,arg10);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZsyr2_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  cuDoubleComplex *arg4 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg5 = (cuDoubleComplex *) 0 ;
  int arg6 ;
  cuDoubleComplex *arg7 = (cuDoubleComplex *) 0 ;
  int arg8 ;
  cuDoubleComplex *arg9 = (cuDoubleComplex *) 0 ;
  int arg10 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZsyr2_v2",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZsyr2_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZsyr2_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZsyr2_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasZsyr2_v2",4,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasZsyr2_v2",5,"cuDoubleComplex const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasZsyr2_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZsyr2_v2",7,"cuDoubleComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasZsyr2_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasZsyr2_v2",9,"cuDoubleComplex *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasZsyr2_v2",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZsyr2_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZsyr2_v2",4,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZsyr2_v2",5,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZsyr2_v2",7,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZsyr2_v2",9,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  result = (cublasStatus_t)cublasZsyr2_v2(arg1,arg2,arg3,(cuDoubleComplex const *)arg4,(cuDoubleComplex const *)arg5,arg6,(cuDoubleComplex const *)arg7,arg8,arg9,arg10);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCher2_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  cuComplex *arg4 = (cuComplex *) 0 ;
  cuComplex *arg5 = (cuComplex *) 0 ;
  int arg6 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  int arg8 ;
  cuComplex *arg9 = (cuComplex *) 0 ;
  int arg10 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCher2_v2",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCher2_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCher2_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCher2_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasCher2_v2",4,"cuComplex const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasCher2_v2",5,"cuComplex const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasCher2_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCher2_v2",7,"cuComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasCher2_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasCher2_v2",9,"cuComplex *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasCher2_v2",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCher2_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCher2_v2",4,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCher2_v2",5,SWIGTYPE_p_cuComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCher2_v2",7,SWIGTYPE_p_cuComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCher2_v2",9,SWIGTYPE_p_cuComplex);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  result = (cublasStatus_t)cublasCher2_v2(arg1,arg2,arg3,(cuComplex const *)arg4,(cuComplex const *)arg5,arg6,(cuComplex const *)arg7,arg8,arg9,arg10);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZher2_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  cuDoubleComplex *arg4 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg5 = (cuDoubleComplex *) 0 ;
  int arg6 ;
  cuDoubleComplex *arg7 = (cuDoubleComplex *) 0 ;
  int arg8 ;
  cuDoubleComplex *arg9 = (cuDoubleComplex *) 0 ;
  int arg10 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZher2_v2",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZher2_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZher2_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZher2_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasZher2_v2",4,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasZher2_v2",5,"cuDoubleComplex const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasZher2_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZher2_v2",7,"cuDoubleComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasZher2_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasZher2_v2",9,"cuDoubleComplex *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasZher2_v2",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZher2_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZher2_v2",4,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZher2_v2",5,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZher2_v2",7,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZher2_v2",9,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  result = (cublasStatus_t)cublasZher2_v2(arg1,arg2,arg3,(cuDoubleComplex const *)arg4,(cuDoubleComplex const *)arg5,arg6,(cuDoubleComplex const *)arg7,arg8,arg9,arg10);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSspr2_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  int arg6 ;
  float *arg7 = (float *) 0 ;
  int arg8 ;
  float *arg9 = (float *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSspr2_v2",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSspr2_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSspr2_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasSspr2_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasSspr2_v2",4,"float const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasSspr2_v2",5,"float const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasSspr2_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasSspr2_v2",7,"float const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasSspr2_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasSspr2_v2",9,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSspr2_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSspr2_v2",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSspr2_v2",5,SWIGTYPE_p_float);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSspr2_v2",7,SWIGTYPE_p_float);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSspr2_v2",9,SWIGTYPE_p_float);
  }
  
  result = (cublasStatus_t)cublasSspr2_v2(arg1,arg2,arg3,(float const *)arg4,(float const *)arg5,arg6,(float const *)arg7,arg8,arg9);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDspr2_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  double *arg7 = (double *) 0 ;
  int arg8 ;
  double *arg9 = (double *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDspr2_v2",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDspr2_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDspr2_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasDspr2_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasDspr2_v2",4,"double const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasDspr2_v2",5,"double const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasDspr2_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasDspr2_v2",7,"double const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasDspr2_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasDspr2_v2",9,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDspr2_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDspr2_v2",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDspr2_v2",5,SWIGTYPE_p_double);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDspr2_v2",7,SWIGTYPE_p_double);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDspr2_v2",9,SWIGTYPE_p_double);
  }
  
  result = (cublasStatus_t)cublasDspr2_v2(arg1,arg2,arg3,(double const *)arg4,(double const *)arg5,arg6,(double const *)arg7,arg8,arg9);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasChpr2_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  cuComplex *arg4 = (cuComplex *) 0 ;
  cuComplex *arg5 = (cuComplex *) 0 ;
  int arg6 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  int arg8 ;
  cuComplex *arg9 = (cuComplex *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasChpr2_v2",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasChpr2_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasChpr2_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasChpr2_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasChpr2_v2",4,"cuComplex const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasChpr2_v2",5,"cuComplex const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasChpr2_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasChpr2_v2",7,"cuComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasChpr2_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasChpr2_v2",9,"cuComplex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasChpr2_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasChpr2_v2",4,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasChpr2_v2",5,SWIGTYPE_p_cuComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasChpr2_v2",7,SWIGTYPE_p_cuComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasChpr2_v2",9,SWIGTYPE_p_cuComplex);
  }
  
  result = (cublasStatus_t)cublasChpr2_v2(arg1,arg2,arg3,(cuComplex const *)arg4,(cuComplex const *)arg5,arg6,(cuComplex const *)arg7,arg8,arg9);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZhpr2_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  cuDoubleComplex *arg4 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg5 = (cuDoubleComplex *) 0 ;
  int arg6 ;
  cuDoubleComplex *arg7 = (cuDoubleComplex *) 0 ;
  int arg8 ;
  cuDoubleComplex *arg9 = (cuDoubleComplex *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZhpr2_v2",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZhpr2_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZhpr2_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZhpr2_v2",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasZhpr2_v2",4,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasZhpr2_v2",5,"cuDoubleComplex const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasZhpr2_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZhpr2_v2",7,"cuDoubleComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasZhpr2_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasZhpr2_v2",9,"cuDoubleComplex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZhpr2_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZhpr2_v2",4,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZhpr2_v2",5,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZhpr2_v2",7,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZhpr2_v2",9,SWIGTYPE_p_cuDoubleComplex);
  }
  
  result = (cublasStatus_t)cublasZhpr2_v2(arg1,arg2,arg3,(cuDoubleComplex const *)arg4,(cuDoubleComplex const *)arg5,arg6,(cuDoubleComplex const *)arg7,arg8,arg9);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSgemm_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  float *arg7 = (float *) 0 ;
  float *arg8 = (float *) 0 ;
  int arg9 ;
  float *arg10 = (float *) 0 ;
  int arg11 ;
  float *arg12 = (float *) 0 ;
  float *arg13 = (float *) 0 ;
  int arg14 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSgemm_v2",14,14)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSgemm_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSgemm_v2",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasSgemm_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasSgemm_v2",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasSgemm_v2",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasSgemm_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasSgemm_v2",7,"float const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasSgemm_v2",8,"float const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasSgemm_v2",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasSgemm_v2",10,"float const *");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasSgemm_v2",11,"int");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasSgemm_v2",12,"float const *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("cublasSgemm_v2",13,"float *");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("cublasSgemm_v2",14,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSgemm_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSgemm_v2",7,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSgemm_v2",8,SWIGTYPE_p_float);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSgemm_v2",10,SWIGTYPE_p_float);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSgemm_v2",12,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSgemm_v2",13,SWIGTYPE_p_float);
  }
  
  arg14 = (int)lua_tonumber(L, 14);
  result = (cublasStatus_t)cublasSgemm_v2(arg1,arg2,arg3,arg4,arg5,arg6,(float const *)arg7,(float const *)arg8,arg9,(float const *)arg10,arg11,(float const *)arg12,arg13,arg14);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDgemm_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  int arg9 ;
  double *arg10 = (double *) 0 ;
  int arg11 ;
  double *arg12 = (double *) 0 ;
  double *arg13 = (double *) 0 ;
  int arg14 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDgemm_v2",14,14)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDgemm_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDgemm_v2",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasDgemm_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDgemm_v2",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasDgemm_v2",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasDgemm_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasDgemm_v2",7,"double const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasDgemm_v2",8,"double const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasDgemm_v2",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasDgemm_v2",10,"double const *");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasDgemm_v2",11,"int");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasDgemm_v2",12,"double const *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("cublasDgemm_v2",13,"double *");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("cublasDgemm_v2",14,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDgemm_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDgemm_v2",7,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDgemm_v2",8,SWIGTYPE_p_double);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDgemm_v2",10,SWIGTYPE_p_double);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDgemm_v2",12,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDgemm_v2",13,SWIGTYPE_p_double);
  }
  
  arg14 = (int)lua_tonumber(L, 14);
  result = (cublasStatus_t)cublasDgemm_v2(arg1,arg2,arg3,arg4,arg5,arg6,(double const *)arg7,(double const *)arg8,arg9,(double const *)arg10,arg11,(double const *)arg12,arg13,arg14);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCgemm_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  cuComplex *arg8 = (cuComplex *) 0 ;
  int arg9 ;
  cuComplex *arg10 = (cuComplex *) 0 ;
  int arg11 ;
  cuComplex *arg12 = (cuComplex *) 0 ;
  cuComplex *arg13 = (cuComplex *) 0 ;
  int arg14 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCgemm_v2",14,14)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCgemm_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCgemm_v2",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCgemm_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCgemm_v2",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCgemm_v2",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasCgemm_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCgemm_v2",7,"cuComplex const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasCgemm_v2",8,"cuComplex const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasCgemm_v2",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasCgemm_v2",10,"cuComplex const *");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasCgemm_v2",11,"int");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasCgemm_v2",12,"cuComplex const *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("cublasCgemm_v2",13,"cuComplex *");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("cublasCgemm_v2",14,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCgemm_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemm_v2",7,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemm_v2",8,SWIGTYPE_p_cuComplex);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemm_v2",10,SWIGTYPE_p_cuComplex);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemm_v2",12,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemm_v2",13,SWIGTYPE_p_cuComplex);
  }
  
  arg14 = (int)lua_tonumber(L, 14);
  result = (cublasStatus_t)cublasCgemm_v2(arg1,arg2,arg3,arg4,arg5,arg6,(cuComplex const *)arg7,(cuComplex const *)arg8,arg9,(cuComplex const *)arg10,arg11,(cuComplex const *)arg12,arg13,arg14);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCgemm3m(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  cuComplex *arg8 = (cuComplex *) 0 ;
  int arg9 ;
  cuComplex *arg10 = (cuComplex *) 0 ;
  int arg11 ;
  cuComplex *arg12 = (cuComplex *) 0 ;
  cuComplex *arg13 = (cuComplex *) 0 ;
  int arg14 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCgemm3m",14,14)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCgemm3m",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCgemm3m",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCgemm3m",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCgemm3m",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCgemm3m",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasCgemm3m",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCgemm3m",7,"cuComplex const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasCgemm3m",8,"cuComplex const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasCgemm3m",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasCgemm3m",10,"cuComplex const *");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasCgemm3m",11,"int");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasCgemm3m",12,"cuComplex const *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("cublasCgemm3m",13,"cuComplex *");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("cublasCgemm3m",14,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCgemm3m",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemm3m",7,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemm3m",8,SWIGTYPE_p_cuComplex);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemm3m",10,SWIGTYPE_p_cuComplex);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemm3m",12,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemm3m",13,SWIGTYPE_p_cuComplex);
  }
  
  arg14 = (int)lua_tonumber(L, 14);
  result = (cublasStatus_t)cublasCgemm3m(arg1,arg2,arg3,arg4,arg5,arg6,(cuComplex const *)arg7,(cuComplex const *)arg8,arg9,(cuComplex const *)arg10,arg11,(cuComplex const *)arg12,arg13,arg14);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCgemm3mEx(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  void *arg8 = (void *) 0 ;
  cudaDataType arg9 ;
  int arg10 ;
  void *arg11 = (void *) 0 ;
  cudaDataType arg12 ;
  int arg13 ;
  cuComplex *arg14 = (cuComplex *) 0 ;
  void *arg15 = (void *) 0 ;
  cudaDataType arg16 ;
  int arg17 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCgemm3mEx",17,17)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCgemm3mEx",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCgemm3mEx",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCgemm3mEx",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCgemm3mEx",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCgemm3mEx",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasCgemm3mEx",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCgemm3mEx",7,"cuComplex const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasCgemm3mEx",8,"void const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasCgemm3mEx",9,"cudaDataType");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasCgemm3mEx",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasCgemm3mEx",11,"void const *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasCgemm3mEx",12,"cudaDataType");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasCgemm3mEx",13,"int");
  if(!SWIG_isptrtype(L,14)) SWIG_fail_arg("cublasCgemm3mEx",14,"cuComplex const *");
  if(!SWIG_isptrtype(L,15)) SWIG_fail_arg("cublasCgemm3mEx",15,"void *");
  if(!lua_isnumber(L,16)) SWIG_fail_arg("cublasCgemm3mEx",16,"cudaDataType");
  if(!lua_isnumber(L,17)) SWIG_fail_arg("cublasCgemm3mEx",17,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCgemm3mEx",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemm3mEx",7,SWIGTYPE_p_cuComplex);
  }
  
  arg8=(void *)SWIG_MustGetPtr(L,8,0,0,8,"cublasCgemm3mEx");
  arg9 = (cudaDataType)(int)lua_tonumber(L, 9);
  arg10 = (int)lua_tonumber(L, 10);
  arg11=(void *)SWIG_MustGetPtr(L,11,0,0,11,"cublasCgemm3mEx");
  arg12 = (cudaDataType)(int)lua_tonumber(L, 12);
  arg13 = (int)lua_tonumber(L, 13);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&arg14,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemm3mEx",14,SWIGTYPE_p_cuComplex);
  }
  
  arg15=(void *)SWIG_MustGetPtr(L,15,0,0,15,"cublasCgemm3mEx");
  arg16 = (cudaDataType)(int)lua_tonumber(L, 16);
  arg17 = (int)lua_tonumber(L, 17);
  result = (cublasStatus_t)cublasCgemm3mEx(arg1,arg2,arg3,arg4,arg5,arg6,(cuComplex const *)arg7,(void const *)arg8,arg9,arg10,(void const *)arg11,arg12,arg13,(cuComplex const *)arg14,arg15,arg16,arg17);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZgemm_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  cuDoubleComplex *arg7 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg8 = (cuDoubleComplex *) 0 ;
  int arg9 ;
  cuDoubleComplex *arg10 = (cuDoubleComplex *) 0 ;
  int arg11 ;
  cuDoubleComplex *arg12 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg13 = (cuDoubleComplex *) 0 ;
  int arg14 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZgemm_v2",14,14)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZgemm_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZgemm_v2",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZgemm_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZgemm_v2",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasZgemm_v2",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasZgemm_v2",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZgemm_v2",7,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasZgemm_v2",8,"cuDoubleComplex const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasZgemm_v2",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasZgemm_v2",10,"cuDoubleComplex const *");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasZgemm_v2",11,"int");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasZgemm_v2",12,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("cublasZgemm_v2",13,"cuDoubleComplex *");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("cublasZgemm_v2",14,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZgemm_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgemm_v2",7,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgemm_v2",8,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgemm_v2",10,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgemm_v2",12,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgemm_v2",13,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg14 = (int)lua_tonumber(L, 14);
  result = (cublasStatus_t)cublasZgemm_v2(arg1,arg2,arg3,arg4,arg5,arg6,(cuDoubleComplex const *)arg7,(cuDoubleComplex const *)arg8,arg9,(cuDoubleComplex const *)arg10,arg11,(cuDoubleComplex const *)arg12,arg13,arg14);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZgemm3m(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  cuDoubleComplex *arg7 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg8 = (cuDoubleComplex *) 0 ;
  int arg9 ;
  cuDoubleComplex *arg10 = (cuDoubleComplex *) 0 ;
  int arg11 ;
  cuDoubleComplex *arg12 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg13 = (cuDoubleComplex *) 0 ;
  int arg14 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZgemm3m",14,14)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZgemm3m",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZgemm3m",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZgemm3m",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZgemm3m",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasZgemm3m",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasZgemm3m",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZgemm3m",7,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasZgemm3m",8,"cuDoubleComplex const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasZgemm3m",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasZgemm3m",10,"cuDoubleComplex const *");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasZgemm3m",11,"int");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasZgemm3m",12,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("cublasZgemm3m",13,"cuDoubleComplex *");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("cublasZgemm3m",14,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZgemm3m",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgemm3m",7,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgemm3m",8,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgemm3m",10,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgemm3m",12,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgemm3m",13,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg14 = (int)lua_tonumber(L, 14);
  result = (cublasStatus_t)cublasZgemm3m(arg1,arg2,arg3,arg4,arg5,arg6,(cuDoubleComplex const *)arg7,(cuDoubleComplex const *)arg8,arg9,(cuDoubleComplex const *)arg10,arg11,(cuDoubleComplex const *)arg12,arg13,arg14);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasHgemm(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  __half *arg7 = (__half *) 0 ;
  __half *arg8 = (__half *) 0 ;
  int arg9 ;
  __half *arg10 = (__half *) 0 ;
  int arg11 ;
  __half *arg12 = (__half *) 0 ;
  __half *arg13 = (__half *) 0 ;
  int arg14 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasHgemm",14,14)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasHgemm",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasHgemm",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasHgemm",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasHgemm",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasHgemm",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasHgemm",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasHgemm",7,"__half const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasHgemm",8,"__half const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasHgemm",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasHgemm",10,"__half const *");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasHgemm",11,"int");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasHgemm",12,"__half const *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("cublasHgemm",13,"__half *");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("cublasHgemm",14,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasHgemm",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p___half,0))){
    SWIG_fail_ptr("cublasHgemm",7,SWIGTYPE_p___half);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p___half,0))){
    SWIG_fail_ptr("cublasHgemm",8,SWIGTYPE_p___half);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p___half,0))){
    SWIG_fail_ptr("cublasHgemm",10,SWIGTYPE_p___half);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p___half,0))){
    SWIG_fail_ptr("cublasHgemm",12,SWIGTYPE_p___half);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p___half,0))){
    SWIG_fail_ptr("cublasHgemm",13,SWIGTYPE_p___half);
  }
  
  arg14 = (int)lua_tonumber(L, 14);
  result = (cublasStatus_t)cublasHgemm(arg1,arg2,arg3,arg4,arg5,arg6,(__half const *)arg7,(__half const *)arg8,arg9,(__half const *)arg10,arg11,(__half const *)arg12,arg13,arg14);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSgemmEx(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  float *arg7 = (float *) 0 ;
  void *arg8 = (void *) 0 ;
  cudaDataType arg9 ;
  int arg10 ;
  void *arg11 = (void *) 0 ;
  cudaDataType arg12 ;
  int arg13 ;
  float *arg14 = (float *) 0 ;
  void *arg15 = (void *) 0 ;
  cudaDataType arg16 ;
  int arg17 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSgemmEx",17,17)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSgemmEx",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSgemmEx",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasSgemmEx",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasSgemmEx",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasSgemmEx",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasSgemmEx",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasSgemmEx",7,"float const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasSgemmEx",8,"void const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasSgemmEx",9,"cudaDataType");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasSgemmEx",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasSgemmEx",11,"void const *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasSgemmEx",12,"cudaDataType");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasSgemmEx",13,"int");
  if(!SWIG_isptrtype(L,14)) SWIG_fail_arg("cublasSgemmEx",14,"float const *");
  if(!SWIG_isptrtype(L,15)) SWIG_fail_arg("cublasSgemmEx",15,"void *");
  if(!lua_isnumber(L,16)) SWIG_fail_arg("cublasSgemmEx",16,"cudaDataType");
  if(!lua_isnumber(L,17)) SWIG_fail_arg("cublasSgemmEx",17,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSgemmEx",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSgemmEx",7,SWIGTYPE_p_float);
  }
  
  arg8=(void *)SWIG_MustGetPtr(L,8,0,0,8,"cublasSgemmEx");
  arg9 = (cudaDataType)(int)lua_tonumber(L, 9);
  arg10 = (int)lua_tonumber(L, 10);
  arg11=(void *)SWIG_MustGetPtr(L,11,0,0,11,"cublasSgemmEx");
  arg12 = (cudaDataType)(int)lua_tonumber(L, 12);
  arg13 = (int)lua_tonumber(L, 13);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&arg14,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSgemmEx",14,SWIGTYPE_p_float);
  }
  
  arg15=(void *)SWIG_MustGetPtr(L,15,0,0,15,"cublasSgemmEx");
  arg16 = (cudaDataType)(int)lua_tonumber(L, 16);
  arg17 = (int)lua_tonumber(L, 17);
  result = (cublasStatus_t)cublasSgemmEx(arg1,arg2,arg3,arg4,arg5,arg6,(float const *)arg7,(void const *)arg8,arg9,arg10,(void const *)arg11,arg12,arg13,(float const *)arg14,arg15,arg16,arg17);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasGemmEx(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *arg7 = (void *) 0 ;
  void *arg8 = (void *) 0 ;
  cudaDataType arg9 ;
  int arg10 ;
  void *arg11 = (void *) 0 ;
  cudaDataType arg12 ;
  int arg13 ;
  void *arg14 = (void *) 0 ;
  void *arg15 = (void *) 0 ;
  cudaDataType arg16 ;
  int arg17 ;
  cublasComputeType_t arg18 ;
  cublasGemmAlgo_t arg19 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasGemmEx",19,19)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasGemmEx",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasGemmEx",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasGemmEx",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasGemmEx",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasGemmEx",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasGemmEx",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasGemmEx",7,"void const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasGemmEx",8,"void const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasGemmEx",9,"cudaDataType");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasGemmEx",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasGemmEx",11,"void const *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasGemmEx",12,"cudaDataType");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasGemmEx",13,"int");
  if(!SWIG_isptrtype(L,14)) SWIG_fail_arg("cublasGemmEx",14,"void const *");
  if(!SWIG_isptrtype(L,15)) SWIG_fail_arg("cublasGemmEx",15,"void *");
  if(!lua_isnumber(L,16)) SWIG_fail_arg("cublasGemmEx",16,"cudaDataType");
  if(!lua_isnumber(L,17)) SWIG_fail_arg("cublasGemmEx",17,"int");
  if(!lua_isnumber(L,18)) SWIG_fail_arg("cublasGemmEx",18,"cublasComputeType_t");
  if(!lua_isnumber(L,19)) SWIG_fail_arg("cublasGemmEx",19,"cublasGemmAlgo_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasGemmEx",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7=(void *)SWIG_MustGetPtr(L,7,0,0,7,"cublasGemmEx");
  arg8=(void *)SWIG_MustGetPtr(L,8,0,0,8,"cublasGemmEx");
  arg9 = (cudaDataType)(int)lua_tonumber(L, 9);
  arg10 = (int)lua_tonumber(L, 10);
  arg11=(void *)SWIG_MustGetPtr(L,11,0,0,11,"cublasGemmEx");
  arg12 = (cudaDataType)(int)lua_tonumber(L, 12);
  arg13 = (int)lua_tonumber(L, 13);
  arg14=(void *)SWIG_MustGetPtr(L,14,0,0,14,"cublasGemmEx");
  arg15=(void *)SWIG_MustGetPtr(L,15,0,0,15,"cublasGemmEx");
  arg16 = (cudaDataType)(int)lua_tonumber(L, 16);
  arg17 = (int)lua_tonumber(L, 17);
  arg18 = (cublasComputeType_t)(int)lua_tonumber(L, 18);
  arg19 = (cublasGemmAlgo_t)(int)lua_tonumber(L, 19);
  result = (cublasStatus_t)cublasGemmEx(arg1,arg2,arg3,arg4,arg5,arg6,(void const *)arg7,(void const *)arg8,arg9,arg10,(void const *)arg11,arg12,arg13,(void const *)arg14,arg15,arg16,arg17,arg18,arg19);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCgemmEx(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  void *arg8 = (void *) 0 ;
  cudaDataType arg9 ;
  int arg10 ;
  void *arg11 = (void *) 0 ;
  cudaDataType arg12 ;
  int arg13 ;
  cuComplex *arg14 = (cuComplex *) 0 ;
  void *arg15 = (void *) 0 ;
  cudaDataType arg16 ;
  int arg17 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCgemmEx",17,17)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCgemmEx",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCgemmEx",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCgemmEx",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCgemmEx",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCgemmEx",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasCgemmEx",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCgemmEx",7,"cuComplex const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasCgemmEx",8,"void const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasCgemmEx",9,"cudaDataType");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasCgemmEx",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasCgemmEx",11,"void const *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasCgemmEx",12,"cudaDataType");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasCgemmEx",13,"int");
  if(!SWIG_isptrtype(L,14)) SWIG_fail_arg("cublasCgemmEx",14,"cuComplex const *");
  if(!SWIG_isptrtype(L,15)) SWIG_fail_arg("cublasCgemmEx",15,"void *");
  if(!lua_isnumber(L,16)) SWIG_fail_arg("cublasCgemmEx",16,"cudaDataType");
  if(!lua_isnumber(L,17)) SWIG_fail_arg("cublasCgemmEx",17,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCgemmEx",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemmEx",7,SWIGTYPE_p_cuComplex);
  }
  
  arg8=(void *)SWIG_MustGetPtr(L,8,0,0,8,"cublasCgemmEx");
  arg9 = (cudaDataType)(int)lua_tonumber(L, 9);
  arg10 = (int)lua_tonumber(L, 10);
  arg11=(void *)SWIG_MustGetPtr(L,11,0,0,11,"cublasCgemmEx");
  arg12 = (cudaDataType)(int)lua_tonumber(L, 12);
  arg13 = (int)lua_tonumber(L, 13);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&arg14,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemmEx",14,SWIGTYPE_p_cuComplex);
  }
  
  arg15=(void *)SWIG_MustGetPtr(L,15,0,0,15,"cublasCgemmEx");
  arg16 = (cudaDataType)(int)lua_tonumber(L, 16);
  arg17 = (int)lua_tonumber(L, 17);
  result = (cublasStatus_t)cublasCgemmEx(arg1,arg2,arg3,arg4,arg5,arg6,(cuComplex const *)arg7,(void const *)arg8,arg9,arg10,(void const *)arg11,arg12,arg13,(cuComplex const *)arg14,arg15,arg16,arg17);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasUint8gemmBias(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  cublasOperation_t arg3 ;
  cublasOperation_t arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  unsigned char *arg8 = (unsigned char *) 0 ;
  int arg9 ;
  int arg10 ;
  unsigned char *arg11 = (unsigned char *) 0 ;
  int arg12 ;
  int arg13 ;
  unsigned char *arg14 = (unsigned char *) 0 ;
  int arg15 ;
  int arg16 ;
  int arg17 ;
  int arg18 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasUint8gemmBias",18,18)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasUint8gemmBias",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasUint8gemmBias",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasUint8gemmBias",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasUint8gemmBias",4,"cublasOperation_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasUint8gemmBias",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasUint8gemmBias",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasUint8gemmBias",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasUint8gemmBias",8,"unsigned char const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasUint8gemmBias",9,"int");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasUint8gemmBias",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasUint8gemmBias",11,"unsigned char const *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasUint8gemmBias",12,"int");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasUint8gemmBias",13,"int");
  if(!SWIG_isptrtype(L,14)) SWIG_fail_arg("cublasUint8gemmBias",14,"unsigned char *");
  if(!lua_isnumber(L,15)) SWIG_fail_arg("cublasUint8gemmBias",15,"int");
  if(!lua_isnumber(L,16)) SWIG_fail_arg("cublasUint8gemmBias",16,"int");
  if(!lua_isnumber(L,17)) SWIG_fail_arg("cublasUint8gemmBias",17,"int");
  if(!lua_isnumber(L,18)) SWIG_fail_arg("cublasUint8gemmBias",18,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasUint8gemmBias",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasOperation_t)(int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("cublasUint8gemmBias",8,SWIGTYPE_p_unsigned_char);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  arg10 = (int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("cublasUint8gemmBias",11,SWIGTYPE_p_unsigned_char);
  }
  
  arg12 = (int)lua_tonumber(L, 12);
  arg13 = (int)lua_tonumber(L, 13);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&arg14,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("cublasUint8gemmBias",14,SWIGTYPE_p_unsigned_char);
  }
  
  arg15 = (int)lua_tonumber(L, 15);
  arg16 = (int)lua_tonumber(L, 16);
  arg17 = (int)lua_tonumber(L, 17);
  arg18 = (int)lua_tonumber(L, 18);
  result = (cublasStatus_t)cublasUint8gemmBias(arg1,arg2,arg3,arg4,arg5,arg6,arg7,(unsigned char const *)arg8,arg9,arg10,(unsigned char const *)arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSsyrk_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  float *arg6 = (float *) 0 ;
  float *arg7 = (float *) 0 ;
  int arg8 ;
  float *arg9 = (float *) 0 ;
  float *arg10 = (float *) 0 ;
  int arg11 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSsyrk_v2",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSsyrk_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSsyrk_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasSsyrk_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasSsyrk_v2",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasSsyrk_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasSsyrk_v2",6,"float const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasSsyrk_v2",7,"float const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasSsyrk_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasSsyrk_v2",9,"float const *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasSsyrk_v2",10,"float *");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasSsyrk_v2",11,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSsyrk_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsyrk_v2",6,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsyrk_v2",7,SWIGTYPE_p_float);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsyrk_v2",9,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsyrk_v2",10,SWIGTYPE_p_float);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  result = (cublasStatus_t)cublasSsyrk_v2(arg1,arg2,arg3,arg4,arg5,(float const *)arg6,(float const *)arg7,arg8,(float const *)arg9,arg10,arg11);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDsyrk_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  int arg8 ;
  double *arg9 = (double *) 0 ;
  double *arg10 = (double *) 0 ;
  int arg11 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDsyrk_v2",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDsyrk_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDsyrk_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasDsyrk_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDsyrk_v2",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasDsyrk_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasDsyrk_v2",6,"double const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasDsyrk_v2",7,"double const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasDsyrk_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasDsyrk_v2",9,"double const *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasDsyrk_v2",10,"double *");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasDsyrk_v2",11,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDsyrk_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsyrk_v2",6,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsyrk_v2",7,SWIGTYPE_p_double);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsyrk_v2",9,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsyrk_v2",10,SWIGTYPE_p_double);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  result = (cublasStatus_t)cublasDsyrk_v2(arg1,arg2,arg3,arg4,arg5,(double const *)arg6,(double const *)arg7,arg8,(double const *)arg9,arg10,arg11);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCsyrk_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  cuComplex *arg6 = (cuComplex *) 0 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  int arg8 ;
  cuComplex *arg9 = (cuComplex *) 0 ;
  cuComplex *arg10 = (cuComplex *) 0 ;
  int arg11 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCsyrk_v2",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCsyrk_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCsyrk_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCsyrk_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCsyrk_v2",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCsyrk_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasCsyrk_v2",6,"cuComplex const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCsyrk_v2",7,"cuComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasCsyrk_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasCsyrk_v2",9,"cuComplex const *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasCsyrk_v2",10,"cuComplex *");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasCsyrk_v2",11,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCsyrk_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsyrk_v2",6,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsyrk_v2",7,SWIGTYPE_p_cuComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsyrk_v2",9,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsyrk_v2",10,SWIGTYPE_p_cuComplex);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  result = (cublasStatus_t)cublasCsyrk_v2(arg1,arg2,arg3,arg4,arg5,(cuComplex const *)arg6,(cuComplex const *)arg7,arg8,(cuComplex const *)arg9,arg10,arg11);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZsyrk_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  cuDoubleComplex *arg6 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg7 = (cuDoubleComplex *) 0 ;
  int arg8 ;
  cuDoubleComplex *arg9 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg10 = (cuDoubleComplex *) 0 ;
  int arg11 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZsyrk_v2",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZsyrk_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZsyrk_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZsyrk_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZsyrk_v2",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasZsyrk_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasZsyrk_v2",6,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZsyrk_v2",7,"cuDoubleComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasZsyrk_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasZsyrk_v2",9,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasZsyrk_v2",10,"cuDoubleComplex *");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasZsyrk_v2",11,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZsyrk_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZsyrk_v2",6,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZsyrk_v2",7,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZsyrk_v2",9,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZsyrk_v2",10,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  result = (cublasStatus_t)cublasZsyrk_v2(arg1,arg2,arg3,arg4,arg5,(cuDoubleComplex const *)arg6,(cuDoubleComplex const *)arg7,arg8,(cuDoubleComplex const *)arg9,arg10,arg11);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCsyrkEx(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  cuComplex *arg6 = (cuComplex *) 0 ;
  void *arg7 = (void *) 0 ;
  cudaDataType arg8 ;
  int arg9 ;
  cuComplex *arg10 = (cuComplex *) 0 ;
  void *arg11 = (void *) 0 ;
  cudaDataType arg12 ;
  int arg13 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCsyrkEx",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCsyrkEx",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCsyrkEx",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCsyrkEx",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCsyrkEx",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCsyrkEx",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasCsyrkEx",6,"cuComplex const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCsyrkEx",7,"void const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasCsyrkEx",8,"cudaDataType");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasCsyrkEx",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasCsyrkEx",10,"cuComplex const *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasCsyrkEx",11,"void *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasCsyrkEx",12,"cudaDataType");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasCsyrkEx",13,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCsyrkEx",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsyrkEx",6,SWIGTYPE_p_cuComplex);
  }
  
  arg7=(void *)SWIG_MustGetPtr(L,7,0,0,7,"cublasCsyrkEx");
  arg8 = (cudaDataType)(int)lua_tonumber(L, 8);
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsyrkEx",10,SWIGTYPE_p_cuComplex);
  }
  
  arg11=(void *)SWIG_MustGetPtr(L,11,0,0,11,"cublasCsyrkEx");
  arg12 = (cudaDataType)(int)lua_tonumber(L, 12);
  arg13 = (int)lua_tonumber(L, 13);
  result = (cublasStatus_t)cublasCsyrkEx(arg1,arg2,arg3,arg4,arg5,(cuComplex const *)arg6,(void const *)arg7,arg8,arg9,(cuComplex const *)arg10,arg11,arg12,arg13);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCsyrk3mEx(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  cuComplex *arg6 = (cuComplex *) 0 ;
  void *arg7 = (void *) 0 ;
  cudaDataType arg8 ;
  int arg9 ;
  cuComplex *arg10 = (cuComplex *) 0 ;
  void *arg11 = (void *) 0 ;
  cudaDataType arg12 ;
  int arg13 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCsyrk3mEx",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCsyrk3mEx",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCsyrk3mEx",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCsyrk3mEx",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCsyrk3mEx",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCsyrk3mEx",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasCsyrk3mEx",6,"cuComplex const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCsyrk3mEx",7,"void const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasCsyrk3mEx",8,"cudaDataType");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasCsyrk3mEx",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasCsyrk3mEx",10,"cuComplex const *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasCsyrk3mEx",11,"void *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasCsyrk3mEx",12,"cudaDataType");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasCsyrk3mEx",13,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCsyrk3mEx",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsyrk3mEx",6,SWIGTYPE_p_cuComplex);
  }
  
  arg7=(void *)SWIG_MustGetPtr(L,7,0,0,7,"cublasCsyrk3mEx");
  arg8 = (cudaDataType)(int)lua_tonumber(L, 8);
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsyrk3mEx",10,SWIGTYPE_p_cuComplex);
  }
  
  arg11=(void *)SWIG_MustGetPtr(L,11,0,0,11,"cublasCsyrk3mEx");
  arg12 = (cudaDataType)(int)lua_tonumber(L, 12);
  arg13 = (int)lua_tonumber(L, 13);
  result = (cublasStatus_t)cublasCsyrk3mEx(arg1,arg2,arg3,arg4,arg5,(cuComplex const *)arg6,(void const *)arg7,arg8,arg9,(cuComplex const *)arg10,arg11,arg12,arg13);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCherk_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  float *arg6 = (float *) 0 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  int arg8 ;
  float *arg9 = (float *) 0 ;
  cuComplex *arg10 = (cuComplex *) 0 ;
  int arg11 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCherk_v2",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCherk_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCherk_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCherk_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCherk_v2",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCherk_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasCherk_v2",6,"float const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCherk_v2",7,"cuComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasCherk_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasCherk_v2",9,"float const *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasCherk_v2",10,"cuComplex *");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasCherk_v2",11,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCherk_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasCherk_v2",6,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCherk_v2",7,SWIGTYPE_p_cuComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasCherk_v2",9,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCherk_v2",10,SWIGTYPE_p_cuComplex);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  result = (cublasStatus_t)cublasCherk_v2(arg1,arg2,arg3,arg4,arg5,(float const *)arg6,(cuComplex const *)arg7,arg8,(float const *)arg9,arg10,arg11);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZherk_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  cuDoubleComplex *arg7 = (cuDoubleComplex *) 0 ;
  int arg8 ;
  double *arg9 = (double *) 0 ;
  cuDoubleComplex *arg10 = (cuDoubleComplex *) 0 ;
  int arg11 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZherk_v2",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZherk_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZherk_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZherk_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZherk_v2",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasZherk_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasZherk_v2",6,"double const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZherk_v2",7,"cuDoubleComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasZherk_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasZherk_v2",9,"double const *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasZherk_v2",10,"cuDoubleComplex *");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasZherk_v2",11,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZherk_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasZherk_v2",6,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZherk_v2",7,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasZherk_v2",9,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZherk_v2",10,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  result = (cublasStatus_t)cublasZherk_v2(arg1,arg2,arg3,arg4,arg5,(double const *)arg6,(cuDoubleComplex const *)arg7,arg8,(double const *)arg9,arg10,arg11);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCherkEx(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  float *arg6 = (float *) 0 ;
  void *arg7 = (void *) 0 ;
  cudaDataType arg8 ;
  int arg9 ;
  float *arg10 = (float *) 0 ;
  void *arg11 = (void *) 0 ;
  cudaDataType arg12 ;
  int arg13 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCherkEx",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCherkEx",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCherkEx",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCherkEx",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCherkEx",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCherkEx",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasCherkEx",6,"float const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCherkEx",7,"void const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasCherkEx",8,"cudaDataType");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasCherkEx",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasCherkEx",10,"float const *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasCherkEx",11,"void *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasCherkEx",12,"cudaDataType");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasCherkEx",13,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCherkEx",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasCherkEx",6,SWIGTYPE_p_float);
  }
  
  arg7=(void *)SWIG_MustGetPtr(L,7,0,0,7,"cublasCherkEx");
  arg8 = (cudaDataType)(int)lua_tonumber(L, 8);
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasCherkEx",10,SWIGTYPE_p_float);
  }
  
  arg11=(void *)SWIG_MustGetPtr(L,11,0,0,11,"cublasCherkEx");
  arg12 = (cudaDataType)(int)lua_tonumber(L, 12);
  arg13 = (int)lua_tonumber(L, 13);
  result = (cublasStatus_t)cublasCherkEx(arg1,arg2,arg3,arg4,arg5,(float const *)arg6,(void const *)arg7,arg8,arg9,(float const *)arg10,arg11,arg12,arg13);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCherk3mEx(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  float *arg6 = (float *) 0 ;
  void *arg7 = (void *) 0 ;
  cudaDataType arg8 ;
  int arg9 ;
  float *arg10 = (float *) 0 ;
  void *arg11 = (void *) 0 ;
  cudaDataType arg12 ;
  int arg13 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCherk3mEx",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCherk3mEx",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCherk3mEx",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCherk3mEx",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCherk3mEx",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCherk3mEx",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasCherk3mEx",6,"float const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCherk3mEx",7,"void const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasCherk3mEx",8,"cudaDataType");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasCherk3mEx",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasCherk3mEx",10,"float const *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasCherk3mEx",11,"void *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasCherk3mEx",12,"cudaDataType");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasCherk3mEx",13,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCherk3mEx",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasCherk3mEx",6,SWIGTYPE_p_float);
  }
  
  arg7=(void *)SWIG_MustGetPtr(L,7,0,0,7,"cublasCherk3mEx");
  arg8 = (cudaDataType)(int)lua_tonumber(L, 8);
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasCherk3mEx",10,SWIGTYPE_p_float);
  }
  
  arg11=(void *)SWIG_MustGetPtr(L,11,0,0,11,"cublasCherk3mEx");
  arg12 = (cudaDataType)(int)lua_tonumber(L, 12);
  arg13 = (int)lua_tonumber(L, 13);
  result = (cublasStatus_t)cublasCherk3mEx(arg1,arg2,arg3,arg4,arg5,(float const *)arg6,(void const *)arg7,arg8,arg9,(float const *)arg10,arg11,arg12,arg13);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSsyr2k_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  float *arg6 = (float *) 0 ;
  float *arg7 = (float *) 0 ;
  int arg8 ;
  float *arg9 = (float *) 0 ;
  int arg10 ;
  float *arg11 = (float *) 0 ;
  float *arg12 = (float *) 0 ;
  int arg13 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSsyr2k_v2",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSsyr2k_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSsyr2k_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasSsyr2k_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasSsyr2k_v2",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasSsyr2k_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasSsyr2k_v2",6,"float const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasSsyr2k_v2",7,"float const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasSsyr2k_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasSsyr2k_v2",9,"float const *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasSsyr2k_v2",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasSsyr2k_v2",11,"float const *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasSsyr2k_v2",12,"float *");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasSsyr2k_v2",13,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSsyr2k_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsyr2k_v2",6,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsyr2k_v2",7,SWIGTYPE_p_float);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsyr2k_v2",9,SWIGTYPE_p_float);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsyr2k_v2",11,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsyr2k_v2",12,SWIGTYPE_p_float);
  }
  
  arg13 = (int)lua_tonumber(L, 13);
  result = (cublasStatus_t)cublasSsyr2k_v2(arg1,arg2,arg3,arg4,arg5,(float const *)arg6,(float const *)arg7,arg8,(float const *)arg9,arg10,(float const *)arg11,arg12,arg13);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDsyr2k_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  int arg8 ;
  double *arg9 = (double *) 0 ;
  int arg10 ;
  double *arg11 = (double *) 0 ;
  double *arg12 = (double *) 0 ;
  int arg13 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDsyr2k_v2",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDsyr2k_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDsyr2k_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasDsyr2k_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDsyr2k_v2",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasDsyr2k_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasDsyr2k_v2",6,"double const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasDsyr2k_v2",7,"double const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasDsyr2k_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasDsyr2k_v2",9,"double const *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasDsyr2k_v2",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasDsyr2k_v2",11,"double const *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasDsyr2k_v2",12,"double *");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasDsyr2k_v2",13,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDsyr2k_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsyr2k_v2",6,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsyr2k_v2",7,SWIGTYPE_p_double);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsyr2k_v2",9,SWIGTYPE_p_double);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsyr2k_v2",11,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsyr2k_v2",12,SWIGTYPE_p_double);
  }
  
  arg13 = (int)lua_tonumber(L, 13);
  result = (cublasStatus_t)cublasDsyr2k_v2(arg1,arg2,arg3,arg4,arg5,(double const *)arg6,(double const *)arg7,arg8,(double const *)arg9,arg10,(double const *)arg11,arg12,arg13);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCsyr2k_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  cuComplex *arg6 = (cuComplex *) 0 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  int arg8 ;
  cuComplex *arg9 = (cuComplex *) 0 ;
  int arg10 ;
  cuComplex *arg11 = (cuComplex *) 0 ;
  cuComplex *arg12 = (cuComplex *) 0 ;
  int arg13 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCsyr2k_v2",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCsyr2k_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCsyr2k_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCsyr2k_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCsyr2k_v2",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCsyr2k_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasCsyr2k_v2",6,"cuComplex const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCsyr2k_v2",7,"cuComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasCsyr2k_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasCsyr2k_v2",9,"cuComplex const *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasCsyr2k_v2",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasCsyr2k_v2",11,"cuComplex const *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasCsyr2k_v2",12,"cuComplex *");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasCsyr2k_v2",13,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCsyr2k_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsyr2k_v2",6,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsyr2k_v2",7,SWIGTYPE_p_cuComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsyr2k_v2",9,SWIGTYPE_p_cuComplex);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsyr2k_v2",11,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsyr2k_v2",12,SWIGTYPE_p_cuComplex);
  }
  
  arg13 = (int)lua_tonumber(L, 13);
  result = (cublasStatus_t)cublasCsyr2k_v2(arg1,arg2,arg3,arg4,arg5,(cuComplex const *)arg6,(cuComplex const *)arg7,arg8,(cuComplex const *)arg9,arg10,(cuComplex const *)arg11,arg12,arg13);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZsyr2k_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  cuDoubleComplex *arg6 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg7 = (cuDoubleComplex *) 0 ;
  int arg8 ;
  cuDoubleComplex *arg9 = (cuDoubleComplex *) 0 ;
  int arg10 ;
  cuDoubleComplex *arg11 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg12 = (cuDoubleComplex *) 0 ;
  int arg13 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZsyr2k_v2",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZsyr2k_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZsyr2k_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZsyr2k_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZsyr2k_v2",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasZsyr2k_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasZsyr2k_v2",6,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZsyr2k_v2",7,"cuDoubleComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasZsyr2k_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasZsyr2k_v2",9,"cuDoubleComplex const *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasZsyr2k_v2",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasZsyr2k_v2",11,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasZsyr2k_v2",12,"cuDoubleComplex *");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasZsyr2k_v2",13,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZsyr2k_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZsyr2k_v2",6,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZsyr2k_v2",7,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZsyr2k_v2",9,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZsyr2k_v2",11,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZsyr2k_v2",12,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg13 = (int)lua_tonumber(L, 13);
  result = (cublasStatus_t)cublasZsyr2k_v2(arg1,arg2,arg3,arg4,arg5,(cuDoubleComplex const *)arg6,(cuDoubleComplex const *)arg7,arg8,(cuDoubleComplex const *)arg9,arg10,(cuDoubleComplex const *)arg11,arg12,arg13);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCher2k_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  cuComplex *arg6 = (cuComplex *) 0 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  int arg8 ;
  cuComplex *arg9 = (cuComplex *) 0 ;
  int arg10 ;
  float *arg11 = (float *) 0 ;
  cuComplex *arg12 = (cuComplex *) 0 ;
  int arg13 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCher2k_v2",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCher2k_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCher2k_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCher2k_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCher2k_v2",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCher2k_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasCher2k_v2",6,"cuComplex const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCher2k_v2",7,"cuComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasCher2k_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasCher2k_v2",9,"cuComplex const *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasCher2k_v2",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasCher2k_v2",11,"float const *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasCher2k_v2",12,"cuComplex *");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasCher2k_v2",13,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCher2k_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCher2k_v2",6,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCher2k_v2",7,SWIGTYPE_p_cuComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCher2k_v2",9,SWIGTYPE_p_cuComplex);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasCher2k_v2",11,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCher2k_v2",12,SWIGTYPE_p_cuComplex);
  }
  
  arg13 = (int)lua_tonumber(L, 13);
  result = (cublasStatus_t)cublasCher2k_v2(arg1,arg2,arg3,arg4,arg5,(cuComplex const *)arg6,(cuComplex const *)arg7,arg8,(cuComplex const *)arg9,arg10,(float const *)arg11,arg12,arg13);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZher2k_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  cuDoubleComplex *arg6 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg7 = (cuDoubleComplex *) 0 ;
  int arg8 ;
  cuDoubleComplex *arg9 = (cuDoubleComplex *) 0 ;
  int arg10 ;
  double *arg11 = (double *) 0 ;
  cuDoubleComplex *arg12 = (cuDoubleComplex *) 0 ;
  int arg13 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZher2k_v2",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZher2k_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZher2k_v2",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZher2k_v2",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZher2k_v2",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasZher2k_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasZher2k_v2",6,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZher2k_v2",7,"cuDoubleComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasZher2k_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasZher2k_v2",9,"cuDoubleComplex const *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasZher2k_v2",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasZher2k_v2",11,"double const *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasZher2k_v2",12,"cuDoubleComplex *");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasZher2k_v2",13,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZher2k_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZher2k_v2",6,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZher2k_v2",7,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZher2k_v2",9,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasZher2k_v2",11,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZher2k_v2",12,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg13 = (int)lua_tonumber(L, 13);
  result = (cublasStatus_t)cublasZher2k_v2(arg1,arg2,arg3,arg4,arg5,(cuDoubleComplex const *)arg6,(cuDoubleComplex const *)arg7,arg8,(cuDoubleComplex const *)arg9,arg10,(double const *)arg11,arg12,arg13);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSsyrkx(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  float *arg6 = (float *) 0 ;
  float *arg7 = (float *) 0 ;
  int arg8 ;
  float *arg9 = (float *) 0 ;
  int arg10 ;
  float *arg11 = (float *) 0 ;
  float *arg12 = (float *) 0 ;
  int arg13 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSsyrkx",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSsyrkx",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSsyrkx",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasSsyrkx",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasSsyrkx",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasSsyrkx",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasSsyrkx",6,"float const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasSsyrkx",7,"float const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasSsyrkx",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasSsyrkx",9,"float const *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasSsyrkx",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasSsyrkx",11,"float const *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasSsyrkx",12,"float *");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasSsyrkx",13,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSsyrkx",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsyrkx",6,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsyrkx",7,SWIGTYPE_p_float);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsyrkx",9,SWIGTYPE_p_float);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsyrkx",11,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsyrkx",12,SWIGTYPE_p_float);
  }
  
  arg13 = (int)lua_tonumber(L, 13);
  result = (cublasStatus_t)cublasSsyrkx(arg1,arg2,arg3,arg4,arg5,(float const *)arg6,(float const *)arg7,arg8,(float const *)arg9,arg10,(float const *)arg11,arg12,arg13);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDsyrkx(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  int arg8 ;
  double *arg9 = (double *) 0 ;
  int arg10 ;
  double *arg11 = (double *) 0 ;
  double *arg12 = (double *) 0 ;
  int arg13 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDsyrkx",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDsyrkx",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDsyrkx",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasDsyrkx",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDsyrkx",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasDsyrkx",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasDsyrkx",6,"double const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasDsyrkx",7,"double const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasDsyrkx",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasDsyrkx",9,"double const *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasDsyrkx",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasDsyrkx",11,"double const *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasDsyrkx",12,"double *");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasDsyrkx",13,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDsyrkx",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsyrkx",6,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsyrkx",7,SWIGTYPE_p_double);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsyrkx",9,SWIGTYPE_p_double);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsyrkx",11,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsyrkx",12,SWIGTYPE_p_double);
  }
  
  arg13 = (int)lua_tonumber(L, 13);
  result = (cublasStatus_t)cublasDsyrkx(arg1,arg2,arg3,arg4,arg5,(double const *)arg6,(double const *)arg7,arg8,(double const *)arg9,arg10,(double const *)arg11,arg12,arg13);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCsyrkx(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  cuComplex *arg6 = (cuComplex *) 0 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  int arg8 ;
  cuComplex *arg9 = (cuComplex *) 0 ;
  int arg10 ;
  cuComplex *arg11 = (cuComplex *) 0 ;
  cuComplex *arg12 = (cuComplex *) 0 ;
  int arg13 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCsyrkx",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCsyrkx",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCsyrkx",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCsyrkx",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCsyrkx",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCsyrkx",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasCsyrkx",6,"cuComplex const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCsyrkx",7,"cuComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasCsyrkx",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasCsyrkx",9,"cuComplex const *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasCsyrkx",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasCsyrkx",11,"cuComplex const *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasCsyrkx",12,"cuComplex *");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasCsyrkx",13,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCsyrkx",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsyrkx",6,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsyrkx",7,SWIGTYPE_p_cuComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsyrkx",9,SWIGTYPE_p_cuComplex);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsyrkx",11,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsyrkx",12,SWIGTYPE_p_cuComplex);
  }
  
  arg13 = (int)lua_tonumber(L, 13);
  result = (cublasStatus_t)cublasCsyrkx(arg1,arg2,arg3,arg4,arg5,(cuComplex const *)arg6,(cuComplex const *)arg7,arg8,(cuComplex const *)arg9,arg10,(cuComplex const *)arg11,arg12,arg13);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZsyrkx(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  cuDoubleComplex *arg6 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg7 = (cuDoubleComplex *) 0 ;
  int arg8 ;
  cuDoubleComplex *arg9 = (cuDoubleComplex *) 0 ;
  int arg10 ;
  cuDoubleComplex *arg11 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg12 = (cuDoubleComplex *) 0 ;
  int arg13 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZsyrkx",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZsyrkx",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZsyrkx",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZsyrkx",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZsyrkx",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasZsyrkx",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasZsyrkx",6,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZsyrkx",7,"cuDoubleComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasZsyrkx",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasZsyrkx",9,"cuDoubleComplex const *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasZsyrkx",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasZsyrkx",11,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasZsyrkx",12,"cuDoubleComplex *");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasZsyrkx",13,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZsyrkx",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZsyrkx",6,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZsyrkx",7,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZsyrkx",9,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZsyrkx",11,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZsyrkx",12,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg13 = (int)lua_tonumber(L, 13);
  result = (cublasStatus_t)cublasZsyrkx(arg1,arg2,arg3,arg4,arg5,(cuDoubleComplex const *)arg6,(cuDoubleComplex const *)arg7,arg8,(cuDoubleComplex const *)arg9,arg10,(cuDoubleComplex const *)arg11,arg12,arg13);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCherkx(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  cuComplex *arg6 = (cuComplex *) 0 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  int arg8 ;
  cuComplex *arg9 = (cuComplex *) 0 ;
  int arg10 ;
  float *arg11 = (float *) 0 ;
  cuComplex *arg12 = (cuComplex *) 0 ;
  int arg13 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCherkx",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCherkx",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCherkx",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCherkx",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCherkx",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCherkx",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasCherkx",6,"cuComplex const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCherkx",7,"cuComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasCherkx",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasCherkx",9,"cuComplex const *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasCherkx",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasCherkx",11,"float const *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasCherkx",12,"cuComplex *");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasCherkx",13,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCherkx",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCherkx",6,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCherkx",7,SWIGTYPE_p_cuComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCherkx",9,SWIGTYPE_p_cuComplex);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasCherkx",11,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCherkx",12,SWIGTYPE_p_cuComplex);
  }
  
  arg13 = (int)lua_tonumber(L, 13);
  result = (cublasStatus_t)cublasCherkx(arg1,arg2,arg3,arg4,arg5,(cuComplex const *)arg6,(cuComplex const *)arg7,arg8,(cuComplex const *)arg9,arg10,(float const *)arg11,arg12,arg13);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZherkx(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  cuDoubleComplex *arg6 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg7 = (cuDoubleComplex *) 0 ;
  int arg8 ;
  cuDoubleComplex *arg9 = (cuDoubleComplex *) 0 ;
  int arg10 ;
  double *arg11 = (double *) 0 ;
  cuDoubleComplex *arg12 = (cuDoubleComplex *) 0 ;
  int arg13 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZherkx",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZherkx",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZherkx",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZherkx",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZherkx",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasZherkx",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasZherkx",6,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZherkx",7,"cuDoubleComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasZherkx",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasZherkx",9,"cuDoubleComplex const *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasZherkx",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasZherkx",11,"double const *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasZherkx",12,"cuDoubleComplex *");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasZherkx",13,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZherkx",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZherkx",6,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZherkx",7,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZherkx",9,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasZherkx",11,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZherkx",12,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg13 = (int)lua_tonumber(L, 13);
  result = (cublasStatus_t)cublasZherkx(arg1,arg2,arg3,arg4,arg5,(cuDoubleComplex const *)arg6,(cuDoubleComplex const *)arg7,arg8,(cuDoubleComplex const *)arg9,arg10,(double const *)arg11,arg12,arg13);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSsymm_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasSideMode_t arg2 ;
  cublasFillMode_t arg3 ;
  int arg4 ;
  int arg5 ;
  float *arg6 = (float *) 0 ;
  float *arg7 = (float *) 0 ;
  int arg8 ;
  float *arg9 = (float *) 0 ;
  int arg10 ;
  float *arg11 = (float *) 0 ;
  float *arg12 = (float *) 0 ;
  int arg13 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSsymm_v2",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSsymm_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSsymm_v2",2,"cublasSideMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasSsymm_v2",3,"cublasFillMode_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasSsymm_v2",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasSsymm_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasSsymm_v2",6,"float const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasSsymm_v2",7,"float const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasSsymm_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasSsymm_v2",9,"float const *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasSsymm_v2",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasSsymm_v2",11,"float const *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasSsymm_v2",12,"float *");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasSsymm_v2",13,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSsymm_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasSideMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasFillMode_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsymm_v2",6,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsymm_v2",7,SWIGTYPE_p_float);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsymm_v2",9,SWIGTYPE_p_float);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsymm_v2",11,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSsymm_v2",12,SWIGTYPE_p_float);
  }
  
  arg13 = (int)lua_tonumber(L, 13);
  result = (cublasStatus_t)cublasSsymm_v2(arg1,arg2,arg3,arg4,arg5,(float const *)arg6,(float const *)arg7,arg8,(float const *)arg9,arg10,(float const *)arg11,arg12,arg13);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDsymm_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasSideMode_t arg2 ;
  cublasFillMode_t arg3 ;
  int arg4 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  int arg8 ;
  double *arg9 = (double *) 0 ;
  int arg10 ;
  double *arg11 = (double *) 0 ;
  double *arg12 = (double *) 0 ;
  int arg13 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDsymm_v2",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDsymm_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDsymm_v2",2,"cublasSideMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasDsymm_v2",3,"cublasFillMode_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDsymm_v2",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasDsymm_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasDsymm_v2",6,"double const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasDsymm_v2",7,"double const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasDsymm_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasDsymm_v2",9,"double const *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasDsymm_v2",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasDsymm_v2",11,"double const *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasDsymm_v2",12,"double *");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasDsymm_v2",13,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDsymm_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasSideMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasFillMode_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsymm_v2",6,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsymm_v2",7,SWIGTYPE_p_double);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsymm_v2",9,SWIGTYPE_p_double);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsymm_v2",11,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDsymm_v2",12,SWIGTYPE_p_double);
  }
  
  arg13 = (int)lua_tonumber(L, 13);
  result = (cublasStatus_t)cublasDsymm_v2(arg1,arg2,arg3,arg4,arg5,(double const *)arg6,(double const *)arg7,arg8,(double const *)arg9,arg10,(double const *)arg11,arg12,arg13);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCsymm_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasSideMode_t arg2 ;
  cublasFillMode_t arg3 ;
  int arg4 ;
  int arg5 ;
  cuComplex *arg6 = (cuComplex *) 0 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  int arg8 ;
  cuComplex *arg9 = (cuComplex *) 0 ;
  int arg10 ;
  cuComplex *arg11 = (cuComplex *) 0 ;
  cuComplex *arg12 = (cuComplex *) 0 ;
  int arg13 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCsymm_v2",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCsymm_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCsymm_v2",2,"cublasSideMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCsymm_v2",3,"cublasFillMode_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCsymm_v2",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCsymm_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasCsymm_v2",6,"cuComplex const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCsymm_v2",7,"cuComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasCsymm_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasCsymm_v2",9,"cuComplex const *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasCsymm_v2",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasCsymm_v2",11,"cuComplex const *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasCsymm_v2",12,"cuComplex *");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasCsymm_v2",13,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCsymm_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasSideMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasFillMode_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsymm_v2",6,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsymm_v2",7,SWIGTYPE_p_cuComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsymm_v2",9,SWIGTYPE_p_cuComplex);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsymm_v2",11,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCsymm_v2",12,SWIGTYPE_p_cuComplex);
  }
  
  arg13 = (int)lua_tonumber(L, 13);
  result = (cublasStatus_t)cublasCsymm_v2(arg1,arg2,arg3,arg4,arg5,(cuComplex const *)arg6,(cuComplex const *)arg7,arg8,(cuComplex const *)arg9,arg10,(cuComplex const *)arg11,arg12,arg13);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZsymm_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasSideMode_t arg2 ;
  cublasFillMode_t arg3 ;
  int arg4 ;
  int arg5 ;
  cuDoubleComplex *arg6 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg7 = (cuDoubleComplex *) 0 ;
  int arg8 ;
  cuDoubleComplex *arg9 = (cuDoubleComplex *) 0 ;
  int arg10 ;
  cuDoubleComplex *arg11 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg12 = (cuDoubleComplex *) 0 ;
  int arg13 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZsymm_v2",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZsymm_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZsymm_v2",2,"cublasSideMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZsymm_v2",3,"cublasFillMode_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZsymm_v2",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasZsymm_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasZsymm_v2",6,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZsymm_v2",7,"cuDoubleComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasZsymm_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasZsymm_v2",9,"cuDoubleComplex const *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasZsymm_v2",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasZsymm_v2",11,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasZsymm_v2",12,"cuDoubleComplex *");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasZsymm_v2",13,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZsymm_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasSideMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasFillMode_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZsymm_v2",6,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZsymm_v2",7,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZsymm_v2",9,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZsymm_v2",11,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZsymm_v2",12,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg13 = (int)lua_tonumber(L, 13);
  result = (cublasStatus_t)cublasZsymm_v2(arg1,arg2,arg3,arg4,arg5,(cuDoubleComplex const *)arg6,(cuDoubleComplex const *)arg7,arg8,(cuDoubleComplex const *)arg9,arg10,(cuDoubleComplex const *)arg11,arg12,arg13);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasChemm_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasSideMode_t arg2 ;
  cublasFillMode_t arg3 ;
  int arg4 ;
  int arg5 ;
  cuComplex *arg6 = (cuComplex *) 0 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  int arg8 ;
  cuComplex *arg9 = (cuComplex *) 0 ;
  int arg10 ;
  cuComplex *arg11 = (cuComplex *) 0 ;
  cuComplex *arg12 = (cuComplex *) 0 ;
  int arg13 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasChemm_v2",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasChemm_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasChemm_v2",2,"cublasSideMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasChemm_v2",3,"cublasFillMode_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasChemm_v2",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasChemm_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasChemm_v2",6,"cuComplex const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasChemm_v2",7,"cuComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasChemm_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasChemm_v2",9,"cuComplex const *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasChemm_v2",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasChemm_v2",11,"cuComplex const *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasChemm_v2",12,"cuComplex *");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasChemm_v2",13,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasChemm_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasSideMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasFillMode_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasChemm_v2",6,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasChemm_v2",7,SWIGTYPE_p_cuComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasChemm_v2",9,SWIGTYPE_p_cuComplex);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasChemm_v2",11,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasChemm_v2",12,SWIGTYPE_p_cuComplex);
  }
  
  arg13 = (int)lua_tonumber(L, 13);
  result = (cublasStatus_t)cublasChemm_v2(arg1,arg2,arg3,arg4,arg5,(cuComplex const *)arg6,(cuComplex const *)arg7,arg8,(cuComplex const *)arg9,arg10,(cuComplex const *)arg11,arg12,arg13);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZhemm_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasSideMode_t arg2 ;
  cublasFillMode_t arg3 ;
  int arg4 ;
  int arg5 ;
  cuDoubleComplex *arg6 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg7 = (cuDoubleComplex *) 0 ;
  int arg8 ;
  cuDoubleComplex *arg9 = (cuDoubleComplex *) 0 ;
  int arg10 ;
  cuDoubleComplex *arg11 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg12 = (cuDoubleComplex *) 0 ;
  int arg13 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZhemm_v2",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZhemm_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZhemm_v2",2,"cublasSideMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZhemm_v2",3,"cublasFillMode_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZhemm_v2",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasZhemm_v2",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasZhemm_v2",6,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZhemm_v2",7,"cuDoubleComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasZhemm_v2",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasZhemm_v2",9,"cuDoubleComplex const *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasZhemm_v2",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasZhemm_v2",11,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasZhemm_v2",12,"cuDoubleComplex *");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasZhemm_v2",13,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZhemm_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasSideMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasFillMode_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZhemm_v2",6,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZhemm_v2",7,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZhemm_v2",9,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZhemm_v2",11,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZhemm_v2",12,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg13 = (int)lua_tonumber(L, 13);
  result = (cublasStatus_t)cublasZhemm_v2(arg1,arg2,arg3,arg4,arg5,(cuDoubleComplex const *)arg6,(cuDoubleComplex const *)arg7,arg8,(cuDoubleComplex const *)arg9,arg10,(cuDoubleComplex const *)arg11,arg12,arg13);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasStrsm_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasSideMode_t arg2 ;
  cublasFillMode_t arg3 ;
  cublasOperation_t arg4 ;
  cublasDiagType_t arg5 ;
  int arg6 ;
  int arg7 ;
  float *arg8 = (float *) 0 ;
  float *arg9 = (float *) 0 ;
  int arg10 ;
  float *arg11 = (float *) 0 ;
  int arg12 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasStrsm_v2",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasStrsm_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasStrsm_v2",2,"cublasSideMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasStrsm_v2",3,"cublasFillMode_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasStrsm_v2",4,"cublasOperation_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasStrsm_v2",5,"cublasDiagType_t");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasStrsm_v2",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasStrsm_v2",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasStrsm_v2",8,"float const *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasStrsm_v2",9,"float const *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasStrsm_v2",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasStrsm_v2",11,"float *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasStrsm_v2",12,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasStrsm_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasSideMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasFillMode_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasOperation_t)(int)lua_tonumber(L, 4);
  arg5 = (cublasDiagType_t)(int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasStrsm_v2",8,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasStrsm_v2",9,SWIGTYPE_p_float);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasStrsm_v2",11,SWIGTYPE_p_float);
  }
  
  arg12 = (int)lua_tonumber(L, 12);
  result = (cublasStatus_t)cublasStrsm_v2(arg1,arg2,arg3,arg4,arg5,arg6,arg7,(float const *)arg8,(float const *)arg9,arg10,arg11,arg12);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDtrsm_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasSideMode_t arg2 ;
  cublasFillMode_t arg3 ;
  cublasOperation_t arg4 ;
  cublasDiagType_t arg5 ;
  int arg6 ;
  int arg7 ;
  double *arg8 = (double *) 0 ;
  double *arg9 = (double *) 0 ;
  int arg10 ;
  double *arg11 = (double *) 0 ;
  int arg12 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDtrsm_v2",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDtrsm_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDtrsm_v2",2,"cublasSideMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasDtrsm_v2",3,"cublasFillMode_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDtrsm_v2",4,"cublasOperation_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasDtrsm_v2",5,"cublasDiagType_t");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasDtrsm_v2",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasDtrsm_v2",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasDtrsm_v2",8,"double const *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasDtrsm_v2",9,"double const *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasDtrsm_v2",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasDtrsm_v2",11,"double *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasDtrsm_v2",12,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDtrsm_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasSideMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasFillMode_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasOperation_t)(int)lua_tonumber(L, 4);
  arg5 = (cublasDiagType_t)(int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDtrsm_v2",8,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDtrsm_v2",9,SWIGTYPE_p_double);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDtrsm_v2",11,SWIGTYPE_p_double);
  }
  
  arg12 = (int)lua_tonumber(L, 12);
  result = (cublasStatus_t)cublasDtrsm_v2(arg1,arg2,arg3,arg4,arg5,arg6,arg7,(double const *)arg8,(double const *)arg9,arg10,arg11,arg12);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCtrsm_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasSideMode_t arg2 ;
  cublasFillMode_t arg3 ;
  cublasOperation_t arg4 ;
  cublasDiagType_t arg5 ;
  int arg6 ;
  int arg7 ;
  cuComplex *arg8 = (cuComplex *) 0 ;
  cuComplex *arg9 = (cuComplex *) 0 ;
  int arg10 ;
  cuComplex *arg11 = (cuComplex *) 0 ;
  int arg12 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCtrsm_v2",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCtrsm_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCtrsm_v2",2,"cublasSideMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCtrsm_v2",3,"cublasFillMode_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCtrsm_v2",4,"cublasOperation_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCtrsm_v2",5,"cublasDiagType_t");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasCtrsm_v2",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasCtrsm_v2",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasCtrsm_v2",8,"cuComplex const *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasCtrsm_v2",9,"cuComplex const *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasCtrsm_v2",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasCtrsm_v2",11,"cuComplex *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasCtrsm_v2",12,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCtrsm_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasSideMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasFillMode_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasOperation_t)(int)lua_tonumber(L, 4);
  arg5 = (cublasDiagType_t)(int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCtrsm_v2",8,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCtrsm_v2",9,SWIGTYPE_p_cuComplex);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCtrsm_v2",11,SWIGTYPE_p_cuComplex);
  }
  
  arg12 = (int)lua_tonumber(L, 12);
  result = (cublasStatus_t)cublasCtrsm_v2(arg1,arg2,arg3,arg4,arg5,arg6,arg7,(cuComplex const *)arg8,(cuComplex const *)arg9,arg10,arg11,arg12);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZtrsm_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasSideMode_t arg2 ;
  cublasFillMode_t arg3 ;
  cublasOperation_t arg4 ;
  cublasDiagType_t arg5 ;
  int arg6 ;
  int arg7 ;
  cuDoubleComplex *arg8 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg9 = (cuDoubleComplex *) 0 ;
  int arg10 ;
  cuDoubleComplex *arg11 = (cuDoubleComplex *) 0 ;
  int arg12 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZtrsm_v2",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZtrsm_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZtrsm_v2",2,"cublasSideMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZtrsm_v2",3,"cublasFillMode_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZtrsm_v2",4,"cublasOperation_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasZtrsm_v2",5,"cublasDiagType_t");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasZtrsm_v2",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasZtrsm_v2",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasZtrsm_v2",8,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasZtrsm_v2",9,"cuDoubleComplex const *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasZtrsm_v2",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasZtrsm_v2",11,"cuDoubleComplex *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasZtrsm_v2",12,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZtrsm_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasSideMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasFillMode_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasOperation_t)(int)lua_tonumber(L, 4);
  arg5 = (cublasDiagType_t)(int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZtrsm_v2",8,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZtrsm_v2",9,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZtrsm_v2",11,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg12 = (int)lua_tonumber(L, 12);
  result = (cublasStatus_t)cublasZtrsm_v2(arg1,arg2,arg3,arg4,arg5,arg6,arg7,(cuDoubleComplex const *)arg8,(cuDoubleComplex const *)arg9,arg10,arg11,arg12);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasStrmm_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasSideMode_t arg2 ;
  cublasFillMode_t arg3 ;
  cublasOperation_t arg4 ;
  cublasDiagType_t arg5 ;
  int arg6 ;
  int arg7 ;
  float *arg8 = (float *) 0 ;
  float *arg9 = (float *) 0 ;
  int arg10 ;
  float *arg11 = (float *) 0 ;
  int arg12 ;
  float *arg13 = (float *) 0 ;
  int arg14 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasStrmm_v2",14,14)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasStrmm_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasStrmm_v2",2,"cublasSideMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasStrmm_v2",3,"cublasFillMode_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasStrmm_v2",4,"cublasOperation_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasStrmm_v2",5,"cublasDiagType_t");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasStrmm_v2",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasStrmm_v2",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasStrmm_v2",8,"float const *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasStrmm_v2",9,"float const *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasStrmm_v2",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasStrmm_v2",11,"float const *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasStrmm_v2",12,"int");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("cublasStrmm_v2",13,"float *");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("cublasStrmm_v2",14,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasStrmm_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasSideMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasFillMode_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasOperation_t)(int)lua_tonumber(L, 4);
  arg5 = (cublasDiagType_t)(int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasStrmm_v2",8,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasStrmm_v2",9,SWIGTYPE_p_float);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasStrmm_v2",11,SWIGTYPE_p_float);
  }
  
  arg12 = (int)lua_tonumber(L, 12);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasStrmm_v2",13,SWIGTYPE_p_float);
  }
  
  arg14 = (int)lua_tonumber(L, 14);
  result = (cublasStatus_t)cublasStrmm_v2(arg1,arg2,arg3,arg4,arg5,arg6,arg7,(float const *)arg8,(float const *)arg9,arg10,(float const *)arg11,arg12,arg13,arg14);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDtrmm_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasSideMode_t arg2 ;
  cublasFillMode_t arg3 ;
  cublasOperation_t arg4 ;
  cublasDiagType_t arg5 ;
  int arg6 ;
  int arg7 ;
  double *arg8 = (double *) 0 ;
  double *arg9 = (double *) 0 ;
  int arg10 ;
  double *arg11 = (double *) 0 ;
  int arg12 ;
  double *arg13 = (double *) 0 ;
  int arg14 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDtrmm_v2",14,14)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDtrmm_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDtrmm_v2",2,"cublasSideMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasDtrmm_v2",3,"cublasFillMode_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDtrmm_v2",4,"cublasOperation_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasDtrmm_v2",5,"cublasDiagType_t");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasDtrmm_v2",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasDtrmm_v2",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasDtrmm_v2",8,"double const *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasDtrmm_v2",9,"double const *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasDtrmm_v2",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasDtrmm_v2",11,"double const *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasDtrmm_v2",12,"int");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("cublasDtrmm_v2",13,"double *");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("cublasDtrmm_v2",14,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDtrmm_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasSideMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasFillMode_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasOperation_t)(int)lua_tonumber(L, 4);
  arg5 = (cublasDiagType_t)(int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDtrmm_v2",8,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDtrmm_v2",9,SWIGTYPE_p_double);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDtrmm_v2",11,SWIGTYPE_p_double);
  }
  
  arg12 = (int)lua_tonumber(L, 12);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDtrmm_v2",13,SWIGTYPE_p_double);
  }
  
  arg14 = (int)lua_tonumber(L, 14);
  result = (cublasStatus_t)cublasDtrmm_v2(arg1,arg2,arg3,arg4,arg5,arg6,arg7,(double const *)arg8,(double const *)arg9,arg10,(double const *)arg11,arg12,arg13,arg14);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCtrmm_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasSideMode_t arg2 ;
  cublasFillMode_t arg3 ;
  cublasOperation_t arg4 ;
  cublasDiagType_t arg5 ;
  int arg6 ;
  int arg7 ;
  cuComplex *arg8 = (cuComplex *) 0 ;
  cuComplex *arg9 = (cuComplex *) 0 ;
  int arg10 ;
  cuComplex *arg11 = (cuComplex *) 0 ;
  int arg12 ;
  cuComplex *arg13 = (cuComplex *) 0 ;
  int arg14 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCtrmm_v2",14,14)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCtrmm_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCtrmm_v2",2,"cublasSideMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCtrmm_v2",3,"cublasFillMode_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCtrmm_v2",4,"cublasOperation_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCtrmm_v2",5,"cublasDiagType_t");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasCtrmm_v2",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasCtrmm_v2",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasCtrmm_v2",8,"cuComplex const *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasCtrmm_v2",9,"cuComplex const *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasCtrmm_v2",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasCtrmm_v2",11,"cuComplex const *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasCtrmm_v2",12,"int");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("cublasCtrmm_v2",13,"cuComplex *");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("cublasCtrmm_v2",14,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCtrmm_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasSideMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasFillMode_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasOperation_t)(int)lua_tonumber(L, 4);
  arg5 = (cublasDiagType_t)(int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCtrmm_v2",8,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCtrmm_v2",9,SWIGTYPE_p_cuComplex);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCtrmm_v2",11,SWIGTYPE_p_cuComplex);
  }
  
  arg12 = (int)lua_tonumber(L, 12);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCtrmm_v2",13,SWIGTYPE_p_cuComplex);
  }
  
  arg14 = (int)lua_tonumber(L, 14);
  result = (cublasStatus_t)cublasCtrmm_v2(arg1,arg2,arg3,arg4,arg5,arg6,arg7,(cuComplex const *)arg8,(cuComplex const *)arg9,arg10,(cuComplex const *)arg11,arg12,arg13,arg14);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZtrmm_v2(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasSideMode_t arg2 ;
  cublasFillMode_t arg3 ;
  cublasOperation_t arg4 ;
  cublasDiagType_t arg5 ;
  int arg6 ;
  int arg7 ;
  cuDoubleComplex *arg8 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg9 = (cuDoubleComplex *) 0 ;
  int arg10 ;
  cuDoubleComplex *arg11 = (cuDoubleComplex *) 0 ;
  int arg12 ;
  cuDoubleComplex *arg13 = (cuDoubleComplex *) 0 ;
  int arg14 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZtrmm_v2",14,14)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZtrmm_v2",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZtrmm_v2",2,"cublasSideMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZtrmm_v2",3,"cublasFillMode_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZtrmm_v2",4,"cublasOperation_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasZtrmm_v2",5,"cublasDiagType_t");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasZtrmm_v2",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasZtrmm_v2",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasZtrmm_v2",8,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasZtrmm_v2",9,"cuDoubleComplex const *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasZtrmm_v2",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasZtrmm_v2",11,"cuDoubleComplex const *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasZtrmm_v2",12,"int");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("cublasZtrmm_v2",13,"cuDoubleComplex *");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("cublasZtrmm_v2",14,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZtrmm_v2",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasSideMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasFillMode_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasOperation_t)(int)lua_tonumber(L, 4);
  arg5 = (cublasDiagType_t)(int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZtrmm_v2",8,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZtrmm_v2",9,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZtrmm_v2",11,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg12 = (int)lua_tonumber(L, 12);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZtrmm_v2",13,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg14 = (int)lua_tonumber(L, 14);
  result = (cublasStatus_t)cublasZtrmm_v2(arg1,arg2,arg3,arg4,arg5,arg6,arg7,(cuDoubleComplex const *)arg8,(cuDoubleComplex const *)arg9,arg10,(cuDoubleComplex const *)arg11,arg12,arg13,arg14);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasHgemmBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  __half *arg7 = (__half *) 0 ;
  __half **arg8 ;
  int arg9 ;
  __half **arg10 ;
  int arg11 ;
  __half *arg12 = (__half *) 0 ;
  __half **arg13 ;
  int arg14 ;
  int arg15 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasHgemmBatched",15,15)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasHgemmBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasHgemmBatched",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasHgemmBatched",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasHgemmBatched",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasHgemmBatched",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasHgemmBatched",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasHgemmBatched",7,"__half const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasHgemmBatched",8,"__half const *const []");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasHgemmBatched",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasHgemmBatched",10,"__half const *const []");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasHgemmBatched",11,"int");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasHgemmBatched",12,"__half const *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("cublasHgemmBatched",13,"__half *const []");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("cublasHgemmBatched",14,"int");
  if(!lua_isnumber(L,15)) SWIG_fail_arg("cublasHgemmBatched",15,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasHgemmBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p___half,0))){
    SWIG_fail_ptr("cublasHgemmBatched",7,SWIGTYPE_p___half);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_p___half,0))){
    SWIG_fail_ptr("cublasHgemmBatched",8,SWIGTYPE_p_p___half);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_p___half,0))){
    SWIG_fail_ptr("cublasHgemmBatched",10,SWIGTYPE_p_p___half);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p___half,0))){
    SWIG_fail_ptr("cublasHgemmBatched",12,SWIGTYPE_p___half);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_p___half,0))){
    SWIG_fail_ptr("cublasHgemmBatched",13,SWIGTYPE_p_p___half);
  }
  
  arg14 = (int)lua_tonumber(L, 14);
  arg15 = (int)lua_tonumber(L, 15);
  result = (cublasStatus_t)cublasHgemmBatched(arg1,arg2,arg3,arg4,arg5,arg6,(__half const *)arg7,(__half const *const (*))arg8,arg9,(__half const *const (*))arg10,arg11,(__half const *)arg12,(__half *const (*))arg13,arg14,arg15);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSgemmBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  float *arg7 = (float *) 0 ;
  float **arg8 ;
  int arg9 ;
  float **arg10 ;
  int arg11 ;
  float *arg12 = (float *) 0 ;
  float **arg13 ;
  int arg14 ;
  int arg15 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSgemmBatched",15,15)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSgemmBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSgemmBatched",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasSgemmBatched",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasSgemmBatched",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasSgemmBatched",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasSgemmBatched",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasSgemmBatched",7,"float const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasSgemmBatched",8,"float const *const []");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasSgemmBatched",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasSgemmBatched",10,"float const *const []");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasSgemmBatched",11,"int");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasSgemmBatched",12,"float const *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("cublasSgemmBatched",13,"float *const []");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("cublasSgemmBatched",14,"int");
  if(!lua_isnumber(L,15)) SWIG_fail_arg("cublasSgemmBatched",15,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSgemmBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSgemmBatched",7,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("cublasSgemmBatched",8,SWIGTYPE_p_p_float);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("cublasSgemmBatched",10,SWIGTYPE_p_p_float);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSgemmBatched",12,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("cublasSgemmBatched",13,SWIGTYPE_p_p_float);
  }
  
  arg14 = (int)lua_tonumber(L, 14);
  arg15 = (int)lua_tonumber(L, 15);
  result = (cublasStatus_t)cublasSgemmBatched(arg1,arg2,arg3,arg4,arg5,arg6,(float const *)arg7,(float const *const (*))arg8,arg9,(float const *const (*))arg10,arg11,(float const *)arg12,(float *const (*))arg13,arg14,arg15);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDgemmBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  double *arg7 = (double *) 0 ;
  double **arg8 ;
  int arg9 ;
  double **arg10 ;
  int arg11 ;
  double *arg12 = (double *) 0 ;
  double **arg13 ;
  int arg14 ;
  int arg15 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDgemmBatched",15,15)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDgemmBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDgemmBatched",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasDgemmBatched",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDgemmBatched",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasDgemmBatched",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasDgemmBatched",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasDgemmBatched",7,"double const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasDgemmBatched",8,"double const *const []");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasDgemmBatched",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasDgemmBatched",10,"double const *const []");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasDgemmBatched",11,"int");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasDgemmBatched",12,"double const *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("cublasDgemmBatched",13,"double *const []");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("cublasDgemmBatched",14,"int");
  if(!lua_isnumber(L,15)) SWIG_fail_arg("cublasDgemmBatched",15,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDgemmBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDgemmBatched",7,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("cublasDgemmBatched",8,SWIGTYPE_p_p_double);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("cublasDgemmBatched",10,SWIGTYPE_p_p_double);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDgemmBatched",12,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("cublasDgemmBatched",13,SWIGTYPE_p_p_double);
  }
  
  arg14 = (int)lua_tonumber(L, 14);
  arg15 = (int)lua_tonumber(L, 15);
  result = (cublasStatus_t)cublasDgemmBatched(arg1,arg2,arg3,arg4,arg5,arg6,(double const *)arg7,(double const *const (*))arg8,arg9,(double const *const (*))arg10,arg11,(double const *)arg12,(double *const (*))arg13,arg14,arg15);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCgemmBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  cuComplex **arg8 ;
  int arg9 ;
  cuComplex **arg10 ;
  int arg11 ;
  cuComplex *arg12 = (cuComplex *) 0 ;
  cuComplex **arg13 ;
  int arg14 ;
  int arg15 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCgemmBatched",15,15)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCgemmBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCgemmBatched",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCgemmBatched",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCgemmBatched",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCgemmBatched",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasCgemmBatched",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCgemmBatched",7,"cuComplex const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasCgemmBatched",8,"cuComplex const *const []");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasCgemmBatched",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasCgemmBatched",10,"cuComplex const *const []");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasCgemmBatched",11,"int");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasCgemmBatched",12,"cuComplex const *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("cublasCgemmBatched",13,"cuComplex *const []");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("cublasCgemmBatched",14,"int");
  if(!lua_isnumber(L,15)) SWIG_fail_arg("cublasCgemmBatched",15,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCgemmBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemmBatched",7,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemmBatched",8,SWIGTYPE_p_p_cuComplex);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemmBatched",10,SWIGTYPE_p_p_cuComplex);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemmBatched",12,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemmBatched",13,SWIGTYPE_p_p_cuComplex);
  }
  
  arg14 = (int)lua_tonumber(L, 14);
  arg15 = (int)lua_tonumber(L, 15);
  result = (cublasStatus_t)cublasCgemmBatched(arg1,arg2,arg3,arg4,arg5,arg6,(cuComplex const *)arg7,(cuComplex const *const (*))arg8,arg9,(cuComplex const *const (*))arg10,arg11,(cuComplex const *)arg12,(cuComplex *const (*))arg13,arg14,arg15);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCgemm3mBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  cuComplex **arg8 ;
  int arg9 ;
  cuComplex **arg10 ;
  int arg11 ;
  cuComplex *arg12 = (cuComplex *) 0 ;
  cuComplex **arg13 ;
  int arg14 ;
  int arg15 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCgemm3mBatched",15,15)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCgemm3mBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCgemm3mBatched",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCgemm3mBatched",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCgemm3mBatched",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCgemm3mBatched",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasCgemm3mBatched",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCgemm3mBatched",7,"cuComplex const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasCgemm3mBatched",8,"cuComplex const *const []");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasCgemm3mBatched",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasCgemm3mBatched",10,"cuComplex const *const []");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasCgemm3mBatched",11,"int");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasCgemm3mBatched",12,"cuComplex const *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("cublasCgemm3mBatched",13,"cuComplex *const []");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("cublasCgemm3mBatched",14,"int");
  if(!lua_isnumber(L,15)) SWIG_fail_arg("cublasCgemm3mBatched",15,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCgemm3mBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemm3mBatched",7,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemm3mBatched",8,SWIGTYPE_p_p_cuComplex);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemm3mBatched",10,SWIGTYPE_p_p_cuComplex);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemm3mBatched",12,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemm3mBatched",13,SWIGTYPE_p_p_cuComplex);
  }
  
  arg14 = (int)lua_tonumber(L, 14);
  arg15 = (int)lua_tonumber(L, 15);
  result = (cublasStatus_t)cublasCgemm3mBatched(arg1,arg2,arg3,arg4,arg5,arg6,(cuComplex const *)arg7,(cuComplex const *const (*))arg8,arg9,(cuComplex const *const (*))arg10,arg11,(cuComplex const *)arg12,(cuComplex *const (*))arg13,arg14,arg15);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZgemmBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  cuDoubleComplex *arg7 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex **arg8 ;
  int arg9 ;
  cuDoubleComplex **arg10 ;
  int arg11 ;
  cuDoubleComplex *arg12 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex **arg13 ;
  int arg14 ;
  int arg15 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZgemmBatched",15,15)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZgemmBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZgemmBatched",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZgemmBatched",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZgemmBatched",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasZgemmBatched",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasZgemmBatched",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZgemmBatched",7,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasZgemmBatched",8,"cuDoubleComplex const *const []");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasZgemmBatched",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasZgemmBatched",10,"cuDoubleComplex const *const []");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasZgemmBatched",11,"int");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasZgemmBatched",12,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("cublasZgemmBatched",13,"cuDoubleComplex *const []");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("cublasZgemmBatched",14,"int");
  if(!lua_isnumber(L,15)) SWIG_fail_arg("cublasZgemmBatched",15,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZgemmBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgemmBatched",7,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgemmBatched",8,SWIGTYPE_p_p_cuDoubleComplex);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgemmBatched",10,SWIGTYPE_p_p_cuDoubleComplex);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgemmBatched",12,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgemmBatched",13,SWIGTYPE_p_p_cuDoubleComplex);
  }
  
  arg14 = (int)lua_tonumber(L, 14);
  arg15 = (int)lua_tonumber(L, 15);
  result = (cublasStatus_t)cublasZgemmBatched(arg1,arg2,arg3,arg4,arg5,arg6,(cuDoubleComplex const *)arg7,(cuDoubleComplex const *const (*))arg8,arg9,(cuDoubleComplex const *const (*))arg10,arg11,(cuDoubleComplex const *)arg12,(cuDoubleComplex *const (*))arg13,arg14,arg15);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasGemmBatchedEx(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *arg7 = (void *) 0 ;
  void **arg8 ;
  cudaDataType arg9 ;
  int arg10 ;
  void **arg11 ;
  cudaDataType arg12 ;
  int arg13 ;
  void *arg14 = (void *) 0 ;
  void **arg15 ;
  cudaDataType arg16 ;
  int arg17 ;
  int arg18 ;
  cublasComputeType_t arg19 ;
  cublasGemmAlgo_t arg20 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasGemmBatchedEx",20,20)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasGemmBatchedEx",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasGemmBatchedEx",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasGemmBatchedEx",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasGemmBatchedEx",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasGemmBatchedEx",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasGemmBatchedEx",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasGemmBatchedEx",7,"void const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasGemmBatchedEx",8,"void const *const []");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasGemmBatchedEx",9,"cudaDataType");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasGemmBatchedEx",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasGemmBatchedEx",11,"void const *const []");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasGemmBatchedEx",12,"cudaDataType");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasGemmBatchedEx",13,"int");
  if(!SWIG_isptrtype(L,14)) SWIG_fail_arg("cublasGemmBatchedEx",14,"void const *");
  if(!SWIG_isptrtype(L,15)) SWIG_fail_arg("cublasGemmBatchedEx",15,"void *const []");
  if(!lua_isnumber(L,16)) SWIG_fail_arg("cublasGemmBatchedEx",16,"cudaDataType");
  if(!lua_isnumber(L,17)) SWIG_fail_arg("cublasGemmBatchedEx",17,"int");
  if(!lua_isnumber(L,18)) SWIG_fail_arg("cublasGemmBatchedEx",18,"int");
  if(!lua_isnumber(L,19)) SWIG_fail_arg("cublasGemmBatchedEx",19,"cublasComputeType_t");
  if(!lua_isnumber(L,20)) SWIG_fail_arg("cublasGemmBatchedEx",20,"cublasGemmAlgo_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasGemmBatchedEx",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7=(void *)SWIG_MustGetPtr(L,7,0,0,7,"cublasGemmBatchedEx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_p_void,0))){
    SWIG_fail_ptr("cublasGemmBatchedEx",8,SWIGTYPE_p_p_void);
  }
  
  arg9 = (cudaDataType)(int)lua_tonumber(L, 9);
  arg10 = (int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_p_void,0))){
    SWIG_fail_ptr("cublasGemmBatchedEx",11,SWIGTYPE_p_p_void);
  }
  
  arg12 = (cudaDataType)(int)lua_tonumber(L, 12);
  arg13 = (int)lua_tonumber(L, 13);
  arg14=(void *)SWIG_MustGetPtr(L,14,0,0,14,"cublasGemmBatchedEx");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&arg15,SWIGTYPE_p_p_void,0))){
    SWIG_fail_ptr("cublasGemmBatchedEx",15,SWIGTYPE_p_p_void);
  }
  
  arg16 = (cudaDataType)(int)lua_tonumber(L, 16);
  arg17 = (int)lua_tonumber(L, 17);
  arg18 = (int)lua_tonumber(L, 18);
  arg19 = (cublasComputeType_t)(int)lua_tonumber(L, 19);
  arg20 = (cublasGemmAlgo_t)(int)lua_tonumber(L, 20);
  result = (cublasStatus_t)cublasGemmBatchedEx(arg1,arg2,arg3,arg4,arg5,arg6,(void const *)arg7,(void const *const (*))arg8,arg9,arg10,(void const *const (*))arg11,arg12,arg13,(void const *)arg14,(void *const (*))arg15,arg16,arg17,arg18,arg19,arg20);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasGemmStridedBatchedEx(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *arg7 = (void *) 0 ;
  void *arg8 = (void *) 0 ;
  cudaDataType arg9 ;
  int arg10 ;
  long long arg11 ;
  void *arg12 = (void *) 0 ;
  cudaDataType arg13 ;
  int arg14 ;
  long long arg15 ;
  void *arg16 = (void *) 0 ;
  void *arg17 = (void *) 0 ;
  cudaDataType arg18 ;
  int arg19 ;
  long long arg20 ;
  int arg21 ;
  cublasComputeType_t arg22 ;
  cublasGemmAlgo_t arg23 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasGemmStridedBatchedEx",23,23)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasGemmStridedBatchedEx",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasGemmStridedBatchedEx",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasGemmStridedBatchedEx",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasGemmStridedBatchedEx",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasGemmStridedBatchedEx",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasGemmStridedBatchedEx",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasGemmStridedBatchedEx",7,"void const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasGemmStridedBatchedEx",8,"void const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasGemmStridedBatchedEx",9,"cudaDataType");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasGemmStridedBatchedEx",10,"int");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasGemmStridedBatchedEx",11,"long long");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasGemmStridedBatchedEx",12,"void const *");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasGemmStridedBatchedEx",13,"cudaDataType");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("cublasGemmStridedBatchedEx",14,"int");
  if(!lua_isnumber(L,15)) SWIG_fail_arg("cublasGemmStridedBatchedEx",15,"long long");
  if(!SWIG_isptrtype(L,16)) SWIG_fail_arg("cublasGemmStridedBatchedEx",16,"void const *");
  if(!SWIG_isptrtype(L,17)) SWIG_fail_arg("cublasGemmStridedBatchedEx",17,"void *");
  if(!lua_isnumber(L,18)) SWIG_fail_arg("cublasGemmStridedBatchedEx",18,"cudaDataType");
  if(!lua_isnumber(L,19)) SWIG_fail_arg("cublasGemmStridedBatchedEx",19,"int");
  if(!lua_isnumber(L,20)) SWIG_fail_arg("cublasGemmStridedBatchedEx",20,"long long");
  if(!lua_isnumber(L,21)) SWIG_fail_arg("cublasGemmStridedBatchedEx",21,"int");
  if(!lua_isnumber(L,22)) SWIG_fail_arg("cublasGemmStridedBatchedEx",22,"cublasComputeType_t");
  if(!lua_isnumber(L,23)) SWIG_fail_arg("cublasGemmStridedBatchedEx",23,"cublasGemmAlgo_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasGemmStridedBatchedEx",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7=(void *)SWIG_MustGetPtr(L,7,0,0,7,"cublasGemmStridedBatchedEx");
  arg8=(void *)SWIG_MustGetPtr(L,8,0,0,8,"cublasGemmStridedBatchedEx");
  arg9 = (cudaDataType)(int)lua_tonumber(L, 9);
  arg10 = (int)lua_tonumber(L, 10);
  arg11 = (long long)lua_tonumber(L, 11);
  arg12=(void *)SWIG_MustGetPtr(L,12,0,0,12,"cublasGemmStridedBatchedEx");
  arg13 = (cudaDataType)(int)lua_tonumber(L, 13);
  arg14 = (int)lua_tonumber(L, 14);
  arg15 = (long long)lua_tonumber(L, 15);
  arg16=(void *)SWIG_MustGetPtr(L,16,0,0,16,"cublasGemmStridedBatchedEx");
  arg17=(void *)SWIG_MustGetPtr(L,17,0,0,17,"cublasGemmStridedBatchedEx");
  arg18 = (cudaDataType)(int)lua_tonumber(L, 18);
  arg19 = (int)lua_tonumber(L, 19);
  arg20 = (long long)lua_tonumber(L, 20);
  arg21 = (int)lua_tonumber(L, 21);
  arg22 = (cublasComputeType_t)(int)lua_tonumber(L, 22);
  arg23 = (cublasGemmAlgo_t)(int)lua_tonumber(L, 23);
  result = (cublasStatus_t)cublasGemmStridedBatchedEx(arg1,arg2,arg3,arg4,arg5,arg6,(void const *)arg7,(void const *)arg8,arg9,arg10,arg11,(void const *)arg12,arg13,arg14,arg15,(void const *)arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSgemmStridedBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  float *arg7 = (float *) 0 ;
  float *arg8 = (float *) 0 ;
  int arg9 ;
  long long arg10 ;
  float *arg11 = (float *) 0 ;
  int arg12 ;
  long long arg13 ;
  float *arg14 = (float *) 0 ;
  float *arg15 = (float *) 0 ;
  int arg16 ;
  long long arg17 ;
  int arg18 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSgemmStridedBatched",18,18)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSgemmStridedBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSgemmStridedBatched",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasSgemmStridedBatched",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasSgemmStridedBatched",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasSgemmStridedBatched",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasSgemmStridedBatched",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasSgemmStridedBatched",7,"float const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasSgemmStridedBatched",8,"float const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasSgemmStridedBatched",9,"int");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasSgemmStridedBatched",10,"long long");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasSgemmStridedBatched",11,"float const *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasSgemmStridedBatched",12,"int");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasSgemmStridedBatched",13,"long long");
  if(!SWIG_isptrtype(L,14)) SWIG_fail_arg("cublasSgemmStridedBatched",14,"float const *");
  if(!SWIG_isptrtype(L,15)) SWIG_fail_arg("cublasSgemmStridedBatched",15,"float *");
  if(!lua_isnumber(L,16)) SWIG_fail_arg("cublasSgemmStridedBatched",16,"int");
  if(!lua_isnumber(L,17)) SWIG_fail_arg("cublasSgemmStridedBatched",17,"long long");
  if(!lua_isnumber(L,18)) SWIG_fail_arg("cublasSgemmStridedBatched",18,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSgemmStridedBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSgemmStridedBatched",7,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSgemmStridedBatched",8,SWIGTYPE_p_float);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  arg10 = (long long)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSgemmStridedBatched",11,SWIGTYPE_p_float);
  }
  
  arg12 = (int)lua_tonumber(L, 12);
  arg13 = (long long)lua_tonumber(L, 13);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&arg14,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSgemmStridedBatched",14,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&arg15,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSgemmStridedBatched",15,SWIGTYPE_p_float);
  }
  
  arg16 = (int)lua_tonumber(L, 16);
  arg17 = (long long)lua_tonumber(L, 17);
  arg18 = (int)lua_tonumber(L, 18);
  result = (cublasStatus_t)cublasSgemmStridedBatched(arg1,arg2,arg3,arg4,arg5,arg6,(float const *)arg7,(float const *)arg8,arg9,arg10,(float const *)arg11,arg12,arg13,(float const *)arg14,arg15,arg16,arg17,arg18);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDgemmStridedBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  int arg9 ;
  long long arg10 ;
  double *arg11 = (double *) 0 ;
  int arg12 ;
  long long arg13 ;
  double *arg14 = (double *) 0 ;
  double *arg15 = (double *) 0 ;
  int arg16 ;
  long long arg17 ;
  int arg18 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDgemmStridedBatched",18,18)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDgemmStridedBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDgemmStridedBatched",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasDgemmStridedBatched",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDgemmStridedBatched",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasDgemmStridedBatched",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasDgemmStridedBatched",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasDgemmStridedBatched",7,"double const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasDgemmStridedBatched",8,"double const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasDgemmStridedBatched",9,"int");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasDgemmStridedBatched",10,"long long");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasDgemmStridedBatched",11,"double const *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasDgemmStridedBatched",12,"int");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasDgemmStridedBatched",13,"long long");
  if(!SWIG_isptrtype(L,14)) SWIG_fail_arg("cublasDgemmStridedBatched",14,"double const *");
  if(!SWIG_isptrtype(L,15)) SWIG_fail_arg("cublasDgemmStridedBatched",15,"double *");
  if(!lua_isnumber(L,16)) SWIG_fail_arg("cublasDgemmStridedBatched",16,"int");
  if(!lua_isnumber(L,17)) SWIG_fail_arg("cublasDgemmStridedBatched",17,"long long");
  if(!lua_isnumber(L,18)) SWIG_fail_arg("cublasDgemmStridedBatched",18,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDgemmStridedBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDgemmStridedBatched",7,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDgemmStridedBatched",8,SWIGTYPE_p_double);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  arg10 = (long long)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDgemmStridedBatched",11,SWIGTYPE_p_double);
  }
  
  arg12 = (int)lua_tonumber(L, 12);
  arg13 = (long long)lua_tonumber(L, 13);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&arg14,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDgemmStridedBatched",14,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&arg15,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDgemmStridedBatched",15,SWIGTYPE_p_double);
  }
  
  arg16 = (int)lua_tonumber(L, 16);
  arg17 = (long long)lua_tonumber(L, 17);
  arg18 = (int)lua_tonumber(L, 18);
  result = (cublasStatus_t)cublasDgemmStridedBatched(arg1,arg2,arg3,arg4,arg5,arg6,(double const *)arg7,(double const *)arg8,arg9,arg10,(double const *)arg11,arg12,arg13,(double const *)arg14,arg15,arg16,arg17,arg18);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCgemmStridedBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  cuComplex *arg8 = (cuComplex *) 0 ;
  int arg9 ;
  long long arg10 ;
  cuComplex *arg11 = (cuComplex *) 0 ;
  int arg12 ;
  long long arg13 ;
  cuComplex *arg14 = (cuComplex *) 0 ;
  cuComplex *arg15 = (cuComplex *) 0 ;
  int arg16 ;
  long long arg17 ;
  int arg18 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCgemmStridedBatched",18,18)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCgemmStridedBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCgemmStridedBatched",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCgemmStridedBatched",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCgemmStridedBatched",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCgemmStridedBatched",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasCgemmStridedBatched",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCgemmStridedBatched",7,"cuComplex const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasCgemmStridedBatched",8,"cuComplex const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasCgemmStridedBatched",9,"int");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasCgemmStridedBatched",10,"long long");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasCgemmStridedBatched",11,"cuComplex const *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasCgemmStridedBatched",12,"int");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasCgemmStridedBatched",13,"long long");
  if(!SWIG_isptrtype(L,14)) SWIG_fail_arg("cublasCgemmStridedBatched",14,"cuComplex const *");
  if(!SWIG_isptrtype(L,15)) SWIG_fail_arg("cublasCgemmStridedBatched",15,"cuComplex *");
  if(!lua_isnumber(L,16)) SWIG_fail_arg("cublasCgemmStridedBatched",16,"int");
  if(!lua_isnumber(L,17)) SWIG_fail_arg("cublasCgemmStridedBatched",17,"long long");
  if(!lua_isnumber(L,18)) SWIG_fail_arg("cublasCgemmStridedBatched",18,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCgemmStridedBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemmStridedBatched",7,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemmStridedBatched",8,SWIGTYPE_p_cuComplex);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  arg10 = (long long)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemmStridedBatched",11,SWIGTYPE_p_cuComplex);
  }
  
  arg12 = (int)lua_tonumber(L, 12);
  arg13 = (long long)lua_tonumber(L, 13);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&arg14,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemmStridedBatched",14,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&arg15,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemmStridedBatched",15,SWIGTYPE_p_cuComplex);
  }
  
  arg16 = (int)lua_tonumber(L, 16);
  arg17 = (long long)lua_tonumber(L, 17);
  arg18 = (int)lua_tonumber(L, 18);
  result = (cublasStatus_t)cublasCgemmStridedBatched(arg1,arg2,arg3,arg4,arg5,arg6,(cuComplex const *)arg7,(cuComplex const *)arg8,arg9,arg10,(cuComplex const *)arg11,arg12,arg13,(cuComplex const *)arg14,arg15,arg16,arg17,arg18);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCgemm3mStridedBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  cuComplex *arg8 = (cuComplex *) 0 ;
  int arg9 ;
  long long arg10 ;
  cuComplex *arg11 = (cuComplex *) 0 ;
  int arg12 ;
  long long arg13 ;
  cuComplex *arg14 = (cuComplex *) 0 ;
  cuComplex *arg15 = (cuComplex *) 0 ;
  int arg16 ;
  long long arg17 ;
  int arg18 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCgemm3mStridedBatched",18,18)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCgemm3mStridedBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCgemm3mStridedBatched",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCgemm3mStridedBatched",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCgemm3mStridedBatched",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCgemm3mStridedBatched",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasCgemm3mStridedBatched",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCgemm3mStridedBatched",7,"cuComplex const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasCgemm3mStridedBatched",8,"cuComplex const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasCgemm3mStridedBatched",9,"int");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasCgemm3mStridedBatched",10,"long long");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasCgemm3mStridedBatched",11,"cuComplex const *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasCgemm3mStridedBatched",12,"int");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasCgemm3mStridedBatched",13,"long long");
  if(!SWIG_isptrtype(L,14)) SWIG_fail_arg("cublasCgemm3mStridedBatched",14,"cuComplex const *");
  if(!SWIG_isptrtype(L,15)) SWIG_fail_arg("cublasCgemm3mStridedBatched",15,"cuComplex *");
  if(!lua_isnumber(L,16)) SWIG_fail_arg("cublasCgemm3mStridedBatched",16,"int");
  if(!lua_isnumber(L,17)) SWIG_fail_arg("cublasCgemm3mStridedBatched",17,"long long");
  if(!lua_isnumber(L,18)) SWIG_fail_arg("cublasCgemm3mStridedBatched",18,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCgemm3mStridedBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemm3mStridedBatched",7,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemm3mStridedBatched",8,SWIGTYPE_p_cuComplex);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  arg10 = (long long)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemm3mStridedBatched",11,SWIGTYPE_p_cuComplex);
  }
  
  arg12 = (int)lua_tonumber(L, 12);
  arg13 = (long long)lua_tonumber(L, 13);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&arg14,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemm3mStridedBatched",14,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&arg15,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgemm3mStridedBatched",15,SWIGTYPE_p_cuComplex);
  }
  
  arg16 = (int)lua_tonumber(L, 16);
  arg17 = (long long)lua_tonumber(L, 17);
  arg18 = (int)lua_tonumber(L, 18);
  result = (cublasStatus_t)cublasCgemm3mStridedBatched(arg1,arg2,arg3,arg4,arg5,arg6,(cuComplex const *)arg7,(cuComplex const *)arg8,arg9,arg10,(cuComplex const *)arg11,arg12,arg13,(cuComplex const *)arg14,arg15,arg16,arg17,arg18);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZgemmStridedBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  cuDoubleComplex *arg7 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg8 = (cuDoubleComplex *) 0 ;
  int arg9 ;
  long long arg10 ;
  cuDoubleComplex *arg11 = (cuDoubleComplex *) 0 ;
  int arg12 ;
  long long arg13 ;
  cuDoubleComplex *arg14 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg15 = (cuDoubleComplex *) 0 ;
  int arg16 ;
  long long arg17 ;
  int arg18 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZgemmStridedBatched",18,18)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZgemmStridedBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZgemmStridedBatched",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZgemmStridedBatched",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZgemmStridedBatched",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasZgemmStridedBatched",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasZgemmStridedBatched",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZgemmStridedBatched",7,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasZgemmStridedBatched",8,"cuDoubleComplex const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasZgemmStridedBatched",9,"int");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasZgemmStridedBatched",10,"long long");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasZgemmStridedBatched",11,"cuDoubleComplex const *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasZgemmStridedBatched",12,"int");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasZgemmStridedBatched",13,"long long");
  if(!SWIG_isptrtype(L,14)) SWIG_fail_arg("cublasZgemmStridedBatched",14,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,15)) SWIG_fail_arg("cublasZgemmStridedBatched",15,"cuDoubleComplex *");
  if(!lua_isnumber(L,16)) SWIG_fail_arg("cublasZgemmStridedBatched",16,"int");
  if(!lua_isnumber(L,17)) SWIG_fail_arg("cublasZgemmStridedBatched",17,"long long");
  if(!lua_isnumber(L,18)) SWIG_fail_arg("cublasZgemmStridedBatched",18,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZgemmStridedBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgemmStridedBatched",7,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgemmStridedBatched",8,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  arg10 = (long long)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgemmStridedBatched",11,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg12 = (int)lua_tonumber(L, 12);
  arg13 = (long long)lua_tonumber(L, 13);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&arg14,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgemmStridedBatched",14,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&arg15,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgemmStridedBatched",15,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg16 = (int)lua_tonumber(L, 16);
  arg17 = (long long)lua_tonumber(L, 17);
  arg18 = (int)lua_tonumber(L, 18);
  result = (cublasStatus_t)cublasZgemmStridedBatched(arg1,arg2,arg3,arg4,arg5,arg6,(cuDoubleComplex const *)arg7,(cuDoubleComplex const *)arg8,arg9,arg10,(cuDoubleComplex const *)arg11,arg12,arg13,(cuDoubleComplex const *)arg14,arg15,arg16,arg17,arg18);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasHgemmStridedBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  __half *arg7 = (__half *) 0 ;
  __half *arg8 = (__half *) 0 ;
  int arg9 ;
  long long arg10 ;
  __half *arg11 = (__half *) 0 ;
  int arg12 ;
  long long arg13 ;
  __half *arg14 = (__half *) 0 ;
  __half *arg15 = (__half *) 0 ;
  int arg16 ;
  long long arg17 ;
  int arg18 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasHgemmStridedBatched",18,18)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasHgemmStridedBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasHgemmStridedBatched",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasHgemmStridedBatched",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasHgemmStridedBatched",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasHgemmStridedBatched",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasHgemmStridedBatched",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasHgemmStridedBatched",7,"__half const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasHgemmStridedBatched",8,"__half const *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasHgemmStridedBatched",9,"int");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasHgemmStridedBatched",10,"long long");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasHgemmStridedBatched",11,"__half const *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasHgemmStridedBatched",12,"int");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasHgemmStridedBatched",13,"long long");
  if(!SWIG_isptrtype(L,14)) SWIG_fail_arg("cublasHgemmStridedBatched",14,"__half const *");
  if(!SWIG_isptrtype(L,15)) SWIG_fail_arg("cublasHgemmStridedBatched",15,"__half *");
  if(!lua_isnumber(L,16)) SWIG_fail_arg("cublasHgemmStridedBatched",16,"int");
  if(!lua_isnumber(L,17)) SWIG_fail_arg("cublasHgemmStridedBatched",17,"long long");
  if(!lua_isnumber(L,18)) SWIG_fail_arg("cublasHgemmStridedBatched",18,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasHgemmStridedBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p___half,0))){
    SWIG_fail_ptr("cublasHgemmStridedBatched",7,SWIGTYPE_p___half);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p___half,0))){
    SWIG_fail_ptr("cublasHgemmStridedBatched",8,SWIGTYPE_p___half);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  arg10 = (long long)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p___half,0))){
    SWIG_fail_ptr("cublasHgemmStridedBatched",11,SWIGTYPE_p___half);
  }
  
  arg12 = (int)lua_tonumber(L, 12);
  arg13 = (long long)lua_tonumber(L, 13);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&arg14,SWIGTYPE_p___half,0))){
    SWIG_fail_ptr("cublasHgemmStridedBatched",14,SWIGTYPE_p___half);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&arg15,SWIGTYPE_p___half,0))){
    SWIG_fail_ptr("cublasHgemmStridedBatched",15,SWIGTYPE_p___half);
  }
  
  arg16 = (int)lua_tonumber(L, 16);
  arg17 = (long long)lua_tonumber(L, 17);
  arg18 = (int)lua_tonumber(L, 18);
  result = (cublasStatus_t)cublasHgemmStridedBatched(arg1,arg2,arg3,arg4,arg5,arg6,(__half const *)arg7,(__half const *)arg8,arg9,arg10,(__half const *)arg11,arg12,arg13,(__half const *)arg14,arg15,arg16,arg17,arg18);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSgeam(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  float *arg6 = (float *) 0 ;
  float *arg7 = (float *) 0 ;
  int arg8 ;
  float *arg9 = (float *) 0 ;
  float *arg10 = (float *) 0 ;
  int arg11 ;
  float *arg12 = (float *) 0 ;
  int arg13 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSgeam",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSgeam",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSgeam",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasSgeam",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasSgeam",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasSgeam",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasSgeam",6,"float const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasSgeam",7,"float const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasSgeam",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasSgeam",9,"float const *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasSgeam",10,"float const *");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasSgeam",11,"int");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasSgeam",12,"float *");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasSgeam",13,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSgeam",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSgeam",6,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSgeam",7,SWIGTYPE_p_float);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSgeam",9,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSgeam",10,SWIGTYPE_p_float);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSgeam",12,SWIGTYPE_p_float);
  }
  
  arg13 = (int)lua_tonumber(L, 13);
  result = (cublasStatus_t)cublasSgeam(arg1,arg2,arg3,arg4,arg5,(float const *)arg6,(float const *)arg7,arg8,(float const *)arg9,(float const *)arg10,arg11,arg12,arg13);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDgeam(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  int arg8 ;
  double *arg9 = (double *) 0 ;
  double *arg10 = (double *) 0 ;
  int arg11 ;
  double *arg12 = (double *) 0 ;
  int arg13 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDgeam",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDgeam",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDgeam",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasDgeam",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDgeam",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasDgeam",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasDgeam",6,"double const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasDgeam",7,"double const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasDgeam",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasDgeam",9,"double const *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasDgeam",10,"double const *");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasDgeam",11,"int");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasDgeam",12,"double *");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasDgeam",13,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDgeam",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDgeam",6,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDgeam",7,SWIGTYPE_p_double);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDgeam",9,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDgeam",10,SWIGTYPE_p_double);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDgeam",12,SWIGTYPE_p_double);
  }
  
  arg13 = (int)lua_tonumber(L, 13);
  result = (cublasStatus_t)cublasDgeam(arg1,arg2,arg3,arg4,arg5,(double const *)arg6,(double const *)arg7,arg8,(double const *)arg9,(double const *)arg10,arg11,arg12,arg13);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCgeam(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  cuComplex *arg6 = (cuComplex *) 0 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  int arg8 ;
  cuComplex *arg9 = (cuComplex *) 0 ;
  cuComplex *arg10 = (cuComplex *) 0 ;
  int arg11 ;
  cuComplex *arg12 = (cuComplex *) 0 ;
  int arg13 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCgeam",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCgeam",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCgeam",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCgeam",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCgeam",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCgeam",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasCgeam",6,"cuComplex const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCgeam",7,"cuComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasCgeam",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasCgeam",9,"cuComplex const *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasCgeam",10,"cuComplex const *");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasCgeam",11,"int");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasCgeam",12,"cuComplex *");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasCgeam",13,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCgeam",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgeam",6,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgeam",7,SWIGTYPE_p_cuComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgeam",9,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgeam",10,SWIGTYPE_p_cuComplex);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgeam",12,SWIGTYPE_p_cuComplex);
  }
  
  arg13 = (int)lua_tonumber(L, 13);
  result = (cublasStatus_t)cublasCgeam(arg1,arg2,arg3,arg4,arg5,(cuComplex const *)arg6,(cuComplex const *)arg7,arg8,(cuComplex const *)arg9,(cuComplex const *)arg10,arg11,arg12,arg13);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZgeam(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  cublasOperation_t arg3 ;
  int arg4 ;
  int arg5 ;
  cuDoubleComplex *arg6 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg7 = (cuDoubleComplex *) 0 ;
  int arg8 ;
  cuDoubleComplex *arg9 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg10 = (cuDoubleComplex *) 0 ;
  int arg11 ;
  cuDoubleComplex *arg12 = (cuDoubleComplex *) 0 ;
  int arg13 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZgeam",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZgeam",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZgeam",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZgeam",3,"cublasOperation_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZgeam",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasZgeam",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasZgeam",6,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZgeam",7,"cuDoubleComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasZgeam",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasZgeam",9,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasZgeam",10,"cuDoubleComplex const *");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasZgeam",11,"int");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("cublasZgeam",12,"cuDoubleComplex *");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasZgeam",13,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZgeam",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasOperation_t)(int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgeam",6,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgeam",7,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgeam",9,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgeam",10,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgeam",12,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg13 = (int)lua_tonumber(L, 13);
  result = (cublasStatus_t)cublasZgeam(arg1,arg2,arg3,arg4,arg5,(cuDoubleComplex const *)arg6,(cuDoubleComplex const *)arg7,arg8,(cuDoubleComplex const *)arg9,(cuDoubleComplex const *)arg10,arg11,arg12,arg13);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSgetrfBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  float **arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  int arg7 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSgetrfBatched",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSgetrfBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSgetrfBatched",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasSgetrfBatched",3,"float *const []");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasSgetrfBatched",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasSgetrfBatched",5,"int *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasSgetrfBatched",6,"int *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasSgetrfBatched",7,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSgetrfBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("cublasSgetrfBatched",3,SWIGTYPE_p_p_float);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasSgetrfBatched",5,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasSgetrfBatched",6,SWIGTYPE_p_int);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  result = (cublasStatus_t)cublasSgetrfBatched(arg1,arg2,(float *const (*))arg3,arg4,arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDgetrfBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  double **arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  int arg7 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDgetrfBatched",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDgetrfBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDgetrfBatched",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasDgetrfBatched",3,"double *const []");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDgetrfBatched",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasDgetrfBatched",5,"int *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasDgetrfBatched",6,"int *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasDgetrfBatched",7,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDgetrfBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("cublasDgetrfBatched",3,SWIGTYPE_p_p_double);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasDgetrfBatched",5,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasDgetrfBatched",6,SWIGTYPE_p_int);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  result = (cublasStatus_t)cublasDgetrfBatched(arg1,arg2,(double *const (*))arg3,arg4,arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCgetrfBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  cuComplex **arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  int arg7 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCgetrfBatched",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCgetrfBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCgetrfBatched",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasCgetrfBatched",3,"cuComplex *const []");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCgetrfBatched",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasCgetrfBatched",5,"int *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasCgetrfBatched",6,"int *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasCgetrfBatched",7,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCgetrfBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgetrfBatched",3,SWIGTYPE_p_p_cuComplex);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasCgetrfBatched",5,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasCgetrfBatched",6,SWIGTYPE_p_int);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  result = (cublasStatus_t)cublasCgetrfBatched(arg1,arg2,(cuComplex *const (*))arg3,arg4,arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZgetrfBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  cuDoubleComplex **arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  int arg7 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZgetrfBatched",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZgetrfBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZgetrfBatched",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasZgetrfBatched",3,"cuDoubleComplex *const []");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZgetrfBatched",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasZgetrfBatched",5,"int *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasZgetrfBatched",6,"int *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasZgetrfBatched",7,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZgetrfBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgetrfBatched",3,SWIGTYPE_p_p_cuDoubleComplex);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasZgetrfBatched",5,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasZgetrfBatched",6,SWIGTYPE_p_int);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  result = (cublasStatus_t)cublasZgetrfBatched(arg1,arg2,(cuDoubleComplex *const (*))arg3,arg4,arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSgetriBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  float **arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  float **arg6 ;
  int arg7 ;
  int *arg8 = (int *) 0 ;
  int arg9 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSgetriBatched",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSgetriBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSgetriBatched",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasSgetriBatched",3,"float const *const []");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasSgetriBatched",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasSgetriBatched",5,"int const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasSgetriBatched",6,"float *const []");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasSgetriBatched",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasSgetriBatched",8,"int *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasSgetriBatched",9,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSgetriBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("cublasSgetriBatched",3,SWIGTYPE_p_p_float);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasSgetriBatched",5,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("cublasSgetriBatched",6,SWIGTYPE_p_p_float);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasSgetriBatched",8,SWIGTYPE_p_int);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  result = (cublasStatus_t)cublasSgetriBatched(arg1,arg2,(float const *const (*))arg3,arg4,(int const *)arg5,(float *const (*))arg6,arg7,arg8,arg9);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDgetriBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  double **arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  double **arg6 ;
  int arg7 ;
  int *arg8 = (int *) 0 ;
  int arg9 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDgetriBatched",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDgetriBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDgetriBatched",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasDgetriBatched",3,"double const *const []");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDgetriBatched",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasDgetriBatched",5,"int const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasDgetriBatched",6,"double *const []");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasDgetriBatched",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasDgetriBatched",8,"int *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasDgetriBatched",9,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDgetriBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("cublasDgetriBatched",3,SWIGTYPE_p_p_double);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasDgetriBatched",5,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("cublasDgetriBatched",6,SWIGTYPE_p_p_double);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasDgetriBatched",8,SWIGTYPE_p_int);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  result = (cublasStatus_t)cublasDgetriBatched(arg1,arg2,(double const *const (*))arg3,arg4,(int const *)arg5,(double *const (*))arg6,arg7,arg8,arg9);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCgetriBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  cuComplex **arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  cuComplex **arg6 ;
  int arg7 ;
  int *arg8 = (int *) 0 ;
  int arg9 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCgetriBatched",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCgetriBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCgetriBatched",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasCgetriBatched",3,"cuComplex const *const []");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCgetriBatched",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasCgetriBatched",5,"int const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasCgetriBatched",6,"cuComplex *const []");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasCgetriBatched",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasCgetriBatched",8,"int *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasCgetriBatched",9,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCgetriBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgetriBatched",3,SWIGTYPE_p_p_cuComplex);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasCgetriBatched",5,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgetriBatched",6,SWIGTYPE_p_p_cuComplex);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasCgetriBatched",8,SWIGTYPE_p_int);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  result = (cublasStatus_t)cublasCgetriBatched(arg1,arg2,(cuComplex const *const (*))arg3,arg4,(int const *)arg5,(cuComplex *const (*))arg6,arg7,arg8,arg9);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZgetriBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  cuDoubleComplex **arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  cuDoubleComplex **arg6 ;
  int arg7 ;
  int *arg8 = (int *) 0 ;
  int arg9 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZgetriBatched",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZgetriBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZgetriBatched",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasZgetriBatched",3,"cuDoubleComplex const *const []");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZgetriBatched",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasZgetriBatched",5,"int const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasZgetriBatched",6,"cuDoubleComplex *const []");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasZgetriBatched",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasZgetriBatched",8,"int *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasZgetriBatched",9,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZgetriBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgetriBatched",3,SWIGTYPE_p_p_cuDoubleComplex);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasZgetriBatched",5,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgetriBatched",6,SWIGTYPE_p_p_cuDoubleComplex);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasZgetriBatched",8,SWIGTYPE_p_int);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  result = (cublasStatus_t)cublasZgetriBatched(arg1,arg2,(cuDoubleComplex const *const (*))arg3,arg4,(int const *)arg5,(cuDoubleComplex *const (*))arg6,arg7,arg8,arg9);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSgetrsBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  int arg3 ;
  int arg4 ;
  float **arg5 ;
  int arg6 ;
  int *arg7 = (int *) 0 ;
  float **arg8 ;
  int arg9 ;
  int *arg10 = (int *) 0 ;
  int arg11 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSgetrsBatched",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSgetrsBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSgetrsBatched",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasSgetrsBatched",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasSgetrsBatched",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasSgetrsBatched",5,"float const *const []");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasSgetrsBatched",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasSgetrsBatched",7,"int const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasSgetrsBatched",8,"float *const []");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasSgetrsBatched",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasSgetrsBatched",10,"int *");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasSgetrsBatched",11,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSgetrsBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("cublasSgetrsBatched",5,SWIGTYPE_p_p_float);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasSgetrsBatched",7,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("cublasSgetrsBatched",8,SWIGTYPE_p_p_float);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasSgetrsBatched",10,SWIGTYPE_p_int);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  result = (cublasStatus_t)cublasSgetrsBatched(arg1,arg2,arg3,arg4,(float const *const (*))arg5,arg6,(int const *)arg7,(float *const (*))arg8,arg9,arg10,arg11);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDgetrsBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  int arg3 ;
  int arg4 ;
  double **arg5 ;
  int arg6 ;
  int *arg7 = (int *) 0 ;
  double **arg8 ;
  int arg9 ;
  int *arg10 = (int *) 0 ;
  int arg11 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDgetrsBatched",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDgetrsBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDgetrsBatched",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasDgetrsBatched",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDgetrsBatched",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasDgetrsBatched",5,"double const *const []");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasDgetrsBatched",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasDgetrsBatched",7,"int const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasDgetrsBatched",8,"double *const []");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasDgetrsBatched",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasDgetrsBatched",10,"int *");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasDgetrsBatched",11,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDgetrsBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("cublasDgetrsBatched",5,SWIGTYPE_p_p_double);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasDgetrsBatched",7,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("cublasDgetrsBatched",8,SWIGTYPE_p_p_double);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasDgetrsBatched",10,SWIGTYPE_p_int);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  result = (cublasStatus_t)cublasDgetrsBatched(arg1,arg2,arg3,arg4,(double const *const (*))arg5,arg6,(int const *)arg7,(double *const (*))arg8,arg9,arg10,arg11);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCgetrsBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  int arg3 ;
  int arg4 ;
  cuComplex **arg5 ;
  int arg6 ;
  int *arg7 = (int *) 0 ;
  cuComplex **arg8 ;
  int arg9 ;
  int *arg10 = (int *) 0 ;
  int arg11 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCgetrsBatched",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCgetrsBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCgetrsBatched",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCgetrsBatched",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCgetrsBatched",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasCgetrsBatched",5,"cuComplex const *const []");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasCgetrsBatched",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCgetrsBatched",7,"int const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasCgetrsBatched",8,"cuComplex *const []");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasCgetrsBatched",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasCgetrsBatched",10,"int *");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasCgetrsBatched",11,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCgetrsBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgetrsBatched",5,SWIGTYPE_p_p_cuComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasCgetrsBatched",7,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgetrsBatched",8,SWIGTYPE_p_p_cuComplex);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasCgetrsBatched",10,SWIGTYPE_p_int);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  result = (cublasStatus_t)cublasCgetrsBatched(arg1,arg2,arg3,arg4,(cuComplex const *const (*))arg5,arg6,(int const *)arg7,(cuComplex *const (*))arg8,arg9,arg10,arg11);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZgetrsBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  int arg3 ;
  int arg4 ;
  cuDoubleComplex **arg5 ;
  int arg6 ;
  int *arg7 = (int *) 0 ;
  cuDoubleComplex **arg8 ;
  int arg9 ;
  int *arg10 = (int *) 0 ;
  int arg11 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZgetrsBatched",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZgetrsBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZgetrsBatched",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZgetrsBatched",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZgetrsBatched",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasZgetrsBatched",5,"cuDoubleComplex const *const []");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasZgetrsBatched",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZgetrsBatched",7,"int const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasZgetrsBatched",8,"cuDoubleComplex *const []");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasZgetrsBatched",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasZgetrsBatched",10,"int *");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("cublasZgetrsBatched",11,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZgetrsBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgetrsBatched",5,SWIGTYPE_p_p_cuDoubleComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasZgetrsBatched",7,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgetrsBatched",8,SWIGTYPE_p_p_cuDoubleComplex);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasZgetrsBatched",10,SWIGTYPE_p_int);
  }
  
  arg11 = (int)lua_tonumber(L, 11);
  result = (cublasStatus_t)cublasZgetrsBatched(arg1,arg2,arg3,arg4,(cuDoubleComplex const *const (*))arg5,arg6,(int const *)arg7,(cuDoubleComplex *const (*))arg8,arg9,arg10,arg11);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasStrsmBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasSideMode_t arg2 ;
  cublasFillMode_t arg3 ;
  cublasOperation_t arg4 ;
  cublasDiagType_t arg5 ;
  int arg6 ;
  int arg7 ;
  float *arg8 = (float *) 0 ;
  float **arg9 ;
  int arg10 ;
  float **arg11 ;
  int arg12 ;
  int arg13 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasStrsmBatched",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasStrsmBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasStrsmBatched",2,"cublasSideMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasStrsmBatched",3,"cublasFillMode_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasStrsmBatched",4,"cublasOperation_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasStrsmBatched",5,"cublasDiagType_t");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasStrsmBatched",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasStrsmBatched",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasStrsmBatched",8,"float const *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasStrsmBatched",9,"float const *const []");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasStrsmBatched",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasStrsmBatched",11,"float *const []");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasStrsmBatched",12,"int");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasStrsmBatched",13,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasStrsmBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasSideMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasFillMode_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasOperation_t)(int)lua_tonumber(L, 4);
  arg5 = (cublasDiagType_t)(int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasStrsmBatched",8,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("cublasStrsmBatched",9,SWIGTYPE_p_p_float);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("cublasStrsmBatched",11,SWIGTYPE_p_p_float);
  }
  
  arg12 = (int)lua_tonumber(L, 12);
  arg13 = (int)lua_tonumber(L, 13);
  result = (cublasStatus_t)cublasStrsmBatched(arg1,arg2,arg3,arg4,arg5,arg6,arg7,(float const *)arg8,(float const *const (*))arg9,arg10,(float *const (*))arg11,arg12,arg13);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDtrsmBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasSideMode_t arg2 ;
  cublasFillMode_t arg3 ;
  cublasOperation_t arg4 ;
  cublasDiagType_t arg5 ;
  int arg6 ;
  int arg7 ;
  double *arg8 = (double *) 0 ;
  double **arg9 ;
  int arg10 ;
  double **arg11 ;
  int arg12 ;
  int arg13 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDtrsmBatched",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDtrsmBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDtrsmBatched",2,"cublasSideMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasDtrsmBatched",3,"cublasFillMode_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDtrsmBatched",4,"cublasOperation_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasDtrsmBatched",5,"cublasDiagType_t");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasDtrsmBatched",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasDtrsmBatched",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasDtrsmBatched",8,"double const *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasDtrsmBatched",9,"double const *const []");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasDtrsmBatched",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasDtrsmBatched",11,"double *const []");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasDtrsmBatched",12,"int");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasDtrsmBatched",13,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDtrsmBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasSideMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasFillMode_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasOperation_t)(int)lua_tonumber(L, 4);
  arg5 = (cublasDiagType_t)(int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDtrsmBatched",8,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("cublasDtrsmBatched",9,SWIGTYPE_p_p_double);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("cublasDtrsmBatched",11,SWIGTYPE_p_p_double);
  }
  
  arg12 = (int)lua_tonumber(L, 12);
  arg13 = (int)lua_tonumber(L, 13);
  result = (cublasStatus_t)cublasDtrsmBatched(arg1,arg2,arg3,arg4,arg5,arg6,arg7,(double const *)arg8,(double const *const (*))arg9,arg10,(double *const (*))arg11,arg12,arg13);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCtrsmBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasSideMode_t arg2 ;
  cublasFillMode_t arg3 ;
  cublasOperation_t arg4 ;
  cublasDiagType_t arg5 ;
  int arg6 ;
  int arg7 ;
  cuComplex *arg8 = (cuComplex *) 0 ;
  cuComplex **arg9 ;
  int arg10 ;
  cuComplex **arg11 ;
  int arg12 ;
  int arg13 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCtrsmBatched",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCtrsmBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCtrsmBatched",2,"cublasSideMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCtrsmBatched",3,"cublasFillMode_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCtrsmBatched",4,"cublasOperation_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCtrsmBatched",5,"cublasDiagType_t");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasCtrsmBatched",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasCtrsmBatched",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasCtrsmBatched",8,"cuComplex const *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasCtrsmBatched",9,"cuComplex const *const []");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasCtrsmBatched",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasCtrsmBatched",11,"cuComplex *const []");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasCtrsmBatched",12,"int");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasCtrsmBatched",13,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCtrsmBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasSideMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasFillMode_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasOperation_t)(int)lua_tonumber(L, 4);
  arg5 = (cublasDiagType_t)(int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCtrsmBatched",8,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCtrsmBatched",9,SWIGTYPE_p_p_cuComplex);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCtrsmBatched",11,SWIGTYPE_p_p_cuComplex);
  }
  
  arg12 = (int)lua_tonumber(L, 12);
  arg13 = (int)lua_tonumber(L, 13);
  result = (cublasStatus_t)cublasCtrsmBatched(arg1,arg2,arg3,arg4,arg5,arg6,arg7,(cuComplex const *)arg8,(cuComplex const *const (*))arg9,arg10,(cuComplex *const (*))arg11,arg12,arg13);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZtrsmBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasSideMode_t arg2 ;
  cublasFillMode_t arg3 ;
  cublasOperation_t arg4 ;
  cublasDiagType_t arg5 ;
  int arg6 ;
  int arg7 ;
  cuDoubleComplex *arg8 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex **arg9 ;
  int arg10 ;
  cuDoubleComplex **arg11 ;
  int arg12 ;
  int arg13 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZtrsmBatched",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZtrsmBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZtrsmBatched",2,"cublasSideMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZtrsmBatched",3,"cublasFillMode_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZtrsmBatched",4,"cublasOperation_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasZtrsmBatched",5,"cublasDiagType_t");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasZtrsmBatched",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasZtrsmBatched",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasZtrsmBatched",8,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasZtrsmBatched",9,"cuDoubleComplex const *const []");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasZtrsmBatched",10,"int");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasZtrsmBatched",11,"cuDoubleComplex *const []");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasZtrsmBatched",12,"int");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("cublasZtrsmBatched",13,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZtrsmBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasSideMode_t)(int)lua_tonumber(L, 2);
  arg3 = (cublasFillMode_t)(int)lua_tonumber(L, 3);
  arg4 = (cublasOperation_t)(int)lua_tonumber(L, 4);
  arg5 = (cublasDiagType_t)(int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZtrsmBatched",8,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZtrsmBatched",9,SWIGTYPE_p_p_cuDoubleComplex);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZtrsmBatched",11,SWIGTYPE_p_p_cuDoubleComplex);
  }
  
  arg12 = (int)lua_tonumber(L, 12);
  arg13 = (int)lua_tonumber(L, 13);
  result = (cublasStatus_t)cublasZtrsmBatched(arg1,arg2,arg3,arg4,arg5,arg6,arg7,(cuDoubleComplex const *)arg8,(cuDoubleComplex const *const (*))arg9,arg10,(cuDoubleComplex *const (*))arg11,arg12,arg13);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSmatinvBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  float **arg3 ;
  int arg4 ;
  float **arg5 ;
  int arg6 ;
  int *arg7 = (int *) 0 ;
  int arg8 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSmatinvBatched",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSmatinvBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSmatinvBatched",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasSmatinvBatched",3,"float const *const []");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasSmatinvBatched",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasSmatinvBatched",5,"float *const []");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasSmatinvBatched",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasSmatinvBatched",7,"int *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasSmatinvBatched",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSmatinvBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("cublasSmatinvBatched",3,SWIGTYPE_p_p_float);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("cublasSmatinvBatched",5,SWIGTYPE_p_p_float);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasSmatinvBatched",7,SWIGTYPE_p_int);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  result = (cublasStatus_t)cublasSmatinvBatched(arg1,arg2,(float const *const (*))arg3,arg4,(float *const (*))arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDmatinvBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  double **arg3 ;
  int arg4 ;
  double **arg5 ;
  int arg6 ;
  int *arg7 = (int *) 0 ;
  int arg8 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDmatinvBatched",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDmatinvBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDmatinvBatched",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasDmatinvBatched",3,"double const *const []");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDmatinvBatched",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasDmatinvBatched",5,"double *const []");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasDmatinvBatched",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasDmatinvBatched",7,"int *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasDmatinvBatched",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDmatinvBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("cublasDmatinvBatched",3,SWIGTYPE_p_p_double);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("cublasDmatinvBatched",5,SWIGTYPE_p_p_double);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasDmatinvBatched",7,SWIGTYPE_p_int);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  result = (cublasStatus_t)cublasDmatinvBatched(arg1,arg2,(double const *const (*))arg3,arg4,(double *const (*))arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCmatinvBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  cuComplex **arg3 ;
  int arg4 ;
  cuComplex **arg5 ;
  int arg6 ;
  int *arg7 = (int *) 0 ;
  int arg8 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCmatinvBatched",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCmatinvBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCmatinvBatched",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasCmatinvBatched",3,"cuComplex const *const []");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCmatinvBatched",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasCmatinvBatched",5,"cuComplex *const []");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasCmatinvBatched",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCmatinvBatched",7,"int *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasCmatinvBatched",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCmatinvBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCmatinvBatched",3,SWIGTYPE_p_p_cuComplex);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCmatinvBatched",5,SWIGTYPE_p_p_cuComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasCmatinvBatched",7,SWIGTYPE_p_int);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  result = (cublasStatus_t)cublasCmatinvBatched(arg1,arg2,(cuComplex const *const (*))arg3,arg4,(cuComplex *const (*))arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZmatinvBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  cuDoubleComplex **arg3 ;
  int arg4 ;
  cuDoubleComplex **arg5 ;
  int arg6 ;
  int *arg7 = (int *) 0 ;
  int arg8 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZmatinvBatched",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZmatinvBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZmatinvBatched",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("cublasZmatinvBatched",3,"cuDoubleComplex const *const []");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZmatinvBatched",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasZmatinvBatched",5,"cuDoubleComplex *const []");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasZmatinvBatched",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZmatinvBatched",7,"int *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasZmatinvBatched",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZmatinvBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZmatinvBatched",3,SWIGTYPE_p_p_cuDoubleComplex);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZmatinvBatched",5,SWIGTYPE_p_p_cuDoubleComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasZmatinvBatched",7,SWIGTYPE_p_int);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  result = (cublasStatus_t)cublasZmatinvBatched(arg1,arg2,(cuDoubleComplex const *const (*))arg3,arg4,(cuDoubleComplex *const (*))arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSgeqrfBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  int arg3 ;
  float **arg4 ;
  int arg5 ;
  float **arg6 ;
  int *arg7 = (int *) 0 ;
  int arg8 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSgeqrfBatched",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSgeqrfBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSgeqrfBatched",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasSgeqrfBatched",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasSgeqrfBatched",4,"float *const []");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasSgeqrfBatched",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasSgeqrfBatched",6,"float *const []");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasSgeqrfBatched",7,"int *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasSgeqrfBatched",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSgeqrfBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("cublasSgeqrfBatched",4,SWIGTYPE_p_p_float);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("cublasSgeqrfBatched",6,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasSgeqrfBatched",7,SWIGTYPE_p_int);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  result = (cublasStatus_t)cublasSgeqrfBatched(arg1,arg2,arg3,(float *const (*))arg4,arg5,(float *const (*))arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDgeqrfBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  int arg3 ;
  double **arg4 ;
  int arg5 ;
  double **arg6 ;
  int *arg7 = (int *) 0 ;
  int arg8 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDgeqrfBatched",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDgeqrfBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDgeqrfBatched",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasDgeqrfBatched",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasDgeqrfBatched",4,"double *const []");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasDgeqrfBatched",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasDgeqrfBatched",6,"double *const []");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasDgeqrfBatched",7,"int *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasDgeqrfBatched",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDgeqrfBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("cublasDgeqrfBatched",4,SWIGTYPE_p_p_double);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("cublasDgeqrfBatched",6,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasDgeqrfBatched",7,SWIGTYPE_p_int);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  result = (cublasStatus_t)cublasDgeqrfBatched(arg1,arg2,arg3,(double *const (*))arg4,arg5,(double *const (*))arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCgeqrfBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  int arg3 ;
  cuComplex **arg4 ;
  int arg5 ;
  cuComplex **arg6 ;
  int *arg7 = (int *) 0 ;
  int arg8 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCgeqrfBatched",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCgeqrfBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCgeqrfBatched",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCgeqrfBatched",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasCgeqrfBatched",4,"cuComplex *const []");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCgeqrfBatched",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasCgeqrfBatched",6,"cuComplex *const []");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCgeqrfBatched",7,"int *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasCgeqrfBatched",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCgeqrfBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgeqrfBatched",4,SWIGTYPE_p_p_cuComplex);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgeqrfBatched",6,SWIGTYPE_p_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasCgeqrfBatched",7,SWIGTYPE_p_int);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  result = (cublasStatus_t)cublasCgeqrfBatched(arg1,arg2,arg3,(cuComplex *const (*))arg4,arg5,(cuComplex *const (*))arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZgeqrfBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  int arg2 ;
  int arg3 ;
  cuDoubleComplex **arg4 ;
  int arg5 ;
  cuDoubleComplex **arg6 ;
  int *arg7 = (int *) 0 ;
  int arg8 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZgeqrfBatched",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZgeqrfBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZgeqrfBatched",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZgeqrfBatched",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasZgeqrfBatched",4,"cuDoubleComplex *const []");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasZgeqrfBatched",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasZgeqrfBatched",6,"cuDoubleComplex *const []");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZgeqrfBatched",7,"int *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasZgeqrfBatched",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZgeqrfBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgeqrfBatched",4,SWIGTYPE_p_p_cuDoubleComplex);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgeqrfBatched",6,SWIGTYPE_p_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasZgeqrfBatched",7,SWIGTYPE_p_int);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  result = (cublasStatus_t)cublasZgeqrfBatched(arg1,arg2,arg3,(cuDoubleComplex *const (*))arg4,arg5,(cuDoubleComplex *const (*))arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSgelsBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  float **arg6 ;
  int arg7 ;
  float **arg8 ;
  int arg9 ;
  int *arg10 = (int *) 0 ;
  int *arg11 = (int *) 0 ;
  int arg12 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSgelsBatched",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSgelsBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSgelsBatched",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasSgelsBatched",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasSgelsBatched",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasSgelsBatched",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasSgelsBatched",6,"float *const []");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasSgelsBatched",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasSgelsBatched",8,"float *const []");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasSgelsBatched",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasSgelsBatched",10,"int *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasSgelsBatched",11,"int *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasSgelsBatched",12,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSgelsBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("cublasSgelsBatched",6,SWIGTYPE_p_p_float);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("cublasSgelsBatched",8,SWIGTYPE_p_p_float);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasSgelsBatched",10,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasSgelsBatched",11,SWIGTYPE_p_int);
  }
  
  arg12 = (int)lua_tonumber(L, 12);
  result = (cublasStatus_t)cublasSgelsBatched(arg1,arg2,arg3,arg4,arg5,(float *const (*))arg6,arg7,(float *const (*))arg8,arg9,arg10,arg11,arg12);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDgelsBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double **arg6 ;
  int arg7 ;
  double **arg8 ;
  int arg9 ;
  int *arg10 = (int *) 0 ;
  int *arg11 = (int *) 0 ;
  int arg12 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDgelsBatched",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDgelsBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDgelsBatched",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasDgelsBatched",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDgelsBatched",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasDgelsBatched",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasDgelsBatched",6,"double *const []");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasDgelsBatched",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasDgelsBatched",8,"double *const []");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasDgelsBatched",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasDgelsBatched",10,"int *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasDgelsBatched",11,"int *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasDgelsBatched",12,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDgelsBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("cublasDgelsBatched",6,SWIGTYPE_p_p_double);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("cublasDgelsBatched",8,SWIGTYPE_p_p_double);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasDgelsBatched",10,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasDgelsBatched",11,SWIGTYPE_p_int);
  }
  
  arg12 = (int)lua_tonumber(L, 12);
  result = (cublasStatus_t)cublasDgelsBatched(arg1,arg2,arg3,arg4,arg5,(double *const (*))arg6,arg7,(double *const (*))arg8,arg9,arg10,arg11,arg12);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCgelsBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  cuComplex **arg6 ;
  int arg7 ;
  cuComplex **arg8 ;
  int arg9 ;
  int *arg10 = (int *) 0 ;
  int *arg11 = (int *) 0 ;
  int arg12 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCgelsBatched",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCgelsBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCgelsBatched",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCgelsBatched",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCgelsBatched",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCgelsBatched",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasCgelsBatched",6,"cuComplex *const []");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasCgelsBatched",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasCgelsBatched",8,"cuComplex *const []");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasCgelsBatched",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasCgelsBatched",10,"int *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasCgelsBatched",11,"int *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasCgelsBatched",12,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCgelsBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgelsBatched",6,SWIGTYPE_p_p_cuComplex);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCgelsBatched",8,SWIGTYPE_p_p_cuComplex);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasCgelsBatched",10,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasCgelsBatched",11,SWIGTYPE_p_int);
  }
  
  arg12 = (int)lua_tonumber(L, 12);
  result = (cublasStatus_t)cublasCgelsBatched(arg1,arg2,arg3,arg4,arg5,(cuComplex *const (*))arg6,arg7,(cuComplex *const (*))arg8,arg9,arg10,arg11,arg12);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZgelsBatched(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasOperation_t arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  cuDoubleComplex **arg6 ;
  int arg7 ;
  cuDoubleComplex **arg8 ;
  int arg9 ;
  int *arg10 = (int *) 0 ;
  int *arg11 = (int *) 0 ;
  int arg12 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZgelsBatched",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZgelsBatched",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZgelsBatched",2,"cublasOperation_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZgelsBatched",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZgelsBatched",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasZgelsBatched",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasZgelsBatched",6,"cuDoubleComplex *const []");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cublasZgelsBatched",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cublasZgelsBatched",8,"cuDoubleComplex *const []");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("cublasZgelsBatched",9,"int");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("cublasZgelsBatched",10,"int *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("cublasZgelsBatched",11,"int *");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("cublasZgelsBatched",12,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZgelsBatched",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasOperation_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgelsBatched",6,SWIGTYPE_p_p_cuDoubleComplex);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZgelsBatched",8,SWIGTYPE_p_p_cuDoubleComplex);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasZgelsBatched",10,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cublasZgelsBatched",11,SWIGTYPE_p_int);
  }
  
  arg12 = (int)lua_tonumber(L, 12);
  result = (cublasStatus_t)cublasZgelsBatched(arg1,arg2,arg3,arg4,arg5,(cuDoubleComplex *const (*))arg6,arg7,(cuDoubleComplex *const (*))arg8,arg9,arg10,arg11,arg12);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasSdgmm(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasSideMode_t arg2 ;
  int arg3 ;
  int arg4 ;
  float *arg5 = (float *) 0 ;
  int arg6 ;
  float *arg7 = (float *) 0 ;
  int arg8 ;
  float *arg9 = (float *) 0 ;
  int arg10 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasSdgmm",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasSdgmm",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasSdgmm",2,"cublasSideMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasSdgmm",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasSdgmm",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasSdgmm",5,"float const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasSdgmm",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasSdgmm",7,"float const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasSdgmm",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasSdgmm",9,"float *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasSdgmm",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasSdgmm",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasSideMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSdgmm",5,SWIGTYPE_p_float);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSdgmm",7,SWIGTYPE_p_float);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasSdgmm",9,SWIGTYPE_p_float);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  result = (cublasStatus_t)cublasSdgmm(arg1,arg2,arg3,arg4,(float const *)arg5,arg6,(float const *)arg7,arg8,arg9,arg10);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDdgmm(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasSideMode_t arg2 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  double *arg7 = (double *) 0 ;
  int arg8 ;
  double *arg9 = (double *) 0 ;
  int arg10 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDdgmm",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDdgmm",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDdgmm",2,"cublasSideMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasDdgmm",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasDdgmm",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasDdgmm",5,"double const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasDdgmm",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasDdgmm",7,"double const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasDdgmm",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasDdgmm",9,"double *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasDdgmm",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDdgmm",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasSideMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDdgmm",5,SWIGTYPE_p_double);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDdgmm",7,SWIGTYPE_p_double);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDdgmm",9,SWIGTYPE_p_double);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  result = (cublasStatus_t)cublasDdgmm(arg1,arg2,arg3,arg4,(double const *)arg5,arg6,(double const *)arg7,arg8,arg9,arg10);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCdgmm(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasSideMode_t arg2 ;
  int arg3 ;
  int arg4 ;
  cuComplex *arg5 = (cuComplex *) 0 ;
  int arg6 ;
  cuComplex *arg7 = (cuComplex *) 0 ;
  int arg8 ;
  cuComplex *arg9 = (cuComplex *) 0 ;
  int arg10 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCdgmm",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCdgmm",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCdgmm",2,"cublasSideMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCdgmm",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasCdgmm",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasCdgmm",5,"cuComplex const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasCdgmm",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasCdgmm",7,"cuComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasCdgmm",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasCdgmm",9,"cuComplex *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasCdgmm",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCdgmm",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasSideMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCdgmm",5,SWIGTYPE_p_cuComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCdgmm",7,SWIGTYPE_p_cuComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCdgmm",9,SWIGTYPE_p_cuComplex);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  result = (cublasStatus_t)cublasCdgmm(arg1,arg2,arg3,arg4,(cuComplex const *)arg5,arg6,(cuComplex const *)arg7,arg8,arg9,arg10);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZdgmm(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasSideMode_t arg2 ;
  int arg3 ;
  int arg4 ;
  cuDoubleComplex *arg5 = (cuDoubleComplex *) 0 ;
  int arg6 ;
  cuDoubleComplex *arg7 = (cuDoubleComplex *) 0 ;
  int arg8 ;
  cuDoubleComplex *arg9 = (cuDoubleComplex *) 0 ;
  int arg10 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZdgmm",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZdgmm",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZdgmm",2,"cublasSideMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZdgmm",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cublasZdgmm",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasZdgmm",5,"cuDoubleComplex const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasZdgmm",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("cublasZdgmm",7,"cuDoubleComplex const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cublasZdgmm",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("cublasZdgmm",9,"cuDoubleComplex *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("cublasZdgmm",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZdgmm",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasSideMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZdgmm",5,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZdgmm",7,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZdgmm",9,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  result = (cublasStatus_t)cublasZdgmm(arg1,arg2,arg3,arg4,(cuDoubleComplex const *)arg5,arg6,(cuDoubleComplex const *)arg7,arg8,arg9,arg10);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasStpttr(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  int arg6 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasStpttr",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasStpttr",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasStpttr",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasStpttr",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasStpttr",4,"float const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasStpttr",5,"float *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasStpttr",6,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasStpttr",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasStpttr",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasStpttr",5,SWIGTYPE_p_float);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  result = (cublasStatus_t)cublasStpttr(arg1,arg2,arg3,(float const *)arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDtpttr(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDtpttr",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDtpttr",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDtpttr",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasDtpttr",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasDtpttr",4,"double const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasDtpttr",5,"double *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasDtpttr",6,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDtpttr",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDtpttr",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDtpttr",5,SWIGTYPE_p_double);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  result = (cublasStatus_t)cublasDtpttr(arg1,arg2,arg3,(double const *)arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCtpttr(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  cuComplex *arg4 = (cuComplex *) 0 ;
  cuComplex *arg5 = (cuComplex *) 0 ;
  int arg6 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCtpttr",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCtpttr",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCtpttr",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCtpttr",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasCtpttr",4,"cuComplex const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasCtpttr",5,"cuComplex *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasCtpttr",6,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCtpttr",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCtpttr",4,SWIGTYPE_p_cuComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCtpttr",5,SWIGTYPE_p_cuComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  result = (cublasStatus_t)cublasCtpttr(arg1,arg2,arg3,(cuComplex const *)arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZtpttr(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  cuDoubleComplex *arg4 = (cuDoubleComplex *) 0 ;
  cuDoubleComplex *arg5 = (cuDoubleComplex *) 0 ;
  int arg6 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZtpttr",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZtpttr",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZtpttr",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZtpttr",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasZtpttr",4,"cuDoubleComplex const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cublasZtpttr",5,"cuDoubleComplex *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cublasZtpttr",6,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZtpttr",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZtpttr",4,SWIGTYPE_p_cuDoubleComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZtpttr",5,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  result = (cublasStatus_t)cublasZtpttr(arg1,arg2,arg3,(cuDoubleComplex const *)arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasStrttp(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  float *arg4 = (float *) 0 ;
  int arg5 ;
  float *arg6 = (float *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasStrttp",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasStrttp",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasStrttp",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasStrttp",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasStrttp",4,"float const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasStrttp",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasStrttp",6,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasStrttp",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasStrttp",4,SWIGTYPE_p_float);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cublasStrttp",6,SWIGTYPE_p_float);
  }
  
  result = (cublasStatus_t)cublasStrttp(arg1,arg2,arg3,(float const *)arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasDtrttp(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasDtrttp",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasDtrttp",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasDtrttp",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasDtrttp",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasDtrttp",4,"double const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasDtrttp",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasDtrttp",6,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasDtrttp",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDtrttp",4,SWIGTYPE_p_double);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cublasDtrttp",6,SWIGTYPE_p_double);
  }
  
  result = (cublasStatus_t)cublasDtrttp(arg1,arg2,arg3,(double const *)arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasCtrttp(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  cuComplex *arg4 = (cuComplex *) 0 ;
  int arg5 ;
  cuComplex *arg6 = (cuComplex *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasCtrttp",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasCtrttp",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasCtrttp",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasCtrttp",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasCtrttp",4,"cuComplex const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasCtrttp",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasCtrttp",6,"cuComplex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasCtrttp",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCtrttp",4,SWIGTYPE_p_cuComplex);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuComplex,0))){
    SWIG_fail_ptr("cublasCtrttp",6,SWIGTYPE_p_cuComplex);
  }
  
  result = (cublasStatus_t)cublasCtrttp(arg1,arg2,arg3,(cuComplex const *)arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cublasZtrttp(lua_State* L) {
  int SWIG_arg = 0;
  cublasHandle_t arg1 = (cublasHandle_t) 0 ;
  cublasFillMode_t arg2 ;
  int arg3 ;
  cuDoubleComplex *arg4 = (cuDoubleComplex *) 0 ;
  int arg5 ;
  cuDoubleComplex *arg6 = (cuDoubleComplex *) 0 ;
  cublasStatus_t result;
  
  SWIG_check_num_args("cublasZtrttp",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cublasZtrttp",1,"cublasHandle_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cublasZtrttp",2,"cublasFillMode_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cublasZtrttp",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cublasZtrttp",4,"cuDoubleComplex const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cublasZtrttp",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("cublasZtrttp",6,"cuDoubleComplex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_cublasContext,0))){
    SWIG_fail_ptr("cublasZtrttp",1,SWIGTYPE_p_cublasContext);
  }
  
  arg2 = (cublasFillMode_t)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZtrttp",4,SWIGTYPE_p_cuDoubleComplex);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_cuDoubleComplex,0))){
    SWIG_fail_ptr("cublasZtrttp",6,SWIGTYPE_p_cuDoubleComplex);
  }
  
  result = (cublasStatus_t)cublasZtrttp(arg1,arg2,arg3,(cuDoubleComplex const *)arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float *arg2 = 0 ;
  float temp2 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::vector",2,"float const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< float > *)new std::vector< float >(arg1,(float const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< float > *)new std::vector< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"std::vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("new_float_vector",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (std::vector< float > *)new std::vector< float >((std::vector< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_float_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_float_vector__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_float_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::vector(size_t,float const &)\n"
    "    std::vector< float >::vector(size_t)\n"
    "    std::vector< float >::vector(std::vector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("std::vector< float >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::__getitem",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector___getitem",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)std_vector_Sl_float_Sg____getitem__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("std::vector< float >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::__setitem",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float >::__setitem",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector___setitem",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  std_vector_Sl_float_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_begin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  SwigValueWrapper< std::vector_iterator< float > > result;
  
  SWIG_check_num_args("std::vector< float >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::begin",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_begin",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = std_vector_Sl_float_Sg__begin__SWIG(arg1);
  {
    std::vector_iterator< float > * resultptr = new std::vector_iterator< float >((const std::vector_iterator< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_c_end(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  SwigValueWrapper< std::vector_iterator< float > > result;
  
  SWIG_check_num_args("std::vector< float >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::end",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_c_end",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = std_vector_Sl_float_Sg__end__SWIG(arg1);
  {
    std::vector_iterator< float > * resultptr = new std::vector_iterator< float >((const std::vector_iterator< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< float >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::erase",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_erase",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_float_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< float >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::erase",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_erase",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_float_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::erase(size_t)\n"
    "    std::vector< float >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_float_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::front",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_front",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (float *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::back",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (float *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("std::vector< float >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::push_back",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::push_back",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_push_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  SWIG_check_num_args("std::vector< float >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::pop_back",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_pop_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::at",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_at",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("std::vector< float >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::assign",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float >::assign",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_assign",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::data",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_data",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (float *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::size",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_size",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< float >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::empty",1,"std::vector< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_empty",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (bool)((std::vector< float > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< float >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::resize",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_resize",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  SWIG_check_num_args("std::vector< float >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::clear",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_clear",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< float >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::swap",1,"std::vector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< float >::swap",2,"std::vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_swap",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_swap",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  SWIG_check_num_args("std::vector< float >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::shrink_to_fit",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< float >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::reserve",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_reserve",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< float >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::max_size",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_max_size",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< float >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::capacity",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_capacity",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_vector(void *obj) {
std::vector< float > *arg1 = (std::vector< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_vector_methods[]= {
    { "__getitem", _wrap_float_vector___getitem},
    { "__setitem", _wrap_float_vector___setitem},
    { "begin", _wrap_float_vector_begin},
    { "c_end", _wrap_float_vector_c_end},
    { "erase", _wrap_float_vector_erase},
    { "front", _wrap_float_vector_front},
    { "back", _wrap_float_vector_back},
    { "push_back", _wrap_float_vector_push_back},
    { "pop_back", _wrap_float_vector_pop_back},
    { "at", _wrap_float_vector_at},
    { "assign", _wrap_float_vector_assign},
    { "data", _wrap_float_vector_data},
    { "size", _wrap_float_vector_size},
    { "empty", _wrap_float_vector_empty},
    { "resize", _wrap_float_vector_resize},
    { "clear", _wrap_float_vector_clear},
    { "swap", _wrap_float_vector_swap},
    { "shrink_to_fit", _wrap_float_vector_shrink_to_fit},
    { "reserve", _wrap_float_vector_reserve},
    { "max_size", _wrap_float_vector_max_size},
    { "capacity", _wrap_float_vector_capacity},
    {0,0}
};
static swig_lua_method swig_float_vector_meta[] = {
    { "__getitem", _wrap_float_vector___getitem},
    { "__setitem", _wrap_float_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_float_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_vector_Sf_SwigStatic = {
    "float_vector",
    swig_float_vector_Sf_SwigStatic_methods,
    swig_float_vector_Sf_SwigStatic_attributes,
    swig_float_vector_Sf_SwigStatic_constants,
    swig_float_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_vector_bases[] = {0};
static const char *swig_float_vector_base_names[] = {0};
static swig_lua_class _wrap_class_float_vector = { "float_vector", "float_vector", &SWIGTYPE_p_std__vectorT_float_t,_proxy__wrap_new_float_vector, swig_delete_float_vector, swig_float_vector_methods, swig_float_vector_attributes, &swig_float_vector_Sf_SwigStatic, swig_float_vector_meta, swig_float_vector_bases, swig_float_vector_base_names };

static int _wrap_new_double_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double *arg2 = 0 ;
  double temp2 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::vector",2,"double const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< double > *)new std::vector< double >(arg1,(double const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< double > *)new std::vector< double >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"std::vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("new_double_vector",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_double_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_double_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_double_vector__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_double_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::vector(size_t,double const &)\n"
    "    std::vector< double >::vector(size_t)\n"
    "    std::vector< double >::vector(std::vector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_double_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("std::vector< double >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::__getitem",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector___getitem",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)std_vector_Sl_double_Sg____getitem__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("std::vector< double >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::__setitem",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< double >::__setitem",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector___setitem",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  std_vector_Sl_double_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_begin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  SwigValueWrapper< std::vector_iterator< double > > result;
  
  SWIG_check_num_args("std::vector< double >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::begin",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_begin",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = std_vector_Sl_double_Sg__begin__SWIG(arg1);
  {
    std::vector_iterator< double > * resultptr = new std::vector_iterator< double >((const std::vector_iterator< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_c_end(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  SwigValueWrapper< std::vector_iterator< double > > result;
  
  SWIG_check_num_args("std::vector< double >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::end",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_c_end",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = std_vector_Sl_double_Sg__end__SWIG(arg1);
  {
    std::vector_iterator< double > * resultptr = new std::vector_iterator< double >((const std::vector_iterator< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< double >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::erase",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_erase",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_double_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< double >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::erase",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< double >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_erase",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_double_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_double_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::erase(size_t)\n"
    "    std::vector< double >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_double_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::front",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_front",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::back",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_num_args("std::vector< double >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::push_back",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::push_back",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_push_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("std::vector< double >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::pop_back",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_pop_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::at",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_at",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  SWIG_check_num_args("std::vector< double >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::assign",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< double >::assign",3,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_assign",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(double const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::data",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_data",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< double >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::size",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_size",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< double >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::empty",1,"std::vector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_empty",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)((std::vector< double > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< double >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::resize",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_resize",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("std::vector< double >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::clear",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_clear",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< double >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::swap",1,"std::vector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< double >::swap",2,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_swap",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_swap",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("std::vector< double >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::shrink_to_fit",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< double >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::reserve",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_reserve",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< double >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::max_size",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_max_size",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< double >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::capacity",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_capacity",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_vector(void *obj) {
std::vector< double > *arg1 = (std::vector< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_double_vector_methods[]= {
    { "__getitem", _wrap_double_vector___getitem},
    { "__setitem", _wrap_double_vector___setitem},
    { "begin", _wrap_double_vector_begin},
    { "c_end", _wrap_double_vector_c_end},
    { "erase", _wrap_double_vector_erase},
    { "front", _wrap_double_vector_front},
    { "back", _wrap_double_vector_back},
    { "push_back", _wrap_double_vector_push_back},
    { "pop_back", _wrap_double_vector_pop_back},
    { "at", _wrap_double_vector_at},
    { "assign", _wrap_double_vector_assign},
    { "data", _wrap_double_vector_data},
    { "size", _wrap_double_vector_size},
    { "empty", _wrap_double_vector_empty},
    { "resize", _wrap_double_vector_resize},
    { "clear", _wrap_double_vector_clear},
    { "swap", _wrap_double_vector_swap},
    { "shrink_to_fit", _wrap_double_vector_shrink_to_fit},
    { "reserve", _wrap_double_vector_reserve},
    { "max_size", _wrap_double_vector_max_size},
    { "capacity", _wrap_double_vector_capacity},
    {0,0}
};
static swig_lua_method swig_double_vector_meta[] = {
    { "__getitem", _wrap_double_vector___getitem},
    { "__setitem", _wrap_double_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_double_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_vector_Sf_SwigStatic = {
    "double_vector",
    swig_double_vector_Sf_SwigStatic_methods,
    swig_double_vector_Sf_SwigStatic_attributes,
    swig_double_vector_Sf_SwigStatic_constants,
    swig_double_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_vector_bases[] = {0};
static const char *swig_double_vector_base_names[] = {0};
static swig_lua_class _wrap_class_double_vector = { "double_vector", "double_vector", &SWIGTYPE_p_std__vectorT_double_t,_proxy__wrap_new_double_vector, swig_delete_double_vector, swig_double_vector_methods, swig_double_vector_attributes, &swig_double_vector_Sf_SwigStatic, swig_double_vector_meta, swig_double_vector_bases, swig_double_vector_base_names };

static int _wrap_new_complex_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::complex< float > *arg2 = 0 ;
  std::vector< std::complex< float > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::vector",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::vector",2,"std::complex< float > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("new_complex_vector",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (std::vector< std::complex< float > > *)new std::vector< std::complex< float > >(arg1,(std::complex< float > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< std::complex< float > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< std::complex< float > > *)new std::vector< std::complex< float > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = 0 ;
  std::vector< std::complex< float > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::vector",1,"std::vector< std::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("new_complex_vector",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (std::vector< std::complex< float > > *)new std::vector< std::complex< float > >((std::vector< std::complex< float > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_complex_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_complex_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_complex_vector__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_complex_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< float > >::vector(size_t,std::complex< float > const &)\n"
    "    std::vector< std::complex< float > >::vector(size_t)\n"
    "    std::vector< std::complex< float > >::vector(std::vector< std::complex< float > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::__getitem",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_vector___getitem",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = std_vector_Sl_std_complex_Sl_float_Sg__Sg____getitem__SWIG(arg1,arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  std::complex< float > arg3 ;
  std::complex< float > *argp3 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::__setitem",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::complex< float > >::__setitem",3,"std::complex< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_vector___setitem",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("complex_vector___setitem",3,SWIGTYPE_p_std__complexT_float_t);
  }
  arg3 = *argp3;
  
  std_vector_Sl_std_complex_Sl_float_Sg__Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_begin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::complex< float > > > result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::begin",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_vector_begin",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = std_vector_Sl_std_complex_Sl_float_Sg__Sg__begin__SWIG(arg1);
  {
    std::vector_iterator< std::complex< float > > * resultptr = new std::vector_iterator< std::complex< float > >((const std::vector_iterator< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_c_end(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::complex< float > > > result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::end",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_vector_c_end",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = std_vector_Sl_std_complex_Sl_float_Sg__Sg__end__SWIG(arg1);
  {
    std::vector_iterator< std::complex< float > > * resultptr = new std::vector_iterator< std::complex< float > >((const std::vector_iterator< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::erase",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_vector_erase",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_std_complex_Sl_float_Sg__Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::erase",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< std::complex< float > >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_vector_erase",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_std_complex_Sl_float_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_complex_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_complex_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'complex_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< float > >::erase(size_t)\n"
    "    std::vector< std::complex< float > >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::front",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_vector_front",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (std::complex< float > *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::back",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_vector_back",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (std::complex< float > *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::push_back",1,"std::vector< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::push_back",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_vector_push_back",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("complex_vector_push_back",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  (arg1)->push_back((std::complex< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::pop_back",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_vector_pop_back",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::at",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_vector_at",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::complex< float > *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  std::complex< float > *arg3 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::assign",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::assign",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::complex< float > >::assign",3,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_vector_assign",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("complex_vector_assign",3,SWIGTYPE_p_std__complexT_float_t);
  }
  
  (arg1)->assign(arg2,(std::complex< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::data",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_vector_data",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (std::complex< float > *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::size",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_vector_size",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::empty",1,"std::vector< std::complex< float > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_vector_empty",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (bool)((std::vector< std::complex< float > > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::resize",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_vector_resize",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::clear",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_vector_clear",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::vector< std::complex< float > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::swap",1,"std::vector< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::swap",2,"std::vector< std::complex< float > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_vector_swap",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_vector_swap",2,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::shrink_to_fit",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::reserve",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_vector_reserve",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::max_size",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_vector_max_size",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::capacity",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_vector_capacity",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_complex_vector(void *obj) {
std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_complex_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_complex_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_complex_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_complex_vector_methods[]= {
    { "__getitem", _wrap_complex_vector___getitem},
    { "__setitem", _wrap_complex_vector___setitem},
    { "begin", _wrap_complex_vector_begin},
    { "c_end", _wrap_complex_vector_c_end},
    { "erase", _wrap_complex_vector_erase},
    { "front", _wrap_complex_vector_front},
    { "back", _wrap_complex_vector_back},
    { "push_back", _wrap_complex_vector_push_back},
    { "pop_back", _wrap_complex_vector_pop_back},
    { "at", _wrap_complex_vector_at},
    { "assign", _wrap_complex_vector_assign},
    { "data", _wrap_complex_vector_data},
    { "size", _wrap_complex_vector_size},
    { "empty", _wrap_complex_vector_empty},
    { "resize", _wrap_complex_vector_resize},
    { "clear", _wrap_complex_vector_clear},
    { "swap", _wrap_complex_vector_swap},
    { "shrink_to_fit", _wrap_complex_vector_shrink_to_fit},
    { "reserve", _wrap_complex_vector_reserve},
    { "max_size", _wrap_complex_vector_max_size},
    { "capacity", _wrap_complex_vector_capacity},
    {0,0}
};
static swig_lua_method swig_complex_vector_meta[] = {
    { "__getitem", _wrap_complex_vector___getitem},
    { "__setitem", _wrap_complex_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_complex_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_complex_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_complex_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_complex_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_complex_vector_Sf_SwigStatic = {
    "complex_vector",
    swig_complex_vector_Sf_SwigStatic_methods,
    swig_complex_vector_Sf_SwigStatic_attributes,
    swig_complex_vector_Sf_SwigStatic_constants,
    swig_complex_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_complex_vector_bases[] = {0};
static const char *swig_complex_vector_base_names[] = {0};
static swig_lua_class _wrap_class_complex_vector = { "complex_vector", "complex_vector", &SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,_proxy__wrap_new_complex_vector, swig_delete_complex_vector, swig_complex_vector_methods, swig_complex_vector_attributes, &swig_complex_vector_Sf_SwigStatic, swig_complex_vector_meta, swig_complex_vector_bases, swig_complex_vector_base_names };

static int _wrap_new_double_complex_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::complex< double > *arg2 = 0 ;
  std::vector< std::complex< double > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::vector",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::vector",2,"std::complex< double > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("new_double_complex_vector",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (std::vector< std::complex< double > > *)new std::vector< std::complex< double > >(arg1,(std::complex< double > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< std::complex< double > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< std::complex< double > > *)new std::vector< std::complex< double > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = 0 ;
  std::vector< std::complex< double > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::vector",1,"std::vector< std::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("new_double_complex_vector",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (std::vector< std::complex< double > > *)new std::vector< std::complex< double > >((std::vector< std::complex< double > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_double_complex_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_double_complex_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_double_complex_vector__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_double_complex_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< double > >::vector(size_t,std::complex< double > const &)\n"
    "    std::vector< std::complex< double > >::vector(size_t)\n"
    "    std::vector< std::complex< double > >::vector(std::vector< std::complex< double > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_double_complex_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::__getitem",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("double_complex_vector___getitem",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = std_vector_Sl_std_complex_Sl_double_Sg__Sg____getitem__SWIG(arg1,arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  std::complex< double > arg3 ;
  std::complex< double > *argp3 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::__setitem",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::complex< double > >::__setitem",3,"std::complex< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("double_complex_vector___setitem",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_vector___setitem",3,SWIGTYPE_p_std__complexT_double_t);
  }
  arg3 = *argp3;
  
  std_vector_Sl_std_complex_Sl_double_Sg__Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_vector_begin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::complex< double > > > result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::begin",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("double_complex_vector_begin",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = std_vector_Sl_std_complex_Sl_double_Sg__Sg__begin__SWIG(arg1);
  {
    std::vector_iterator< std::complex< double > > * resultptr = new std::vector_iterator< std::complex< double > >((const std::vector_iterator< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_vector_c_end(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::complex< double > > > result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::end",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("double_complex_vector_c_end",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = std_vector_Sl_std_complex_Sl_double_Sg__Sg__end__SWIG(arg1);
  {
    std::vector_iterator< std::complex< double > > * resultptr = new std::vector_iterator< std::complex< double > >((const std::vector_iterator< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::erase",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("double_complex_vector_erase",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_std_complex_Sl_double_Sg__Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::erase",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< std::complex< double > >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("double_complex_vector_erase",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_std_complex_Sl_double_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_complex_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_double_complex_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_complex_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< double > >::erase(size_t)\n"
    "    std::vector< std::complex< double > >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_double_complex_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::front",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("double_complex_vector_front",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (std::complex< double > *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::back",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("double_complex_vector_back",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (std::complex< double > *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::push_back",1,"std::vector< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::push_back",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("double_complex_vector_push_back",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_vector_push_back",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  (arg1)->push_back((std::complex< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::pop_back",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("double_complex_vector_pop_back",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::at",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("double_complex_vector_at",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::complex< double > *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  std::complex< double > *arg3 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::assign",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::assign",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::complex< double > >::assign",3,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("double_complex_vector_assign",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_vector_assign",3,SWIGTYPE_p_std__complexT_double_t);
  }
  
  (arg1)->assign(arg2,(std::complex< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::data",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("double_complex_vector_data",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (std::complex< double > *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::size",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("double_complex_vector_size",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::empty",1,"std::vector< std::complex< double > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("double_complex_vector_empty",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (bool)((std::vector< std::complex< double > > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::resize",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("double_complex_vector_resize",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::clear",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("double_complex_vector_clear",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::vector< std::complex< double > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::swap",1,"std::vector< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::swap",2,"std::vector< std::complex< double > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("double_complex_vector_swap",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("double_complex_vector_swap",2,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::shrink_to_fit",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("double_complex_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::reserve",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("double_complex_vector_reserve",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::max_size",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("double_complex_vector_max_size",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::capacity",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("double_complex_vector_capacity",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_complex_vector(void *obj) {
std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_complex_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_complex_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_complex_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_double_complex_vector_methods[]= {
    { "__getitem", _wrap_double_complex_vector___getitem},
    { "__setitem", _wrap_double_complex_vector___setitem},
    { "begin", _wrap_double_complex_vector_begin},
    { "c_end", _wrap_double_complex_vector_c_end},
    { "erase", _wrap_double_complex_vector_erase},
    { "front", _wrap_double_complex_vector_front},
    { "back", _wrap_double_complex_vector_back},
    { "push_back", _wrap_double_complex_vector_push_back},
    { "pop_back", _wrap_double_complex_vector_pop_back},
    { "at", _wrap_double_complex_vector_at},
    { "assign", _wrap_double_complex_vector_assign},
    { "data", _wrap_double_complex_vector_data},
    { "size", _wrap_double_complex_vector_size},
    { "empty", _wrap_double_complex_vector_empty},
    { "resize", _wrap_double_complex_vector_resize},
    { "clear", _wrap_double_complex_vector_clear},
    { "swap", _wrap_double_complex_vector_swap},
    { "shrink_to_fit", _wrap_double_complex_vector_shrink_to_fit},
    { "reserve", _wrap_double_complex_vector_reserve},
    { "max_size", _wrap_double_complex_vector_max_size},
    { "capacity", _wrap_double_complex_vector_capacity},
    {0,0}
};
static swig_lua_method swig_double_complex_vector_meta[] = {
    { "__getitem", _wrap_double_complex_vector___getitem},
    { "__setitem", _wrap_double_complex_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_double_complex_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_complex_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_complex_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_complex_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_complex_vector_Sf_SwigStatic = {
    "double_complex_vector",
    swig_double_complex_vector_Sf_SwigStatic_methods,
    swig_double_complex_vector_Sf_SwigStatic_attributes,
    swig_double_complex_vector_Sf_SwigStatic_constants,
    swig_double_complex_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_complex_vector_bases[] = {0};
static const char *swig_double_complex_vector_base_names[] = {0};
static swig_lua_class _wrap_class_double_complex_vector = { "double_complex_vector", "double_complex_vector", &SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,_proxy__wrap_new_double_complex_vector, swig_delete_double_complex_vector, swig_double_complex_vector_methods, swig_double_complex_vector_attributes, &swig_double_complex_vector_Sf_SwigStatic, swig_double_complex_vector_meta, swig_double_complex_vector_bases, swig_double_complex_vector_base_names };

static int _wrap__cublas_set(lua_State* L) {
  int SWIG_arg = 0;
  Cublas *arg1 = (Cublas *) 0 ;
  
  SWIG_check_num_args("_cublas",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("_cublas",1,"Cublas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Cublas,0))){
    SWIG_fail_ptr("_cublas_set",1,SWIGTYPE_p_Cublas);
  }
  
  _cublas = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap__cublas_get(lua_State* L) {
  int SWIG_arg = 0;
  Cublas *result = 0 ;
  
  SWIG_check_num_args("_cublas",0,0)
  result = (Cublas *)&_cublas;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Cublas,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CreateCublas(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("CreateCublas",0,0)
  CreateCublas();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeleteCublas(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("DeleteCublas",0,0)
  DeleteCublas();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_synchronize(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("synchronize",0,0)
  synchronize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_seed_set(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  
  SWIG_check_num_args("seed",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("seed",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  seed = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_seed_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;
  
  SWIG_check_num_args("seed",0,0)
  result = (unsigned int)seed;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_set_seed(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("set_seed",0,0)
  set_seed();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vector_range__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  SwigValueWrapper< std::vector< float > > result;
  
  SWIG_check_num_args("vector_range",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("vector_range",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("vector_range",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("vector_range",3,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = vector_range(arg1,arg2,arg3);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vector_range__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  SwigValueWrapper< std::vector< float > > result;
  
  SWIG_check_num_args("vector_range",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("vector_range",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("vector_range",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = vector_range(arg1,arg2);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vector_range(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_vector_range__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_vector_range__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'vector_range'\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector_range(int,int,int)\n"
    "    vector_range(int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_cast_double_float(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  double result;
  
  SWIG_check_num_args("cast_double< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cast_double< float >",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (double)cast_double< float >(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_init(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Viper::Vector< float >::init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::init",1,"Viper::Vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Vector< float >::init",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_init",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_dev_set(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::dev",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::dev",1,"Viper::Vector< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Viper::Vector< float >::dev",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_dev_set",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("VectorXf_dev_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->dev = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_dev_get(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::dev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::dev",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_dev_get",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  result = (float *) ((arg1)->dev);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_host_set(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::host",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::host",1,"Viper::Vector< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Viper::Vector< float >::host",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_host_set",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("VectorXf_host_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->host = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_host_get(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::host",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::host",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_host_get",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  result = (float *) ((arg1)->host);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_dev_ptr_set(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  std::shared_ptr< DevPtr< float > > arg2 ;
  std::shared_ptr< DevPtr< float > > *argp2 ;
  
  SWIG_check_num_args("Viper::Vector< float >::dev_ptr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::dev_ptr",1,"Viper::Vector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< float >::dev_ptr",2,"std::shared_ptr< DevPtr< float > >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_dev_ptr_set",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__shared_ptrT_DevPtrT_float_t_t,0))){
    SWIG_fail_ptr("VectorXf_dev_ptr_set",2,SWIGTYPE_p_std__shared_ptrT_DevPtrT_float_t_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->dev_ptr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_dev_ptr_get(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  std::shared_ptr< DevPtr< float > > result;
  
  SWIG_check_num_args("Viper::Vector< float >::dev_ptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::dev_ptr",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_dev_ptr_get",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  result =  ((arg1)->dev_ptr);
  {
    std::shared_ptr< DevPtr< float > > * resultptr = new std::shared_ptr< DevPtr< float > >((const std::shared_ptr< DevPtr< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_DevPtrT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_N_set(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Viper::Vector< float >::N",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::N",1,"Viper::Vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Vector< float >::N",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_N_set",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->N = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_N_get(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Viper::Vector< float >::N",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::N",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_N_get",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  result =  ((arg1)->N);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VectorXf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *result = 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::Vector",0,0)
  result = (Viper::Vector< float > *)new Viper::Vector< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Viper__VectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VectorXf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Viper::Vector< float > *result = 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::Vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Viper::Vector< float >::Vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Viper::Vector< float > *)new Viper::Vector< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Viper__VectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VectorXf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  std::initializer_list< float > *arg2 = 0 ;
  Viper::Vector< float > *result = 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::Vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Viper::Vector< float >::Vector",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< float >::Vector",2,"std::initializer_list< float > const &");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__initializer_listT_float_t,0))){
    SWIG_fail_ptr("new_VectorXf",2,SWIGTYPE_p_std__initializer_listT_float_t);
  }
  
  result = (Viper::Vector< float > *)new Viper::Vector< float >(arg1,(std::initializer_list< float > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Viper__VectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VectorXf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  std::vector< float > *arg2 = 0 ;
  Viper::Vector< float > *result = 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::Vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Viper::Vector< float >::Vector",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< float >::Vector",2,"std::vector< float > const &");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("new_VectorXf",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (Viper::Vector< float > *)new Viper::Vector< float >(arg1,(std::vector< float > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Viper__VectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VectorXf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = 0 ;
  Viper::Vector< float > *result = 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::Vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Viper::Vector< float >::Vector",1,"Viper::Vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("new_VectorXf",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  result = (Viper::Vector< float > *)new Viper::Vector< float >((Viper::Vector< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Viper__VectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VectorXf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  size_t arg2 ;
  Viper::Vector< float > *result = 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::Vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::Vector",1,"float *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Vector< float >::Vector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_VectorXf",1,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Viper::Vector< float > *)new Viper::Vector< float >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Viper__VectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VectorXf(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_VectorXf__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_VectorXf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_VectorXf__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_VectorXf__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__initializer_listT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_VectorXf__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_VectorXf__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_VectorXf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viper::Vector< float >::Vector()\n"
    "    Viper::Vector< float >::Vector(size_t)\n"
    "    Viper::Vector< float >::Vector(int,std::initializer_list< float > const &)\n"
    "    Viper::Vector< float >::Vector(int,std::vector< float > const &)\n"
    "    Viper::Vector< float >::Vector(Viper::Vector< float > const &)\n"
    "    Viper::Vector< float >::Vector(float *,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_VectorXf_size(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Viper::Vector< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::size",1,"Viper::Vector< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_size",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  result = ((Viper::Vector< float > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_download_host(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::download_host",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::download_host",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_download_host",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->download_host();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_upload_device(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::upload_device",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::upload_device",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_upload_device",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->upload_device();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_zero(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::zero",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_zero",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->zero();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_ones(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::ones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::ones",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_ones",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->ones();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_randu(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::randu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::randu",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_randu",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->randu();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_random(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Viper::Vector< float >::random",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::random",1,"Viper::Vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Vector< float >::random",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Viper::Vector< float >::random",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_random",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->random(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_fill(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Viper::Vector< float >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::fill",1,"Viper::Vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Vector< float >::fill",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_fill",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  array_index arg2 ;
  float result;
  
  SWIG_check_num_args("Viper::Vector< float >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::__getitem__",1,"Viper::Vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Vector< float >::__getitem__",2,"array_index");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf___getitem",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  arg2 = (array_index)lua_tonumber(L, 2);
  result = (float)(arg1)->__getitem__(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  array_index arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Viper::Vector< float >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::__setitem__",1,"Viper::Vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Vector< float >::__setitem__",2,"array_index");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Viper::Vector< float >::__setitem__",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf___setitem",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  arg2 = (array_index)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->__setitem__(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf___unm(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  Viper::Vector< float > result;
  
  SWIG_check_num_args("Viper::Vector< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::operator -",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf___unm",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  result = (arg1)->operator -();
  {
    Viper::Vector< float > * resultptr = new Viper::Vector< float >((const Viper::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  Viper::Vector< float > *arg2 = 0 ;
  Viper::Vector< float > result;
  
  SWIG_check_num_args("Viper::Vector< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::operator +",1,"Viper::Vector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< float >::operator +",2,"Viper::Vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf___add",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf___add",2,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  result = (arg1)->operator +((Viper::Vector< float > const &)*arg2);
  {
    Viper::Vector< float > * resultptr = new Viper::Vector< float >((const Viper::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  Viper::Vector< float > *arg2 = 0 ;
  Viper::Vector< float > result;
  
  SWIG_check_num_args("Viper::Vector< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::operator -",1,"Viper::Vector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< float >::operator -",2,"Viper::Vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf___sub",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf___sub",2,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  result = (arg1)->operator -((Viper::Vector< float > const &)*arg2);
  {
    Viper::Vector< float > * resultptr = new Viper::Vector< float >((const Viper::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  Viper::Vector< float > *arg2 = 0 ;
  Viper::Vector< float > result;
  
  SWIG_check_num_args("Viper::Vector< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::operator *",1,"Viper::Vector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< float >::operator *",2,"Viper::Vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf___mul",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf___mul",2,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  result = (arg1)->operator *((Viper::Vector< float > const &)*arg2);
  {
    Viper::Vector< float > * resultptr = new Viper::Vector< float >((const Viper::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  float arg2 ;
  Viper::Vector< float > result;
  
  SWIG_check_num_args("Viper::Vector< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::operator +",1,"Viper::Vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Vector< float >::operator +",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf___add",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = (arg1)->operator +(arg2);
  {
    Viper::Vector< float > * resultptr = new Viper::Vector< float >((const Viper::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_VectorXf___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_VectorXf___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'VectorXf___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viper::Vector< float >::operator +(Viper::Vector< float > const &)\n"
    "    Viper::Vector< float >::operator +(float const)\n");
  lua_error(L);return 0;
}


static int _wrap_VectorXf___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  float arg2 ;
  Viper::Vector< float > result;
  
  SWIG_check_num_args("Viper::Vector< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::operator -",1,"Viper::Vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Vector< float >::operator -",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf___sub",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = (arg1)->operator -(arg2);
  {
    Viper::Vector< float > * resultptr = new Viper::Vector< float >((const Viper::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_VectorXf___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_VectorXf___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'VectorXf___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viper::Vector< float >::operator -(Viper::Vector< float > const &)\n"
    "    Viper::Vector< float >::operator -(float const)\n");
  lua_error(L);return 0;
}


static int _wrap_VectorXf___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  float arg2 ;
  Viper::Vector< float > result;
  
  SWIG_check_num_args("Viper::Vector< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::operator *",1,"Viper::Vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Vector< float >::operator *",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf___mul",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = (arg1)->operator *(arg2);
  {
    Viper::Vector< float > * resultptr = new Viper::Vector< float >((const Viper::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_VectorXf___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_VectorXf___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'VectorXf___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viper::Vector< float >::operator *(Viper::Vector< float > const &)\n"
    "    Viper::Vector< float >::operator *(float const)\n");
  lua_error(L);return 0;
}


static int _wrap_VectorXf___div(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  float arg2 ;
  Viper::Vector< float > result;
  
  SWIG_check_num_args("Viper::Vector< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::operator /",1,"Viper::Vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Vector< float >::operator /",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf___div",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = (arg1)->operator /(arg2);
  {
    Viper::Vector< float > * resultptr = new Viper::Vector< float >((const Viper::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_copy(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  Viper::Vector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::copy",1,"Viper::Vector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< float >::copy",2,"Viper::Vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_copy",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_copy",2,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->copy((Viper::Vector< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_resize(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Viper::Vector< float >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::resize",1,"Viper::Vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Vector< float >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_resize",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_print(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::print",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_print",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_clone(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  Viper::Vector< float > *arg2 = 0 ;
  Viper::Vector< float > result;
  
  SWIG_check_num_args("Viper::Vector< float >::clone",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::clone",1,"Viper::Vector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< float >::clone",2,"Viper::Vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_clone",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_clone",2,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  result = (arg1)->clone((Viper::Vector< float > const &)*arg2);
  {
    Viper::Vector< float > * resultptr = new Viper::Vector< float >((const Viper::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_eval(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  Viper::Vector< float > result;
  
  SWIG_check_num_args("Viper::Vector< float >::eval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::eval",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_eval",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  result = (arg1)->eval();
  {
    Viper::Vector< float > * resultptr = new Viper::Vector< float >((const Viper::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_abs(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::abs",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_abs",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->abs();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_exp(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::exp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::exp",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_exp",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->exp();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_log2(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::log2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::log2",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_log2",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->log2();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_log10(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::log10",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::log10",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_log10",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->log10();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Viper::Vector< float >::pow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::pow",1,"Viper::Vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Vector< float >::pow",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_pow",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->pow(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  Viper::Vector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::pow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::pow",1,"Viper::Vector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< float >::pow",2,"Viper::Vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_pow",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_pow",2,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->pow((Viper::Vector< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_VectorXf_pow__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_VectorXf_pow__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'VectorXf_pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viper::Vector< float >::pow(float)\n"
    "    Viper::Vector< float >::pow(Viper::Vector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_VectorXf_sqrt(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::sqrt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::sqrt",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_sqrt",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->sqrt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_rsqrt(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::rsqrt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::rsqrt",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_rsqrt",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->rsqrt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_sin(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::sin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::sin",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_sin",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->sin();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_cos(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::cos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::cos",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_cos",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->cos();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_tan(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::tan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::tan",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_tan",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->tan();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_asin(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::asin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::asin",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_asin",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->asin();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_acos(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::acos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::acos",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_acos",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->acos();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_atan(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::atan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::atan",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_atan",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->atan();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_sinh(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::sinh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::sinh",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_sinh",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->sinh();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_cosh(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::cosh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::cosh",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_cosh",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->cosh();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_tanh(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::tanh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::tanh",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_tanh",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->tanh();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_asinh(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::asinh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::asinh",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_asinh",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->asinh();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_acosh(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::acosh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::acosh",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_acosh",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->acosh();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_atanh(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::atanh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::atanh",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_atanh",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->atanh();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_atan2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Viper::Vector< float >::atan2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::atan2",1,"Viper::Vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Vector< float >::atan2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_atan2",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->atan2(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_atan2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  Viper::Vector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::atan2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::atan2",1,"Viper::Vector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< float >::atan2",2,"Viper::Vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_atan2",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_atan2",2,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->atan2((Viper::Vector< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_atan2(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_VectorXf_atan2__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_VectorXf_atan2__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'VectorXf_atan2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viper::Vector< float >::atan2(float)\n"
    "    Viper::Vector< float >::atan2(Viper::Vector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_VectorXf_sigmoid(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::sigmoid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::sigmoid",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_sigmoid",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->sigmoid();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_sigmoid_deriv(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::sigmoid_deriv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::sigmoid_deriv",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_sigmoid_deriv",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->sigmoid_deriv();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_relu(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::relu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::relu",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_relu",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->relu();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_relu_deriv(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::relu_deriv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::relu_deriv",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_relu_deriv",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->relu_deriv();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_softmax(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::softmax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::softmax",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_softmax",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->softmax();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_tanh_deriv(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::tanh_deriv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::tanh_deriv",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_tanh_deriv",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->tanh_deriv();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_cbrt(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::cbrt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::cbrt",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_cbrt",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->cbrt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_ceil(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::ceil",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::ceil",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_ceil",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->ceil();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_cospi(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::cospi",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::cospi",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_cospi",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->cospi();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_cyl_bessel_i0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::cyl_bessel_i0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::cyl_bessel_i0",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_cyl_bessel_i0",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->cyl_bessel_i0();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_cyl_bessel_i1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::cyl_bessel_i1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::cyl_bessel_i1",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_cyl_bessel_i1",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->cyl_bessel_i1();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_erfc(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::erfc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::erfc",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_erfc",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->erfc();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_erfcx(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::erfcx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::erfcx",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_erfcx",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->erfcx();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_erfcinv(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::erfcinv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::erfcinv",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_erfcinv",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->erfcinv();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_erf(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::erf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::erf",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_erf",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->erf();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_erfinv(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::erfinv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::erfinv",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_erfinv",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->erfinv();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_exp10(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::exp10",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::exp10",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_exp10",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->exp10();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_exp2(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::exp2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::exp2",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_exp2",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->exp2();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_expm1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::expm1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::expm1",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_expm1",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->expm1();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_fabs(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::fabs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::fabs",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_fabs",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->fabs();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_fdim(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  Viper::Vector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::fdim",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::fdim",1,"Viper::Vector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< float >::fdim",2,"Viper::Vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_fdim",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_fdim",2,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->fdim((Viper::Vector< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_fmod(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  Viper::Vector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::fmod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::fmod",1,"Viper::Vector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< float >::fmod",2,"Viper::Vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_fmod",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_fmod",2,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->fmod((Viper::Vector< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_hypot(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  Viper::Vector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::hypot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::hypot",1,"Viper::Vector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< float >::hypot",2,"Viper::Vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_hypot",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_hypot",2,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->hypot((Viper::Vector< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_ilogb(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::ilogb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::ilogb",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_ilogb",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->ilogb();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_j0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::j0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::j0",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_j0",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->j0();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_j1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::j1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::j1",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_j1",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->j1();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_jn(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Viper::Vector< float >::jn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::jn",1,"Viper::Vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Vector< float >::jn",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_jn",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->jn(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_lgamma(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::lgamma",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::lgamma",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_lgamma",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->lgamma();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_log1p(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::log1p",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::log1p",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_log1p",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->log1p();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_logb(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::logb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::logb",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_logb",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->logb();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_norm3d(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  Viper::Vector< float > *arg2 = 0 ;
  Viper::Vector< float > *arg3 = 0 ;
  Viper::Vector< float > *arg4 = 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::norm3d",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::norm3d",1,"Viper::Vector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< float >::norm3d",2,"Viper::Vector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Viper::Vector< float >::norm3d",3,"Viper::Vector< float > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Viper::Vector< float >::norm3d",4,"Viper::Vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_norm3d",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_norm3d",2,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_norm3d",3,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_norm3d",4,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->norm3d((Viper::Vector< float > const &)*arg2,(Viper::Vector< float > const &)*arg3,(Viper::Vector< float > const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_norm4d(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  Viper::Vector< float > *arg2 = 0 ;
  Viper::Vector< float > *arg3 = 0 ;
  Viper::Vector< float > *arg4 = 0 ;
  Viper::Vector< float > *arg5 = 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::norm4d",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::norm4d",1,"Viper::Vector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< float >::norm4d",2,"Viper::Vector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Viper::Vector< float >::norm4d",3,"Viper::Vector< float > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Viper::Vector< float >::norm4d",4,"Viper::Vector< float > const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Viper::Vector< float >::norm4d",5,"Viper::Vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_norm4d",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_norm4d",2,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_norm4d",3,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_norm4d",4,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_norm4d",5,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->norm4d((Viper::Vector< float > const &)*arg2,(Viper::Vector< float > const &)*arg3,(Viper::Vector< float > const &)*arg4,(Viper::Vector< float > const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_normcdf(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::normcdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::normcdf",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_normcdf",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->normcdf();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_normcdfinv(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::normcdfinv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::normcdfinv",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_normcdfinv",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->normcdfinv();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_norm(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::norm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::norm",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_norm",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->norm();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_rcbrt(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::rcbrt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::rcbrt",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_rcbrt",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->rcbrt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_remainder(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  Viper::Vector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::remainder",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::remainder",1,"Viper::Vector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< float >::remainder",2,"Viper::Vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_remainder",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_remainder",2,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->remainder((Viper::Vector< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_rhypot(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  Viper::Vector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::rhypot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::rhypot",1,"Viper::Vector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< float >::rhypot",2,"Viper::Vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_rhypot",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_rhypot",2,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->rhypot((Viper::Vector< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_rnorm3d(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  Viper::Vector< float > *arg2 = 0 ;
  Viper::Vector< float > *arg3 = 0 ;
  Viper::Vector< float > *arg4 = 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::rnorm3d",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::rnorm3d",1,"Viper::Vector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< float >::rnorm3d",2,"Viper::Vector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Viper::Vector< float >::rnorm3d",3,"Viper::Vector< float > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Viper::Vector< float >::rnorm3d",4,"Viper::Vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_rnorm3d",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_rnorm3d",2,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_rnorm3d",3,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_rnorm3d",4,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->rnorm3d((Viper::Vector< float > const &)*arg2,(Viper::Vector< float > const &)*arg3,(Viper::Vector< float > const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_rnorm4d(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  Viper::Vector< float > *arg2 = 0 ;
  Viper::Vector< float > *arg3 = 0 ;
  Viper::Vector< float > *arg4 = 0 ;
  Viper::Vector< float > *arg5 = 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::rnorm4d",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::rnorm4d",1,"Viper::Vector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< float >::rnorm4d",2,"Viper::Vector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Viper::Vector< float >::rnorm4d",3,"Viper::Vector< float > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Viper::Vector< float >::rnorm4d",4,"Viper::Vector< float > const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Viper::Vector< float >::rnorm4d",5,"Viper::Vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_rnorm4d",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_rnorm4d",2,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_rnorm4d",3,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_rnorm4d",4,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_rnorm4d",5,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->rnorm4d((Viper::Vector< float > const &)*arg2,(Viper::Vector< float > const &)*arg3,(Viper::Vector< float > const &)*arg4,(Viper::Vector< float > const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_rnorm(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::rnorm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::rnorm",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_rnorm",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->rnorm();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_tgamma(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::tgamma",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::tgamma",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_tgamma",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->tgamma();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_trunc(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::trunc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::trunc",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_trunc",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->trunc();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_y0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::y0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::y0",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_y0",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->y0();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_y1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< float >::y1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::y1",1,"Viper::Vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_y1",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->y1();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXf_yn(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< float > *arg1 = (Viper::Vector< float > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Viper::Vector< float >::yn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< float >::yn",1,"Viper::Vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Vector< float >::yn",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("VectorXf_yn",1,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->yn(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_VectorXf(void *obj) {
Viper::Vector< float > *arg1 = (Viper::Vector< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_VectorXf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_VectorXf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_VectorXf_attributes[] = {
    { "dev", _wrap_VectorXf_dev_get, _wrap_VectorXf_dev_set },
    { "host", _wrap_VectorXf_host_get, _wrap_VectorXf_host_set },
    { "dev_ptr", _wrap_VectorXf_dev_ptr_get, _wrap_VectorXf_dev_ptr_set },
    { "N", _wrap_VectorXf_N_get, _wrap_VectorXf_N_set },
    {0,0,0}
};
static swig_lua_method swig_VectorXf_methods[]= {
    { "init", _wrap_VectorXf_init},
    { "size", _wrap_VectorXf_size},
    { "download_host", _wrap_VectorXf_download_host},
    { "upload_device", _wrap_VectorXf_upload_device},
    { "zero", _wrap_VectorXf_zero},
    { "ones", _wrap_VectorXf_ones},
    { "randu", _wrap_VectorXf_randu},
    { "random", _wrap_VectorXf_random},
    { "fill", _wrap_VectorXf_fill},
    { "__getitem", _wrap_VectorXf___getitem},
    { "__setitem", _wrap_VectorXf___setitem},
    { "__unm", _wrap_VectorXf___unm},
    { "__add", _wrap_VectorXf___add},
    { "__sub", _wrap_VectorXf___sub},
    { "__mul", _wrap_VectorXf___mul},
    { "__div", _wrap_VectorXf___div},
    { "copy", _wrap_VectorXf_copy},
    { "resize", _wrap_VectorXf_resize},
    { "print", _wrap_VectorXf_print},
    { "clone", _wrap_VectorXf_clone},
    { "eval", _wrap_VectorXf_eval},
    { "abs", _wrap_VectorXf_abs},
    { "exp", _wrap_VectorXf_exp},
    { "log2", _wrap_VectorXf_log2},
    { "log10", _wrap_VectorXf_log10},
    { "pow", _wrap_VectorXf_pow},
    { "sqrt", _wrap_VectorXf_sqrt},
    { "rsqrt", _wrap_VectorXf_rsqrt},
    { "sin", _wrap_VectorXf_sin},
    { "cos", _wrap_VectorXf_cos},
    { "tan", _wrap_VectorXf_tan},
    { "asin", _wrap_VectorXf_asin},
    { "acos", _wrap_VectorXf_acos},
    { "atan", _wrap_VectorXf_atan},
    { "sinh", _wrap_VectorXf_sinh},
    { "cosh", _wrap_VectorXf_cosh},
    { "tanh", _wrap_VectorXf_tanh},
    { "asinh", _wrap_VectorXf_asinh},
    { "acosh", _wrap_VectorXf_acosh},
    { "atanh", _wrap_VectorXf_atanh},
    { "atan2", _wrap_VectorXf_atan2},
    { "sigmoid", _wrap_VectorXf_sigmoid},
    { "sigmoid_deriv", _wrap_VectorXf_sigmoid_deriv},
    { "relu", _wrap_VectorXf_relu},
    { "relu_deriv", _wrap_VectorXf_relu_deriv},
    { "softmax", _wrap_VectorXf_softmax},
    { "tanh_deriv", _wrap_VectorXf_tanh_deriv},
    { "cbrt", _wrap_VectorXf_cbrt},
    { "ceil", _wrap_VectorXf_ceil},
    { "cospi", _wrap_VectorXf_cospi},
    { "cyl_bessel_i0", _wrap_VectorXf_cyl_bessel_i0},
    { "cyl_bessel_i1", _wrap_VectorXf_cyl_bessel_i1},
    { "erfc", _wrap_VectorXf_erfc},
    { "erfcx", _wrap_VectorXf_erfcx},
    { "erfcinv", _wrap_VectorXf_erfcinv},
    { "erf", _wrap_VectorXf_erf},
    { "erfinv", _wrap_VectorXf_erfinv},
    { "exp10", _wrap_VectorXf_exp10},
    { "exp2", _wrap_VectorXf_exp2},
    { "expm1", _wrap_VectorXf_expm1},
    { "fabs", _wrap_VectorXf_fabs},
    { "fdim", _wrap_VectorXf_fdim},
    { "fmod", _wrap_VectorXf_fmod},
    { "hypot", _wrap_VectorXf_hypot},
    { "ilogb", _wrap_VectorXf_ilogb},
    { "j0", _wrap_VectorXf_j0},
    { "j1", _wrap_VectorXf_j1},
    { "jn", _wrap_VectorXf_jn},
    { "lgamma", _wrap_VectorXf_lgamma},
    { "log1p", _wrap_VectorXf_log1p},
    { "logb", _wrap_VectorXf_logb},
    { "norm3d", _wrap_VectorXf_norm3d},
    { "norm4d", _wrap_VectorXf_norm4d},
    { "normcdf", _wrap_VectorXf_normcdf},
    { "normcdfinv", _wrap_VectorXf_normcdfinv},
    { "norm", _wrap_VectorXf_norm},
    { "rcbrt", _wrap_VectorXf_rcbrt},
    { "remainder", _wrap_VectorXf_remainder},
    { "rhypot", _wrap_VectorXf_rhypot},
    { "rnorm3d", _wrap_VectorXf_rnorm3d},
    { "rnorm4d", _wrap_VectorXf_rnorm4d},
    { "rnorm", _wrap_VectorXf_rnorm},
    { "tgamma", _wrap_VectorXf_tgamma},
    { "trunc", _wrap_VectorXf_trunc},
    { "y0", _wrap_VectorXf_y0},
    { "y1", _wrap_VectorXf_y1},
    { "yn", _wrap_VectorXf_yn},
    {0,0}
};
static swig_lua_method swig_VectorXf_meta[] = {
    { "__getitem", _wrap_VectorXf___getitem},
    { "__setitem", _wrap_VectorXf___setitem},
    { "__unm", _wrap_VectorXf___unm},
    { "__add", _wrap_VectorXf___add},
    { "__sub", _wrap_VectorXf___sub},
    { "__mul", _wrap_VectorXf___mul},
    { "__div", _wrap_VectorXf___div},
    {0,0}
};

static swig_lua_attribute swig_VectorXf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_VectorXf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_VectorXf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_VectorXf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_VectorXf_Sf_SwigStatic = {
    "VectorXf",
    swig_VectorXf_Sf_SwigStatic_methods,
    swig_VectorXf_Sf_SwigStatic_attributes,
    swig_VectorXf_Sf_SwigStatic_constants,
    swig_VectorXf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_VectorXf_bases[] = {0};
static const char *swig_VectorXf_base_names[] = {0};
static swig_lua_class _wrap_class_VectorXf = { "VectorXf", "VectorXf", &SWIGTYPE_p_Viper__VectorT_float_t,_proxy__wrap_new_VectorXf, swig_delete_VectorXf, swig_VectorXf_methods, swig_VectorXf_attributes, &swig_VectorXf_Sf_SwigStatic, swig_VectorXf_meta, swig_VectorXf_bases, swig_VectorXf_base_names };

static int _wrap_VectorXd_init(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Viper::Vector< double >::init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::init",1,"Viper::Vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Vector< double >::init",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_init",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_dev_set(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  double *arg2 = (double *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::dev",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::dev",1,"Viper::Vector< double > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Viper::Vector< double >::dev",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_dev_set",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("VectorXd_dev_set",2,SWIGTYPE_p_double);
  }
  
  if (arg1) (arg1)->dev = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_dev_get(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::dev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::dev",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_dev_get",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  result = (double *) ((arg1)->dev);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_host_set(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  double *arg2 = (double *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::host",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::host",1,"Viper::Vector< double > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Viper::Vector< double >::host",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_host_set",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("VectorXd_host_set",2,SWIGTYPE_p_double);
  }
  
  if (arg1) (arg1)->host = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_host_get(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::host",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::host",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_host_get",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  result = (double *) ((arg1)->host);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_dev_ptr_set(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  std::shared_ptr< DevPtr< double > > arg2 ;
  std::shared_ptr< DevPtr< double > > *argp2 ;
  
  SWIG_check_num_args("Viper::Vector< double >::dev_ptr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::dev_ptr",1,"Viper::Vector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< double >::dev_ptr",2,"std::shared_ptr< DevPtr< double > >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_dev_ptr_set",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__shared_ptrT_DevPtrT_double_t_t,0))){
    SWIG_fail_ptr("VectorXd_dev_ptr_set",2,SWIGTYPE_p_std__shared_ptrT_DevPtrT_double_t_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->dev_ptr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_dev_ptr_get(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  std::shared_ptr< DevPtr< double > > result;
  
  SWIG_check_num_args("Viper::Vector< double >::dev_ptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::dev_ptr",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_dev_ptr_get",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  result =  ((arg1)->dev_ptr);
  {
    std::shared_ptr< DevPtr< double > > * resultptr = new std::shared_ptr< DevPtr< double > >((const std::shared_ptr< DevPtr< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_DevPtrT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_N_set(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Viper::Vector< double >::N",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::N",1,"Viper::Vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Vector< double >::N",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_N_set",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->N = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_N_get(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Viper::Vector< double >::N",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::N",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_N_get",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  result =  ((arg1)->N);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VectorXd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *result = 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::Vector",0,0)
  result = (Viper::Vector< double > *)new Viper::Vector< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Viper__VectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VectorXd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Viper::Vector< double > *result = 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::Vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Viper::Vector< double >::Vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Viper::Vector< double > *)new Viper::Vector< double >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Viper__VectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VectorXd__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  std::initializer_list< double > *arg2 = 0 ;
  Viper::Vector< double > *result = 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::Vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Viper::Vector< double >::Vector",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< double >::Vector",2,"std::initializer_list< double > const &");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__initializer_listT_double_t,0))){
    SWIG_fail_ptr("new_VectorXd",2,SWIGTYPE_p_std__initializer_listT_double_t);
  }
  
  result = (Viper::Vector< double > *)new Viper::Vector< double >(arg1,(std::initializer_list< double > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Viper__VectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VectorXd__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  std::vector< double > *arg2 = 0 ;
  Viper::Vector< double > *result = 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::Vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Viper::Vector< double >::Vector",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< double >::Vector",2,"std::vector< double > const &");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("new_VectorXd",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (Viper::Vector< double > *)new Viper::Vector< double >(arg1,(std::vector< double > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Viper__VectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VectorXd__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = 0 ;
  Viper::Vector< double > *result = 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::Vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Viper::Vector< double >::Vector",1,"Viper::Vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("new_VectorXd",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  result = (Viper::Vector< double > *)new Viper::Vector< double >((Viper::Vector< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Viper__VectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VectorXd__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  size_t arg2 ;
  Viper::Vector< double > *result = 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::Vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::Vector",1,"double *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Vector< double >::Vector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("new_VectorXd",1,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Viper::Vector< double > *)new Viper::Vector< double >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Viper__VectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VectorXd(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_VectorXd__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_VectorXd__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_VectorXd__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_double, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_VectorXd__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__initializer_listT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_VectorXd__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_VectorXd__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_VectorXd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viper::Vector< double >::Vector()\n"
    "    Viper::Vector< double >::Vector(size_t)\n"
    "    Viper::Vector< double >::Vector(int,std::initializer_list< double > const &)\n"
    "    Viper::Vector< double >::Vector(int,std::vector< double > const &)\n"
    "    Viper::Vector< double >::Vector(Viper::Vector< double > const &)\n"
    "    Viper::Vector< double >::Vector(double *,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_VectorXd_size(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Viper::Vector< double >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::size",1,"Viper::Vector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_size",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  result = ((Viper::Vector< double > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_download_host(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::download_host",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::download_host",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_download_host",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->download_host();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_upload_device(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::upload_device",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::upload_device",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_upload_device",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->upload_device();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_zero(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::zero",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_zero",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->zero();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_ones(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::ones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::ones",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_ones",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->ones();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_randu(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::randu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::randu",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_randu",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->randu();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_random(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Viper::Vector< double >::random",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::random",1,"Viper::Vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Vector< double >::random",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Viper::Vector< double >::random",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_random",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->random(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_fill(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Viper::Vector< double >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::fill",1,"Viper::Vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Vector< double >::fill",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_fill",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  array_index arg2 ;
  double result;
  
  SWIG_check_num_args("Viper::Vector< double >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::__getitem__",1,"Viper::Vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Vector< double >::__getitem__",2,"array_index");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd___getitem",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  arg2 = (array_index)lua_tonumber(L, 2);
  result = (double)(arg1)->__getitem__(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  array_index arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Viper::Vector< double >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::__setitem__",1,"Viper::Vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Vector< double >::__setitem__",2,"array_index");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Viper::Vector< double >::__setitem__",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd___setitem",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  arg2 = (array_index)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->__setitem__(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd___unm(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  Viper::Vector< double > result;
  
  SWIG_check_num_args("Viper::Vector< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::operator -",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd___unm",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  result = (arg1)->operator -();
  {
    Viper::Vector< double > * resultptr = new Viper::Vector< double >((const Viper::Vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__VectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  Viper::Vector< double > *arg2 = 0 ;
  Viper::Vector< double > result;
  
  SWIG_check_num_args("Viper::Vector< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::operator +",1,"Viper::Vector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< double >::operator +",2,"Viper::Vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd___add",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd___add",2,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  result = (arg1)->operator +((Viper::Vector< double > const &)*arg2);
  {
    Viper::Vector< double > * resultptr = new Viper::Vector< double >((const Viper::Vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__VectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  Viper::Vector< double > *arg2 = 0 ;
  Viper::Vector< double > result;
  
  SWIG_check_num_args("Viper::Vector< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::operator -",1,"Viper::Vector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< double >::operator -",2,"Viper::Vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd___sub",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd___sub",2,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  result = (arg1)->operator -((Viper::Vector< double > const &)*arg2);
  {
    Viper::Vector< double > * resultptr = new Viper::Vector< double >((const Viper::Vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__VectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  Viper::Vector< double > *arg2 = 0 ;
  Viper::Vector< double > result;
  
  SWIG_check_num_args("Viper::Vector< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::operator *",1,"Viper::Vector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< double >::operator *",2,"Viper::Vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd___mul",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd___mul",2,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  result = (arg1)->operator *((Viper::Vector< double > const &)*arg2);
  {
    Viper::Vector< double > * resultptr = new Viper::Vector< double >((const Viper::Vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__VectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  double arg2 ;
  Viper::Vector< double > result;
  
  SWIG_check_num_args("Viper::Vector< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::operator +",1,"Viper::Vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Vector< double >::operator +",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd___add",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = (arg1)->operator +(arg2);
  {
    Viper::Vector< double > * resultptr = new Viper::Vector< double >((const Viper::Vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__VectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_VectorXd___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_VectorXd___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'VectorXd___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viper::Vector< double >::operator +(Viper::Vector< double > const &)\n"
    "    Viper::Vector< double >::operator +(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_VectorXd___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  double arg2 ;
  Viper::Vector< double > result;
  
  SWIG_check_num_args("Viper::Vector< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::operator -",1,"Viper::Vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Vector< double >::operator -",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd___sub",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = (arg1)->operator -(arg2);
  {
    Viper::Vector< double > * resultptr = new Viper::Vector< double >((const Viper::Vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__VectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_VectorXd___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_VectorXd___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'VectorXd___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viper::Vector< double >::operator -(Viper::Vector< double > const &)\n"
    "    Viper::Vector< double >::operator -(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_VectorXd___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  double arg2 ;
  Viper::Vector< double > result;
  
  SWIG_check_num_args("Viper::Vector< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::operator *",1,"Viper::Vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Vector< double >::operator *",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd___mul",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = (arg1)->operator *(arg2);
  {
    Viper::Vector< double > * resultptr = new Viper::Vector< double >((const Viper::Vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__VectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_VectorXd___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_VectorXd___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'VectorXd___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viper::Vector< double >::operator *(Viper::Vector< double > const &)\n"
    "    Viper::Vector< double >::operator *(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_VectorXd___div(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  double arg2 ;
  Viper::Vector< double > result;
  
  SWIG_check_num_args("Viper::Vector< double >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::operator /",1,"Viper::Vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Vector< double >::operator /",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd___div",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = (arg1)->operator /(arg2);
  {
    Viper::Vector< double > * resultptr = new Viper::Vector< double >((const Viper::Vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__VectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_copy(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  Viper::Vector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::copy",1,"Viper::Vector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< double >::copy",2,"Viper::Vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_copy",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_copy",2,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->copy((Viper::Vector< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_resize(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Viper::Vector< double >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::resize",1,"Viper::Vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Vector< double >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_resize",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_print(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::print",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_print",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_clone(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  Viper::Vector< double > *arg2 = 0 ;
  Viper::Vector< double > result;
  
  SWIG_check_num_args("Viper::Vector< double >::clone",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::clone",1,"Viper::Vector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< double >::clone",2,"Viper::Vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_clone",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_clone",2,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  result = (arg1)->clone((Viper::Vector< double > const &)*arg2);
  {
    Viper::Vector< double > * resultptr = new Viper::Vector< double >((const Viper::Vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__VectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_eval(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  Viper::Vector< double > result;
  
  SWIG_check_num_args("Viper::Vector< double >::eval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::eval",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_eval",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  result = (arg1)->eval();
  {
    Viper::Vector< double > * resultptr = new Viper::Vector< double >((const Viper::Vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__VectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_abs(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::abs",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_abs",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->abs();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_exp(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::exp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::exp",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_exp",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->exp();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_log2(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::log2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::log2",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_log2",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->log2();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_log10(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::log10",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::log10",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_log10",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->log10();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Viper::Vector< double >::pow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::pow",1,"Viper::Vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Vector< double >::pow",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_pow",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->pow(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  Viper::Vector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::pow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::pow",1,"Viper::Vector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< double >::pow",2,"Viper::Vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_pow",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_pow",2,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->pow((Viper::Vector< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_VectorXd_pow__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_VectorXd_pow__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'VectorXd_pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viper::Vector< double >::pow(double)\n"
    "    Viper::Vector< double >::pow(Viper::Vector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_VectorXd_sqrt(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::sqrt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::sqrt",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_sqrt",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->sqrt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_rsqrt(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::rsqrt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::rsqrt",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_rsqrt",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->rsqrt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_sin(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::sin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::sin",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_sin",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->sin();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_cos(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::cos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::cos",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_cos",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->cos();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_tan(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::tan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::tan",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_tan",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->tan();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_asin(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::asin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::asin",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_asin",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->asin();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_acos(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::acos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::acos",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_acos",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->acos();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_atan(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::atan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::atan",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_atan",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->atan();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_sinh(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::sinh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::sinh",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_sinh",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->sinh();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_cosh(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::cosh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::cosh",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_cosh",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->cosh();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_tanh(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::tanh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::tanh",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_tanh",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->tanh();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_asinh(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::asinh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::asinh",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_asinh",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->asinh();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_acosh(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::acosh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::acosh",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_acosh",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->acosh();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_atanh(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::atanh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::atanh",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_atanh",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->atanh();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_atan2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Viper::Vector< double >::atan2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::atan2",1,"Viper::Vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Vector< double >::atan2",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_atan2",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->atan2(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_atan2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  Viper::Vector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::atan2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::atan2",1,"Viper::Vector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< double >::atan2",2,"Viper::Vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_atan2",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_atan2",2,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->atan2((Viper::Vector< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_atan2(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_VectorXd_atan2__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_VectorXd_atan2__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'VectorXd_atan2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viper::Vector< double >::atan2(double)\n"
    "    Viper::Vector< double >::atan2(Viper::Vector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_VectorXd_sigmoid(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::sigmoid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::sigmoid",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_sigmoid",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->sigmoid();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_sigmoid_deriv(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::sigmoid_deriv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::sigmoid_deriv",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_sigmoid_deriv",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->sigmoid_deriv();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_relu(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::relu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::relu",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_relu",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->relu();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_relu_deriv(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::relu_deriv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::relu_deriv",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_relu_deriv",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->relu_deriv();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_softmax(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::softmax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::softmax",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_softmax",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->softmax();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_tanh_deriv(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::tanh_deriv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::tanh_deriv",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_tanh_deriv",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->tanh_deriv();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_cbrt(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::cbrt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::cbrt",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_cbrt",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->cbrt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_ceil(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::ceil",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::ceil",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_ceil",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->ceil();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_cospi(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::cospi",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::cospi",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_cospi",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->cospi();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_cyl_bessel_i0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::cyl_bessel_i0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::cyl_bessel_i0",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_cyl_bessel_i0",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->cyl_bessel_i0();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_cyl_bessel_i1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::cyl_bessel_i1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::cyl_bessel_i1",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_cyl_bessel_i1",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->cyl_bessel_i1();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_erfc(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::erfc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::erfc",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_erfc",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->erfc();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_erfcx(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::erfcx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::erfcx",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_erfcx",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->erfcx();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_erfcinv(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::erfcinv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::erfcinv",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_erfcinv",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->erfcinv();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_erf(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::erf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::erf",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_erf",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->erf();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_erfinv(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::erfinv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::erfinv",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_erfinv",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->erfinv();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_exp10(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::exp10",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::exp10",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_exp10",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->exp10();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_exp2(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::exp2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::exp2",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_exp2",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->exp2();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_expm1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::expm1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::expm1",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_expm1",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->expm1();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_fabs(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::fabs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::fabs",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_fabs",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->fabs();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_fdim(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  Viper::Vector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::fdim",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::fdim",1,"Viper::Vector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< double >::fdim",2,"Viper::Vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_fdim",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_fdim",2,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->fdim((Viper::Vector< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_fmod(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  Viper::Vector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::fmod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::fmod",1,"Viper::Vector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< double >::fmod",2,"Viper::Vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_fmod",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_fmod",2,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->fmod((Viper::Vector< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_hypot(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  Viper::Vector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::hypot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::hypot",1,"Viper::Vector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< double >::hypot",2,"Viper::Vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_hypot",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_hypot",2,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->hypot((Viper::Vector< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_ilogb(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::ilogb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::ilogb",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_ilogb",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->ilogb();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_j0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::j0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::j0",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_j0",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->j0();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_j1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::j1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::j1",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_j1",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->j1();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_jn(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Viper::Vector< double >::jn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::jn",1,"Viper::Vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Vector< double >::jn",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_jn",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->jn(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_lgamma(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::lgamma",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::lgamma",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_lgamma",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->lgamma();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_log1p(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::log1p",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::log1p",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_log1p",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->log1p();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_logb(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::logb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::logb",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_logb",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->logb();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_norm3d(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  Viper::Vector< double > *arg2 = 0 ;
  Viper::Vector< double > *arg3 = 0 ;
  Viper::Vector< double > *arg4 = 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::norm3d",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::norm3d",1,"Viper::Vector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< double >::norm3d",2,"Viper::Vector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Viper::Vector< double >::norm3d",3,"Viper::Vector< double > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Viper::Vector< double >::norm3d",4,"Viper::Vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_norm3d",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_norm3d",2,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_norm3d",3,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_norm3d",4,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->norm3d((Viper::Vector< double > const &)*arg2,(Viper::Vector< double > const &)*arg3,(Viper::Vector< double > const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_norm4d(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  Viper::Vector< double > *arg2 = 0 ;
  Viper::Vector< double > *arg3 = 0 ;
  Viper::Vector< double > *arg4 = 0 ;
  Viper::Vector< double > *arg5 = 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::norm4d",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::norm4d",1,"Viper::Vector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< double >::norm4d",2,"Viper::Vector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Viper::Vector< double >::norm4d",3,"Viper::Vector< double > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Viper::Vector< double >::norm4d",4,"Viper::Vector< double > const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Viper::Vector< double >::norm4d",5,"Viper::Vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_norm4d",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_norm4d",2,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_norm4d",3,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_norm4d",4,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_norm4d",5,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->norm4d((Viper::Vector< double > const &)*arg2,(Viper::Vector< double > const &)*arg3,(Viper::Vector< double > const &)*arg4,(Viper::Vector< double > const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_normcdf(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::normcdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::normcdf",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_normcdf",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->normcdf();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_normcdfinv(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::normcdfinv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::normcdfinv",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_normcdfinv",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->normcdfinv();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_norm(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::norm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::norm",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_norm",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->norm();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_rcbrt(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::rcbrt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::rcbrt",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_rcbrt",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->rcbrt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_remainder(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  Viper::Vector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::remainder",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::remainder",1,"Viper::Vector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< double >::remainder",2,"Viper::Vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_remainder",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_remainder",2,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->remainder((Viper::Vector< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_rhypot(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  Viper::Vector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::rhypot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::rhypot",1,"Viper::Vector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< double >::rhypot",2,"Viper::Vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_rhypot",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_rhypot",2,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->rhypot((Viper::Vector< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_rnorm3d(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  Viper::Vector< double > *arg2 = 0 ;
  Viper::Vector< double > *arg3 = 0 ;
  Viper::Vector< double > *arg4 = 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::rnorm3d",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::rnorm3d",1,"Viper::Vector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< double >::rnorm3d",2,"Viper::Vector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Viper::Vector< double >::rnorm3d",3,"Viper::Vector< double > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Viper::Vector< double >::rnorm3d",4,"Viper::Vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_rnorm3d",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_rnorm3d",2,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_rnorm3d",3,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_rnorm3d",4,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->rnorm3d((Viper::Vector< double > const &)*arg2,(Viper::Vector< double > const &)*arg3,(Viper::Vector< double > const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_rnorm4d(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  Viper::Vector< double > *arg2 = 0 ;
  Viper::Vector< double > *arg3 = 0 ;
  Viper::Vector< double > *arg4 = 0 ;
  Viper::Vector< double > *arg5 = 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::rnorm4d",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::rnorm4d",1,"Viper::Vector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Vector< double >::rnorm4d",2,"Viper::Vector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Viper::Vector< double >::rnorm4d",3,"Viper::Vector< double > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Viper::Vector< double >::rnorm4d",4,"Viper::Vector< double > const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Viper::Vector< double >::rnorm4d",5,"Viper::Vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_rnorm4d",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_rnorm4d",2,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_rnorm4d",3,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_rnorm4d",4,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_rnorm4d",5,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->rnorm4d((Viper::Vector< double > const &)*arg2,(Viper::Vector< double > const &)*arg3,(Viper::Vector< double > const &)*arg4,(Viper::Vector< double > const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_rnorm(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::rnorm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::rnorm",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_rnorm",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->rnorm();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_tgamma(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::tgamma",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::tgamma",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_tgamma",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->tgamma();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_trunc(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::trunc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::trunc",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_trunc",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->trunc();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_y0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::y0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::y0",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_y0",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->y0();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_y1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Vector< double >::y1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::y1",1,"Viper::Vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_y1",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->y1();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorXd_yn(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Vector< double > *arg1 = (Viper::Vector< double > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Viper::Vector< double >::yn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Vector< double >::yn",1,"Viper::Vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Vector< double >::yn",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("VectorXd_yn",1,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->yn(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_VectorXd(void *obj) {
Viper::Vector< double > *arg1 = (Viper::Vector< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_VectorXd(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_VectorXd);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_VectorXd_attributes[] = {
    { "dev", _wrap_VectorXd_dev_get, _wrap_VectorXd_dev_set },
    { "host", _wrap_VectorXd_host_get, _wrap_VectorXd_host_set },
    { "dev_ptr", _wrap_VectorXd_dev_ptr_get, _wrap_VectorXd_dev_ptr_set },
    { "N", _wrap_VectorXd_N_get, _wrap_VectorXd_N_set },
    {0,0,0}
};
static swig_lua_method swig_VectorXd_methods[]= {
    { "init", _wrap_VectorXd_init},
    { "size", _wrap_VectorXd_size},
    { "download_host", _wrap_VectorXd_download_host},
    { "upload_device", _wrap_VectorXd_upload_device},
    { "zero", _wrap_VectorXd_zero},
    { "ones", _wrap_VectorXd_ones},
    { "randu", _wrap_VectorXd_randu},
    { "random", _wrap_VectorXd_random},
    { "fill", _wrap_VectorXd_fill},
    { "__getitem", _wrap_VectorXd___getitem},
    { "__setitem", _wrap_VectorXd___setitem},
    { "__unm", _wrap_VectorXd___unm},
    { "__add", _wrap_VectorXd___add},
    { "__sub", _wrap_VectorXd___sub},
    { "__mul", _wrap_VectorXd___mul},
    { "__div", _wrap_VectorXd___div},
    { "copy", _wrap_VectorXd_copy},
    { "resize", _wrap_VectorXd_resize},
    { "print", _wrap_VectorXd_print},
    { "clone", _wrap_VectorXd_clone},
    { "eval", _wrap_VectorXd_eval},
    { "abs", _wrap_VectorXd_abs},
    { "exp", _wrap_VectorXd_exp},
    { "log2", _wrap_VectorXd_log2},
    { "log10", _wrap_VectorXd_log10},
    { "pow", _wrap_VectorXd_pow},
    { "sqrt", _wrap_VectorXd_sqrt},
    { "rsqrt", _wrap_VectorXd_rsqrt},
    { "sin", _wrap_VectorXd_sin},
    { "cos", _wrap_VectorXd_cos},
    { "tan", _wrap_VectorXd_tan},
    { "asin", _wrap_VectorXd_asin},
    { "acos", _wrap_VectorXd_acos},
    { "atan", _wrap_VectorXd_atan},
    { "sinh", _wrap_VectorXd_sinh},
    { "cosh", _wrap_VectorXd_cosh},
    { "tanh", _wrap_VectorXd_tanh},
    { "asinh", _wrap_VectorXd_asinh},
    { "acosh", _wrap_VectorXd_acosh},
    { "atanh", _wrap_VectorXd_atanh},
    { "atan2", _wrap_VectorXd_atan2},
    { "sigmoid", _wrap_VectorXd_sigmoid},
    { "sigmoid_deriv", _wrap_VectorXd_sigmoid_deriv},
    { "relu", _wrap_VectorXd_relu},
    { "relu_deriv", _wrap_VectorXd_relu_deriv},
    { "softmax", _wrap_VectorXd_softmax},
    { "tanh_deriv", _wrap_VectorXd_tanh_deriv},
    { "cbrt", _wrap_VectorXd_cbrt},
    { "ceil", _wrap_VectorXd_ceil},
    { "cospi", _wrap_VectorXd_cospi},
    { "cyl_bessel_i0", _wrap_VectorXd_cyl_bessel_i0},
    { "cyl_bessel_i1", _wrap_VectorXd_cyl_bessel_i1},
    { "erfc", _wrap_VectorXd_erfc},
    { "erfcx", _wrap_VectorXd_erfcx},
    { "erfcinv", _wrap_VectorXd_erfcinv},
    { "erf", _wrap_VectorXd_erf},
    { "erfinv", _wrap_VectorXd_erfinv},
    { "exp10", _wrap_VectorXd_exp10},
    { "exp2", _wrap_VectorXd_exp2},
    { "expm1", _wrap_VectorXd_expm1},
    { "fabs", _wrap_VectorXd_fabs},
    { "fdim", _wrap_VectorXd_fdim},
    { "fmod", _wrap_VectorXd_fmod},
    { "hypot", _wrap_VectorXd_hypot},
    { "ilogb", _wrap_VectorXd_ilogb},
    { "j0", _wrap_VectorXd_j0},
    { "j1", _wrap_VectorXd_j1},
    { "jn", _wrap_VectorXd_jn},
    { "lgamma", _wrap_VectorXd_lgamma},
    { "log1p", _wrap_VectorXd_log1p},
    { "logb", _wrap_VectorXd_logb},
    { "norm3d", _wrap_VectorXd_norm3d},
    { "norm4d", _wrap_VectorXd_norm4d},
    { "normcdf", _wrap_VectorXd_normcdf},
    { "normcdfinv", _wrap_VectorXd_normcdfinv},
    { "norm", _wrap_VectorXd_norm},
    { "rcbrt", _wrap_VectorXd_rcbrt},
    { "remainder", _wrap_VectorXd_remainder},
    { "rhypot", _wrap_VectorXd_rhypot},
    { "rnorm3d", _wrap_VectorXd_rnorm3d},
    { "rnorm4d", _wrap_VectorXd_rnorm4d},
    { "rnorm", _wrap_VectorXd_rnorm},
    { "tgamma", _wrap_VectorXd_tgamma},
    { "trunc", _wrap_VectorXd_trunc},
    { "y0", _wrap_VectorXd_y0},
    { "y1", _wrap_VectorXd_y1},
    { "yn", _wrap_VectorXd_yn},
    {0,0}
};
static swig_lua_method swig_VectorXd_meta[] = {
    { "__getitem", _wrap_VectorXd___getitem},
    { "__setitem", _wrap_VectorXd___setitem},
    { "__unm", _wrap_VectorXd___unm},
    { "__add", _wrap_VectorXd___add},
    { "__sub", _wrap_VectorXd___sub},
    { "__mul", _wrap_VectorXd___mul},
    { "__div", _wrap_VectorXd___div},
    {0,0}
};

static swig_lua_attribute swig_VectorXd_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_VectorXd_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_VectorXd_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_VectorXd_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_VectorXd_Sf_SwigStatic = {
    "VectorXd",
    swig_VectorXd_Sf_SwigStatic_methods,
    swig_VectorXd_Sf_SwigStatic_attributes,
    swig_VectorXd_Sf_SwigStatic_constants,
    swig_VectorXd_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_VectorXd_bases[] = {0};
static const char *swig_VectorXd_base_names[] = {0};
static swig_lua_class _wrap_class_VectorXd = { "VectorXd", "VectorXd", &SWIGTYPE_p_Viper__VectorT_double_t,_proxy__wrap_new_VectorXd, swig_delete_VectorXd, swig_VectorXd_methods, swig_VectorXd_attributes, &swig_VectorXd_Sf_SwigStatic, swig_VectorXd_meta, swig_VectorXd_bases, swig_VectorXd_base_names };

static int _wrap_MatrixXf_init(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::init",1,"Viper::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< float >::init",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Viper::Matrix< float >::init",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_init",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->init(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_dev_set(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::dev",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::dev",1,"Viper::Matrix< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Viper::Matrix< float >::dev",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_dev_set",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("MatrixXf_dev_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->dev = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_dev_get(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::dev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::dev",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_dev_get",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  result = (float *) ((arg1)->dev);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_host_set(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::host",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::host",1,"Viper::Matrix< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Viper::Matrix< float >::host",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_host_set",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("MatrixXf_host_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->host = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_host_get(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::host",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::host",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_host_get",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  result = (float *) ((arg1)->host);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_dev_ptr_set(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  std::shared_ptr< DevPtr< float > > arg2 ;
  std::shared_ptr< DevPtr< float > > *argp2 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::dev_ptr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::dev_ptr",1,"Viper::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< float >::dev_ptr",2,"std::shared_ptr< DevPtr< float > >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_dev_ptr_set",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__shared_ptrT_DevPtrT_float_t_t,0))){
    SWIG_fail_ptr("MatrixXf_dev_ptr_set",2,SWIGTYPE_p_std__shared_ptrT_DevPtrT_float_t_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->dev_ptr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_dev_ptr_get(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  std::shared_ptr< DevPtr< float > > result;
  
  SWIG_check_num_args("Viper::Matrix< float >::dev_ptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::dev_ptr",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_dev_ptr_get",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  result =  ((arg1)->dev_ptr);
  {
    std::shared_ptr< DevPtr< float > > * resultptr = new std::shared_ptr< DevPtr< float > >((const std::shared_ptr< DevPtr< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_DevPtrT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_M_set(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::M",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::M",1,"Viper::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< float >::M",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_M_set",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->M = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_M_get(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Viper::Matrix< float >::M",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::M",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_M_get",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  result =  ((arg1)->M);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_N_set(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::N",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::N",1,"Viper::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< float >::N",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_N_set",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->N = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_N_get(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Viper::Matrix< float >::N",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::N",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_N_get",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  result =  ((arg1)->N);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MatrixXf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *result = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::Matrix",0,0)
  result = (Viper::Matrix< float > *)new Viper::Matrix< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Viper__MatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MatrixXf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  Viper::Matrix< float > *result = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::Matrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Viper::Matrix< float >::Matrix",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< float >::Matrix",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Viper::Matrix< float > *)new Viper::Matrix< float >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Viper__MatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MatrixXf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  std::initializer_list< float > *arg3 = 0 ;
  Viper::Matrix< float > *result = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::Matrix",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Viper::Matrix< float >::Matrix",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< float >::Matrix",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Viper::Matrix< float >::Matrix",3,"std::initializer_list< float > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__initializer_listT_float_t,0))){
    SWIG_fail_ptr("new_MatrixXf",3,SWIGTYPE_p_std__initializer_listT_float_t);
  }
  
  result = (Viper::Matrix< float > *)new Viper::Matrix< float >(arg1,arg2,(std::initializer_list< float > const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Viper__MatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MatrixXf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  std::vector< float > *arg3 = 0 ;
  Viper::Matrix< float > *result = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::Matrix",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Viper::Matrix< float >::Matrix",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< float >::Matrix",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Viper::Matrix< float >::Matrix",3,"std::vector< float > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("new_MatrixXf",3,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (Viper::Matrix< float > *)new Viper::Matrix< float >(arg1,arg2,(std::vector< float > const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Viper__MatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MatrixXf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = 0 ;
  Viper::Matrix< float > *result = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Viper::Matrix< float >::Matrix",1,"Viper::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("new_MatrixXf",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  result = (Viper::Matrix< float > *)new Viper::Matrix< float >((Viper::Matrix< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Viper__MatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MatrixXf(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_MatrixXf__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_MatrixXf__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_MatrixXf__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_MatrixXf__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__initializer_listT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_MatrixXf__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_MatrixXf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viper::Matrix< float >::Matrix()\n"
    "    Viper::Matrix< float >::Matrix(size_t,size_t)\n"
    "    Viper::Matrix< float >::Matrix(size_t,size_t,std::initializer_list< float > const &)\n"
    "    Viper::Matrix< float >::Matrix(size_t,size_t,std::vector< float > const &)\n"
    "    Viper::Matrix< float >::Matrix(Viper::Matrix< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_MatrixXf_size(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Viper::Matrix< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::size",1,"Viper::Matrix< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_size",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  result = ((Viper::Matrix< float > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_rows(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Viper::Matrix< float >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::rows",1,"Viper::Matrix< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_rows",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  result = ((Viper::Matrix< float > const *)arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_cols(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Viper::Matrix< float >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::cols",1,"Viper::Matrix< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_cols",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  result = ((Viper::Matrix< float > const *)arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_resize(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::resize",1,"Viper::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< float >::resize",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Viper::Matrix< float >::resize",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_resize",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_t(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  Viper::Matrix< float > result;
  
  SWIG_check_num_args("Viper::Matrix< float >::t",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::t",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_t",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  result = (arg1)->t();
  {
    Viper::Matrix< float > * resultptr = new Viper::Matrix< float >((const Viper::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_transpose(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  Viper::Matrix< float > *arg2 = 0 ;
  Viper::Matrix< float > result;
  
  SWIG_check_num_args("Viper::Matrix< float >::transpose",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::transpose",1,"Viper::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< float >::transpose",2,"Viper::Matrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_transpose",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_transpose",2,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  result = (arg1)->transpose(*arg2);
  {
    Viper::Matrix< float > * resultptr = new Viper::Matrix< float >((const Viper::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_copy(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  Viper::Matrix< float > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::copy",1,"Viper::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< float >::copy",2,"Viper::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_copy",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_copy",2,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->copy((Viper::Matrix< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  Viper::Matrix< float > *arg2 = 0 ;
  Viper::Matrix< float > result;
  
  SWIG_check_num_args("Viper::Matrix< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::operator +",1,"Viper::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< float >::operator +",2,"Viper::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf___add",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf___add",2,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  result = (arg1)->operator +((Viper::Matrix< float > const &)*arg2);
  {
    Viper::Matrix< float > * resultptr = new Viper::Matrix< float >((const Viper::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  Viper::Matrix< float > *arg2 = 0 ;
  Viper::Matrix< float > result;
  
  SWIG_check_num_args("Viper::Matrix< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::operator -",1,"Viper::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< float >::operator -",2,"Viper::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf___sub",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf___sub",2,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  result = (arg1)->operator -((Viper::Matrix< float > const &)*arg2);
  {
    Viper::Matrix< float > * resultptr = new Viper::Matrix< float >((const Viper::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  Viper::Matrix< float > *arg2 = 0 ;
  Viper::Matrix< float > result;
  
  SWIG_check_num_args("Viper::Matrix< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::operator *",1,"Viper::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< float >::operator *",2,"Viper::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf___mul",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf___mul",2,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  result = (arg1)->operator *((Viper::Matrix< float > const &)*arg2);
  {
    Viper::Matrix< float > * resultptr = new Viper::Matrix< float >((const Viper::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf___unm(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  Viper::Matrix< float > result;
  
  SWIG_check_num_args("Viper::Matrix< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::operator -",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf___unm",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  result = (arg1)->operator -();
  {
    Viper::Matrix< float > * resultptr = new Viper::Matrix< float >((const Viper::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  float arg2 ;
  Viper::Matrix< float > result;
  
  SWIG_check_num_args("Viper::Matrix< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::operator +",1,"Viper::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< float >::operator +",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf___add",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (arg1)->operator +(arg2);
  {
    Viper::Matrix< float > * resultptr = new Viper::Matrix< float >((const Viper::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_MatrixXf___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MatrixXf___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MatrixXf___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viper::Matrix< float >::operator +(Viper::Matrix< float > const &)\n"
    "    Viper::Matrix< float >::operator +(float)\n");
  lua_error(L);return 0;
}


static int _wrap_MatrixXf___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  float arg2 ;
  Viper::Matrix< float > result;
  
  SWIG_check_num_args("Viper::Matrix< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::operator -",1,"Viper::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< float >::operator -",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf___sub",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (arg1)->operator -(arg2);
  {
    Viper::Matrix< float > * resultptr = new Viper::Matrix< float >((const Viper::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_MatrixXf___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MatrixXf___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MatrixXf___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viper::Matrix< float >::operator -(Viper::Matrix< float > const &)\n"
    "    Viper::Matrix< float >::operator -(float)\n");
  lua_error(L);return 0;
}


static int _wrap_MatrixXf___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  float arg2 ;
  Viper::Matrix< float > result;
  
  SWIG_check_num_args("Viper::Matrix< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::operator *",1,"Viper::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< float >::operator *",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf___mul",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (arg1)->operator *(arg2);
  {
    Viper::Matrix< float > * resultptr = new Viper::Matrix< float >((const Viper::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_MatrixXf___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MatrixXf___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MatrixXf___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viper::Matrix< float >::operator *(Viper::Matrix< float > const &)\n"
    "    Viper::Matrix< float >::operator *(float)\n");
  lua_error(L);return 0;
}


static int _wrap_MatrixXf___div(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  float arg2 ;
  Viper::Matrix< float > result;
  
  SWIG_check_num_args("Viper::Matrix< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::operator /",1,"Viper::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< float >::operator /",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf___div",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (arg1)->operator /(arg2);
  {
    Viper::Matrix< float > * resultptr = new Viper::Matrix< float >((const Viper::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_hadamard(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  Viper::Matrix< float > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::hadamard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::hadamard",1,"Viper::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< float >::hadamard",2,"Viper::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_hadamard",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_hadamard",2,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->hadamard((Viper::Matrix< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_download_host(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::download_host",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::download_host",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_download_host",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->download_host();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_upload_device(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::upload_device",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::upload_device",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_upload_device",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->upload_device();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_zero(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::zero",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_zero",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->zero();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_ones(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::ones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::ones",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_ones",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->ones();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_randu(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::randu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::randu",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_randu",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->randu();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_random(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::random",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::random",1,"Viper::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< float >::random",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Viper::Matrix< float >::random",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_random",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->random(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_fill(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::fill",1,"Viper::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< float >::fill",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_fill",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf___call(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::operator ()",1,"Viper::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< float >::operator ()",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Viper::Matrix< float >::operator ()",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf___call",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (float *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_index(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  size_t result;
  
  SWIG_check_num_args("Viper::Matrix< float >::index",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::index",1,"Viper::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< float >::index",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Viper::Matrix< float >::index",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_index",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (arg1)->index(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_sum(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("Viper::Matrix< float >::sum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::sum",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_sum",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  result = (float)(arg1)->sum();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_eval(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  Viper::Matrix< float > result;
  
  SWIG_check_num_args("Viper::Matrix< float >::eval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::eval",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_eval",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  result = (arg1)->eval();
  {
    Viper::Matrix< float > * resultptr = new Viper::Matrix< float >((const Viper::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_addToEachRow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  Viper::Matrix< float > *arg2 = 0 ;
  int arg3 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::addToEachRow",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::addToEachRow",1,"Viper::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< float >::addToEachRow",2,"Viper::Matrix< float > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Viper::Matrix< float >::addToEachRow",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_addToEachRow",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_addToEachRow",2,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->addToEachRow((Viper::Matrix< float > const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_addToEachRow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  Viper::Matrix< float > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::addToEachRow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::addToEachRow",1,"Viper::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< float >::addToEachRow",2,"Viper::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_addToEachRow",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_addToEachRow",2,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->addToEachRow((Viper::Matrix< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_addToEachRow(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_MatrixXf_addToEachRow__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_MatrixXf_addToEachRow__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MatrixXf_addToEachRow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viper::Matrix< float >::addToEachRow(Viper::Matrix< float > const &,int)\n"
    "    Viper::Matrix< float >::addToEachRow(Viper::Matrix< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_MatrixXf_get(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  float result;
  
  SWIG_check_num_args("Viper::Matrix< float >::get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::get",1,"Viper::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< float >::get",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Viper::Matrix< float >::get",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_get",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (float)(arg1)->get(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_set(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::set",1,"Viper::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< float >::set",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Viper::Matrix< float >::set",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Viper::Matrix< float >::set",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_set",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_get_row(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  int arg2 ;
  Viper::Matrix< float > result;
  
  SWIG_check_num_args("Viper::Matrix< float >::get_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::get_row",1,"Viper::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< float >::get_row",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_get_row",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (arg1)->get_row(arg2);
  {
    Viper::Matrix< float > * resultptr = new Viper::Matrix< float >((const Viper::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_set_row__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  Viper::Matrix< float > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::set_row",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::set_row",1,"Viper::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< float >::set_row",2,"Viper::Matrix< float > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Viper::Matrix< float >::set_row",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Viper::Matrix< float >::set_row",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_set_row",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_set_row",2,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->set_row((Viper::Matrix< float > const &)*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_set_row__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  Viper::Matrix< float > *arg2 = 0 ;
  int arg3 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::set_row",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::set_row",1,"Viper::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< float >::set_row",2,"Viper::Matrix< float > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Viper::Matrix< float >::set_row",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_set_row",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_set_row",2,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->set_row((Viper::Matrix< float > const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_set_row__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  Viper::Matrix< float > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::set_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::set_row",1,"Viper::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< float >::set_row",2,"Viper::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_set_row",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_set_row",2,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->set_row((Viper::Matrix< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_set_row__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  Viper::Vector< float > *arg2 = 0 ;
  int arg3 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::set_row",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::set_row",1,"Viper::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< float >::set_row",2,"Viper::Vector< float > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Viper::Matrix< float >::set_row",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_set_row",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_set_row",2,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->set_row((Viper::Vector< float > const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_set_row__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  Viper::Vector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::set_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::set_row",1,"Viper::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< float >::set_row",2,"Viper::Vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_set_row",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_set_row",2,SWIGTYPE_p_Viper__VectorT_float_t);
  }
  
  (arg1)->set_row((Viper::Vector< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_set_row(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_MatrixXf_set_row__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_MatrixXf_set_row__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_MatrixXf_set_row__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_MatrixXf_set_row__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_MatrixXf_set_row__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MatrixXf_set_row'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viper::Matrix< float >::set_row(Viper::Matrix< float > const &,int,int)\n"
    "    Viper::Matrix< float >::set_row(Viper::Matrix< float > const &,int)\n"
    "    Viper::Matrix< float >::set_row(Viper::Matrix< float > const &)\n"
    "    Viper::Matrix< float >::set_row(Viper::Vector< float > const &,int)\n"
    "    Viper::Matrix< float >::set_row(Viper::Vector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_MatrixXf_print(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::print",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_print",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_print_dims(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::print_dims",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::print_dims",1,"Viper::Matrix< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_print_dims",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  ((Viper::Matrix< float > const *)arg1)->print_dims();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_identity(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::identity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::identity",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_identity",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->identity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_abs(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::abs",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_abs",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->abs();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_exp(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::exp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::exp",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_exp",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->exp();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_log2(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::log2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::log2",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_log2",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->log2();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_log10(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::log10",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::log10",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_log10",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->log10();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::pow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::pow",1,"Viper::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< float >::pow",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_pow",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->pow(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  Viper::Matrix< float > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::pow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::pow",1,"Viper::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< float >::pow",2,"Viper::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_pow",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_pow",2,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->pow((Viper::Matrix< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_MatrixXf_pow__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MatrixXf_pow__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MatrixXf_pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viper::Matrix< float >::pow(float)\n"
    "    Viper::Matrix< float >::pow(Viper::Matrix< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_MatrixXf_sqrt(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::sqrt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::sqrt",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_sqrt",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->sqrt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_rsqrt(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::rsqrt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::rsqrt",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_rsqrt",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->rsqrt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_sin(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::sin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::sin",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_sin",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->sin();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_cos(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::cos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::cos",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_cos",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->cos();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_tan(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::tan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::tan",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_tan",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->tan();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_asin(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::asin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::asin",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_asin",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->asin();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_acos(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::acos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::acos",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_acos",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->acos();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_atan(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::atan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::atan",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_atan",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->atan();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_sinh(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::sinh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::sinh",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_sinh",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->sinh();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_cosh(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::cosh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::cosh",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_cosh",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->cosh();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_tanh(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::tanh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::tanh",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_tanh",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->tanh();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_asinh(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::asinh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::asinh",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_asinh",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->asinh();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_acosh(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::acosh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::acosh",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_acosh",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->acosh();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_atanh(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::atanh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::atanh",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_atanh",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->atanh();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_atan2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::atan2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::atan2",1,"Viper::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< float >::atan2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_atan2",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->atan2(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_atan2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  Viper::Matrix< float > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::atan2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::atan2",1,"Viper::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< float >::atan2",2,"Viper::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_atan2",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_atan2",2,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->atan2((Viper::Matrix< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_atan2(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_MatrixXf_atan2__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MatrixXf_atan2__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MatrixXf_atan2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viper::Matrix< float >::atan2(float)\n"
    "    Viper::Matrix< float >::atan2(Viper::Matrix< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_MatrixXf_sigmoid(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::sigmoid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::sigmoid",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_sigmoid",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->sigmoid();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_sigmoid_deriv(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::sigmoid_deriv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::sigmoid_deriv",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_sigmoid_deriv",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->sigmoid_deriv();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_relu(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::relu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::relu",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_relu",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->relu();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_relu_deriv(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::relu_deriv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::relu_deriv",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_relu_deriv",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->relu_deriv();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_softmax(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::softmax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::softmax",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_softmax",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->softmax();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_tanh_deriv(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::tanh_deriv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::tanh_deriv",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_tanh_deriv",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->tanh_deriv();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_cbrt(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::cbrt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::cbrt",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_cbrt",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->cbrt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_ceil(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::ceil",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::ceil",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_ceil",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->ceil();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_cospi(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::cospi",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::cospi",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_cospi",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->cospi();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_cyl_bessel_i0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::cyl_bessel_i0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::cyl_bessel_i0",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_cyl_bessel_i0",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->cyl_bessel_i0();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_cyl_bessel_i1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::cyl_bessel_i1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::cyl_bessel_i1",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_cyl_bessel_i1",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->cyl_bessel_i1();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_erfc(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::erfc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::erfc",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_erfc",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->erfc();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_erfcx(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::erfcx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::erfcx",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_erfcx",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->erfcx();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_erfcinv(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::erfcinv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::erfcinv",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_erfcinv",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->erfcinv();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_erf(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::erf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::erf",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_erf",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->erf();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_erfinv(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::erfinv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::erfinv",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_erfinv",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->erfinv();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_exp10(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::exp10",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::exp10",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_exp10",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->exp10();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_exp2(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::exp2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::exp2",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_exp2",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->exp2();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_expm1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::expm1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::expm1",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_expm1",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->expm1();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_fabs(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::fabs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::fabs",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_fabs",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->fabs();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_fdim(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  Viper::Matrix< float > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::fdim",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::fdim",1,"Viper::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< float >::fdim",2,"Viper::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_fdim",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_fdim",2,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->fdim((Viper::Matrix< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_fmod(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  Viper::Matrix< float > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::fmod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::fmod",1,"Viper::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< float >::fmod",2,"Viper::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_fmod",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_fmod",2,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->fmod((Viper::Matrix< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_hypot(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  Viper::Matrix< float > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::hypot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::hypot",1,"Viper::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< float >::hypot",2,"Viper::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_hypot",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_hypot",2,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->hypot((Viper::Matrix< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_ilogb(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::ilogb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::ilogb",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_ilogb",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->ilogb();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_j0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::j0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::j0",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_j0",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->j0();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_j1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::j1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::j1",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_j1",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->j1();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_jn(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::jn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::jn",1,"Viper::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< float >::jn",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_jn",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->jn(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_lgamma(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::lgamma",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::lgamma",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_lgamma",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->lgamma();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_log1p(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::log1p",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::log1p",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_log1p",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->log1p();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_logb(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::logb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::logb",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_logb",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->logb();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_norm3d(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  Viper::Matrix< float > *arg2 = 0 ;
  Viper::Matrix< float > *arg3 = 0 ;
  Viper::Matrix< float > *arg4 = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::norm3d",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::norm3d",1,"Viper::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< float >::norm3d",2,"Viper::Matrix< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Viper::Matrix< float >::norm3d",3,"Viper::Matrix< float > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Viper::Matrix< float >::norm3d",4,"Viper::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_norm3d",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_norm3d",2,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_norm3d",3,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_norm3d",4,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->norm3d((Viper::Matrix< float > const &)*arg2,(Viper::Matrix< float > const &)*arg3,(Viper::Matrix< float > const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_norm4d(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  Viper::Matrix< float > *arg2 = 0 ;
  Viper::Matrix< float > *arg3 = 0 ;
  Viper::Matrix< float > *arg4 = 0 ;
  Viper::Matrix< float > *arg5 = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::norm4d",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::norm4d",1,"Viper::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< float >::norm4d",2,"Viper::Matrix< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Viper::Matrix< float >::norm4d",3,"Viper::Matrix< float > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Viper::Matrix< float >::norm4d",4,"Viper::Matrix< float > const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Viper::Matrix< float >::norm4d",5,"Viper::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_norm4d",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_norm4d",2,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_norm4d",3,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_norm4d",4,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_norm4d",5,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->norm4d((Viper::Matrix< float > const &)*arg2,(Viper::Matrix< float > const &)*arg3,(Viper::Matrix< float > const &)*arg4,(Viper::Matrix< float > const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_normcdf(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::normcdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::normcdf",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_normcdf",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->normcdf();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_normcdfinv(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::normcdfinv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::normcdfinv",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_normcdfinv",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->normcdfinv();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_norm(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::norm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::norm",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_norm",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->norm();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_rcbrt(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::rcbrt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::rcbrt",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_rcbrt",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->rcbrt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_remainder(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  Viper::Matrix< float > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::remainder",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::remainder",1,"Viper::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< float >::remainder",2,"Viper::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_remainder",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_remainder",2,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->remainder((Viper::Matrix< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_rhypot(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  Viper::Matrix< float > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::rhypot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::rhypot",1,"Viper::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< float >::rhypot",2,"Viper::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_rhypot",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_rhypot",2,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->rhypot((Viper::Matrix< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_rnorm3d(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  Viper::Matrix< float > *arg2 = 0 ;
  Viper::Matrix< float > *arg3 = 0 ;
  Viper::Matrix< float > *arg4 = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::rnorm3d",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::rnorm3d",1,"Viper::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< float >::rnorm3d",2,"Viper::Matrix< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Viper::Matrix< float >::rnorm3d",3,"Viper::Matrix< float > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Viper::Matrix< float >::rnorm3d",4,"Viper::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_rnorm3d",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_rnorm3d",2,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_rnorm3d",3,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_rnorm3d",4,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->rnorm3d((Viper::Matrix< float > const &)*arg2,(Viper::Matrix< float > const &)*arg3,(Viper::Matrix< float > const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_rnorm4d(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  Viper::Matrix< float > *arg2 = 0 ;
  Viper::Matrix< float > *arg3 = 0 ;
  Viper::Matrix< float > *arg4 = 0 ;
  Viper::Matrix< float > *arg5 = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::rnorm4d",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::rnorm4d",1,"Viper::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< float >::rnorm4d",2,"Viper::Matrix< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Viper::Matrix< float >::rnorm4d",3,"Viper::Matrix< float > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Viper::Matrix< float >::rnorm4d",4,"Viper::Matrix< float > const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Viper::Matrix< float >::rnorm4d",5,"Viper::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_rnorm4d",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_rnorm4d",2,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_rnorm4d",3,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_rnorm4d",4,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_rnorm4d",5,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->rnorm4d((Viper::Matrix< float > const &)*arg2,(Viper::Matrix< float > const &)*arg3,(Viper::Matrix< float > const &)*arg4,(Viper::Matrix< float > const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_rnorm(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::rnorm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::rnorm",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_rnorm",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->rnorm();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_tgamma(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::tgamma",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::tgamma",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_tgamma",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->tgamma();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_trunc(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::trunc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::trunc",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_trunc",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->trunc();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_y0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::y0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::y0",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_y0",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->y0();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_y1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::y1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::y1",1,"Viper::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_y1",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  (arg1)->y1();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXf_yn(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Viper::Matrix< float >::yn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< float >::yn",1,"Viper::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< float >::yn",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_float_t,0))){
    SWIG_fail_ptr("MatrixXf_yn",1,SWIGTYPE_p_Viper__MatrixT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->yn(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MatrixXf(void *obj) {
Viper::Matrix< float > *arg1 = (Viper::Matrix< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_MatrixXf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MatrixXf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MatrixXf_attributes[] = {
    { "dev", _wrap_MatrixXf_dev_get, _wrap_MatrixXf_dev_set },
    { "host", _wrap_MatrixXf_host_get, _wrap_MatrixXf_host_set },
    { "dev_ptr", _wrap_MatrixXf_dev_ptr_get, _wrap_MatrixXf_dev_ptr_set },
    { "M", _wrap_MatrixXf_M_get, _wrap_MatrixXf_M_set },
    { "N", _wrap_MatrixXf_N_get, _wrap_MatrixXf_N_set },
    {0,0,0}
};
static swig_lua_method swig_MatrixXf_methods[]= {
    { "init", _wrap_MatrixXf_init},
    { "size", _wrap_MatrixXf_size},
    { "rows", _wrap_MatrixXf_rows},
    { "cols", _wrap_MatrixXf_cols},
    { "resize", _wrap_MatrixXf_resize},
    { "t", _wrap_MatrixXf_t},
    { "transpose", _wrap_MatrixXf_transpose},
    { "copy", _wrap_MatrixXf_copy},
    { "__unm", _wrap_MatrixXf___unm},
    { "__add", _wrap_MatrixXf___add},
    { "__sub", _wrap_MatrixXf___sub},
    { "__mul", _wrap_MatrixXf___mul},
    { "__div", _wrap_MatrixXf___div},
    { "hadamard", _wrap_MatrixXf_hadamard},
    { "download_host", _wrap_MatrixXf_download_host},
    { "upload_device", _wrap_MatrixXf_upload_device},
    { "zero", _wrap_MatrixXf_zero},
    { "ones", _wrap_MatrixXf_ones},
    { "randu", _wrap_MatrixXf_randu},
    { "random", _wrap_MatrixXf_random},
    { "fill", _wrap_MatrixXf_fill},
    { "__call", _wrap_MatrixXf___call},
    { "index", _wrap_MatrixXf_index},
    { "sum", _wrap_MatrixXf_sum},
    { "eval", _wrap_MatrixXf_eval},
    { "addToEachRow", _wrap_MatrixXf_addToEachRow},
    { "get", _wrap_MatrixXf_get},
    { "set", _wrap_MatrixXf_set},
    { "get_row", _wrap_MatrixXf_get_row},
    { "set_row", _wrap_MatrixXf_set_row},
    { "print", _wrap_MatrixXf_print},
    { "print_dims", _wrap_MatrixXf_print_dims},
    { "identity", _wrap_MatrixXf_identity},
    { "abs", _wrap_MatrixXf_abs},
    { "exp", _wrap_MatrixXf_exp},
    { "log2", _wrap_MatrixXf_log2},
    { "log10", _wrap_MatrixXf_log10},
    { "pow", _wrap_MatrixXf_pow},
    { "sqrt", _wrap_MatrixXf_sqrt},
    { "rsqrt", _wrap_MatrixXf_rsqrt},
    { "sin", _wrap_MatrixXf_sin},
    { "cos", _wrap_MatrixXf_cos},
    { "tan", _wrap_MatrixXf_tan},
    { "asin", _wrap_MatrixXf_asin},
    { "acos", _wrap_MatrixXf_acos},
    { "atan", _wrap_MatrixXf_atan},
    { "sinh", _wrap_MatrixXf_sinh},
    { "cosh", _wrap_MatrixXf_cosh},
    { "tanh", _wrap_MatrixXf_tanh},
    { "asinh", _wrap_MatrixXf_asinh},
    { "acosh", _wrap_MatrixXf_acosh},
    { "atanh", _wrap_MatrixXf_atanh},
    { "atan2", _wrap_MatrixXf_atan2},
    { "sigmoid", _wrap_MatrixXf_sigmoid},
    { "sigmoid_deriv", _wrap_MatrixXf_sigmoid_deriv},
    { "relu", _wrap_MatrixXf_relu},
    { "relu_deriv", _wrap_MatrixXf_relu_deriv},
    { "softmax", _wrap_MatrixXf_softmax},
    { "tanh_deriv", _wrap_MatrixXf_tanh_deriv},
    { "cbrt", _wrap_MatrixXf_cbrt},
    { "ceil", _wrap_MatrixXf_ceil},
    { "cospi", _wrap_MatrixXf_cospi},
    { "cyl_bessel_i0", _wrap_MatrixXf_cyl_bessel_i0},
    { "cyl_bessel_i1", _wrap_MatrixXf_cyl_bessel_i1},
    { "erfc", _wrap_MatrixXf_erfc},
    { "erfcx", _wrap_MatrixXf_erfcx},
    { "erfcinv", _wrap_MatrixXf_erfcinv},
    { "erf", _wrap_MatrixXf_erf},
    { "erfinv", _wrap_MatrixXf_erfinv},
    { "exp10", _wrap_MatrixXf_exp10},
    { "exp2", _wrap_MatrixXf_exp2},
    { "expm1", _wrap_MatrixXf_expm1},
    { "fabs", _wrap_MatrixXf_fabs},
    { "fdim", _wrap_MatrixXf_fdim},
    { "fmod", _wrap_MatrixXf_fmod},
    { "hypot", _wrap_MatrixXf_hypot},
    { "ilogb", _wrap_MatrixXf_ilogb},
    { "j0", _wrap_MatrixXf_j0},
    { "j1", _wrap_MatrixXf_j1},
    { "jn", _wrap_MatrixXf_jn},
    { "lgamma", _wrap_MatrixXf_lgamma},
    { "log1p", _wrap_MatrixXf_log1p},
    { "logb", _wrap_MatrixXf_logb},
    { "norm3d", _wrap_MatrixXf_norm3d},
    { "norm4d", _wrap_MatrixXf_norm4d},
    { "normcdf", _wrap_MatrixXf_normcdf},
    { "normcdfinv", _wrap_MatrixXf_normcdfinv},
    { "norm", _wrap_MatrixXf_norm},
    { "rcbrt", _wrap_MatrixXf_rcbrt},
    { "remainder", _wrap_MatrixXf_remainder},
    { "rhypot", _wrap_MatrixXf_rhypot},
    { "rnorm3d", _wrap_MatrixXf_rnorm3d},
    { "rnorm4d", _wrap_MatrixXf_rnorm4d},
    { "rnorm", _wrap_MatrixXf_rnorm},
    { "tgamma", _wrap_MatrixXf_tgamma},
    { "trunc", _wrap_MatrixXf_trunc},
    { "y0", _wrap_MatrixXf_y0},
    { "y1", _wrap_MatrixXf_y1},
    { "yn", _wrap_MatrixXf_yn},
    {0,0}
};
static swig_lua_method swig_MatrixXf_meta[] = {
    { "__unm", _wrap_MatrixXf___unm},
    { "__add", _wrap_MatrixXf___add},
    { "__sub", _wrap_MatrixXf___sub},
    { "__mul", _wrap_MatrixXf___mul},
    { "__div", _wrap_MatrixXf___div},
    { "__call", _wrap_MatrixXf___call},
    {0,0}
};

static swig_lua_attribute swig_MatrixXf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MatrixXf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MatrixXf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MatrixXf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MatrixXf_Sf_SwigStatic = {
    "MatrixXf",
    swig_MatrixXf_Sf_SwigStatic_methods,
    swig_MatrixXf_Sf_SwigStatic_attributes,
    swig_MatrixXf_Sf_SwigStatic_constants,
    swig_MatrixXf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MatrixXf_bases[] = {0};
static const char *swig_MatrixXf_base_names[] = {0};
static swig_lua_class _wrap_class_MatrixXf = { "MatrixXf", "MatrixXf", &SWIGTYPE_p_Viper__MatrixT_float_t,_proxy__wrap_new_MatrixXf, swig_delete_MatrixXf, swig_MatrixXf_methods, swig_MatrixXf_attributes, &swig_MatrixXf_Sf_SwigStatic, swig_MatrixXf_meta, swig_MatrixXf_bases, swig_MatrixXf_base_names };

static int _wrap_MatrixXd_init(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::init",1,"Viper::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< double >::init",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Viper::Matrix< double >::init",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_init",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->init(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_dev_set(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  double *arg2 = (double *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::dev",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::dev",1,"Viper::Matrix< double > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Viper::Matrix< double >::dev",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_dev_set",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("MatrixXd_dev_set",2,SWIGTYPE_p_double);
  }
  
  if (arg1) (arg1)->dev = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_dev_get(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::dev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::dev",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_dev_get",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  result = (double *) ((arg1)->dev);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_host_set(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  double *arg2 = (double *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::host",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::host",1,"Viper::Matrix< double > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Viper::Matrix< double >::host",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_host_set",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("MatrixXd_host_set",2,SWIGTYPE_p_double);
  }
  
  if (arg1) (arg1)->host = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_host_get(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::host",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::host",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_host_get",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  result = (double *) ((arg1)->host);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_dev_ptr_set(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  std::shared_ptr< DevPtr< double > > arg2 ;
  std::shared_ptr< DevPtr< double > > *argp2 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::dev_ptr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::dev_ptr",1,"Viper::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< double >::dev_ptr",2,"std::shared_ptr< DevPtr< double > >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_dev_ptr_set",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__shared_ptrT_DevPtrT_double_t_t,0))){
    SWIG_fail_ptr("MatrixXd_dev_ptr_set",2,SWIGTYPE_p_std__shared_ptrT_DevPtrT_double_t_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->dev_ptr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_dev_ptr_get(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  std::shared_ptr< DevPtr< double > > result;
  
  SWIG_check_num_args("Viper::Matrix< double >::dev_ptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::dev_ptr",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_dev_ptr_get",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  result =  ((arg1)->dev_ptr);
  {
    std::shared_ptr< DevPtr< double > > * resultptr = new std::shared_ptr< DevPtr< double > >((const std::shared_ptr< DevPtr< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_DevPtrT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_M_set(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::M",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::M",1,"Viper::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< double >::M",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_M_set",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->M = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_M_get(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Viper::Matrix< double >::M",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::M",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_M_get",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  result =  ((arg1)->M);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_N_set(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::N",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::N",1,"Viper::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< double >::N",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_N_set",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->N = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_N_get(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Viper::Matrix< double >::N",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::N",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_N_get",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  result =  ((arg1)->N);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MatrixXd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *result = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::Matrix",0,0)
  result = (Viper::Matrix< double > *)new Viper::Matrix< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Viper__MatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MatrixXd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  Viper::Matrix< double > *result = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::Matrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Viper::Matrix< double >::Matrix",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< double >::Matrix",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Viper::Matrix< double > *)new Viper::Matrix< double >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Viper__MatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MatrixXd__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  std::initializer_list< double > *arg3 = 0 ;
  Viper::Matrix< double > *result = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::Matrix",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Viper::Matrix< double >::Matrix",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< double >::Matrix",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Viper::Matrix< double >::Matrix",3,"std::initializer_list< double > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__initializer_listT_double_t,0))){
    SWIG_fail_ptr("new_MatrixXd",3,SWIGTYPE_p_std__initializer_listT_double_t);
  }
  
  result = (Viper::Matrix< double > *)new Viper::Matrix< double >(arg1,arg2,(std::initializer_list< double > const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Viper__MatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MatrixXd__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  std::vector< double > *arg3 = 0 ;
  Viper::Matrix< double > *result = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::Matrix",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Viper::Matrix< double >::Matrix",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< double >::Matrix",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Viper::Matrix< double >::Matrix",3,"std::vector< double > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("new_MatrixXd",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (Viper::Matrix< double > *)new Viper::Matrix< double >(arg1,arg2,(std::vector< double > const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Viper__MatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MatrixXd__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = 0 ;
  Viper::Matrix< double > *result = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Viper::Matrix< double >::Matrix",1,"Viper::Matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("new_MatrixXd",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  result = (Viper::Matrix< double > *)new Viper::Matrix< double >((Viper::Matrix< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Viper__MatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MatrixXd(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_MatrixXd__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_MatrixXd__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_MatrixXd__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_MatrixXd__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__initializer_listT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_MatrixXd__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_MatrixXd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viper::Matrix< double >::Matrix()\n"
    "    Viper::Matrix< double >::Matrix(size_t,size_t)\n"
    "    Viper::Matrix< double >::Matrix(size_t,size_t,std::initializer_list< double > const &)\n"
    "    Viper::Matrix< double >::Matrix(size_t,size_t,std::vector< double > const &)\n"
    "    Viper::Matrix< double >::Matrix(Viper::Matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_MatrixXd_size(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Viper::Matrix< double >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::size",1,"Viper::Matrix< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_size",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  result = ((Viper::Matrix< double > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_rows(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Viper::Matrix< double >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::rows",1,"Viper::Matrix< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_rows",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  result = ((Viper::Matrix< double > const *)arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_cols(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Viper::Matrix< double >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::cols",1,"Viper::Matrix< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_cols",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  result = ((Viper::Matrix< double > const *)arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_resize(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::resize",1,"Viper::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< double >::resize",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Viper::Matrix< double >::resize",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_resize",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_t(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  Viper::Matrix< double > result;
  
  SWIG_check_num_args("Viper::Matrix< double >::t",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::t",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_t",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  result = (arg1)->t();
  {
    Viper::Matrix< double > * resultptr = new Viper::Matrix< double >((const Viper::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_transpose(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  Viper::Matrix< double > *arg2 = 0 ;
  Viper::Matrix< double > result;
  
  SWIG_check_num_args("Viper::Matrix< double >::transpose",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::transpose",1,"Viper::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< double >::transpose",2,"Viper::Matrix< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_transpose",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_transpose",2,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  result = (arg1)->transpose(*arg2);
  {
    Viper::Matrix< double > * resultptr = new Viper::Matrix< double >((const Viper::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_copy(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  Viper::Matrix< double > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::copy",1,"Viper::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< double >::copy",2,"Viper::Matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_copy",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_copy",2,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->copy((Viper::Matrix< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  Viper::Matrix< double > *arg2 = 0 ;
  Viper::Matrix< double > result;
  
  SWIG_check_num_args("Viper::Matrix< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::operator +",1,"Viper::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< double >::operator +",2,"Viper::Matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd___add",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd___add",2,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  result = (arg1)->operator +((Viper::Matrix< double > const &)*arg2);
  {
    Viper::Matrix< double > * resultptr = new Viper::Matrix< double >((const Viper::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  Viper::Matrix< double > *arg2 = 0 ;
  Viper::Matrix< double > result;
  
  SWIG_check_num_args("Viper::Matrix< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::operator -",1,"Viper::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< double >::operator -",2,"Viper::Matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd___sub",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd___sub",2,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  result = (arg1)->operator -((Viper::Matrix< double > const &)*arg2);
  {
    Viper::Matrix< double > * resultptr = new Viper::Matrix< double >((const Viper::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  Viper::Matrix< double > *arg2 = 0 ;
  Viper::Matrix< double > result;
  
  SWIG_check_num_args("Viper::Matrix< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::operator *",1,"Viper::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< double >::operator *",2,"Viper::Matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd___mul",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd___mul",2,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  result = (arg1)->operator *((Viper::Matrix< double > const &)*arg2);
  {
    Viper::Matrix< double > * resultptr = new Viper::Matrix< double >((const Viper::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd___unm(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  Viper::Matrix< double > result;
  
  SWIG_check_num_args("Viper::Matrix< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::operator -",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd___unm",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  result = (arg1)->operator -();
  {
    Viper::Matrix< double > * resultptr = new Viper::Matrix< double >((const Viper::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  double arg2 ;
  Viper::Matrix< double > result;
  
  SWIG_check_num_args("Viper::Matrix< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::operator +",1,"Viper::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< double >::operator +",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd___add",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (arg1)->operator +(arg2);
  {
    Viper::Matrix< double > * resultptr = new Viper::Matrix< double >((const Viper::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_MatrixXd___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MatrixXd___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MatrixXd___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viper::Matrix< double >::operator +(Viper::Matrix< double > const &)\n"
    "    Viper::Matrix< double >::operator +(double)\n");
  lua_error(L);return 0;
}


static int _wrap_MatrixXd___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  double arg2 ;
  Viper::Matrix< double > result;
  
  SWIG_check_num_args("Viper::Matrix< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::operator -",1,"Viper::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< double >::operator -",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd___sub",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (arg1)->operator -(arg2);
  {
    Viper::Matrix< double > * resultptr = new Viper::Matrix< double >((const Viper::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_MatrixXd___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MatrixXd___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MatrixXd___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viper::Matrix< double >::operator -(Viper::Matrix< double > const &)\n"
    "    Viper::Matrix< double >::operator -(double)\n");
  lua_error(L);return 0;
}


static int _wrap_MatrixXd___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  double arg2 ;
  Viper::Matrix< double > result;
  
  SWIG_check_num_args("Viper::Matrix< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::operator *",1,"Viper::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< double >::operator *",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd___mul",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (arg1)->operator *(arg2);
  {
    Viper::Matrix< double > * resultptr = new Viper::Matrix< double >((const Viper::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_MatrixXd___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MatrixXd___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MatrixXd___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viper::Matrix< double >::operator *(Viper::Matrix< double > const &)\n"
    "    Viper::Matrix< double >::operator *(double)\n");
  lua_error(L);return 0;
}


static int _wrap_MatrixXd___div(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  double arg2 ;
  Viper::Matrix< double > result;
  
  SWIG_check_num_args("Viper::Matrix< double >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::operator /",1,"Viper::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< double >::operator /",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd___div",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (arg1)->operator /(arg2);
  {
    Viper::Matrix< double > * resultptr = new Viper::Matrix< double >((const Viper::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_hadamard(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  Viper::Matrix< double > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::hadamard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::hadamard",1,"Viper::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< double >::hadamard",2,"Viper::Matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_hadamard",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_hadamard",2,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->hadamard((Viper::Matrix< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_download_host(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::download_host",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::download_host",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_download_host",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->download_host();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_upload_device(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::upload_device",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::upload_device",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_upload_device",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->upload_device();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_zero(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::zero",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_zero",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->zero();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_ones(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::ones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::ones",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_ones",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->ones();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_randu(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::randu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::randu",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_randu",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->randu();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_random(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::random",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::random",1,"Viper::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< double >::random",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Viper::Matrix< double >::random",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_random",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->random(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_fill(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::fill",1,"Viper::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< double >::fill",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_fill",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd___call(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  double *result = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::operator ()",1,"Viper::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< double >::operator ()",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Viper::Matrix< double >::operator ()",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd___call",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (double *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_index(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  size_t result;
  
  SWIG_check_num_args("Viper::Matrix< double >::index",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::index",1,"Viper::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< double >::index",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Viper::Matrix< double >::index",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_index",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (arg1)->index(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_sum(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("Viper::Matrix< double >::sum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::sum",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_sum",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  result = (double)(arg1)->sum();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_eval(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  Viper::Matrix< double > result;
  
  SWIG_check_num_args("Viper::Matrix< double >::eval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::eval",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_eval",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  result = (arg1)->eval();
  {
    Viper::Matrix< double > * resultptr = new Viper::Matrix< double >((const Viper::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_addToEachRow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  Viper::Matrix< double > *arg2 = 0 ;
  int arg3 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::addToEachRow",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::addToEachRow",1,"Viper::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< double >::addToEachRow",2,"Viper::Matrix< double > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Viper::Matrix< double >::addToEachRow",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_addToEachRow",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_addToEachRow",2,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->addToEachRow((Viper::Matrix< double > const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_addToEachRow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  Viper::Matrix< double > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::addToEachRow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::addToEachRow",1,"Viper::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< double >::addToEachRow",2,"Viper::Matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_addToEachRow",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_addToEachRow",2,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->addToEachRow((Viper::Matrix< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_addToEachRow(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_MatrixXd_addToEachRow__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_MatrixXd_addToEachRow__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MatrixXd_addToEachRow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viper::Matrix< double >::addToEachRow(Viper::Matrix< double > const &,int)\n"
    "    Viper::Matrix< double >::addToEachRow(Viper::Matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_MatrixXd_get(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  double result;
  
  SWIG_check_num_args("Viper::Matrix< double >::get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::get",1,"Viper::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< double >::get",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Viper::Matrix< double >::get",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_get",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (double)(arg1)->get(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_set(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::set",1,"Viper::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< double >::set",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Viper::Matrix< double >::set",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Viper::Matrix< double >::set",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_set",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_get_row(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  int arg2 ;
  Viper::Matrix< double > result;
  
  SWIG_check_num_args("Viper::Matrix< double >::get_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::get_row",1,"Viper::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< double >::get_row",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_get_row",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (arg1)->get_row(arg2);
  {
    Viper::Matrix< double > * resultptr = new Viper::Matrix< double >((const Viper::Matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Viper__MatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_set_row__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  Viper::Matrix< double > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::set_row",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::set_row",1,"Viper::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< double >::set_row",2,"Viper::Matrix< double > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Viper::Matrix< double >::set_row",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Viper::Matrix< double >::set_row",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_set_row",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_set_row",2,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->set_row((Viper::Matrix< double > const &)*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_set_row__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  Viper::Matrix< double > *arg2 = 0 ;
  int arg3 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::set_row",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::set_row",1,"Viper::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< double >::set_row",2,"Viper::Matrix< double > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Viper::Matrix< double >::set_row",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_set_row",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_set_row",2,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->set_row((Viper::Matrix< double > const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_set_row__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  Viper::Matrix< double > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::set_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::set_row",1,"Viper::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< double >::set_row",2,"Viper::Matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_set_row",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_set_row",2,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->set_row((Viper::Matrix< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_set_row__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  Viper::Vector< double > *arg2 = 0 ;
  int arg3 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::set_row",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::set_row",1,"Viper::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< double >::set_row",2,"Viper::Vector< double > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Viper::Matrix< double >::set_row",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_set_row",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_set_row",2,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->set_row((Viper::Vector< double > const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_set_row__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  Viper::Vector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::set_row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::set_row",1,"Viper::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< double >::set_row",2,"Viper::Vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_set_row",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__VectorT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_set_row",2,SWIGTYPE_p_Viper__VectorT_double_t);
  }
  
  (arg1)->set_row((Viper::Vector< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_set_row(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_MatrixXd_set_row__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_MatrixXd_set_row__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__VectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_MatrixXd_set_row__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_MatrixXd_set_row__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_MatrixXd_set_row__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MatrixXd_set_row'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viper::Matrix< double >::set_row(Viper::Matrix< double > const &,int,int)\n"
    "    Viper::Matrix< double >::set_row(Viper::Matrix< double > const &,int)\n"
    "    Viper::Matrix< double >::set_row(Viper::Matrix< double > const &)\n"
    "    Viper::Matrix< double >::set_row(Viper::Vector< double > const &,int)\n"
    "    Viper::Matrix< double >::set_row(Viper::Vector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_MatrixXd_print(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::print",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_print",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_print_dims(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::print_dims",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::print_dims",1,"Viper::Matrix< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_print_dims",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  ((Viper::Matrix< double > const *)arg1)->print_dims();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_identity(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::identity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::identity",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_identity",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->identity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_abs(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::abs",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_abs",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->abs();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_exp(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::exp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::exp",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_exp",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->exp();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_log2(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::log2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::log2",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_log2",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->log2();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_log10(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::log10",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::log10",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_log10",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->log10();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::pow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::pow",1,"Viper::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< double >::pow",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_pow",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->pow(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  Viper::Matrix< double > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::pow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::pow",1,"Viper::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< double >::pow",2,"Viper::Matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_pow",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_pow",2,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->pow((Viper::Matrix< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_MatrixXd_pow__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MatrixXd_pow__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MatrixXd_pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viper::Matrix< double >::pow(double)\n"
    "    Viper::Matrix< double >::pow(Viper::Matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_MatrixXd_sqrt(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::sqrt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::sqrt",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_sqrt",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->sqrt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_rsqrt(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::rsqrt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::rsqrt",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_rsqrt",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->rsqrt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_sin(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::sin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::sin",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_sin",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->sin();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_cos(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::cos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::cos",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_cos",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->cos();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_tan(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::tan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::tan",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_tan",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->tan();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_asin(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::asin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::asin",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_asin",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->asin();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_acos(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::acos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::acos",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_acos",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->acos();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_atan(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::atan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::atan",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_atan",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->atan();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_sinh(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::sinh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::sinh",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_sinh",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->sinh();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_cosh(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::cosh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::cosh",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_cosh",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->cosh();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_tanh(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::tanh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::tanh",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_tanh",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->tanh();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_asinh(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::asinh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::asinh",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_asinh",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->asinh();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_acosh(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::acosh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::acosh",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_acosh",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->acosh();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_atanh(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::atanh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::atanh",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_atanh",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->atanh();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_atan2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::atan2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::atan2",1,"Viper::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< double >::atan2",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_atan2",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->atan2(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_atan2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  Viper::Matrix< double > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::atan2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::atan2",1,"Viper::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< double >::atan2",2,"Viper::Matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_atan2",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_atan2",2,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->atan2((Viper::Matrix< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_atan2(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_MatrixXd_atan2__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Viper__MatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MatrixXd_atan2__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MatrixXd_atan2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Viper::Matrix< double >::atan2(double)\n"
    "    Viper::Matrix< double >::atan2(Viper::Matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_MatrixXd_sigmoid(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::sigmoid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::sigmoid",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_sigmoid",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->sigmoid();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_sigmoid_deriv(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::sigmoid_deriv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::sigmoid_deriv",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_sigmoid_deriv",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->sigmoid_deriv();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_relu(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::relu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::relu",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_relu",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->relu();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_relu_deriv(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::relu_deriv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::relu_deriv",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_relu_deriv",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->relu_deriv();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_softmax(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::softmax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::softmax",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_softmax",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->softmax();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_tanh_deriv(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::tanh_deriv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::tanh_deriv",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_tanh_deriv",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->tanh_deriv();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_cbrt(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::cbrt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::cbrt",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_cbrt",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->cbrt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_ceil(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::ceil",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::ceil",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_ceil",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->ceil();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_cospi(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::cospi",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::cospi",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_cospi",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->cospi();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_cyl_bessel_i0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::cyl_bessel_i0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::cyl_bessel_i0",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_cyl_bessel_i0",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->cyl_bessel_i0();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_cyl_bessel_i1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::cyl_bessel_i1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::cyl_bessel_i1",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_cyl_bessel_i1",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->cyl_bessel_i1();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_erfc(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::erfc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::erfc",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_erfc",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->erfc();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_erfcx(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::erfcx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::erfcx",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_erfcx",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->erfcx();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_erfcinv(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::erfcinv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::erfcinv",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_erfcinv",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->erfcinv();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_erf(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::erf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::erf",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_erf",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->erf();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_erfinv(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::erfinv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::erfinv",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_erfinv",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->erfinv();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_exp10(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::exp10",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::exp10",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_exp10",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->exp10();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_exp2(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::exp2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::exp2",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_exp2",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->exp2();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_expm1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::expm1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::expm1",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_expm1",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->expm1();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_fabs(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::fabs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::fabs",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_fabs",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->fabs();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_fdim(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  Viper::Matrix< double > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::fdim",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::fdim",1,"Viper::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< double >::fdim",2,"Viper::Matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_fdim",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_fdim",2,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->fdim((Viper::Matrix< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_fmod(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  Viper::Matrix< double > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::fmod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::fmod",1,"Viper::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< double >::fmod",2,"Viper::Matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_fmod",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_fmod",2,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->fmod((Viper::Matrix< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_hypot(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  Viper::Matrix< double > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::hypot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::hypot",1,"Viper::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< double >::hypot",2,"Viper::Matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_hypot",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_hypot",2,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->hypot((Viper::Matrix< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_ilogb(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::ilogb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::ilogb",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_ilogb",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->ilogb();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_j0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::j0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::j0",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_j0",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->j0();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_j1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::j1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::j1",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_j1",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->j1();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_jn(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::jn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::jn",1,"Viper::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< double >::jn",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_jn",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->jn(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_lgamma(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::lgamma",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::lgamma",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_lgamma",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->lgamma();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_log1p(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::log1p",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::log1p",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_log1p",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->log1p();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_logb(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::logb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::logb",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_logb",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->logb();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_norm3d(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  Viper::Matrix< double > *arg2 = 0 ;
  Viper::Matrix< double > *arg3 = 0 ;
  Viper::Matrix< double > *arg4 = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::norm3d",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::norm3d",1,"Viper::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< double >::norm3d",2,"Viper::Matrix< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Viper::Matrix< double >::norm3d",3,"Viper::Matrix< double > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Viper::Matrix< double >::norm3d",4,"Viper::Matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_norm3d",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_norm3d",2,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_norm3d",3,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_norm3d",4,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->norm3d((Viper::Matrix< double > const &)*arg2,(Viper::Matrix< double > const &)*arg3,(Viper::Matrix< double > const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_norm4d(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  Viper::Matrix< double > *arg2 = 0 ;
  Viper::Matrix< double > *arg3 = 0 ;
  Viper::Matrix< double > *arg4 = 0 ;
  Viper::Matrix< double > *arg5 = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::norm4d",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::norm4d",1,"Viper::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< double >::norm4d",2,"Viper::Matrix< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Viper::Matrix< double >::norm4d",3,"Viper::Matrix< double > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Viper::Matrix< double >::norm4d",4,"Viper::Matrix< double > const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Viper::Matrix< double >::norm4d",5,"Viper::Matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_norm4d",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_norm4d",2,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_norm4d",3,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_norm4d",4,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_norm4d",5,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->norm4d((Viper::Matrix< double > const &)*arg2,(Viper::Matrix< double > const &)*arg3,(Viper::Matrix< double > const &)*arg4,(Viper::Matrix< double > const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_normcdf(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::normcdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::normcdf",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_normcdf",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->normcdf();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_normcdfinv(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::normcdfinv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::normcdfinv",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_normcdfinv",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->normcdfinv();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_norm(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::norm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::norm",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_norm",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->norm();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_rcbrt(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::rcbrt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::rcbrt",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_rcbrt",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->rcbrt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_remainder(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  Viper::Matrix< double > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::remainder",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::remainder",1,"Viper::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< double >::remainder",2,"Viper::Matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_remainder",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_remainder",2,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->remainder((Viper::Matrix< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_rhypot(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  Viper::Matrix< double > *arg2 = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::rhypot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::rhypot",1,"Viper::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< double >::rhypot",2,"Viper::Matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_rhypot",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_rhypot",2,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->rhypot((Viper::Matrix< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_rnorm3d(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  Viper::Matrix< double > *arg2 = 0 ;
  Viper::Matrix< double > *arg3 = 0 ;
  Viper::Matrix< double > *arg4 = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::rnorm3d",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::rnorm3d",1,"Viper::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< double >::rnorm3d",2,"Viper::Matrix< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Viper::Matrix< double >::rnorm3d",3,"Viper::Matrix< double > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Viper::Matrix< double >::rnorm3d",4,"Viper::Matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_rnorm3d",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_rnorm3d",2,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_rnorm3d",3,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_rnorm3d",4,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->rnorm3d((Viper::Matrix< double > const &)*arg2,(Viper::Matrix< double > const &)*arg3,(Viper::Matrix< double > const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_rnorm4d(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  Viper::Matrix< double > *arg2 = 0 ;
  Viper::Matrix< double > *arg3 = 0 ;
  Viper::Matrix< double > *arg4 = 0 ;
  Viper::Matrix< double > *arg5 = 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::rnorm4d",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::rnorm4d",1,"Viper::Matrix< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Viper::Matrix< double >::rnorm4d",2,"Viper::Matrix< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Viper::Matrix< double >::rnorm4d",3,"Viper::Matrix< double > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Viper::Matrix< double >::rnorm4d",4,"Viper::Matrix< double > const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Viper::Matrix< double >::rnorm4d",5,"Viper::Matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_rnorm4d",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_rnorm4d",2,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_rnorm4d",3,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_rnorm4d",4,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_rnorm4d",5,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->rnorm4d((Viper::Matrix< double > const &)*arg2,(Viper::Matrix< double > const &)*arg3,(Viper::Matrix< double > const &)*arg4,(Viper::Matrix< double > const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_rnorm(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::rnorm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::rnorm",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_rnorm",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->rnorm();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_tgamma(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::tgamma",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::tgamma",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_tgamma",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->tgamma();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_trunc(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::trunc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::trunc",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_trunc",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->trunc();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_y0(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::y0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::y0",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_y0",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->y0();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_y1(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::y1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::y1",1,"Viper::Matrix< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_y1",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  (arg1)->y1();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixXd_yn(lua_State* L) {
  int SWIG_arg = 0;
  Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Viper::Matrix< double >::yn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Viper::Matrix< double >::yn",1,"Viper::Matrix< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Viper::Matrix< double >::yn",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Viper__MatrixT_double_t,0))){
    SWIG_fail_ptr("MatrixXd_yn",1,SWIGTYPE_p_Viper__MatrixT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->yn(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MatrixXd(void *obj) {
Viper::Matrix< double > *arg1 = (Viper::Matrix< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_MatrixXd(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MatrixXd);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MatrixXd_attributes[] = {
    { "dev", _wrap_MatrixXd_dev_get, _wrap_MatrixXd_dev_set },
    { "host", _wrap_MatrixXd_host_get, _wrap_MatrixXd_host_set },
    { "dev_ptr", _wrap_MatrixXd_dev_ptr_get, _wrap_MatrixXd_dev_ptr_set },
    { "M", _wrap_MatrixXd_M_get, _wrap_MatrixXd_M_set },
    { "N", _wrap_MatrixXd_N_get, _wrap_MatrixXd_N_set },
    {0,0,0}
};
static swig_lua_method swig_MatrixXd_methods[]= {
    { "init", _wrap_MatrixXd_init},
    { "size", _wrap_MatrixXd_size},
    { "rows", _wrap_MatrixXd_rows},
    { "cols", _wrap_MatrixXd_cols},
    { "resize", _wrap_MatrixXd_resize},
    { "t", _wrap_MatrixXd_t},
    { "transpose", _wrap_MatrixXd_transpose},
    { "copy", _wrap_MatrixXd_copy},
    { "__unm", _wrap_MatrixXd___unm},
    { "__add", _wrap_MatrixXd___add},
    { "__sub", _wrap_MatrixXd___sub},
    { "__mul", _wrap_MatrixXd___mul},
    { "__div", _wrap_MatrixXd___div},
    { "hadamard", _wrap_MatrixXd_hadamard},
    { "download_host", _wrap_MatrixXd_download_host},
    { "upload_device", _wrap_MatrixXd_upload_device},
    { "zero", _wrap_MatrixXd_zero},
    { "ones", _wrap_MatrixXd_ones},
    { "randu", _wrap_MatrixXd_randu},
    { "random", _wrap_MatrixXd_random},
    { "fill", _wrap_MatrixXd_fill},
    { "__call", _wrap_MatrixXd___call},
    { "index", _wrap_MatrixXd_index},
    { "sum", _wrap_MatrixXd_sum},
    { "eval", _wrap_MatrixXd_eval},
    { "addToEachRow", _wrap_MatrixXd_addToEachRow},
    { "get", _wrap_MatrixXd_get},
    { "set", _wrap_MatrixXd_set},
    { "get_row", _wrap_MatrixXd_get_row},
    { "set_row", _wrap_MatrixXd_set_row},
    { "print", _wrap_MatrixXd_print},
    { "print_dims", _wrap_MatrixXd_print_dims},
    { "identity", _wrap_MatrixXd_identity},
    { "abs", _wrap_MatrixXd_abs},
    { "exp", _wrap_MatrixXd_exp},
    { "log2", _wrap_MatrixXd_log2},
    { "log10", _wrap_MatrixXd_log10},
    { "pow", _wrap_MatrixXd_pow},
    { "sqrt", _wrap_MatrixXd_sqrt},
    { "rsqrt", _wrap_MatrixXd_rsqrt},
    { "sin", _wrap_MatrixXd_sin},
    { "cos", _wrap_MatrixXd_cos},
    { "tan", _wrap_MatrixXd_tan},
    { "asin", _wrap_MatrixXd_asin},
    { "acos", _wrap_MatrixXd_acos},
    { "atan", _wrap_MatrixXd_atan},
    { "sinh", _wrap_MatrixXd_sinh},
    { "cosh", _wrap_MatrixXd_cosh},
    { "tanh", _wrap_MatrixXd_tanh},
    { "asinh", _wrap_MatrixXd_asinh},
    { "acosh", _wrap_MatrixXd_acosh},
    { "atanh", _wrap_MatrixXd_atanh},
    { "atan2", _wrap_MatrixXd_atan2},
    { "sigmoid", _wrap_MatrixXd_sigmoid},
    { "sigmoid_deriv", _wrap_MatrixXd_sigmoid_deriv},
    { "relu", _wrap_MatrixXd_relu},
    { "relu_deriv", _wrap_MatrixXd_relu_deriv},
    { "softmax", _wrap_MatrixXd_softmax},
    { "tanh_deriv", _wrap_MatrixXd_tanh_deriv},
    { "cbrt", _wrap_MatrixXd_cbrt},
    { "ceil", _wrap_MatrixXd_ceil},
    { "cospi", _wrap_MatrixXd_cospi},
    { "cyl_bessel_i0", _wrap_MatrixXd_cyl_bessel_i0},
    { "cyl_bessel_i1", _wrap_MatrixXd_cyl_bessel_i1},
    { "erfc", _wrap_MatrixXd_erfc},
    { "erfcx", _wrap_MatrixXd_erfcx},
    { "erfcinv", _wrap_MatrixXd_erfcinv},
    { "erf", _wrap_MatrixXd_erf},
    { "erfinv", _wrap_MatrixXd_erfinv},
    { "exp10", _wrap_MatrixXd_exp10},
    { "exp2", _wrap_MatrixXd_exp2},
    { "expm1", _wrap_MatrixXd_expm1},
    { "fabs", _wrap_MatrixXd_fabs},
    { "fdim", _wrap_MatrixXd_fdim},
    { "fmod", _wrap_MatrixXd_fmod},
    { "hypot", _wrap_MatrixXd_hypot},
    { "ilogb", _wrap_MatrixXd_ilogb},
    { "j0", _wrap_MatrixXd_j0},
    { "j1", _wrap_MatrixXd_j1},
    { "jn", _wrap_MatrixXd_jn},
    { "lgamma", _wrap_MatrixXd_lgamma},
    { "log1p", _wrap_MatrixXd_log1p},
    { "logb", _wrap_MatrixXd_logb},
    { "norm3d", _wrap_MatrixXd_norm3d},
    { "norm4d", _wrap_MatrixXd_norm4d},
    { "normcdf", _wrap_MatrixXd_normcdf},
    { "normcdfinv", _wrap_MatrixXd_normcdfinv},
    { "norm", _wrap_MatrixXd_norm},
    { "rcbrt", _wrap_MatrixXd_rcbrt},
    { "remainder", _wrap_MatrixXd_remainder},
    { "rhypot", _wrap_MatrixXd_rhypot},
    { "rnorm3d", _wrap_MatrixXd_rnorm3d},
    { "rnorm4d", _wrap_MatrixXd_rnorm4d},
    { "rnorm", _wrap_MatrixXd_rnorm},
    { "tgamma", _wrap_MatrixXd_tgamma},
    { "trunc", _wrap_MatrixXd_trunc},
    { "y0", _wrap_MatrixXd_y0},
    { "y1", _wrap_MatrixXd_y1},
    { "yn", _wrap_MatrixXd_yn},
    {0,0}
};
static swig_lua_method swig_MatrixXd_meta[] = {
    { "__unm", _wrap_MatrixXd___unm},
    { "__add", _wrap_MatrixXd___add},
    { "__sub", _wrap_MatrixXd___sub},
    { "__mul", _wrap_MatrixXd___mul},
    { "__div", _wrap_MatrixXd___div},
    { "__call", _wrap_MatrixXd___call},
    {0,0}
};

static swig_lua_attribute swig_MatrixXd_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MatrixXd_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MatrixXd_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MatrixXd_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MatrixXd_Sf_SwigStatic = {
    "MatrixXd",
    swig_MatrixXd_Sf_SwigStatic_methods,
    swig_MatrixXd_Sf_SwigStatic_attributes,
    swig_MatrixXd_Sf_SwigStatic_constants,
    swig_MatrixXd_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MatrixXd_bases[] = {0};
static const char *swig_MatrixXd_base_names[] = {0};
static swig_lua_class _wrap_class_MatrixXd = { "MatrixXd", "MatrixXd", &SWIGTYPE_p_Viper__MatrixT_double_t,_proxy__wrap_new_MatrixXd, swig_delete_MatrixXd, swig_MatrixXd_methods, swig_MatrixXd_attributes, &swig_MatrixXd_Sf_SwigStatic, swig_MatrixXd_meta, swig_MatrixXd_bases, swig_MatrixXd_base_names };

static swig_lua_attribute swig_SwigModule_attributes[] = {
    { "mutex", _wrap_mutex_get, _wrap_mutex_set },
    { "cublas", _wrap_cublas_get, _wrap_cublas_set },
    { "current_stream", _wrap_current_stream_get, _wrap_current_stream_set },
    { "cuda_streams", _wrap_cuda_streams_get, _wrap_cuda_streams_set },
    { "host_memory", _wrap_host_memory_get, _wrap_host_memory_set },
    { "_cublas", _wrap__cublas_get, _wrap__cublas_set },
    { "seed", _wrap_seed_get, _wrap_seed_set },
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("fe_divbyzero", FE_DIVBYZERO)},
    {SWIG_LUA_CONSTTAB_INT("fe_inexact", FE_INEXACT)},
    {SWIG_LUA_CONSTTAB_INT("fe_invalid", FE_INVALID)},
    {SWIG_LUA_CONSTTAB_INT("fe_overflow", FE_OVERFLOW)},
    {SWIG_LUA_CONSTTAB_INT("fe_underflow", FE_UNDERFLOW)},
    {SWIG_LUA_CONSTTAB_INT("fe_all_except", FE_ALL_EXCEPT)},
    {SWIG_LUA_CONSTTAB_INT("fe_downward", FE_DOWNWARD)},
    {SWIG_LUA_CONSTTAB_INT("fe_tonearest", FE_TONEAREST)},
    {SWIG_LUA_CONSTTAB_INT("fe_towardzero", FE_TOWARDZERO)},
    {SWIG_LUA_CONSTTAB_INT("fe_upward", FE_UPWARD)},
    {SWIG_LUA_CONSTTAB_INT("fe_dfl_env", FE_DFL_ENV)},
    {SWIG_LUA_CONSTTAB_INT("char_bit", CHAR_BIT)},
    {SWIG_LUA_CONSTTAB_INT("schar_min", SCHAR_MIN)},
    {SWIG_LUA_CONSTTAB_INT("schar_max", SCHAR_MAX)},
    {SWIG_LUA_CONSTTAB_INT("uchar_max", UCHAR_MAX)},
    {SWIG_LUA_CONSTTAB_INT("char_min", CHAR_MIN)},
    {SWIG_LUA_CONSTTAB_INT("char_max", CHAR_MAX)},
    {SWIG_LUA_CONSTTAB_INT("mb_len_max", MB_LEN_MAX)},
    {SWIG_LUA_CONSTTAB_INT("shrt_min", SHRT_MIN)},
    {SWIG_LUA_CONSTTAB_INT("shrt_max", SHRT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("ushrt_max", USHRT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("int_min", INT_MIN)},
    {SWIG_LUA_CONSTTAB_INT("int_max", INT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("uint_max", UINT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("long_min", LONG_MIN)},
    {SWIG_LUA_CONSTTAB_INT("long_max", LONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("ulong_max", ULONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("llong_min", LLONG_MIN)},
    {SWIG_LUA_CONSTTAB_INT("llong_max", LLONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("ullong_max", ULLONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("CUDA_R_16F", CUDA_R_16F)},
    {SWIG_LUA_CONSTTAB_INT("CUDA_C_16F", CUDA_C_16F)},
    {SWIG_LUA_CONSTTAB_INT("CUDA_R_16BF", CUDA_R_16BF)},
    {SWIG_LUA_CONSTTAB_INT("CUDA_C_16BF", CUDA_C_16BF)},
    {SWIG_LUA_CONSTTAB_INT("CUDA_R_32F", CUDA_R_32F)},
    {SWIG_LUA_CONSTTAB_INT("CUDA_C_32F", CUDA_C_32F)},
    {SWIG_LUA_CONSTTAB_INT("CUDA_R_64F", CUDA_R_64F)},
    {SWIG_LUA_CONSTTAB_INT("CUDA_C_64F", CUDA_C_64F)},
    {SWIG_LUA_CONSTTAB_INT("CUDA_R_4I", CUDA_R_4I)},
    {SWIG_LUA_CONSTTAB_INT("CUDA_C_4I", CUDA_C_4I)},
    {SWIG_LUA_CONSTTAB_INT("CUDA_R_4U", CUDA_R_4U)},
    {SWIG_LUA_CONSTTAB_INT("CUDA_C_4U", CUDA_C_4U)},
    {SWIG_LUA_CONSTTAB_INT("CUDA_R_8I", CUDA_R_8I)},
    {SWIG_LUA_CONSTTAB_INT("CUDA_C_8I", CUDA_C_8I)},
    {SWIG_LUA_CONSTTAB_INT("CUDA_R_8U", CUDA_R_8U)},
    {SWIG_LUA_CONSTTAB_INT("CUDA_C_8U", CUDA_C_8U)},
    {SWIG_LUA_CONSTTAB_INT("CUDA_R_16I", CUDA_R_16I)},
    {SWIG_LUA_CONSTTAB_INT("CUDA_C_16I", CUDA_C_16I)},
    {SWIG_LUA_CONSTTAB_INT("CUDA_R_16U", CUDA_R_16U)},
    {SWIG_LUA_CONSTTAB_INT("CUDA_C_16U", CUDA_C_16U)},
    {SWIG_LUA_CONSTTAB_INT("CUDA_R_32I", CUDA_R_32I)},
    {SWIG_LUA_CONSTTAB_INT("CUDA_C_32I", CUDA_C_32I)},
    {SWIG_LUA_CONSTTAB_INT("CUDA_R_32U", CUDA_R_32U)},
    {SWIG_LUA_CONSTTAB_INT("CUDA_C_32U", CUDA_C_32U)},
    {SWIG_LUA_CONSTTAB_INT("CUDA_R_64I", CUDA_R_64I)},
    {SWIG_LUA_CONSTTAB_INT("CUDA_C_64I", CUDA_C_64I)},
    {SWIG_LUA_CONSTTAB_INT("CUDA_R_64U", CUDA_R_64U)},
    {SWIG_LUA_CONSTTAB_INT("CUDA_C_64U", CUDA_C_64U)},
    {SWIG_LUA_CONSTTAB_INT("MAJOR_VERSION", MAJOR_VERSION)},
    {SWIG_LUA_CONSTTAB_INT("MINOR_VERSION", MINOR_VERSION)},
    {SWIG_LUA_CONSTTAB_INT("PATCH_LEVEL", PATCH_LEVEL)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_STATUS_SUCCESS", CUBLAS_STATUS_SUCCESS)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_STATUS_NOT_INITIALIZED", CUBLAS_STATUS_NOT_INITIALIZED)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_STATUS_ALLOC_FAILED", CUBLAS_STATUS_ALLOC_FAILED)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_STATUS_INVALID_VALUE", CUBLAS_STATUS_INVALID_VALUE)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_STATUS_ARCH_MISMATCH", CUBLAS_STATUS_ARCH_MISMATCH)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_STATUS_MAPPING_ERROR", CUBLAS_STATUS_MAPPING_ERROR)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_STATUS_EXECUTION_FAILED", CUBLAS_STATUS_EXECUTION_FAILED)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_STATUS_INTERNAL_ERROR", CUBLAS_STATUS_INTERNAL_ERROR)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_STATUS_NOT_SUPPORTED", CUBLAS_STATUS_NOT_SUPPORTED)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_STATUS_LICENSE_ERROR", CUBLAS_STATUS_LICENSE_ERROR)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_FILL_MODE_LOWER", CUBLAS_FILL_MODE_LOWER)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_FILL_MODE_UPPER", CUBLAS_FILL_MODE_UPPER)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_FILL_MODE_FULL", CUBLAS_FILL_MODE_FULL)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_DIAG_NON_UNIT", CUBLAS_DIAG_NON_UNIT)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_DIAG_UNIT", CUBLAS_DIAG_UNIT)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_SIDE_LEFT", CUBLAS_SIDE_LEFT)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_SIDE_RIGHT", CUBLAS_SIDE_RIGHT)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_OP_N", CUBLAS_OP_N)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_OP_T", CUBLAS_OP_T)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_OP_C", CUBLAS_OP_C)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_OP_HERMITAN", CUBLAS_OP_HERMITAN)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_OP_CONJG", CUBLAS_OP_CONJG)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_POINTER_MODE_HOST", CUBLAS_POINTER_MODE_HOST)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_POINTER_MODE_DEVICE", CUBLAS_POINTER_MODE_DEVICE)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_ATOMICS_NOT_ALLOWED", CUBLAS_ATOMICS_NOT_ALLOWED)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_ATOMICS_ALLOWED", CUBLAS_ATOMICS_ALLOWED)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_DFALT", CUBLAS_GEMM_DFALT)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_DEFAULT", CUBLAS_GEMM_DEFAULT)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO0", CUBLAS_GEMM_ALGO0)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO1", CUBLAS_GEMM_ALGO1)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO2", CUBLAS_GEMM_ALGO2)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO3", CUBLAS_GEMM_ALGO3)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO4", CUBLAS_GEMM_ALGO4)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO5", CUBLAS_GEMM_ALGO5)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO6", CUBLAS_GEMM_ALGO6)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO7", CUBLAS_GEMM_ALGO7)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO8", CUBLAS_GEMM_ALGO8)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO9", CUBLAS_GEMM_ALGO9)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO10", CUBLAS_GEMM_ALGO10)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO11", CUBLAS_GEMM_ALGO11)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO12", CUBLAS_GEMM_ALGO12)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO13", CUBLAS_GEMM_ALGO13)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO14", CUBLAS_GEMM_ALGO14)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO15", CUBLAS_GEMM_ALGO15)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO16", CUBLAS_GEMM_ALGO16)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO17", CUBLAS_GEMM_ALGO17)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO18", CUBLAS_GEMM_ALGO18)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO19", CUBLAS_GEMM_ALGO19)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO20", CUBLAS_GEMM_ALGO20)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO21", CUBLAS_GEMM_ALGO21)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO22", CUBLAS_GEMM_ALGO22)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO23", CUBLAS_GEMM_ALGO23)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_DEFAULT_TENSOR_OP", CUBLAS_GEMM_DEFAULT_TENSOR_OP)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_DFALT_TENSOR_OP", CUBLAS_GEMM_DFALT_TENSOR_OP)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO0_TENSOR_OP", CUBLAS_GEMM_ALGO0_TENSOR_OP)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO1_TENSOR_OP", CUBLAS_GEMM_ALGO1_TENSOR_OP)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO2_TENSOR_OP", CUBLAS_GEMM_ALGO2_TENSOR_OP)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO3_TENSOR_OP", CUBLAS_GEMM_ALGO3_TENSOR_OP)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO4_TENSOR_OP", CUBLAS_GEMM_ALGO4_TENSOR_OP)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO5_TENSOR_OP", CUBLAS_GEMM_ALGO5_TENSOR_OP)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO6_TENSOR_OP", CUBLAS_GEMM_ALGO6_TENSOR_OP)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO7_TENSOR_OP", CUBLAS_GEMM_ALGO7_TENSOR_OP)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO8_TENSOR_OP", CUBLAS_GEMM_ALGO8_TENSOR_OP)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO9_TENSOR_OP", CUBLAS_GEMM_ALGO9_TENSOR_OP)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO10_TENSOR_OP", CUBLAS_GEMM_ALGO10_TENSOR_OP)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO11_TENSOR_OP", CUBLAS_GEMM_ALGO11_TENSOR_OP)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO12_TENSOR_OP", CUBLAS_GEMM_ALGO12_TENSOR_OP)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO13_TENSOR_OP", CUBLAS_GEMM_ALGO13_TENSOR_OP)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO14_TENSOR_OP", CUBLAS_GEMM_ALGO14_TENSOR_OP)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_GEMM_ALGO15_TENSOR_OP", CUBLAS_GEMM_ALGO15_TENSOR_OP)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_DEFAULT_MATH", CUBLAS_DEFAULT_MATH)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_TENSOR_OP_MATH", CUBLAS_TENSOR_OP_MATH)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_PEDANTIC_MATH", CUBLAS_PEDANTIC_MATH)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_TF32_TENSOR_OP_MATH", CUBLAS_TF32_TENSOR_OP_MATH)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_MATH_DISALLOW_REDUCED_PRECISION_REDUCTION", CUBLAS_MATH_DISALLOW_REDUCED_PRECISION_REDUCTION)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_COMPUTE_16F", CUBLAS_COMPUTE_16F)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_COMPUTE_16F_PEDANTIC", CUBLAS_COMPUTE_16F_PEDANTIC)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_COMPUTE_32F", CUBLAS_COMPUTE_32F)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_COMPUTE_32F_PEDANTIC", CUBLAS_COMPUTE_32F_PEDANTIC)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_COMPUTE_32F_FAST_16F", CUBLAS_COMPUTE_32F_FAST_16F)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_COMPUTE_32F_FAST_16BF", CUBLAS_COMPUTE_32F_FAST_16BF)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_COMPUTE_32F_FAST_TF32", CUBLAS_COMPUTE_32F_FAST_TF32)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_COMPUTE_64F", CUBLAS_COMPUTE_64F)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_COMPUTE_64F_PEDANTIC", CUBLAS_COMPUTE_64F_PEDANTIC)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_COMPUTE_32I", CUBLAS_COMPUTE_32I)},
    {SWIG_LUA_CONSTTAB_INT("CUBLAS_COMPUTE_32I_PEDANTIC", CUBLAS_COMPUTE_32I_PEDANTIC)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "cublasGetErrorString", _wrap_cublasGetErrorString},
    { "get_cuda_stream", _wrap_get_cuda_stream},
    { "set_stream", _wrap_set_stream},
    { "get_stream", _wrap_get_stream},
    { "random_stream", _wrap_random_stream},
    { "Memcpy", _wrap_Memcpy},
    { "return_host", _wrap_return_host},
    { "find_host", _wrap_find_host},
    { "max_index", _wrap_max_index},
    { "min_index", _wrap_min_index},
    { "nrm2", _wrap_nrm2},
    { "scale", _wrap_scale},
    { "swap", _wrap_swap},
    { "copy", _wrap_copy},
    { "Huge", _wrap_Huge},
    { "Hugef", _wrap_Hugef},
    { "Infinity", _wrap_Infinity},
    { "NaN", _wrap_NaN},
    { "absf", _wrap_absf},
    { "cubef", _wrap_cubef},
    { "sqrtf", _wrap_sqrtf},
    { "expf", _wrap_expf},
    { "exp2f", _wrap_exp2f},
    { "logf", _wrap_logf},
    { "log10f", _wrap_log10f},
    { "log2f", _wrap_log2f},
    { "logbf", _wrap_logbf},
    { "powf", _wrap_powf},
    { "floorf", _wrap_floorf},
    { "acosf", _wrap_acosf},
    { "asinf", _wrap_asinf},
    { "atanf", _wrap_atanf},
    { "atan2f", _wrap_atan2f},
    { "cosf", _wrap_cosf},
    { "sinf", _wrap_sinf},
    { "tanf", _wrap_tanf},
    { "coshf", _wrap_coshf},
    { "sinhf", _wrap_sinhf},
    { "tanhf", _wrap_tanhf},
    { "lgammaf", _wrap_lgammaf},
    { "acoshf", _wrap_acoshf},
    { "asinhf", _wrap_asinhf},
    { "atanhf", _wrap_atanhf},
    { "cbrtf", _wrap_cbrtf},
    { "ceilf", _wrap_ceilf},
    { "copysignf", _wrap_copysignf},
    { "erff", _wrap_erff},
    { "erfcf", _wrap_erfcf},
    { "expm1f", _wrap_expm1f},
    { "fdimf", _wrap_fdimf},
    { "fmaf", _wrap_fmaf},
    { "fmaxf", _wrap_fmaxf},
    { "fminf", _wrap_fminf},
    { "fmodf", _wrap_fmodf},
    { "fpclassifyf", _wrap_fpclassifyf},
    { "hypotf", _wrap_hypotf},
    { "ilogbf", _wrap_ilogbf},
    { "isfinitef", _wrap_isfinitef},
    { "isgreaterf", _wrap_isgreaterf},
    { "isgreaterequalf", _wrap_isgreaterequalf},
    { "isinff", _wrap_isinff},
    { "islessf", _wrap_islessf},
    { "islessequalf", _wrap_islessequalf},
    { "isnanf", _wrap_isnanf},
    { "isnormalf", _wrap_isnormalf},
    { "isunorderedf", _wrap_isunorderedf},
    { "ldexpf", _wrap_ldexpf},
    { "llrintf", _wrap_llrintf},
    { "llroundf", _wrap_llroundf},
    { "log1pf", _wrap_log1pf},
    { "lrintf", _wrap_lrintf},
    { "lroundf", _wrap_lroundf},
    { "nanf", _wrap_nanf},
    { "nanff", _wrap_nanff},
    { "nanlf", _wrap_nanlf},
    { "nearbyintf", _wrap_nearbyintf},
    { "nextafterf", _wrap_nextafterf},
    { "nexttowardf", _wrap_nexttowardf},
    { "remainderf", _wrap_remainderf},
    { "rintf", _wrap_rintf},
    { "roundf", _wrap_roundf},
    { "scalblnf", _wrap_scalblnf},
    { "scalbnf", _wrap_scalbnf},
    { "squaref", _wrap_squaref},
    { "tgammaf", _wrap_tgammaf},
    { "truncf", _wrap_truncf},
    { "absd", _wrap_absd},
    { "sqrtd", _wrap_sqrtd},
    { "expd", _wrap_expd},
    { "exp2d", _wrap_exp2d},
    { "logd", _wrap_logd},
    { "log10d", _wrap_log10d},
    { "log2d", _wrap_log2d},
    { "logbd", _wrap_logbd},
    { "powd", _wrap_powd},
    { "floord", _wrap_floord},
    { "acosd", _wrap_acosd},
    { "asind", _wrap_asind},
    { "atand", _wrap_atand},
    { "atan2d", _wrap_atan2d},
    { "cosd", _wrap_cosd},
    { "sind", _wrap_sind},
    { "tand", _wrap_tand},
    { "coshd", _wrap_coshd},
    { "sinhd", _wrap_sinhd},
    { "tanhd", _wrap_tanhd},
    { "lgammad", _wrap_lgammad},
    { "acoshd", _wrap_acoshd},
    { "asinhd", _wrap_asinhd},
    { "atanhd", _wrap_atanhd},
    { "cbrtd", _wrap_cbrtd},
    { "ceild", _wrap_ceild},
    { "copysignd", _wrap_copysignd},
    { "erfd", _wrap_erfd},
    { "erfcd", _wrap_erfcd},
    { "expm1d", _wrap_expm1d},
    { "fdimd", _wrap_fdimd},
    { "fmad", _wrap_fmad},
    { "fmaxd", _wrap_fmaxd},
    { "fmind", _wrap_fmind},
    { "fmodd", _wrap_fmodd},
    { "fpclassifyd", _wrap_fpclassifyd},
    { "hypotd", _wrap_hypotd},
    { "ilogbd", _wrap_ilogbd},
    { "isfinited", _wrap_isfinited},
    { "isgreaterd", _wrap_isgreaterd},
    { "isgreaterequald", _wrap_isgreaterequald},
    { "isinfd", _wrap_isinfd},
    { "islessd", _wrap_islessd},
    { "islessequald", _wrap_islessequald},
    { "isnand", _wrap_isnand},
    { "isnormald", _wrap_isnormald},
    { "isunorderedd", _wrap_isunorderedd},
    { "ldexpd", _wrap_ldexpd},
    { "llrintd", _wrap_llrintd},
    { "llroundd", _wrap_llroundd},
    { "log1pd", _wrap_log1pd},
    { "lrintd", _wrap_lrintd},
    { "lroundd", _wrap_lroundd},
    { "nand", _wrap_nand},
    { "nanfd", _wrap_nanfd},
    { "nanld", _wrap_nanld},
    { "nearbyintd", _wrap_nearbyintd},
    { "nextafterd", _wrap_nextafterd},
    { "nexttowardd", _wrap_nexttowardd},
    { "remainderd", _wrap_remainderd},
    { "rintd", _wrap_rintd},
    { "roundd", _wrap_roundd},
    { "scalblnd", _wrap_scalblnd},
    { "scalbnd", _wrap_scalbnd},
    { "squared", _wrap_squared},
    { "tgammad", _wrap_tgammad},
    { "truncd", _wrap_truncd},
    { "feclearexcept", _wrap_feclearexcept},
    { "fegetexceptflag", _wrap_fegetexceptflag},
    { "feraiseexcept", _wrap_feraiseexcept},
    { "fesetexceptflag", _wrap_fesetexceptflag},
    { "fetestexcept", _wrap_fetestexcept},
    { "fegetround", _wrap_fegetround},
    { "fesetround", _wrap_fesetround},
    { "fegetenv", _wrap_fegetenv},
    { "feholdexcept", _wrap_feholdexcept},
    { "fesetenv", _wrap_fesetenv},
    { "feupdateenv", _wrap_feupdateenv},
    { "cublasCreate_v2", _wrap_cublasCreate_v2},
    { "cublasDestroy_v2", _wrap_cublasDestroy_v2},
    { "cublasGetVersion_v2", _wrap_cublasGetVersion_v2},
    { "cublasGetProperty", _wrap_cublasGetProperty},
    { "cublasGetCudartVersion", _wrap_cublasGetCudartVersion},
    { "cublasSetWorkspace_v2", _wrap_cublasSetWorkspace_v2},
    { "cublasSetStream_v2", _wrap_cublasSetStream_v2},
    { "cublasGetStream_v2", _wrap_cublasGetStream_v2},
    { "cublasGetPointerMode_v2", _wrap_cublasGetPointerMode_v2},
    { "cublasSetPointerMode_v2", _wrap_cublasSetPointerMode_v2},
    { "cublasGetAtomicsMode", _wrap_cublasGetAtomicsMode},
    { "cublasSetAtomicsMode", _wrap_cublasSetAtomicsMode},
    { "cublasGetMathMode", _wrap_cublasGetMathMode},
    { "cublasSetMathMode", _wrap_cublasSetMathMode},
    { "cublasGetSmCountTarget", _wrap_cublasGetSmCountTarget},
    { "cublasSetSmCountTarget", _wrap_cublasSetSmCountTarget},
    { "cublasGetStatusName", _wrap_cublasGetStatusName},
    { "cublasGetStatusString", _wrap_cublasGetStatusString},
    { "cublasLoggerConfigure", _wrap_cublasLoggerConfigure},
    { "cublasSetLoggerCallback", _wrap_cublasSetLoggerCallback},
    { "cublasGetLoggerCallback", _wrap_cublasGetLoggerCallback},
    { "cublasSetVector", _wrap_cublasSetVector},
    { "cublasGetVector", _wrap_cublasGetVector},
    { "cublasSetMatrix", _wrap_cublasSetMatrix},
    { "cublasGetMatrix", _wrap_cublasGetMatrix},
    { "cublasSetVectorAsync", _wrap_cublasSetVectorAsync},
    { "cublasGetVectorAsync", _wrap_cublasGetVectorAsync},
    { "cublasSetMatrixAsync", _wrap_cublasSetMatrixAsync},
    { "cublasXerbla", _wrap_cublasXerbla},
    { "cublasNrm2Ex", _wrap_cublasNrm2Ex},
    { "cublasSnrm2_v2", _wrap_cublasSnrm2_v2},
    { "cublasDnrm2_v2", _wrap_cublasDnrm2_v2},
    { "cublasScnrm2_v2", _wrap_cublasScnrm2_v2},
    { "cublasDznrm2_v2", _wrap_cublasDznrm2_v2},
    { "cublasDotEx", _wrap_cublasDotEx},
    { "cublasDotcEx", _wrap_cublasDotcEx},
    { "cublasSdot_v2", _wrap_cublasSdot_v2},
    { "cublasDdot_v2", _wrap_cublasDdot_v2},
    { "cublasCdotu_v2", _wrap_cublasCdotu_v2},
    { "cublasCdotc_v2", _wrap_cublasCdotc_v2},
    { "cublasZdotu_v2", _wrap_cublasZdotu_v2},
    { "cublasZdotc_v2", _wrap_cublasZdotc_v2},
    { "cublasScalEx", _wrap_cublasScalEx},
    { "cublasSscal_v2", _wrap_cublasSscal_v2},
    { "cublasDscal_v2", _wrap_cublasDscal_v2},
    { "cublasCscal_v2", _wrap_cublasCscal_v2},
    { "cublasCsscal_v2", _wrap_cublasCsscal_v2},
    { "cublasZscal_v2", _wrap_cublasZscal_v2},
    { "cublasZdscal_v2", _wrap_cublasZdscal_v2},
    { "cublasAxpyEx", _wrap_cublasAxpyEx},
    { "cublasSaxpy_v2", _wrap_cublasSaxpy_v2},
    { "cublasDaxpy_v2", _wrap_cublasDaxpy_v2},
    { "cublasCaxpy_v2", _wrap_cublasCaxpy_v2},
    { "cublasZaxpy_v2", _wrap_cublasZaxpy_v2},
    { "cublasCopyEx", _wrap_cublasCopyEx},
    { "cublasScopy_v2", _wrap_cublasScopy_v2},
    { "cublasDcopy_v2", _wrap_cublasDcopy_v2},
    { "cublasCcopy_v2", _wrap_cublasCcopy_v2},
    { "cublasZcopy_v2", _wrap_cublasZcopy_v2},
    { "cublasSswap_v2", _wrap_cublasSswap_v2},
    { "cublasDswap_v2", _wrap_cublasDswap_v2},
    { "cublasCswap_v2", _wrap_cublasCswap_v2},
    { "cublasZswap_v2", _wrap_cublasZswap_v2},
    { "cublasSwapEx", _wrap_cublasSwapEx},
    { "cublasIsamax_v2", _wrap_cublasIsamax_v2},
    { "cublasIdamax_v2", _wrap_cublasIdamax_v2},
    { "cublasIcamax_v2", _wrap_cublasIcamax_v2},
    { "cublasIzamax_v2", _wrap_cublasIzamax_v2},
    { "cublasIamaxEx", _wrap_cublasIamaxEx},
    { "cublasIsamin_v2", _wrap_cublasIsamin_v2},
    { "cublasIdamin_v2", _wrap_cublasIdamin_v2},
    { "cublasIcamin_v2", _wrap_cublasIcamin_v2},
    { "cublasIzamin_v2", _wrap_cublasIzamin_v2},
    { "cublasIaminEx", _wrap_cublasIaminEx},
    { "cublasAsumEx", _wrap_cublasAsumEx},
    { "cublasSasum_v2", _wrap_cublasSasum_v2},
    { "cublasDasum_v2", _wrap_cublasDasum_v2},
    { "cublasScasum_v2", _wrap_cublasScasum_v2},
    { "cublasDzasum_v2", _wrap_cublasDzasum_v2},
    { "cublasSrot_v2", _wrap_cublasSrot_v2},
    { "cublasDrot_v2", _wrap_cublasDrot_v2},
    { "cublasCrot_v2", _wrap_cublasCrot_v2},
    { "cublasCsrot_v2", _wrap_cublasCsrot_v2},
    { "cublasZrot_v2", _wrap_cublasZrot_v2},
    { "cublasZdrot_v2", _wrap_cublasZdrot_v2},
    { "cublasRotEx", _wrap_cublasRotEx},
    { "cublasSrotg_v2", _wrap_cublasSrotg_v2},
    { "cublasDrotg_v2", _wrap_cublasDrotg_v2},
    { "cublasCrotg_v2", _wrap_cublasCrotg_v2},
    { "cublasZrotg_v2", _wrap_cublasZrotg_v2},
    { "cublasRotgEx", _wrap_cublasRotgEx},
    { "cublasSrotm_v2", _wrap_cublasSrotm_v2},
    { "cublasDrotm_v2", _wrap_cublasDrotm_v2},
    { "cublasRotmEx", _wrap_cublasRotmEx},
    { "cublasSrotmg_v2", _wrap_cublasSrotmg_v2},
    { "cublasDrotmg_v2", _wrap_cublasDrotmg_v2},
    { "cublasRotmgEx", _wrap_cublasRotmgEx},
    { "cublasSgemv_v2", _wrap_cublasSgemv_v2},
    { "cublasDgemv_v2", _wrap_cublasDgemv_v2},
    { "cublasCgemv_v2", _wrap_cublasCgemv_v2},
    { "cublasZgemv_v2", _wrap_cublasZgemv_v2},
    { "cublasSgbmv_v2", _wrap_cublasSgbmv_v2},
    { "cublasDgbmv_v2", _wrap_cublasDgbmv_v2},
    { "cublasCgbmv_v2", _wrap_cublasCgbmv_v2},
    { "cublasZgbmv_v2", _wrap_cublasZgbmv_v2},
    { "cublasStrmv_v2", _wrap_cublasStrmv_v2},
    { "cublasDtrmv_v2", _wrap_cublasDtrmv_v2},
    { "cublasCtrmv_v2", _wrap_cublasCtrmv_v2},
    { "cublasZtrmv_v2", _wrap_cublasZtrmv_v2},
    { "cublasStbmv_v2", _wrap_cublasStbmv_v2},
    { "cublasDtbmv_v2", _wrap_cublasDtbmv_v2},
    { "cublasCtbmv_v2", _wrap_cublasCtbmv_v2},
    { "cublasZtbmv_v2", _wrap_cublasZtbmv_v2},
    { "cublasStpmv_v2", _wrap_cublasStpmv_v2},
    { "cublasDtpmv_v2", _wrap_cublasDtpmv_v2},
    { "cublasCtpmv_v2", _wrap_cublasCtpmv_v2},
    { "cublasZtpmv_v2", _wrap_cublasZtpmv_v2},
    { "cublasStrsv_v2", _wrap_cublasStrsv_v2},
    { "cublasDtrsv_v2", _wrap_cublasDtrsv_v2},
    { "cublasCtrsv_v2", _wrap_cublasCtrsv_v2},
    { "cublasZtrsv_v2", _wrap_cublasZtrsv_v2},
    { "cublasStpsv_v2", _wrap_cublasStpsv_v2},
    { "cublasDtpsv_v2", _wrap_cublasDtpsv_v2},
    { "cublasCtpsv_v2", _wrap_cublasCtpsv_v2},
    { "cublasZtpsv_v2", _wrap_cublasZtpsv_v2},
    { "cublasStbsv_v2", _wrap_cublasStbsv_v2},
    { "cublasDtbsv_v2", _wrap_cublasDtbsv_v2},
    { "cublasCtbsv_v2", _wrap_cublasCtbsv_v2},
    { "cublasZtbsv_v2", _wrap_cublasZtbsv_v2},
    { "cublasSsymv_v2", _wrap_cublasSsymv_v2},
    { "cublasDsymv_v2", _wrap_cublasDsymv_v2},
    { "cublasCsymv_v2", _wrap_cublasCsymv_v2},
    { "cublasZsymv_v2", _wrap_cublasZsymv_v2},
    { "cublasChemv_v2", _wrap_cublasChemv_v2},
    { "cublasZhemv_v2", _wrap_cublasZhemv_v2},
    { "cublasSsbmv_v2", _wrap_cublasSsbmv_v2},
    { "cublasDsbmv_v2", _wrap_cublasDsbmv_v2},
    { "cublasChbmv_v2", _wrap_cublasChbmv_v2},
    { "cublasZhbmv_v2", _wrap_cublasZhbmv_v2},
    { "cublasSspmv_v2", _wrap_cublasSspmv_v2},
    { "cublasDspmv_v2", _wrap_cublasDspmv_v2},
    { "cublasChpmv_v2", _wrap_cublasChpmv_v2},
    { "cublasZhpmv_v2", _wrap_cublasZhpmv_v2},
    { "cublasSger_v2", _wrap_cublasSger_v2},
    { "cublasDger_v2", _wrap_cublasDger_v2},
    { "cublasCgeru_v2", _wrap_cublasCgeru_v2},
    { "cublasCgerc_v2", _wrap_cublasCgerc_v2},
    { "cublasZgeru_v2", _wrap_cublasZgeru_v2},
    { "cublasZgerc_v2", _wrap_cublasZgerc_v2},
    { "cublasSsyr_v2", _wrap_cublasSsyr_v2},
    { "cublasDsyr_v2", _wrap_cublasDsyr_v2},
    { "cublasCsyr_v2", _wrap_cublasCsyr_v2},
    { "cublasZsyr_v2", _wrap_cublasZsyr_v2},
    { "cublasCher_v2", _wrap_cublasCher_v2},
    { "cublasZher_v2", _wrap_cublasZher_v2},
    { "cublasSspr_v2", _wrap_cublasSspr_v2},
    { "cublasDspr_v2", _wrap_cublasDspr_v2},
    { "cublasChpr_v2", _wrap_cublasChpr_v2},
    { "cublasZhpr_v2", _wrap_cublasZhpr_v2},
    { "cublasSsyr2_v2", _wrap_cublasSsyr2_v2},
    { "cublasDsyr2_v2", _wrap_cublasDsyr2_v2},
    { "cublasCsyr2_v2", _wrap_cublasCsyr2_v2},
    { "cublasZsyr2_v2", _wrap_cublasZsyr2_v2},
    { "cublasCher2_v2", _wrap_cublasCher2_v2},
    { "cublasZher2_v2", _wrap_cublasZher2_v2},
    { "cublasSspr2_v2", _wrap_cublasSspr2_v2},
    { "cublasDspr2_v2", _wrap_cublasDspr2_v2},
    { "cublasChpr2_v2", _wrap_cublasChpr2_v2},
    { "cublasZhpr2_v2", _wrap_cublasZhpr2_v2},
    { "cublasSgemm_v2", _wrap_cublasSgemm_v2},
    { "cublasDgemm_v2", _wrap_cublasDgemm_v2},
    { "cublasCgemm_v2", _wrap_cublasCgemm_v2},
    { "cublasCgemm3m", _wrap_cublasCgemm3m},
    { "cublasCgemm3mEx", _wrap_cublasCgemm3mEx},
    { "cublasZgemm_v2", _wrap_cublasZgemm_v2},
    { "cublasZgemm3m", _wrap_cublasZgemm3m},
    { "cublasHgemm", _wrap_cublasHgemm},
    { "cublasSgemmEx", _wrap_cublasSgemmEx},
    { "cublasGemmEx", _wrap_cublasGemmEx},
    { "cublasCgemmEx", _wrap_cublasCgemmEx},
    { "cublasUint8gemmBias", _wrap_cublasUint8gemmBias},
    { "cublasSsyrk_v2", _wrap_cublasSsyrk_v2},
    { "cublasDsyrk_v2", _wrap_cublasDsyrk_v2},
    { "cublasCsyrk_v2", _wrap_cublasCsyrk_v2},
    { "cublasZsyrk_v2", _wrap_cublasZsyrk_v2},
    { "cublasCsyrkEx", _wrap_cublasCsyrkEx},
    { "cublasCsyrk3mEx", _wrap_cublasCsyrk3mEx},
    { "cublasCherk_v2", _wrap_cublasCherk_v2},
    { "cublasZherk_v2", _wrap_cublasZherk_v2},
    { "cublasCherkEx", _wrap_cublasCherkEx},
    { "cublasCherk3mEx", _wrap_cublasCherk3mEx},
    { "cublasSsyr2k_v2", _wrap_cublasSsyr2k_v2},
    { "cublasDsyr2k_v2", _wrap_cublasDsyr2k_v2},
    { "cublasCsyr2k_v2", _wrap_cublasCsyr2k_v2},
    { "cublasZsyr2k_v2", _wrap_cublasZsyr2k_v2},
    { "cublasCher2k_v2", _wrap_cublasCher2k_v2},
    { "cublasZher2k_v2", _wrap_cublasZher2k_v2},
    { "cublasSsyrkx", _wrap_cublasSsyrkx},
    { "cublasDsyrkx", _wrap_cublasDsyrkx},
    { "cublasCsyrkx", _wrap_cublasCsyrkx},
    { "cublasZsyrkx", _wrap_cublasZsyrkx},
    { "cublasCherkx", _wrap_cublasCherkx},
    { "cublasZherkx", _wrap_cublasZherkx},
    { "cublasSsymm_v2", _wrap_cublasSsymm_v2},
    { "cublasDsymm_v2", _wrap_cublasDsymm_v2},
    { "cublasCsymm_v2", _wrap_cublasCsymm_v2},
    { "cublasZsymm_v2", _wrap_cublasZsymm_v2},
    { "cublasChemm_v2", _wrap_cublasChemm_v2},
    { "cublasZhemm_v2", _wrap_cublasZhemm_v2},
    { "cublasStrsm_v2", _wrap_cublasStrsm_v2},
    { "cublasDtrsm_v2", _wrap_cublasDtrsm_v2},
    { "cublasCtrsm_v2", _wrap_cublasCtrsm_v2},
    { "cublasZtrsm_v2", _wrap_cublasZtrsm_v2},
    { "cublasStrmm_v2", _wrap_cublasStrmm_v2},
    { "cublasDtrmm_v2", _wrap_cublasDtrmm_v2},
    { "cublasCtrmm_v2", _wrap_cublasCtrmm_v2},
    { "cublasZtrmm_v2", _wrap_cublasZtrmm_v2},
    { "cublasHgemmBatched", _wrap_cublasHgemmBatched},
    { "cublasSgemmBatched", _wrap_cublasSgemmBatched},
    { "cublasDgemmBatched", _wrap_cublasDgemmBatched},
    { "cublasCgemmBatched", _wrap_cublasCgemmBatched},
    { "cublasCgemm3mBatched", _wrap_cublasCgemm3mBatched},
    { "cublasZgemmBatched", _wrap_cublasZgemmBatched},
    { "cublasGemmBatchedEx", _wrap_cublasGemmBatchedEx},
    { "cublasGemmStridedBatchedEx", _wrap_cublasGemmStridedBatchedEx},
    { "cublasSgemmStridedBatched", _wrap_cublasSgemmStridedBatched},
    { "cublasDgemmStridedBatched", _wrap_cublasDgemmStridedBatched},
    { "cublasCgemmStridedBatched", _wrap_cublasCgemmStridedBatched},
    { "cublasCgemm3mStridedBatched", _wrap_cublasCgemm3mStridedBatched},
    { "cublasZgemmStridedBatched", _wrap_cublasZgemmStridedBatched},
    { "cublasHgemmStridedBatched", _wrap_cublasHgemmStridedBatched},
    { "cublasSgeam", _wrap_cublasSgeam},
    { "cublasDgeam", _wrap_cublasDgeam},
    { "cublasCgeam", _wrap_cublasCgeam},
    { "cublasZgeam", _wrap_cublasZgeam},
    { "cublasSgetrfBatched", _wrap_cublasSgetrfBatched},
    { "cublasDgetrfBatched", _wrap_cublasDgetrfBatched},
    { "cublasCgetrfBatched", _wrap_cublasCgetrfBatched},
    { "cublasZgetrfBatched", _wrap_cublasZgetrfBatched},
    { "cublasSgetriBatched", _wrap_cublasSgetriBatched},
    { "cublasDgetriBatched", _wrap_cublasDgetriBatched},
    { "cublasCgetriBatched", _wrap_cublasCgetriBatched},
    { "cublasZgetriBatched", _wrap_cublasZgetriBatched},
    { "cublasSgetrsBatched", _wrap_cublasSgetrsBatched},
    { "cublasDgetrsBatched", _wrap_cublasDgetrsBatched},
    { "cublasCgetrsBatched", _wrap_cublasCgetrsBatched},
    { "cublasZgetrsBatched", _wrap_cublasZgetrsBatched},
    { "cublasStrsmBatched", _wrap_cublasStrsmBatched},
    { "cublasDtrsmBatched", _wrap_cublasDtrsmBatched},
    { "cublasCtrsmBatched", _wrap_cublasCtrsmBatched},
    { "cublasZtrsmBatched", _wrap_cublasZtrsmBatched},
    { "cublasSmatinvBatched", _wrap_cublasSmatinvBatched},
    { "cublasDmatinvBatched", _wrap_cublasDmatinvBatched},
    { "cublasCmatinvBatched", _wrap_cublasCmatinvBatched},
    { "cublasZmatinvBatched", _wrap_cublasZmatinvBatched},
    { "cublasSgeqrfBatched", _wrap_cublasSgeqrfBatched},
    { "cublasDgeqrfBatched", _wrap_cublasDgeqrfBatched},
    { "cublasCgeqrfBatched", _wrap_cublasCgeqrfBatched},
    { "cublasZgeqrfBatched", _wrap_cublasZgeqrfBatched},
    { "cublasSgelsBatched", _wrap_cublasSgelsBatched},
    { "cublasDgelsBatched", _wrap_cublasDgelsBatched},
    { "cublasCgelsBatched", _wrap_cublasCgelsBatched},
    { "cublasZgelsBatched", _wrap_cublasZgelsBatched},
    { "cublasSdgmm", _wrap_cublasSdgmm},
    { "cublasDdgmm", _wrap_cublasDdgmm},
    { "cublasCdgmm", _wrap_cublasCdgmm},
    { "cublasZdgmm", _wrap_cublasZdgmm},
    { "cublasStpttr", _wrap_cublasStpttr},
    { "cublasDtpttr", _wrap_cublasDtpttr},
    { "cublasCtpttr", _wrap_cublasCtpttr},
    { "cublasZtpttr", _wrap_cublasZtpttr},
    { "cublasStrttp", _wrap_cublasStrttp},
    { "cublasDtrttp", _wrap_cublasDtrttp},
    { "cublasCtrttp", _wrap_cublasCtrttp},
    { "cublasZtrttp", _wrap_cublasZtrttp},
    { "CreateCublas", _wrap_CreateCublas},
    { "DeleteCublas", _wrap_DeleteCublas},
    { "synchronize", _wrap_synchronize},
    { "set_seed", _wrap_set_seed},
    { "vector_range", _wrap_vector_range},
    { "cast_double_float", _wrap_cast_double_float},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_CudaStream,
&_wrap_class_CublasPointerMode,
&_wrap_class_CublasAtomicsMode,
&_wrap_class_CublasMathMode,
&_wrap_class_Cublas,
&_wrap_class_CuRand,
&_wrap_class_SchemaMemory,
&_wrap_class_gslice,
&_wrap_class_slice,
&_wrap_class_float_complex,
&_wrap_class_double_complex,
&_wrap_class_float_valarray,
&_wrap_class_float_numeric_limits,
&_wrap_class_double_numeric_limits,
&_wrap_class_int_numeric_limits,
&_wrap_class_uint_numeric_limits,
&_wrap_class_short_numeric_limits,
&_wrap_class_ushort_numeric_limits,
&_wrap_class_long_numeric_limits,
&_wrap_class_ulong_numeric_limits,
&_wrap_class_llong_numeric_limits,
&_wrap_class_ullong_numeric_limits,
&_wrap_class_float_vector,
&_wrap_class_double_vector,
&_wrap_class_complex_vector,
&_wrap_class_double_complex_vector,
&_wrap_class_VectorXf,
&_wrap_class_VectorXd,
&_wrap_class_MatrixXf,
&_wrap_class_MatrixXd,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "viper",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_CuRand = {"_p_CuRand", "CuRand *", 0, 0, (void*)&_wrap_class_CuRand, 0};
static swig_type_info _swigt__p_Cublas = {"_p_Cublas", "Cublas *", 0, 0, (void*)&_wrap_class_Cublas, 0};
static swig_type_info _swigt__p_CublasAtomicsMode = {"_p_CublasAtomicsMode", "CublasAtomicsMode *", 0, 0, (void*)&_wrap_class_CublasAtomicsMode, 0};
static swig_type_info _swigt__p_CublasMathMode = {"_p_CublasMathMode", "CublasMathMode *", 0, 0, (void*)&_wrap_class_CublasMathMode, 0};
static swig_type_info _swigt__p_CublasPointerMode = {"_p_CublasPointerMode", "CublasPointerMode *", 0, 0, (void*)&_wrap_class_CublasPointerMode, 0};
static swig_type_info _swigt__p_CudaStream = {"_p_CudaStream", "CudaStream *", 0, 0, (void*)&_wrap_class_CudaStream, 0};
static swig_type_info _swigt__p_SchemaMemory = {"_p_SchemaMemory", "SchemaMemory *", 0, 0, (void*)&_wrap_class_SchemaMemory, 0};
static swig_type_info _swigt__p_Viper__MatrixT_double_t = {"_p_Viper__MatrixT_double_t", "Viper::Matrix< double > *", 0, 0, (void*)&_wrap_class_MatrixXd, 0};
static swig_type_info _swigt__p_Viper__MatrixT_float_t = {"_p_Viper__MatrixT_float_t", "Viper::Matrix< float > *", 0, 0, (void*)&_wrap_class_MatrixXf, 0};
static swig_type_info _swigt__p_Viper__VectorT_double_t = {"_p_Viper__VectorT_double_t", "Viper::Vector< double > *", 0, 0, (void*)&_wrap_class_VectorXd, 0};
static swig_type_info _swigt__p_Viper__VectorT_float_t = {"_p_Viper__VectorT_float_t", "Viper::Vector< float > *", 0, 0, (void*)&_wrap_class_VectorXf, 0};
static swig_type_info _swigt__p___half = {"_p___half", "__half *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cuComplex = {"_p_cuComplex", "cuComplex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cuDoubleComplex = {"_p_cuDoubleComplex", "cuDoubleComplex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cublasAtomicsMode_t = {"_p_cublasAtomicsMode_t", "enum cublasAtomicsMode_t *|cublasAtomicsMode_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cublasComputeType_t = {"_p_cublasComputeType_t", "enum cublasComputeType_t *|cublasComputeType_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cublasContext = {"_p_cublasContext", "cublasContext *|cublasHandle_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cublasDiagType_t = {"_p_cublasDiagType_t", "enum cublasDiagType_t *|cublasDiagType_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cublasFillMode_t = {"_p_cublasFillMode_t", "enum cublasFillMode_t *|cublasFillMode_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cublasGemmAlgo_t = {"_p_cublasGemmAlgo_t", "enum cublasGemmAlgo_t *|cublasGemmAlgo_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cublasMath_t = {"_p_cublasMath_t", "enum cublasMath_t *|cublasMath_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cublasOperation_t = {"_p_cublasOperation_t", "enum cublasOperation_t *|cublasOperation_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cublasPointerMode_t = {"_p_cublasPointerMode_t", "enum cublasPointerMode_t *|cublasPointerMode_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cublasSideMode_t = {"_p_cublasSideMode_t", "enum cublasSideMode_t *|cublasSideMode_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cublasStatus_t = {"_p_cublasStatus_t", "enum cublasStatus_t *|cublasStatus_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cudaDataType_t = {"_p_cudaDataType_t", "cudaDataType *|enum cudaDataType_t *|cudaDataType_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cudaStream_t = {"_p_cudaStream_t", "cudaStream_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_curandGenerator_t = {"_p_curandGenerator_t", "curandGenerator_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "f64 *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_float__float = {"_p_f_float__float", "float (*)(float)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_q_const__char__void = {"_p_f_p_q_const__char__void", "void (*)(char const *)|cublasLogCallback", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_q_const__float__float = {"_p_f_r_q_const__float__float", "float (*)(float const &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fenv_t = {"_p_fenv_t", "fenv_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fexcept_t = {"_p_fexcept_t", "fexcept_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "f32 *|float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|int32_t *|array_index *|i32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_libraryPropertyType_t = {"_p_libraryPropertyType_t", "libraryPropertyType *|enum libraryPropertyType_t *|libraryPropertyType_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "int64_t *|ilong *|long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "long long *|i64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p___half = {"_p_p___half", "__half **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_cuComplex = {"_p_p_cuComplex", "cuComplex **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_cuDoubleComplex = {"_p_p_cuDoubleComplex", "cuDoubleComplex **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_cublasContext = {"_p_p_cublasContext", "cublasHandle_t *|cublasContext **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_double = {"_p_p_double", "double **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_f_p_q_const__char__void = {"_p_p_f_p_q_const__char__void", "cublasLogCallback *|void (**)(char const *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_float = {"_p_p_float", "float **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pthread_mutex_t = {"_p_pthread_mutex_t", "pthread_mutex_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|i16 *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|i8 *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_double_t = {"_p_std__complexT_double_t", "std::complex< double > *", 0, 0, (void*)&_wrap_class_double_complex, 0};
static swig_type_info _swigt__p_std__complexT_float_t = {"_p_std__complexT_float_t", "std::complex< float > *", 0, 0, (void*)&_wrap_class_float_complex, 0};
static swig_type_info _swigt__p_std__gslice = {"_p_std__gslice", "std::gslice *", 0, 0, (void*)&_wrap_class_gslice, 0};
static swig_type_info _swigt__p_std__gslice_arrayT_float_t = {"_p_std__gslice_arrayT_float_t", "std::gslice_array< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__indirect_arrayT_float_t = {"_p_std__indirect_arrayT_float_t", "std::indirect_array< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__initializer_listT_double_t = {"_p_std__initializer_listT_double_t", "std::initializer_list< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__initializer_listT_float_t = {"_p_std__initializer_listT_float_t", "std::initializer_list< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mask_arrayT_float_t = {"_p_std__mask_arrayT_float_t", "std::mask_array< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__multimapT_int_std__pairT_void_p_void_p_t_t = {"_p_std__multimapT_int_std__pairT_void_p_void_p_t_t", "std::multimap< int,std::pair< void *,void * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_double_t = {"_p_std__numeric_limitsT_double_t", "std::numeric_limits< double > *", 0, 0, (void*)&_wrap_class_double_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_float_t = {"_p_std__numeric_limitsT_float_t", "std::numeric_limits< float > *", 0, 0, (void*)&_wrap_class_float_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_int_t = {"_p_std__numeric_limitsT_int_t", "std::numeric_limits< int > *", 0, 0, (void*)&_wrap_class_int_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_long_long_t = {"_p_std__numeric_limitsT_long_long_t", "std::numeric_limits< long long > *", 0, 0, (void*)&_wrap_class_llong_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_long_t = {"_p_std__numeric_limitsT_long_t", "std::numeric_limits< long > *", 0, 0, (void*)&_wrap_class_long_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_short_t = {"_p_std__numeric_limitsT_short_t", "std::numeric_limits< short > *", 0, 0, (void*)&_wrap_class_short_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_int_t = {"_p_std__numeric_limitsT_unsigned_int_t", "std::numeric_limits< unsigned int > *", 0, 0, (void*)&_wrap_class_uint_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_long_long_t = {"_p_std__numeric_limitsT_unsigned_long_long_t", "std::numeric_limits< unsigned long long > *", 0, 0, (void*)&_wrap_class_ullong_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_long_t = {"_p_std__numeric_limitsT_unsigned_long_t", "std::numeric_limits< unsigned long > *", 0, 0, (void*)&_wrap_class_ulong_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_short_t = {"_p_std__numeric_limitsT_unsigned_short_t", "std::numeric_limits< unsigned short > *", 0, 0, (void*)&_wrap_class_ushort_numeric_limits, 0};
static swig_type_info _swigt__p_std__pairT_void_p_void_p_t = {"_p_std__pairT_void_p_void_p_t", "std::pair< void *,void * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_DevPtrT_double_t_t = {"_p_std__shared_ptrT_DevPtrT_double_t_t", "std::shared_ptr< DevPtr< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_DevPtrT_float_t_t = {"_p_std__shared_ptrT_DevPtrT_float_t_t", "std::shared_ptr< DevPtr< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__slice = {"_p_std__slice", "std::slice *", 0, 0, (void*)&_wrap_class_slice, 0};
static swig_type_info _swigt__p_std__slice_arrayT_float_t = {"_p_std__slice_arrayT_float_t", "std::slice_array< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__valarrayT_float_t = {"_p_std__valarrayT_float_t", "std::valarray< float > *", 0, 0, (void*)&_wrap_class_float_valarray, 0};
static swig_type_info _swigt__p_std__vectorT_double_t = {"_p_std__vectorT_double_t", "std::vector< double > *", 0, 0, (void*)&_wrap_class_double_vector, 0};
static swig_type_info _swigt__p_std__vectorT_float_t = {"_p_std__vectorT_float_t", "std::vector< float > *", 0, 0, (void*)&_wrap_class_float_vector, 0};
static swig_type_info _swigt__p_std__vectorT_std__complexT_double_t_t = {"_p_std__vectorT_std__complexT_double_t_t", "std::vector< std::complex< double > > *", 0, 0, (void*)&_wrap_class_double_complex_vector, 0};
static swig_type_info _swigt__p_std__vectorT_std__complexT_float_t_t = {"_p_std__vectorT_std__complexT_float_t_t", "std::vector< std::complex< float > > *", 0, 0, (void*)&_wrap_class_complex_vector, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_double_t = {"_p_std__vector_iteratorT_double_t", "std::vector_iterator< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_float_t = {"_p_std__vector_iteratorT_float_t", "std::vector_iterator< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_std__complexT_double_t_t = {"_p_std__vector_iteratorT_std__complexT_double_t_t", "std::vector_iterator< std::complex< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_std__complexT_float_t_t = {"_p_std__vector_iteratorT_std__complexT_float_t_t", "std::vector_iterator< std::complex< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "u8 *|unsigned char *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uint32_t *|unsigned int *|u32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "uint64_t *|ulong *|unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "unsigned long long *|u64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|u16 *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_CuRand,
  &_swigt__p_Cublas,
  &_swigt__p_CublasAtomicsMode,
  &_swigt__p_CublasMathMode,
  &_swigt__p_CublasPointerMode,
  &_swigt__p_CudaStream,
  &_swigt__p_SchemaMemory,
  &_swigt__p_Viper__MatrixT_double_t,
  &_swigt__p_Viper__MatrixT_float_t,
  &_swigt__p_Viper__VectorT_double_t,
  &_swigt__p_Viper__VectorT_float_t,
  &_swigt__p___half,
  &_swigt__p_cuComplex,
  &_swigt__p_cuDoubleComplex,
  &_swigt__p_cublasAtomicsMode_t,
  &_swigt__p_cublasComputeType_t,
  &_swigt__p_cublasContext,
  &_swigt__p_cublasDiagType_t,
  &_swigt__p_cublasFillMode_t,
  &_swigt__p_cublasGemmAlgo_t,
  &_swigt__p_cublasMath_t,
  &_swigt__p_cublasOperation_t,
  &_swigt__p_cublasPointerMode_t,
  &_swigt__p_cublasSideMode_t,
  &_swigt__p_cublasStatus_t,
  &_swigt__p_cudaDataType_t,
  &_swigt__p_cudaStream_t,
  &_swigt__p_curandGenerator_t,
  &_swigt__p_double,
  &_swigt__p_f_float__float,
  &_swigt__p_f_p_q_const__char__void,
  &_swigt__p_f_r_q_const__float__float,
  &_swigt__p_fenv_t,
  &_swigt__p_fexcept_t,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_libraryPropertyType_t,
  &_swigt__p_long,
  &_swigt__p_long_long,
  &_swigt__p_p___half,
  &_swigt__p_p_cuComplex,
  &_swigt__p_p_cuDoubleComplex,
  &_swigt__p_p_cublasContext,
  &_swigt__p_p_double,
  &_swigt__p_p_f_p_q_const__char__void,
  &_swigt__p_p_float,
  &_swigt__p_p_void,
  &_swigt__p_pthread_mutex_t,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_std__complexT_double_t,
  &_swigt__p_std__complexT_float_t,
  &_swigt__p_std__gslice,
  &_swigt__p_std__gslice_arrayT_float_t,
  &_swigt__p_std__indirect_arrayT_float_t,
  &_swigt__p_std__initializer_listT_double_t,
  &_swigt__p_std__initializer_listT_float_t,
  &_swigt__p_std__mask_arrayT_float_t,
  &_swigt__p_std__multimapT_int_std__pairT_void_p_void_p_t_t,
  &_swigt__p_std__numeric_limitsT_double_t,
  &_swigt__p_std__numeric_limitsT_float_t,
  &_swigt__p_std__numeric_limitsT_int_t,
  &_swigt__p_std__numeric_limitsT_long_long_t,
  &_swigt__p_std__numeric_limitsT_long_t,
  &_swigt__p_std__numeric_limitsT_short_t,
  &_swigt__p_std__numeric_limitsT_unsigned_int_t,
  &_swigt__p_std__numeric_limitsT_unsigned_long_long_t,
  &_swigt__p_std__numeric_limitsT_unsigned_long_t,
  &_swigt__p_std__numeric_limitsT_unsigned_short_t,
  &_swigt__p_std__pairT_void_p_void_p_t,
  &_swigt__p_std__shared_ptrT_DevPtrT_double_t_t,
  &_swigt__p_std__shared_ptrT_DevPtrT_float_t_t,
  &_swigt__p_std__slice,
  &_swigt__p_std__slice_arrayT_float_t,
  &_swigt__p_std__valarrayT_float_t,
  &_swigt__p_std__vectorT_double_t,
  &_swigt__p_std__vectorT_float_t,
  &_swigt__p_std__vectorT_std__complexT_double_t_t,
  &_swigt__p_std__vectorT_std__complexT_float_t_t,
  &_swigt__p_std__vector_iteratorT_double_t,
  &_swigt__p_std__vector_iteratorT_float_t,
  &_swigt__p_std__vector_iteratorT_std__complexT_double_t_t,
  &_swigt__p_std__vector_iteratorT_std__complexT_float_t_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_CuRand[] = {  {&_swigt__p_CuRand, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Cublas[] = {  {&_swigt__p_Cublas, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CublasAtomicsMode[] = {  {&_swigt__p_CublasAtomicsMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CublasMathMode[] = {  {&_swigt__p_CublasMathMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CublasPointerMode[] = {  {&_swigt__p_CublasPointerMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CudaStream[] = {  {&_swigt__p_CudaStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SchemaMemory[] = {  {&_swigt__p_SchemaMemory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Viper__MatrixT_double_t[] = {  {&_swigt__p_Viper__MatrixT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Viper__MatrixT_float_t[] = {  {&_swigt__p_Viper__MatrixT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Viper__VectorT_double_t[] = {  {&_swigt__p_Viper__VectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Viper__VectorT_float_t[] = {  {&_swigt__p_Viper__VectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p___half[] = {  {&_swigt__p___half, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cuComplex[] = {  {&_swigt__p_cuComplex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cuDoubleComplex[] = {  {&_swigt__p_cuDoubleComplex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cublasAtomicsMode_t[] = {  {&_swigt__p_cublasAtomicsMode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cublasComputeType_t[] = {  {&_swigt__p_cublasComputeType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cublasContext[] = {  {&_swigt__p_cublasContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cublasDiagType_t[] = {  {&_swigt__p_cublasDiagType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cublasFillMode_t[] = {  {&_swigt__p_cublasFillMode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cublasGemmAlgo_t[] = {  {&_swigt__p_cublasGemmAlgo_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cublasMath_t[] = {  {&_swigt__p_cublasMath_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cublasOperation_t[] = {  {&_swigt__p_cublasOperation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cublasPointerMode_t[] = {  {&_swigt__p_cublasPointerMode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cublasSideMode_t[] = {  {&_swigt__p_cublasSideMode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cublasStatus_t[] = {  {&_swigt__p_cublasStatus_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cudaDataType_t[] = {  {&_swigt__p_cudaDataType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cudaStream_t[] = {  {&_swigt__p_cudaStream_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_curandGenerator_t[] = {  {&_swigt__p_curandGenerator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_float__float[] = {  {&_swigt__p_f_float__float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__char__void[] = {  {&_swigt__p_f_p_q_const__char__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_q_const__float__float[] = {  {&_swigt__p_f_r_q_const__float__float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fenv_t[] = {  {&_swigt__p_fenv_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fexcept_t[] = {  {&_swigt__p_fexcept_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_libraryPropertyType_t[] = {  {&_swigt__p_libraryPropertyType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p___half[] = {  {&_swigt__p_p___half, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cuComplex[] = {  {&_swigt__p_p_cuComplex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cuDoubleComplex[] = {  {&_swigt__p_p_cuDoubleComplex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_cublasContext[] = {  {&_swigt__p_p_cublasContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_double[] = {  {&_swigt__p_p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_f_p_q_const__char__void[] = {  {&_swigt__p_p_f_p_q_const__char__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_float[] = {  {&_swigt__p_p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pthread_mutex_t[] = {  {&_swigt__p_pthread_mutex_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_double_t[] = {  {&_swigt__p_std__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_float_t[] = {  {&_swigt__p_std__complexT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__gslice[] = {  {&_swigt__p_std__gslice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__gslice_arrayT_float_t[] = {  {&_swigt__p_std__gslice_arrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__indirect_arrayT_float_t[] = {  {&_swigt__p_std__indirect_arrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__initializer_listT_double_t[] = {  {&_swigt__p_std__initializer_listT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__initializer_listT_float_t[] = {  {&_swigt__p_std__initializer_listT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mask_arrayT_float_t[] = {  {&_swigt__p_std__mask_arrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__multimapT_int_std__pairT_void_p_void_p_t_t[] = {  {&_swigt__p_std__multimapT_int_std__pairT_void_p_void_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_double_t[] = {  {&_swigt__p_std__numeric_limitsT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_float_t[] = {  {&_swigt__p_std__numeric_limitsT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_int_t[] = {  {&_swigt__p_std__numeric_limitsT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_long_long_t[] = {  {&_swigt__p_std__numeric_limitsT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_long_t[] = {  {&_swigt__p_std__numeric_limitsT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_short_t[] = {  {&_swigt__p_std__numeric_limitsT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_int_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_long_long_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_long_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_short_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_void_p_void_p_t[] = {  {&_swigt__p_std__pairT_void_p_void_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_DevPtrT_double_t_t[] = {  {&_swigt__p_std__shared_ptrT_DevPtrT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_DevPtrT_float_t_t[] = {  {&_swigt__p_std__shared_ptrT_DevPtrT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__slice[] = {  {&_swigt__p_std__slice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__slice_arrayT_float_t[] = {  {&_swigt__p_std__slice_arrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__valarrayT_float_t[] = {  {&_swigt__p_std__valarrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t[] = {  {&_swigt__p_std__vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_t[] = {  {&_swigt__p_std__vectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__complexT_double_t_t[] = {  {&_swigt__p_std__vectorT_std__complexT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__complexT_float_t_t[] = {  {&_swigt__p_std__vectorT_std__complexT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_double_t[] = {  {&_swigt__p_std__vector_iteratorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_float_t[] = {  {&_swigt__p_std__vector_iteratorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_std__complexT_double_t_t[] = {  {&_swigt__p_std__vector_iteratorT_std__complexT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_std__complexT_float_t_t[] = {  {&_swigt__p_std__vector_iteratorT_std__complexT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_CuRand,
  _swigc__p_Cublas,
  _swigc__p_CublasAtomicsMode,
  _swigc__p_CublasMathMode,
  _swigc__p_CublasPointerMode,
  _swigc__p_CudaStream,
  _swigc__p_SchemaMemory,
  _swigc__p_Viper__MatrixT_double_t,
  _swigc__p_Viper__MatrixT_float_t,
  _swigc__p_Viper__VectorT_double_t,
  _swigc__p_Viper__VectorT_float_t,
  _swigc__p___half,
  _swigc__p_cuComplex,
  _swigc__p_cuDoubleComplex,
  _swigc__p_cublasAtomicsMode_t,
  _swigc__p_cublasComputeType_t,
  _swigc__p_cublasContext,
  _swigc__p_cublasDiagType_t,
  _swigc__p_cublasFillMode_t,
  _swigc__p_cublasGemmAlgo_t,
  _swigc__p_cublasMath_t,
  _swigc__p_cublasOperation_t,
  _swigc__p_cublasPointerMode_t,
  _swigc__p_cublasSideMode_t,
  _swigc__p_cublasStatus_t,
  _swigc__p_cudaDataType_t,
  _swigc__p_cudaStream_t,
  _swigc__p_curandGenerator_t,
  _swigc__p_double,
  _swigc__p_f_float__float,
  _swigc__p_f_p_q_const__char__void,
  _swigc__p_f_r_q_const__float__float,
  _swigc__p_fenv_t,
  _swigc__p_fexcept_t,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_libraryPropertyType_t,
  _swigc__p_long,
  _swigc__p_long_long,
  _swigc__p_p___half,
  _swigc__p_p_cuComplex,
  _swigc__p_p_cuDoubleComplex,
  _swigc__p_p_cublasContext,
  _swigc__p_p_double,
  _swigc__p_p_f_p_q_const__char__void,
  _swigc__p_p_float,
  _swigc__p_p_void,
  _swigc__p_pthread_mutex_t,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_std__complexT_double_t,
  _swigc__p_std__complexT_float_t,
  _swigc__p_std__gslice,
  _swigc__p_std__gslice_arrayT_float_t,
  _swigc__p_std__indirect_arrayT_float_t,
  _swigc__p_std__initializer_listT_double_t,
  _swigc__p_std__initializer_listT_float_t,
  _swigc__p_std__mask_arrayT_float_t,
  _swigc__p_std__multimapT_int_std__pairT_void_p_void_p_t_t,
  _swigc__p_std__numeric_limitsT_double_t,
  _swigc__p_std__numeric_limitsT_float_t,
  _swigc__p_std__numeric_limitsT_int_t,
  _swigc__p_std__numeric_limitsT_long_long_t,
  _swigc__p_std__numeric_limitsT_long_t,
  _swigc__p_std__numeric_limitsT_short_t,
  _swigc__p_std__numeric_limitsT_unsigned_int_t,
  _swigc__p_std__numeric_limitsT_unsigned_long_long_t,
  _swigc__p_std__numeric_limitsT_unsigned_long_t,
  _swigc__p_std__numeric_limitsT_unsigned_short_t,
  _swigc__p_std__pairT_void_p_void_p_t,
  _swigc__p_std__shared_ptrT_DevPtrT_double_t_t,
  _swigc__p_std__shared_ptrT_DevPtrT_float_t_t,
  _swigc__p_std__slice,
  _swigc__p_std__slice_arrayT_float_t,
  _swigc__p_std__valarrayT_float_t,
  _swigc__p_std__vectorT_double_t,
  _swigc__p_std__vectorT_float_t,
  _swigc__p_std__vectorT_std__complexT_double_t_t,
  _swigc__p_std__vectorT_std__complexT_float_t_t,
  _swigc__p_std__vector_iteratorT_double_t,
  _swigc__p_std__vector_iteratorT_float_t,
  _swigc__p_std__vector_iteratorT_std__complexT_double_t_t,
  _swigc__p_std__vector_iteratorT_std__complexT_float_t_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

