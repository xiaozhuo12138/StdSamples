/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  do { if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } } while (0)


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all its bases (recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metamethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows skipping searching metamethod in the given class and immediately going to searching in bases. skip_check
 * is not carried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metamethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result = 0;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_AmplifierProcessor swig_types[0]
#define SWIGTYPE_p_Dsp__Bessel__BandPassT_32_t swig_types[1]
#define SWIGTYPE_p_Dsp__Bessel__BandStopT_32_t swig_types[2]
#define SWIGTYPE_p_Dsp__Bessel__HighPassT_32_t swig_types[3]
#define SWIGTYPE_p_Dsp__Bessel__LowPassT_32_t swig_types[4]
#define SWIGTYPE_p_Dsp__Butterworth__BandPassT_32_t swig_types[5]
#define SWIGTYPE_p_Dsp__Butterworth__BandShelfT_32_t swig_types[6]
#define SWIGTYPE_p_Dsp__Butterworth__BandStopT_32_t swig_types[7]
#define SWIGTYPE_p_Dsp__Butterworth__HighPassT_32_t swig_types[8]
#define SWIGTYPE_p_Dsp__Butterworth__HighShelfT_32_t swig_types[9]
#define SWIGTYPE_p_Dsp__Butterworth__LowPassT_32_t swig_types[10]
#define SWIGTYPE_p_Dsp__Butterworth__LowShelfT_32_t swig_types[11]
#define SWIGTYPE_p_Dsp__ChebyshevII__BandPassT_32_t swig_types[12]
#define SWIGTYPE_p_Dsp__ChebyshevII__BandShelfT_32_t swig_types[13]
#define SWIGTYPE_p_Dsp__ChebyshevII__BandStopT_32_t swig_types[14]
#define SWIGTYPE_p_Dsp__ChebyshevII__HighPassT_32_t swig_types[15]
#define SWIGTYPE_p_Dsp__ChebyshevII__HighShelfT_32_t swig_types[16]
#define SWIGTYPE_p_Dsp__ChebyshevII__LowPassT_32_t swig_types[17]
#define SWIGTYPE_p_Dsp__ChebyshevII__LowShelfT_32_t swig_types[18]
#define SWIGTYPE_p_Dsp__ChebyshevI__BandPassT_32_t swig_types[19]
#define SWIGTYPE_p_Dsp__ChebyshevI__BandShelfT_32_t swig_types[20]
#define SWIGTYPE_p_Dsp__ChebyshevI__BandStopT_32_t swig_types[21]
#define SWIGTYPE_p_Dsp__ChebyshevI__HighPassT_32_t swig_types[22]
#define SWIGTYPE_p_Dsp__ChebyshevI__HighShelfT_32_t swig_types[23]
#define SWIGTYPE_p_Dsp__ChebyshevI__LowPassT_32_t swig_types[24]
#define SWIGTYPE_p_Dsp__ChebyshevI__LowShelfT_32_t swig_types[25]
#define SWIGTYPE_p_Dsp__Legendre__BandPassT_32_t swig_types[26]
#define SWIGTYPE_p_Dsp__Legendre__BandStopT_32_t swig_types[27]
#define SWIGTYPE_p_Dsp__Legendre__HighPassT_32_t swig_types[28]
#define SWIGTYPE_p_Dsp__Legendre__LowPassT_32_t swig_types[29]
#define SWIGTYPE_p_Dsp__RBJ__AllPass swig_types[30]
#define SWIGTYPE_p_Dsp__RBJ__BandPass1 swig_types[31]
#define SWIGTYPE_p_Dsp__RBJ__BandPass2 swig_types[32]
#define SWIGTYPE_p_Dsp__RBJ__BandShelf swig_types[33]
#define SWIGTYPE_p_Dsp__RBJ__BandStop swig_types[34]
#define SWIGTYPE_p_Dsp__RBJ__HighPass swig_types[35]
#define SWIGTYPE_p_Dsp__RBJ__HighShelf swig_types[36]
#define SWIGTYPE_p_Dsp__RBJ__LowPass swig_types[37]
#define SWIGTYPE_p_Dsp__RBJ__LowShelf swig_types[38]
#define SWIGTYPE_p_FilterProcessor swig_types[39]
#define SWIGTYPE_p_Filters__BiquadFilter swig_types[40]
#define SWIGTYPE_p_Filters__BiquadFilterCascader swig_types[41]
#define SWIGTYPE_p_Filters__BiquadParallelFilters swig_types[42]
#define SWIGTYPE_p_Filters__BiquadSection swig_types[43]
#define SWIGTYPE_p_Filters__BiquadTransposedTypeI swig_types[44]
#define SWIGTYPE_p_Filters__BiquadTransposedTypeICascade swig_types[45]
#define SWIGTYPE_p_Filters__BiquadTransposedTypeII swig_types[46]
#define SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade swig_types[47]
#define SWIGTYPE_p_Filters__BiquadTypeI swig_types[48]
#define SWIGTYPE_p_Filters__BiquadTypeICascade swig_types[49]
#define SWIGTYPE_p_Filters__BiquadTypeII swig_types[50]
#define SWIGTYPE_p_Filters__BiquadTypeIICascade swig_types[51]
#define SWIGTYPE_p_Filters__FilterBase swig_types[52]
#define SWIGTYPE_p_Filters__FilterCoefficients swig_types[53]
#define SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter swig_types[54]
#define SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter swig_types[55]
#define SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter swig_types[56]
#define SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter swig_types[57]
#define SWIGTYPE_p_Filters__IIR__Biquad__Biquad swig_types[58]
#define SWIGTYPE_p_Filters__IIR__Biquad__Parameters swig_types[59]
#define SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter swig_types[60]
#define SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db swig_types[61]
#define SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter swig_types[62]
#define SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db swig_types[63]
#define SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter swig_types[64]
#define SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db swig_types[65]
#define SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter swig_types[66]
#define SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassFilter12db swig_types[67]
#define SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter swig_types[68]
#define SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db swig_types[69]
#define SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter swig_types[70]
#define SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db swig_types[71]
#define SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter swig_types[72]
#define SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter swig_types[73]
#define SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter swig_types[74]
#define SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter swig_types[75]
#define SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter swig_types[76]
#define SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter swig_types[77]
#define SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter swig_types[78]
#define SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevIILowPassFilter12db swig_types[79]
#define SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevILowPassFilter12db swig_types[80]
#define SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter swig_types[81]
#define SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter swig_types[82]
#define SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter swig_types[83]
#define SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter swig_types[84]
#define SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter swig_types[85]
#define SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter swig_types[86]
#define SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter swig_types[87]
#define SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter swig_types[88]
#define SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter swig_types[89]
#define SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter swig_types[90]
#define SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter swig_types[91]
#define SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter swig_types[92]
#define SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter swig_types[93]
#define SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter swig_types[94]
#define SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter swig_types[95]
#define SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter swig_types[96]
#define SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter swig_types[97]
#define SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter swig_types[98]
#define SWIGTYPE_p_Filters__IIR__Nigel__Biquad swig_types[99]
#define SWIGTYPE_p_Filters__IIR__RBJFilters__RBJAllPassFilter swig_types[100]
#define SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandPassFilter swig_types[101]
#define SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandStopFilter swig_types[102]
#define SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter swig_types[103]
#define SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighPassFilter swig_types[104]
#define SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighShelfFilter swig_types[105]
#define SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowPassFilter swig_types[106]
#define SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowShelfFilter swig_types[107]
#define SWIGTYPE_p_Filters__IIR__RBJFilters__RBJPeakFilter swig_types[108]
#define SWIGTYPE_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter swig_types[109]
#define SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter swig_types[110]
#define SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter swig_types[111]
#define SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter swig_types[112]
#define SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter swig_types[113]
#define SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter swig_types[114]
#define SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter swig_types[115]
#define SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter swig_types[116]
#define SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter swig_types[117]
#define SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter swig_types[118]
#define SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter swig_types[119]
#define SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter swig_types[120]
#define SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter swig_types[121]
#define SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter swig_types[122]
#define SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter swig_types[123]
#define SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter swig_types[124]
#define SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter swig_types[125]
#define SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter swig_types[126]
#define SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter swig_types[127]
#define SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter swig_types[128]
#define SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter swig_types[129]
#define SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter swig_types[130]
#define SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter swig_types[131]
#define SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter swig_types[132]
#define SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter swig_types[133]
#define SWIGTYPE_p_FunctionProcessor swig_types[134]
#define SWIGTYPE_p_GeneratorProcessor swig_types[135]
#define SWIGTYPE_p_MixerProcessor swig_types[136]
#define SWIGTYPE_p_MonoAdderOperatorProcessor swig_types[137]
#define SWIGTYPE_p_MonoBlendOperatorProcessor swig_types[138]
#define SWIGTYPE_p_MonoCascadeOperatorProcessor swig_types[139]
#define SWIGTYPE_p_MonoCascadeProcessor swig_types[140]
#define SWIGTYPE_p_MonoDownsampleProcessor swig_types[141]
#define SWIGTYPE_p_MonoFXProcessor swig_types[142]
#define SWIGTYPE_p_MonoModulatorOperatorProcessor swig_types[143]
#define SWIGTYPE_p_MonoMultiplierOperatorProcessor swig_types[144]
#define SWIGTYPE_p_MonoOperatorProcessor swig_types[145]
#define SWIGTYPE_p_MonoOversampleProcessor swig_types[146]
#define SWIGTYPE_p_MonoProcessor swig_types[147]
#define SWIGTYPE_p_MonoSubtractorOperatorProcessor swig_types[148]
#define SWIGTYPE_p_MonoUpsampleProcessor swig_types[149]
#define SWIGTYPE_p_OperatorProcessor swig_types[150]
#define SWIGTYPE_p_OscillatorProcessor swig_types[151]
#define SWIGTYPE_p_Parameter2Processor swig_types[152]
#define SWIGTYPE_p_Port swig_types[153]
#define SWIGTYPE_p_PortMap swig_types[154]
#define SWIGTYPE_p_Ports swig_types[155]
#define SWIGTYPE_p_Random swig_types[156]
#define SWIGTYPE_p_SignalSinkProcessor swig_types[157]
#define SWIGTYPE_p_SignalSourceProcessor swig_types[158]
#define SWIGTYPE_p_SoundProcessor swig_types[159]
#define SWIGTYPE_p_SpectrumProcessor swig_types[160]
#define SWIGTYPE_p_Std__RandomMersenne swig_types[161]
#define SWIGTYPE_p_StereoAmplifierProcessor swig_types[162]
#define SWIGTYPE_p_StereoCascadeProcessor swig_types[163]
#define SWIGTYPE_p_StereoFXProcessor swig_types[164]
#define SWIGTYPE_p_StereoFilterProcessor swig_types[165]
#define SWIGTYPE_p_StereoFunctionProcessor swig_types[166]
#define SWIGTYPE_p_StereoGeneratorProcessor swig_types[167]
#define SWIGTYPE_p_StereoOscillatorProcessor swig_types[168]
#define SWIGTYPE_p_StereoProcessor swig_types[169]
#define SWIGTYPE_p_StereoSplitterProcessor swig_types[170]
#define SWIGTYPE_p_double swig_types[171]
#define SWIGTYPE_p_f_float__float swig_types[172]
#define SWIGTYPE_p_f_r_q_const__float__float swig_types[173]
#define SWIGTYPE_p_fenv_t swig_types[174]
#define SWIGTYPE_p_fexcept_t swig_types[175]
#define SWIGTYPE_p_float swig_types[176]
#define SWIGTYPE_p_int swig_types[177]
#define SWIGTYPE_p_long swig_types[178]
#define SWIGTYPE_p_long_long swig_types[179]
#define SWIGTYPE_p_p_AmplifierProcessor swig_types[180]
#define SWIGTYPE_p_p_FilterProcessor swig_types[181]
#define SWIGTYPE_p_p_Filters__BiquadFilter swig_types[182]
#define SWIGTYPE_p_p_Filters__BiquadTransposedTypeI swig_types[183]
#define SWIGTYPE_p_p_Filters__BiquadTransposedTypeICascade swig_types[184]
#define SWIGTYPE_p_p_Filters__BiquadTransposedTypeII swig_types[185]
#define SWIGTYPE_p_p_Filters__BiquadTransposedTypeIICascade swig_types[186]
#define SWIGTYPE_p_p_Filters__BiquadTypeI swig_types[187]
#define SWIGTYPE_p_p_Filters__BiquadTypeICascade swig_types[188]
#define SWIGTYPE_p_p_Filters__BiquadTypeII swig_types[189]
#define SWIGTYPE_p_p_Filters__BiquadTypeIICascade swig_types[190]
#define SWIGTYPE_p_p_Filters__FilterBase swig_types[191]
#define SWIGTYPE_p_p_Filters__IIR__Bessel__BandPassFilter swig_types[192]
#define SWIGTYPE_p_p_Filters__IIR__Bessel__BandStopFilter swig_types[193]
#define SWIGTYPE_p_p_Filters__IIR__Bessel__HighPassFilter swig_types[194]
#define SWIGTYPE_p_p_Filters__IIR__Bessel__LowPassFilter swig_types[195]
#define SWIGTYPE_p_p_Filters__IIR__Biquad__Biquad swig_types[196]
#define SWIGTYPE_p_p_Filters__IIR__Butterworth__BandPassFilter swig_types[197]
#define SWIGTYPE_p_p_Filters__IIR__Butterworth__BandShelfFilter swig_types[198]
#define SWIGTYPE_p_p_Filters__IIR__Butterworth__BandStopFilter swig_types[199]
#define SWIGTYPE_p_p_Filters__IIR__Butterworth__HighPassFilter swig_types[200]
#define SWIGTYPE_p_p_Filters__IIR__Butterworth__HighShelfFilter swig_types[201]
#define SWIGTYPE_p_p_Filters__IIR__Butterworth__LowPassFilter swig_types[202]
#define SWIGTYPE_p_p_Filters__IIR__Butterworth__LowShelfFilter swig_types[203]
#define SWIGTYPE_p_p_Filters__IIR__ChebyshevII__BandPassFilter swig_types[204]
#define SWIGTYPE_p_p_Filters__IIR__ChebyshevII__BandShelfFilter swig_types[205]
#define SWIGTYPE_p_p_Filters__IIR__ChebyshevII__BandStopFilter swig_types[206]
#define SWIGTYPE_p_p_Filters__IIR__ChebyshevII__HighPassFilter swig_types[207]
#define SWIGTYPE_p_p_Filters__IIR__ChebyshevII__HighShelfFilter swig_types[208]
#define SWIGTYPE_p_p_Filters__IIR__ChebyshevII__LowPassFilter swig_types[209]
#define SWIGTYPE_p_p_Filters__IIR__ChebyshevII__LowShelfFilter swig_types[210]
#define SWIGTYPE_p_p_Filters__IIR__ChebyshevI__BandPassFilter swig_types[211]
#define SWIGTYPE_p_p_Filters__IIR__ChebyshevI__BandShelfFilter swig_types[212]
#define SWIGTYPE_p_p_Filters__IIR__ChebyshevI__BandStopFilter swig_types[213]
#define SWIGTYPE_p_p_Filters__IIR__ChebyshevI__HighPassFilter swig_types[214]
#define SWIGTYPE_p_p_Filters__IIR__ChebyshevI__HighShelfFilter swig_types[215]
#define SWIGTYPE_p_p_Filters__IIR__ChebyshevI__LowPassFilter swig_types[216]
#define SWIGTYPE_p_p_Filters__IIR__ChebyshevI__LowShelfFilter swig_types[217]
#define SWIGTYPE_p_p_Filters__IIR__Legendre__BandPassFilter swig_types[218]
#define SWIGTYPE_p_p_Filters__IIR__Legendre__BandStopFilter swig_types[219]
#define SWIGTYPE_p_p_Filters__IIR__Legendre__HighPassFilter swig_types[220]
#define SWIGTYPE_p_p_Filters__IIR__Legendre__LowPassFilter swig_types[221]
#define SWIGTYPE_p_p_Filters__IIR__RBJFilters__RBJAllPassFilter swig_types[222]
#define SWIGTYPE_p_p_Filters__IIR__RBJFilters__RBJBandPassFilter swig_types[223]
#define SWIGTYPE_p_p_Filters__IIR__RBJFilters__RBJBandStopFilter swig_types[224]
#define SWIGTYPE_p_p_Filters__IIR__RBJFilters__RBJBiquadFilter swig_types[225]
#define SWIGTYPE_p_p_Filters__IIR__RBJFilters__RBJHighPassFilter swig_types[226]
#define SWIGTYPE_p_p_Filters__IIR__RBJFilters__RBJHighShelfFilter swig_types[227]
#define SWIGTYPE_p_p_Filters__IIR__RBJFilters__RBJLowPassFilter swig_types[228]
#define SWIGTYPE_p_p_Filters__IIR__RBJFilters__RBJLowShelfFilter swig_types[229]
#define SWIGTYPE_p_p_Filters__IIR__RBJFilters__RBJPeakFilter swig_types[230]
#define SWIGTYPE_p_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter swig_types[231]
#define SWIGTYPE_p_p_Filters__IIR__RBJ__AllPassFilter swig_types[232]
#define SWIGTYPE_p_p_Filters__IIR__RBJ__BandPass1Filter swig_types[233]
#define SWIGTYPE_p_p_Filters__IIR__RBJ__BandPass2Filter swig_types[234]
#define SWIGTYPE_p_p_Filters__IIR__RBJ__BandShelfFilter swig_types[235]
#define SWIGTYPE_p_p_Filters__IIR__RBJ__BandStopFilter swig_types[236]
#define SWIGTYPE_p_p_Filters__IIR__RBJ__HighPassFilter swig_types[237]
#define SWIGTYPE_p_p_Filters__IIR__RBJ__HighShelfFilter swig_types[238]
#define SWIGTYPE_p_p_Filters__IIR__RBJ__LowPassFilter swig_types[239]
#define SWIGTYPE_p_p_Filters__IIR__RBJ__LowShelfFilter swig_types[240]
#define SWIGTYPE_p_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter swig_types[241]
#define SWIGTYPE_p_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter swig_types[242]
#define SWIGTYPE_p_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter swig_types[243]
#define SWIGTYPE_p_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter swig_types[244]
#define SWIGTYPE_p_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter swig_types[245]
#define SWIGTYPE_p_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter swig_types[246]
#define SWIGTYPE_p_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter swig_types[247]
#define SWIGTYPE_p_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter swig_types[248]
#define SWIGTYPE_p_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter swig_types[249]
#define SWIGTYPE_p_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter swig_types[250]
#define SWIGTYPE_p_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter swig_types[251]
#define SWIGTYPE_p_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter swig_types[252]
#define SWIGTYPE_p_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter swig_types[253]
#define SWIGTYPE_p_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter swig_types[254]
#define SWIGTYPE_p_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter swig_types[255]
#define SWIGTYPE_p_p_FunctionProcessor swig_types[256]
#define SWIGTYPE_p_p_float swig_types[257]
#define SWIGTYPE_p_short swig_types[258]
#define SWIGTYPE_p_signed_char swig_types[259]
#define SWIGTYPE_p_std__complexT_double_t swig_types[260]
#define SWIGTYPE_p_std__complexT_float_t swig_types[261]
#define SWIGTYPE_p_std__gslice swig_types[262]
#define SWIGTYPE_p_std__gslice_arrayT_float_t swig_types[263]
#define SWIGTYPE_p_std__indirect_arrayT_float_t swig_types[264]
#define SWIGTYPE_p_std__listT_MonoProcessor_p_t swig_types[265]
#define SWIGTYPE_p_std__listT_SoundProcessor_p_t swig_types[266]
#define SWIGTYPE_p_std__listT_StereoProcessor_p_t swig_types[267]
#define SWIGTYPE_p_std__listT_std__shared_ptrT_Port_t_t swig_types[268]
#define SWIGTYPE_p_std__mapT_std__string_MonoProcessor_p_t swig_types[269]
#define SWIGTYPE_p_std__mapT_std__string_Port_p_t swig_types[270]
#define SWIGTYPE_p_std__mapT_std__string_SoundProcessor_p_t swig_types[271]
#define SWIGTYPE_p_std__mapT_std__string_StereoProcessor_p_t swig_types[272]
#define SWIGTYPE_p_std__mask_arrayT_float_t swig_types[273]
#define SWIGTYPE_p_std__numeric_limitsT_double_t swig_types[274]
#define SWIGTYPE_p_std__numeric_limitsT_float_t swig_types[275]
#define SWIGTYPE_p_std__numeric_limitsT_int_t swig_types[276]
#define SWIGTYPE_p_std__numeric_limitsT_long_long_t swig_types[277]
#define SWIGTYPE_p_std__numeric_limitsT_long_t swig_types[278]
#define SWIGTYPE_p_std__numeric_limitsT_short_t swig_types[279]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t swig_types[280]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t swig_types[281]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t swig_types[282]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t swig_types[283]
#define SWIGTYPE_p_std__slice swig_types[284]
#define SWIGTYPE_p_std__slice_arrayT_float_t swig_types[285]
#define SWIGTYPE_p_std__string swig_types[286]
#define SWIGTYPE_p_std__valarrayT_float_t swig_types[287]
#define SWIGTYPE_p_std__vectorT_Filters__BiquadFilter_p_t swig_types[288]
#define SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t swig_types[289]
#define SWIGTYPE_p_std__vectorT_Filters__BiquadTransposedTypeII_t swig_types[290]
#define SWIGTYPE_p_std__vectorT_Filters__BiquadTransposedTypeI_t swig_types[291]
#define SWIGTYPE_p_std__vectorT_Filters__BiquadTypeII_t swig_types[292]
#define SWIGTYPE_p_std__vectorT_Filters__BiquadTypeI_t swig_types[293]
#define SWIGTYPE_p_std__vectorT_MonoProcessor_p_t swig_types[294]
#define SWIGTYPE_p_std__vectorT_OscillatorProcessor_p_t swig_types[295]
#define SWIGTYPE_p_std__vectorT_SoundProcessor_p_t swig_types[296]
#define SWIGTYPE_p_std__vectorT_StereoProcessor_p_t swig_types[297]
#define SWIGTYPE_p_std__vectorT_double_t swig_types[298]
#define SWIGTYPE_p_std__vectorT_float_t swig_types[299]
#define SWIGTYPE_p_std__vectorT_std__complexT_double_t_t swig_types[300]
#define SWIGTYPE_p_std__vectorT_std__complexT_float_t_t swig_types[301]
#define SWIGTYPE_p_std__vector_iteratorT_double_t swig_types[302]
#define SWIGTYPE_p_std__vector_iteratorT_float_t swig_types[303]
#define SWIGTYPE_p_std__vector_iteratorT_std__complexT_double_t_t swig_types[304]
#define SWIGTYPE_p_std__vector_iteratorT_std__complexT_float_t_t swig_types[305]
#define SWIGTYPE_p_unsigned_char swig_types[306]
#define SWIGTYPE_p_unsigned_int swig_types[307]
#define SWIGTYPE_p_unsigned_long swig_types[308]
#define SWIGTYPE_p_unsigned_long_long swig_types[309]
#define SWIGTYPE_p_unsigned_short swig_types[310]
static swig_type_info *swig_types[312];
static swig_module_info swig_module = {swig_types, 311, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "Filters"
#define SWIG_init      luaopen_Filters
#define SWIG_init_user luaopen_Filters_user

#define SWIG_LUACODE   luaopen_Filters_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


typedef float DspFloatType;
#include "SoundObject.hpp"

#include <cassert>
#include <random>
#include <chrono>
#include <complex>
#include <cstdio>
#include <cstring>
#include <cstdlib>



//#include "Filters/FIR.hpp"
//#include "Filters/FIRFilter.hpp"
//#include "Filters/FIRFilters.hpp"
#include "Filters/FIRFrequencySampling.hpp"
#include "Filters/FIROctaveFilters.hpp"
#include "Filters/FIRpm.hpp"
#include "Filters/FIRSincFilter.hpp"
#include "Filters/FIRSpuceFilters.hpp"

#include "Filters/IIRFilters.hpp"
#include "Filters/IIRAnalog.hpp"
#include "Filters/IIRAnalogFilter.hpp"

#include "Filters/IIRBesselFilters.hpp"
#include "Filters/IIRBiquadFilters.hpp"
#include "Filters/IIRButterworth.hpp"
#include "Filters/IIRChebyshevFilters.hpp"
#include "Filters/IIRDCBlock.hpp"
#include "Filters/IIRDCFilter.hpp"
#include "Filters/IIRRBJFilters.hpp"
#include "Filters/IIRZolzerFilter.hpp"


/* these are DspFilters now */
#include "Filters/IIRBesselFilterProcessor.hpp"
#include "Filters/IIRButterworthFilterProcessor.hpp"
#include "Filters/IIRChebyshev2FilterProcessors.hpp"
#include "Filters/IIRChebyshevFilterProcessors.hpp"
#include "Filters/IIREllipticalFilterProcessor.hpp"
#include "Filters/IIROptimalLFilterProcessor.hpp"
#include "Filters/IIRRbjFilterProcessor.hpp"


//#include "Filters/IIREllipticalFilters.hpp"
//#include "Filters/IIRGammaFilters.hpp"
//#include "Filters/IIROctaveFilters.hpp"
//#include "Filters/IIRStkFilters.hpp"



#include <stdint.h>		// Use the C99 official header


#include <complex>
#include <valarray>
#include <fenv.h>


#include <complex>


#include <valarray>
#include <algorithm>

SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____add____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self + b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____sub____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self - b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____div____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self / b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____mul____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self * b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____pow____SWIG_0(std::complex< float > *self,std::complex< float > const &b){ return std::pow(*self,b); }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____pow____SWIG_1(std::complex< float > *self,float const &b){ return std::pow(*self,b); }
SWIGINTERN bool std_complex_Sl_float_Sg____eq____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self == b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____add____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self + b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____sub____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self - b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____div____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self / b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____mul____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self * b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____pow____SWIG_0(std::complex< double > *self,std::complex< double > const &b){ return std::pow(*self,b); }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____pow____SWIG_1(std::complex< double > *self,double const &b){ return std::pow(*self,b); }
SWIGINTERN bool std_complex_Sl_double_Sg____eq____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self == b; }
SWIGINTERN float std_valarray_Sl_float_Sg____getitem____SWIG_0(std::valarray< float > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_valarray_Sl_float_Sg____setitem____SWIG_0(std::valarray< float > *self,size_t i,float const &v){ (*self)[i-1] = v; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____getitem____SWIG_1(std::valarray< float > *self,std::gslice const &i){ return (*self)[i]; }
SWIGINTERN void std_valarray_Sl_float_Sg____setitem____SWIG_1(std::valarray< float > *self,std::gslice const &i,float const &v){ (*self)[i] = v; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____getitem____SWIG_2(std::valarray< float > *self,std::slice const &i){ return (*self)[i]; }
SWIGINTERN void std_valarray_Sl_float_Sg____setitem____SWIG_2(std::valarray< float > *self,std::slice const &i,float const &v){ (*self)[i] = v; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____add____SWIG(std::valarray< float > *self,std::valarray< float > const &b){ return *self + b; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____sub____SWIG(std::valarray< float > *self,std::valarray< float > const &b){ return *self - b; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____mul____SWIG(std::valarray< float > *self,std::valarray< float > const &b){ return *self * b; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____div____SWIG(std::valarray< float > *self,std::valarray< float > const &b){ return *self / b; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____unm____SWIG(std::valarray< float > *self,std::valarray< float > const &b){ return -*self; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____pow____SWIG_0(std::valarray< float > *self,std::valarray< float > const &b){ return std::pow(*self,b); }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____pow____SWIG_1(std::valarray< float > *self,float const &b){ return std::pow(*self,b); }

#include <limits>



    typedef float f32;
    typedef double f64;
    typedef signed char i8;
    typedef unsigned char u8;
    typedef signed short i16;
    typedef unsigned short u16;
    typedef signed int i32;
    typedef unsigned int u32;
    typedef signed long ilong;
    typedef unsigned long ulong;
    typedef signed long long i64;
    typedef unsigned long long u64;
    
    
    
    
    template<typename T> T abs(const T& x) { return std::abs(x); }
    template<typename T> T fabs(const T& x) { return std::fabs(x); }
    template<typename T> T acos(const T& x) { return std::acos(x); }
    template<typename T> T acosh(const T& x) { return std::acosh(x); }
    template<typename T> T asinh(const T& x) { return std::asinh(x); }
    template<typename T> T asin(const T& x) { return std::asinh(x); }
    template<typename T> T atan(const T& x) { return std::atan(x); }
    template<typename T> T atan2(const T& x,const T& y) { return std::atan2(x,y); }
    template<typename T> T atanh(const T& x) { return std::atanh(x); }
    template<typename T> T cbrt(const T& x) { return std::cbrt(x); }
    template<typename T> T ceil(const T& x) { return std::ceil(x); }    
    template<typename T> T copysign(const T& x, const T& y) { return std::copysign(x,y); }
    template<typename T> T cos(const T& x) { return std::cos(x); }
    template<typename T> T cosh(const T& x) { return std::cosh(x); }
    template<typename T> T erf(const T& x) { return std::erf(x); }
    template<typename T> T erfc(const T& x) { return std::erfc(x); }
    template<typename T> T exp(const T& x) { return std::exp(x); }
    template<typename T> T exp2(const T& x) { return std::exp2(x); }
    template<typename T> T expm1(const T& x) { return std::expm1(x); }
    template<typename T> T fdim(const T & x, const T & y) { return std::fdim(x,y); }
    template<typename T> T floor(const T & x) { return std::floor(x); }
    template<typename T> T fma(const T & x, const T & y, const T& z) { return std::fma(x,y,z); }
    template<typename T> T fmax(const T & x, const T & y) { return std::fmax(x,y); }
    template<typename T> T fmin(const T & x, const T & y) { return std::fmax(x,y); }
    template<typename T> T fmod(const T & x, const T & y) { return std::fmod(x,y); }
    template<typename T> int fpclassify(const T & x) { return std::fpclassify(x); }
    template<typename T> T hypot(const T & x, const T & y) { return std::hypot(x,y); }
    template<typename T> int ilogb(const T & x) { return std::ilogb(x); }
    template<typename T> bool isfinite(const T & x) { return std::isfinite(x); }
    template<typename T> bool isgreater(const T & x, const T & y) { return std::isgreater(x,y); }
    template<typename T> bool isgreaterequal(const T & x, const T & y) { return std::isgreaterequal(x,y); }
    template<typename T> bool isinf(const T & x) { return std::isinf(x); }
    template<typename T> bool isless(const T & x, const T & y) { return std::isless(x,y); }
    template<typename T> bool islessequal(const T & x, const T & y) { return std::islessequal(x,y); }
    template<typename T> bool islessgreater(const T & x, const T & y) { return std::islessgreater(x,y); }
    template<typename T> bool isnan(const T & x) { return std::isnan(x); }
    template<typename T> bool isnormal(const T & x) { return std::isnormal(x); }
    template<typename T> bool isunordered(const T & x, const T& y) { return std::isunordered(x,y); }
    template<typename T> T ldexp(const T & x, int exp) { return std::ldexp(x,exp); }
    template<typename T> T lgamma(const T & x) { return std::lgamma(x); }
    template<typename T> T llrint(const T & x) { return std::llrint(x); }
    template<typename T> T llround(const T & x) { return std::llround(x); }
    template<typename T> T log(const T & x) { return std::log(x); }
    template<typename T> T log10(const T & x) { return std::log10(x); }
    template<typename T> T log1p(const T & x) { return std::log1p(x); }
    template<typename T> T log2(const T & x) { return std::log2(x); }
    template<typename T> T logb(const T & x) { return std::logb(x); }
    template<typename T> T lrint(const T & x) { return std::lrint(x); }
    template<typename T> T lround(const T & x) { return std::lround(x); }
    template<typename T> T nan(const char *tagp) { return std::nan(tagp);}
    template<typename T> T nanf(const char *tagp) { return std::nanf(tagp);}
    template<typename T> T nanl(const char *tagp) { return std::nanl(tagp);}
    template<typename T> T nearbyint(const T &x) { return std::nearbyint(x); }
    template<typename T> T nextafter(const T & x, const T & y) { return std::nextafter(x,y); }
    template<typename T> T nexttoward(const T & x, const T & y) { return std::nexttoward(x,y); }
    template<typename T> T pow(const T & b, const T & e) { return std::pow(b,e); }
    template<typename T> T remainder(const T & n, const T & d) { return std::remainder(n,d); }
    template<typename T> T rint(const T& x) { return std::rint(x); }
    template<typename T> T round(const T& x) { return std::round(x); }
    template<typename T> T scalbln(const T& x, long int n) { return std::scalbln(x,n);}
    template<typename T> T scalbn(const T& x, int n) { return std::scalbln(x,n);}
    template<typename T> bool signbit(const T & x) { return signbit(x); }
    template<typename T> T sin(const T& x) { return std::sin(x); }
    template<typename T> T sinh(const T& x) { return std::sinh(x); }    
    template<typename T> T sqrt(const T& x) { return std::sqrt(x); }
    template<typename T> T square(const T& x) { return x*x; }
    template<typename T> T cube(const T& x) { return x*x*x; }
    template<typename T> T tan(const T& x) { return std::tan(x); }
    template<typename T> T tanh(const T& x) { return std::tanh(x); }        
    template<typename T> T tgamma(const T& x) { return std::tgamma(x); }    
    template<typename T> T trunc(const T& x) { return std::trunc(x); }
    double Huge() { return HUGE_VAL; }
    float Hugef() { return HUGE_VALF; }
    double Infinity() { return INFINITY; }
    double NaN() { return NAN; }

    


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include <algorithm>
#include <vector>
#include <map>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <cassert>
#include <iostream>
#include <random>
#include <memory>


namespace std {
    template<typename T>
    struct vector_iterator
    {
        typename std::vector<T>::iterator iter;
        std::vector<T> v;

        vector_iterator(const std::vector<T> & vec) {
            v = vec;
        }   
        vector_iterator(const std::vector<T> & vec, const typename std::vector<T>::iterator & i) {
            iter = i;
            v = vec;
        }

        vector_iterator<T>& operator = (const T& val) {
            *iter = val;
            return *this;
        }
        vector_iterator<T>& operator = (const vector_iterator<T>& val) {
            iter = val.iter;
            v    = val.v;
            return *this;;
        }
                
        void next() {
            if(iter != v.end()) iter++;
        }
        void prev() {
            if(iter != v.begin()) iter--;
        }
        void forward(size_t i) {
            iter += i;
        }
        void backward(size_t i) {
            iter -= i;
        }
        void jump(size_t i) {
            iter = i;
        }
        
        T value() { return *iter; }
        void set_value(const T& val) { *iter = val; }
    };
}

#include <list>


  namespace std {
    template<typename T>
        struct list_iterator 
        {
            typename std::list<T>::iterator _iter;
            std::list<T> _list;;

            list_iterator(const std::list<T> & l, const typename std::list<T>::iterator & i) {
                _list = l;
                _iter = i;
            }

            void next() { if(_iter != _list.end()) _iter++; }
            void prev() { if(_iter != _list.begin()) _iter--; }
            T& get() { return *_iter;}

            //void insert(const Data& value) { _map.insert(_iter,value); }
            //bool find(const Key& key) { return _map.find(key) != _map.end(); }   
            
        };
    }


#include <map>


  namespace std {
    template<typename Key,  typename Data>
        struct map_iterator 
        {
            typename std::map<Key,Data>::iterator _iter;
            std::map<Key,Data> _map;

            map_iterator(const std::map<Key,Data> & m, const typename std::map<Key,Data>::iterator & i) {
                _map = m;
                _iter = i;
            }

            void next() { if(_iter != _map.end()) _iter++; }
            void prev() { if(_iter != _map.begin()) _iter--; }
            Data& get() { return *_iter;}

            void insert(const Data& value) { _map.insert(_iter,value); }
            bool find(const Key& key) { return _map.find(key) != _map.end(); }   
            
        };
    }


typedef struct{
  lua_State* L; /* the state */
  int idx;      /* the index on the stack */
}SWIGLUA_FN;

#define SWIGLUA_FN_GET(fn) {lua_pushvalue(fn.L,fn.idx);}


typedef struct{
  lua_State* L; /* the state */
  int ref;      /* a ref in the lua global index */
}SWIGLUA_REF;


void swiglua_ref_clear(SWIGLUA_REF* pref){
 	if (pref->L!=0 && pref->ref!=LUA_NOREF && pref->ref!=LUA_REFNIL){
		luaL_unref(pref->L,LUA_REGISTRYINDEX,pref->ref);
	}
	pref->L=0; pref->ref=0;
}

void swiglua_ref_set(SWIGLUA_REF* pref,lua_State* L,int idx){
	pref->L=L;
	lua_pushvalue(L,idx);                 /* copy obj to top */
	pref->ref=luaL_ref(L,LUA_REGISTRYINDEX); /* remove obj from top & put into registry */
}

void swiglua_ref_get(SWIGLUA_REF* pref){
	if (pref->L!=0)
		lua_rawgeti(pref->L,LUA_REGISTRYINDEX,pref->ref);
}



#include <string.h>

SWIGINTERN float std_vector_Sl_float_Sg____getitem__SWIG(std::vector< float > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_float_Sg____setitem__SWIG(std::vector< float > *self,size_t i,float val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< float > std_vector_Sl_float_Sg__begin__SWIG(std::vector< float > *self){
                std::vector_iterator<float> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< float > std_vector_Sl_float_Sg__end__SWIG(std::vector< float > *self){
                std::vector_iterator<float> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_float_Sg__erase__SWIG_0(std::vector< float > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_float_Sg__erase__SWIG_1(std::vector< float > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN double std_vector_Sl_double_Sg____getitem__SWIG(std::vector< double > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_double_Sg____setitem__SWIG(std::vector< double > *self,size_t i,double val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< double > std_vector_Sl_double_Sg__begin__SWIG(std::vector< double > *self){
                std::vector_iterator<double> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< double > std_vector_Sl_double_Sg__end__SWIG(std::vector< double > *self){
                std::vector_iterator<double> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_double_Sg__erase__SWIG_0(std::vector< double > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_double_Sg__erase__SWIG_1(std::vector< double > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN std::complex< float > std_vector_Sl_std_complex_Sl_float_Sg__Sg____getitem__SWIG(std::vector< std::complex< float > > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_std_complex_Sl_float_Sg__Sg____setitem__SWIG(std::vector< std::complex< float > > *self,size_t i,std::complex< float > val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< std::complex< float > > std_vector_Sl_std_complex_Sl_float_Sg__Sg__begin__SWIG(std::vector< std::complex< float > > *self){
                std::vector_iterator<std::complex< float >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< std::complex< float > > std_vector_Sl_std_complex_Sl_float_Sg__Sg__end__SWIG(std::vector< std::complex< float > > *self){
                std::vector_iterator<std::complex< float >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_std_complex_Sl_float_Sg__Sg__erase__SWIG_0(std::vector< std::complex< float > > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_std_complex_Sl_float_Sg__Sg__erase__SWIG_1(std::vector< std::complex< float > > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN std::complex< double > std_vector_Sl_std_complex_Sl_double_Sg__Sg____getitem__SWIG(std::vector< std::complex< double > > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_std_complex_Sl_double_Sg__Sg____setitem__SWIG(std::vector< std::complex< double > > *self,size_t i,std::complex< double > val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< std::complex< double > > std_vector_Sl_std_complex_Sl_double_Sg__Sg__begin__SWIG(std::vector< std::complex< double > > *self){
                std::vector_iterator<std::complex< double >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< std::complex< double > > std_vector_Sl_std_complex_Sl_double_Sg__Sg__end__SWIG(std::vector< std::complex< double > > *self){
                std::vector_iterator<std::complex< double >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_std_complex_Sl_double_Sg__Sg__erase__SWIG_0(std::vector< std::complex< double > > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_std_complex_Sl_double_Sg__Sg__erase__SWIG_1(std::vector< std::complex< double > > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }

    const int BufferSize = 256;
    Std::RandomMersenne noise;
    DspFloatType sampleRate = 44100.0f;
    DspFloatType inverseSampleRate = 1 / 44100.0f;
    DspFloatType invSampleRate = 1 / 44100.0f;

#ifdef __cplusplus
extern "C" {
#endif
static void swig_delete_gslice(void *obj) {
std::gslice *arg1 = (std::gslice *) obj;
delete arg1;
}
static swig_lua_attribute swig_gslice_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_gslice_methods[]= {
    {0,0}
};
static swig_lua_method swig_gslice_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_gslice_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_gslice_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_gslice_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_gslice_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_gslice_Sf_SwigStatic = {
    "gslice",
    swig_gslice_Sf_SwigStatic_methods,
    swig_gslice_Sf_SwigStatic_attributes,
    swig_gslice_Sf_SwigStatic_constants,
    swig_gslice_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_gslice_bases[] = {0};
static const char *swig_gslice_base_names[] = {0};
static swig_lua_class _wrap_class_gslice = { "gslice", "gslice", &SWIGTYPE_p_std__gslice,0, swig_delete_gslice, swig_gslice_methods, swig_gslice_attributes, &swig_gslice_Sf_SwigStatic, swig_gslice_meta, swig_gslice_bases, swig_gslice_base_names };

static void swig_delete_slice(void *obj) {
std::slice *arg1 = (std::slice *) obj;
delete arg1;
}
static swig_lua_attribute swig_slice_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_slice_methods[]= {
    {0,0}
};
static swig_lua_method swig_slice_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_slice_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_slice_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_slice_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_slice_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_slice_Sf_SwigStatic = {
    "slice",
    swig_slice_Sf_SwigStatic_methods,
    swig_slice_Sf_SwigStatic_attributes,
    swig_slice_Sf_SwigStatic_constants,
    swig_slice_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_slice_bases[] = {0};
static const char *swig_slice_base_names[] = {0};
static swig_lua_class _wrap_class_slice = { "slice", "slice", &SWIGTYPE_p_std__slice,0, swig_delete_slice, swig_slice_methods, swig_slice_attributes, &swig_slice_Sf_SwigStatic, swig_slice_meta, swig_slice_bases, swig_slice_base_names };

static int _wrap_new_float_complex__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< float >::complex",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::complex",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (std::complex< float > *)new std::complex< float >((float const &)*arg1,(float const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_complex__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< float >::complex",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (std::complex< float > *)new std::complex< float >((float const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_complex__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",0,0)
  result = (std::complex< float > *)new std::complex< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_complex__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::complex< float >::complex",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("new_float_complex",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (std::complex< float > *)new std::complex< float >((std::complex< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_complex(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_float_complex__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_complex__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_float_complex__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_float_complex__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_float_complex'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::complex(float const &,float const &)\n"
    "    std::complex< float >::complex(float const &)\n"
    "    std::complex< float >::complex()\n"
    "    std::complex< float >::complex(std::complex< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_complex_real__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::complex< float >::real",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::real",1,"std::complex< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex_real",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)((std::complex< float > const *)arg1)->real();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex_imag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::complex< float >::imag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::imag",1,"std::complex< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex_imag",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)((std::complex< float > const *)arg1)->imag();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex_real__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("std::complex< float >::real",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::real",1,"std::complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::real",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex_real",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->real(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex_real(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_float_complex_real__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_complex_real__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_complex_real'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::real() const\n"
    "    std::complex< float >::real(float)\n");
  lua_error(L);return 0;
}


static int _wrap_float_complex_imag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("std::complex< float >::imag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::imag",1,"std::complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::imag",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex_imag",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->imag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex_imag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_float_complex_imag__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_complex_imag__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_complex_imag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::imag() const\n"
    "    std::complex< float >::imag(float)\n");
  lua_error(L);return 0;
}


static int _wrap_float_complex___add(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__add__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__add__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___add",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___add",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____add____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___sub(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__sub__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__sub__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___sub",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___sub",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____sub____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___div(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__div__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__div__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___div",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___div",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____div____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___mul(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__mul__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__mul__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___mul",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___mul",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____mul____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__pow__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__pow__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___pow",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___pow",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____pow____SWIG_0(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__pow__",1,"std::complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::__pow__",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___pow",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = std_complex_Sl_float_Sg____pow____SWIG_1(arg1,(float const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_complex___pow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_complex___pow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_complex___pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::__pow__(std::complex< float > const &)\n"
    "    std::complex< float >::__pow__(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_complex___eq(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("std::complex< float >::__eq__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__eq__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__eq__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___eq",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___eq",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (bool)std_complex_Sl_float_Sg____eq____SWIG(arg1,(std::complex< float > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_complex(void *obj) {
std::complex< float > *arg1 = (std::complex< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_complex(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_complex);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_complex_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_complex_methods[]= {
    { "real", _wrap_float_complex_real},
    { "imag", _wrap_float_complex_imag},
    { "__add", _wrap_float_complex___add},
    { "__sub", _wrap_float_complex___sub},
    { "__div", _wrap_float_complex___div},
    { "__mul", _wrap_float_complex___mul},
    { "__pow", _wrap_float_complex___pow},
    { "__eq", _wrap_float_complex___eq},
    {0,0}
};
static swig_lua_method swig_float_complex_meta[] = {
    { "__add", _wrap_float_complex___add},
    { "__sub", _wrap_float_complex___sub},
    { "__div", _wrap_float_complex___div},
    { "__mul", _wrap_float_complex___mul},
    { "__pow", _wrap_float_complex___pow},
    { "__eq", _wrap_float_complex___eq},
    {0,0}
};

static swig_lua_attribute swig_float_complex_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_complex_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_complex_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_complex_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_complex_Sf_SwigStatic = {
    "float_complex",
    swig_float_complex_Sf_SwigStatic_methods,
    swig_float_complex_Sf_SwigStatic_attributes,
    swig_float_complex_Sf_SwigStatic_constants,
    swig_float_complex_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_complex_bases[] = {0};
static const char *swig_float_complex_base_names[] = {0};
static swig_lua_class _wrap_class_float_complex = { "float_complex", "float_complex", &SWIGTYPE_p_std__complexT_float_t,_proxy__wrap_new_float_complex, swig_delete_float_complex, swig_float_complex_methods, swig_float_complex_attributes, &swig_float_complex_Sf_SwigStatic, swig_float_complex_meta, swig_float_complex_bases, swig_float_complex_base_names };

static int _wrap_new_double_complex__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< double >::complex",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::complex",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (std::complex< double > *)new std::complex< double >((double const &)*arg1,(double const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< double >::complex",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (std::complex< double > *)new std::complex< double >((double const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",0,0)
  result = (std::complex< double > *)new std::complex< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::complex< double >::complex",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("new_double_complex",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (std::complex< double > *)new std::complex< double >((std::complex< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_double_complex__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_double_complex__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_double_complex__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_double_complex__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_double_complex'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::complex(double const &,double const &)\n"
    "    std::complex< double >::complex(double const &)\n"
    "    std::complex< double >::complex()\n"
    "    std::complex< double >::complex(std::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_double_complex_real__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::complex< double >::real",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::real",1,"std::complex< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_real",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)((std::complex< double > const *)arg1)->real();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_imag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::complex< double >::imag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::imag",1,"std::complex< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_imag",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)((std::complex< double > const *)arg1)->imag();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_real__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("std::complex< double >::real",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::real",1,"std::complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::real",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_real",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->real(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_real(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_double_complex_real__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_complex_real__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_complex_real'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::real() const\n"
    "    std::complex< double >::real(double)\n");
  lua_error(L);return 0;
}


static int _wrap_double_complex_imag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("std::complex< double >::imag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::imag",1,"std::complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::imag",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_imag",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->imag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_imag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_double_complex_imag__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_complex_imag__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_complex_imag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::imag() const\n"
    "    std::complex< double >::imag(double)\n");
  lua_error(L);return 0;
}


static int _wrap_double_complex___add(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__add__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__add__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___add",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___add",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____add____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___sub(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__sub__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__sub__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___sub",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___sub",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____sub____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___div(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__div__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__div__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___div",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___div",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____div____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___mul(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__mul__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__mul__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___mul",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___mul",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____mul____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__pow__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__pow__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___pow",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___pow",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____pow____SWIG_0(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__pow__",1,"std::complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::__pow__",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___pow",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = std_complex_Sl_double_Sg____pow____SWIG_1(arg1,(double const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_double_complex___pow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_complex___pow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_complex___pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::__pow__(std::complex< double > const &)\n"
    "    std::complex< double >::__pow__(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_double_complex___eq(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("std::complex< double >::__eq__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__eq__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__eq__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___eq",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___eq",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (bool)std_complex_Sl_double_Sg____eq____SWIG(arg1,(std::complex< double > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_complex(void *obj) {
std::complex< double > *arg1 = (std::complex< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_complex(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_complex);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_complex_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_double_complex_methods[]= {
    { "real", _wrap_double_complex_real},
    { "imag", _wrap_double_complex_imag},
    { "__add", _wrap_double_complex___add},
    { "__sub", _wrap_double_complex___sub},
    { "__div", _wrap_double_complex___div},
    { "__mul", _wrap_double_complex___mul},
    { "__pow", _wrap_double_complex___pow},
    { "__eq", _wrap_double_complex___eq},
    {0,0}
};
static swig_lua_method swig_double_complex_meta[] = {
    { "__add", _wrap_double_complex___add},
    { "__sub", _wrap_double_complex___sub},
    { "__div", _wrap_double_complex___div},
    { "__mul", _wrap_double_complex___mul},
    { "__pow", _wrap_double_complex___pow},
    { "__eq", _wrap_double_complex___eq},
    {0,0}
};

static swig_lua_attribute swig_double_complex_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_complex_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_complex_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_complex_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_complex_Sf_SwigStatic = {
    "double_complex",
    swig_double_complex_Sf_SwigStatic_methods,
    swig_double_complex_Sf_SwigStatic_attributes,
    swig_double_complex_Sf_SwigStatic_constants,
    swig_double_complex_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_complex_bases[] = {0};
static const char *swig_double_complex_base_names[] = {0};
static swig_lua_class _wrap_class_double_complex = { "double_complex", "double_complex", &SWIGTYPE_p_std__complexT_double_t,_proxy__wrap_new_double_complex, swig_delete_double_complex, swig_double_complex_methods, swig_double_complex_attributes, &swig_double_complex_Sf_SwigStatic, swig_double_complex_meta, swig_double_complex_bases, swig_double_complex_base_names };

static int _wrap_new_float_valarray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",0,0)
  result = (std::valarray< float > *)new std::valarray< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::valarray< float > *)new std::valarray< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  size_t arg2 ;
  float temp1 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::valarray",2,"size_t");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::valarray< float > *)new std::valarray< float >((float const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  size_t arg2 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"float const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::valarray",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::valarray< float > *)new std::valarray< float >((float const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = 0 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = (std::valarray< float > *)new std::valarray< float >((std::valarray< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  std::slice_array< float > *arg1 = 0 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"std::slice_array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__slice_arrayT_float_t,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_std__slice_arrayT_float_t);
  }
  
  result = (std::valarray< float > *)new std::valarray< float >((std::slice_array< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  std::gslice_array< float > *arg1 = 0 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"std::gslice_array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__gslice_arrayT_float_t,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_std__gslice_arrayT_float_t);
  }
  
  result = (std::valarray< float > *)new std::valarray< float >((std::gslice_array< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  std::mask_array< float > *arg1 = 0 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"std::mask_array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mask_arrayT_float_t,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_std__mask_arrayT_float_t);
  }
  
  result = (std::valarray< float > *)new std::valarray< float >((std::mask_array< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  std::indirect_array< float > *arg1 = 0 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"std::indirect_array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__indirect_arrayT_float_t,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_std__indirect_arrayT_float_t);
  }
  
  result = (std::valarray< float > *)new std::valarray< float >((std::indirect_array< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_float_valarray__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__slice_arrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__gslice_arrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__mask_arrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__indirect_arrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_8(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_float_valarray__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_float_valarray__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_float_valarray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::valarray()\n"
    "    std::valarray< float >::valarray(size_t)\n"
    "    std::valarray< float >::valarray(float const &,size_t)\n"
    "    std::valarray< float >::valarray(float const *,size_t)\n"
    "    std::valarray< float >::valarray(std::valarray< float > const &)\n"
    "    std::valarray< float >::valarray(std::slice_array< float > const &)\n"
    "    std::valarray< float >::valarray(std::gslice_array< float > const &)\n"
    "    std::valarray< float >::valarray(std::mask_array< float > const &)\n"
    "    std::valarray< float >::valarray(std::indirect_array< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_valarray___getitem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("std::valarray< float >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__getitem__",1,"std::valarray< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___getitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)std_valarray_Sl_float_Sg____getitem____SWIG_0(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___setitem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  size_t arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("std::valarray< float >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__setitem__",1,"std::valarray< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::__setitem__",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::valarray< float >::__setitem__",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___setitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  std_valarray_Sl_float_Sg____setitem____SWIG_0(arg1,arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___getitem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::gslice *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__getitem__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__getitem__",2,"std::gslice const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___getitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__gslice,0))){
    SWIG_fail_ptr("float_valarray___getitem",2,SWIGTYPE_p_std__gslice);
  }
  
  result = std_valarray_Sl_float_Sg____getitem____SWIG_1(arg1,(std::gslice const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___setitem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::gslice *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("std::valarray< float >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__setitem__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__setitem__",2,"std::gslice const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::valarray< float >::__setitem__",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___setitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__gslice,0))){
    SWIG_fail_ptr("float_valarray___setitem",2,SWIGTYPE_p_std__gslice);
  }
  
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  std_valarray_Sl_float_Sg____setitem____SWIG_1(arg1,(std::gslice const &)*arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___getitem__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::slice *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__getitem__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__getitem__",2,"std::slice const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___getitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__slice,0))){
    SWIG_fail_ptr("float_valarray___getitem",2,SWIGTYPE_p_std__slice);
  }
  
  result = std_valarray_Sl_float_Sg____getitem____SWIG_2(arg1,(std::slice const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___getitem(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__gslice, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_valarray___getitem__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__slice, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_valarray___getitem__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_valarray___getitem__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_valarray___getitem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::__getitem__(size_t)\n"
    "    std::valarray< float >::__getitem__(std::gslice const &)\n"
    "    std::valarray< float >::__getitem__(std::slice const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_valarray___setitem__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::slice *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("std::valarray< float >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__setitem__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__setitem__",2,"std::slice const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::valarray< float >::__setitem__",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___setitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__slice,0))){
    SWIG_fail_ptr("float_valarray___setitem",2,SWIGTYPE_p_std__slice);
  }
  
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  std_valarray_Sl_float_Sg____setitem____SWIG_2(arg1,(std::slice const &)*arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___setitem(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__gslice, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_valarray___setitem__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__slice, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_valarray___setitem__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_valarray___setitem__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_valarray___setitem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::__setitem__(size_t,float const &)\n"
    "    std::valarray< float >::__setitem__(std::gslice const &,float const &)\n"
    "    std::valarray< float >::__setitem__(std::slice const &,float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_valarray___add(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__add__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__add__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___add",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___add",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____add____SWIG(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___sub(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__sub__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__sub__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___sub",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___sub",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____sub____SWIG(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___mul(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__mul__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__mul__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___mul",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___mul",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____mul____SWIG(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___div(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__div__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__div__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___div",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___div",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____div____SWIG(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___unm__(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__unm__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__unm__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__unm__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___unm__",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___unm__",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____unm____SWIG(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__pow__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__pow__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___pow",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___pow",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____pow____SWIG_0(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__pow__",1,"std::valarray< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::__pow__",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___pow",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = std_valarray_Sl_float_Sg____pow____SWIG_1(arg1,(float const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_valarray___pow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_valarray___pow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_valarray___pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::__pow__(std::valarray< float > const &)\n"
    "    std::valarray< float >::__pow__(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_valarray_size(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::valarray< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::size",1,"std::valarray< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_size",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = ((std::valarray< float > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_resize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("std::valarray< float >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::resize",1,"std::valarray< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::valarray< float >::resize",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_resize",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_resize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::valarray< float >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::resize",1,"std::valarray< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_resize",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_resize(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_valarray_resize__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_valarray_resize__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_valarray_resize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::resize(size_t,float)\n"
    "    std::valarray< float >::resize(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_float_valarray_sum(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::valarray< float >::sum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::sum",1,"std::valarray< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_sum",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = (float)((std::valarray< float > const *)arg1)->sum();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_min(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::valarray< float >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::min",1,"std::valarray< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_min",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = (float)((std::valarray< float > const *)arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_max(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::valarray< float >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::max",1,"std::valarray< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_max",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = (float)((std::valarray< float > const *)arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_shift(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  int arg2 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::shift",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::shift",1,"std::valarray< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::shift",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_shift",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((std::valarray< float > const *)arg1)->shift(arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_cshift(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  int arg2 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::cshift",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::cshift",1,"std::valarray< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::cshift",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_cshift",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((std::valarray< float > const *)arg1)->cshift(arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float (*arg2)(float) = (float (*)(float)) 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::apply",1,"std::valarray< float > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::valarray< float >::apply",2,"float (*)(float)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_apply",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_float__float,0))){
    SWIG_fail_ptr("float_valarray_apply",2,SWIGTYPE_p_f_float__float);
  }
  
  result = ((std::valarray< float > const *)arg1)->apply(arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float (*arg2)(float const &) = (float (*)(float const &)) 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::apply",1,"std::valarray< float > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::valarray< float >::apply",2,"float (*)(float const &)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_apply",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_r_q_const__float__float,0))){
    SWIG_fail_ptr("float_valarray_apply",2,SWIGTYPE_p_f_r_q_const__float__float);
  }
  
  result = ((std::valarray< float > const *)arg1)->apply(arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_apply(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_f_float__float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_valarray_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_f_r_q_const__float__float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_valarray_apply__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_valarray_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::apply(float (*)(float)) const\n"
    "    std::valarray< float >::apply(float (*)(float const &)) const\n");
  lua_error(L);return 0;
}


static void swig_delete_float_valarray(void *obj) {
std::valarray< float > *arg1 = (std::valarray< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_valarray(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_valarray);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_valarray_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_valarray_methods[]= {
    { "__getitem", _wrap_float_valarray___getitem},
    { "__setitem", _wrap_float_valarray___setitem},
    { "__add", _wrap_float_valarray___add},
    { "__sub", _wrap_float_valarray___sub},
    { "__mul", _wrap_float_valarray___mul},
    { "__div", _wrap_float_valarray___div},
    { "__unm__", _wrap_float_valarray___unm__},
    { "__pow", _wrap_float_valarray___pow},
    { "size", _wrap_float_valarray_size},
    { "resize", _wrap_float_valarray_resize},
    { "sum", _wrap_float_valarray_sum},
    { "min", _wrap_float_valarray_min},
    { "max", _wrap_float_valarray_max},
    { "shift", _wrap_float_valarray_shift},
    { "cshift", _wrap_float_valarray_cshift},
    { "apply", _wrap_float_valarray_apply},
    {0,0}
};
static swig_lua_method swig_float_valarray_meta[] = {
    { "__getitem", _wrap_float_valarray___getitem},
    { "__setitem", _wrap_float_valarray___setitem},
    { "__add", _wrap_float_valarray___add},
    { "__sub", _wrap_float_valarray___sub},
    { "__mul", _wrap_float_valarray___mul},
    { "__div", _wrap_float_valarray___div},
    { "__unm__", _wrap_float_valarray___unm__},
    { "__pow", _wrap_float_valarray___pow},
    {0,0}
};

static swig_lua_attribute swig_float_valarray_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_valarray_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_valarray_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_valarray_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_valarray_Sf_SwigStatic = {
    "float_valarray",
    swig_float_valarray_Sf_SwigStatic_methods,
    swig_float_valarray_Sf_SwigStatic_attributes,
    swig_float_valarray_Sf_SwigStatic_constants,
    swig_float_valarray_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_valarray_bases[] = {0};
static const char *swig_float_valarray_base_names[] = {0};
static swig_lua_class _wrap_class_float_valarray = { "float_valarray", "float_valarray", &SWIGTYPE_p_std__valarrayT_float_t,_proxy__wrap_new_float_valarray, swig_delete_float_valarray, swig_float_valarray_methods, swig_float_valarray_attributes, &swig_float_valarray_Sf_SwigStatic, swig_float_valarray_meta, swig_float_valarray_bases, swig_float_valarray_base_names };

static int _wrap_float_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::min",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::max",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::epsilon",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::round_error",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::infinity",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::quiet_NaN",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::signaling_NaN",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::denorm_min",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< float >::numeric_limits",0,0)
  result = (std::numeric_limits< float > *)new std::numeric_limits< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_numeric_limits(void *obj) {
std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_numeric_limits_methods[]= {
    { "min", _wrap_float_numeric_limits_min},
    { "max", _wrap_float_numeric_limits_max},
    { "epsilon", _wrap_float_numeric_limits_epsilon},
    { "round_error", _wrap_float_numeric_limits_round_error},
    { "infinity", _wrap_float_numeric_limits_infinity},
    { "quiet_NaN", _wrap_float_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_float_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_float_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_float_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_float_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_numeric_limits_Sf_SwigStatic = {
    "float_numeric_limits",
    swig_float_numeric_limits_Sf_SwigStatic_methods,
    swig_float_numeric_limits_Sf_SwigStatic_attributes,
    swig_float_numeric_limits_Sf_SwigStatic_constants,
    swig_float_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_numeric_limits_bases[] = {0};
static const char *swig_float_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_float_numeric_limits = { "float_numeric_limits", "float_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_float_t,_proxy__wrap_new_float_numeric_limits, swig_delete_float_numeric_limits, swig_float_numeric_limits_methods, swig_float_numeric_limits_attributes, &swig_float_numeric_limits_Sf_SwigStatic, swig_float_numeric_limits_meta, swig_float_numeric_limits_bases, swig_float_numeric_limits_base_names };

static int _wrap_double_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::min",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::max",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::epsilon",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::round_error",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::infinity",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::quiet_NaN",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::signaling_NaN",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::denorm_min",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< double >::numeric_limits",0,0)
  result = (std::numeric_limits< double > *)new std::numeric_limits< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_numeric_limits(void *obj) {
std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_double_numeric_limits_methods[]= {
    { "min", _wrap_double_numeric_limits_min},
    { "max", _wrap_double_numeric_limits_max},
    { "epsilon", _wrap_double_numeric_limits_epsilon},
    { "round_error", _wrap_double_numeric_limits_round_error},
    { "infinity", _wrap_double_numeric_limits_infinity},
    { "quiet_NaN", _wrap_double_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_double_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_double_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_double_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_double_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_numeric_limits_Sf_SwigStatic = {
    "double_numeric_limits",
    swig_double_numeric_limits_Sf_SwigStatic_methods,
    swig_double_numeric_limits_Sf_SwigStatic_attributes,
    swig_double_numeric_limits_Sf_SwigStatic_constants,
    swig_double_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_numeric_limits_bases[] = {0};
static const char *swig_double_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_double_numeric_limits = { "double_numeric_limits", "double_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_double_t,_proxy__wrap_new_double_numeric_limits, swig_delete_double_numeric_limits, swig_double_numeric_limits_methods, swig_double_numeric_limits_attributes, &swig_double_numeric_limits_Sf_SwigStatic, swig_double_numeric_limits_meta, swig_double_numeric_limits_bases, swig_double_numeric_limits_base_names };

static int _wrap_int_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::min",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::max",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::epsilon",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::round_error",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::infinity",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::quiet_NaN",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::signaling_NaN",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::denorm_min",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< int >::numeric_limits",0,0)
  result = (std::numeric_limits< int > *)new std::numeric_limits< int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_int_numeric_limits(void *obj) {
std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_int_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_int_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_int_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_int_numeric_limits_methods[]= {
    { "min", _wrap_int_numeric_limits_min},
    { "max", _wrap_int_numeric_limits_max},
    { "epsilon", _wrap_int_numeric_limits_epsilon},
    { "round_error", _wrap_int_numeric_limits_round_error},
    { "infinity", _wrap_int_numeric_limits_infinity},
    { "quiet_NaN", _wrap_int_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_int_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_int_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_int_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_int_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_int_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_int_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_int_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_int_numeric_limits_Sf_SwigStatic = {
    "int_numeric_limits",
    swig_int_numeric_limits_Sf_SwigStatic_methods,
    swig_int_numeric_limits_Sf_SwigStatic_attributes,
    swig_int_numeric_limits_Sf_SwigStatic_constants,
    swig_int_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_int_numeric_limits_bases[] = {0};
static const char *swig_int_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_int_numeric_limits = { "int_numeric_limits", "int_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_int_t,_proxy__wrap_new_int_numeric_limits, swig_delete_int_numeric_limits, swig_int_numeric_limits_methods, swig_int_numeric_limits_attributes, &swig_int_numeric_limits_Sf_SwigStatic, swig_int_numeric_limits_meta, swig_int_numeric_limits_bases, swig_int_numeric_limits_base_names };

static int _wrap_uint_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::min",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::max",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::epsilon",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::round_error",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::infinity",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::quiet_NaN",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::signaling_NaN",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::denorm_min",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned int > *)new std::numeric_limits< unsigned int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uint_numeric_limits(void *obj) {
std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_uint_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uint_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uint_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uint_numeric_limits_methods[]= {
    { "min", _wrap_uint_numeric_limits_min},
    { "max", _wrap_uint_numeric_limits_max},
    { "epsilon", _wrap_uint_numeric_limits_epsilon},
    { "round_error", _wrap_uint_numeric_limits_round_error},
    { "infinity", _wrap_uint_numeric_limits_infinity},
    { "quiet_NaN", _wrap_uint_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_uint_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_uint_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_uint_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uint_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uint_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uint_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uint_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uint_numeric_limits_Sf_SwigStatic = {
    "uint_numeric_limits",
    swig_uint_numeric_limits_Sf_SwigStatic_methods,
    swig_uint_numeric_limits_Sf_SwigStatic_attributes,
    swig_uint_numeric_limits_Sf_SwigStatic_constants,
    swig_uint_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uint_numeric_limits_bases[] = {0};
static const char *swig_uint_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_uint_numeric_limits = { "uint_numeric_limits", "uint_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,_proxy__wrap_new_uint_numeric_limits, swig_delete_uint_numeric_limits, swig_uint_numeric_limits_methods, swig_uint_numeric_limits_attributes, &swig_uint_numeric_limits_Sf_SwigStatic, swig_uint_numeric_limits_meta, swig_uint_numeric_limits_bases, swig_uint_numeric_limits_base_names };

static int _wrap_short_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::min",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::max",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::epsilon",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::round_error",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::infinity",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::quiet_NaN",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::signaling_NaN",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::denorm_min",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_short_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< short >::numeric_limits",0,0)
  result = (std::numeric_limits< short > *)new std::numeric_limits< short >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_short_numeric_limits(void *obj) {
std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) obj;
delete arg1;
}
static int _proxy__wrap_new_short_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_short_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_short_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_short_numeric_limits_methods[]= {
    { "min", _wrap_short_numeric_limits_min},
    { "max", _wrap_short_numeric_limits_max},
    { "epsilon", _wrap_short_numeric_limits_epsilon},
    { "round_error", _wrap_short_numeric_limits_round_error},
    { "infinity", _wrap_short_numeric_limits_infinity},
    { "quiet_NaN", _wrap_short_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_short_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_short_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_short_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_short_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_short_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_short_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_short_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_short_numeric_limits_Sf_SwigStatic = {
    "short_numeric_limits",
    swig_short_numeric_limits_Sf_SwigStatic_methods,
    swig_short_numeric_limits_Sf_SwigStatic_attributes,
    swig_short_numeric_limits_Sf_SwigStatic_constants,
    swig_short_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_short_numeric_limits_bases[] = {0};
static const char *swig_short_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_short_numeric_limits = { "short_numeric_limits", "short_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_short_t,_proxy__wrap_new_short_numeric_limits, swig_delete_short_numeric_limits, swig_short_numeric_limits_methods, swig_short_numeric_limits_attributes, &swig_short_numeric_limits_Sf_SwigStatic, swig_short_numeric_limits_meta, swig_short_numeric_limits_bases, swig_short_numeric_limits_base_names };

static int _wrap_ushort_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::min",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::max",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::epsilon",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::round_error",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::infinity",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::quiet_NaN",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::signaling_NaN",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::denorm_min",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ushort_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned short > *)new std::numeric_limits< unsigned short >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ushort_numeric_limits(void *obj) {
std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ushort_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ushort_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ushort_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ushort_numeric_limits_methods[]= {
    { "min", _wrap_ushort_numeric_limits_min},
    { "max", _wrap_ushort_numeric_limits_max},
    { "epsilon", _wrap_ushort_numeric_limits_epsilon},
    { "round_error", _wrap_ushort_numeric_limits_round_error},
    { "infinity", _wrap_ushort_numeric_limits_infinity},
    { "quiet_NaN", _wrap_ushort_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_ushort_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_ushort_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_ushort_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ushort_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ushort_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ushort_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ushort_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ushort_numeric_limits_Sf_SwigStatic = {
    "ushort_numeric_limits",
    swig_ushort_numeric_limits_Sf_SwigStatic_methods,
    swig_ushort_numeric_limits_Sf_SwigStatic_attributes,
    swig_ushort_numeric_limits_Sf_SwigStatic_constants,
    swig_ushort_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ushort_numeric_limits_bases[] = {0};
static const char *swig_ushort_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_ushort_numeric_limits = { "ushort_numeric_limits", "ushort_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,_proxy__wrap_new_ushort_numeric_limits, swig_delete_ushort_numeric_limits, swig_ushort_numeric_limits_methods, swig_ushort_numeric_limits_attributes, &swig_ushort_numeric_limits_Sf_SwigStatic, swig_ushort_numeric_limits_meta, swig_ushort_numeric_limits_bases, swig_ushort_numeric_limits_base_names };

static int _wrap_long_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::min",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::max",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::epsilon",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::round_error",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::infinity",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::quiet_NaN",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::signaling_NaN",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::denorm_min",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_long_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< long >::numeric_limits",0,0)
  result = (std::numeric_limits< long > *)new std::numeric_limits< long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_long_numeric_limits(void *obj) {
std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_long_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_long_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_long_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_long_numeric_limits_methods[]= {
    { "min", _wrap_long_numeric_limits_min},
    { "max", _wrap_long_numeric_limits_max},
    { "epsilon", _wrap_long_numeric_limits_epsilon},
    { "round_error", _wrap_long_numeric_limits_round_error},
    { "infinity", _wrap_long_numeric_limits_infinity},
    { "quiet_NaN", _wrap_long_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_long_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_long_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_long_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_long_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_long_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_long_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_long_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_long_numeric_limits_Sf_SwigStatic = {
    "long_numeric_limits",
    swig_long_numeric_limits_Sf_SwigStatic_methods,
    swig_long_numeric_limits_Sf_SwigStatic_attributes,
    swig_long_numeric_limits_Sf_SwigStatic_constants,
    swig_long_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_long_numeric_limits_bases[] = {0};
static const char *swig_long_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_long_numeric_limits = { "long_numeric_limits", "long_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_long_t,_proxy__wrap_new_long_numeric_limits, swig_delete_long_numeric_limits, swig_long_numeric_limits_methods, swig_long_numeric_limits_attributes, &swig_long_numeric_limits_Sf_SwigStatic, swig_long_numeric_limits_meta, swig_long_numeric_limits_bases, swig_long_numeric_limits_base_names };

static int _wrap_ulong_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::min",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::max",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::epsilon",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::round_error",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::infinity",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::quiet_NaN",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::signaling_NaN",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::denorm_min",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ulong_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned long > *)new std::numeric_limits< unsigned long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ulong_numeric_limits(void *obj) {
std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ulong_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ulong_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ulong_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ulong_numeric_limits_methods[]= {
    { "min", _wrap_ulong_numeric_limits_min},
    { "max", _wrap_ulong_numeric_limits_max},
    { "epsilon", _wrap_ulong_numeric_limits_epsilon},
    { "round_error", _wrap_ulong_numeric_limits_round_error},
    { "infinity", _wrap_ulong_numeric_limits_infinity},
    { "quiet_NaN", _wrap_ulong_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_ulong_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_ulong_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_ulong_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ulong_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ulong_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ulong_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ulong_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ulong_numeric_limits_Sf_SwigStatic = {
    "ulong_numeric_limits",
    swig_ulong_numeric_limits_Sf_SwigStatic_methods,
    swig_ulong_numeric_limits_Sf_SwigStatic_attributes,
    swig_ulong_numeric_limits_Sf_SwigStatic_constants,
    swig_ulong_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ulong_numeric_limits_bases[] = {0};
static const char *swig_ulong_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_ulong_numeric_limits = { "ulong_numeric_limits", "ulong_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,_proxy__wrap_new_ulong_numeric_limits, swig_delete_ulong_numeric_limits, swig_ulong_numeric_limits_methods, swig_ulong_numeric_limits_attributes, &swig_ulong_numeric_limits_Sf_SwigStatic, swig_ulong_numeric_limits_meta, swig_ulong_numeric_limits_bases, swig_ulong_numeric_limits_base_names };

static int _wrap_llong_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::min",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::max",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::epsilon",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::round_error",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::infinity",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::quiet_NaN",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::signaling_NaN",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::denorm_min",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_llong_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< long long >::numeric_limits",0,0)
  result = (std::numeric_limits< long long > *)new std::numeric_limits< long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_llong_numeric_limits(void *obj) {
std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_llong_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_llong_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_llong_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_llong_numeric_limits_methods[]= {
    { "min", _wrap_llong_numeric_limits_min},
    { "max", _wrap_llong_numeric_limits_max},
    { "epsilon", _wrap_llong_numeric_limits_epsilon},
    { "round_error", _wrap_llong_numeric_limits_round_error},
    { "infinity", _wrap_llong_numeric_limits_infinity},
    { "quiet_NaN", _wrap_llong_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_llong_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_llong_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_llong_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_llong_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_llong_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_llong_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_llong_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_llong_numeric_limits_Sf_SwigStatic = {
    "llong_numeric_limits",
    swig_llong_numeric_limits_Sf_SwigStatic_methods,
    swig_llong_numeric_limits_Sf_SwigStatic_attributes,
    swig_llong_numeric_limits_Sf_SwigStatic_constants,
    swig_llong_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_llong_numeric_limits_bases[] = {0};
static const char *swig_llong_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_llong_numeric_limits = { "llong_numeric_limits", "llong_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_long_long_t,_proxy__wrap_new_llong_numeric_limits, swig_delete_llong_numeric_limits, swig_llong_numeric_limits_methods, swig_llong_numeric_limits_attributes, &swig_llong_numeric_limits_Sf_SwigStatic, swig_llong_numeric_limits_meta, swig_llong_numeric_limits_bases, swig_llong_numeric_limits_base_names };

static int _wrap_ullong_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::min",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::max",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::epsilon",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::round_error",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::infinity",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::quiet_NaN",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::signaling_NaN",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::denorm_min",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ullong_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned long long > *)new std::numeric_limits< unsigned long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ullong_numeric_limits(void *obj) {
std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ullong_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ullong_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ullong_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ullong_numeric_limits_methods[]= {
    { "min", _wrap_ullong_numeric_limits_min},
    { "max", _wrap_ullong_numeric_limits_max},
    { "epsilon", _wrap_ullong_numeric_limits_epsilon},
    { "round_error", _wrap_ullong_numeric_limits_round_error},
    { "infinity", _wrap_ullong_numeric_limits_infinity},
    { "quiet_NaN", _wrap_ullong_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_ullong_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_ullong_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_ullong_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ullong_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ullong_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ullong_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ullong_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ullong_numeric_limits_Sf_SwigStatic = {
    "ullong_numeric_limits",
    swig_ullong_numeric_limits_Sf_SwigStatic_methods,
    swig_ullong_numeric_limits_Sf_SwigStatic_attributes,
    swig_ullong_numeric_limits_Sf_SwigStatic_constants,
    swig_ullong_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ullong_numeric_limits_bases[] = {0};
static const char *swig_ullong_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_ullong_numeric_limits = { "ullong_numeric_limits", "ullong_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,_proxy__wrap_new_ullong_numeric_limits, swig_delete_ullong_numeric_limits, swig_ullong_numeric_limits_methods, swig_ullong_numeric_limits_attributes, &swig_ullong_numeric_limits_Sf_SwigStatic, swig_ullong_numeric_limits_meta, swig_ullong_numeric_limits_bases, swig_ullong_numeric_limits_base_names };

static int _wrap_Huge(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("Huge",0,0)
  result = (double)Huge();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Hugef(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("Hugef",0,0)
  result = (float)Hugef();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Infinity(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("Infinity",0,0)
  result = (double)Infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NaN(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("NaN",0,0)
  result = (double)NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("abs< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("abs< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)abs< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cubef(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cube< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cube< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cube< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("sqrt< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sqrt< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)sqrt< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("exp< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("exp< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)exp< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp2f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("exp2< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("exp2< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)exp2< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("log< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)log< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("log10< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log10< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)log10< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log2f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("log2< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log2< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)log2< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logbf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("logb< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("logb< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)logb< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("pow< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("pow< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pow< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)pow< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floorf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("floor< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("floor< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)floor< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("acos< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("acos< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)acos< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("asin< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("asin< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)asin< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("atan< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atan< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)atan< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("atan2< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atan2< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("atan2< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)atan2< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cos< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cos< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cos< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("sin< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sin< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)sin< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("tan< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tan< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)tan< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cosh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cosh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cosh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("sinh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sinh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)sinh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("tanh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tanh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)tanh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lgammaf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("lgamma< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lgamma< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)lgamma< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acoshf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("acosh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("acosh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)acosh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("asinh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("asinh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)asinh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("atanh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atanh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)atanh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cbrtf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cbrt< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cbrt< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cbrt< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceilf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cbrt< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cbrt< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cbrt< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copysignf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("copysign< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("copysign< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("copysign< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)copysign< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erff(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("erf< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("erf< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)erf< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfcf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("erfc< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("erfc< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)erfc< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expm1f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("expm1< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("expm1< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)expm1< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fdimf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("fdim< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fdim< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fdim< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)fdim< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp1 ;
  float temp2 ;
  float temp3 ;
  float result;
  
  SWIG_check_num_args("fma< f32 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fma< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fma< f32 >",2,"float const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("fma< f32 >",3,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  result = (float)fma< f32 >((float const &)*arg1,(float const &)*arg2,(float const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaxf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("fmax< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmax< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmax< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)fmax< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fminf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("fmin< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmin< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmin< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)fmin< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmodf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("fmod< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmod< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmod< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)fmod< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fpclassifyf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  int result;
  
  SWIG_check_num_args("fpclassify< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fpclassify< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (int)fpclassify< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hypotf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("hypot< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("hypot< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("hypot< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)hypot< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ilogbf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  int result;
  
  SWIG_check_num_args("ilogb< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ilogb< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (int)ilogb< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isfinitef(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("isfinite< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isfinite< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isfinite< f32 >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("isgreater< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isgreater< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isgreater< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isgreater< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterequalf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("isgreaterequal< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isgreaterequal< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isgreaterequal< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isgreaterequal< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isinff(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("isinf< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isinf< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isinf< f32 >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("isless< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isless< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isless< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isless< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessequalf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("islessequal< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("islessequal< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("islessequal< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)islessequal< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnanf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("isnan< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isnan< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isnan< f32 >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnormalf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("isnormal< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isnormal< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isnormal< f32 >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isunorderedf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("isunordered< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isunordered< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isunordered< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isunordered< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldexpf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  int arg2 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("ldexp< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ldexp< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ldexp< f32 >",2,"int");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)ldexp< f32 >((float const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llrintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("llrint< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("llrint< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)llrint< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llroundf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("llround< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("llround< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)llround< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("log1p< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log1p< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)log1p< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lrintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("lrint< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lrint< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)lrint< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lroundf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("lround< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lround< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)lround< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanf(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("nan< f32 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nan< f32 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (float)nan< f32 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanff(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("nanf< f32 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nanf< f32 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (float)nanf< f32 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanlf(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("nanl< f32 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nanl< f32 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (float)nanl< f32 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nearbyintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("nearbyint< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nearbyint< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)nearbyint< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nextafterf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("nextafter< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nextafter< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nextafter< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)nextafter< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nexttowardf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("nexttoward< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nexttoward< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nexttoward< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)nexttoward< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_remainderf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("remainder< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("remainder< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("remainder< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)remainder< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("rint< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rint< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)rint< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("round< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("round< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)round< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalblnf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  long arg2 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("scalbln< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scalbln< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scalbln< f32 >",2,"long");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (long)lua_tonumber(L, 2);
  result = (float)scalbln< f32 >((float const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalbnf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  int arg2 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("scalbn< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scalbn< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scalbn< f32 >",2,"int");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)scalbn< f32 >((float const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squaref(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("square< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("square< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)square< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tgammaf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("tgamma< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tgamma< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)tgamma< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_truncf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("trunc< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("trunc< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)trunc< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("abs< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("abs< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)abs< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("sqrt< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sqrt< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)sqrt< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("exp< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("exp< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)exp< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp2d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("exp2< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("exp2< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)exp2< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("log< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)log< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("log10< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log10< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)log10< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log2d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("log2< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log2< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)log2< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logbd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("logb< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("logb< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)logb< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("pow< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("pow< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pow< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)pow< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floord(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("floor< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("floor< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)floor< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("acos< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("acos< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)acos< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asind(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("asin< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("asin< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)asin< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atand(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("atan< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atan< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)atan< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("atan2< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atan2< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("atan2< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)atan2< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("cos< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cos< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)cos< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sind(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("sin< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sin< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)sin< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tand(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("tan< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tan< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)tan< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("cosh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cosh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)cosh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("sinh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sinh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)sinh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("tanh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tanh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)tanh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lgammad(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("lgamma< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lgamma< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)lgamma< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acoshd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("acosh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("acosh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)acosh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("asinh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("asinh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)asinh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("atanh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atanh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)atanh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cbrtd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("cbrt< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cbrt< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)cbrt< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceild(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("cbrt< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cbrt< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)cbrt< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copysignd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("copysign< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("copysign< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("copysign< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)copysign< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("erf< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("erf< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)erf< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfcd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("erfc< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("erfc< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)erfc< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expm1d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("expm1< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("expm1< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)expm1< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fdimd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("fdim< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fdim< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fdim< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)fdim< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmad(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp1 ;
  double temp2 ;
  double temp3 ;
  double result;
  
  SWIG_check_num_args("fma< f64 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fma< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fma< f64 >",2,"double const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("fma< f64 >",3,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  result = (double)fma< f64 >((double const &)*arg1,(double const &)*arg2,(double const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaxd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("fmax< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmax< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmax< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)fmax< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmind(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("fmin< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmin< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmin< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)fmin< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmodd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("fmod< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmod< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmod< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)fmod< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fpclassifyd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  int result;
  
  SWIG_check_num_args("fpclassify< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fpclassify< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (int)fpclassify< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hypotd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("hypot< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("hypot< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("hypot< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)hypot< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ilogbd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  int result;
  
  SWIG_check_num_args("ilogb< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ilogb< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (int)ilogb< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isfinited(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("isfinite< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isfinite< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isfinite< f64 >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("isgreater< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isgreater< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isgreater< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isgreater< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterequald(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("isgreaterequal< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isgreaterequal< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isgreaterequal< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isgreaterequal< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isinfd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("isinf< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isinf< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isinf< f64 >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("isless< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isless< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isless< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isless< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessequald(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("islessequal< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("islessequal< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("islessequal< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)islessequal< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnand(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("isnan< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isnan< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isnan< f64 >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnormald(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("isnormal< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isnormal< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isnormal< f64 >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isunorderedd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("isunordered< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isunordered< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isunordered< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isunordered< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldexpd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("ldexp< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ldexp< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ldexp< f64 >",2,"int");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)ldexp< f64 >((double const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llrintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("llrint< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("llrint< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)llrint< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llroundd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("llround< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("llround< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)llround< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("log1p< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log1p< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)log1p< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lrintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("lrint< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lrint< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)lrint< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lroundd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("lround< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lround< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)lround< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nand(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double result;
  
  SWIG_check_num_args("nan< f64 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nan< f64 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)nan< f64 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanfd(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double result;
  
  SWIG_check_num_args("nanf< f64 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nanf< f64 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)nanf< f64 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanld(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double result;
  
  SWIG_check_num_args("nanl< f64 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nanl< f64 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)nanl< f64 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nearbyintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("nearbyint< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nearbyint< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)nearbyint< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nextafterd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("nextafter< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nextafter< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nextafter< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)nextafter< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nexttowardd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("nexttoward< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nexttoward< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nexttoward< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)nexttoward< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_remainderd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("remainder< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("remainder< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("remainder< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)remainder< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("rint< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rint< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)rint< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("round< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("round< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)round< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalblnd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  long arg2 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("scalbln< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scalbln< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scalbln< f64 >",2,"long");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (long)lua_tonumber(L, 2);
  result = (double)scalbln< f64 >((double const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalbnd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("scalbn< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scalbn< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scalbn< f64 >",2,"int");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)scalbn< f64 >((double const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squared(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("square< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("square< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)square< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tgammad(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("tgamma< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tgamma< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)tgamma< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_truncd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("trunc< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("trunc< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)trunc< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feclearexcept(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("feclearexcept",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("feclearexcept",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)feclearexcept(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fegetexceptflag(lua_State* L) {
  int SWIG_arg = 0;
  fexcept_t *arg1 = (fexcept_t *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("fegetexceptflag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fegetexceptflag",1,"fexcept_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fegetexceptflag",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fexcept_t,0))){
    SWIG_fail_ptr("fegetexceptflag",1,SWIGTYPE_p_fexcept_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)fegetexceptflag(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feraiseexcept(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("feraiseexcept",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("feraiseexcept",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)feraiseexcept(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fesetexceptflag(lua_State* L) {
  int SWIG_arg = 0;
  fexcept_t *arg1 = (fexcept_t *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("fesetexceptflag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fesetexceptflag",1,"fexcept_t const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fesetexceptflag",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fexcept_t,0))){
    SWIG_fail_ptr("fesetexceptflag",1,SWIGTYPE_p_fexcept_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)fesetexceptflag((fexcept_t const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fetestexcept(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("fetestexcept",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fetestexcept",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)fetestexcept(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fegetround(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("fegetround",0,0)
  result = (int)fegetround();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fesetround(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("fesetround",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fesetround",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)fesetround(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fegetenv(lua_State* L) {
  int SWIG_arg = 0;
  fenv_t *arg1 = (fenv_t *) 0 ;
  int result;
  
  SWIG_check_num_args("fegetenv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fegetenv",1,"fenv_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fenv_t,0))){
    SWIG_fail_ptr("fegetenv",1,SWIGTYPE_p_fenv_t);
  }
  
  result = (int)fegetenv(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feholdexcept(lua_State* L) {
  int SWIG_arg = 0;
  fenv_t *arg1 = (fenv_t *) 0 ;
  int result;
  
  SWIG_check_num_args("feholdexcept",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("feholdexcept",1,"fenv_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fenv_t,0))){
    SWIG_fail_ptr("feholdexcept",1,SWIGTYPE_p_fenv_t);
  }
  
  result = (int)feholdexcept(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fesetenv(lua_State* L) {
  int SWIG_arg = 0;
  fenv_t *arg1 = (fenv_t *) 0 ;
  int result;
  
  SWIG_check_num_args("fesetenv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fesetenv",1,"fenv_t const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fenv_t,0))){
    SWIG_fail_ptr("fesetenv",1,SWIGTYPE_p_fenv_t);
  }
  
  result = (int)fesetenv((fenv_t const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feupdateenv(lua_State* L) {
  int SWIG_arg = 0;
  fenv_t *arg1 = (fenv_t *) 0 ;
  int result;
  
  SWIG_check_num_args("feupdateenv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("feupdateenv",1,"fenv_t const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fenv_t,0))){
    SWIG_fail_ptr("feupdateenv",1,SWIGTYPE_p_fenv_t);
  }
  
  result = (int)feupdateenv((fenv_t const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_noise_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne arg1 ;
  Std::RandomMersenne *argp1 ;
  
  SWIG_check_num_args("noise",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("noise",1,"Std::RandomMersenne");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_Std__RandomMersenne,0))){
    SWIG_fail_ptr("noise_set",1,SWIGTYPE_p_Std__RandomMersenne);
  }
  arg1 = *argp1;
  
  noise = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_noise_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne result;
  
  SWIG_check_num_args("noise",0,0)
  result = noise;
  {
    Std::RandomMersenne * resultptr = new Std::RandomMersenne((const Std::RandomMersenne &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__RandomMersenne,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sampleRate_set(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  
  SWIG_check_num_args("sampleRate",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sampleRate",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  sampleRate = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sampleRate_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType result;
  
  SWIG_check_num_args("sampleRate",0,0)
  result = (DspFloatType)sampleRate;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_invSampleRate_set(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  
  SWIG_check_num_args("invSampleRate",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("invSampleRate",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  invSampleRate = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_invSampleRate_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType result;
  
  SWIG_check_num_args("invSampleRate",0,0)
  result = (DspFloatType)invSampleRate;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Random(lua_State* L) {
  int SWIG_arg = 0;
  Random *result = 0 ;
  
  SWIG_check_num_args("Random::Random",0,0)
  result = (Random *)new Random();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Random,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_frand(lua_State* L) {
  int SWIG_arg = 0;
  Random *arg1 = (Random *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Random::frand",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Random::frand",1,"Random *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Random,0))){
    SWIG_fail_ptr("Random_frand",1,SWIGTYPE_p_Random);
  }
  
  result = (DspFloatType)(arg1)->frand();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_randint(lua_State* L) {
  int SWIG_arg = 0;
  Random *arg1 = (Random *) 0 ;
  int arg2 ;
  int arg3 ;
  uint64_t result;
  
  SWIG_check_num_args("Random::randint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Random::randint",1,"Random *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Random::randint",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Random::randint",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Random,0))){
    SWIG_fail_ptr("Random_randint",1,SWIGTYPE_p_Random);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (uint64_t)(arg1)->randint(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_flip(lua_State* L) {
  int SWIG_arg = 0;
  Random *arg1 = (Random *) 0 ;
  DspFloatType arg2 ;
  bool result;
  
  SWIG_check_num_args("Random::flip",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Random::flip",1,"Random *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Random::flip",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Random,0))){
    SWIG_fail_ptr("Random_flip",1,SWIGTYPE_p_Random);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (bool)(arg1)->flip(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_random(lua_State* L) {
  int SWIG_arg = 0;
  Random *arg1 = (Random *) 0 ;
  int arg2 ;
  uint64_t result;
  
  SWIG_check_num_args("Random::random",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Random::random",1,"Random *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Random::random",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Random,0))){
    SWIG_fail_ptr("Random_random",1,SWIGTYPE_p_Random);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (uint64_t)(arg1)->random(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Random(void *obj) {
Random *arg1 = (Random *) obj;
delete arg1;
}
static int _proxy__wrap_new_Random(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Random);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Random_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Random_methods[]= {
    { "frand", _wrap_Random_frand},
    { "randint", _wrap_Random_randint},
    { "flip", _wrap_Random_flip},
    { "random", _wrap_Random_random},
    {0,0}
};
static swig_lua_method swig_Random_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Random_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Random_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Random_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Random_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Random_Sf_SwigStatic = {
    "Random",
    swig_Random_Sf_SwigStatic_methods,
    swig_Random_Sf_SwigStatic_attributes,
    swig_Random_Sf_SwigStatic_constants,
    swig_Random_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Random_bases[] = {0};
static const char *swig_Random_base_names[] = {0};
static swig_lua_class _wrap_class_Random = { "Random", "Random", &SWIGTYPE_p_Random,_proxy__wrap_new_Random, swig_delete_Random, swig_Random_methods, swig_Random_attributes, &swig_Random_Sf_SwigStatic, swig_Random_meta, swig_Random_bases, swig_Random_base_names };

static int _wrap_SoundProcessor_preGain_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("SoundProcessor::preGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::preGain",1,"SoundProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundProcessor::preGain",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_preGain_set",1,SWIGTYPE_p_SoundProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->preGain = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_preGain_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("SoundProcessor::preGain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::preGain",1,"SoundProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_preGain_get",1,SWIGTYPE_p_SoundProcessor);
  }
  
  result = (DspFloatType) ((arg1)->preGain);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_postGain_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("SoundProcessor::postGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::postGain",1,"SoundProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundProcessor::postGain",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_postGain_set",1,SWIGTYPE_p_SoundProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->postGain = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_postGain_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("SoundProcessor::postGain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::postGain",1,"SoundProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_postGain_get",1,SWIGTYPE_p_SoundProcessor);
  }
  
  result = (DspFloatType) ((arg1)->postGain);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("SoundProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::getType",1,"SoundProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_getType",1,SWIGTYPE_p_SoundProcessor);
  }
  
  result = (ObjectType)((SoundProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_setPort(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("SoundProcessor::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::setPort",1,"SoundProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundProcessor::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundProcessor::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_setPort",1,SWIGTYPE_p_SoundProcessor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_setPort2(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  
  SWIG_check_num_args("SoundProcessor::setPort2",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::setPort2",1,"SoundProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundProcessor::setPort2",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundProcessor::setPort2",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SoundProcessor::setPort2",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_setPort2",1,SWIGTYPE_p_SoundProcessor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  (arg1)->setPort2(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_setPortV(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  int arg2 ;
  std::vector< DspFloatType > *arg3 = 0 ;
  
  SWIG_check_num_args("SoundProcessor::setPortV",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::setPortV",1,"SoundProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundProcessor::setPortV",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SoundProcessor::setPortV",3,"std::vector< DspFloatType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_setPortV",1,SWIGTYPE_p_SoundProcessor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("SoundProcessor_setPortV",3,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->setPortV(arg2,(std::vector< DspFloatType > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_getPort(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  int arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("SoundProcessor::getPort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::getPort",1,"SoundProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundProcessor::getPort",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_getPort",1,SWIGTYPE_p_SoundProcessor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->getPort(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_getPort2(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("SoundProcessor::getPort2",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::getPort2",1,"SoundProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundProcessor::getPort2",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundProcessor::getPort2",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_getPort2",1,SWIGTYPE_p_SoundProcessor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->getPort2(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_getPortV(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  int arg2 ;
  std::vector< DspFloatType > *arg3 = 0 ;
  
  SWIG_check_num_args("SoundProcessor::getPortV",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::getPortV",1,"SoundProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundProcessor::getPortV",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SoundProcessor::getPortV",3,"std::vector< DspFloatType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_getPortV",1,SWIGTYPE_p_SoundProcessor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("SoundProcessor_getPortV",3,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->getPortV(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_printPortMap(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  
  SWIG_check_num_args("SoundProcessor::printPortMap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::printPortMap",1,"SoundProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_printPortMap",1,SWIGTYPE_p_SoundProcessor);
  }
  
  (arg1)->printPortMap();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_randomize(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  
  SWIG_check_num_args("SoundProcessor::randomize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::randomize",1,"SoundProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_randomize",1,SWIGTYPE_p_SoundProcessor);
  }
  
  (arg1)->randomize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_loadPreset(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("SoundProcessor::loadPreset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::loadPreset",1,"SoundProcessor *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SoundProcessor::loadPreset",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_loadPreset",1,SWIGTYPE_p_SoundProcessor);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->loadPreset((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_savePreset(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("SoundProcessor::savePreset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::savePreset",1,"SoundProcessor *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SoundProcessor::savePreset",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_savePreset",1,SWIGTYPE_p_SoundProcessor);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->savePreset((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SoundProcessor(void *obj) {
SoundProcessor *arg1 = (SoundProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_SoundProcessor_attributes[] = {
    { "preGain", _wrap_SoundProcessor_preGain_get, _wrap_SoundProcessor_preGain_set },
    { "postGain", _wrap_SoundProcessor_postGain_get, _wrap_SoundProcessor_postGain_set },
    {0,0,0}
};
static swig_lua_method swig_SoundProcessor_methods[]= {
    { "getType", _wrap_SoundProcessor_getType},
    { "setPort", _wrap_SoundProcessor_setPort},
    { "setPort2", _wrap_SoundProcessor_setPort2},
    { "setPortV", _wrap_SoundProcessor_setPortV},
    { "getPort", _wrap_SoundProcessor_getPort},
    { "getPort2", _wrap_SoundProcessor_getPort2},
    { "getPortV", _wrap_SoundProcessor_getPortV},
    { "printPortMap", _wrap_SoundProcessor_printPortMap},
    { "randomize", _wrap_SoundProcessor_randomize},
    { "loadPreset", _wrap_SoundProcessor_loadPreset},
    { "savePreset", _wrap_SoundProcessor_savePreset},
    {0,0}
};
static swig_lua_method swig_SoundProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SoundProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SoundProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SoundProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SoundProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SoundProcessor_Sf_SwigStatic = {
    "SoundProcessor",
    swig_SoundProcessor_Sf_SwigStatic_methods,
    swig_SoundProcessor_Sf_SwigStatic_attributes,
    swig_SoundProcessor_Sf_SwigStatic_constants,
    swig_SoundProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SoundProcessor_bases[] = {0};
static const char *swig_SoundProcessor_base_names[] = {0};
static swig_lua_class _wrap_class_SoundProcessor = { "SoundProcessor", "SoundProcessor", &SWIGTYPE_p_SoundProcessor,0, swig_delete_SoundProcessor, swig_SoundProcessor_methods, swig_SoundProcessor_attributes, &swig_SoundProcessor_Sf_SwigStatic, swig_SoundProcessor_meta, swig_SoundProcessor_bases, swig_SoundProcessor_base_names };

static int _wrap_Port_port_set(lua_State* L) {
  int SWIG_arg = 0;
  Port *arg1 = (Port *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Port::port",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Port::port",1,"Port *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Port::port",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Port,0))){
    SWIG_fail_ptr("Port_port_set",1,SWIGTYPE_p_Port);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->port = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_port_get(lua_State* L) {
  int SWIG_arg = 0;
  Port *arg1 = (Port *) 0 ;
  int result;
  
  SWIG_check_num_args("Port::port",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Port::port",1,"Port *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Port,0))){
    SWIG_fail_ptr("Port_port_get",1,SWIGTYPE_p_Port);
  }
  
  result = (int) ((arg1)->port);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_value_set(lua_State* L) {
  int SWIG_arg = 0;
  Port *arg1 = (Port *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Port::value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Port::value",1,"Port *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Port::value",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Port,0))){
    SWIG_fail_ptr("Port_value_set",1,SWIGTYPE_p_Port);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->value = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_value_get(lua_State* L) {
  int SWIG_arg = 0;
  Port *arg1 = (Port *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Port::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Port::value",1,"Port *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Port,0))){
    SWIG_fail_ptr("Port_value_get",1,SWIGTYPE_p_Port);
  }
  
  result = (DspFloatType) ((arg1)->value);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_p_set(lua_State* L) {
  int SWIG_arg = 0;
  Port *arg1 = (Port *) 0 ;
  SoundProcessor *arg2 = (SoundProcessor *) 0 ;
  
  SWIG_check_num_args("Port::p",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Port::p",1,"Port *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Port::p",2,"SoundProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Port,0))){
    SWIG_fail_ptr("Port_p_set",1,SWIGTYPE_p_Port);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SoundProcessor,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("Port_p_set",2,SWIGTYPE_p_SoundProcessor);
  }
  
  if (arg1) (arg1)->p = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_p_get(lua_State* L) {
  int SWIG_arg = 0;
  Port *arg1 = (Port *) 0 ;
  SoundProcessor *result = 0 ;
  
  SWIG_check_num_args("Port::p",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Port::p",1,"Port *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Port,0))){
    SWIG_fail_ptr("Port_p_get",1,SWIGTYPE_p_Port);
  }
  
  result = (SoundProcessor *) ((arg1)->p);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundProcessor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Port(lua_State* L) {
  int SWIG_arg = 0;
  Port *result = 0 ;
  
  SWIG_check_num_args("Port::Port",0,0)
  result = (Port *)new Port();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Port,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Port(void *obj) {
Port *arg1 = (Port *) obj;
delete arg1;
}
static int _proxy__wrap_new_Port(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Port);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Port_attributes[] = {
    { "port", _wrap_Port_port_get, _wrap_Port_port_set },
    { "value", _wrap_Port_value_get, _wrap_Port_value_set },
    { "p", _wrap_Port_p_get, _wrap_Port_p_set },
    {0,0,0}
};
static swig_lua_method swig_Port_methods[]= {
    {0,0}
};
static swig_lua_method swig_Port_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Port_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Port_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Port_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Port_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Port_Sf_SwigStatic = {
    "Port",
    swig_Port_Sf_SwigStatic_methods,
    swig_Port_Sf_SwigStatic_attributes,
    swig_Port_Sf_SwigStatic_constants,
    swig_Port_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Port_bases[] = {0};
static const char *swig_Port_base_names[] = {0};
static swig_lua_class _wrap_class_Port = { "Port", "Port", &SWIGTYPE_p_Port,_proxy__wrap_new_Port, swig_delete_Port, swig_Port_methods, swig_Port_attributes, &swig_Port_Sf_SwigStatic, swig_Port_meta, swig_Port_bases, swig_Port_base_names };

static int _wrap_Ports_ports_set(lua_State* L) {
  int SWIG_arg = 0;
  Ports *arg1 = (Ports *) 0 ;
  std::list< std::shared_ptr< Port > > *arg2 = (std::list< std::shared_ptr< Port > > *) 0 ;
  
  SWIG_check_num_args("Ports::ports",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ports::ports",1,"Ports *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ports::ports",2,"std::list< std::shared_ptr< Port > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ports,0))){
    SWIG_fail_ptr("Ports_ports_set",1,SWIGTYPE_p_Ports);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__listT_std__shared_ptrT_Port_t_t,0))){
    SWIG_fail_ptr("Ports_ports_set",2,SWIGTYPE_p_std__listT_std__shared_ptrT_Port_t_t);
  }
  
  if (arg1) (arg1)->ports = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ports_ports_get(lua_State* L) {
  int SWIG_arg = 0;
  Ports *arg1 = (Ports *) 0 ;
  std::list< std::shared_ptr< Port > > *result = 0 ;
  
  SWIG_check_num_args("Ports::ports",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ports::ports",1,"Ports *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ports,0))){
    SWIG_fail_ptr("Ports_ports_get",1,SWIGTYPE_p_Ports);
  }
  
  result = (std::list< std::shared_ptr< Port > > *)& ((arg1)->ports);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__listT_std__shared_ptrT_Port_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ports_portmap_set(lua_State* L) {
  int SWIG_arg = 0;
  Ports *arg1 = (Ports *) 0 ;
  Ports::PortMap *arg2 = (Ports::PortMap *) 0 ;
  
  SWIG_check_num_args("Ports::portmap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ports::portmap",1,"Ports *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ports::portmap",2,"Ports::PortMap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ports,0))){
    SWIG_fail_ptr("Ports_portmap_set",1,SWIGTYPE_p_Ports);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__mapT_std__string_Port_p_t,0))){
    SWIG_fail_ptr("Ports_portmap_set",2,SWIGTYPE_p_std__mapT_std__string_Port_p_t);
  }
  
  if (arg1) (arg1)->portmap = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ports_portmap_get(lua_State* L) {
  int SWIG_arg = 0;
  Ports *arg1 = (Ports *) 0 ;
  Ports::PortMap *result = 0 ;
  
  SWIG_check_num_args("Ports::portmap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ports::portmap",1,"Ports *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ports,0))){
    SWIG_fail_ptr("Ports_portmap_get",1,SWIGTYPE_p_Ports);
  }
  
  result = (Ports::PortMap *)& ((arg1)->portmap);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__mapT_std__string_Port_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Ports(lua_State* L) {
  int SWIG_arg = 0;
  Ports *result = 0 ;
  
  SWIG_check_num_args("Ports::Ports",0,0)
  result = (Ports *)new Ports();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ports,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ports_addPort(lua_State* L) {
  int SWIG_arg = 0;
  Ports *arg1 = (Ports *) 0 ;
  std::string *arg2 = 0 ;
  Port *arg3 = (Port *) 0 ;
  
  SWIG_check_num_args("Ports::addPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ports::addPort",1,"Ports *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ports::addPort",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Ports::addPort",3,"Port *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ports,0))){
    SWIG_fail_ptr("Ports_addPort",1,SWIGTYPE_p_Ports);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Ports_addPort",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Port,0))){
    SWIG_fail_ptr("Ports_addPort",3,SWIGTYPE_p_Port);
  }
  
  (arg1)->addPort((std::string const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ports_Run(lua_State* L) {
  int SWIG_arg = 0;
  Ports *arg1 = (Ports *) 0 ;
  
  SWIG_check_num_args("Ports::Run",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ports::Run",1,"Ports *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ports,0))){
    SWIG_fail_ptr("Ports_Run",1,SWIGTYPE_p_Ports);
  }
  
  (arg1)->Run();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Ports(void *obj) {
Ports *arg1 = (Ports *) obj;
delete arg1;
}
static int _proxy__wrap_new_Ports(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Ports);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Ports_attributes[] = {
    { "ports", _wrap_Ports_ports_get, _wrap_Ports_ports_set },
    { "portmap", _wrap_Ports_portmap_get, _wrap_Ports_portmap_set },
    {0,0,0}
};
static swig_lua_method swig_Ports_methods[]= {
    { "addPort", _wrap_Ports_addPort},
    { "Run", _wrap_Ports_Run},
    {0,0}
};
static swig_lua_method swig_Ports_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Ports_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Ports_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Ports_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Ports_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Ports_Sf_SwigStatic = {
    "Ports",
    swig_Ports_Sf_SwigStatic_methods,
    swig_Ports_Sf_SwigStatic_attributes,
    swig_Ports_Sf_SwigStatic_constants,
    swig_Ports_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Ports_bases[] = {0};
static const char *swig_Ports_base_names[] = {0};
static swig_lua_class _wrap_class_Ports = { "Ports", "Ports", &SWIGTYPE_p_Ports,_proxy__wrap_new_Ports, swig_delete_Ports, swig_Ports_methods, swig_Ports_attributes, &swig_Ports_Sf_SwigStatic, swig_Ports_meta, swig_Ports_bases, swig_Ports_base_names };

static int _wrap_MonoProcessor_InplaceProcess(lua_State* L) {
  int SWIG_arg = 0;
  MonoProcessor *arg1 = (MonoProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MonoProcessor::InplaceProcess",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoProcessor::InplaceProcess",1,"MonoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoProcessor::InplaceProcess",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MonoProcessor::InplaceProcess",3,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoProcessor,0))){
    SWIG_fail_ptr("MonoProcessor_InplaceProcess",1,SWIGTYPE_p_MonoProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoProcessor_InplaceProcess",3,SWIGTYPE_p_float);
  }
  
  (arg1)->InplaceProcess(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  MonoProcessor *arg1 = (MonoProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("MonoProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoProcessor::Tick",1,"MonoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MonoProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("MonoProcessor::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("MonoProcessor::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoProcessor,0))){
    SWIG_fail_ptr("MonoProcessor_Tick",1,SWIGTYPE_p_MonoProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  MonoProcessor *arg1 = (MonoProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("MonoProcessor::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoProcessor::Tick",1,"MonoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MonoProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("MonoProcessor::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoProcessor,0))){
    SWIG_fail_ptr("MonoProcessor_Tick",1,SWIGTYPE_p_MonoProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  MonoProcessor *arg1 = (MonoProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("MonoProcessor::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoProcessor::Tick",1,"MonoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MonoProcessor::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoProcessor,0))){
    SWIG_fail_ptr("MonoProcessor_Tick",1,SWIGTYPE_p_MonoProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  MonoProcessor *arg1 = (MonoProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("MonoProcessor::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoProcessor::Tick",1,"MonoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoProcessor::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoProcessor,0))){
    SWIG_fail_ptr("MonoProcessor_Tick",1,SWIGTYPE_p_MonoProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoProcessor_Tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  MonoProcessor *arg1 = (MonoProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("MonoProcessor::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoProcessor::Tick",1,"MonoProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoProcessor,0))){
    SWIG_fail_ptr("MonoProcessor_Tick",1,SWIGTYPE_p_MonoProcessor);
  }
  
  result = (DspFloatType)(arg1)->Tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoProcessor_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MonoProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_MonoProcessor_Tick__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MonoProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MonoProcessor_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MonoProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_MonoProcessor_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MonoProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_MonoProcessor_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MonoProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_MonoProcessor_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MonoProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    MonoProcessor::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    MonoProcessor::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    MonoProcessor::Tick(DspFloatType,DspFloatType)\n"
    "    MonoProcessor::Tick(DspFloatType)\n"
    "    MonoProcessor::Tick()\n");
  lua_error(L);return 0;
}


static int _wrap_MonoProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  MonoProcessor *arg1 = (MonoProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MonoProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoProcessor::ProcessBlock",1,"MonoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MonoProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MonoProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoProcessor,0))){
    SWIG_fail_ptr("MonoProcessor_ProcessBlock",1,SWIGTYPE_p_MonoProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoProcessor_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoProcessor_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoProcessor(void *obj) {
MonoProcessor *arg1 = (MonoProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_MonoProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MonoProcessor_methods[]= {
    { "InplaceProcess", _wrap_MonoProcessor_InplaceProcess},
    { "Tick", _wrap_MonoProcessor_Tick},
    { "ProcessBlock", _wrap_MonoProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_MonoProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoProcessor_Sf_SwigStatic = {
    "MonoProcessor",
    swig_MonoProcessor_Sf_SwigStatic_methods,
    swig_MonoProcessor_Sf_SwigStatic_attributes,
    swig_MonoProcessor_Sf_SwigStatic_constants,
    swig_MonoProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoProcessor_bases[] = {0,0};
static const char *swig_MonoProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_MonoProcessor = { "MonoProcessor", "MonoProcessor", &SWIGTYPE_p_MonoProcessor,0, swig_delete_MonoProcessor, swig_MonoProcessor_methods, swig_MonoProcessor_attributes, &swig_MonoProcessor_Sf_SwigStatic, swig_MonoProcessor_meta, swig_MonoProcessor_bases, swig_MonoProcessor_base_names };

static int _wrap_MonoCascadeProcessor_procs_set(lua_State* L) {
  int SWIG_arg = 0;
  MonoCascadeProcessor *arg1 = (MonoCascadeProcessor *) 0 ;
  std::list< MonoProcessor * > *arg2 = (std::list< MonoProcessor * > *) 0 ;
  
  SWIG_check_num_args("MonoCascadeProcessor::procs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoCascadeProcessor::procs",1,"MonoCascadeProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("MonoCascadeProcessor::procs",2,"std::list< MonoProcessor * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoCascadeProcessor,0))){
    SWIG_fail_ptr("MonoCascadeProcessor_procs_set",1,SWIGTYPE_p_MonoCascadeProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__listT_MonoProcessor_p_t,0))){
    SWIG_fail_ptr("MonoCascadeProcessor_procs_set",2,SWIGTYPE_p_std__listT_MonoProcessor_p_t);
  }
  
  if (arg1) (arg1)->procs = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoCascadeProcessor_procs_get(lua_State* L) {
  int SWIG_arg = 0;
  MonoCascadeProcessor *arg1 = (MonoCascadeProcessor *) 0 ;
  std::list< MonoProcessor * > *result = 0 ;
  
  SWIG_check_num_args("MonoCascadeProcessor::procs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoCascadeProcessor::procs",1,"MonoCascadeProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoCascadeProcessor,0))){
    SWIG_fail_ptr("MonoCascadeProcessor_procs_get",1,SWIGTYPE_p_MonoCascadeProcessor);
  }
  
  result = (std::list< MonoProcessor * > *)& ((arg1)->procs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__listT_MonoProcessor_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MonoCascadeProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MonoCascadeProcessor *result = 0 ;
  
  SWIG_check_num_args("MonoCascadeProcessor::MonoCascadeProcessor",0,0)
  result = (MonoCascadeProcessor *)new MonoCascadeProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MonoCascadeProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoCascadeProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  MonoCascadeProcessor *arg1 = (MonoCascadeProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("MonoCascadeProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoCascadeProcessor::getType",1,"MonoCascadeProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoCascadeProcessor,0))){
    SWIG_fail_ptr("MonoCascadeProcessor_getType",1,SWIGTYPE_p_MonoCascadeProcessor);
  }
  
  result = (ObjectType)((MonoCascadeProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoCascadeProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  MonoCascadeProcessor *arg1 = (MonoCascadeProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MonoCascadeProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoCascadeProcessor::ProcessBlock",1,"MonoCascadeProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoCascadeProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MonoCascadeProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MonoCascadeProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoCascadeProcessor,0))){
    SWIG_fail_ptr("MonoCascadeProcessor_ProcessBlock",1,SWIGTYPE_p_MonoCascadeProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoCascadeProcessor_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoCascadeProcessor_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoCascadeProcessor(void *obj) {
MonoCascadeProcessor *arg1 = (MonoCascadeProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoCascadeProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoCascadeProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoCascadeProcessor_attributes[] = {
    { "procs", _wrap_MonoCascadeProcessor_procs_get, _wrap_MonoCascadeProcessor_procs_set },
    {0,0,0}
};
static swig_lua_method swig_MonoCascadeProcessor_methods[]= {
    { "getType", _wrap_MonoCascadeProcessor_getType},
    { "ProcessBlock", _wrap_MonoCascadeProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_MonoCascadeProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoCascadeProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoCascadeProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoCascadeProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoCascadeProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoCascadeProcessor_Sf_SwigStatic = {
    "MonoCascadeProcessor",
    swig_MonoCascadeProcessor_Sf_SwigStatic_methods,
    swig_MonoCascadeProcessor_Sf_SwigStatic_attributes,
    swig_MonoCascadeProcessor_Sf_SwigStatic_constants,
    swig_MonoCascadeProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoCascadeProcessor_bases[] = {0,0};
static const char *swig_MonoCascadeProcessor_base_names[] = {"MonoProcessor *",0};
static swig_lua_class _wrap_class_MonoCascadeProcessor = { "MonoCascadeProcessor", "MonoCascadeProcessor", &SWIGTYPE_p_MonoCascadeProcessor,_proxy__wrap_new_MonoCascadeProcessor, swig_delete_MonoCascadeProcessor, swig_MonoCascadeProcessor_methods, swig_MonoCascadeProcessor_attributes, &swig_MonoCascadeProcessor_Sf_SwigStatic, swig_MonoCascadeProcessor_meta, swig_MonoCascadeProcessor_bases, swig_MonoCascadeProcessor_base_names };

static int _wrap_StereoProcessor_pan_set(lua_State* L) {
  int SWIG_arg = 0;
  StereoProcessor *arg1 = (StereoProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("StereoProcessor::pan",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoProcessor::pan",1,"StereoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoProcessor::pan",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoProcessor,0))){
    SWIG_fail_ptr("StereoProcessor_pan_set",1,SWIGTYPE_p_StereoProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->pan = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoProcessor_pan_get(lua_State* L) {
  int SWIG_arg = 0;
  StereoProcessor *arg1 = (StereoProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoProcessor::pan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoProcessor::pan",1,"StereoProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoProcessor,0))){
    SWIG_fail_ptr("StereoProcessor_pan_get",1,SWIGTYPE_p_StereoProcessor);
  }
  
  result = (DspFloatType) ((arg1)->pan);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  StereoProcessor *arg1 = (StereoProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType **arg3 = (DspFloatType **) 0 ;
  DspFloatType **arg4 = (DspFloatType **) 0 ;
  
  SWIG_check_num_args("StereoProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoProcessor::ProcessBlock",1,"StereoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoProcessor::ProcessBlock",3,"DspFloatType **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("StereoProcessor::ProcessBlock",4,"DspFloatType **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoProcessor,0))){
    SWIG_fail_ptr("StereoProcessor_ProcessBlock",1,SWIGTYPE_p_StereoProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoProcessor_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoProcessor_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  StereoProcessor *arg1 = (StereoProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType arg8 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoProcessor::Tick",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoProcessor::Tick",1,"StereoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoProcessor::Tick",7,"DspFloatType");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("StereoProcessor::Tick",8,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoProcessor,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",1,SWIGTYPE_p_StereoProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  arg8 = (DspFloatType)lua_tonumber(L, 8);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  StereoProcessor *arg1 = (StereoProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoProcessor::Tick",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoProcessor::Tick",1,"StereoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoProcessor::Tick",7,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoProcessor,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",1,SWIGTYPE_p_StereoProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  StereoProcessor *arg1 = (StereoProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoProcessor::Tick",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoProcessor::Tick",1,"StereoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoProcessor::Tick",6,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoProcessor,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",1,SWIGTYPE_p_StereoProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  StereoProcessor *arg1 = (StereoProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoProcessor::Tick",1,"StereoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoProcessor::Tick",5,"DspFloatType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoProcessor,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",1,SWIGTYPE_p_StereoProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoProcessor_Tick(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_StereoProcessor_Tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_StereoProcessor_Tick__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_StereoProcessor_Tick__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_StereoProcessor_Tick__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    StereoProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType,DspFloatType)\n"
    "    StereoProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType)\n"
    "    StereoProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType)\n"
    "    StereoProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoProcessor_InplaceProcess(lua_State* L) {
  int SWIG_arg = 0;
  StereoProcessor *arg1 = (StereoProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType **arg3 = (DspFloatType **) 0 ;
  
  SWIG_check_num_args("StereoProcessor::InplaceProcess",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoProcessor::InplaceProcess",1,"StereoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoProcessor::InplaceProcess",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoProcessor::InplaceProcess",3,"DspFloatType **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoProcessor,0))){
    SWIG_fail_ptr("StereoProcessor_InplaceProcess",1,SWIGTYPE_p_StereoProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoProcessor_InplaceProcess",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->InplaceProcess(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoProcessor_Run(lua_State* L) {
  int SWIG_arg = 0;
  StereoProcessor *arg1 = (StereoProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType **arg3 = (DspFloatType **) 0 ;
  DspFloatType **arg4 = (DspFloatType **) 0 ;
  
  SWIG_check_num_args("StereoProcessor::Run",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoProcessor::Run",1,"StereoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoProcessor::Run",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoProcessor::Run",3,"DspFloatType **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("StereoProcessor::Run",4,"DspFloatType **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoProcessor,0))){
    SWIG_fail_ptr("StereoProcessor_Run",1,SWIGTYPE_p_StereoProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoProcessor_Run",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoProcessor_Run",4,SWIGTYPE_p_p_float);
  }
  
  (arg1)->Run(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoProcessor(void *obj) {
StereoProcessor *arg1 = (StereoProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_StereoProcessor_attributes[] = {
    { "pan", _wrap_StereoProcessor_pan_get, _wrap_StereoProcessor_pan_set },
    {0,0,0}
};
static swig_lua_method swig_StereoProcessor_methods[]= {
    { "ProcessBlock", _wrap_StereoProcessor_ProcessBlock},
    { "Tick", _wrap_StereoProcessor_Tick},
    { "InplaceProcess", _wrap_StereoProcessor_InplaceProcess},
    { "Run", _wrap_StereoProcessor_Run},
    {0,0}
};
static swig_lua_method swig_StereoProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoProcessor_Sf_SwigStatic = {
    "StereoProcessor",
    swig_StereoProcessor_Sf_SwigStatic_methods,
    swig_StereoProcessor_Sf_SwigStatic_attributes,
    swig_StereoProcessor_Sf_SwigStatic_constants,
    swig_StereoProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoProcessor_bases[] = {0,0};
static const char *swig_StereoProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_StereoProcessor = { "StereoProcessor", "StereoProcessor", &SWIGTYPE_p_StereoProcessor,0, swig_delete_StereoProcessor, swig_StereoProcessor_methods, swig_StereoProcessor_attributes, &swig_StereoProcessor_Sf_SwigStatic, swig_StereoProcessor_meta, swig_StereoProcessor_bases, swig_StereoProcessor_base_names };

static int _wrap_StereoCascadeProcessor_procs_set(lua_State* L) {
  int SWIG_arg = 0;
  StereoCascadeProcessor *arg1 = (StereoCascadeProcessor *) 0 ;
  std::list< StereoProcessor * > *arg2 = (std::list< StereoProcessor * > *) 0 ;
  
  SWIG_check_num_args("StereoCascadeProcessor::procs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoCascadeProcessor::procs",1,"StereoCascadeProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("StereoCascadeProcessor::procs",2,"std::list< StereoProcessor * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoCascadeProcessor,0))){
    SWIG_fail_ptr("StereoCascadeProcessor_procs_set",1,SWIGTYPE_p_StereoCascadeProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__listT_StereoProcessor_p_t,0))){
    SWIG_fail_ptr("StereoCascadeProcessor_procs_set",2,SWIGTYPE_p_std__listT_StereoProcessor_p_t);
  }
  
  if (arg1) (arg1)->procs = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoCascadeProcessor_procs_get(lua_State* L) {
  int SWIG_arg = 0;
  StereoCascadeProcessor *arg1 = (StereoCascadeProcessor *) 0 ;
  std::list< StereoProcessor * > *result = 0 ;
  
  SWIG_check_num_args("StereoCascadeProcessor::procs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoCascadeProcessor::procs",1,"StereoCascadeProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoCascadeProcessor,0))){
    SWIG_fail_ptr("StereoCascadeProcessor_procs_get",1,SWIGTYPE_p_StereoCascadeProcessor);
  }
  
  result = (std::list< StereoProcessor * > *)& ((arg1)->procs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__listT_StereoProcessor_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StereoCascadeProcessor(lua_State* L) {
  int SWIG_arg = 0;
  StereoCascadeProcessor *result = 0 ;
  
  SWIG_check_num_args("StereoCascadeProcessor::StereoCascadeProcessor",0,0)
  result = (StereoCascadeProcessor *)new StereoCascadeProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StereoCascadeProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoCascadeProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  StereoCascadeProcessor *arg1 = (StereoCascadeProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("StereoCascadeProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoCascadeProcessor::getType",1,"StereoCascadeProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoCascadeProcessor,0))){
    SWIG_fail_ptr("StereoCascadeProcessor_getType",1,SWIGTYPE_p_StereoCascadeProcessor);
  }
  
  result = (ObjectType)((StereoCascadeProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoCascadeProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  StereoCascadeProcessor *arg1 = (StereoCascadeProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType **arg3 = (DspFloatType **) 0 ;
  DspFloatType **arg4 = (DspFloatType **) 0 ;
  
  SWIG_check_num_args("StereoCascadeProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoCascadeProcessor::ProcessBlock",1,"StereoCascadeProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoCascadeProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoCascadeProcessor::ProcessBlock",3,"DspFloatType **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("StereoCascadeProcessor::ProcessBlock",4,"DspFloatType **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoCascadeProcessor,0))){
    SWIG_fail_ptr("StereoCascadeProcessor_ProcessBlock",1,SWIGTYPE_p_StereoCascadeProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoCascadeProcessor_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoCascadeProcessor_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoCascadeProcessor(void *obj) {
StereoCascadeProcessor *arg1 = (StereoCascadeProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoCascadeProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoCascadeProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoCascadeProcessor_attributes[] = {
    { "procs", _wrap_StereoCascadeProcessor_procs_get, _wrap_StereoCascadeProcessor_procs_set },
    {0,0,0}
};
static swig_lua_method swig_StereoCascadeProcessor_methods[]= {
    { "getType", _wrap_StereoCascadeProcessor_getType},
    { "ProcessBlock", _wrap_StereoCascadeProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_StereoCascadeProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoCascadeProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoCascadeProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoCascadeProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoCascadeProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoCascadeProcessor_Sf_SwigStatic = {
    "StereoCascadeProcessor",
    swig_StereoCascadeProcessor_Sf_SwigStatic_methods,
    swig_StereoCascadeProcessor_Sf_SwigStatic_attributes,
    swig_StereoCascadeProcessor_Sf_SwigStatic_constants,
    swig_StereoCascadeProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoCascadeProcessor_bases[] = {0,0};
static const char *swig_StereoCascadeProcessor_base_names[] = {"StereoProcessor *",0};
static swig_lua_class _wrap_class_StereoCascadeProcessor = { "StereoCascadeProcessor", "StereoCascadeProcessor", &SWIGTYPE_p_StereoCascadeProcessor,_proxy__wrap_new_StereoCascadeProcessor, swig_delete_StereoCascadeProcessor, swig_StereoCascadeProcessor_methods, swig_StereoCascadeProcessor_attributes, &swig_StereoCascadeProcessor_Sf_SwigStatic, swig_StereoCascadeProcessor_meta, swig_StereoCascadeProcessor_bases, swig_StereoCascadeProcessor_base_names };

static int _wrap_MonoFXProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  MonoFXProcessor *arg1 = (MonoFXProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("MonoFXProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoFXProcessor::getType",1,"MonoFXProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoFXProcessor,0))){
    SWIG_fail_ptr("MonoFXProcessor_getType",1,SWIGTYPE_p_MonoFXProcessor);
  }
  
  result = (ObjectType)((MonoFXProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoFXProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  MonoFXProcessor *arg1 = (MonoFXProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MonoFXProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoFXProcessor::ProcessBlock",1,"MonoFXProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoFXProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MonoFXProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MonoFXProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoFXProcessor,0))){
    SWIG_fail_ptr("MonoFXProcessor_ProcessBlock",1,SWIGTYPE_p_MonoFXProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoFXProcessor_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoFXProcessor_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoFXProcessor(void *obj) {
MonoFXProcessor *arg1 = (MonoFXProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_MonoFXProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MonoFXProcessor_methods[]= {
    { "getType", _wrap_MonoFXProcessor_getType},
    { "ProcessBlock", _wrap_MonoFXProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_MonoFXProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoFXProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoFXProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoFXProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoFXProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoFXProcessor_Sf_SwigStatic = {
    "MonoFXProcessor",
    swig_MonoFXProcessor_Sf_SwigStatic_methods,
    swig_MonoFXProcessor_Sf_SwigStatic_attributes,
    swig_MonoFXProcessor_Sf_SwigStatic_constants,
    swig_MonoFXProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoFXProcessor_bases[] = {0,0};
static const char *swig_MonoFXProcessor_base_names[] = {"MonoProcessor *",0};
static swig_lua_class _wrap_class_MonoFXProcessor = { "MonoFXProcessor", "MonoFXProcessor", &SWIGTYPE_p_MonoFXProcessor,0, swig_delete_MonoFXProcessor, swig_MonoFXProcessor_methods, swig_MonoFXProcessor_attributes, &swig_MonoFXProcessor_Sf_SwigStatic, swig_MonoFXProcessor_meta, swig_MonoFXProcessor_bases, swig_MonoFXProcessor_base_names };

static int _wrap_StereoFXProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  StereoFXProcessor *arg1 = (StereoFXProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("StereoFXProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFXProcessor::getType",1,"StereoFXProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFXProcessor,0))){
    SWIG_fail_ptr("StereoFXProcessor_getType",1,SWIGTYPE_p_StereoFXProcessor);
  }
  
  result = (ObjectType)((StereoFXProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFXProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  StereoFXProcessor *arg1 = (StereoFXProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType **arg3 = (DspFloatType **) 0 ;
  DspFloatType **arg4 = (DspFloatType **) 0 ;
  
  SWIG_check_num_args("StereoFXProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFXProcessor::ProcessBlock",1,"StereoFXProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoFXProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoFXProcessor::ProcessBlock",3,"DspFloatType **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("StereoFXProcessor::ProcessBlock",4,"DspFloatType **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFXProcessor,0))){
    SWIG_fail_ptr("StereoFXProcessor_ProcessBlock",1,SWIGTYPE_p_StereoFXProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoFXProcessor_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoFXProcessor_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoFXProcessor(void *obj) {
StereoFXProcessor *arg1 = (StereoFXProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_StereoFXProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoFXProcessor_methods[]= {
    { "getType", _wrap_StereoFXProcessor_getType},
    { "ProcessBlock", _wrap_StereoFXProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_StereoFXProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoFXProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoFXProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoFXProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoFXProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoFXProcessor_Sf_SwigStatic = {
    "StereoFXProcessor",
    swig_StereoFXProcessor_Sf_SwigStatic_methods,
    swig_StereoFXProcessor_Sf_SwigStatic_attributes,
    swig_StereoFXProcessor_Sf_SwigStatic_constants,
    swig_StereoFXProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoFXProcessor_bases[] = {0,0};
static const char *swig_StereoFXProcessor_base_names[] = {"StereoProcessor *",0};
static swig_lua_class _wrap_class_StereoFXProcessor = { "StereoFXProcessor", "StereoFXProcessor", &SWIGTYPE_p_StereoFXProcessor,0, swig_delete_StereoFXProcessor, swig_StereoFXProcessor_methods, swig_StereoFXProcessor_attributes, &swig_StereoFXProcessor_Sf_SwigStatic, swig_StereoFXProcessor_meta, swig_StereoFXProcessor_bases, swig_StereoFXProcessor_base_names };

static int _wrap_GeneratorProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  GeneratorProcessor *arg1 = (GeneratorProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("GeneratorProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeneratorProcessor::getType",1,"GeneratorProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeneratorProcessor,0))){
    SWIG_fail_ptr("GeneratorProcessor_getType",1,SWIGTYPE_p_GeneratorProcessor);
  }
  
  result = (ObjectType)((GeneratorProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  GeneratorProcessor *arg1 = (GeneratorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("GeneratorProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeneratorProcessor::Tick",1,"GeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeneratorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("GeneratorProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("GeneratorProcessor::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("GeneratorProcessor::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeneratorProcessor,0))){
    SWIG_fail_ptr("GeneratorProcessor_Tick",1,SWIGTYPE_p_GeneratorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  GeneratorProcessor *arg1 = (GeneratorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("GeneratorProcessor::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeneratorProcessor::Tick",1,"GeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeneratorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("GeneratorProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("GeneratorProcessor::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeneratorProcessor,0))){
    SWIG_fail_ptr("GeneratorProcessor_Tick",1,SWIGTYPE_p_GeneratorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  GeneratorProcessor *arg1 = (GeneratorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("GeneratorProcessor::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeneratorProcessor::Tick",1,"GeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeneratorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("GeneratorProcessor::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeneratorProcessor,0))){
    SWIG_fail_ptr("GeneratorProcessor_Tick",1,SWIGTYPE_p_GeneratorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  GeneratorProcessor *arg1 = (GeneratorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("GeneratorProcessor::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeneratorProcessor::Tick",1,"GeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeneratorProcessor::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeneratorProcessor,0))){
    SWIG_fail_ptr("GeneratorProcessor_Tick",1,SWIGTYPE_p_GeneratorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorProcessor_Tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  GeneratorProcessor *arg1 = (GeneratorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("GeneratorProcessor::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeneratorProcessor::Tick",1,"GeneratorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeneratorProcessor,0))){
    SWIG_fail_ptr("GeneratorProcessor_Tick",1,SWIGTYPE_p_GeneratorProcessor);
  }
  
  result = (DspFloatType)(arg1)->Tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorProcessor_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GeneratorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_GeneratorProcessor_Tick__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GeneratorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_GeneratorProcessor_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GeneratorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_GeneratorProcessor_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GeneratorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_GeneratorProcessor_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GeneratorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_GeneratorProcessor_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GeneratorProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    GeneratorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    GeneratorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    GeneratorProcessor::Tick(DspFloatType,DspFloatType)\n"
    "    GeneratorProcessor::Tick(DspFloatType)\n"
    "    GeneratorProcessor::Tick()\n");
  lua_error(L);return 0;
}


static int _wrap_GeneratorProcessor_Generate(lua_State* L) {
  int SWIG_arg = 0;
  GeneratorProcessor *arg1 = (GeneratorProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("GeneratorProcessor::Generate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeneratorProcessor::Generate",1,"GeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeneratorProcessor::Generate",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("GeneratorProcessor::Generate",3,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeneratorProcessor,0))){
    SWIG_fail_ptr("GeneratorProcessor_Generate",1,SWIGTYPE_p_GeneratorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("GeneratorProcessor_Generate",3,SWIGTYPE_p_float);
  }
  
  (arg1)->Generate(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  GeneratorProcessor *arg1 = (GeneratorProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("GeneratorProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeneratorProcessor::ProcessBlock",1,"GeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeneratorProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("GeneratorProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("GeneratorProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeneratorProcessor,0))){
    SWIG_fail_ptr("GeneratorProcessor_ProcessBlock",1,SWIGTYPE_p_GeneratorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("GeneratorProcessor_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("GeneratorProcessor_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GeneratorProcessor(void *obj) {
GeneratorProcessor *arg1 = (GeneratorProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_GeneratorProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_GeneratorProcessor_methods[]= {
    { "getType", _wrap_GeneratorProcessor_getType},
    { "Tick", _wrap_GeneratorProcessor_Tick},
    { "Generate", _wrap_GeneratorProcessor_Generate},
    { "ProcessBlock", _wrap_GeneratorProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_GeneratorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_GeneratorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_GeneratorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_GeneratorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_GeneratorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_GeneratorProcessor_Sf_SwigStatic = {
    "GeneratorProcessor",
    swig_GeneratorProcessor_Sf_SwigStatic_methods,
    swig_GeneratorProcessor_Sf_SwigStatic_attributes,
    swig_GeneratorProcessor_Sf_SwigStatic_constants,
    swig_GeneratorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_GeneratorProcessor_bases[] = {0,0};
static const char *swig_GeneratorProcessor_base_names[] = {"MonoProcessor *",0};
static swig_lua_class _wrap_class_GeneratorProcessor = { "GeneratorProcessor", "GeneratorProcessor", &SWIGTYPE_p_GeneratorProcessor,0, swig_delete_GeneratorProcessor, swig_GeneratorProcessor_methods, swig_GeneratorProcessor_attributes, &swig_GeneratorProcessor_Sf_SwigStatic, swig_GeneratorProcessor_meta, swig_GeneratorProcessor_bases, swig_GeneratorProcessor_base_names };

static int _wrap_new_MixerProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MixerProcessor *result = 0 ;
  
  SWIG_check_num_args("MixerProcessor::MixerProcessor",0,0)
  result = (MixerProcessor *)new MixerProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MixerProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MixerProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  MixerProcessor *arg1 = (MixerProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("MixerProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MixerProcessor::getType",1,"MixerProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MixerProcessor,0))){
    SWIG_fail_ptr("MixerProcessor_getType",1,SWIGTYPE_p_MixerProcessor);
  }
  
  result = (ObjectType)((MixerProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MixerProcessor_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  MixerProcessor *arg1 = (MixerProcessor *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  DspFloatType **arg4 = (DspFloatType **) 0 ;
  DspFloatType *arg5 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MixerProcessor::ProcessBlock",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MixerProcessor::ProcessBlock",1,"MixerProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MixerProcessor::ProcessBlock",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MixerProcessor::ProcessBlock",3,"size_t");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MixerProcessor::ProcessBlock",4,"DspFloatType **");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("MixerProcessor::ProcessBlock",5,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MixerProcessor,0))){
    SWIG_fail_ptr("MixerProcessor_ProcessBlock",1,SWIGTYPE_p_MixerProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("MixerProcessor_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MixerProcessor_ProcessBlock",5,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MixerProcessor_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  MixerProcessor *arg1 = (MixerProcessor *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  DspFloatType **arg4 = (DspFloatType **) 0 ;
  DspFloatType **arg5 = (DspFloatType **) 0 ;
  
  SWIG_check_num_args("MixerProcessor::ProcessBlock",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MixerProcessor::ProcessBlock",1,"MixerProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MixerProcessor::ProcessBlock",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MixerProcessor::ProcessBlock",3,"size_t");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MixerProcessor::ProcessBlock",4,"DspFloatType **");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("MixerProcessor::ProcessBlock",5,"DspFloatType **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MixerProcessor,0))){
    SWIG_fail_ptr("MixerProcessor_ProcessBlock",1,SWIGTYPE_p_MixerProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("MixerProcessor_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("MixerProcessor_ProcessBlock",5,SWIGTYPE_p_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MixerProcessor_ProcessBlock(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MixerProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_MixerProcessor_ProcessBlock__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MixerProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_MixerProcessor_ProcessBlock__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MixerProcessor_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    MixerProcessor::ProcessBlock(size_t,size_t,DspFloatType **,DspFloatType *)\n"
    "    MixerProcessor::ProcessBlock(size_t,size_t,DspFloatType **,DspFloatType **)\n");
  lua_error(L);return 0;
}


static void swig_delete_MixerProcessor(void *obj) {
MixerProcessor *arg1 = (MixerProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MixerProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MixerProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MixerProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MixerProcessor_methods[]= {
    { "getType", _wrap_MixerProcessor_getType},
    { "ProcessBlock", _wrap_MixerProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_MixerProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MixerProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MixerProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MixerProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MixerProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MixerProcessor_Sf_SwigStatic = {
    "MixerProcessor",
    swig_MixerProcessor_Sf_SwigStatic_methods,
    swig_MixerProcessor_Sf_SwigStatic_attributes,
    swig_MixerProcessor_Sf_SwigStatic_constants,
    swig_MixerProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MixerProcessor_bases[] = {0,0};
static const char *swig_MixerProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_MixerProcessor = { "MixerProcessor", "MixerProcessor", &SWIGTYPE_p_MixerProcessor,_proxy__wrap_new_MixerProcessor, swig_delete_MixerProcessor, swig_MixerProcessor_methods, swig_MixerProcessor_attributes, &swig_MixerProcessor_Sf_SwigStatic, swig_MixerProcessor_meta, swig_MixerProcessor_bases, swig_MixerProcessor_base_names };

static int _wrap_FunctionProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  FunctionProcessor *arg1 = (FunctionProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("FunctionProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FunctionProcessor::getType",1,"FunctionProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FunctionProcessor,0))){
    SWIG_fail_ptr("FunctionProcessor_getType",1,SWIGTYPE_p_FunctionProcessor);
  }
  
  result = (ObjectType)((FunctionProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FunctionProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FunctionProcessor *arg1 = (FunctionProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("FunctionProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FunctionProcessor::Tick",1,"FunctionProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FunctionProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FunctionProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FunctionProcessor::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("FunctionProcessor::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FunctionProcessor,0))){
    SWIG_fail_ptr("FunctionProcessor_Tick",1,SWIGTYPE_p_FunctionProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FunctionProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FunctionProcessor *arg1 = (FunctionProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("FunctionProcessor::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FunctionProcessor::Tick",1,"FunctionProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FunctionProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FunctionProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FunctionProcessor::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FunctionProcessor,0))){
    SWIG_fail_ptr("FunctionProcessor_Tick",1,SWIGTYPE_p_FunctionProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FunctionProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FunctionProcessor *arg1 = (FunctionProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("FunctionProcessor::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FunctionProcessor::Tick",1,"FunctionProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FunctionProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FunctionProcessor::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FunctionProcessor,0))){
    SWIG_fail_ptr("FunctionProcessor_Tick",1,SWIGTYPE_p_FunctionProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FunctionProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FunctionProcessor *arg1 = (FunctionProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("FunctionProcessor::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FunctionProcessor::Tick",1,"FunctionProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FunctionProcessor::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FunctionProcessor,0))){
    SWIG_fail_ptr("FunctionProcessor_Tick",1,SWIGTYPE_p_FunctionProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FunctionProcessor_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FunctionProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FunctionProcessor_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FunctionProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FunctionProcessor_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FunctionProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FunctionProcessor_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FunctionProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_FunctionProcessor_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FunctionProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FunctionProcessor::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    FunctionProcessor::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    FunctionProcessor::Tick(DspFloatType,DspFloatType)\n"
    "    FunctionProcessor::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_FunctionProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  FunctionProcessor *arg1 = (FunctionProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("FunctionProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FunctionProcessor::ProcessBlock",1,"FunctionProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FunctionProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("FunctionProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("FunctionProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FunctionProcessor,0))){
    SWIG_fail_ptr("FunctionProcessor_ProcessBlock",1,SWIGTYPE_p_FunctionProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FunctionProcessor_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FunctionProcessor_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FunctionProcessor(void *obj) {
FunctionProcessor *arg1 = (FunctionProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_FunctionProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FunctionProcessor_methods[]= {
    { "getType", _wrap_FunctionProcessor_getType},
    { "Tick", _wrap_FunctionProcessor_Tick},
    { "ProcessBlock", _wrap_FunctionProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_FunctionProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FunctionProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FunctionProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FunctionProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FunctionProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FunctionProcessor_Sf_SwigStatic = {
    "FunctionProcessor",
    swig_FunctionProcessor_Sf_SwigStatic_methods,
    swig_FunctionProcessor_Sf_SwigStatic_attributes,
    swig_FunctionProcessor_Sf_SwigStatic_constants,
    swig_FunctionProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FunctionProcessor_bases[] = {0,0};
static const char *swig_FunctionProcessor_base_names[] = {"MonoProcessor *",0};
static swig_lua_class _wrap_class_FunctionProcessor = { "FunctionProcessor", "FunctionProcessor", &SWIGTYPE_p_FunctionProcessor,0, swig_delete_FunctionProcessor, swig_FunctionProcessor_methods, swig_FunctionProcessor_attributes, &swig_FunctionProcessor_Sf_SwigStatic, swig_FunctionProcessor_meta, swig_FunctionProcessor_bases, swig_FunctionProcessor_base_names };

static int _wrap_Parameter2Processor_getType(lua_State* L) {
  int SWIG_arg = 0;
  Parameter2Processor *arg1 = (Parameter2Processor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("Parameter2Processor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Parameter2Processor::getType",1,"Parameter2Processor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Parameter2Processor,0))){
    SWIG_fail_ptr("Parameter2Processor_getType",1,SWIGTYPE_p_Parameter2Processor);
  }
  
  result = (ObjectType)((Parameter2Processor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Parameter2Processor_Tick(lua_State* L) {
  int SWIG_arg = 0;
  Parameter2Processor *arg1 = (Parameter2Processor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Parameter2Processor::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Parameter2Processor::Tick",1,"Parameter2Processor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Parameter2Processor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Parameter2Processor::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Parameter2Processor,0))){
    SWIG_fail_ptr("Parameter2Processor_Tick",1,SWIGTYPE_p_Parameter2Processor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Parameter2Processor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  Parameter2Processor *arg1 = (Parameter2Processor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  DspFloatType *arg5 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Parameter2Processor::ProcessBlock",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Parameter2Processor::ProcessBlock",1,"Parameter2Processor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Parameter2Processor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Parameter2Processor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Parameter2Processor::ProcessBlock",4,"DspFloatType *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Parameter2Processor::ProcessBlock",5,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Parameter2Processor,0))){
    SWIG_fail_ptr("Parameter2Processor_ProcessBlock",1,SWIGTYPE_p_Parameter2Processor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Parameter2Processor_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Parameter2Processor_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Parameter2Processor_ProcessBlock",5,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Parameter2Processor(void *obj) {
Parameter2Processor *arg1 = (Parameter2Processor *) obj;
delete arg1;
}
static swig_lua_attribute swig_Parameter2Processor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Parameter2Processor_methods[]= {
    { "getType", _wrap_Parameter2Processor_getType},
    { "Tick", _wrap_Parameter2Processor_Tick},
    { "ProcessBlock", _wrap_Parameter2Processor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_Parameter2Processor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Parameter2Processor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Parameter2Processor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Parameter2Processor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Parameter2Processor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Parameter2Processor_Sf_SwigStatic = {
    "Parameter2Processor",
    swig_Parameter2Processor_Sf_SwigStatic_methods,
    swig_Parameter2Processor_Sf_SwigStatic_attributes,
    swig_Parameter2Processor_Sf_SwigStatic_constants,
    swig_Parameter2Processor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Parameter2Processor_bases[] = {0,0};
static const char *swig_Parameter2Processor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_Parameter2Processor = { "Parameter2Processor", "Parameter2Processor", &SWIGTYPE_p_Parameter2Processor,0, swig_delete_Parameter2Processor, swig_Parameter2Processor_methods, swig_Parameter2Processor_attributes, &swig_Parameter2Processor_Sf_SwigStatic, swig_Parameter2Processor_meta, swig_Parameter2Processor_bases, swig_Parameter2Processor_base_names };

static int _wrap_StereoSplitterProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  StereoSplitterProcessor *arg1 = (StereoSplitterProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("StereoSplitterProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoSplitterProcessor::getType",1,"StereoSplitterProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoSplitterProcessor,0))){
    SWIG_fail_ptr("StereoSplitterProcessor_getType",1,SWIGTYPE_p_StereoSplitterProcessor);
  }
  
  result = (ObjectType)((StereoSplitterProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoSplitterProcessor_Tick(lua_State* L) {
  int SWIG_arg = 0;
  StereoSplitterProcessor *arg1 = (StereoSplitterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType *arg3 = 0 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoSplitterProcessor::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoSplitterProcessor::Tick",1,"StereoSplitterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoSplitterProcessor::Tick",2,"DspFloatType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("StereoSplitterProcessor::Tick",3,"DspFloatType &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoSplitterProcessor::Tick",4,"DspFloatType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoSplitterProcessor,0))){
    SWIG_fail_ptr("StereoSplitterProcessor_Tick",1,SWIGTYPE_p_StereoSplitterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoSplitterProcessor_Tick",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoSplitterProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  result = (DspFloatType)(arg1)->Tick(arg2,*arg3,*arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoSplitterProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  StereoSplitterProcessor *arg1 = (StereoSplitterProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  DspFloatType *arg5 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("StereoSplitterProcessor::ProcessBlock",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoSplitterProcessor::ProcessBlock",1,"StereoSplitterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoSplitterProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoSplitterProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("StereoSplitterProcessor::ProcessBlock",4,"DspFloatType *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("StereoSplitterProcessor::ProcessBlock",5,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoSplitterProcessor,0))){
    SWIG_fail_ptr("StereoSplitterProcessor_ProcessBlock",1,SWIGTYPE_p_StereoSplitterProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoSplitterProcessor_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoSplitterProcessor_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoSplitterProcessor_ProcessBlock",5,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoSplitterProcessor(void *obj) {
StereoSplitterProcessor *arg1 = (StereoSplitterProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_StereoSplitterProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoSplitterProcessor_methods[]= {
    { "getType", _wrap_StereoSplitterProcessor_getType},
    { "Tick", _wrap_StereoSplitterProcessor_Tick},
    { "ProcessBlock", _wrap_StereoSplitterProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_StereoSplitterProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoSplitterProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoSplitterProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoSplitterProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoSplitterProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoSplitterProcessor_Sf_SwigStatic = {
    "StereoSplitterProcessor",
    swig_StereoSplitterProcessor_Sf_SwigStatic_methods,
    swig_StereoSplitterProcessor_Sf_SwigStatic_attributes,
    swig_StereoSplitterProcessor_Sf_SwigStatic_constants,
    swig_StereoSplitterProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoSplitterProcessor_bases[] = {0,0};
static const char *swig_StereoSplitterProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_StereoSplitterProcessor = { "StereoSplitterProcessor", "StereoSplitterProcessor", &SWIGTYPE_p_StereoSplitterProcessor,0, swig_delete_StereoSplitterProcessor, swig_StereoSplitterProcessor_methods, swig_StereoSplitterProcessor_attributes, &swig_StereoSplitterProcessor_Sf_SwigStatic, swig_StereoSplitterProcessor_meta, swig_StereoSplitterProcessor_bases, swig_StereoSplitterProcessor_base_names };

static int _wrap_OscillatorProcessor_slaves_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  std::vector< OscillatorProcessor * > *arg2 = (std::vector< OscillatorProcessor * > *) 0 ;
  
  SWIG_check_num_args("OscillatorProcessor::slaves",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::slaves",1,"OscillatorProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("OscillatorProcessor::slaves",2,"std::vector< OscillatorProcessor * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_slaves_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_OscillatorProcessor_p_t,0))){
    SWIG_fail_ptr("OscillatorProcessor_slaves_set",2,SWIGTYPE_p_std__vectorT_OscillatorProcessor_p_t);
  }
  
  if (arg1) (arg1)->slaves = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_slaves_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  std::vector< OscillatorProcessor * > *result = 0 ;
  
  SWIG_check_num_args("OscillatorProcessor::slaves",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::slaves",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_slaves_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (std::vector< OscillatorProcessor * > *)& ((arg1)->slaves);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_OscillatorProcessor_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_waveform_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_waveform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_waveform",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_waveform",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_waveform_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_waveform = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_waveform_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  int result;
  
  SWIG_check_num_args("OscillatorProcessor::m_waveform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_waveform",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_waveform_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (int) ((arg1)->m_waveform);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_morph_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_morph",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_morph",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_morph",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_morph_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_morph = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_morph_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_morph",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_morph",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_morph_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_morph);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_freq",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_freq",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_freq_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_freq",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_freq_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_freq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_phase_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_phase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_phase",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_phase",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_phase_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_phase = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_phase_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_phase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_phase",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_phase_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_phase);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_index_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_index",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_index",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_index",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_index_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_index = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_index_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_index",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_index",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_index_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_index);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_gain_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_gain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_gain",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_gain",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_gain_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_gain = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_gain_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_gain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_gain",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_gain_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_gain);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_fm_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_fm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_fm",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_fm",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_fm_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_fm = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_fm_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_fm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_fm",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_fm_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_fm);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_pm_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_pm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_pm",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_pm",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_pm_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_pm = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_pm_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_pm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_pm",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_pm_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_pm);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_fenv_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_fenv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_fenv",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_fenv",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_fenv_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_fenv = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_fenv_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_fenv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_fenv",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_fenv_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_fenv);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_penv_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_penv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_penv",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_penv",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_penv_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_penv = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_penv_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_penv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_penv",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_penv_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_penv);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_drift_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_drift",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_drift",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_drift",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_drift_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_drift = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_drift_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_drift",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_drift",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_drift_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_drift);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_mod_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_mod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_mod",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_mod",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_mod_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_mod = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_mod_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_mod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_mod",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_mod_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_mod);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_cmod_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_cmod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_cmod",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_cmod",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_cmod_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_cmod = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_cmod_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_cmod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_cmod",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_cmod_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_cmod);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_env_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_env",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_env",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_env",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_env_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_env = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_env_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_env",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_env",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_env_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_env);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_lfo_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_lfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_lfo",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_lfo",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_lfo_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_lfo = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_lfo_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_lfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_lfo",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_lfo_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_lfo);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_pwm_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_pwm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_pwm",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_pwm",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_pwm_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_pwm = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_pwm_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_pwm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_pwm",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_pwm_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_pwm);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("OscillatorProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::getType",1,"OscillatorProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_getType",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (ObjectType)((OscillatorProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::Tick",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OscillatorProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("OscillatorProcessor::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("OscillatorProcessor::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_Tick",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::Tick",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OscillatorProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("OscillatorProcessor::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_Tick",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::Tick",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OscillatorProcessor::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_Tick",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::Tick",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_Tick",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_Tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::Tick",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_Tick",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType)(arg1)->Tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OscillatorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_OscillatorProcessor_Tick__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OscillatorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OscillatorProcessor_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OscillatorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_OscillatorProcessor_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OscillatorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_OscillatorProcessor_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OscillatorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_OscillatorProcessor_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OscillatorProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OscillatorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    OscillatorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    OscillatorProcessor::Tick(DspFloatType,DspFloatType)\n"
    "    OscillatorProcessor::Tick(DspFloatType)\n"
    "    OscillatorProcessor::Tick()\n");
  lua_error(L);return 0;
}


static int _wrap_OscillatorProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("OscillatorProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::ProcessBlock",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("OscillatorProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("OscillatorProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_ProcessBlock",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("OscillatorProcessor_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("OscillatorProcessor_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OscillatorProcessor(void *obj) {
OscillatorProcessor *arg1 = (OscillatorProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_OscillatorProcessor_attributes[] = {
    { "slaves", _wrap_OscillatorProcessor_slaves_get, _wrap_OscillatorProcessor_slaves_set },
    { "m_waveform", _wrap_OscillatorProcessor_m_waveform_get, _wrap_OscillatorProcessor_m_waveform_set },
    { "m_morph", _wrap_OscillatorProcessor_m_morph_get, _wrap_OscillatorProcessor_m_morph_set },
    { "m_freq", _wrap_OscillatorProcessor_m_freq_get, _wrap_OscillatorProcessor_m_freq_set },
    { "m_phase", _wrap_OscillatorProcessor_m_phase_get, _wrap_OscillatorProcessor_m_phase_set },
    { "m_index", _wrap_OscillatorProcessor_m_index_get, _wrap_OscillatorProcessor_m_index_set },
    { "m_gain", _wrap_OscillatorProcessor_m_gain_get, _wrap_OscillatorProcessor_m_gain_set },
    { "m_fm", _wrap_OscillatorProcessor_m_fm_get, _wrap_OscillatorProcessor_m_fm_set },
    { "m_pm", _wrap_OscillatorProcessor_m_pm_get, _wrap_OscillatorProcessor_m_pm_set },
    { "m_fenv", _wrap_OscillatorProcessor_m_fenv_get, _wrap_OscillatorProcessor_m_fenv_set },
    { "m_penv", _wrap_OscillatorProcessor_m_penv_get, _wrap_OscillatorProcessor_m_penv_set },
    { "m_drift", _wrap_OscillatorProcessor_m_drift_get, _wrap_OscillatorProcessor_m_drift_set },
    { "m_mod", _wrap_OscillatorProcessor_m_mod_get, _wrap_OscillatorProcessor_m_mod_set },
    { "m_cmod", _wrap_OscillatorProcessor_m_cmod_get, _wrap_OscillatorProcessor_m_cmod_set },
    { "m_env", _wrap_OscillatorProcessor_m_env_get, _wrap_OscillatorProcessor_m_env_set },
    { "m_lfo", _wrap_OscillatorProcessor_m_lfo_get, _wrap_OscillatorProcessor_m_lfo_set },
    { "m_pwm", _wrap_OscillatorProcessor_m_pwm_get, _wrap_OscillatorProcessor_m_pwm_set },
    {0,0,0}
};
static swig_lua_method swig_OscillatorProcessor_methods[]= {
    { "getType", _wrap_OscillatorProcessor_getType},
    { "Tick", _wrap_OscillatorProcessor_Tick},
    { "ProcessBlock", _wrap_OscillatorProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_OscillatorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OscillatorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OscillatorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OscillatorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OscillatorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OscillatorProcessor_Sf_SwigStatic = {
    "OscillatorProcessor",
    swig_OscillatorProcessor_Sf_SwigStatic_methods,
    swig_OscillatorProcessor_Sf_SwigStatic_attributes,
    swig_OscillatorProcessor_Sf_SwigStatic_constants,
    swig_OscillatorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OscillatorProcessor_bases[] = {0,0};
static const char *swig_OscillatorProcessor_base_names[] = {"MonoProcessor *",0};
static swig_lua_class _wrap_class_OscillatorProcessor = { "OscillatorProcessor", "OscillatorProcessor", &SWIGTYPE_p_OscillatorProcessor,0, swig_delete_OscillatorProcessor, swig_OscillatorProcessor_methods, swig_OscillatorProcessor_attributes, &swig_OscillatorProcessor_Sf_SwigStatic, swig_OscillatorProcessor_meta, swig_OscillatorProcessor_bases, swig_OscillatorProcessor_base_names };

static int _wrap_FilterProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  FilterProcessor *arg1 = (FilterProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("FilterProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FilterProcessor::getType",1,"FilterProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("FilterProcessor_getType",1,SWIGTYPE_p_FilterProcessor);
  }
  
  result = (ObjectType)((FilterProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FilterProcessor *arg1 = (FilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("FilterProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FilterProcessor::Tick",1,"FilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FilterProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FilterProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FilterProcessor::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("FilterProcessor::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("FilterProcessor_Tick",1,SWIGTYPE_p_FilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FilterProcessor *arg1 = (FilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("FilterProcessor::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FilterProcessor::Tick",1,"FilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FilterProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FilterProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FilterProcessor::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("FilterProcessor_Tick",1,SWIGTYPE_p_FilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FilterProcessor *arg1 = (FilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("FilterProcessor::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FilterProcessor::Tick",1,"FilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FilterProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FilterProcessor::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("FilterProcessor_Tick",1,SWIGTYPE_p_FilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FilterProcessor *arg1 = (FilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("FilterProcessor::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FilterProcessor::Tick",1,"FilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FilterProcessor::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("FilterProcessor_Tick",1,SWIGTYPE_p_FilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterProcessor_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FilterProcessor_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FilterProcessor_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FilterProcessor_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_FilterProcessor_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FilterProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FilterProcessor::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    FilterProcessor::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    FilterProcessor::Tick(DspFloatType,DspFloatType)\n"
    "    FilterProcessor::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_FilterProcessor_Run__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FilterProcessor *arg1 = (FilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("FilterProcessor::Run",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FilterProcessor::Run",1,"FilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FilterProcessor::Run",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FilterProcessor::Run",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FilterProcessor::Run",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("FilterProcessor::Run",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("FilterProcessor_Run",1,SWIGTYPE_p_FilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Run(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterProcessor_Run__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FilterProcessor *arg1 = (FilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("FilterProcessor::Run",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FilterProcessor::Run",1,"FilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FilterProcessor::Run",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FilterProcessor::Run",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FilterProcessor::Run",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("FilterProcessor_Run",1,SWIGTYPE_p_FilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Run(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterProcessor_Run__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FilterProcessor *arg1 = (FilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("FilterProcessor::Run",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FilterProcessor::Run",1,"FilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FilterProcessor::Run",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FilterProcessor::Run",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("FilterProcessor_Run",1,SWIGTYPE_p_FilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Run(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterProcessor_Run__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FilterProcessor *arg1 = (FilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("FilterProcessor::Run",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FilterProcessor::Run",1,"FilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FilterProcessor::Run",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("FilterProcessor_Run",1,SWIGTYPE_p_FilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Run(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterProcessor_Run(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FilterProcessor_Run__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FilterProcessor_Run__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FilterProcessor_Run__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_FilterProcessor_Run__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FilterProcessor_Run'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FilterProcessor::Run(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    FilterProcessor::Run(DspFloatType,DspFloatType,DspFloatType)\n"
    "    FilterProcessor::Run(DspFloatType,DspFloatType)\n"
    "    FilterProcessor::Run(DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_FilterProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  FilterProcessor *arg1 = (FilterProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("FilterProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FilterProcessor::ProcessBlock",1,"FilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FilterProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("FilterProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("FilterProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("FilterProcessor_ProcessBlock",1,SWIGTYPE_p_FilterProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FilterProcessor_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FilterProcessor_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FilterProcessor(void *obj) {
FilterProcessor *arg1 = (FilterProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_FilterProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FilterProcessor_methods[]= {
    { "getType", _wrap_FilterProcessor_getType},
    { "Tick", _wrap_FilterProcessor_Tick},
    { "Run", _wrap_FilterProcessor_Run},
    { "ProcessBlock", _wrap_FilterProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_FilterProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FilterProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FilterProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FilterProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FilterProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FilterProcessor_Sf_SwigStatic = {
    "FilterProcessor",
    swig_FilterProcessor_Sf_SwigStatic_methods,
    swig_FilterProcessor_Sf_SwigStatic_attributes,
    swig_FilterProcessor_Sf_SwigStatic_constants,
    swig_FilterProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FilterProcessor_bases[] = {0,0};
static const char *swig_FilterProcessor_base_names[] = {"MonoProcessor *",0};
static swig_lua_class _wrap_class_FilterProcessor = { "FilterProcessor", "FilterProcessor", &SWIGTYPE_p_FilterProcessor,0, swig_delete_FilterProcessor, swig_FilterProcessor_methods, swig_FilterProcessor_attributes, &swig_FilterProcessor_Sf_SwigStatic, swig_FilterProcessor_meta, swig_FilterProcessor_bases, swig_FilterProcessor_base_names };

static int _wrap_AmplifierProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AmplifierProcessor *arg1 = (AmplifierProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("AmplifierProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AmplifierProcessor::Tick",1,"AmplifierProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AmplifierProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AmplifierProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("AmplifierProcessor::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("AmplifierProcessor::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AmplifierProcessor,0))){
    SWIG_fail_ptr("AmplifierProcessor_Tick",1,SWIGTYPE_p_AmplifierProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AmplifierProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AmplifierProcessor *arg1 = (AmplifierProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("AmplifierProcessor::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AmplifierProcessor::Tick",1,"AmplifierProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AmplifierProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AmplifierProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("AmplifierProcessor::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AmplifierProcessor,0))){
    SWIG_fail_ptr("AmplifierProcessor_Tick",1,SWIGTYPE_p_AmplifierProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AmplifierProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AmplifierProcessor *arg1 = (AmplifierProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("AmplifierProcessor::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AmplifierProcessor::Tick",1,"AmplifierProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AmplifierProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AmplifierProcessor::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AmplifierProcessor,0))){
    SWIG_fail_ptr("AmplifierProcessor_Tick",1,SWIGTYPE_p_AmplifierProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AmplifierProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  AmplifierProcessor *arg1 = (AmplifierProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("AmplifierProcessor::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AmplifierProcessor::Tick",1,"AmplifierProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AmplifierProcessor::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AmplifierProcessor,0))){
    SWIG_fail_ptr("AmplifierProcessor_Tick",1,SWIGTYPE_p_AmplifierProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AmplifierProcessor_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AmplifierProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AmplifierProcessor_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AmplifierProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AmplifierProcessor_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AmplifierProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AmplifierProcessor_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AmplifierProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_AmplifierProcessor_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AmplifierProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AmplifierProcessor::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    AmplifierProcessor::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    AmplifierProcessor::Tick(DspFloatType,DspFloatType)\n"
    "    AmplifierProcessor::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_AmplifierProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  AmplifierProcessor *arg1 = (AmplifierProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("AmplifierProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AmplifierProcessor::getType",1,"AmplifierProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AmplifierProcessor,0))){
    SWIG_fail_ptr("AmplifierProcessor_getType",1,SWIGTYPE_p_AmplifierProcessor);
  }
  
  result = (ObjectType)((AmplifierProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AmplifierProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  AmplifierProcessor *arg1 = (AmplifierProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("AmplifierProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AmplifierProcessor::ProcessBlock",1,"AmplifierProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AmplifierProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AmplifierProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("AmplifierProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AmplifierProcessor,0))){
    SWIG_fail_ptr("AmplifierProcessor_ProcessBlock",1,SWIGTYPE_p_AmplifierProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("AmplifierProcessor_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("AmplifierProcessor_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AmplifierProcessor(void *obj) {
AmplifierProcessor *arg1 = (AmplifierProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_AmplifierProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AmplifierProcessor_methods[]= {
    { "Tick", _wrap_AmplifierProcessor_Tick},
    { "getType", _wrap_AmplifierProcessor_getType},
    { "ProcessBlock", _wrap_AmplifierProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_AmplifierProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AmplifierProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AmplifierProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AmplifierProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AmplifierProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AmplifierProcessor_Sf_SwigStatic = {
    "AmplifierProcessor",
    swig_AmplifierProcessor_Sf_SwigStatic_methods,
    swig_AmplifierProcessor_Sf_SwigStatic_attributes,
    swig_AmplifierProcessor_Sf_SwigStatic_constants,
    swig_AmplifierProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AmplifierProcessor_bases[] = {0,0};
static const char *swig_AmplifierProcessor_base_names[] = {"MonoProcessor *",0};
static swig_lua_class _wrap_class_AmplifierProcessor = { "AmplifierProcessor", "AmplifierProcessor", &SWIGTYPE_p_AmplifierProcessor,0, swig_delete_AmplifierProcessor, swig_AmplifierProcessor_methods, swig_AmplifierProcessor_attributes, &swig_AmplifierProcessor_Sf_SwigStatic, swig_AmplifierProcessor_meta, swig_AmplifierProcessor_bases, swig_AmplifierProcessor_base_names };

static int _wrap_StereoOscillatorProcessor_osc_set(lua_State* L) {
  int SWIG_arg = 0;
  StereoOscillatorProcessor *arg1 = (StereoOscillatorProcessor *) 0 ;
  OscillatorProcessor *arg2 = (OscillatorProcessor *) 0 ;
  
  SWIG_check_num_args("StereoOscillatorProcessor::osc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoOscillatorProcessor::osc",1,"StereoOscillatorProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("StereoOscillatorProcessor::osc",2,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoOscillatorProcessor,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_osc_set",1,SWIGTYPE_p_StereoOscillatorProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OscillatorProcessor,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("StereoOscillatorProcessor_osc_set",2,SWIGTYPE_p_OscillatorProcessor);
  }
  
  if (arg1) (arg1)->osc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoOscillatorProcessor_osc_get(lua_State* L) {
  int SWIG_arg = 0;
  StereoOscillatorProcessor *arg1 = (StereoOscillatorProcessor *) 0 ;
  OscillatorProcessor *result = 0 ;
  
  SWIG_check_num_args("StereoOscillatorProcessor::osc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoOscillatorProcessor::osc",1,"StereoOscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoOscillatorProcessor,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_osc_get",1,SWIGTYPE_p_StereoOscillatorProcessor);
  }
  
  result = (OscillatorProcessor *) ((arg1)->osc);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OscillatorProcessor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StereoOscillatorProcessor(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  StereoOscillatorProcessor *result = 0 ;
  
  SWIG_check_num_args("StereoOscillatorProcessor::StereoOscillatorProcessor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoOscillatorProcessor::StereoOscillatorProcessor",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("new_StereoOscillatorProcessor",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (StereoOscillatorProcessor *)new StereoOscillatorProcessor(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StereoOscillatorProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoOscillatorProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  StereoOscillatorProcessor *arg1 = (StereoOscillatorProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("StereoOscillatorProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoOscillatorProcessor::getType",1,"StereoOscillatorProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoOscillatorProcessor,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_getType",1,SWIGTYPE_p_StereoOscillatorProcessor);
  }
  
  result = (ObjectType)((StereoOscillatorProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoOscillatorProcessor_setPan(lua_State* L) {
  int SWIG_arg = 0;
  StereoOscillatorProcessor *arg1 = (StereoOscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("StereoOscillatorProcessor::setPan",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoOscillatorProcessor::setPan",1,"StereoOscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoOscillatorProcessor::setPan",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoOscillatorProcessor,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_setPan",1,SWIGTYPE_p_StereoOscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setPan(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoOscillatorProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  StereoOscillatorProcessor *arg1 = (StereoOscillatorProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType **arg3 = (DspFloatType **) 0 ;
  
  SWIG_check_num_args("StereoOscillatorProcessor::ProcessBlock",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoOscillatorProcessor::ProcessBlock",1,"StereoOscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoOscillatorProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoOscillatorProcessor::ProcessBlock",3,"DspFloatType **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoOscillatorProcessor,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_ProcessBlock",1,SWIGTYPE_p_StereoOscillatorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoOscillatorProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  StereoOscillatorProcessor *arg1 = (StereoOscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType arg8 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoOscillatorProcessor::Tick",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",1,"StereoOscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",7,"DspFloatType");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",8,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoOscillatorProcessor,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",1,SWIGTYPE_p_StereoOscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  arg8 = (DspFloatType)lua_tonumber(L, 8);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoOscillatorProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  StereoOscillatorProcessor *arg1 = (StereoOscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoOscillatorProcessor::Tick",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",1,"StereoOscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",7,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoOscillatorProcessor,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",1,SWIGTYPE_p_StereoOscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoOscillatorProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  StereoOscillatorProcessor *arg1 = (StereoOscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoOscillatorProcessor::Tick",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",1,"StereoOscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",6,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoOscillatorProcessor,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",1,SWIGTYPE_p_StereoOscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoOscillatorProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  StereoOscillatorProcessor *arg1 = (StereoOscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoOscillatorProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",1,"StereoOscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",5,"DspFloatType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoOscillatorProcessor,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",1,SWIGTYPE_p_StereoOscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoOscillatorProcessor_Tick(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoOscillatorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_StereoOscillatorProcessor_Tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoOscillatorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_StereoOscillatorProcessor_Tick__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoOscillatorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_StereoOscillatorProcessor_Tick__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoOscillatorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_StereoOscillatorProcessor_Tick__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoOscillatorProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    StereoOscillatorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType,DspFloatType)\n"
    "    StereoOscillatorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType)\n"
    "    StereoOscillatorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType)\n"
    "    StereoOscillatorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &)\n");
  lua_error(L);return 0;
}


static void swig_delete_StereoOscillatorProcessor(void *obj) {
StereoOscillatorProcessor *arg1 = (StereoOscillatorProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoOscillatorProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoOscillatorProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoOscillatorProcessor_attributes[] = {
    { "osc", _wrap_StereoOscillatorProcessor_osc_get, _wrap_StereoOscillatorProcessor_osc_set },
    {0,0,0}
};
static swig_lua_method swig_StereoOscillatorProcessor_methods[]= {
    { "getType", _wrap_StereoOscillatorProcessor_getType},
    { "setPan", _wrap_StereoOscillatorProcessor_setPan},
    { "ProcessBlock", _wrap_StereoOscillatorProcessor_ProcessBlock},
    { "Tick", _wrap_StereoOscillatorProcessor_Tick},
    {0,0}
};
static swig_lua_method swig_StereoOscillatorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoOscillatorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoOscillatorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoOscillatorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoOscillatorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoOscillatorProcessor_Sf_SwigStatic = {
    "StereoOscillatorProcessor",
    swig_StereoOscillatorProcessor_Sf_SwigStatic_methods,
    swig_StereoOscillatorProcessor_Sf_SwigStatic_attributes,
    swig_StereoOscillatorProcessor_Sf_SwigStatic_constants,
    swig_StereoOscillatorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoOscillatorProcessor_bases[] = {0,0};
static const char *swig_StereoOscillatorProcessor_base_names[] = {"StereoProcessor *",0};
static swig_lua_class _wrap_class_StereoOscillatorProcessor = { "StereoOscillatorProcessor", "StereoOscillatorProcessor", &SWIGTYPE_p_StereoOscillatorProcessor,_proxy__wrap_new_StereoOscillatorProcessor, swig_delete_StereoOscillatorProcessor, swig_StereoOscillatorProcessor_methods, swig_StereoOscillatorProcessor_attributes, &swig_StereoOscillatorProcessor_Sf_SwigStatic, swig_StereoOscillatorProcessor_meta, swig_StereoOscillatorProcessor_bases, swig_StereoOscillatorProcessor_base_names };

static int _wrap_StereoGeneratorProcessor_osc_set(lua_State* L) {
  int SWIG_arg = 0;
  StereoGeneratorProcessor *arg1 = (StereoGeneratorProcessor *) 0 ;
  GeneratorProcessor *arg2 = (GeneratorProcessor *) 0 ;
  
  SWIG_check_num_args("StereoGeneratorProcessor::osc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoGeneratorProcessor::osc",1,"StereoGeneratorProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("StereoGeneratorProcessor::osc",2,"GeneratorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoGeneratorProcessor,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_osc_set",1,SWIGTYPE_p_StereoGeneratorProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GeneratorProcessor,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("StereoGeneratorProcessor_osc_set",2,SWIGTYPE_p_GeneratorProcessor);
  }
  
  if (arg1) (arg1)->osc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoGeneratorProcessor_osc_get(lua_State* L) {
  int SWIG_arg = 0;
  StereoGeneratorProcessor *arg1 = (StereoGeneratorProcessor *) 0 ;
  GeneratorProcessor *result = 0 ;
  
  SWIG_check_num_args("StereoGeneratorProcessor::osc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoGeneratorProcessor::osc",1,"StereoGeneratorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoGeneratorProcessor,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_osc_get",1,SWIGTYPE_p_StereoGeneratorProcessor);
  }
  
  result = (GeneratorProcessor *) ((arg1)->osc);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_GeneratorProcessor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StereoGeneratorProcessor(lua_State* L) {
  int SWIG_arg = 0;
  GeneratorProcessor *arg1 = (GeneratorProcessor *) 0 ;
  StereoGeneratorProcessor *result = 0 ;
  
  SWIG_check_num_args("StereoGeneratorProcessor::StereoGeneratorProcessor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoGeneratorProcessor::StereoGeneratorProcessor",1,"GeneratorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeneratorProcessor,0))){
    SWIG_fail_ptr("new_StereoGeneratorProcessor",1,SWIGTYPE_p_GeneratorProcessor);
  }
  
  result = (StereoGeneratorProcessor *)new StereoGeneratorProcessor(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StereoGeneratorProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoGeneratorProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  StereoGeneratorProcessor *arg1 = (StereoGeneratorProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("StereoGeneratorProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoGeneratorProcessor::getType",1,"StereoGeneratorProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoGeneratorProcessor,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_getType",1,SWIGTYPE_p_StereoGeneratorProcessor);
  }
  
  result = (ObjectType)((StereoGeneratorProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoGeneratorProcessor_setPan(lua_State* L) {
  int SWIG_arg = 0;
  StereoGeneratorProcessor *arg1 = (StereoGeneratorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("StereoGeneratorProcessor::setPan",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoGeneratorProcessor::setPan",1,"StereoGeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoGeneratorProcessor::setPan",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoGeneratorProcessor,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_setPan",1,SWIGTYPE_p_StereoGeneratorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setPan(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoGeneratorProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  StereoGeneratorProcessor *arg1 = (StereoGeneratorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType arg8 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoGeneratorProcessor::Tick",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",1,"StereoGeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",7,"DspFloatType");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",8,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoGeneratorProcessor,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",1,SWIGTYPE_p_StereoGeneratorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  arg8 = (DspFloatType)lua_tonumber(L, 8);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoGeneratorProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  StereoGeneratorProcessor *arg1 = (StereoGeneratorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoGeneratorProcessor::Tick",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",1,"StereoGeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",7,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoGeneratorProcessor,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",1,SWIGTYPE_p_StereoGeneratorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoGeneratorProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  StereoGeneratorProcessor *arg1 = (StereoGeneratorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoGeneratorProcessor::Tick",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",1,"StereoGeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",6,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoGeneratorProcessor,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",1,SWIGTYPE_p_StereoGeneratorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoGeneratorProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  StereoGeneratorProcessor *arg1 = (StereoGeneratorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoGeneratorProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",1,"StereoGeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",5,"DspFloatType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoGeneratorProcessor,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",1,SWIGTYPE_p_StereoGeneratorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoGeneratorProcessor_Tick(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoGeneratorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_StereoGeneratorProcessor_Tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoGeneratorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_StereoGeneratorProcessor_Tick__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoGeneratorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_StereoGeneratorProcessor_Tick__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoGeneratorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_StereoGeneratorProcessor_Tick__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoGeneratorProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    StereoGeneratorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType,DspFloatType)\n"
    "    StereoGeneratorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType)\n"
    "    StereoGeneratorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType)\n"
    "    StereoGeneratorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoGeneratorProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  StereoGeneratorProcessor *arg1 = (StereoGeneratorProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType **arg3 = (DspFloatType **) 0 ;
  
  SWIG_check_num_args("StereoGeneratorProcessor::ProcessBlock",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoGeneratorProcessor::ProcessBlock",1,"StereoGeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoGeneratorProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoGeneratorProcessor::ProcessBlock",3,"DspFloatType **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoGeneratorProcessor,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_ProcessBlock",1,SWIGTYPE_p_StereoGeneratorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoGeneratorProcessor(void *obj) {
StereoGeneratorProcessor *arg1 = (StereoGeneratorProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoGeneratorProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoGeneratorProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoGeneratorProcessor_attributes[] = {
    { "osc", _wrap_StereoGeneratorProcessor_osc_get, _wrap_StereoGeneratorProcessor_osc_set },
    {0,0,0}
};
static swig_lua_method swig_StereoGeneratorProcessor_methods[]= {
    { "getType", _wrap_StereoGeneratorProcessor_getType},
    { "setPan", _wrap_StereoGeneratorProcessor_setPan},
    { "Tick", _wrap_StereoGeneratorProcessor_Tick},
    { "ProcessBlock", _wrap_StereoGeneratorProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_StereoGeneratorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoGeneratorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoGeneratorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoGeneratorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoGeneratorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoGeneratorProcessor_Sf_SwigStatic = {
    "StereoGeneratorProcessor",
    swig_StereoGeneratorProcessor_Sf_SwigStatic_methods,
    swig_StereoGeneratorProcessor_Sf_SwigStatic_attributes,
    swig_StereoGeneratorProcessor_Sf_SwigStatic_constants,
    swig_StereoGeneratorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoGeneratorProcessor_bases[] = {0,0};
static const char *swig_StereoGeneratorProcessor_base_names[] = {"StereoProcessor *",0};
static swig_lua_class _wrap_class_StereoGeneratorProcessor = { "StereoGeneratorProcessor", "StereoGeneratorProcessor", &SWIGTYPE_p_StereoGeneratorProcessor,_proxy__wrap_new_StereoGeneratorProcessor, swig_delete_StereoGeneratorProcessor, swig_StereoGeneratorProcessor_methods, swig_StereoGeneratorProcessor_attributes, &swig_StereoGeneratorProcessor_Sf_SwigStatic, swig_StereoGeneratorProcessor_meta, swig_StereoGeneratorProcessor_bases, swig_StereoGeneratorProcessor_base_names };

static int _wrap_StereoFunctionProcessor_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  StereoFunctionProcessor *arg1 = (StereoFunctionProcessor *) 0 ;
  FunctionProcessor **arg2 ;
  
  SWIG_check_num_args("StereoFunctionProcessor::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFunctionProcessor::filter",1,"StereoFunctionProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("StereoFunctionProcessor::filter",2,"FunctionProcessor *[2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFunctionProcessor,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_filter_set",1,SWIGTYPE_p_StereoFunctionProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_FunctionProcessor,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_filter_set",2,SWIGTYPE_p_p_FunctionProcessor);
  }
  
  {
    size_t ii;
    FunctionProcessor * *b = (FunctionProcessor * *) arg1->filter;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((FunctionProcessor * *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFunctionProcessor_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  StereoFunctionProcessor *arg1 = (StereoFunctionProcessor *) 0 ;
  FunctionProcessor **result = 0 ;
  
  SWIG_check_num_args("StereoFunctionProcessor::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFunctionProcessor::filter",1,"StereoFunctionProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFunctionProcessor,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_filter_get",1,SWIGTYPE_p_StereoFunctionProcessor);
  }
  
  result = (FunctionProcessor **)(FunctionProcessor **) ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_FunctionProcessor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StereoFunctionProcessor(lua_State* L) {
  int SWIG_arg = 0;
  FunctionProcessor *arg1 = (FunctionProcessor *) 0 ;
  FunctionProcessor *arg2 = (FunctionProcessor *) 0 ;
  StereoFunctionProcessor *result = 0 ;
  
  SWIG_check_num_args("StereoFunctionProcessor::StereoFunctionProcessor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFunctionProcessor::StereoFunctionProcessor",1,"FunctionProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("StereoFunctionProcessor::StereoFunctionProcessor",2,"FunctionProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FunctionProcessor,0))){
    SWIG_fail_ptr("new_StereoFunctionProcessor",1,SWIGTYPE_p_FunctionProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FunctionProcessor,0))){
    SWIG_fail_ptr("new_StereoFunctionProcessor",2,SWIGTYPE_p_FunctionProcessor);
  }
  
  result = (StereoFunctionProcessor *)new StereoFunctionProcessor(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StereoFunctionProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFunctionProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  StereoFunctionProcessor *arg1 = (StereoFunctionProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("StereoFunctionProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFunctionProcessor::getType",1,"StereoFunctionProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFunctionProcessor,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_getType",1,SWIGTYPE_p_StereoFunctionProcessor);
  }
  
  result = (ObjectType)((StereoFunctionProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFunctionProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  StereoFunctionProcessor *arg1 = (StereoFunctionProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType **arg3 = (DspFloatType **) 0 ;
  DspFloatType **arg4 = (DspFloatType **) 0 ;
  
  SWIG_check_num_args("StereoFunctionProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFunctionProcessor::ProcessBlock",1,"StereoFunctionProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoFunctionProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoFunctionProcessor::ProcessBlock",3,"DspFloatType **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("StereoFunctionProcessor::ProcessBlock",4,"DspFloatType **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFunctionProcessor,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_ProcessBlock",1,SWIGTYPE_p_StereoFunctionProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFunctionProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  StereoFunctionProcessor *arg1 = (StereoFunctionProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType arg8 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoFunctionProcessor::Tick",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFunctionProcessor::Tick",1,"StereoFunctionProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoFunctionProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoFunctionProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoFunctionProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoFunctionProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoFunctionProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoFunctionProcessor::Tick",7,"DspFloatType");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("StereoFunctionProcessor::Tick",8,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFunctionProcessor,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",1,SWIGTYPE_p_StereoFunctionProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  arg8 = (DspFloatType)lua_tonumber(L, 8);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFunctionProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  StereoFunctionProcessor *arg1 = (StereoFunctionProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoFunctionProcessor::Tick",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFunctionProcessor::Tick",1,"StereoFunctionProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoFunctionProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoFunctionProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoFunctionProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoFunctionProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoFunctionProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoFunctionProcessor::Tick",7,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFunctionProcessor,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",1,SWIGTYPE_p_StereoFunctionProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFunctionProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  StereoFunctionProcessor *arg1 = (StereoFunctionProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoFunctionProcessor::Tick",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFunctionProcessor::Tick",1,"StereoFunctionProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoFunctionProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoFunctionProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoFunctionProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoFunctionProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoFunctionProcessor::Tick",6,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFunctionProcessor,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",1,SWIGTYPE_p_StereoFunctionProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFunctionProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  StereoFunctionProcessor *arg1 = (StereoFunctionProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoFunctionProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFunctionProcessor::Tick",1,"StereoFunctionProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoFunctionProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoFunctionProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoFunctionProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoFunctionProcessor::Tick",5,"DspFloatType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFunctionProcessor,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",1,SWIGTYPE_p_StereoFunctionProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFunctionProcessor_Tick(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoFunctionProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_StereoFunctionProcessor_Tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoFunctionProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_StereoFunctionProcessor_Tick__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoFunctionProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_StereoFunctionProcessor_Tick__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoFunctionProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_StereoFunctionProcessor_Tick__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoFunctionProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    StereoFunctionProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType,DspFloatType)\n"
    "    StereoFunctionProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType)\n"
    "    StereoFunctionProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType)\n"
    "    StereoFunctionProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &)\n");
  lua_error(L);return 0;
}


static void swig_delete_StereoFunctionProcessor(void *obj) {
StereoFunctionProcessor *arg1 = (StereoFunctionProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoFunctionProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoFunctionProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoFunctionProcessor_attributes[] = {
    { "filter", _wrap_StereoFunctionProcessor_filter_get, _wrap_StereoFunctionProcessor_filter_set },
    {0,0,0}
};
static swig_lua_method swig_StereoFunctionProcessor_methods[]= {
    { "getType", _wrap_StereoFunctionProcessor_getType},
    { "ProcessBlock", _wrap_StereoFunctionProcessor_ProcessBlock},
    { "Tick", _wrap_StereoFunctionProcessor_Tick},
    {0,0}
};
static swig_lua_method swig_StereoFunctionProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoFunctionProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoFunctionProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoFunctionProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoFunctionProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoFunctionProcessor_Sf_SwigStatic = {
    "StereoFunctionProcessor",
    swig_StereoFunctionProcessor_Sf_SwigStatic_methods,
    swig_StereoFunctionProcessor_Sf_SwigStatic_attributes,
    swig_StereoFunctionProcessor_Sf_SwigStatic_constants,
    swig_StereoFunctionProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoFunctionProcessor_bases[] = {0,0};
static const char *swig_StereoFunctionProcessor_base_names[] = {"StereoProcessor *",0};
static swig_lua_class _wrap_class_StereoFunctionProcessor = { "StereoFunctionProcessor", "StereoFunctionProcessor", &SWIGTYPE_p_StereoFunctionProcessor,_proxy__wrap_new_StereoFunctionProcessor, swig_delete_StereoFunctionProcessor, swig_StereoFunctionProcessor_methods, swig_StereoFunctionProcessor_attributes, &swig_StereoFunctionProcessor_Sf_SwigStatic, swig_StereoFunctionProcessor_meta, swig_StereoFunctionProcessor_bases, swig_StereoFunctionProcessor_base_names };

static int _wrap_StereoFilterProcessor_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  StereoFilterProcessor *arg1 = (StereoFilterProcessor *) 0 ;
  FilterProcessor **arg2 ;
  
  SWIG_check_num_args("StereoFilterProcessor::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFilterProcessor::filter",1,"StereoFilterProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("StereoFilterProcessor::filter",2,"FilterProcessor *[2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFilterProcessor,0))){
    SWIG_fail_ptr("StereoFilterProcessor_filter_set",1,SWIGTYPE_p_StereoFilterProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_FilterProcessor,0))){
    SWIG_fail_ptr("StereoFilterProcessor_filter_set",2,SWIGTYPE_p_p_FilterProcessor);
  }
  
  {
    size_t ii;
    FilterProcessor * *b = (FilterProcessor * *) arg1->filter;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((FilterProcessor * *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFilterProcessor_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  StereoFilterProcessor *arg1 = (StereoFilterProcessor *) 0 ;
  FilterProcessor **result = 0 ;
  
  SWIG_check_num_args("StereoFilterProcessor::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFilterProcessor::filter",1,"StereoFilterProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFilterProcessor,0))){
    SWIG_fail_ptr("StereoFilterProcessor_filter_get",1,SWIGTYPE_p_StereoFilterProcessor);
  }
  
  result = (FilterProcessor **)(FilterProcessor **) ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_FilterProcessor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StereoFilterProcessor(lua_State* L) {
  int SWIG_arg = 0;
  FilterProcessor *arg1 = (FilterProcessor *) 0 ;
  FilterProcessor *arg2 = (FilterProcessor *) 0 ;
  StereoFilterProcessor *result = 0 ;
  
  SWIG_check_num_args("StereoFilterProcessor::StereoFilterProcessor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFilterProcessor::StereoFilterProcessor",1,"FilterProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("StereoFilterProcessor::StereoFilterProcessor",2,"FilterProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("new_StereoFilterProcessor",1,SWIGTYPE_p_FilterProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("new_StereoFilterProcessor",2,SWIGTYPE_p_FilterProcessor);
  }
  
  result = (StereoFilterProcessor *)new StereoFilterProcessor(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StereoFilterProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFilterProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  StereoFilterProcessor *arg1 = (StereoFilterProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("StereoFilterProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFilterProcessor::getType",1,"StereoFilterProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFilterProcessor,0))){
    SWIG_fail_ptr("StereoFilterProcessor_getType",1,SWIGTYPE_p_StereoFilterProcessor);
  }
  
  result = (ObjectType)((StereoFilterProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFilterProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  StereoFilterProcessor *arg1 = (StereoFilterProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType **arg3 = (DspFloatType **) 0 ;
  DspFloatType **arg4 = (DspFloatType **) 0 ;
  
  SWIG_check_num_args("StereoFilterProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFilterProcessor::ProcessBlock",1,"StereoFilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoFilterProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoFilterProcessor::ProcessBlock",3,"DspFloatType **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("StereoFilterProcessor::ProcessBlock",4,"DspFloatType **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFilterProcessor,0))){
    SWIG_fail_ptr("StereoFilterProcessor_ProcessBlock",1,SWIGTYPE_p_StereoFilterProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoFilterProcessor_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoFilterProcessor_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFilterProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  StereoFilterProcessor *arg1 = (StereoFilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType arg8 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoFilterProcessor::Tick",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFilterProcessor::Tick",1,"StereoFilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoFilterProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoFilterProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoFilterProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoFilterProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoFilterProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoFilterProcessor::Tick",7,"DspFloatType");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("StereoFilterProcessor::Tick",8,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFilterProcessor,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",1,SWIGTYPE_p_StereoFilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  arg8 = (DspFloatType)lua_tonumber(L, 8);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFilterProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  StereoFilterProcessor *arg1 = (StereoFilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoFilterProcessor::Tick",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFilterProcessor::Tick",1,"StereoFilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoFilterProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoFilterProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoFilterProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoFilterProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoFilterProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoFilterProcessor::Tick",7,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFilterProcessor,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",1,SWIGTYPE_p_StereoFilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFilterProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  StereoFilterProcessor *arg1 = (StereoFilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoFilterProcessor::Tick",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFilterProcessor::Tick",1,"StereoFilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoFilterProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoFilterProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoFilterProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoFilterProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoFilterProcessor::Tick",6,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFilterProcessor,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",1,SWIGTYPE_p_StereoFilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFilterProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  StereoFilterProcessor *arg1 = (StereoFilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoFilterProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFilterProcessor::Tick",1,"StereoFilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoFilterProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoFilterProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoFilterProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoFilterProcessor::Tick",5,"DspFloatType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFilterProcessor,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",1,SWIGTYPE_p_StereoFilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFilterProcessor_Tick(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoFilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_StereoFilterProcessor_Tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoFilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_StereoFilterProcessor_Tick__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoFilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_StereoFilterProcessor_Tick__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoFilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_StereoFilterProcessor_Tick__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoFilterProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    StereoFilterProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType,DspFloatType)\n"
    "    StereoFilterProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType)\n"
    "    StereoFilterProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType)\n"
    "    StereoFilterProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &)\n");
  lua_error(L);return 0;
}


static void swig_delete_StereoFilterProcessor(void *obj) {
StereoFilterProcessor *arg1 = (StereoFilterProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoFilterProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoFilterProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoFilterProcessor_attributes[] = {
    { "filter", _wrap_StereoFilterProcessor_filter_get, _wrap_StereoFilterProcessor_filter_set },
    {0,0,0}
};
static swig_lua_method swig_StereoFilterProcessor_methods[]= {
    { "getType", _wrap_StereoFilterProcessor_getType},
    { "ProcessBlock", _wrap_StereoFilterProcessor_ProcessBlock},
    { "Tick", _wrap_StereoFilterProcessor_Tick},
    {0,0}
};
static swig_lua_method swig_StereoFilterProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoFilterProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoFilterProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoFilterProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoFilterProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoFilterProcessor_Sf_SwigStatic = {
    "StereoFilterProcessor",
    swig_StereoFilterProcessor_Sf_SwigStatic_methods,
    swig_StereoFilterProcessor_Sf_SwigStatic_attributes,
    swig_StereoFilterProcessor_Sf_SwigStatic_constants,
    swig_StereoFilterProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoFilterProcessor_bases[] = {0,0};
static const char *swig_StereoFilterProcessor_base_names[] = {"StereoProcessor *",0};
static swig_lua_class _wrap_class_StereoFilterProcessor = { "StereoFilterProcessor", "StereoFilterProcessor", &SWIGTYPE_p_StereoFilterProcessor,_proxy__wrap_new_StereoFilterProcessor, swig_delete_StereoFilterProcessor, swig_StereoFilterProcessor_methods, swig_StereoFilterProcessor_attributes, &swig_StereoFilterProcessor_Sf_SwigStatic, swig_StereoFilterProcessor_meta, swig_StereoFilterProcessor_bases, swig_StereoFilterProcessor_base_names };

static int _wrap_StereoAmplifierProcessor_amp_set(lua_State* L) {
  int SWIG_arg = 0;
  StereoAmplifierProcessor *arg1 = (StereoAmplifierProcessor *) 0 ;
  AmplifierProcessor **arg2 ;
  
  SWIG_check_num_args("StereoAmplifierProcessor::amp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoAmplifierProcessor::amp",1,"StereoAmplifierProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("StereoAmplifierProcessor::amp",2,"AmplifierProcessor *[2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoAmplifierProcessor,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_amp_set",1,SWIGTYPE_p_StereoAmplifierProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_AmplifierProcessor,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_amp_set",2,SWIGTYPE_p_p_AmplifierProcessor);
  }
  
  {
    size_t ii;
    AmplifierProcessor * *b = (AmplifierProcessor * *) arg1->amp;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((AmplifierProcessor * *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoAmplifierProcessor_amp_get(lua_State* L) {
  int SWIG_arg = 0;
  StereoAmplifierProcessor *arg1 = (StereoAmplifierProcessor *) 0 ;
  AmplifierProcessor **result = 0 ;
  
  SWIG_check_num_args("StereoAmplifierProcessor::amp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoAmplifierProcessor::amp",1,"StereoAmplifierProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoAmplifierProcessor,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_amp_get",1,SWIGTYPE_p_StereoAmplifierProcessor);
  }
  
  result = (AmplifierProcessor **)(AmplifierProcessor **) ((arg1)->amp);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_AmplifierProcessor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StereoAmplifierProcessor(lua_State* L) {
  int SWIG_arg = 0;
  AmplifierProcessor *arg1 = (AmplifierProcessor *) 0 ;
  AmplifierProcessor *arg2 = (AmplifierProcessor *) 0 ;
  StereoAmplifierProcessor *result = 0 ;
  
  SWIG_check_num_args("StereoAmplifierProcessor::StereoAmplifierProcessor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoAmplifierProcessor::StereoAmplifierProcessor",1,"AmplifierProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("StereoAmplifierProcessor::StereoAmplifierProcessor",2,"AmplifierProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AmplifierProcessor,0))){
    SWIG_fail_ptr("new_StereoAmplifierProcessor",1,SWIGTYPE_p_AmplifierProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AmplifierProcessor,0))){
    SWIG_fail_ptr("new_StereoAmplifierProcessor",2,SWIGTYPE_p_AmplifierProcessor);
  }
  
  result = (StereoAmplifierProcessor *)new StereoAmplifierProcessor(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StereoAmplifierProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoAmplifierProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  StereoAmplifierProcessor *arg1 = (StereoAmplifierProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("StereoAmplifierProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoAmplifierProcessor::getType",1,"StereoAmplifierProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoAmplifierProcessor,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_getType",1,SWIGTYPE_p_StereoAmplifierProcessor);
  }
  
  result = (ObjectType)((StereoAmplifierProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoAmplifierProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  StereoAmplifierProcessor *arg1 = (StereoAmplifierProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType **arg3 = (DspFloatType **) 0 ;
  DspFloatType **arg4 = (DspFloatType **) 0 ;
  
  SWIG_check_num_args("StereoAmplifierProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoAmplifierProcessor::ProcessBlock",1,"StereoAmplifierProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoAmplifierProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoAmplifierProcessor::ProcessBlock",3,"DspFloatType **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("StereoAmplifierProcessor::ProcessBlock",4,"DspFloatType **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoAmplifierProcessor,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_ProcessBlock",1,SWIGTYPE_p_StereoAmplifierProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoAmplifierProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  StereoAmplifierProcessor *arg1 = (StereoAmplifierProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType arg8 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoAmplifierProcessor::Tick",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",1,"StereoAmplifierProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",7,"DspFloatType");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",8,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoAmplifierProcessor,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",1,SWIGTYPE_p_StereoAmplifierProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  arg8 = (DspFloatType)lua_tonumber(L, 8);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoAmplifierProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  StereoAmplifierProcessor *arg1 = (StereoAmplifierProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoAmplifierProcessor::Tick",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",1,"StereoAmplifierProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",7,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoAmplifierProcessor,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",1,SWIGTYPE_p_StereoAmplifierProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoAmplifierProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  StereoAmplifierProcessor *arg1 = (StereoAmplifierProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoAmplifierProcessor::Tick",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",1,"StereoAmplifierProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",6,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoAmplifierProcessor,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",1,SWIGTYPE_p_StereoAmplifierProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoAmplifierProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  StereoAmplifierProcessor *arg1 = (StereoAmplifierProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoAmplifierProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",1,"StereoAmplifierProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",5,"DspFloatType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoAmplifierProcessor,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",1,SWIGTYPE_p_StereoAmplifierProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoAmplifierProcessor_Tick(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoAmplifierProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_StereoAmplifierProcessor_Tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoAmplifierProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_StereoAmplifierProcessor_Tick__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoAmplifierProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_StereoAmplifierProcessor_Tick__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoAmplifierProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_StereoAmplifierProcessor_Tick__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoAmplifierProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    StereoAmplifierProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType,DspFloatType)\n"
    "    StereoAmplifierProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType)\n"
    "    StereoAmplifierProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType)\n"
    "    StereoAmplifierProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &)\n");
  lua_error(L);return 0;
}


static void swig_delete_StereoAmplifierProcessor(void *obj) {
StereoAmplifierProcessor *arg1 = (StereoAmplifierProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoAmplifierProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoAmplifierProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoAmplifierProcessor_attributes[] = {
    { "amp", _wrap_StereoAmplifierProcessor_amp_get, _wrap_StereoAmplifierProcessor_amp_set },
    {0,0,0}
};
static swig_lua_method swig_StereoAmplifierProcessor_methods[]= {
    { "getType", _wrap_StereoAmplifierProcessor_getType},
    { "ProcessBlock", _wrap_StereoAmplifierProcessor_ProcessBlock},
    { "Tick", _wrap_StereoAmplifierProcessor_Tick},
    {0,0}
};
static swig_lua_method swig_StereoAmplifierProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoAmplifierProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoAmplifierProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoAmplifierProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoAmplifierProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoAmplifierProcessor_Sf_SwigStatic = {
    "StereoAmplifierProcessor",
    swig_StereoAmplifierProcessor_Sf_SwigStatic_methods,
    swig_StereoAmplifierProcessor_Sf_SwigStatic_attributes,
    swig_StereoAmplifierProcessor_Sf_SwigStatic_constants,
    swig_StereoAmplifierProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoAmplifierProcessor_bases[] = {0,0};
static const char *swig_StereoAmplifierProcessor_base_names[] = {"StereoProcessor *",0};
static swig_lua_class _wrap_class_StereoAmplifierProcessor = { "StereoAmplifierProcessor", "StereoAmplifierProcessor", &SWIGTYPE_p_StereoAmplifierProcessor,_proxy__wrap_new_StereoAmplifierProcessor, swig_delete_StereoAmplifierProcessor, swig_StereoAmplifierProcessor_methods, swig_StereoAmplifierProcessor_attributes, &swig_StereoAmplifierProcessor_Sf_SwigStatic, swig_StereoAmplifierProcessor_meta, swig_StereoAmplifierProcessor_bases, swig_StereoAmplifierProcessor_base_names };

static int _wrap_SpectrumProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  SpectrumProcessor *arg1 = (SpectrumProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("SpectrumProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SpectrumProcessor::getType",1,"SpectrumProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SpectrumProcessor,0))){
    SWIG_fail_ptr("SpectrumProcessor_getType",1,SWIGTYPE_p_SpectrumProcessor);
  }
  
  result = (ObjectType)((SpectrumProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SpectrumProcessor(lua_State* L) {
  int SWIG_arg = 0;
  SpectrumProcessor *result = 0 ;
  
  SWIG_check_num_args("SpectrumProcessor::SpectrumProcessor",0,0)
  result = (SpectrumProcessor *)new SpectrumProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SpectrumProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SpectrumProcessor(void *obj) {
SpectrumProcessor *arg1 = (SpectrumProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_SpectrumProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SpectrumProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SpectrumProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SpectrumProcessor_methods[]= {
    { "getType", _wrap_SpectrumProcessor_getType},
    {0,0}
};
static swig_lua_method swig_SpectrumProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SpectrumProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SpectrumProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SpectrumProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SpectrumProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SpectrumProcessor_Sf_SwigStatic = {
    "SpectrumProcessor",
    swig_SpectrumProcessor_Sf_SwigStatic_methods,
    swig_SpectrumProcessor_Sf_SwigStatic_attributes,
    swig_SpectrumProcessor_Sf_SwigStatic_constants,
    swig_SpectrumProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SpectrumProcessor_bases[] = {0,0};
static const char *swig_SpectrumProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_SpectrumProcessor = { "SpectrumProcessor", "SpectrumProcessor", &SWIGTYPE_p_SpectrumProcessor,_proxy__wrap_new_SpectrumProcessor, swig_delete_SpectrumProcessor, swig_SpectrumProcessor_methods, swig_SpectrumProcessor_attributes, &swig_SpectrumProcessor_Sf_SwigStatic, swig_SpectrumProcessor_meta, swig_SpectrumProcessor_bases, swig_SpectrumProcessor_base_names };

static void swig_delete_SignalSourceProcessor(void *obj) {
SignalSourceProcessor *arg1 = (SignalSourceProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_SignalSourceProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SignalSourceProcessor_methods[]= {
    {0,0}
};
static swig_lua_method swig_SignalSourceProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SignalSourceProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SignalSourceProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SignalSourceProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SignalSourceProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SignalSourceProcessor_Sf_SwigStatic = {
    "SignalSourceProcessor",
    swig_SignalSourceProcessor_Sf_SwigStatic_methods,
    swig_SignalSourceProcessor_Sf_SwigStatic_attributes,
    swig_SignalSourceProcessor_Sf_SwigStatic_constants,
    swig_SignalSourceProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SignalSourceProcessor_bases[] = {0,0};
static const char *swig_SignalSourceProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_SignalSourceProcessor = { "SignalSourceProcessor", "SignalSourceProcessor", &SWIGTYPE_p_SignalSourceProcessor,0, swig_delete_SignalSourceProcessor, swig_SignalSourceProcessor_methods, swig_SignalSourceProcessor_attributes, &swig_SignalSourceProcessor_Sf_SwigStatic, swig_SignalSourceProcessor_meta, swig_SignalSourceProcessor_bases, swig_SignalSourceProcessor_base_names };

static void swig_delete_SignalSinkProcessor(void *obj) {
SignalSinkProcessor *arg1 = (SignalSinkProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_SignalSinkProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SignalSinkProcessor_methods[]= {
    {0,0}
};
static swig_lua_method swig_SignalSinkProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SignalSinkProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SignalSinkProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SignalSinkProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SignalSinkProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SignalSinkProcessor_Sf_SwigStatic = {
    "SignalSinkProcessor",
    swig_SignalSinkProcessor_Sf_SwigStatic_methods,
    swig_SignalSinkProcessor_Sf_SwigStatic_attributes,
    swig_SignalSinkProcessor_Sf_SwigStatic_constants,
    swig_SignalSinkProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SignalSinkProcessor_bases[] = {0,0};
static const char *swig_SignalSinkProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_SignalSinkProcessor = { "SignalSinkProcessor", "SignalSinkProcessor", &SWIGTYPE_p_SignalSinkProcessor,0, swig_delete_SignalSinkProcessor, swig_SignalSinkProcessor_methods, swig_SignalSinkProcessor_attributes, &swig_SignalSinkProcessor_Sf_SwigStatic, swig_SignalSinkProcessor_meta, swig_SignalSinkProcessor_bases, swig_SignalSinkProcessor_base_names };

static int _wrap_MonoOversampleProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  MonoOversampleProcessor *arg1 = (MonoOversampleProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("MonoOversampleProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoOversampleProcessor::getType",1,"MonoOversampleProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoOversampleProcessor,0))){
    SWIG_fail_ptr("MonoOversampleProcessor_getType",1,SWIGTYPE_p_MonoOversampleProcessor);
  }
  
  result = (ObjectType)((MonoOversampleProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MonoOversampleProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MonoOversampleProcessor *result = 0 ;
  
  SWIG_check_num_args("MonoOversampleProcessor::MonoOversampleProcessor",0,0)
  result = (MonoOversampleProcessor *)new MonoOversampleProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MonoOversampleProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoOversampleProcessor(void *obj) {
MonoOversampleProcessor *arg1 = (MonoOversampleProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoOversampleProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoOversampleProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoOversampleProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MonoOversampleProcessor_methods[]= {
    { "getType", _wrap_MonoOversampleProcessor_getType},
    {0,0}
};
static swig_lua_method swig_MonoOversampleProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoOversampleProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoOversampleProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoOversampleProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoOversampleProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoOversampleProcessor_Sf_SwigStatic = {
    "MonoOversampleProcessor",
    swig_MonoOversampleProcessor_Sf_SwigStatic_methods,
    swig_MonoOversampleProcessor_Sf_SwigStatic_attributes,
    swig_MonoOversampleProcessor_Sf_SwigStatic_constants,
    swig_MonoOversampleProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoOversampleProcessor_bases[] = {0,0};
static const char *swig_MonoOversampleProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_MonoOversampleProcessor = { "MonoOversampleProcessor", "MonoOversampleProcessor", &SWIGTYPE_p_MonoOversampleProcessor,_proxy__wrap_new_MonoOversampleProcessor, swig_delete_MonoOversampleProcessor, swig_MonoOversampleProcessor_methods, swig_MonoOversampleProcessor_attributes, &swig_MonoOversampleProcessor_Sf_SwigStatic, swig_MonoOversampleProcessor_meta, swig_MonoOversampleProcessor_bases, swig_MonoOversampleProcessor_base_names };

static int _wrap_MonoUpsampleProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  MonoUpsampleProcessor *arg1 = (MonoUpsampleProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("MonoUpsampleProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoUpsampleProcessor::getType",1,"MonoUpsampleProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoUpsampleProcessor,0))){
    SWIG_fail_ptr("MonoUpsampleProcessor_getType",1,SWIGTYPE_p_MonoUpsampleProcessor);
  }
  
  result = (ObjectType)((MonoUpsampleProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MonoUpsampleProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MonoUpsampleProcessor *result = 0 ;
  
  SWIG_check_num_args("MonoUpsampleProcessor::MonoUpsampleProcessor",0,0)
  result = (MonoUpsampleProcessor *)new MonoUpsampleProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MonoUpsampleProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoUpsampleProcessor(void *obj) {
MonoUpsampleProcessor *arg1 = (MonoUpsampleProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoUpsampleProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoUpsampleProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoUpsampleProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MonoUpsampleProcessor_methods[]= {
    { "getType", _wrap_MonoUpsampleProcessor_getType},
    {0,0}
};
static swig_lua_method swig_MonoUpsampleProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoUpsampleProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoUpsampleProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoUpsampleProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoUpsampleProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoUpsampleProcessor_Sf_SwigStatic = {
    "MonoUpsampleProcessor",
    swig_MonoUpsampleProcessor_Sf_SwigStatic_methods,
    swig_MonoUpsampleProcessor_Sf_SwigStatic_attributes,
    swig_MonoUpsampleProcessor_Sf_SwigStatic_constants,
    swig_MonoUpsampleProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoUpsampleProcessor_bases[] = {0,0};
static const char *swig_MonoUpsampleProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_MonoUpsampleProcessor = { "MonoUpsampleProcessor", "MonoUpsampleProcessor", &SWIGTYPE_p_MonoUpsampleProcessor,_proxy__wrap_new_MonoUpsampleProcessor, swig_delete_MonoUpsampleProcessor, swig_MonoUpsampleProcessor_methods, swig_MonoUpsampleProcessor_attributes, &swig_MonoUpsampleProcessor_Sf_SwigStatic, swig_MonoUpsampleProcessor_meta, swig_MonoUpsampleProcessor_bases, swig_MonoUpsampleProcessor_base_names };

static int _wrap_MonoDownsampleProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  MonoDownsampleProcessor *arg1 = (MonoDownsampleProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("MonoDownsampleProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoDownsampleProcessor::getType",1,"MonoDownsampleProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoDownsampleProcessor,0))){
    SWIG_fail_ptr("MonoDownsampleProcessor_getType",1,SWIGTYPE_p_MonoDownsampleProcessor);
  }
  
  result = (ObjectType)((MonoDownsampleProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MonoDownsampleProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MonoDownsampleProcessor *result = 0 ;
  
  SWIG_check_num_args("MonoDownsampleProcessor::MonoDownsampleProcessor",0,0)
  result = (MonoDownsampleProcessor *)new MonoDownsampleProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MonoDownsampleProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoDownsampleProcessor(void *obj) {
MonoDownsampleProcessor *arg1 = (MonoDownsampleProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoDownsampleProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoDownsampleProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoDownsampleProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MonoDownsampleProcessor_methods[]= {
    { "getType", _wrap_MonoDownsampleProcessor_getType},
    {0,0}
};
static swig_lua_method swig_MonoDownsampleProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoDownsampleProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoDownsampleProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoDownsampleProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoDownsampleProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoDownsampleProcessor_Sf_SwigStatic = {
    "MonoDownsampleProcessor",
    swig_MonoDownsampleProcessor_Sf_SwigStatic_methods,
    swig_MonoDownsampleProcessor_Sf_SwigStatic_attributes,
    swig_MonoDownsampleProcessor_Sf_SwigStatic_constants,
    swig_MonoDownsampleProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoDownsampleProcessor_bases[] = {0,0};
static const char *swig_MonoDownsampleProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_MonoDownsampleProcessor = { "MonoDownsampleProcessor", "MonoDownsampleProcessor", &SWIGTYPE_p_MonoDownsampleProcessor,_proxy__wrap_new_MonoDownsampleProcessor, swig_delete_MonoDownsampleProcessor, swig_MonoDownsampleProcessor_methods, swig_MonoDownsampleProcessor_attributes, &swig_MonoDownsampleProcessor_Sf_SwigStatic, swig_MonoDownsampleProcessor_meta, swig_MonoDownsampleProcessor_bases, swig_MonoDownsampleProcessor_base_names };

static void swig_delete_OperatorProcessor(void *obj) {
OperatorProcessor *arg1 = (OperatorProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_OperatorProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OperatorProcessor_methods[]= {
    {0,0}
};
static swig_lua_method swig_OperatorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OperatorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OperatorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OperatorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OperatorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OperatorProcessor_Sf_SwigStatic = {
    "OperatorProcessor",
    swig_OperatorProcessor_Sf_SwigStatic_methods,
    swig_OperatorProcessor_Sf_SwigStatic_attributes,
    swig_OperatorProcessor_Sf_SwigStatic_constants,
    swig_OperatorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OperatorProcessor_bases[] = {0,0};
static const char *swig_OperatorProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_OperatorProcessor = { "OperatorProcessor", "OperatorProcessor", &SWIGTYPE_p_OperatorProcessor,0, swig_delete_OperatorProcessor, swig_OperatorProcessor_methods, swig_OperatorProcessor_attributes, &swig_OperatorProcessor_Sf_SwigStatic, swig_OperatorProcessor_meta, swig_OperatorProcessor_bases, swig_OperatorProcessor_base_names };

static int _wrap_MonoOperatorProcessor_list_set(lua_State* L) {
  int SWIG_arg = 0;
  MonoOperatorProcessor *arg1 = (MonoOperatorProcessor *) 0 ;
  MonoProcessorList *arg2 = (MonoProcessorList *) 0 ;
  
  SWIG_check_num_args("MonoOperatorProcessor::list",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoOperatorProcessor::list",1,"MonoOperatorProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("MonoOperatorProcessor::list",2,"MonoProcessorList *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoOperatorProcessor,0))){
    SWIG_fail_ptr("MonoOperatorProcessor_list_set",1,SWIGTYPE_p_MonoOperatorProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__listT_MonoProcessor_p_t,0))){
    SWIG_fail_ptr("MonoOperatorProcessor_list_set",2,SWIGTYPE_p_std__listT_MonoProcessor_p_t);
  }
  
  if (arg1) (arg1)->list = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoOperatorProcessor_list_get(lua_State* L) {
  int SWIG_arg = 0;
  MonoOperatorProcessor *arg1 = (MonoOperatorProcessor *) 0 ;
  MonoProcessorList *result = 0 ;
  
  SWIG_check_num_args("MonoOperatorProcessor::list",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoOperatorProcessor::list",1,"MonoOperatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoOperatorProcessor,0))){
    SWIG_fail_ptr("MonoOperatorProcessor_list_get",1,SWIGTYPE_p_MonoOperatorProcessor);
  }
  
  result = (MonoProcessorList *)& ((arg1)->list);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__listT_MonoProcessor_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MonoOperatorProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MonoOperatorProcessor *result = 0 ;
  
  SWIG_check_num_args("MonoOperatorProcessor::MonoOperatorProcessor",0,0)
  result = (MonoOperatorProcessor *)new MonoOperatorProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MonoOperatorProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoOperatorProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  MonoOperatorProcessor *arg1 = (MonoOperatorProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("MonoOperatorProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoOperatorProcessor::getType",1,"MonoOperatorProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoOperatorProcessor,0))){
    SWIG_fail_ptr("MonoOperatorProcessor_getType",1,SWIGTYPE_p_MonoOperatorProcessor);
  }
  
  result = (ObjectType)((MonoOperatorProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoOperatorProcessor_GetSamples(lua_State* L) {
  int SWIG_arg = 0;
  MonoOperatorProcessor *arg1 = (MonoOperatorProcessor *) 0 ;
  MonoProcessor *arg2 = (MonoProcessor *) 0 ;
  size_t arg3 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  DspFloatType *arg5 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MonoOperatorProcessor::GetSamples",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoOperatorProcessor::GetSamples",1,"MonoOperatorProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("MonoOperatorProcessor::GetSamples",2,"MonoProcessor *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MonoOperatorProcessor::GetSamples",3,"size_t");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MonoOperatorProcessor::GetSamples",4,"DspFloatType *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("MonoOperatorProcessor::GetSamples",5,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoOperatorProcessor,0))){
    SWIG_fail_ptr("MonoOperatorProcessor_GetSamples",1,SWIGTYPE_p_MonoOperatorProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MonoProcessor,0))){
    SWIG_fail_ptr("MonoOperatorProcessor_GetSamples",2,SWIGTYPE_p_MonoProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoOperatorProcessor_GetSamples",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoOperatorProcessor_GetSamples",5,SWIGTYPE_p_float);
  }
  
  (arg1)->GetSamples(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoOperatorProcessor(void *obj) {
MonoOperatorProcessor *arg1 = (MonoOperatorProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoOperatorProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoOperatorProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoOperatorProcessor_attributes[] = {
    { "list", _wrap_MonoOperatorProcessor_list_get, _wrap_MonoOperatorProcessor_list_set },
    {0,0,0}
};
static swig_lua_method swig_MonoOperatorProcessor_methods[]= {
    { "getType", _wrap_MonoOperatorProcessor_getType},
    { "GetSamples", _wrap_MonoOperatorProcessor_GetSamples},
    {0,0}
};
static swig_lua_method swig_MonoOperatorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoOperatorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoOperatorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoOperatorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoOperatorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoOperatorProcessor_Sf_SwigStatic = {
    "MonoOperatorProcessor",
    swig_MonoOperatorProcessor_Sf_SwigStatic_methods,
    swig_MonoOperatorProcessor_Sf_SwigStatic_attributes,
    swig_MonoOperatorProcessor_Sf_SwigStatic_constants,
    swig_MonoOperatorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoOperatorProcessor_bases[] = {0,0};
static const char *swig_MonoOperatorProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_MonoOperatorProcessor = { "MonoOperatorProcessor", "MonoOperatorProcessor", &SWIGTYPE_p_MonoOperatorProcessor,_proxy__wrap_new_MonoOperatorProcessor, swig_delete_MonoOperatorProcessor, swig_MonoOperatorProcessor_methods, swig_MonoOperatorProcessor_attributes, &swig_MonoOperatorProcessor_Sf_SwigStatic, swig_MonoOperatorProcessor_meta, swig_MonoOperatorProcessor_bases, swig_MonoOperatorProcessor_base_names };

static int _wrap_new_MonoCascadeOperatorProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MonoCascadeOperatorProcessor *result = 0 ;
  
  SWIG_check_num_args("MonoCascadeOperatorProcessor::MonoCascadeOperatorProcessor",0,0)
  result = (MonoCascadeOperatorProcessor *)new MonoCascadeOperatorProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MonoCascadeOperatorProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoCascadeOperatorProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  MonoCascadeOperatorProcessor *arg1 = (MonoCascadeOperatorProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MonoCascadeOperatorProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoCascadeOperatorProcessor::ProcessBlock",1,"MonoCascadeOperatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoCascadeOperatorProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MonoCascadeOperatorProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MonoCascadeOperatorProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoCascadeOperatorProcessor,0))){
    SWIG_fail_ptr("MonoCascadeOperatorProcessor_ProcessBlock",1,SWIGTYPE_p_MonoCascadeOperatorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoCascadeOperatorProcessor_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoCascadeOperatorProcessor_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoCascadeOperatorProcessor(void *obj) {
MonoCascadeOperatorProcessor *arg1 = (MonoCascadeOperatorProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoCascadeOperatorProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoCascadeOperatorProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoCascadeOperatorProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MonoCascadeOperatorProcessor_methods[]= {
    { "ProcessBlock", _wrap_MonoCascadeOperatorProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_MonoCascadeOperatorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoCascadeOperatorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoCascadeOperatorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoCascadeOperatorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoCascadeOperatorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoCascadeOperatorProcessor_Sf_SwigStatic = {
    "MonoCascadeOperatorProcessor",
    swig_MonoCascadeOperatorProcessor_Sf_SwigStatic_methods,
    swig_MonoCascadeOperatorProcessor_Sf_SwigStatic_attributes,
    swig_MonoCascadeOperatorProcessor_Sf_SwigStatic_constants,
    swig_MonoCascadeOperatorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoCascadeOperatorProcessor_bases[] = {0,0};
static const char *swig_MonoCascadeOperatorProcessor_base_names[] = {"MonoOperatorProcessor *",0};
static swig_lua_class _wrap_class_MonoCascadeOperatorProcessor = { "MonoCascadeOperatorProcessor", "MonoCascadeOperatorProcessor", &SWIGTYPE_p_MonoCascadeOperatorProcessor,_proxy__wrap_new_MonoCascadeOperatorProcessor, swig_delete_MonoCascadeOperatorProcessor, swig_MonoCascadeOperatorProcessor_methods, swig_MonoCascadeOperatorProcessor_attributes, &swig_MonoCascadeOperatorProcessor_Sf_SwigStatic, swig_MonoCascadeOperatorProcessor_meta, swig_MonoCascadeOperatorProcessor_bases, swig_MonoCascadeOperatorProcessor_base_names };

static int _wrap_new_MonoMultiplierOperatorProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MonoMultiplierOperatorProcessor *result = 0 ;
  
  SWIG_check_num_args("MonoMultiplierOperatorProcessor::MonoMultiplierOperatorProcessor",0,0)
  result = (MonoMultiplierOperatorProcessor *)new MonoMultiplierOperatorProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MonoMultiplierOperatorProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoMultiplierOperatorProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  MonoMultiplierOperatorProcessor *arg1 = (MonoMultiplierOperatorProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MonoMultiplierOperatorProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoMultiplierOperatorProcessor::ProcessBlock",1,"MonoMultiplierOperatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoMultiplierOperatorProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MonoMultiplierOperatorProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MonoMultiplierOperatorProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoMultiplierOperatorProcessor,0))){
    SWIG_fail_ptr("MonoMultiplierOperatorProcessor_ProcessBlock",1,SWIGTYPE_p_MonoMultiplierOperatorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoMultiplierOperatorProcessor_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoMultiplierOperatorProcessor_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoMultiplierOperatorProcessor(void *obj) {
MonoMultiplierOperatorProcessor *arg1 = (MonoMultiplierOperatorProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoMultiplierOperatorProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoMultiplierOperatorProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoMultiplierOperatorProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MonoMultiplierOperatorProcessor_methods[]= {
    { "ProcessBlock", _wrap_MonoMultiplierOperatorProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_MonoMultiplierOperatorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoMultiplierOperatorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoMultiplierOperatorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoMultiplierOperatorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoMultiplierOperatorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoMultiplierOperatorProcessor_Sf_SwigStatic = {
    "MonoMultiplierOperatorProcessor",
    swig_MonoMultiplierOperatorProcessor_Sf_SwigStatic_methods,
    swig_MonoMultiplierOperatorProcessor_Sf_SwigStatic_attributes,
    swig_MonoMultiplierOperatorProcessor_Sf_SwigStatic_constants,
    swig_MonoMultiplierOperatorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoMultiplierOperatorProcessor_bases[] = {0,0};
static const char *swig_MonoMultiplierOperatorProcessor_base_names[] = {"MonoOperatorProcessor *",0};
static swig_lua_class _wrap_class_MonoMultiplierOperatorProcessor = { "MonoMultiplierOperatorProcessor", "MonoMultiplierOperatorProcessor", &SWIGTYPE_p_MonoMultiplierOperatorProcessor,_proxy__wrap_new_MonoMultiplierOperatorProcessor, swig_delete_MonoMultiplierOperatorProcessor, swig_MonoMultiplierOperatorProcessor_methods, swig_MonoMultiplierOperatorProcessor_attributes, &swig_MonoMultiplierOperatorProcessor_Sf_SwigStatic, swig_MonoMultiplierOperatorProcessor_meta, swig_MonoMultiplierOperatorProcessor_bases, swig_MonoMultiplierOperatorProcessor_base_names };

static int _wrap_new_MonoAdderOperatorProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MonoAdderOperatorProcessor *result = 0 ;
  
  SWIG_check_num_args("MonoAdderOperatorProcessor::MonoAdderOperatorProcessor",0,0)
  result = (MonoAdderOperatorProcessor *)new MonoAdderOperatorProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MonoAdderOperatorProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoAdderOperatorProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  MonoAdderOperatorProcessor *arg1 = (MonoAdderOperatorProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MonoAdderOperatorProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoAdderOperatorProcessor::ProcessBlock",1,"MonoAdderOperatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoAdderOperatorProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MonoAdderOperatorProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MonoAdderOperatorProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoAdderOperatorProcessor,0))){
    SWIG_fail_ptr("MonoAdderOperatorProcessor_ProcessBlock",1,SWIGTYPE_p_MonoAdderOperatorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoAdderOperatorProcessor_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoAdderOperatorProcessor_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoAdderOperatorProcessor(void *obj) {
MonoAdderOperatorProcessor *arg1 = (MonoAdderOperatorProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoAdderOperatorProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoAdderOperatorProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoAdderOperatorProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MonoAdderOperatorProcessor_methods[]= {
    { "ProcessBlock", _wrap_MonoAdderOperatorProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_MonoAdderOperatorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoAdderOperatorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoAdderOperatorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoAdderOperatorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoAdderOperatorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoAdderOperatorProcessor_Sf_SwigStatic = {
    "MonoAdderOperatorProcessor",
    swig_MonoAdderOperatorProcessor_Sf_SwigStatic_methods,
    swig_MonoAdderOperatorProcessor_Sf_SwigStatic_attributes,
    swig_MonoAdderOperatorProcessor_Sf_SwigStatic_constants,
    swig_MonoAdderOperatorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoAdderOperatorProcessor_bases[] = {0,0};
static const char *swig_MonoAdderOperatorProcessor_base_names[] = {"MonoOperatorProcessor *",0};
static swig_lua_class _wrap_class_MonoAdderOperatorProcessor = { "MonoAdderOperatorProcessor", "MonoAdderOperatorProcessor", &SWIGTYPE_p_MonoAdderOperatorProcessor,_proxy__wrap_new_MonoAdderOperatorProcessor, swig_delete_MonoAdderOperatorProcessor, swig_MonoAdderOperatorProcessor_methods, swig_MonoAdderOperatorProcessor_attributes, &swig_MonoAdderOperatorProcessor_Sf_SwigStatic, swig_MonoAdderOperatorProcessor_meta, swig_MonoAdderOperatorProcessor_bases, swig_MonoAdderOperatorProcessor_base_names };

static int _wrap_new_MonoSubtractorOperatorProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MonoSubtractorOperatorProcessor *result = 0 ;
  
  SWIG_check_num_args("MonoSubtractorOperatorProcessor::MonoSubtractorOperatorProcessor",0,0)
  result = (MonoSubtractorOperatorProcessor *)new MonoSubtractorOperatorProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MonoSubtractorOperatorProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoSubtractorOperatorProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  MonoSubtractorOperatorProcessor *arg1 = (MonoSubtractorOperatorProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MonoSubtractorOperatorProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoSubtractorOperatorProcessor::ProcessBlock",1,"MonoSubtractorOperatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoSubtractorOperatorProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MonoSubtractorOperatorProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MonoSubtractorOperatorProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoSubtractorOperatorProcessor,0))){
    SWIG_fail_ptr("MonoSubtractorOperatorProcessor_ProcessBlock",1,SWIGTYPE_p_MonoSubtractorOperatorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoSubtractorOperatorProcessor_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoSubtractorOperatorProcessor_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoSubtractorOperatorProcessor(void *obj) {
MonoSubtractorOperatorProcessor *arg1 = (MonoSubtractorOperatorProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoSubtractorOperatorProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoSubtractorOperatorProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoSubtractorOperatorProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MonoSubtractorOperatorProcessor_methods[]= {
    { "ProcessBlock", _wrap_MonoSubtractorOperatorProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_MonoSubtractorOperatorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoSubtractorOperatorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoSubtractorOperatorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoSubtractorOperatorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoSubtractorOperatorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoSubtractorOperatorProcessor_Sf_SwigStatic = {
    "MonoSubtractorOperatorProcessor",
    swig_MonoSubtractorOperatorProcessor_Sf_SwigStatic_methods,
    swig_MonoSubtractorOperatorProcessor_Sf_SwigStatic_attributes,
    swig_MonoSubtractorOperatorProcessor_Sf_SwigStatic_constants,
    swig_MonoSubtractorOperatorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoSubtractorOperatorProcessor_bases[] = {0,0};
static const char *swig_MonoSubtractorOperatorProcessor_base_names[] = {"MonoOperatorProcessor *",0};
static swig_lua_class _wrap_class_MonoSubtractorOperatorProcessor = { "MonoSubtractorOperatorProcessor", "MonoSubtractorOperatorProcessor", &SWIGTYPE_p_MonoSubtractorOperatorProcessor,_proxy__wrap_new_MonoSubtractorOperatorProcessor, swig_delete_MonoSubtractorOperatorProcessor, swig_MonoSubtractorOperatorProcessor_methods, swig_MonoSubtractorOperatorProcessor_attributes, &swig_MonoSubtractorOperatorProcessor_Sf_SwigStatic, swig_MonoSubtractorOperatorProcessor_meta, swig_MonoSubtractorOperatorProcessor_bases, swig_MonoSubtractorOperatorProcessor_base_names };

static int _wrap_new_MonoModulatorOperatorProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MonoModulatorOperatorProcessor *result = 0 ;
  
  SWIG_check_num_args("MonoModulatorOperatorProcessor::MonoModulatorOperatorProcessor",0,0)
  result = (MonoModulatorOperatorProcessor *)new MonoModulatorOperatorProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MonoModulatorOperatorProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoModulatorOperatorProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  MonoModulatorOperatorProcessor *arg1 = (MonoModulatorOperatorProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MonoModulatorOperatorProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoModulatorOperatorProcessor::ProcessBlock",1,"MonoModulatorOperatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoModulatorOperatorProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MonoModulatorOperatorProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MonoModulatorOperatorProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoModulatorOperatorProcessor,0))){
    SWIG_fail_ptr("MonoModulatorOperatorProcessor_ProcessBlock",1,SWIGTYPE_p_MonoModulatorOperatorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoModulatorOperatorProcessor_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoModulatorOperatorProcessor_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoModulatorOperatorProcessor(void *obj) {
MonoModulatorOperatorProcessor *arg1 = (MonoModulatorOperatorProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoModulatorOperatorProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoModulatorOperatorProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoModulatorOperatorProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MonoModulatorOperatorProcessor_methods[]= {
    { "ProcessBlock", _wrap_MonoModulatorOperatorProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_MonoModulatorOperatorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoModulatorOperatorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoModulatorOperatorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoModulatorOperatorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoModulatorOperatorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoModulatorOperatorProcessor_Sf_SwigStatic = {
    "MonoModulatorOperatorProcessor",
    swig_MonoModulatorOperatorProcessor_Sf_SwigStatic_methods,
    swig_MonoModulatorOperatorProcessor_Sf_SwigStatic_attributes,
    swig_MonoModulatorOperatorProcessor_Sf_SwigStatic_constants,
    swig_MonoModulatorOperatorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoModulatorOperatorProcessor_bases[] = {0,0};
static const char *swig_MonoModulatorOperatorProcessor_base_names[] = {"MonoOperatorProcessor *",0};
static swig_lua_class _wrap_class_MonoModulatorOperatorProcessor = { "MonoModulatorOperatorProcessor", "MonoModulatorOperatorProcessor", &SWIGTYPE_p_MonoModulatorOperatorProcessor,_proxy__wrap_new_MonoModulatorOperatorProcessor, swig_delete_MonoModulatorOperatorProcessor, swig_MonoModulatorOperatorProcessor_methods, swig_MonoModulatorOperatorProcessor_attributes, &swig_MonoModulatorOperatorProcessor_Sf_SwigStatic, swig_MonoModulatorOperatorProcessor_meta, swig_MonoModulatorOperatorProcessor_bases, swig_MonoModulatorOperatorProcessor_base_names };

static int _wrap_MonoBlendOperatorProcessor_blend_set(lua_State* L) {
  int SWIG_arg = 0;
  MonoBlendOperatorProcessor *arg1 = (MonoBlendOperatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("MonoBlendOperatorProcessor::blend",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoBlendOperatorProcessor::blend",1,"MonoBlendOperatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoBlendOperatorProcessor::blend",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoBlendOperatorProcessor,0))){
    SWIG_fail_ptr("MonoBlendOperatorProcessor_blend_set",1,SWIGTYPE_p_MonoBlendOperatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->blend = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoBlendOperatorProcessor_blend_get(lua_State* L) {
  int SWIG_arg = 0;
  MonoBlendOperatorProcessor *arg1 = (MonoBlendOperatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("MonoBlendOperatorProcessor::blend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoBlendOperatorProcessor::blend",1,"MonoBlendOperatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoBlendOperatorProcessor,0))){
    SWIG_fail_ptr("MonoBlendOperatorProcessor_blend_get",1,SWIGTYPE_p_MonoBlendOperatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->blend);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MonoBlendOperatorProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MonoBlendOperatorProcessor *result = 0 ;
  
  SWIG_check_num_args("MonoBlendOperatorProcessor::MonoBlendOperatorProcessor",0,0)
  result = (MonoBlendOperatorProcessor *)new MonoBlendOperatorProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MonoBlendOperatorProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoBlendOperatorProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  MonoBlendOperatorProcessor *arg1 = (MonoBlendOperatorProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MonoBlendOperatorProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoBlendOperatorProcessor::ProcessBlock",1,"MonoBlendOperatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoBlendOperatorProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MonoBlendOperatorProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MonoBlendOperatorProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoBlendOperatorProcessor,0))){
    SWIG_fail_ptr("MonoBlendOperatorProcessor_ProcessBlock",1,SWIGTYPE_p_MonoBlendOperatorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoBlendOperatorProcessor_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoBlendOperatorProcessor_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoBlendOperatorProcessor(void *obj) {
MonoBlendOperatorProcessor *arg1 = (MonoBlendOperatorProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoBlendOperatorProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoBlendOperatorProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoBlendOperatorProcessor_attributes[] = {
    { "blend", _wrap_MonoBlendOperatorProcessor_blend_get, _wrap_MonoBlendOperatorProcessor_blend_set },
    {0,0,0}
};
static swig_lua_method swig_MonoBlendOperatorProcessor_methods[]= {
    { "ProcessBlock", _wrap_MonoBlendOperatorProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_MonoBlendOperatorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoBlendOperatorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoBlendOperatorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoBlendOperatorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoBlendOperatorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoBlendOperatorProcessor_Sf_SwigStatic = {
    "MonoBlendOperatorProcessor",
    swig_MonoBlendOperatorProcessor_Sf_SwigStatic_methods,
    swig_MonoBlendOperatorProcessor_Sf_SwigStatic_attributes,
    swig_MonoBlendOperatorProcessor_Sf_SwigStatic_constants,
    swig_MonoBlendOperatorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoBlendOperatorProcessor_bases[] = {0,0};
static const char *swig_MonoBlendOperatorProcessor_base_names[] = {"MonoOperatorProcessor *",0};
static swig_lua_class _wrap_class_MonoBlendOperatorProcessor = { "MonoBlendOperatorProcessor", "MonoBlendOperatorProcessor", &SWIGTYPE_p_MonoBlendOperatorProcessor,_proxy__wrap_new_MonoBlendOperatorProcessor, swig_delete_MonoBlendOperatorProcessor, swig_MonoBlendOperatorProcessor_methods, swig_MonoBlendOperatorProcessor_attributes, &swig_MonoBlendOperatorProcessor_Sf_SwigStatic, swig_MonoBlendOperatorProcessor_meta, swig_MonoBlendOperatorProcessor_bases, swig_MonoBlendOperatorProcessor_base_names };

static int _wrap_factorial(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::factorial",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::factorial",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (DspFloatType)Filters::factorial(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_binomial(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::binomial",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::binomial",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::binomial",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)Filters::binomial(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalQ(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::DigitalQ",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::DigitalQ",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::DigitalQ",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)Filters::DigitalQ(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogQ(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::AnalogQ",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::AnalogQ",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (DspFloatType)Filters::AnalogQ(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QSlope(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::QSlope",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::QSlope",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (DspFloatType)Filters::QSlope(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bandwidth(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::Bandwidth",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::Bandwidth",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::Bandwidth",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)Filters::Bandwidth(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandwidthQ(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BandwidthQ",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::BandwidthQ",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BandwidthQ",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)Filters::BandwidthQ(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Q(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::Q",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::Q",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::Q",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)Filters::Q(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_f0(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::f0",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::f0",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::f0",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)Filters::f0(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_f0ff(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::f0ff",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::f0ff",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::f0ff",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)Filters::f0ff(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_f1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::f1",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::f1",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::f1",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)Filters::f1(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_f2bw(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::f2bw",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::f2bw",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::f2bw",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)Filters::f2bw(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_f2(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::f2",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::f2",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::f2",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)Filters::f2(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_f1bw(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::f1bw",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::f1bw",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::f1bw",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)Filters::f1bw(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctaveBWToQ(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::OctaveBWToQ",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::OctaveBWToQ",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (DspFloatType)Filters::OctaveBWToQ(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QtoOctaveBandwidth1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::QtoOctaveBandwidth1",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::QtoOctaveBandwidth1",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (DspFloatType)Filters::QtoOctaveBandwidth1(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QToOctaveBandwidth2(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::QToOctaveBandwidth2",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::QToOctaveBandwidth2",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (DspFloatType)Filters::QToOctaveBandwidth2(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QToOctaveNSinh(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::QToOctaveNSinh",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::QToOctaveNSinh",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (DspFloatType)Filters::QToOctaveNSinh(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QToOctaveBandwidth4(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::QToOctaveBandwidth4",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::QToOctaveBandwidth4",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (DspFloatType)Filters::QToOctaveBandwidth4(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctaveRatio(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::OctaveRatio",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::OctaveRatio",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (DspFloatType)Filters::OctaveRatio(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctaveRatioF(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::OctaveRatioF",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::OctaveRatioF",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::OctaveRatioF",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)Filters::OctaveRatioF(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterCoefficients_a_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterCoefficients *arg1 = (Filters::FilterCoefficients *) 0 ;
  DspFloatType *arg2 ;
  
  SWIG_check_num_args("Filters::FilterCoefficients::a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::FilterCoefficients::a",1,"Filters::FilterCoefficients *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::FilterCoefficients::a",2,"DspFloatType [2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__FilterCoefficients,0))){
    SWIG_fail_ptr("FilterCoefficients_a_set",1,SWIGTYPE_p_Filters__FilterCoefficients);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FilterCoefficients_a_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    DspFloatType *b = (DspFloatType *) arg1->a;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((DspFloatType *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterCoefficients_a_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterCoefficients *arg1 = (Filters::FilterCoefficients *) 0 ;
  DspFloatType *result = 0 ;
  
  SWIG_check_num_args("Filters::FilterCoefficients::a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::FilterCoefficients::a",1,"Filters::FilterCoefficients *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__FilterCoefficients,0))){
    SWIG_fail_ptr("FilterCoefficients_a_get",1,SWIGTYPE_p_Filters__FilterCoefficients);
  }
  
  result = (DspFloatType *)(DspFloatType *) ((arg1)->a);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterCoefficients_b_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterCoefficients *arg1 = (Filters::FilterCoefficients *) 0 ;
  DspFloatType *arg2 ;
  
  SWIG_check_num_args("Filters::FilterCoefficients::b",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::FilterCoefficients::b",1,"Filters::FilterCoefficients *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::FilterCoefficients::b",2,"DspFloatType [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__FilterCoefficients,0))){
    SWIG_fail_ptr("FilterCoefficients_b_set",1,SWIGTYPE_p_Filters__FilterCoefficients);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FilterCoefficients_b_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    DspFloatType *b = (DspFloatType *) arg1->b;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((DspFloatType *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterCoefficients_b_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterCoefficients *arg1 = (Filters::FilterCoefficients *) 0 ;
  DspFloatType *result = 0 ;
  
  SWIG_check_num_args("Filters::FilterCoefficients::b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::FilterCoefficients::b",1,"Filters::FilterCoefficients *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__FilterCoefficients,0))){
    SWIG_fail_ptr("FilterCoefficients_b_get",1,SWIGTYPE_p_Filters__FilterCoefficients);
  }
  
  result = (DspFloatType *)(DspFloatType *) ((arg1)->b);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FilterCoefficients(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterCoefficients *result = 0 ;
  
  SWIG_check_num_args("Filters::FilterCoefficients::FilterCoefficients",0,0)
  result = (Filters::FilterCoefficients *)new Filters::FilterCoefficients();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FilterCoefficients(void *obj) {
Filters::FilterCoefficients *arg1 = (Filters::FilterCoefficients *) obj;
delete arg1;
}
static int _proxy__wrap_new_FilterCoefficients(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FilterCoefficients);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FilterCoefficients_attributes[] = {
    { "a", _wrap_FilterCoefficients_a_get, _wrap_FilterCoefficients_a_set },
    { "b", _wrap_FilterCoefficients_b_get, _wrap_FilterCoefficients_b_set },
    {0,0,0}
};
static swig_lua_method swig_FilterCoefficients_methods[]= {
    {0,0}
};
static swig_lua_method swig_FilterCoefficients_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FilterCoefficients_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FilterCoefficients_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FilterCoefficients_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FilterCoefficients_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FilterCoefficients_Sf_SwigStatic = {
    "FilterCoefficients",
    swig_FilterCoefficients_Sf_SwigStatic_methods,
    swig_FilterCoefficients_Sf_SwigStatic_attributes,
    swig_FilterCoefficients_Sf_SwigStatic_constants,
    swig_FilterCoefficients_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FilterCoefficients_bases[] = {0};
static const char *swig_FilterCoefficients_base_names[] = {0};
static swig_lua_class _wrap_class_FilterCoefficients = { "FilterCoefficients", "FilterCoefficients", &SWIGTYPE_p_Filters__FilterCoefficients,_proxy__wrap_new_FilterCoefficients, swig_delete_FilterCoefficients, swig_FilterCoefficients_methods, swig_FilterCoefficients_attributes, &swig_FilterCoefficients_Sf_SwigStatic, swig_FilterCoefficients_meta, swig_FilterCoefficients_bases, swig_FilterCoefficients_base_names };

static int _wrap_freqReponse(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType arg6 ;
  std::complex< DspFloatType > result;
  
  SWIG_check_num_args("Filters::freqReponse",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::freqReponse",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::freqReponse",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::freqReponse",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::freqReponse",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::freqReponse",5,"DspFloatType");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Filters::freqReponse",6,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  result = Filters::freqReponse(arg1,arg2,arg3,arg4,arg5,arg6);
  {
    std::complex< DspFloatType > * resultptr = new std::complex< DspFloatType >((const std::complex< DspFloatType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_magReponse(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType arg6 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::magReponse",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::magReponse",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::magReponse",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::magReponse",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::magReponse",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::magReponse",5,"DspFloatType");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Filters::magReponse",6,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  result = (DspFloatType)Filters::magReponse(arg1,arg2,arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_phaseReponse(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType arg6 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::phaseReponse",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::phaseReponse",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::phaseReponse",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::phaseReponse",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::phaseReponse",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::phaseReponse",5,"DspFloatType");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Filters::phaseReponse",6,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  result = (DspFloatType)Filters::phaseReponse(arg1,arg2,arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_impulseResponse(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  FilterProcessor *arg2 = (FilterProcessor *) 0 ;
  SwigValueWrapper< std::vector< float > > result;
  
  SWIG_check_num_args("Filters::impulseResponse",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::impulseResponse",1,"size_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::impulseResponse",2,"FilterProcessor *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("impulseResponse",2,SWIGTYPE_p_FilterProcessor);
  }
  
  result = Filters::impulseResponse(arg1,arg2);
  {
    std::vector< DspFloatType > * resultptr = new std::vector< DspFloatType >((const std::vector< DspFloatType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterBase_filter_type_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterBase *arg1 = (Filters::FilterBase *) 0 ;
  Filters::FilterBase::FilterType arg2 ;
  
  SWIG_check_num_args("Filters::FilterBase::filter_type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::FilterBase::filter_type",1,"Filters::FilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::FilterBase::filter_type",2,"Filters::FilterBase::FilterType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__FilterBase,0))){
    SWIG_fail_ptr("FilterBase_filter_type_set",1,SWIGTYPE_p_Filters__FilterBase);
  }
  
  arg2 = (Filters::FilterBase::FilterType)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->filter_type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterBase_filter_type_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterBase *arg1 = (Filters::FilterBase *) 0 ;
  Filters::FilterBase::FilterType result;
  
  SWIG_check_num_args("Filters::FilterBase::filter_type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::FilterBase::filter_type",1,"Filters::FilterBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__FilterBase,0))){
    SWIG_fail_ptr("FilterBase_filter_type_get",1,SWIGTYPE_p_Filters__FilterBase);
  }
  
  result = (Filters::FilterBase::FilterType) ((arg1)->filter_type);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterBase_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterBase *arg1 = (Filters::FilterBase *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::FilterBase::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::FilterBase::Fc",1,"Filters::FilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::FilterBase::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__FilterBase,0))){
    SWIG_fail_ptr("FilterBase_Fc_set",1,SWIGTYPE_p_Filters__FilterBase);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterBase_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterBase *arg1 = (Filters::FilterBase *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::FilterBase::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::FilterBase::Fc",1,"Filters::FilterBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__FilterBase,0))){
    SWIG_fail_ptr("FilterBase_Fc_get",1,SWIGTYPE_p_Filters__FilterBase);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterBase_Fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterBase *arg1 = (Filters::FilterBase *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::FilterBase::Fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::FilterBase::Fs",1,"Filters::FilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::FilterBase::Fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__FilterBase,0))){
    SWIG_fail_ptr("FilterBase_Fs_set",1,SWIGTYPE_p_Filters__FilterBase);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterBase_Fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterBase *arg1 = (Filters::FilterBase *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::FilterBase::Fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::FilterBase::Fs",1,"Filters::FilterBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__FilterBase,0))){
    SWIG_fail_ptr("FilterBase_Fs_get",1,SWIGTYPE_p_Filters__FilterBase);
  }
  
  result = (DspFloatType) ((arg1)->Fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterBase_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterBase *arg1 = (Filters::FilterBase *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::FilterBase::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::FilterBase::Q",1,"Filters::FilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::FilterBase::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__FilterBase,0))){
    SWIG_fail_ptr("FilterBase_Q_set",1,SWIGTYPE_p_Filters__FilterBase);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterBase_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterBase *arg1 = (Filters::FilterBase *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::FilterBase::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::FilterBase::Q",1,"Filters::FilterBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__FilterBase,0))){
    SWIG_fail_ptr("FilterBase_Q_get",1,SWIGTYPE_p_Filters__FilterBase);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterBase_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterBase *arg1 = (Filters::FilterBase *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::FilterBase::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::FilterBase::Tick",1,"Filters::FilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::FilterBase::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::FilterBase::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::FilterBase::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::FilterBase::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__FilterBase,0))){
    SWIG_fail_ptr("FilterBase_Tick",1,SWIGTYPE_p_Filters__FilterBase);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterBase_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterBase *arg1 = (Filters::FilterBase *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::FilterBase::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::FilterBase::Tick",1,"Filters::FilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::FilterBase::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::FilterBase::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::FilterBase::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__FilterBase,0))){
    SWIG_fail_ptr("FilterBase_Tick",1,SWIGTYPE_p_Filters__FilterBase);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterBase_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterBase *arg1 = (Filters::FilterBase *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::FilterBase::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::FilterBase::Tick",1,"Filters::FilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::FilterBase::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::FilterBase::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__FilterBase,0))){
    SWIG_fail_ptr("FilterBase_Tick",1,SWIGTYPE_p_Filters__FilterBase);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterBase_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterBase *arg1 = (Filters::FilterBase *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::FilterBase::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::FilterBase::Tick",1,"Filters::FilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::FilterBase::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__FilterBase,0))){
    SWIG_fail_ptr("FilterBase_Tick",1,SWIGTYPE_p_Filters__FilterBase);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterBase_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__FilterBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FilterBase_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__FilterBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FilterBase_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__FilterBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FilterBase_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__FilterBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_FilterBase_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FilterBase_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::FilterBase::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::FilterBase::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::FilterBase::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::FilterBase::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_FilterBase_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterBase *arg1 = (Filters::FilterBase *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Filters::FilterBase::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::FilterBase::ProcessBlock",1,"Filters::FilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::FilterBase::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Filters::FilterBase::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Filters::FilterBase::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__FilterBase,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",1,SWIGTYPE_p_Filters__FilterBase);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterBase_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterBase *arg1 = (Filters::FilterBase *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  float *arg7 = (float *) 0 ;
  
  SWIG_check_num_args("Filters::FilterBase::ProcessBlock",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::FilterBase::ProcessBlock",1,"Filters::FilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::FilterBase::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Filters::FilterBase::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Filters::FilterBase::ProcessBlock",4,"float *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Filters::FilterBase::ProcessBlock",5,"float *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("Filters::FilterBase::ProcessBlock",6,"float *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("Filters::FilterBase::ProcessBlock",7,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__FilterBase,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",1,SWIGTYPE_p_Filters__FilterBase);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",6,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",7,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterBase_ProcessBlock(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__FilterBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FilterBase_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__FilterBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_FilterBase_ProcessBlock__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FilterBase_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::FilterBase::ProcessBlock(size_t,float *,float *)\n"
    "    Filters::FilterBase::ProcessBlock(size_t,float *,float *,float *,float *,float *)\n");
  lua_error(L);return 0;
}


static int _wrap_FilterBase_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterBase *arg1 = (Filters::FilterBase *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::FilterBase::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::FilterBase::setCutoff",1,"Filters::FilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::FilterBase::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__FilterBase,0))){
    SWIG_fail_ptr("FilterBase_setCutoff",1,SWIGTYPE_p_Filters__FilterBase);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterBase_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterBase *arg1 = (Filters::FilterBase *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::FilterBase::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::FilterBase::setQ",1,"Filters::FilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::FilterBase::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__FilterBase,0))){
    SWIG_fail_ptr("FilterBase_setQ",1,SWIGTYPE_p_Filters__FilterBase);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterBase_setGain(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterBase *arg1 = (Filters::FilterBase *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::FilterBase::setGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::FilterBase::setGain",1,"Filters::FilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::FilterBase::setGain",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__FilterBase,0))){
    SWIG_fail_ptr("FilterBase_setGain",1,SWIGTYPE_p_Filters__FilterBase);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setGain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FilterBase(void *obj) {
Filters::FilterBase *arg1 = (Filters::FilterBase *) obj;
delete arg1;
}
static swig_lua_attribute swig_FilterBase_attributes[] = {
    { "filter_type", _wrap_FilterBase_filter_type_get, _wrap_FilterBase_filter_type_set },
    { "Fc", _wrap_FilterBase_Fc_get, _wrap_FilterBase_Fc_set },
    { "Fs", _wrap_FilterBase_Fs_get, _wrap_FilterBase_Fs_set },
    { "Q", _wrap_FilterBase_Q_get, _wrap_FilterBase_Q_set },
    {0,0,0}
};
static swig_lua_method swig_FilterBase_methods[]= {
    { "Tick", _wrap_FilterBase_Tick},
    { "ProcessBlock", _wrap_FilterBase_ProcessBlock},
    { "setCutoff", _wrap_FilterBase_setCutoff},
    { "setQ", _wrap_FilterBase_setQ},
    { "setGain", _wrap_FilterBase_setGain},
    {0,0}
};
static swig_lua_method swig_FilterBase_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FilterBase_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FilterBase_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("LOWPASS", Filters::FilterBase::LOWPASS)},
    {SWIG_LUA_CONSTTAB_INT("HIGHPASS", Filters::FilterBase::HIGHPASS)},
    {SWIG_LUA_CONSTTAB_INT("BANDPASS", Filters::FilterBase::BANDPASS)},
    {SWIG_LUA_CONSTTAB_INT("NOTCH", Filters::FilterBase::NOTCH)},
    {SWIG_LUA_CONSTTAB_INT("PEAK", Filters::FilterBase::PEAK)},
    {SWIG_LUA_CONSTTAB_INT("LOWSHELF", Filters::FilterBase::LOWSHELF)},
    {SWIG_LUA_CONSTTAB_INT("HIGHSHELF", Filters::FilterBase::HIGHSHELF)},
    {SWIG_LUA_CONSTTAB_INT("ALLPASS", Filters::FilterBase::ALLPASS)},
    {SWIG_LUA_CONSTTAB_INT("SKIRTBANDPASS", Filters::FilterBase::SKIRTBANDPASS)},
    {SWIG_LUA_CONSTTAB_INT("ZERODBBANDPASS", Filters::FilterBase::ZERODBBANDPASS)},
    {SWIG_LUA_CONSTTAB_INT("LOWPASS1P", Filters::FilterBase::LOWPASS1P)},
    {SWIG_LUA_CONSTTAB_INT("HIGHPASS1P", Filters::FilterBase::HIGHPASS1P)},
    {SWIG_LUA_CONSTTAB_INT("ALLPASS1P", Filters::FilterBase::ALLPASS1P)},
    {SWIG_LUA_CONSTTAB_INT("LOWSHELFBOOST", Filters::FilterBase::LOWSHELFBOOST)},
    {SWIG_LUA_CONSTTAB_INT("LOWSHELFCUT", Filters::FilterBase::LOWSHELFCUT)},
    {SWIG_LUA_CONSTTAB_INT("HIGHSHELFBOOST", Filters::FilterBase::HIGHSHELFBOOST)},
    {SWIG_LUA_CONSTTAB_INT("HIGHSHELFCUT", Filters::FilterBase::HIGHSHELFCUT)},
    {SWIG_LUA_CONSTTAB_INT("PEAKBOOST", Filters::FilterBase::PEAKBOOST)},
    {SWIG_LUA_CONSTTAB_INT("PEAKCUT", Filters::FilterBase::PEAKCUT)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FilterBase_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FilterBase_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FilterBase_Sf_SwigStatic = {
    "FilterBase",
    swig_FilterBase_Sf_SwigStatic_methods,
    swig_FilterBase_Sf_SwigStatic_attributes,
    swig_FilterBase_Sf_SwigStatic_constants,
    swig_FilterBase_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FilterBase_bases[] = {0,0};
static const char *swig_FilterBase_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_FilterBase = { "FilterBase", "FilterBase", &SWIGTYPE_p_Filters__FilterBase,0, swig_delete_FilterBase, swig_FilterBase_methods, swig_FilterBase_attributes, &swig_FilterBase_Sf_SwigStatic, swig_FilterBase_meta, swig_FilterBase_bases, swig_FilterBase_base_names };

static int _wrap_LowpassOnePole(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::LowpassOnePole",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::LowpassOnePole",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::LowpassOnePole",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = Filters::LowpassOnePole(arg1,arg2);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HighpassOnePole(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::HighpassOnePole",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::HighpassOnePole",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::HighpassOnePole",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = Filters::HighpassOnePole(arg1,arg2);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AllpassOnePoleOneZero(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::AllpassOnePoleOneZero",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::AllpassOnePoleOneZero",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::AllpassOnePoleOneZero",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = Filters::AllpassOnePoleOneZero(arg1,arg2);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LowpassOnePoleOneZero(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::LowpassOnePoleOneZero",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::LowpassOnePoleOneZero",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::LowpassOnePoleOneZero",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = Filters::LowpassOnePoleOneZero(arg1,arg2);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HighpassOnePoleOneZero(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::HighpassOnePoleOneZero",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::HighpassOnePoleOneZero",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::HighpassOnePoleOneZero",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = Filters::HighpassOnePoleOneZero(arg1,arg2);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LowpassBiquad(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::LowpassBiquad",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::LowpassBiquad",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::LowpassBiquad",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::LowpassBiquad",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::LowpassBiquad(arg1,arg2,arg3);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HighpassBiquad(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::HighpassBiquad",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::HighpassBiquad",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::HighpassBiquad",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::HighpassBiquad",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::HighpassBiquad(arg1,arg2,arg3);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AllpassBiquad(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::AllpassBiquad",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::AllpassBiquad",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::AllpassBiquad",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::AllpassBiquad",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::AllpassBiquad(arg1,arg2,arg3);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandpassBiquad(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::BandpassBiquad",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::BandpassBiquad",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BandpassBiquad",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BandpassBiquad",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::BandpassBiquad(arg1,arg2,arg3);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NotchBiquad(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::NotchBiquad",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::NotchBiquad",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::NotchBiquad",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::NotchBiquad",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::NotchBiquad(arg1,arg2,arg3);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PeakBiquad__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::PeakBiquad",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::PeakBiquad",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::PeakBiquad",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::PeakBiquad",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::PeakBiquad",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = Filters::PeakBiquad(arg1,arg2,arg3,arg4);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PeakBiquad__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::PeakBiquad",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::PeakBiquad",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::PeakBiquad",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::PeakBiquad",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::PeakBiquad(arg1,arg2,arg3);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PeakBiquad(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_PeakBiquad__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_PeakBiquad__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PeakBiquad'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::PeakBiquad(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::PeakBiquad(DspFloatType,DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_LowshelfBiquad__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::LowshelfBiquad",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::LowshelfBiquad",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::LowshelfBiquad",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::LowshelfBiquad",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::LowshelfBiquad",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = Filters::LowshelfBiquad(arg1,arg2,arg3,arg4);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LowshelfBiquad__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::LowshelfBiquad",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::LowshelfBiquad",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::LowshelfBiquad",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::LowshelfBiquad",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::LowshelfBiquad(arg1,arg2,arg3);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LowshelfBiquad(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_LowshelfBiquad__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_LowshelfBiquad__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LowshelfBiquad'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::LowshelfBiquad(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::LowshelfBiquad(DspFloatType,DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_HighshelfBiquad__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::HighshelfBiquad",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::HighshelfBiquad",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::HighshelfBiquad",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::HighshelfBiquad",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::HighshelfBiquad",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = Filters::HighshelfBiquad(arg1,arg2,arg3,arg4);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HighshelfBiquad__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::HighshelfBiquad",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::HighshelfBiquad",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::HighshelfBiquad",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::HighshelfBiquad",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::HighshelfBiquad(arg1,arg2,arg3);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HighshelfBiquad(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_HighshelfBiquad__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_HighshelfBiquad__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'HighshelfBiquad'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::HighshelfBiquad(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::HighshelfBiquad(DspFloatType,DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_RBJLowpassBiquad(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::RBJLowpassBiquad",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::RBJLowpassBiquad",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::RBJLowpassBiquad",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::RBJLowpassBiquad",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::RBJLowpassBiquad(arg1,arg2,arg3);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJLowpassBiquadR(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::RBJLowpassBiquadR",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::RBJLowpassBiquadR",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::RBJLowpassBiquadR",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::RBJLowpassBiquadR",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::RBJLowpassBiquadR",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = Filters::RBJLowpassBiquadR(arg1,arg2,arg3,arg4);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJLowpassBiquadBW(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::RBJLowpassBiquadBW",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::RBJLowpassBiquadBW",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::RBJLowpassBiquadBW",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::RBJLowpassBiquadBW",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::RBJLowpassBiquadBW(arg1,arg2,arg3);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJHighpassBiquad(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::RBJHighpassBiquad",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::RBJHighpassBiquad",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::RBJHighpassBiquad",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::RBJHighpassBiquad",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::RBJHighpassBiquad(arg1,arg2,arg3);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJHighpassBiquadBW(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::RBJHighpassBiquadBW",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::RBJHighpassBiquadBW",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::RBJHighpassBiquadBW",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::RBJHighpassBiquadBW",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::RBJHighpassBiquadBW(arg1,arg2,arg3);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandpassConstantSkirtBiquad(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::RBJBandpassConstantSkirtBiquad",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::RBJBandpassConstantSkirtBiquad",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::RBJBandpassConstantSkirtBiquad",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::RBJBandpassConstantSkirtBiquad",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::RBJBandpassConstantSkirtBiquad(arg1,arg2,arg3);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandpassConstantSkirtBiquadBW(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::RBJBandpassConstantSkirtBiquadBW",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::RBJBandpassConstantSkirtBiquadBW",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::RBJBandpassConstantSkirtBiquadBW",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::RBJBandpassConstantSkirtBiquadBW",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::RBJBandpassConstantSkirtBiquadBW(arg1,arg2,arg3);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandpassConstant0dbBiquad(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::RBJBandpassConstant0dbBiquad",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::RBJBandpassConstant0dbBiquad",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::RBJBandpassConstant0dbBiquad",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::RBJBandpassConstant0dbBiquad",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::RBJBandpassConstant0dbBiquad(arg1,arg2,arg3);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBandpassConstant0dbBiquadBW(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::RBJBandpassConstant0dbBiquadBW",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::RBJBandpassConstant0dbBiquadBW",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::RBJBandpassConstant0dbBiquadBW",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::RBJBandpassConstant0dbBiquadBW",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::RBJBandpassConstant0dbBiquadBW(arg1,arg2,arg3);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJNotchBiquad(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::RBJNotchBiquad",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::RBJNotchBiquad",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::RBJNotchBiquad",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::RBJNotchBiquad",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::RBJNotchBiquad(arg1,arg2,arg3);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJNotchBiquadBW(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::RBJNotchBiquadBW",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::RBJNotchBiquadBW",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::RBJNotchBiquadBW",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::RBJNotchBiquadBW",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::RBJNotchBiquadBW(arg1,arg2,arg3);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJAllpassBiquad(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::RBJAllpassBiquad",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::RBJAllpassBiquad",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::RBJAllpassBiquad",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::RBJAllpassBiquad",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::RBJAllpassBiquad(arg1,arg2,arg3);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJAllpassBiquadBW(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::RBJAllpassBiquadBW",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::RBJAllpassBiquadBW",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::RBJAllpassBiquadBW",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::RBJAllpassBiquadBW",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::RBJAllpassBiquadBW(arg1,arg2,arg3);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJPeakBiquad(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::RBJPeakBiquad",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::RBJPeakBiquad",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::RBJPeakBiquad",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::RBJPeakBiquad",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::RBJPeakBiquad",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = Filters::RBJPeakBiquad(arg1,arg2,arg3,arg4);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJPeakBiquadBW(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::RBJPeakBiquadBW",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::RBJPeakBiquadBW",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::RBJPeakBiquadBW",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::RBJPeakBiquadBW",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::RBJPeakBiquadBW",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = Filters::RBJPeakBiquadBW(arg1,arg2,arg3,arg4);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJLowshelfBiquad(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::RBJLowshelfBiquad",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::RBJLowshelfBiquad",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::RBJLowshelfBiquad",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::RBJLowshelfBiquad",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::RBJLowshelfBiquad",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = Filters::RBJLowshelfBiquad(arg1,arg2,arg3,arg4);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJLowshelfBiquadSlope(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::RBJLowshelfBiquadSlope",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::RBJLowshelfBiquadSlope",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::RBJLowshelfBiquadSlope",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::RBJLowshelfBiquadSlope",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::RBJLowshelfBiquadSlope",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = Filters::RBJLowshelfBiquadSlope(arg1,arg2,arg3,arg4);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJHighshelfBiquad(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::RBJHighshelfBiquad",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::RBJHighshelfBiquad",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::RBJHighshelfBiquad",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::RBJHighshelfBiquad",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::RBJHighshelfBiquad",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = Filters::RBJHighshelfBiquad(arg1,arg2,arg3,arg4);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJHighshelfBiquadSlope(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::RBJHighshelfBiquadSlope",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::RBJHighshelfBiquadSlope",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::RBJHighshelfBiquadSlope",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::RBJHighshelfBiquadSlope",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::RBJHighshelfBiquadSlope",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = Filters::RBJHighshelfBiquadSlope(arg1,arg2,arg3,arg4);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MassbergLowpassBiquad(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::MassbergLowpassBiquad",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::MassbergLowpassBiquad",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::MassbergLowpassBiquad",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::MassbergLowpassBiquad",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::MassbergLowpassBiquad(arg1,arg2,arg3);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerNotch(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::ZolzerNotch",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::ZolzerNotch",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::ZolzerNotch",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::ZolzerNotch",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::ZolzerNotch(arg1,arg2,arg3);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowpass1p(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::ZolzerLowpass1p",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::ZolzerLowpass1p",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::ZolzerLowpass1p",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = Filters::ZolzerLowpass1p(arg1,arg2);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighpass1p(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::ZolzerHighpass1p",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::ZolzerHighpass1p",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::ZolzerHighpass1p",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = Filters::ZolzerHighpass1p(arg1,arg2);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerAllpass1p(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::ZolzerAllpass1p",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::ZolzerAllpass1p",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::ZolzerAllpass1p",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = Filters::ZolzerAllpass1p(arg1,arg2);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowpass(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::ZolzerLowpass",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::ZolzerLowpass",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::ZolzerLowpass",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::ZolzerLowpass",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::ZolzerLowpass(arg1,arg2,arg3);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerAllpass(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::ZolzerAllpass",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::ZolzerAllpass",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::ZolzerAllpass",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::ZolzerAllpass",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::ZolzerAllpass(arg1,arg2,arg3);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighpass(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::ZolzerHighpass",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::ZolzerHighpass",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::ZolzerHighpass",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::ZolzerHighpass",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::ZolzerHighpass(arg1,arg2,arg3);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBandpass(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::ZolzerBandpass",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::ZolzerBandpass",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::ZolzerBandpass",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::ZolzerBandpass",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::ZolzerBandpass(arg1,arg2,arg3);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLFBoost(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::ZolzerLFBoost",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::ZolzerLFBoost",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::ZolzerLFBoost",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::ZolzerLFBoost",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::ZolzerLFBoost(arg1,arg2,arg3);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLFCut(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::ZolzerLFCut",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::ZolzerLFCut",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::ZolzerLFCut",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::ZolzerLFCut",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::ZolzerLFCut(arg1,arg2,arg3);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHFBoost(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::ZolzerHFBoost",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::ZolzerHFBoost",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::ZolzerHFBoost",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::ZolzerHFBoost",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::ZolzerHFBoost(arg1,arg2,arg3);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHFCut(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::ZolzerHFCut",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::ZolzerHFCut",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::ZolzerHFCut",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::ZolzerHFCut",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::ZolzerHFCut(arg1,arg2,arg3);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBoost(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::ZolzerBoost",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::ZolzerBoost",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::ZolzerBoost",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::ZolzerBoost",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::ZolzerBoost",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = Filters::ZolzerBoost(arg1,arg2,arg3,arg4);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerCut(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::FilterCoefficients result;
  
  SWIG_check_num_args("Filters::ZolzerCut",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::ZolzerCut",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::ZolzerCut",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::ZolzerCut",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::ZolzerCut",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = Filters::ZolzerCut(arg1,arg2,arg3,arg4);
  {
    Filters::FilterCoefficients * resultptr = new Filters::FilterCoefficients((const Filters::FilterCoefficients &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_a1_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadFilter::a1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::a1",1,"Filters::BiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilter::a1",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_a1_set",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->a1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_a1_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilter::a1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::a1",1,"Filters::BiquadFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_a1_get",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  result = (DspFloatType) ((arg1)->a1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_a2_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadFilter::a2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::a2",1,"Filters::BiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilter::a2",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_a2_set",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->a2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_a2_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilter::a2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::a2",1,"Filters::BiquadFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_a2_get",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  result = (DspFloatType) ((arg1)->a2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_b0_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadFilter::b0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::b0",1,"Filters::BiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilter::b0",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_b0_set",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->b0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_b0_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilter::b0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::b0",1,"Filters::BiquadFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_b0_get",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  result = (DspFloatType) ((arg1)->b0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_b1_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadFilter::b1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::b1",1,"Filters::BiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilter::b1",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_b1_set",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->b1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_b1_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilter::b1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::b1",1,"Filters::BiquadFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_b1_get",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  result = (DspFloatType) ((arg1)->b1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_b2_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadFilter::b2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::b2",1,"Filters::BiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilter::b2",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_b2_set",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->b2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_b2_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilter::b2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::b2",1,"Filters::BiquadFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_b2_get",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  result = (DspFloatType) ((arg1)->b2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_x2_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadFilter::x2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::x2",1,"Filters::BiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilter::x2",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_x2_set",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->x2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_x2_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilter::x2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::x2",1,"Filters::BiquadFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_x2_get",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  result = (DspFloatType) ((arg1)->x2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_x1_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadFilter::x1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::x1",1,"Filters::BiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilter::x1",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_x1_set",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->x1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_x1_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilter::x1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::x1",1,"Filters::BiquadFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_x1_get",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  result = (DspFloatType) ((arg1)->x1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_y2_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadFilter::y2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::y2",1,"Filters::BiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilter::y2",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_y2_set",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->y2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_y2_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilter::y2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::y2",1,"Filters::BiquadFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_y2_get",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  result = (DspFloatType) ((arg1)->y2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_y1_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadFilter::y1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::y1",1,"Filters::BiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilter::y1",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_y1_set",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->y1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_y1_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilter::y1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::y1",1,"Filters::BiquadFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_y1_get",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  result = (DspFloatType) ((arg1)->y1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_x_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadFilter::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::x",1,"Filters::BiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilter::x",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_x_set",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_x_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilter::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::x",1,"Filters::BiquadFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_x_get",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  result = (DspFloatType) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_y_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadFilter::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::y",1,"Filters::BiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilter::y",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_y_set",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_y_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilter::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::y",1,"Filters::BiquadFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_y_get",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  result = (DspFloatType) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::fc",1,"Filters::BiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_fc_set",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::fc",1,"Filters::BiquadFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_fc_get",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::sr",1,"Filters::BiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_sr_set",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::sr",1,"Filters::BiquadFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_sr_get",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadFilter::q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::q",1,"Filters::BiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilter::q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_q_set",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilter::q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::q",1,"Filters::BiquadFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_q_get",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  result = (DspFloatType) ((arg1)->q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_gain_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadFilter::gain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::gain",1,"Filters::BiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilter::gain",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_gain_set",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->gain = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_gain_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilter::gain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::gain",1,"Filters::BiquadFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_gain_get",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  result = (DspFloatType) ((arg1)->gain);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_type_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  Filters::FilterBase::FilterType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadFilter::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::type",1,"Filters::BiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilter::type",2,"Filters::FilterBase::FilterType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_type_set",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  arg2 = (Filters::FilterBase::FilterType)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_type_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  Filters::FilterBase::FilterType result;
  
  SWIG_check_num_args("Filters::BiquadFilter::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::type",1,"Filters::BiquadFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_type_get",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  result = (Filters::FilterBase::FilterType) ((arg1)->type);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  Filters::BiquadFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadFilter::BiquadFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::BiquadFilter::BiquadFilter",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (Filters::BiquadFilter *)new Filters::BiquadFilter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterBase::FilterType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  Filters::BiquadFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadFilter::BiquadFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::BiquadFilter::BiquadFilter",1,"Filters::FilterBase::FilterType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilter::BiquadFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadFilter::BiquadFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadFilter::BiquadFilter",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::BiquadFilter::BiquadFilter",5,"DspFloatType");
  arg1 = (Filters::FilterBase::FilterType)(int)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (Filters::BiquadFilter *)new Filters::BiquadFilter(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadFilter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterBase::FilterType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::BiquadFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadFilter::BiquadFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::BiquadFilter::BiquadFilter",1,"Filters::FilterBase::FilterType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilter::BiquadFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadFilter::BiquadFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadFilter::BiquadFilter",4,"DspFloatType");
  arg1 = (Filters::FilterBase::FilterType)(int)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::BiquadFilter *)new Filters::BiquadFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadFilter(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_BiquadFilter__SWIG_0(L);
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_BiquadFilter__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_BiquadFilter__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BiquadFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::BiquadFilter::BiquadFilter(DspFloatType)\n"
    "    Filters::BiquadFilter::BiquadFilter(Filters::FilterBase::FilterType,DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::BiquadFilter::BiquadFilter(Filters::FilterBase::FilterType,DspFloatType,DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_BiquadFilter_setCoefficients__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  Filters::FilterCoefficients arg2 ;
  Filters::FilterCoefficients *argp2 ;
  
  SWIG_check_num_args("Filters::BiquadFilter::setCoefficients",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::setCoefficients",1,"Filters::BiquadFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::BiquadFilter::setCoefficients",2,"Filters::FilterCoefficients");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_setCoefficients",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Filters__FilterCoefficients,0))){
    SWIG_fail_ptr("BiquadFilter_setCoefficients",2,SWIGTYPE_p_Filters__FilterCoefficients);
  }
  arg2 = *argp2;
  
  (arg1)->setCoefficients(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_setCoefficients__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  
  SWIG_check_num_args("Filters::BiquadFilter::setCoefficients",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::setCoefficients",1,"Filters::BiquadFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_setCoefficients",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  (arg1)->setCoefficients();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_setCoefficients(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BiquadFilter_setCoefficients__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Filters__FilterCoefficients, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BiquadFilter_setCoefficients__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BiquadFilter_setCoefficients'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::BiquadFilter::setCoefficients(Filters::FilterCoefficients)\n"
    "    Filters::BiquadFilter::setCoefficients()\n");
  lua_error(L);return 0;
}


static int _wrap_BiquadFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::setCutoff",1,"Filters::BiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_setCutoff",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::setQ",1,"Filters::BiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_setQ",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::BiquadFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::setPort",1,"Filters::BiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_setPort",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::Tick",1,"Filters::BiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::BiquadFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_Tick",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::Tick",1,"Filters::BiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_Tick",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::Tick",1,"Filters::BiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_Tick",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::Tick",1,"Filters::BiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_Tick",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BiquadFilter_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BiquadFilter_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_BiquadFilter_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_BiquadFilter_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BiquadFilter_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::BiquadFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::BiquadFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::BiquadFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::BiquadFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_BiquadFilter_Process(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Filters::BiquadFilter::Process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::Process",1,"Filters::BiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilter::Process",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Filters::BiquadFilter::Process",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Filters::BiquadFilter::Process",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_Process",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BiquadFilter_Process",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BiquadFilter_Process",4,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_InplaceProcess(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  
  SWIG_check_num_args("Filters::BiquadFilter::InplaceProcess",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilter::InplaceProcess",1,"Filters::BiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilter::InplaceProcess",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Filters::BiquadFilter::InplaceProcess",3,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_InplaceProcess",1,SWIGTYPE_p_Filters__BiquadFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BiquadFilter_InplaceProcess",3,SWIGTYPE_p_float);
  }
  
  (arg1)->InplaceProcess(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BiquadFilter(void *obj) {
Filters::BiquadFilter *arg1 = (Filters::BiquadFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_BiquadFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BiquadFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BiquadFilter_attributes[] = {
    { "a1", _wrap_BiquadFilter_a1_get, _wrap_BiquadFilter_a1_set },
    { "a2", _wrap_BiquadFilter_a2_get, _wrap_BiquadFilter_a2_set },
    { "b0", _wrap_BiquadFilter_b0_get, _wrap_BiquadFilter_b0_set },
    { "b1", _wrap_BiquadFilter_b1_get, _wrap_BiquadFilter_b1_set },
    { "b2", _wrap_BiquadFilter_b2_get, _wrap_BiquadFilter_b2_set },
    { "x2", _wrap_BiquadFilter_x2_get, _wrap_BiquadFilter_x2_set },
    { "x1", _wrap_BiquadFilter_x1_get, _wrap_BiquadFilter_x1_set },
    { "y2", _wrap_BiquadFilter_y2_get, _wrap_BiquadFilter_y2_set },
    { "y1", _wrap_BiquadFilter_y1_get, _wrap_BiquadFilter_y1_set },
    { "x", _wrap_BiquadFilter_x_get, _wrap_BiquadFilter_x_set },
    { "y", _wrap_BiquadFilter_y_get, _wrap_BiquadFilter_y_set },
    { "fc", _wrap_BiquadFilter_fc_get, _wrap_BiquadFilter_fc_set },
    { "sr", _wrap_BiquadFilter_sr_get, _wrap_BiquadFilter_sr_set },
    { "q", _wrap_BiquadFilter_q_get, _wrap_BiquadFilter_q_set },
    { "gain", _wrap_BiquadFilter_gain_get, _wrap_BiquadFilter_gain_set },
    { "type", _wrap_BiquadFilter_type_get, _wrap_BiquadFilter_type_set },
    {0,0,0}
};
static swig_lua_method swig_BiquadFilter_methods[]= {
    { "setCoefficients", _wrap_BiquadFilter_setCoefficients},
    { "setCutoff", _wrap_BiquadFilter_setCutoff},
    { "setQ", _wrap_BiquadFilter_setQ},
    { "setPort", _wrap_BiquadFilter_setPort},
    { "Tick", _wrap_BiquadFilter_Tick},
    { "Process", _wrap_BiquadFilter_Process},
    { "InplaceProcess", _wrap_BiquadFilter_InplaceProcess},
    {0,0}
};
static swig_lua_method swig_BiquadFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BiquadFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BiquadFilter_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::BiquadFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_Q", Filters::BiquadFilter::PORT_Q)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BiquadFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BiquadFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BiquadFilter_Sf_SwigStatic = {
    "BiquadFilter",
    swig_BiquadFilter_Sf_SwigStatic_methods,
    swig_BiquadFilter_Sf_SwigStatic_attributes,
    swig_BiquadFilter_Sf_SwigStatic_constants,
    swig_BiquadFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BiquadFilter_bases[] = {0,0};
static const char *swig_BiquadFilter_base_names[] = {"Filters::FilterBase *",0};
static swig_lua_class _wrap_class_BiquadFilter = { "BiquadFilter", "BiquadFilter", &SWIGTYPE_p_Filters__BiquadFilter,_proxy__wrap_new_BiquadFilter, swig_delete_BiquadFilter, swig_BiquadFilter_methods, swig_BiquadFilter_attributes, &swig_BiquadFilter_Sf_SwigStatic, swig_BiquadFilter_meta, swig_BiquadFilter_bases, swig_BiquadFilter_base_names };

static int _wrap_BiquadFilterCascader_filters_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterCascader *arg1 = (Filters::BiquadFilterCascader *) 0 ;
  std::vector< Filters::BiquadFilter * > *arg2 = (std::vector< Filters::BiquadFilter * > *) 0 ;
  
  SWIG_check_num_args("Filters::BiquadFilterCascader::filters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterCascader::filters",1,"Filters::BiquadFilterCascader *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::BiquadFilterCascader::filters",2,"std::vector< Filters::BiquadFilter * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterCascader,0))){
    SWIG_fail_ptr("BiquadFilterCascader_filters_set",1,SWIGTYPE_p_Filters__BiquadFilterCascader);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Filters__BiquadFilter_p_t,0))){
    SWIG_fail_ptr("BiquadFilterCascader_filters_set",2,SWIGTYPE_p_std__vectorT_Filters__BiquadFilter_p_t);
  }
  
  if (arg1) (arg1)->filters = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterCascader_filters_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterCascader *arg1 = (Filters::BiquadFilterCascader *) 0 ;
  std::vector< Filters::BiquadFilter * > *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadFilterCascader::filters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterCascader::filters",1,"Filters::BiquadFilterCascader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterCascader,0))){
    SWIG_fail_ptr("BiquadFilterCascader_filters_get",1,SWIGTYPE_p_Filters__BiquadFilterCascader);
  }
  
  result = (std::vector< Filters::BiquadFilter * > *)& ((arg1)->filters);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Filters__BiquadFilter_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterCascader_x_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterCascader *arg1 = (Filters::BiquadFilterCascader *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadFilterCascader::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterCascader::x",1,"Filters::BiquadFilterCascader *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilterCascader::x",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterCascader,0))){
    SWIG_fail_ptr("BiquadFilterCascader_x_set",1,SWIGTYPE_p_Filters__BiquadFilterCascader);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterCascader_x_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterCascader *arg1 = (Filters::BiquadFilterCascader *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilterCascader::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterCascader::x",1,"Filters::BiquadFilterCascader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterCascader,0))){
    SWIG_fail_ptr("BiquadFilterCascader_x_get",1,SWIGTYPE_p_Filters__BiquadFilterCascader);
  }
  
  result = (DspFloatType) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterCascader_y_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterCascader *arg1 = (Filters::BiquadFilterCascader *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadFilterCascader::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterCascader::y",1,"Filters::BiquadFilterCascader *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilterCascader::y",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterCascader,0))){
    SWIG_fail_ptr("BiquadFilterCascader_y_set",1,SWIGTYPE_p_Filters__BiquadFilterCascader);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterCascader_y_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterCascader *arg1 = (Filters::BiquadFilterCascader *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilterCascader::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterCascader::y",1,"Filters::BiquadFilterCascader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterCascader,0))){
    SWIG_fail_ptr("BiquadFilterCascader_y_get",1,SWIGTYPE_p_Filters__BiquadFilterCascader);
  }
  
  result = (DspFloatType) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadFilterCascader(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterCascader *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadFilterCascader::BiquadFilterCascader",0,0)
  result = (Filters::BiquadFilterCascader *)new Filters::BiquadFilterCascader();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadFilterCascader,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterCascader_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterCascader *arg1 = (Filters::BiquadFilterCascader *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilterCascader::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterCascader::Tick",1,"Filters::BiquadFilterCascader *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilterCascader::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadFilterCascader::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadFilterCascader::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::BiquadFilterCascader::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterCascader,0))){
    SWIG_fail_ptr("BiquadFilterCascader_Tick",1,SWIGTYPE_p_Filters__BiquadFilterCascader);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterCascader_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterCascader *arg1 = (Filters::BiquadFilterCascader *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilterCascader::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterCascader::Tick",1,"Filters::BiquadFilterCascader *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilterCascader::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadFilterCascader::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadFilterCascader::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterCascader,0))){
    SWIG_fail_ptr("BiquadFilterCascader_Tick",1,SWIGTYPE_p_Filters__BiquadFilterCascader);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterCascader_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterCascader *arg1 = (Filters::BiquadFilterCascader *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilterCascader::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterCascader::Tick",1,"Filters::BiquadFilterCascader *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilterCascader::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadFilterCascader::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterCascader,0))){
    SWIG_fail_ptr("BiquadFilterCascader_Tick",1,SWIGTYPE_p_Filters__BiquadFilterCascader);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterCascader_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterCascader *arg1 = (Filters::BiquadFilterCascader *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilterCascader::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterCascader::Tick",1,"Filters::BiquadFilterCascader *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilterCascader::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterCascader,0))){
    SWIG_fail_ptr("BiquadFilterCascader_Tick",1,SWIGTYPE_p_Filters__BiquadFilterCascader);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterCascader_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadFilterCascader, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BiquadFilterCascader_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadFilterCascader, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BiquadFilterCascader_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadFilterCascader, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_BiquadFilterCascader_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadFilterCascader, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_BiquadFilterCascader_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BiquadFilterCascader_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::BiquadFilterCascader::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::BiquadFilterCascader::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::BiquadFilterCascader::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::BiquadFilterCascader::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_BiquadFilterCascader(void *obj) {
Filters::BiquadFilterCascader *arg1 = (Filters::BiquadFilterCascader *) obj;
delete arg1;
}
static int _proxy__wrap_new_BiquadFilterCascader(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BiquadFilterCascader);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BiquadFilterCascader_attributes[] = {
    { "filters", _wrap_BiquadFilterCascader_filters_get, _wrap_BiquadFilterCascader_filters_set },
    { "x", _wrap_BiquadFilterCascader_x_get, _wrap_BiquadFilterCascader_x_set },
    { "y", _wrap_BiquadFilterCascader_y_get, _wrap_BiquadFilterCascader_y_set },
    {0,0,0}
};
static swig_lua_method swig_BiquadFilterCascader_methods[]= {
    { "Tick", _wrap_BiquadFilterCascader_Tick},
    {0,0}
};
static swig_lua_method swig_BiquadFilterCascader_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BiquadFilterCascader_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BiquadFilterCascader_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BiquadFilterCascader_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BiquadFilterCascader_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BiquadFilterCascader_Sf_SwigStatic = {
    "BiquadFilterCascader",
    swig_BiquadFilterCascader_Sf_SwigStatic_methods,
    swig_BiquadFilterCascader_Sf_SwigStatic_attributes,
    swig_BiquadFilterCascader_Sf_SwigStatic_constants,
    swig_BiquadFilterCascader_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BiquadFilterCascader_bases[] = {0};
static const char *swig_BiquadFilterCascader_base_names[] = {0};
static swig_lua_class _wrap_class_BiquadFilterCascader = { "BiquadFilterCascader", "BiquadFilterCascader", &SWIGTYPE_p_Filters__BiquadFilterCascader,_proxy__wrap_new_BiquadFilterCascader, swig_delete_BiquadFilterCascader, swig_BiquadFilterCascader_methods, swig_BiquadFilterCascader_attributes, &swig_BiquadFilterCascader_Sf_SwigStatic, swig_BiquadFilterCascader_meta, swig_BiquadFilterCascader_bases, swig_BiquadFilterCascader_base_names };

static int _wrap_BiquadParallelFilters_filters_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadParallelFilters *arg1 = (Filters::BiquadParallelFilters *) 0 ;
  std::vector< Filters::BiquadFilter * > *arg2 = (std::vector< Filters::BiquadFilter * > *) 0 ;
  
  SWIG_check_num_args("Filters::BiquadParallelFilters::filters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadParallelFilters::filters",1,"Filters::BiquadParallelFilters *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::BiquadParallelFilters::filters",2,"std::vector< Filters::BiquadFilter * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadParallelFilters,0))){
    SWIG_fail_ptr("BiquadParallelFilters_filters_set",1,SWIGTYPE_p_Filters__BiquadParallelFilters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Filters__BiquadFilter_p_t,0))){
    SWIG_fail_ptr("BiquadParallelFilters_filters_set",2,SWIGTYPE_p_std__vectorT_Filters__BiquadFilter_p_t);
  }
  
  if (arg1) (arg1)->filters = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadParallelFilters_filters_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadParallelFilters *arg1 = (Filters::BiquadParallelFilters *) 0 ;
  std::vector< Filters::BiquadFilter * > *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadParallelFilters::filters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadParallelFilters::filters",1,"Filters::BiquadParallelFilters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadParallelFilters,0))){
    SWIG_fail_ptr("BiquadParallelFilters_filters_get",1,SWIGTYPE_p_Filters__BiquadParallelFilters);
  }
  
  result = (std::vector< Filters::BiquadFilter * > *)& ((arg1)->filters);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Filters__BiquadFilter_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadParallelFilters_x_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadParallelFilters *arg1 = (Filters::BiquadParallelFilters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadParallelFilters::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadParallelFilters::x",1,"Filters::BiquadParallelFilters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadParallelFilters::x",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadParallelFilters,0))){
    SWIG_fail_ptr("BiquadParallelFilters_x_set",1,SWIGTYPE_p_Filters__BiquadParallelFilters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadParallelFilters_x_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadParallelFilters *arg1 = (Filters::BiquadParallelFilters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadParallelFilters::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadParallelFilters::x",1,"Filters::BiquadParallelFilters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadParallelFilters,0))){
    SWIG_fail_ptr("BiquadParallelFilters_x_get",1,SWIGTYPE_p_Filters__BiquadParallelFilters);
  }
  
  result = (DspFloatType) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadParallelFilters_y_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadParallelFilters *arg1 = (Filters::BiquadParallelFilters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadParallelFilters::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadParallelFilters::y",1,"Filters::BiquadParallelFilters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadParallelFilters::y",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadParallelFilters,0))){
    SWIG_fail_ptr("BiquadParallelFilters_y_set",1,SWIGTYPE_p_Filters__BiquadParallelFilters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadParallelFilters_y_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadParallelFilters *arg1 = (Filters::BiquadParallelFilters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadParallelFilters::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadParallelFilters::y",1,"Filters::BiquadParallelFilters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadParallelFilters,0))){
    SWIG_fail_ptr("BiquadParallelFilters_y_get",1,SWIGTYPE_p_Filters__BiquadParallelFilters);
  }
  
  result = (DspFloatType) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadParallelFilters(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadParallelFilters *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadParallelFilters::BiquadParallelFilters",0,0)
  result = (Filters::BiquadParallelFilters *)new Filters::BiquadParallelFilters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadParallelFilters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadParallelFilters_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadParallelFilters *arg1 = (Filters::BiquadParallelFilters *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadParallelFilters::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadParallelFilters::Tick",1,"Filters::BiquadParallelFilters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadParallelFilters::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadParallelFilters::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadParallelFilters::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::BiquadParallelFilters::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadParallelFilters,0))){
    SWIG_fail_ptr("BiquadParallelFilters_Tick",1,SWIGTYPE_p_Filters__BiquadParallelFilters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadParallelFilters_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadParallelFilters *arg1 = (Filters::BiquadParallelFilters *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadParallelFilters::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadParallelFilters::Tick",1,"Filters::BiquadParallelFilters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadParallelFilters::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadParallelFilters::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadParallelFilters::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadParallelFilters,0))){
    SWIG_fail_ptr("BiquadParallelFilters_Tick",1,SWIGTYPE_p_Filters__BiquadParallelFilters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadParallelFilters_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadParallelFilters *arg1 = (Filters::BiquadParallelFilters *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadParallelFilters::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadParallelFilters::Tick",1,"Filters::BiquadParallelFilters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadParallelFilters::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadParallelFilters::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadParallelFilters,0))){
    SWIG_fail_ptr("BiquadParallelFilters_Tick",1,SWIGTYPE_p_Filters__BiquadParallelFilters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadParallelFilters_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadParallelFilters *arg1 = (Filters::BiquadParallelFilters *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadParallelFilters::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadParallelFilters::Tick",1,"Filters::BiquadParallelFilters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadParallelFilters::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadParallelFilters,0))){
    SWIG_fail_ptr("BiquadParallelFilters_Tick",1,SWIGTYPE_p_Filters__BiquadParallelFilters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadParallelFilters_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadParallelFilters, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BiquadParallelFilters_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadParallelFilters, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BiquadParallelFilters_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadParallelFilters, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_BiquadParallelFilters_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadParallelFilters, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_BiquadParallelFilters_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BiquadParallelFilters_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::BiquadParallelFilters::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::BiquadParallelFilters::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::BiquadParallelFilters::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::BiquadParallelFilters::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_BiquadParallelFilters(void *obj) {
Filters::BiquadParallelFilters *arg1 = (Filters::BiquadParallelFilters *) obj;
delete arg1;
}
static int _proxy__wrap_new_BiquadParallelFilters(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BiquadParallelFilters);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BiquadParallelFilters_attributes[] = {
    { "filters", _wrap_BiquadParallelFilters_filters_get, _wrap_BiquadParallelFilters_filters_set },
    { "x", _wrap_BiquadParallelFilters_x_get, _wrap_BiquadParallelFilters_x_set },
    { "y", _wrap_BiquadParallelFilters_y_get, _wrap_BiquadParallelFilters_y_set },
    {0,0,0}
};
static swig_lua_method swig_BiquadParallelFilters_methods[]= {
    { "Tick", _wrap_BiquadParallelFilters_Tick},
    {0,0}
};
static swig_lua_method swig_BiquadParallelFilters_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BiquadParallelFilters_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BiquadParallelFilters_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BiquadParallelFilters_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BiquadParallelFilters_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BiquadParallelFilters_Sf_SwigStatic = {
    "BiquadParallelFilters",
    swig_BiquadParallelFilters_Sf_SwigStatic_methods,
    swig_BiquadParallelFilters_Sf_SwigStatic_attributes,
    swig_BiquadParallelFilters_Sf_SwigStatic_constants,
    swig_BiquadParallelFilters_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BiquadParallelFilters_bases[] = {0};
static const char *swig_BiquadParallelFilters_base_names[] = {0};
static swig_lua_class _wrap_class_BiquadParallelFilters = { "BiquadParallelFilters", "BiquadParallelFilters", &SWIGTYPE_p_Filters__BiquadParallelFilters,_proxy__wrap_new_BiquadParallelFilters, swig_delete_BiquadParallelFilters, swig_BiquadParallelFilters_methods, swig_BiquadParallelFilters_attributes, &swig_BiquadParallelFilters_Sf_SwigStatic, swig_BiquadParallelFilters_meta, swig_BiquadParallelFilters_bases, swig_BiquadParallelFilters_base_names };

static int _wrap_BiquadSection_z_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSection *arg1 = (Filters::BiquadSection *) 0 ;
  DspFloatType *arg2 ;
  
  SWIG_check_num_args("Filters::BiquadSection::z",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadSection::z",1,"Filters::BiquadSection *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::BiquadSection::z",2,"DspFloatType [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("BiquadSection_z_set",1,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BiquadSection_z_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    DspFloatType *b = (DspFloatType *) arg1->z;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((DspFloatType *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadSection_z_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSection *arg1 = (Filters::BiquadSection *) 0 ;
  DspFloatType *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadSection::z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadSection::z",1,"Filters::BiquadSection *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("BiquadSection_z_get",1,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  result = (DspFloatType *)(DspFloatType *) ((arg1)->z);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadSection_p_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSection *arg1 = (Filters::BiquadSection *) 0 ;
  DspFloatType *arg2 ;
  
  SWIG_check_num_args("Filters::BiquadSection::p",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadSection::p",1,"Filters::BiquadSection *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::BiquadSection::p",2,"DspFloatType [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("BiquadSection_p_set",1,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BiquadSection_p_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    DspFloatType *b = (DspFloatType *) arg1->p;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((DspFloatType *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadSection_p_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSection *arg1 = (Filters::BiquadSection *) 0 ;
  DspFloatType *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadSection::p",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadSection::p",1,"Filters::BiquadSection *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("BiquadSection_p_get",1,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  result = (DspFloatType *)(DspFloatType *) ((arg1)->p);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadSection__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSection *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadSection::BiquadSection",0,0)
  result = (Filters::BiquadSection *)new Filters::BiquadSection();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadSection,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadSection__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterCoefficients *arg1 = 0 ;
  Filters::BiquadSection *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadSection::BiquadSection",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Filters::BiquadSection::BiquadSection",1,"Filters::FilterCoefficients const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__FilterCoefficients,0))){
    SWIG_fail_ptr("new_BiquadSection",1,SWIGTYPE_p_Filters__FilterCoefficients);
  }
  
  result = (Filters::BiquadSection *)new Filters::BiquadSection((Filters::FilterCoefficients const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadSection,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadSection__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  Filters::BiquadSection *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadSection::BiquadSection",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::BiquadSection::BiquadSection",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadSection::BiquadSection",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadSection::BiquadSection",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadSection::BiquadSection",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::BiquadSection::BiquadSection",5,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (Filters::BiquadSection *)new Filters::BiquadSection(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadSection,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadSection__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSection *arg1 = 0 ;
  Filters::BiquadSection *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadSection::BiquadSection",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Filters::BiquadSection::BiquadSection",1,"Filters::BiquadSection const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("new_BiquadSection",1,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  result = (Filters::BiquadSection *)new Filters::BiquadSection((Filters::BiquadSection const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadSection,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadSection(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BiquadSection__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__FilterCoefficients, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BiquadSection__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadSection, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BiquadSection__SWIG_3(L);
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_BiquadSection__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BiquadSection'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::BiquadSection::BiquadSection()\n"
    "    Filters::BiquadSection::BiquadSection(Filters::FilterCoefficients const &)\n"
    "    Filters::BiquadSection::BiquadSection(DspFloatType,DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::BiquadSection::BiquadSection(Filters::BiquadSection const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BiquadSection_setCoefficients__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSection *arg1 = (Filters::BiquadSection *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType arg6 ;
  
  SWIG_check_num_args("Filters::BiquadSection::setCoefficients",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadSection::setCoefficients",1,"Filters::BiquadSection *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadSection::setCoefficients",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadSection::setCoefficients",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadSection::setCoefficients",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::BiquadSection::setCoefficients",5,"DspFloatType");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Filters::BiquadSection::setCoefficients",6,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("BiquadSection_setCoefficients",1,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  (arg1)->setCoefficients(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadSection_setCoefficients__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSection *arg1 = (Filters::BiquadSection *) 0 ;
  DspFloatType *arg2 ;
  DspFloatType *arg3 ;
  
  SWIG_check_num_args("Filters::BiquadSection::setCoefficients",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadSection::setCoefficients",1,"Filters::BiquadSection *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::BiquadSection::setCoefficients",2,"DspFloatType [3]");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Filters::BiquadSection::setCoefficients",3,"DspFloatType [2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("BiquadSection_setCoefficients",1,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BiquadSection_setCoefficients",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BiquadSection_setCoefficients",3,SWIGTYPE_p_float);
  }
  
  (arg1)->setCoefficients(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadSection_setCoefficients__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSection *arg1 = (Filters::BiquadSection *) 0 ;
  Filters::FilterCoefficients *arg2 = 0 ;
  
  SWIG_check_num_args("Filters::BiquadSection::setCoefficients",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadSection::setCoefficients",1,"Filters::BiquadSection *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::BiquadSection::setCoefficients",2,"Filters::FilterCoefficients const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("BiquadSection_setCoefficients",1,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__FilterCoefficients,0))){
    SWIG_fail_ptr("BiquadSection_setCoefficients",2,SWIGTYPE_p_Filters__FilterCoefficients);
  }
  
  (arg1)->setCoefficients((Filters::FilterCoefficients const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadSection_setCoefficients(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadSection, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Filters__FilterCoefficients, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BiquadSection_setCoefficients__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadSection, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BiquadSection_setCoefficients__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadSection, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_BiquadSection_setCoefficients__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BiquadSection_setCoefficients'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::BiquadSection::setCoefficients(DspFloatType,DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::BiquadSection::setCoefficients(DspFloatType [3],DspFloatType [2])\n"
    "    Filters::BiquadSection::setCoefficients(Filters::FilterCoefficients const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BiquadSection_print(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSection *arg1 = (Filters::BiquadSection *) 0 ;
  
  SWIG_check_num_args("Filters::BiquadSection::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadSection::print",1,"Filters::BiquadSection *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("BiquadSection_print",1,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BiquadSection(void *obj) {
Filters::BiquadSection *arg1 = (Filters::BiquadSection *) obj;
delete arg1;
}
static int _proxy__wrap_new_BiquadSection(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BiquadSection);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BiquadSection_attributes[] = {
    { "z", _wrap_BiquadSection_z_get, _wrap_BiquadSection_z_set },
    { "p", _wrap_BiquadSection_p_get, _wrap_BiquadSection_p_set },
    {0,0,0}
};
static swig_lua_method swig_BiquadSection_methods[]= {
    { "setCoefficients", _wrap_BiquadSection_setCoefficients},
    { "print", _wrap_BiquadSection_print},
    {0,0}
};
static swig_lua_method swig_BiquadSection_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BiquadSection_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BiquadSection_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BiquadSection_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BiquadSection_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BiquadSection_Sf_SwigStatic = {
    "BiquadSection",
    swig_BiquadSection_Sf_SwigStatic_methods,
    swig_BiquadSection_Sf_SwigStatic_attributes,
    swig_BiquadSection_Sf_SwigStatic_constants,
    swig_BiquadSection_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BiquadSection_bases[] = {0};
static const char *swig_BiquadSection_base_names[] = {0};
static swig_lua_class _wrap_class_BiquadSection = { "BiquadSection", "BiquadSection", &SWIGTYPE_p_Filters__BiquadSection,_proxy__wrap_new_BiquadSection, swig_delete_BiquadSection, swig_BiquadSection_methods, swig_BiquadSection_attributes, &swig_BiquadSection_Sf_SwigStatic, swig_BiquadSection_meta, swig_BiquadSection_bases, swig_BiquadSection_base_names };

static int _wrap_BiquadTypeI_biquad_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeI *arg1 = (Filters::BiquadTypeI *) 0 ;
  Filters::BiquadSection *arg2 = (Filters::BiquadSection *) 0 ;
  
  SWIG_check_num_args("Filters::BiquadTypeI::biquad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeI::biquad",1,"Filters::BiquadTypeI *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::BiquadTypeI::biquad",2,"Filters::BiquadSection *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeI,0))){
    SWIG_fail_ptr("BiquadTypeI_biquad_set",1,SWIGTYPE_p_Filters__BiquadTypeI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("BiquadTypeI_biquad_set",2,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  if (arg1) (arg1)->biquad = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeI_biquad_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeI *arg1 = (Filters::BiquadTypeI *) 0 ;
  Filters::BiquadSection *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTypeI::biquad",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeI::biquad",1,"Filters::BiquadTypeI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeI,0))){
    SWIG_fail_ptr("BiquadTypeI_biquad_get",1,SWIGTYPE_p_Filters__BiquadTypeI);
  }
  
  result = (Filters::BiquadSection *)& ((arg1)->biquad);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadSection,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeI_x_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeI *arg1 = (Filters::BiquadTypeI *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadTypeI::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeI::x",1,"Filters::BiquadTypeI *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTypeI::x",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeI,0))){
    SWIG_fail_ptr("BiquadTypeI_x_set",1,SWIGTYPE_p_Filters__BiquadTypeI);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeI_x_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeI *arg1 = (Filters::BiquadTypeI *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTypeI::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeI::x",1,"Filters::BiquadTypeI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeI,0))){
    SWIG_fail_ptr("BiquadTypeI_x_get",1,SWIGTYPE_p_Filters__BiquadTypeI);
  }
  
  result = (DspFloatType) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeI_y_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeI *arg1 = (Filters::BiquadTypeI *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadTypeI::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeI::y",1,"Filters::BiquadTypeI *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTypeI::y",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeI,0))){
    SWIG_fail_ptr("BiquadTypeI_y_set",1,SWIGTYPE_p_Filters__BiquadTypeI);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeI_y_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeI *arg1 = (Filters::BiquadTypeI *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTypeI::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeI::y",1,"Filters::BiquadTypeI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeI,0))){
    SWIG_fail_ptr("BiquadTypeI_y_get",1,SWIGTYPE_p_Filters__BiquadTypeI);
  }
  
  result = (DspFloatType) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeI_x1_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeI *arg1 = (Filters::BiquadTypeI *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadTypeI::x1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeI::x1",1,"Filters::BiquadTypeI *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTypeI::x1",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeI,0))){
    SWIG_fail_ptr("BiquadTypeI_x1_set",1,SWIGTYPE_p_Filters__BiquadTypeI);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->x1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeI_x1_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeI *arg1 = (Filters::BiquadTypeI *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTypeI::x1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeI::x1",1,"Filters::BiquadTypeI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeI,0))){
    SWIG_fail_ptr("BiquadTypeI_x1_get",1,SWIGTYPE_p_Filters__BiquadTypeI);
  }
  
  result = (DspFloatType) ((arg1)->x1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeI_x2_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeI *arg1 = (Filters::BiquadTypeI *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadTypeI::x2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeI::x2",1,"Filters::BiquadTypeI *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTypeI::x2",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeI,0))){
    SWIG_fail_ptr("BiquadTypeI_x2_set",1,SWIGTYPE_p_Filters__BiquadTypeI);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->x2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeI_x2_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeI *arg1 = (Filters::BiquadTypeI *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTypeI::x2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeI::x2",1,"Filters::BiquadTypeI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeI,0))){
    SWIG_fail_ptr("BiquadTypeI_x2_get",1,SWIGTYPE_p_Filters__BiquadTypeI);
  }
  
  result = (DspFloatType) ((arg1)->x2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeI_y1_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeI *arg1 = (Filters::BiquadTypeI *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadTypeI::y1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeI::y1",1,"Filters::BiquadTypeI *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTypeI::y1",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeI,0))){
    SWIG_fail_ptr("BiquadTypeI_y1_set",1,SWIGTYPE_p_Filters__BiquadTypeI);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->y1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeI_y1_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeI *arg1 = (Filters::BiquadTypeI *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTypeI::y1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeI::y1",1,"Filters::BiquadTypeI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeI,0))){
    SWIG_fail_ptr("BiquadTypeI_y1_get",1,SWIGTYPE_p_Filters__BiquadTypeI);
  }
  
  result = (DspFloatType) ((arg1)->y1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeI_y2_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeI *arg1 = (Filters::BiquadTypeI *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadTypeI::y2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeI::y2",1,"Filters::BiquadTypeI *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTypeI::y2",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeI,0))){
    SWIG_fail_ptr("BiquadTypeI_y2_set",1,SWIGTYPE_p_Filters__BiquadTypeI);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->y2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeI_y2_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeI *arg1 = (Filters::BiquadTypeI *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTypeI::y2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeI::y2",1,"Filters::BiquadTypeI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeI,0))){
    SWIG_fail_ptr("BiquadTypeI_y2_get",1,SWIGTYPE_p_Filters__BiquadTypeI);
  }
  
  result = (DspFloatType) ((arg1)->y2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadTypeI__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeI *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTypeI::BiquadTypeI",0,0)
  result = (Filters::BiquadTypeI *)new Filters::BiquadTypeI();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeI,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadTypeI__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSection *arg1 = 0 ;
  Filters::BiquadTypeI *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTypeI::BiquadTypeI",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Filters::BiquadTypeI::BiquadTypeI",1,"Filters::BiquadSection const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("new_BiquadTypeI",1,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  result = (Filters::BiquadTypeI *)new Filters::BiquadTypeI((Filters::BiquadSection const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeI,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadTypeI(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BiquadTypeI__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadSection, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BiquadTypeI__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BiquadTypeI'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::BiquadTypeI::BiquadTypeI()\n"
    "    Filters::BiquadTypeI::BiquadTypeI(Filters::BiquadSection const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BiquadTypeI_setCoefficients(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeI *arg1 = (Filters::BiquadTypeI *) 0 ;
  Filters::BiquadSection *arg2 = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTypeI::setCoefficients",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeI::setCoefficients",1,"Filters::BiquadTypeI *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::BiquadTypeI::setCoefficients",2,"Filters::BiquadSection const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeI,0))){
    SWIG_fail_ptr("BiquadTypeI_setCoefficients",1,SWIGTYPE_p_Filters__BiquadTypeI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("BiquadTypeI_setCoefficients",2,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  (arg1)->setCoefficients((Filters::BiquadSection const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeI_setBiquad(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeI *arg1 = (Filters::BiquadTypeI *) 0 ;
  Filters::BiquadSection *arg2 = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTypeI::setBiquad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeI::setBiquad",1,"Filters::BiquadTypeI *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::BiquadTypeI::setBiquad",2,"Filters::BiquadSection const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeI,0))){
    SWIG_fail_ptr("BiquadTypeI_setBiquad",1,SWIGTYPE_p_Filters__BiquadTypeI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("BiquadTypeI_setBiquad",2,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  (arg1)->setBiquad((Filters::BiquadSection const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeI_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeI *arg1 = (Filters::BiquadTypeI *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTypeI::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeI::Tick",1,"Filters::BiquadTypeI *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTypeI::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadTypeI::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadTypeI::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::BiquadTypeI::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeI,0))){
    SWIG_fail_ptr("BiquadTypeI_Tick",1,SWIGTYPE_p_Filters__BiquadTypeI);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeI_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeI *arg1 = (Filters::BiquadTypeI *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTypeI::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeI::Tick",1,"Filters::BiquadTypeI *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTypeI::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadTypeI::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadTypeI::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeI,0))){
    SWIG_fail_ptr("BiquadTypeI_Tick",1,SWIGTYPE_p_Filters__BiquadTypeI);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeI_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeI *arg1 = (Filters::BiquadTypeI *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTypeI::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeI::Tick",1,"Filters::BiquadTypeI *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTypeI::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadTypeI::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeI,0))){
    SWIG_fail_ptr("BiquadTypeI_Tick",1,SWIGTYPE_p_Filters__BiquadTypeI);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeI_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeI *arg1 = (Filters::BiquadTypeI *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTypeI::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeI::Tick",1,"Filters::BiquadTypeI *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTypeI::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeI,0))){
    SWIG_fail_ptr("BiquadTypeI_Tick",1,SWIGTYPE_p_Filters__BiquadTypeI);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeI_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTypeI, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BiquadTypeI_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTypeI, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BiquadTypeI_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTypeI, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_BiquadTypeI_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTypeI, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_BiquadTypeI_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BiquadTypeI_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::BiquadTypeI::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::BiquadTypeI::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::BiquadTypeI::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::BiquadTypeI::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_BiquadTypeI(void *obj) {
Filters::BiquadTypeI *arg1 = (Filters::BiquadTypeI *) obj;
delete arg1;
}
static int _proxy__wrap_new_BiquadTypeI(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BiquadTypeI);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BiquadTypeI_attributes[] = {
    { "biquad", _wrap_BiquadTypeI_biquad_get, _wrap_BiquadTypeI_biquad_set },
    { "x", _wrap_BiquadTypeI_x_get, _wrap_BiquadTypeI_x_set },
    { "y", _wrap_BiquadTypeI_y_get, _wrap_BiquadTypeI_y_set },
    { "x1", _wrap_BiquadTypeI_x1_get, _wrap_BiquadTypeI_x1_set },
    { "x2", _wrap_BiquadTypeI_x2_get, _wrap_BiquadTypeI_x2_set },
    { "y1", _wrap_BiquadTypeI_y1_get, _wrap_BiquadTypeI_y1_set },
    { "y2", _wrap_BiquadTypeI_y2_get, _wrap_BiquadTypeI_y2_set },
    {0,0,0}
};
static swig_lua_method swig_BiquadTypeI_methods[]= {
    { "setCoefficients", _wrap_BiquadTypeI_setCoefficients},
    { "setBiquad", _wrap_BiquadTypeI_setBiquad},
    { "Tick", _wrap_BiquadTypeI_Tick},
    {0,0}
};
static swig_lua_method swig_BiquadTypeI_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BiquadTypeI_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BiquadTypeI_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BiquadTypeI_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BiquadTypeI_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BiquadTypeI_Sf_SwigStatic = {
    "BiquadTypeI",
    swig_BiquadTypeI_Sf_SwigStatic_methods,
    swig_BiquadTypeI_Sf_SwigStatic_attributes,
    swig_BiquadTypeI_Sf_SwigStatic_constants,
    swig_BiquadTypeI_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BiquadTypeI_bases[] = {0,0};
static const char *swig_BiquadTypeI_base_names[] = {"Filters::FilterBase *",0};
static swig_lua_class _wrap_class_BiquadTypeI = { "BiquadTypeI", "BiquadTypeI", &SWIGTYPE_p_Filters__BiquadTypeI,_proxy__wrap_new_BiquadTypeI, swig_delete_BiquadTypeI, swig_BiquadTypeI_methods, swig_BiquadTypeI_attributes, &swig_BiquadTypeI_Sf_SwigStatic, swig_BiquadTypeI_meta, swig_BiquadTypeI_bases, swig_BiquadTypeI_base_names };

static int _wrap_BiquadTypeII_biquad_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeII *arg1 = (Filters::BiquadTypeII *) 0 ;
  Filters::BiquadSection *arg2 = (Filters::BiquadSection *) 0 ;
  
  SWIG_check_num_args("Filters::BiquadTypeII::biquad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeII::biquad",1,"Filters::BiquadTypeII *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::BiquadTypeII::biquad",2,"Filters::BiquadSection *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeII,0))){
    SWIG_fail_ptr("BiquadTypeII_biquad_set",1,SWIGTYPE_p_Filters__BiquadTypeII);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("BiquadTypeII_biquad_set",2,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  if (arg1) (arg1)->biquad = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeII_biquad_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeII *arg1 = (Filters::BiquadTypeII *) 0 ;
  Filters::BiquadSection *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTypeII::biquad",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeII::biquad",1,"Filters::BiquadTypeII *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeII,0))){
    SWIG_fail_ptr("BiquadTypeII_biquad_get",1,SWIGTYPE_p_Filters__BiquadTypeII);
  }
  
  result = (Filters::BiquadSection *)& ((arg1)->biquad);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadSection,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeII_x_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeII *arg1 = (Filters::BiquadTypeII *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadTypeII::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeII::x",1,"Filters::BiquadTypeII *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTypeII::x",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeII,0))){
    SWIG_fail_ptr("BiquadTypeII_x_set",1,SWIGTYPE_p_Filters__BiquadTypeII);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeII_x_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeII *arg1 = (Filters::BiquadTypeII *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTypeII::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeII::x",1,"Filters::BiquadTypeII *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeII,0))){
    SWIG_fail_ptr("BiquadTypeII_x_get",1,SWIGTYPE_p_Filters__BiquadTypeII);
  }
  
  result = (DspFloatType) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeII_y_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeII *arg1 = (Filters::BiquadTypeII *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadTypeII::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeII::y",1,"Filters::BiquadTypeII *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTypeII::y",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeII,0))){
    SWIG_fail_ptr("BiquadTypeII_y_set",1,SWIGTYPE_p_Filters__BiquadTypeII);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeII_y_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeII *arg1 = (Filters::BiquadTypeII *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTypeII::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeII::y",1,"Filters::BiquadTypeII *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeII,0))){
    SWIG_fail_ptr("BiquadTypeII_y_get",1,SWIGTYPE_p_Filters__BiquadTypeII);
  }
  
  result = (DspFloatType) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeII_v_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeII *arg1 = (Filters::BiquadTypeII *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadTypeII::v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeII::v",1,"Filters::BiquadTypeII *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTypeII::v",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeII,0))){
    SWIG_fail_ptr("BiquadTypeII_v_set",1,SWIGTYPE_p_Filters__BiquadTypeII);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->v = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeII_v_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeII *arg1 = (Filters::BiquadTypeII *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTypeII::v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeII::v",1,"Filters::BiquadTypeII *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeII,0))){
    SWIG_fail_ptr("BiquadTypeII_v_get",1,SWIGTYPE_p_Filters__BiquadTypeII);
  }
  
  result = (DspFloatType) ((arg1)->v);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeII_v1_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeII *arg1 = (Filters::BiquadTypeII *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadTypeII::v1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeII::v1",1,"Filters::BiquadTypeII *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTypeII::v1",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeII,0))){
    SWIG_fail_ptr("BiquadTypeII_v1_set",1,SWIGTYPE_p_Filters__BiquadTypeII);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->v1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeII_v1_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeII *arg1 = (Filters::BiquadTypeII *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTypeII::v1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeII::v1",1,"Filters::BiquadTypeII *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeII,0))){
    SWIG_fail_ptr("BiquadTypeII_v1_get",1,SWIGTYPE_p_Filters__BiquadTypeII);
  }
  
  result = (DspFloatType) ((arg1)->v1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeII_v2_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeII *arg1 = (Filters::BiquadTypeII *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadTypeII::v2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeII::v2",1,"Filters::BiquadTypeII *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTypeII::v2",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeII,0))){
    SWIG_fail_ptr("BiquadTypeII_v2_set",1,SWIGTYPE_p_Filters__BiquadTypeII);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->v2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeII_v2_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeII *arg1 = (Filters::BiquadTypeII *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTypeII::v2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeII::v2",1,"Filters::BiquadTypeII *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeII,0))){
    SWIG_fail_ptr("BiquadTypeII_v2_get",1,SWIGTYPE_p_Filters__BiquadTypeII);
  }
  
  result = (DspFloatType) ((arg1)->v2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadTypeII__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeII *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTypeII::BiquadTypeII",0,0)
  result = (Filters::BiquadTypeII *)new Filters::BiquadTypeII();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeII,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadTypeII__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSection *arg1 = 0 ;
  Filters::BiquadTypeII *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTypeII::BiquadTypeII",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Filters::BiquadTypeII::BiquadTypeII",1,"Filters::BiquadSection const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("new_BiquadTypeII",1,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  result = (Filters::BiquadTypeII *)new Filters::BiquadTypeII((Filters::BiquadSection const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeII,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadTypeII(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BiquadTypeII__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadSection, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BiquadTypeII__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BiquadTypeII'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::BiquadTypeII::BiquadTypeII()\n"
    "    Filters::BiquadTypeII::BiquadTypeII(Filters::BiquadSection const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BiquadTypeII_setCoefficients(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeII *arg1 = (Filters::BiquadTypeII *) 0 ;
  Filters::BiquadSection *arg2 = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTypeII::setCoefficients",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeII::setCoefficients",1,"Filters::BiquadTypeII *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::BiquadTypeII::setCoefficients",2,"Filters::BiquadSection const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeII,0))){
    SWIG_fail_ptr("BiquadTypeII_setCoefficients",1,SWIGTYPE_p_Filters__BiquadTypeII);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("BiquadTypeII_setCoefficients",2,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  (arg1)->setCoefficients((Filters::BiquadSection const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeII_setBiquad(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeII *arg1 = (Filters::BiquadTypeII *) 0 ;
  Filters::BiquadSection *arg2 = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTypeII::setBiquad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeII::setBiquad",1,"Filters::BiquadTypeII *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::BiquadTypeII::setBiquad",2,"Filters::BiquadSection const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeII,0))){
    SWIG_fail_ptr("BiquadTypeII_setBiquad",1,SWIGTYPE_p_Filters__BiquadTypeII);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("BiquadTypeII_setBiquad",2,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  (arg1)->setBiquad((Filters::BiquadSection const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeII_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeII *arg1 = (Filters::BiquadTypeII *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTypeII::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeII::Tick",1,"Filters::BiquadTypeII *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTypeII::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadTypeII::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadTypeII::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::BiquadTypeII::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeII,0))){
    SWIG_fail_ptr("BiquadTypeII_Tick",1,SWIGTYPE_p_Filters__BiquadTypeII);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeII_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeII *arg1 = (Filters::BiquadTypeII *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTypeII::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeII::Tick",1,"Filters::BiquadTypeII *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTypeII::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadTypeII::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadTypeII::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeII,0))){
    SWIG_fail_ptr("BiquadTypeII_Tick",1,SWIGTYPE_p_Filters__BiquadTypeII);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeII_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeII *arg1 = (Filters::BiquadTypeII *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTypeII::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeII::Tick",1,"Filters::BiquadTypeII *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTypeII::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadTypeII::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeII,0))){
    SWIG_fail_ptr("BiquadTypeII_Tick",1,SWIGTYPE_p_Filters__BiquadTypeII);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeII_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeII *arg1 = (Filters::BiquadTypeII *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTypeII::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeII::Tick",1,"Filters::BiquadTypeII *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTypeII::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeII,0))){
    SWIG_fail_ptr("BiquadTypeII_Tick",1,SWIGTYPE_p_Filters__BiquadTypeII);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeII_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTypeII, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BiquadTypeII_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTypeII, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BiquadTypeII_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTypeII, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_BiquadTypeII_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTypeII, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_BiquadTypeII_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BiquadTypeII_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::BiquadTypeII::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::BiquadTypeII::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::BiquadTypeII::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::BiquadTypeII::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_BiquadTypeII(void *obj) {
Filters::BiquadTypeII *arg1 = (Filters::BiquadTypeII *) obj;
delete arg1;
}
static int _proxy__wrap_new_BiquadTypeII(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BiquadTypeII);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BiquadTypeII_attributes[] = {
    { "biquad", _wrap_BiquadTypeII_biquad_get, _wrap_BiquadTypeII_biquad_set },
    { "x", _wrap_BiquadTypeII_x_get, _wrap_BiquadTypeII_x_set },
    { "y", _wrap_BiquadTypeII_y_get, _wrap_BiquadTypeII_y_set },
    { "v", _wrap_BiquadTypeII_v_get, _wrap_BiquadTypeII_v_set },
    { "v1", _wrap_BiquadTypeII_v1_get, _wrap_BiquadTypeII_v1_set },
    { "v2", _wrap_BiquadTypeII_v2_get, _wrap_BiquadTypeII_v2_set },
    {0,0,0}
};
static swig_lua_method swig_BiquadTypeII_methods[]= {
    { "setCoefficients", _wrap_BiquadTypeII_setCoefficients},
    { "setBiquad", _wrap_BiquadTypeII_setBiquad},
    { "Tick", _wrap_BiquadTypeII_Tick},
    {0,0}
};
static swig_lua_method swig_BiquadTypeII_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BiquadTypeII_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BiquadTypeII_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BiquadTypeII_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BiquadTypeII_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BiquadTypeII_Sf_SwigStatic = {
    "BiquadTypeII",
    swig_BiquadTypeII_Sf_SwigStatic_methods,
    swig_BiquadTypeII_Sf_SwigStatic_attributes,
    swig_BiquadTypeII_Sf_SwigStatic_constants,
    swig_BiquadTypeII_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BiquadTypeII_bases[] = {0,0};
static const char *swig_BiquadTypeII_base_names[] = {"Filters::FilterBase *",0};
static swig_lua_class _wrap_class_BiquadTypeII = { "BiquadTypeII", "BiquadTypeII", &SWIGTYPE_p_Filters__BiquadTypeII,_proxy__wrap_new_BiquadTypeII, swig_delete_BiquadTypeII, swig_BiquadTypeII_methods, swig_BiquadTypeII_attributes, &swig_BiquadTypeII_Sf_SwigStatic, swig_BiquadTypeII_meta, swig_BiquadTypeII_bases, swig_BiquadTypeII_base_names };

static int _wrap_BiquadTransposedTypeI_biquad_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeI *arg1 = (Filters::BiquadTransposedTypeI *) 0 ;
  Filters::BiquadSection *arg2 = (Filters::BiquadSection *) 0 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeI::biquad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::biquad",1,"Filters::BiquadTransposedTypeI *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::biquad",2,"Filters::BiquadSection *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeI,0))){
    SWIG_fail_ptr("BiquadTransposedTypeI_biquad_set",1,SWIGTYPE_p_Filters__BiquadTransposedTypeI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("BiquadTransposedTypeI_biquad_set",2,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  if (arg1) (arg1)->biquad = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeI_biquad_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeI *arg1 = (Filters::BiquadTransposedTypeI *) 0 ;
  Filters::BiquadSection *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeI::biquad",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::biquad",1,"Filters::BiquadTransposedTypeI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeI,0))){
    SWIG_fail_ptr("BiquadTransposedTypeI_biquad_get",1,SWIGTYPE_p_Filters__BiquadTransposedTypeI);
  }
  
  result = (Filters::BiquadSection *)& ((arg1)->biquad);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadSection,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeI_x_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeI *arg1 = (Filters::BiquadTransposedTypeI *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeI::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::x",1,"Filters::BiquadTransposedTypeI *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::x",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeI,0))){
    SWIG_fail_ptr("BiquadTransposedTypeI_x_set",1,SWIGTYPE_p_Filters__BiquadTransposedTypeI);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeI_x_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeI *arg1 = (Filters::BiquadTransposedTypeI *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeI::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::x",1,"Filters::BiquadTransposedTypeI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeI,0))){
    SWIG_fail_ptr("BiquadTransposedTypeI_x_get",1,SWIGTYPE_p_Filters__BiquadTransposedTypeI);
  }
  
  result = (DspFloatType) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeI_y_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeI *arg1 = (Filters::BiquadTransposedTypeI *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeI::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::y",1,"Filters::BiquadTransposedTypeI *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::y",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeI,0))){
    SWIG_fail_ptr("BiquadTransposedTypeI_y_set",1,SWIGTYPE_p_Filters__BiquadTransposedTypeI);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeI_y_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeI *arg1 = (Filters::BiquadTransposedTypeI *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeI::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::y",1,"Filters::BiquadTransposedTypeI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeI,0))){
    SWIG_fail_ptr("BiquadTransposedTypeI_y_get",1,SWIGTYPE_p_Filters__BiquadTransposedTypeI);
  }
  
  result = (DspFloatType) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeI_x1_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeI *arg1 = (Filters::BiquadTransposedTypeI *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeI::x1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::x1",1,"Filters::BiquadTransposedTypeI *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::x1",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeI,0))){
    SWIG_fail_ptr("BiquadTransposedTypeI_x1_set",1,SWIGTYPE_p_Filters__BiquadTransposedTypeI);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->x1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeI_x1_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeI *arg1 = (Filters::BiquadTransposedTypeI *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeI::x1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::x1",1,"Filters::BiquadTransposedTypeI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeI,0))){
    SWIG_fail_ptr("BiquadTransposedTypeI_x1_get",1,SWIGTYPE_p_Filters__BiquadTransposedTypeI);
  }
  
  result = (DspFloatType) ((arg1)->x1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeI_x2_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeI *arg1 = (Filters::BiquadTransposedTypeI *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeI::x2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::x2",1,"Filters::BiquadTransposedTypeI *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::x2",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeI,0))){
    SWIG_fail_ptr("BiquadTransposedTypeI_x2_set",1,SWIGTYPE_p_Filters__BiquadTransposedTypeI);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->x2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeI_x2_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeI *arg1 = (Filters::BiquadTransposedTypeI *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeI::x2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::x2",1,"Filters::BiquadTransposedTypeI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeI,0))){
    SWIG_fail_ptr("BiquadTransposedTypeI_x2_get",1,SWIGTYPE_p_Filters__BiquadTransposedTypeI);
  }
  
  result = (DspFloatType) ((arg1)->x2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeI_y1_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeI *arg1 = (Filters::BiquadTransposedTypeI *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeI::y1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::y1",1,"Filters::BiquadTransposedTypeI *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::y1",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeI,0))){
    SWIG_fail_ptr("BiquadTransposedTypeI_y1_set",1,SWIGTYPE_p_Filters__BiquadTransposedTypeI);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->y1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeI_y1_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeI *arg1 = (Filters::BiquadTransposedTypeI *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeI::y1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::y1",1,"Filters::BiquadTransposedTypeI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeI,0))){
    SWIG_fail_ptr("BiquadTransposedTypeI_y1_get",1,SWIGTYPE_p_Filters__BiquadTransposedTypeI);
  }
  
  result = (DspFloatType) ((arg1)->y1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeI_y2_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeI *arg1 = (Filters::BiquadTransposedTypeI *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeI::y2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::y2",1,"Filters::BiquadTransposedTypeI *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::y2",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeI,0))){
    SWIG_fail_ptr("BiquadTransposedTypeI_y2_set",1,SWIGTYPE_p_Filters__BiquadTransposedTypeI);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->y2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeI_y2_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeI *arg1 = (Filters::BiquadTransposedTypeI *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeI::y2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::y2",1,"Filters::BiquadTransposedTypeI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeI,0))){
    SWIG_fail_ptr("BiquadTransposedTypeI_y2_get",1,SWIGTYPE_p_Filters__BiquadTransposedTypeI);
  }
  
  result = (DspFloatType) ((arg1)->y2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadTransposedTypeI__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeI *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeI::BiquadTransposedTypeI",0,0)
  result = (Filters::BiquadTransposedTypeI *)new Filters::BiquadTransposedTypeI();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTransposedTypeI,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadTransposedTypeI__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSection *arg1 = 0 ;
  Filters::BiquadTransposedTypeI *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeI::BiquadTransposedTypeI",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::BiquadTransposedTypeI",1,"Filters::BiquadSection const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("new_BiquadTransposedTypeI",1,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  result = (Filters::BiquadTransposedTypeI *)new Filters::BiquadTransposedTypeI((Filters::BiquadSection const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTransposedTypeI,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadTransposedTypeI(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BiquadTransposedTypeI__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadSection, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BiquadTransposedTypeI__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BiquadTransposedTypeI'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::BiquadTransposedTypeI::BiquadTransposedTypeI()\n"
    "    Filters::BiquadTransposedTypeI::BiquadTransposedTypeI(Filters::BiquadSection const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BiquadTransposedTypeI_setCoefficients(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeI *arg1 = (Filters::BiquadTransposedTypeI *) 0 ;
  Filters::BiquadSection *arg2 = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeI::setCoefficients",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::setCoefficients",1,"Filters::BiquadTransposedTypeI *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::setCoefficients",2,"Filters::BiquadSection const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeI,0))){
    SWIG_fail_ptr("BiquadTransposedTypeI_setCoefficients",1,SWIGTYPE_p_Filters__BiquadTransposedTypeI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("BiquadTransposedTypeI_setCoefficients",2,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  (arg1)->setCoefficients((Filters::BiquadSection const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeI_setBiquad(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeI *arg1 = (Filters::BiquadTransposedTypeI *) 0 ;
  Filters::BiquadSection *arg2 = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeI::setBiquad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::setBiquad",1,"Filters::BiquadTransposedTypeI *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::setBiquad",2,"Filters::BiquadSection const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeI,0))){
    SWIG_fail_ptr("BiquadTransposedTypeI_setBiquad",1,SWIGTYPE_p_Filters__BiquadTransposedTypeI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("BiquadTransposedTypeI_setBiquad",2,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  (arg1)->setBiquad((Filters::BiquadSection const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeI_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeI *arg1 = (Filters::BiquadTransposedTypeI *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeI::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::Tick",1,"Filters::BiquadTransposedTypeI *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeI,0))){
    SWIG_fail_ptr("BiquadTransposedTypeI_Tick",1,SWIGTYPE_p_Filters__BiquadTransposedTypeI);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeI_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeI *arg1 = (Filters::BiquadTransposedTypeI *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeI::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::Tick",1,"Filters::BiquadTransposedTypeI *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeI,0))){
    SWIG_fail_ptr("BiquadTransposedTypeI_Tick",1,SWIGTYPE_p_Filters__BiquadTransposedTypeI);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeI_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeI *arg1 = (Filters::BiquadTransposedTypeI *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeI::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::Tick",1,"Filters::BiquadTransposedTypeI *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeI,0))){
    SWIG_fail_ptr("BiquadTransposedTypeI_Tick",1,SWIGTYPE_p_Filters__BiquadTransposedTypeI);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeI_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeI *arg1 = (Filters::BiquadTransposedTypeI *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeI::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::Tick",1,"Filters::BiquadTransposedTypeI *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeI::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeI,0))){
    SWIG_fail_ptr("BiquadTransposedTypeI_Tick",1,SWIGTYPE_p_Filters__BiquadTransposedTypeI);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeI_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTransposedTypeI, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BiquadTransposedTypeI_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTransposedTypeI, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BiquadTransposedTypeI_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTransposedTypeI, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_BiquadTransposedTypeI_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTransposedTypeI, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_BiquadTransposedTypeI_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BiquadTransposedTypeI_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::BiquadTransposedTypeI::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::BiquadTransposedTypeI::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::BiquadTransposedTypeI::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::BiquadTransposedTypeI::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_BiquadTransposedTypeI(void *obj) {
Filters::BiquadTransposedTypeI *arg1 = (Filters::BiquadTransposedTypeI *) obj;
delete arg1;
}
static int _proxy__wrap_new_BiquadTransposedTypeI(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BiquadTransposedTypeI);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BiquadTransposedTypeI_attributes[] = {
    { "biquad", _wrap_BiquadTransposedTypeI_biquad_get, _wrap_BiquadTransposedTypeI_biquad_set },
    { "x", _wrap_BiquadTransposedTypeI_x_get, _wrap_BiquadTransposedTypeI_x_set },
    { "y", _wrap_BiquadTransposedTypeI_y_get, _wrap_BiquadTransposedTypeI_y_set },
    { "x1", _wrap_BiquadTransposedTypeI_x1_get, _wrap_BiquadTransposedTypeI_x1_set },
    { "x2", _wrap_BiquadTransposedTypeI_x2_get, _wrap_BiquadTransposedTypeI_x2_set },
    { "y1", _wrap_BiquadTransposedTypeI_y1_get, _wrap_BiquadTransposedTypeI_y1_set },
    { "y2", _wrap_BiquadTransposedTypeI_y2_get, _wrap_BiquadTransposedTypeI_y2_set },
    {0,0,0}
};
static swig_lua_method swig_BiquadTransposedTypeI_methods[]= {
    { "setCoefficients", _wrap_BiquadTransposedTypeI_setCoefficients},
    { "setBiquad", _wrap_BiquadTransposedTypeI_setBiquad},
    { "Tick", _wrap_BiquadTransposedTypeI_Tick},
    {0,0}
};
static swig_lua_method swig_BiquadTransposedTypeI_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BiquadTransposedTypeI_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BiquadTransposedTypeI_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BiquadTransposedTypeI_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BiquadTransposedTypeI_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BiquadTransposedTypeI_Sf_SwigStatic = {
    "BiquadTransposedTypeI",
    swig_BiquadTransposedTypeI_Sf_SwigStatic_methods,
    swig_BiquadTransposedTypeI_Sf_SwigStatic_attributes,
    swig_BiquadTransposedTypeI_Sf_SwigStatic_constants,
    swig_BiquadTransposedTypeI_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BiquadTransposedTypeI_bases[] = {0,0};
static const char *swig_BiquadTransposedTypeI_base_names[] = {"Filters::FilterBase *",0};
static swig_lua_class _wrap_class_BiquadTransposedTypeI = { "BiquadTransposedTypeI", "BiquadTransposedTypeI", &SWIGTYPE_p_Filters__BiquadTransposedTypeI,_proxy__wrap_new_BiquadTransposedTypeI, swig_delete_BiquadTransposedTypeI, swig_BiquadTransposedTypeI_methods, swig_BiquadTransposedTypeI_attributes, &swig_BiquadTransposedTypeI_Sf_SwigStatic, swig_BiquadTransposedTypeI_meta, swig_BiquadTransposedTypeI_bases, swig_BiquadTransposedTypeI_base_names };

static int _wrap_BiquadTransposedTypeII_biquad_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeII *arg1 = (Filters::BiquadTransposedTypeII *) 0 ;
  Filters::BiquadSection *arg2 = (Filters::BiquadSection *) 0 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::biquad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::biquad",1,"Filters::BiquadTransposedTypeII *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::biquad",2,"Filters::BiquadSection *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeII,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_biquad_set",1,SWIGTYPE_p_Filters__BiquadTransposedTypeII);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_biquad_set",2,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  if (arg1) (arg1)->biquad = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeII_biquad_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeII *arg1 = (Filters::BiquadTransposedTypeII *) 0 ;
  Filters::BiquadSection *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::biquad",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::biquad",1,"Filters::BiquadTransposedTypeII *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeII,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_biquad_get",1,SWIGTYPE_p_Filters__BiquadTransposedTypeII);
  }
  
  result = (Filters::BiquadSection *)& ((arg1)->biquad);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadSection,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeII_x_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeII *arg1 = (Filters::BiquadTransposedTypeII *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::x",1,"Filters::BiquadTransposedTypeII *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::x",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeII,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_x_set",1,SWIGTYPE_p_Filters__BiquadTransposedTypeII);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeII_x_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeII *arg1 = (Filters::BiquadTransposedTypeII *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::x",1,"Filters::BiquadTransposedTypeII *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeII,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_x_get",1,SWIGTYPE_p_Filters__BiquadTransposedTypeII);
  }
  
  result = (DspFloatType) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeII_y_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeII *arg1 = (Filters::BiquadTransposedTypeII *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::y",1,"Filters::BiquadTransposedTypeII *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::y",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeII,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_y_set",1,SWIGTYPE_p_Filters__BiquadTransposedTypeII);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeII_y_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeII *arg1 = (Filters::BiquadTransposedTypeII *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::y",1,"Filters::BiquadTransposedTypeII *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeII,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_y_get",1,SWIGTYPE_p_Filters__BiquadTransposedTypeII);
  }
  
  result = (DspFloatType) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeII_d1_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeII *arg1 = (Filters::BiquadTransposedTypeII *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::d1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::d1",1,"Filters::BiquadTransposedTypeII *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::d1",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeII,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_d1_set",1,SWIGTYPE_p_Filters__BiquadTransposedTypeII);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->d1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeII_d1_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeII *arg1 = (Filters::BiquadTransposedTypeII *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::d1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::d1",1,"Filters::BiquadTransposedTypeII *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeII,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_d1_get",1,SWIGTYPE_p_Filters__BiquadTransposedTypeII);
  }
  
  result = (DspFloatType) ((arg1)->d1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeII_d2_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeII *arg1 = (Filters::BiquadTransposedTypeII *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::d2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::d2",1,"Filters::BiquadTransposedTypeII *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::d2",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeII,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_d2_set",1,SWIGTYPE_p_Filters__BiquadTransposedTypeII);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->d2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeII_d2_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeII *arg1 = (Filters::BiquadTransposedTypeII *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::d2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::d2",1,"Filters::BiquadTransposedTypeII *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeII,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_d2_get",1,SWIGTYPE_p_Filters__BiquadTransposedTypeII);
  }
  
  result = (DspFloatType) ((arg1)->d2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadTransposedTypeII__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeII *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::BiquadTransposedTypeII",0,0)
  result = (Filters::BiquadTransposedTypeII *)new Filters::BiquadTransposedTypeII();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTransposedTypeII,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadTransposedTypeII__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSection *arg1 = 0 ;
  Filters::BiquadTransposedTypeII *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::BiquadTransposedTypeII",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::BiquadTransposedTypeII",1,"Filters::BiquadSection const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("new_BiquadTransposedTypeII",1,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  result = (Filters::BiquadTransposedTypeII *)new Filters::BiquadTransposedTypeII((Filters::BiquadSection const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTransposedTypeII,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadTransposedTypeII(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BiquadTransposedTypeII__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadSection, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BiquadTransposedTypeII__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BiquadTransposedTypeII'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::BiquadTransposedTypeII::BiquadTransposedTypeII()\n"
    "    Filters::BiquadTransposedTypeII::BiquadTransposedTypeII(Filters::BiquadSection const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BiquadTransposedTypeII_setCoefficients(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeII *arg1 = (Filters::BiquadTransposedTypeII *) 0 ;
  Filters::BiquadSection *arg2 = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::setCoefficients",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::setCoefficients",1,"Filters::BiquadTransposedTypeII *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::setCoefficients",2,"Filters::BiquadSection const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeII,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_setCoefficients",1,SWIGTYPE_p_Filters__BiquadTransposedTypeII);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_setCoefficients",2,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  (arg1)->setCoefficients((Filters::BiquadSection const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeII_setBiquad(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeII *arg1 = (Filters::BiquadTransposedTypeII *) 0 ;
  Filters::BiquadSection *arg2 = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::setBiquad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::setBiquad",1,"Filters::BiquadTransposedTypeII *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::setBiquad",2,"Filters::BiquadSection const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeII,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_setBiquad",1,SWIGTYPE_p_Filters__BiquadTransposedTypeII);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_setBiquad",2,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  (arg1)->setBiquad((Filters::BiquadSection const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeII_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeII *arg1 = (Filters::BiquadTransposedTypeII *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::Tick",1,"Filters::BiquadTransposedTypeII *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeII,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_Tick",1,SWIGTYPE_p_Filters__BiquadTransposedTypeII);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeII_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeII *arg1 = (Filters::BiquadTransposedTypeII *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::Tick",1,"Filters::BiquadTransposedTypeII *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeII,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_Tick",1,SWIGTYPE_p_Filters__BiquadTransposedTypeII);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeII_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeII *arg1 = (Filters::BiquadTransposedTypeII *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::Tick",1,"Filters::BiquadTransposedTypeII *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeII,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_Tick",1,SWIGTYPE_p_Filters__BiquadTransposedTypeII);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeII_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeII *arg1 = (Filters::BiquadTransposedTypeII *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::Tick",1,"Filters::BiquadTransposedTypeII *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeII,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_Tick",1,SWIGTYPE_p_Filters__BiquadTransposedTypeII);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeII_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTransposedTypeII, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BiquadTransposedTypeII_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTransposedTypeII, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BiquadTransposedTypeII_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTransposedTypeII, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_BiquadTransposedTypeII_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTransposedTypeII, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_BiquadTransposedTypeII_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BiquadTransposedTypeII_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::BiquadTransposedTypeII::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::BiquadTransposedTypeII::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::BiquadTransposedTypeII::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::BiquadTransposedTypeII::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_BiquadTransposedTypeII(void *obj) {
Filters::BiquadTransposedTypeII *arg1 = (Filters::BiquadTransposedTypeII *) obj;
delete arg1;
}
static int _proxy__wrap_new_BiquadTransposedTypeII(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BiquadTransposedTypeII);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BiquadTransposedTypeII_attributes[] = {
    { "biquad", _wrap_BiquadTransposedTypeII_biquad_get, _wrap_BiquadTransposedTypeII_biquad_set },
    { "x", _wrap_BiquadTransposedTypeII_x_get, _wrap_BiquadTransposedTypeII_x_set },
    { "y", _wrap_BiquadTransposedTypeII_y_get, _wrap_BiquadTransposedTypeII_y_set },
    { "d1", _wrap_BiquadTransposedTypeII_d1_get, _wrap_BiquadTransposedTypeII_d1_set },
    { "d2", _wrap_BiquadTransposedTypeII_d2_get, _wrap_BiquadTransposedTypeII_d2_set },
    {0,0,0}
};
static swig_lua_method swig_BiquadTransposedTypeII_methods[]= {
    { "setCoefficients", _wrap_BiquadTransposedTypeII_setCoefficients},
    { "setBiquad", _wrap_BiquadTransposedTypeII_setBiquad},
    { "Tick", _wrap_BiquadTransposedTypeII_Tick},
    {0,0}
};
static swig_lua_method swig_BiquadTransposedTypeII_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BiquadTransposedTypeII_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BiquadTransposedTypeII_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BiquadTransposedTypeII_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BiquadTransposedTypeII_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BiquadTransposedTypeII_Sf_SwigStatic = {
    "BiquadTransposedTypeII",
    swig_BiquadTransposedTypeII_Sf_SwigStatic_methods,
    swig_BiquadTransposedTypeII_Sf_SwigStatic_attributes,
    swig_BiquadTransposedTypeII_Sf_SwigStatic_constants,
    swig_BiquadTransposedTypeII_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BiquadTransposedTypeII_bases[] = {0,0};
static const char *swig_BiquadTransposedTypeII_base_names[] = {"Filters::FilterBase *",0};
static swig_lua_class _wrap_class_BiquadTransposedTypeII = { "BiquadTransposedTypeII", "BiquadTransposedTypeII", &SWIGTYPE_p_Filters__BiquadTransposedTypeII,_proxy__wrap_new_BiquadTransposedTypeII, swig_delete_BiquadTransposedTypeII, swig_BiquadTransposedTypeII_methods, swig_BiquadTransposedTypeII_attributes, &swig_BiquadTransposedTypeII_Sf_SwigStatic, swig_BiquadTransposedTypeII_meta, swig_BiquadTransposedTypeII_bases, swig_BiquadTransposedTypeII_base_names };

static int _wrap_BiquadTypeICascade_sos_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeICascade *arg1 = (Filters::BiquadTypeICascade *) 0 ;
  Filters::BiquadSOS *arg2 = (Filters::BiquadSOS *) 0 ;
  
  SWIG_check_num_args("Filters::BiquadTypeICascade::sos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeICascade::sos",1,"Filters::BiquadTypeICascade *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::BiquadTypeICascade::sos",2,"Filters::BiquadSOS *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeICascade,0))){
    SWIG_fail_ptr("BiquadTypeICascade_sos_set",1,SWIGTYPE_p_Filters__BiquadTypeICascade);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,0))){
    SWIG_fail_ptr("BiquadTypeICascade_sos_set",2,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t);
  }
  
  if (arg1) (arg1)->sos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeICascade_sos_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeICascade *arg1 = (Filters::BiquadTypeICascade *) 0 ;
  Filters::BiquadSOS *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTypeICascade::sos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeICascade::sos",1,"Filters::BiquadTypeICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeICascade,0))){
    SWIG_fail_ptr("BiquadTypeICascade_sos_get",1,SWIGTYPE_p_Filters__BiquadTypeICascade);
  }
  
  result = (Filters::BiquadSOS *)& ((arg1)->sos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeICascade_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeICascade *arg1 = (Filters::BiquadTypeICascade *) 0 ;
  std::vector< Filters::BiquadTypeI > *arg2 = (std::vector< Filters::BiquadTypeI > *) 0 ;
  
  SWIG_check_num_args("Filters::BiquadTypeICascade::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeICascade::biquads",1,"Filters::BiquadTypeICascade *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::BiquadTypeICascade::biquads",2,"std::vector< Filters::BiquadTypeI > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeICascade,0))){
    SWIG_fail_ptr("BiquadTypeICascade_biquads_set",1,SWIGTYPE_p_Filters__BiquadTypeICascade);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Filters__BiquadTypeI_t,0))){
    SWIG_fail_ptr("BiquadTypeICascade_biquads_set",2,SWIGTYPE_p_std__vectorT_Filters__BiquadTypeI_t);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeICascade_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeICascade *arg1 = (Filters::BiquadTypeICascade *) 0 ;
  std::vector< Filters::BiquadTypeI > *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTypeICascade::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeICascade::biquads",1,"Filters::BiquadTypeICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeICascade,0))){
    SWIG_fail_ptr("BiquadTypeICascade_biquads_get",1,SWIGTYPE_p_Filters__BiquadTypeICascade);
  }
  
  result = (std::vector< Filters::BiquadTypeI > *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Filters__BiquadTypeI_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadTypeICascade__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTypeICascade::BiquadTypeICascade",0,0)
  result = (Filters::BiquadTypeICascade *)new Filters::BiquadTypeICascade();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeICascade,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadTypeICascade__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSOS *arg1 = 0 ;
  Filters::BiquadTypeICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTypeICascade::BiquadTypeICascade",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Filters::BiquadTypeICascade::BiquadTypeICascade",1,"Filters::BiquadSOS const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,0))){
    SWIG_fail_ptr("new_BiquadTypeICascade",1,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t);
  }
  
  result = (Filters::BiquadTypeICascade *)new Filters::BiquadTypeICascade((Filters::BiquadSOS const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeICascade,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadTypeICascade(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BiquadTypeICascade__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BiquadTypeICascade__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BiquadTypeICascade'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::BiquadTypeICascade::BiquadTypeICascade()\n"
    "    Filters::BiquadTypeICascade::BiquadTypeICascade(Filters::BiquadSOS const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BiquadTypeICascade_setCoefficients(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeICascade *arg1 = (Filters::BiquadTypeICascade *) 0 ;
  Filters::BiquadSOS *arg2 = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTypeICascade::setCoefficients",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeICascade::setCoefficients",1,"Filters::BiquadTypeICascade *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::BiquadTypeICascade::setCoefficients",2,"Filters::BiquadSOS const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeICascade,0))){
    SWIG_fail_ptr("BiquadTypeICascade_setCoefficients",1,SWIGTYPE_p_Filters__BiquadTypeICascade);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,0))){
    SWIG_fail_ptr("BiquadTypeICascade_setCoefficients",2,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t);
  }
  
  (arg1)->setCoefficients((Filters::BiquadSOS const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeICascade_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeICascade *arg1 = (Filters::BiquadTypeICascade *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTypeICascade::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeICascade::Tick",1,"Filters::BiquadTypeICascade *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTypeICascade::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadTypeICascade::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadTypeICascade::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::BiquadTypeICascade::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeICascade,0))){
    SWIG_fail_ptr("BiquadTypeICascade_Tick",1,SWIGTYPE_p_Filters__BiquadTypeICascade);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeICascade_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeICascade *arg1 = (Filters::BiquadTypeICascade *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTypeICascade::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeICascade::Tick",1,"Filters::BiquadTypeICascade *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTypeICascade::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadTypeICascade::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadTypeICascade::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeICascade,0))){
    SWIG_fail_ptr("BiquadTypeICascade_Tick",1,SWIGTYPE_p_Filters__BiquadTypeICascade);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeICascade_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeICascade *arg1 = (Filters::BiquadTypeICascade *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTypeICascade::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeICascade::Tick",1,"Filters::BiquadTypeICascade *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTypeICascade::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadTypeICascade::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeICascade,0))){
    SWIG_fail_ptr("BiquadTypeICascade_Tick",1,SWIGTYPE_p_Filters__BiquadTypeICascade);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeICascade_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeICascade *arg1 = (Filters::BiquadTypeICascade *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTypeICascade::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeICascade::Tick",1,"Filters::BiquadTypeICascade *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTypeICascade::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeICascade,0))){
    SWIG_fail_ptr("BiquadTypeICascade_Tick",1,SWIGTYPE_p_Filters__BiquadTypeICascade);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeICascade_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTypeICascade, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BiquadTypeICascade_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTypeICascade, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BiquadTypeICascade_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTypeICascade, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_BiquadTypeICascade_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTypeICascade, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_BiquadTypeICascade_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BiquadTypeICascade_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::BiquadTypeICascade::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::BiquadTypeICascade::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::BiquadTypeICascade::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::BiquadTypeICascade::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_BiquadTypeICascade(void *obj) {
Filters::BiquadTypeICascade *arg1 = (Filters::BiquadTypeICascade *) obj;
delete arg1;
}
static int _proxy__wrap_new_BiquadTypeICascade(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BiquadTypeICascade);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BiquadTypeICascade_attributes[] = {
    { "sos", _wrap_BiquadTypeICascade_sos_get, _wrap_BiquadTypeICascade_sos_set },
    { "biquads", _wrap_BiquadTypeICascade_biquads_get, _wrap_BiquadTypeICascade_biquads_set },
    {0,0,0}
};
static swig_lua_method swig_BiquadTypeICascade_methods[]= {
    { "setCoefficients", _wrap_BiquadTypeICascade_setCoefficients},
    { "Tick", _wrap_BiquadTypeICascade_Tick},
    {0,0}
};
static swig_lua_method swig_BiquadTypeICascade_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BiquadTypeICascade_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BiquadTypeICascade_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BiquadTypeICascade_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BiquadTypeICascade_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BiquadTypeICascade_Sf_SwigStatic = {
    "BiquadTypeICascade",
    swig_BiquadTypeICascade_Sf_SwigStatic_methods,
    swig_BiquadTypeICascade_Sf_SwigStatic_attributes,
    swig_BiquadTypeICascade_Sf_SwigStatic_constants,
    swig_BiquadTypeICascade_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BiquadTypeICascade_bases[] = {0,0};
static const char *swig_BiquadTypeICascade_base_names[] = {"Filters::FilterBase *",0};
static swig_lua_class _wrap_class_BiquadTypeICascade = { "BiquadTypeICascade", "BiquadTypeICascade", &SWIGTYPE_p_Filters__BiquadTypeICascade,_proxy__wrap_new_BiquadTypeICascade, swig_delete_BiquadTypeICascade, swig_BiquadTypeICascade_methods, swig_BiquadTypeICascade_attributes, &swig_BiquadTypeICascade_Sf_SwigStatic, swig_BiquadTypeICascade_meta, swig_BiquadTypeICascade_bases, swig_BiquadTypeICascade_base_names };

static int _wrap_BiquadTypeIICascade_sos_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeIICascade *arg1 = (Filters::BiquadTypeIICascade *) 0 ;
  Filters::BiquadSOS *arg2 = (Filters::BiquadSOS *) 0 ;
  
  SWIG_check_num_args("Filters::BiquadTypeIICascade::sos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeIICascade::sos",1,"Filters::BiquadTypeIICascade *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::BiquadTypeIICascade::sos",2,"Filters::BiquadSOS *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeIICascade,0))){
    SWIG_fail_ptr("BiquadTypeIICascade_sos_set",1,SWIGTYPE_p_Filters__BiquadTypeIICascade);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,0))){
    SWIG_fail_ptr("BiquadTypeIICascade_sos_set",2,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t);
  }
  
  if (arg1) (arg1)->sos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeIICascade_sos_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeIICascade *arg1 = (Filters::BiquadTypeIICascade *) 0 ;
  Filters::BiquadSOS *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTypeIICascade::sos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeIICascade::sos",1,"Filters::BiquadTypeIICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeIICascade,0))){
    SWIG_fail_ptr("BiquadTypeIICascade_sos_get",1,SWIGTYPE_p_Filters__BiquadTypeIICascade);
  }
  
  result = (Filters::BiquadSOS *)& ((arg1)->sos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeIICascade_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeIICascade *arg1 = (Filters::BiquadTypeIICascade *) 0 ;
  std::vector< Filters::BiquadTypeII > *arg2 = (std::vector< Filters::BiquadTypeII > *) 0 ;
  
  SWIG_check_num_args("Filters::BiquadTypeIICascade::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeIICascade::biquads",1,"Filters::BiquadTypeIICascade *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::BiquadTypeIICascade::biquads",2,"std::vector< Filters::BiquadTypeII > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeIICascade,0))){
    SWIG_fail_ptr("BiquadTypeIICascade_biquads_set",1,SWIGTYPE_p_Filters__BiquadTypeIICascade);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Filters__BiquadTypeII_t,0))){
    SWIG_fail_ptr("BiquadTypeIICascade_biquads_set",2,SWIGTYPE_p_std__vectorT_Filters__BiquadTypeII_t);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeIICascade_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeIICascade *arg1 = (Filters::BiquadTypeIICascade *) 0 ;
  std::vector< Filters::BiquadTypeII > *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTypeIICascade::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeIICascade::biquads",1,"Filters::BiquadTypeIICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeIICascade,0))){
    SWIG_fail_ptr("BiquadTypeIICascade_biquads_get",1,SWIGTYPE_p_Filters__BiquadTypeIICascade);
  }
  
  result = (std::vector< Filters::BiquadTypeII > *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Filters__BiquadTypeII_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadTypeIICascade__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeIICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTypeIICascade::BiquadTypeIICascade",0,0)
  result = (Filters::BiquadTypeIICascade *)new Filters::BiquadTypeIICascade();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeIICascade,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadTypeIICascade__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSOS *arg1 = 0 ;
  Filters::BiquadTypeIICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTypeIICascade::BiquadTypeIICascade",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Filters::BiquadTypeIICascade::BiquadTypeIICascade",1,"Filters::BiquadSOS const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,0))){
    SWIG_fail_ptr("new_BiquadTypeIICascade",1,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t);
  }
  
  result = (Filters::BiquadTypeIICascade *)new Filters::BiquadTypeIICascade((Filters::BiquadSOS const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeIICascade,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadTypeIICascade(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BiquadTypeIICascade__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BiquadTypeIICascade__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BiquadTypeIICascade'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::BiquadTypeIICascade::BiquadTypeIICascade()\n"
    "    Filters::BiquadTypeIICascade::BiquadTypeIICascade(Filters::BiquadSOS const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BiquadTypeIICascade_setCoefficients(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeIICascade *arg1 = (Filters::BiquadTypeIICascade *) 0 ;
  Filters::BiquadSOS *arg2 = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTypeIICascade::setCoefficients",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeIICascade::setCoefficients",1,"Filters::BiquadTypeIICascade *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::BiquadTypeIICascade::setCoefficients",2,"Filters::BiquadSOS const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeIICascade,0))){
    SWIG_fail_ptr("BiquadTypeIICascade_setCoefficients",1,SWIGTYPE_p_Filters__BiquadTypeIICascade);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,0))){
    SWIG_fail_ptr("BiquadTypeIICascade_setCoefficients",2,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t);
  }
  
  (arg1)->setCoefficients((Filters::BiquadSOS const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeIICascade_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeIICascade *arg1 = (Filters::BiquadTypeIICascade *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTypeIICascade::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeIICascade::Tick",1,"Filters::BiquadTypeIICascade *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTypeIICascade::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadTypeIICascade::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadTypeIICascade::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::BiquadTypeIICascade::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeIICascade,0))){
    SWIG_fail_ptr("BiquadTypeIICascade_Tick",1,SWIGTYPE_p_Filters__BiquadTypeIICascade);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeIICascade_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeIICascade *arg1 = (Filters::BiquadTypeIICascade *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTypeIICascade::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeIICascade::Tick",1,"Filters::BiquadTypeIICascade *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTypeIICascade::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadTypeIICascade::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadTypeIICascade::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeIICascade,0))){
    SWIG_fail_ptr("BiquadTypeIICascade_Tick",1,SWIGTYPE_p_Filters__BiquadTypeIICascade);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeIICascade_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeIICascade *arg1 = (Filters::BiquadTypeIICascade *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTypeIICascade::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeIICascade::Tick",1,"Filters::BiquadTypeIICascade *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTypeIICascade::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadTypeIICascade::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeIICascade,0))){
    SWIG_fail_ptr("BiquadTypeIICascade_Tick",1,SWIGTYPE_p_Filters__BiquadTypeIICascade);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeIICascade_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTypeIICascade *arg1 = (Filters::BiquadTypeIICascade *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTypeIICascade::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTypeIICascade::Tick",1,"Filters::BiquadTypeIICascade *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTypeIICascade::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTypeIICascade,0))){
    SWIG_fail_ptr("BiquadTypeIICascade_Tick",1,SWIGTYPE_p_Filters__BiquadTypeIICascade);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTypeIICascade_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTypeIICascade, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BiquadTypeIICascade_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTypeIICascade, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BiquadTypeIICascade_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTypeIICascade, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_BiquadTypeIICascade_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTypeIICascade, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_BiquadTypeIICascade_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BiquadTypeIICascade_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::BiquadTypeIICascade::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::BiquadTypeIICascade::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::BiquadTypeIICascade::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::BiquadTypeIICascade::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_BiquadTypeIICascade(void *obj) {
Filters::BiquadTypeIICascade *arg1 = (Filters::BiquadTypeIICascade *) obj;
delete arg1;
}
static int _proxy__wrap_new_BiquadTypeIICascade(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BiquadTypeIICascade);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BiquadTypeIICascade_attributes[] = {
    { "sos", _wrap_BiquadTypeIICascade_sos_get, _wrap_BiquadTypeIICascade_sos_set },
    { "biquads", _wrap_BiquadTypeIICascade_biquads_get, _wrap_BiquadTypeIICascade_biquads_set },
    {0,0,0}
};
static swig_lua_method swig_BiquadTypeIICascade_methods[]= {
    { "setCoefficients", _wrap_BiquadTypeIICascade_setCoefficients},
    { "Tick", _wrap_BiquadTypeIICascade_Tick},
    {0,0}
};
static swig_lua_method swig_BiquadTypeIICascade_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BiquadTypeIICascade_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BiquadTypeIICascade_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BiquadTypeIICascade_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BiquadTypeIICascade_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BiquadTypeIICascade_Sf_SwigStatic = {
    "BiquadTypeIICascade",
    swig_BiquadTypeIICascade_Sf_SwigStatic_methods,
    swig_BiquadTypeIICascade_Sf_SwigStatic_attributes,
    swig_BiquadTypeIICascade_Sf_SwigStatic_constants,
    swig_BiquadTypeIICascade_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BiquadTypeIICascade_bases[] = {0,0};
static const char *swig_BiquadTypeIICascade_base_names[] = {"Filters::FilterBase *",0};
static swig_lua_class _wrap_class_BiquadTypeIICascade = { "BiquadTypeIICascade", "BiquadTypeIICascade", &SWIGTYPE_p_Filters__BiquadTypeIICascade,_proxy__wrap_new_BiquadTypeIICascade, swig_delete_BiquadTypeIICascade, swig_BiquadTypeIICascade_methods, swig_BiquadTypeIICascade_attributes, &swig_BiquadTypeIICascade_Sf_SwigStatic, swig_BiquadTypeIICascade_meta, swig_BiquadTypeIICascade_bases, swig_BiquadTypeIICascade_base_names };

static int _wrap_BiquadTransposedTypeICascade_sos_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeICascade *arg1 = (Filters::BiquadTransposedTypeICascade *) 0 ;
  Filters::BiquadSOS *arg2 = (Filters::BiquadSOS *) 0 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeICascade::sos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeICascade::sos",1,"Filters::BiquadTransposedTypeICascade *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeICascade::sos",2,"Filters::BiquadSOS *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeICascade,0))){
    SWIG_fail_ptr("BiquadTransposedTypeICascade_sos_set",1,SWIGTYPE_p_Filters__BiquadTransposedTypeICascade);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,0))){
    SWIG_fail_ptr("BiquadTransposedTypeICascade_sos_set",2,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t);
  }
  
  if (arg1) (arg1)->sos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeICascade_sos_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeICascade *arg1 = (Filters::BiquadTransposedTypeICascade *) 0 ;
  Filters::BiquadSOS *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeICascade::sos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeICascade::sos",1,"Filters::BiquadTransposedTypeICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeICascade,0))){
    SWIG_fail_ptr("BiquadTransposedTypeICascade_sos_get",1,SWIGTYPE_p_Filters__BiquadTransposedTypeICascade);
  }
  
  result = (Filters::BiquadSOS *)& ((arg1)->sos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeICascade_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeICascade *arg1 = (Filters::BiquadTransposedTypeICascade *) 0 ;
  std::vector< Filters::BiquadTransposedTypeI > *arg2 = (std::vector< Filters::BiquadTransposedTypeI > *) 0 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeICascade::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeICascade::biquads",1,"Filters::BiquadTransposedTypeICascade *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeICascade::biquads",2,"std::vector< Filters::BiquadTransposedTypeI > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeICascade,0))){
    SWIG_fail_ptr("BiquadTransposedTypeICascade_biquads_set",1,SWIGTYPE_p_Filters__BiquadTransposedTypeICascade);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Filters__BiquadTransposedTypeI_t,0))){
    SWIG_fail_ptr("BiquadTransposedTypeICascade_biquads_set",2,SWIGTYPE_p_std__vectorT_Filters__BiquadTransposedTypeI_t);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeICascade_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeICascade *arg1 = (Filters::BiquadTransposedTypeICascade *) 0 ;
  std::vector< Filters::BiquadTransposedTypeI > *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeICascade::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeICascade::biquads",1,"Filters::BiquadTransposedTypeICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeICascade,0))){
    SWIG_fail_ptr("BiquadTransposedTypeICascade_biquads_get",1,SWIGTYPE_p_Filters__BiquadTransposedTypeICascade);
  }
  
  result = (std::vector< Filters::BiquadTransposedTypeI > *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Filters__BiquadTransposedTypeI_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadTransposedTypeICascade__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeICascade::BiquadTransposedTypeICascade",0,0)
  result = (Filters::BiquadTransposedTypeICascade *)new Filters::BiquadTransposedTypeICascade();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTransposedTypeICascade,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadTransposedTypeICascade__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSOS *arg1 = 0 ;
  Filters::BiquadTransposedTypeICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeICascade::BiquadTransposedTypeICascade",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeICascade::BiquadTransposedTypeICascade",1,"Filters::BiquadSOS const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,0))){
    SWIG_fail_ptr("new_BiquadTransposedTypeICascade",1,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t);
  }
  
  result = (Filters::BiquadTransposedTypeICascade *)new Filters::BiquadTransposedTypeICascade((Filters::BiquadSOS const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTransposedTypeICascade,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadTransposedTypeICascade(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BiquadTransposedTypeICascade__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BiquadTransposedTypeICascade__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BiquadTransposedTypeICascade'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::BiquadTransposedTypeICascade::BiquadTransposedTypeICascade()\n"
    "    Filters::BiquadTransposedTypeICascade::BiquadTransposedTypeICascade(Filters::BiquadSOS const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BiquadTransposedTypeICascade_setCoefficients(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeICascade *arg1 = (Filters::BiquadTransposedTypeICascade *) 0 ;
  Filters::BiquadSOS *arg2 = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeICascade::setCoefficients",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeICascade::setCoefficients",1,"Filters::BiquadTransposedTypeICascade *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeICascade::setCoefficients",2,"Filters::BiquadSOS const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeICascade,0))){
    SWIG_fail_ptr("BiquadTransposedTypeICascade_setCoefficients",1,SWIGTYPE_p_Filters__BiquadTransposedTypeICascade);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,0))){
    SWIG_fail_ptr("BiquadTransposedTypeICascade_setCoefficients",2,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t);
  }
  
  (arg1)->setCoefficients((Filters::BiquadSOS const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeICascade_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeICascade *arg1 = (Filters::BiquadTransposedTypeICascade *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeICascade::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeICascade::Tick",1,"Filters::BiquadTransposedTypeICascade *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeICascade::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadTransposedTypeICascade::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadTransposedTypeICascade::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::BiquadTransposedTypeICascade::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeICascade,0))){
    SWIG_fail_ptr("BiquadTransposedTypeICascade_Tick",1,SWIGTYPE_p_Filters__BiquadTransposedTypeICascade);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeICascade_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeICascade *arg1 = (Filters::BiquadTransposedTypeICascade *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeICascade::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeICascade::Tick",1,"Filters::BiquadTransposedTypeICascade *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeICascade::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadTransposedTypeICascade::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadTransposedTypeICascade::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeICascade,0))){
    SWIG_fail_ptr("BiquadTransposedTypeICascade_Tick",1,SWIGTYPE_p_Filters__BiquadTransposedTypeICascade);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeICascade_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeICascade *arg1 = (Filters::BiquadTransposedTypeICascade *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeICascade::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeICascade::Tick",1,"Filters::BiquadTransposedTypeICascade *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeICascade::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadTransposedTypeICascade::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeICascade,0))){
    SWIG_fail_ptr("BiquadTransposedTypeICascade_Tick",1,SWIGTYPE_p_Filters__BiquadTransposedTypeICascade);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeICascade_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeICascade *arg1 = (Filters::BiquadTransposedTypeICascade *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeICascade::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeICascade::Tick",1,"Filters::BiquadTransposedTypeICascade *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeICascade::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeICascade,0))){
    SWIG_fail_ptr("BiquadTransposedTypeICascade_Tick",1,SWIGTYPE_p_Filters__BiquadTransposedTypeICascade);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeICascade_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTransposedTypeICascade, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BiquadTransposedTypeICascade_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTransposedTypeICascade, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BiquadTransposedTypeICascade_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTransposedTypeICascade, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_BiquadTransposedTypeICascade_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTransposedTypeICascade, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_BiquadTransposedTypeICascade_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BiquadTransposedTypeICascade_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::BiquadTransposedTypeICascade::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::BiquadTransposedTypeICascade::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::BiquadTransposedTypeICascade::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::BiquadTransposedTypeICascade::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_BiquadTransposedTypeICascade(void *obj) {
Filters::BiquadTransposedTypeICascade *arg1 = (Filters::BiquadTransposedTypeICascade *) obj;
delete arg1;
}
static int _proxy__wrap_new_BiquadTransposedTypeICascade(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BiquadTransposedTypeICascade);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BiquadTransposedTypeICascade_attributes[] = {
    { "sos", _wrap_BiquadTransposedTypeICascade_sos_get, _wrap_BiquadTransposedTypeICascade_sos_set },
    { "biquads", _wrap_BiquadTransposedTypeICascade_biquads_get, _wrap_BiquadTransposedTypeICascade_biquads_set },
    {0,0,0}
};
static swig_lua_method swig_BiquadTransposedTypeICascade_methods[]= {
    { "setCoefficients", _wrap_BiquadTransposedTypeICascade_setCoefficients},
    { "Tick", _wrap_BiquadTransposedTypeICascade_Tick},
    {0,0}
};
static swig_lua_method swig_BiquadTransposedTypeICascade_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BiquadTransposedTypeICascade_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BiquadTransposedTypeICascade_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BiquadTransposedTypeICascade_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BiquadTransposedTypeICascade_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BiquadTransposedTypeICascade_Sf_SwigStatic = {
    "BiquadTransposedTypeICascade",
    swig_BiquadTransposedTypeICascade_Sf_SwigStatic_methods,
    swig_BiquadTransposedTypeICascade_Sf_SwigStatic_attributes,
    swig_BiquadTransposedTypeICascade_Sf_SwigStatic_constants,
    swig_BiquadTransposedTypeICascade_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BiquadTransposedTypeICascade_bases[] = {0,0};
static const char *swig_BiquadTransposedTypeICascade_base_names[] = {"Filters::FilterBase *",0};
static swig_lua_class _wrap_class_BiquadTransposedTypeICascade = { "BiquadTransposedTypeICascade", "BiquadTransposedTypeICascade", &SWIGTYPE_p_Filters__BiquadTransposedTypeICascade,_proxy__wrap_new_BiquadTransposedTypeICascade, swig_delete_BiquadTransposedTypeICascade, swig_BiquadTransposedTypeICascade_methods, swig_BiquadTransposedTypeICascade_attributes, &swig_BiquadTransposedTypeICascade_Sf_SwigStatic, swig_BiquadTransposedTypeICascade_meta, swig_BiquadTransposedTypeICascade_bases, swig_BiquadTransposedTypeICascade_base_names };

static int _wrap_BiquadTransposedTypeIICascade_sos_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeIICascade *arg1 = (Filters::BiquadTransposedTypeIICascade *) 0 ;
  Filters::BiquadSOS *arg2 = (Filters::BiquadSOS *) 0 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeIICascade::sos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeIICascade::sos",1,"Filters::BiquadTransposedTypeIICascade *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeIICascade::sos",2,"Filters::BiquadSOS *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0))){
    SWIG_fail_ptr("BiquadTransposedTypeIICascade_sos_set",1,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,0))){
    SWIG_fail_ptr("BiquadTransposedTypeIICascade_sos_set",2,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t);
  }
  
  if (arg1) (arg1)->sos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeIICascade_sos_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeIICascade *arg1 = (Filters::BiquadTransposedTypeIICascade *) 0 ;
  Filters::BiquadSOS *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeIICascade::sos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeIICascade::sos",1,"Filters::BiquadTransposedTypeIICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0))){
    SWIG_fail_ptr("BiquadTransposedTypeIICascade_sos_get",1,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade);
  }
  
  result = (Filters::BiquadSOS *)& ((arg1)->sos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeIICascade_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeIICascade *arg1 = (Filters::BiquadTransposedTypeIICascade *) 0 ;
  std::vector< Filters::BiquadTransposedTypeII > *arg2 = (std::vector< Filters::BiquadTransposedTypeII > *) 0 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeIICascade::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeIICascade::biquads",1,"Filters::BiquadTransposedTypeIICascade *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeIICascade::biquads",2,"std::vector< Filters::BiquadTransposedTypeII > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0))){
    SWIG_fail_ptr("BiquadTransposedTypeIICascade_biquads_set",1,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Filters__BiquadTransposedTypeII_t,0))){
    SWIG_fail_ptr("BiquadTransposedTypeIICascade_biquads_set",2,SWIGTYPE_p_std__vectorT_Filters__BiquadTransposedTypeII_t);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeIICascade_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeIICascade *arg1 = (Filters::BiquadTransposedTypeIICascade *) 0 ;
  std::vector< Filters::BiquadTransposedTypeII > *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeIICascade::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeIICascade::biquads",1,"Filters::BiquadTransposedTypeIICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0))){
    SWIG_fail_ptr("BiquadTransposedTypeIICascade_biquads_get",1,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade);
  }
  
  result = (std::vector< Filters::BiquadTransposedTypeII > *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Filters__BiquadTransposedTypeII_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadTransposedTypeIICascade__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeIICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeIICascade::BiquadTransposedTypeIICascade",0,0)
  result = (Filters::BiquadTransposedTypeIICascade *)new Filters::BiquadTransposedTypeIICascade();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadTransposedTypeIICascade__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSOS *arg1 = 0 ;
  Filters::BiquadTransposedTypeIICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeIICascade::BiquadTransposedTypeIICascade",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeIICascade::BiquadTransposedTypeIICascade",1,"Filters::BiquadSOS const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,0))){
    SWIG_fail_ptr("new_BiquadTransposedTypeIICascade",1,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t);
  }
  
  result = (Filters::BiquadTransposedTypeIICascade *)new Filters::BiquadTransposedTypeIICascade((Filters::BiquadSOS const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadTransposedTypeIICascade(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BiquadTransposedTypeIICascade__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BiquadTransposedTypeIICascade__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BiquadTransposedTypeIICascade'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::BiquadTransposedTypeIICascade::BiquadTransposedTypeIICascade()\n"
    "    Filters::BiquadTransposedTypeIICascade::BiquadTransposedTypeIICascade(Filters::BiquadSOS const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BiquadTransposedTypeIICascade_setCoefficients(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeIICascade *arg1 = (Filters::BiquadTransposedTypeIICascade *) 0 ;
  Filters::BiquadSOS *arg2 = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeIICascade::setCoefficients",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeIICascade::setCoefficients",1,"Filters::BiquadTransposedTypeIICascade *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeIICascade::setCoefficients",2,"Filters::BiquadSOS const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0))){
    SWIG_fail_ptr("BiquadTransposedTypeIICascade_setCoefficients",1,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,0))){
    SWIG_fail_ptr("BiquadTransposedTypeIICascade_setCoefficients",2,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t);
  }
  
  (arg1)->setCoefficients((Filters::BiquadSOS const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeIICascade_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeIICascade *arg1 = (Filters::BiquadTransposedTypeIICascade *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeIICascade::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeIICascade::Tick",1,"Filters::BiquadTransposedTypeIICascade *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeIICascade::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadTransposedTypeIICascade::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadTransposedTypeIICascade::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::BiquadTransposedTypeIICascade::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0))){
    SWIG_fail_ptr("BiquadTransposedTypeIICascade_Tick",1,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeIICascade_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeIICascade *arg1 = (Filters::BiquadTransposedTypeIICascade *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeIICascade::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeIICascade::Tick",1,"Filters::BiquadTransposedTypeIICascade *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeIICascade::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadTransposedTypeIICascade::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadTransposedTypeIICascade::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0))){
    SWIG_fail_ptr("BiquadTransposedTypeIICascade_Tick",1,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeIICascade_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeIICascade *arg1 = (Filters::BiquadTransposedTypeIICascade *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeIICascade::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeIICascade::Tick",1,"Filters::BiquadTransposedTypeIICascade *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeIICascade::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadTransposedTypeIICascade::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0))){
    SWIG_fail_ptr("BiquadTransposedTypeIICascade_Tick",1,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeIICascade_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeIICascade *arg1 = (Filters::BiquadTransposedTypeIICascade *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeIICascade::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeIICascade::Tick",1,"Filters::BiquadTransposedTypeIICascade *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeIICascade::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0))){
    SWIG_fail_ptr("BiquadTransposedTypeIICascade_Tick",1,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeIICascade_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BiquadTransposedTypeIICascade_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BiquadTransposedTypeIICascade_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_BiquadTransposedTypeIICascade_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_BiquadTransposedTypeIICascade_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BiquadTransposedTypeIICascade_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::BiquadTransposedTypeIICascade::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::BiquadTransposedTypeIICascade::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::BiquadTransposedTypeIICascade::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::BiquadTransposedTypeIICascade::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_BiquadTransposedTypeIICascade(void *obj) {
Filters::BiquadTransposedTypeIICascade *arg1 = (Filters::BiquadTransposedTypeIICascade *) obj;
delete arg1;
}
static int _proxy__wrap_new_BiquadTransposedTypeIICascade(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BiquadTransposedTypeIICascade);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BiquadTransposedTypeIICascade_attributes[] = {
    { "sos", _wrap_BiquadTransposedTypeIICascade_sos_get, _wrap_BiquadTransposedTypeIICascade_sos_set },
    { "biquads", _wrap_BiquadTransposedTypeIICascade_biquads_get, _wrap_BiquadTransposedTypeIICascade_biquads_set },
    {0,0,0}
};
static swig_lua_method swig_BiquadTransposedTypeIICascade_methods[]= {
    { "setCoefficients", _wrap_BiquadTransposedTypeIICascade_setCoefficients},
    { "Tick", _wrap_BiquadTransposedTypeIICascade_Tick},
    {0,0}
};
static swig_lua_method swig_BiquadTransposedTypeIICascade_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BiquadTransposedTypeIICascade_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BiquadTransposedTypeIICascade_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BiquadTransposedTypeIICascade_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BiquadTransposedTypeIICascade_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BiquadTransposedTypeIICascade_Sf_SwigStatic = {
    "BiquadTransposedTypeIICascade",
    swig_BiquadTransposedTypeIICascade_Sf_SwigStatic_methods,
    swig_BiquadTransposedTypeIICascade_Sf_SwigStatic_attributes,
    swig_BiquadTransposedTypeIICascade_Sf_SwigStatic_constants,
    swig_BiquadTransposedTypeIICascade_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BiquadTransposedTypeIICascade_bases[] = {0,0};
static const char *swig_BiquadTransposedTypeIICascade_base_names[] = {"Filters::FilterBase *",0};
static swig_lua_class _wrap_class_BiquadTransposedTypeIICascade = { "BiquadTransposedTypeIICascade", "BiquadTransposedTypeIICascade", &SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,_proxy__wrap_new_BiquadTransposedTypeIICascade, swig_delete_BiquadTransposedTypeIICascade, swig_BiquadTransposedTypeIICascade_methods, swig_BiquadTransposedTypeIICascade_attributes, &swig_BiquadTransposedTypeIICascade_Sf_SwigStatic, swig_BiquadTransposedTypeIICascade_meta, swig_BiquadTransposedTypeIICascade_bases, swig_BiquadTransposedTypeIICascade_base_names };

static int _wrap_prewarp(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *arg1 = (DspFloatType *) 0 ;
  DspFloatType *arg2 = (DspFloatType *) 0 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  
  SWIG_check_num_args("Filters::prewarp",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::prewarp",1,"DspFloatType *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::prewarp",2,"DspFloatType *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Filters::prewarp",3,"DspFloatType *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::prewarp",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::prewarp",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("prewarp",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("prewarp",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("prewarp",3,SWIGTYPE_p_float);
  }
  
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  Filters::prewarp(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prewarpR(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *arg1 = (DspFloatType *) 0 ;
  DspFloatType *arg2 = (DspFloatType *) 0 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType arg6 ;
  
  SWIG_check_num_args("Filters::prewarpR",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::prewarpR",1,"DspFloatType *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::prewarpR",2,"DspFloatType *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Filters::prewarpR",3,"DspFloatType *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::prewarpR",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::prewarpR",5,"DspFloatType");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Filters::prewarpR",6,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("prewarpR",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("prewarpR",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("prewarpR",3,SWIGTYPE_p_float);
  }
  
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  Filters::prewarpR(arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prewarpQ(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *arg1 = (DspFloatType *) 0 ;
  DspFloatType *arg2 = (DspFloatType *) 0 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType arg6 ;
  
  SWIG_check_num_args("Filters::prewarpQ",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::prewarpQ",1,"DspFloatType *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::prewarpQ",2,"DspFloatType *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Filters::prewarpQ",3,"DspFloatType *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::prewarpQ",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::prewarpQ",5,"DspFloatType");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Filters::prewarpQ",6,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("prewarpQ",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("prewarpQ",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("prewarpQ",3,SWIGTYPE_p_float);
  }
  
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  Filters::prewarpQ(arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prewarpRQ(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *arg1 = (DspFloatType *) 0 ;
  DspFloatType *arg2 = (DspFloatType *) 0 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  
  SWIG_check_num_args("Filters::prewarpRQ",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::prewarpRQ",1,"DspFloatType *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::prewarpRQ",2,"DspFloatType *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Filters::prewarpRQ",3,"DspFloatType *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::prewarpRQ",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::prewarpRQ",5,"DspFloatType");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Filters::prewarpRQ",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Filters::prewarpRQ",7,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("prewarpRQ",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("prewarpRQ",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("prewarpRQ",3,SWIGTYPE_p_float);
  }
  
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  Filters::prewarpRQ(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_inversebilinear(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *arg1 ;
  DspFloatType *arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType *arg5 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Filters::inversebilinear",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::inversebilinear",1,"DspFloatType [3]");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::inversebilinear",2,"DspFloatType [3]");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::inversebilinear",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::inversebilinear",4,"DspFloatType");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Filters::inversebilinear",5,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("inversebilinear",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("inversebilinear",2,SWIGTYPE_p_float);
  }
  
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("inversebilinear",5,SWIGTYPE_p_float);
  }
  
  Filters::inversebilinear(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bilinear1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType arg6 ;
  DspFloatType *arg7 = (DspFloatType *) 0 ;
  DspFloatType arg8 ;
  DspFloatType *arg9 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Filters::bilinear1",9,9)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::bilinear1",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::bilinear1",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::bilinear1",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::bilinear1",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::bilinear1",5,"DspFloatType");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Filters::bilinear1",6,"DspFloatType");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("Filters::bilinear1",7,"DspFloatType *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("Filters::bilinear1",8,"DspFloatType");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("Filters::bilinear1",9,"DspFloatType *");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("bilinear1",7,SWIGTYPE_p_float);
  }
  
  arg8 = (DspFloatType)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("bilinear1",9,SWIGTYPE_p_float);
  }
  
  Filters::bilinear1(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bilinear(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType arg6 ;
  DspFloatType *arg7 = (DspFloatType *) 0 ;
  DspFloatType arg8 ;
  DspFloatType *arg9 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Filters::bilinear",9,9)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::bilinear",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::bilinear",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::bilinear",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::bilinear",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::bilinear",5,"DspFloatType");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Filters::bilinear",6,"DspFloatType");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("Filters::bilinear",7,"DspFloatType *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("Filters::bilinear",8,"DspFloatType");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("Filters::bilinear",9,"DspFloatType *");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("bilinear",7,SWIGTYPE_p_float);
  }
  
  arg8 = (DspFloatType)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("bilinear",9,SWIGTYPE_p_float);
  }
  
  Filters::bilinear(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogBiquadTypeI__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSection *arg1 = 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  bool arg4 ;
  Filters::BiquadTypeI result;
  
  SWIG_check_num_args("Filters::IIR::AnalogBiquadTypeI",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Filters::IIR::AnalogBiquadTypeI",1,"Filters::BiquadSection const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::AnalogBiquadTypeI",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::AnalogBiquadTypeI",3,"DspFloatType");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Filters::IIR::AnalogBiquadTypeI",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("AnalogBiquadTypeI",1,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = Filters::IIR::AnalogBiquadTypeI((Filters::BiquadSection const &)*arg1,arg2,arg3,arg4);
  {
    Filters::BiquadTypeI * resultptr = new Filters::BiquadTypeI((const Filters::BiquadTypeI &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__BiquadTypeI,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogBiquadTypeI__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSection *arg1 = 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::BiquadTypeI result;
  
  SWIG_check_num_args("Filters::IIR::AnalogBiquadTypeI",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Filters::IIR::AnalogBiquadTypeI",1,"Filters::BiquadSection const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::AnalogBiquadTypeI",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::AnalogBiquadTypeI",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("AnalogBiquadTypeI",1,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::IIR::AnalogBiquadTypeI((Filters::BiquadSection const &)*arg1,arg2,arg3);
  {
    Filters::BiquadTypeI * resultptr = new Filters::BiquadTypeI((const Filters::BiquadTypeI &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__BiquadTypeI,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogBiquadTypeI(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadSection, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AnalogBiquadTypeI__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadSection, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_AnalogBiquadTypeI__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AnalogBiquadTypeI'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::AnalogBiquadTypeI(Filters::BiquadSection const &,DspFloatType,DspFloatType,bool)\n"
    "    Filters::IIR::AnalogBiquadTypeI(Filters::BiquadSection const &,DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_AnalogBiquadSection__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSection *arg1 = 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  bool arg4 ;
  Filters::BiquadSection result;
  
  SWIG_check_num_args("Filters::IIR::AnalogBiquadSection",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Filters::IIR::AnalogBiquadSection",1,"Filters::BiquadSection const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::AnalogBiquadSection",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::AnalogBiquadSection",3,"DspFloatType");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Filters::IIR::AnalogBiquadSection",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("AnalogBiquadSection",1,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = Filters::IIR::AnalogBiquadSection((Filters::BiquadSection const &)*arg1,arg2,arg3,arg4);
  {
    Filters::BiquadSection * resultptr = new Filters::BiquadSection((const Filters::BiquadSection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__BiquadSection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogBiquadSection__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSection *arg1 = 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::BiquadSection result;
  
  SWIG_check_num_args("Filters::IIR::AnalogBiquadSection",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Filters::IIR::AnalogBiquadSection",1,"Filters::BiquadSection const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::AnalogBiquadSection",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::AnalogBiquadSection",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("AnalogBiquadSection",1,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::IIR::AnalogBiquadSection((Filters::BiquadSection const &)*arg1,arg2,arg3);
  {
    Filters::BiquadSection * resultptr = new Filters::BiquadSection((const Filters::BiquadSection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__BiquadSection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogBiquadSection(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadSection, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AnalogBiquadSection__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadSection, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_AnalogBiquadSection__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AnalogBiquadSection'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::AnalogBiquadSection(Filters::BiquadSection const &,DspFloatType,DspFloatType,bool)\n"
    "    Filters::IIR::AnalogBiquadSection(Filters::BiquadSection const &,DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_AnalogBiquadCascade__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSOS *arg1 = 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  bool arg4 ;
  SwigValueWrapper< std::vector< Filters::BiquadSection > > result;
  
  SWIG_check_num_args("Filters::IIR::AnalogBiquadCascade",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Filters::IIR::AnalogBiquadCascade",1,"Filters::BiquadSOS const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::AnalogBiquadCascade",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::AnalogBiquadCascade",3,"DspFloatType");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Filters::IIR::AnalogBiquadCascade",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,0))){
    SWIG_fail_ptr("AnalogBiquadCascade",1,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = Filters::IIR::AnalogBiquadCascade((std::vector< Filters::BiquadSection > const &)*arg1,arg2,arg3,arg4);
  {
    Filters::BiquadSOS * resultptr = new Filters::BiquadSOS((const Filters::BiquadSOS &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogBiquadCascade__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSOS *arg1 = 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  SwigValueWrapper< std::vector< Filters::BiquadSection > > result;
  
  SWIG_check_num_args("Filters::IIR::AnalogBiquadCascade",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Filters::IIR::AnalogBiquadCascade",1,"Filters::BiquadSOS const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::AnalogBiquadCascade",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::AnalogBiquadCascade",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,0))){
    SWIG_fail_ptr("AnalogBiquadCascade",1,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::IIR::AnalogBiquadCascade((std::vector< Filters::BiquadSection > const &)*arg1,arg2,arg3);
  {
    Filters::BiquadSOS * resultptr = new Filters::BiquadSOS((const Filters::BiquadSOS &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogBiquadCascade(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AnalogBiquadCascade__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_AnalogBiquadCascade__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AnalogBiquadCascade'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::AnalogBiquadCascade(Filters::BiquadSOS const &,DspFloatType,DspFloatType,bool)\n"
    "    Filters::IIR::AnalogBiquadCascade(Filters::BiquadSOS const &,DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_ChebyshevH0__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  std::complex< DspFloatType > result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevH0",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevH0",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevH0",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = Filters::IIR::ChebyshevFilters::ChebyshevH0(arg1,arg2);
  {
    std::complex< DspFloatType > * resultptr = new std::complex< DspFloatType >((const std::complex< DspFloatType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevH0__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  std::complex< DspFloatType > result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevH0",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevH0",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = Filters::IIR::ChebyshevFilters::ChebyshevH0(arg1);
  {
    std::complex< DspFloatType > * resultptr = new std::complex< DspFloatType >((const std::complex< DspFloatType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevH0(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_ChebyshevH0__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ChebyshevH0__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ChebyshevH0'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ChebyshevFilters::ChebyshevH0(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevFilters::ChebyshevH0(DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_ChebyshevPole__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  std::complex< DspFloatType > result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevPole",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevPole",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevPole",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevPole",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::IIR::ChebyshevFilters::ChebyshevPole(arg1,arg2,arg3);
  {
    std::complex< DspFloatType > * resultptr = new std::complex< DspFloatType >((const std::complex< DspFloatType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevPole__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  std::complex< DspFloatType > result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevPole",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevPole",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevPole",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = Filters::IIR::ChebyshevFilters::ChebyshevPole(arg1,arg2);
  {
    std::complex< DspFloatType > * resultptr = new std::complex< DspFloatType >((const std::complex< DspFloatType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevPole(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ChebyshevPole__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ChebyshevPole__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ChebyshevPole'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ChebyshevFilters::ChebyshevPole(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevFilters::ChebyshevPole(DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_ChebyshevPoles(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  SwigValueWrapper< std::vector< std::complex< float > > > result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevPoles",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevPoles",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevPoles",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = Filters::IIR::ChebyshevFilters::ChebyshevPoles(arg1,arg2);
  {
    std::vector< std::complex< DspFloatType > > * resultptr = new std::vector< std::complex< DspFloatType > >((const std::vector< std::complex< DspFloatType > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowPassSolver__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  DspFloatType arg2 ;
  SwigValueWrapper< std::vector< Filters::BiquadSection > > result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevILowPassSolver",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevILowPassSolver",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevILowPassSolver",2,"DspFloatType");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = Filters::IIR::ChebyshevFilters::ChebyshevILowPassSolver(arg1,arg2);
  {
    Filters::BiquadSOS * resultptr = new Filters::BiquadSOS((const Filters::BiquadSOS &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowPassSolver__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SwigValueWrapper< std::vector< Filters::BiquadSection > > result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevILowPassSolver",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevILowPassSolver",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = Filters::IIR::ChebyshevFilters::ChebyshevILowPassSolver(arg1);
  {
    Filters::BiquadSOS * resultptr = new Filters::BiquadSOS((const Filters::BiquadSOS &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowPassSolver(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_ChebyshevILowPassSolver__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ChebyshevILowPassSolver__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ChebyshevILowPassSolver'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ChebyshevFilters::ChebyshevILowPassSolver(int,DspFloatType)\n"
    "    Filters::IIR::ChebyshevFilters::ChebyshevILowPassSolver(int)\n");
  lua_error(L);return 0;
}


static int _wrap_ChebyshevILowPassFilter12db_bc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *arg1 = (Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *) 0 ;
  Filters::BiquadTypeI *arg2 = (Filters::BiquadTypeI *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::bc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::bc",1,"Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::bc",2,"Filters::BiquadTypeI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevILowPassFilter12db,0))){
    SWIG_fail_ptr("ChebyshevILowPassFilter12db_bc_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevILowPassFilter12db);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeI,0))){
    SWIG_fail_ptr("ChebyshevILowPassFilter12db_bc_set",2,SWIGTYPE_p_Filters__BiquadTypeI);
  }
  
  if (arg1) (arg1)->bc = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowPassFilter12db_bc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *arg1 = (Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *) 0 ;
  Filters::BiquadTypeI *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::bc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::bc",1,"Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevILowPassFilter12db,0))){
    SWIG_fail_ptr("ChebyshevILowPassFilter12db_bc_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevILowPassFilter12db);
  }
  
  result = (Filters::BiquadTypeI *)& ((arg1)->bc);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeI,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowPassFilter12db_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *arg1 = (Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::Fc",1,"Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevILowPassFilter12db,0))){
    SWIG_fail_ptr("ChebyshevILowPassFilter12db_Fc_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevILowPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowPassFilter12db_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *arg1 = (Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::Fc",1,"Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevILowPassFilter12db,0))){
    SWIG_fail_ptr("ChebyshevILowPassFilter12db_Fc_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevILowPassFilter12db);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowPassFilter12db_Sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *arg1 = (Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::Sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::Sr",1,"Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::Sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevILowPassFilter12db,0))){
    SWIG_fail_ptr("ChebyshevILowPassFilter12db_Sr_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevILowPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowPassFilter12db_Sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *arg1 = (Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::Sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::Sr",1,"Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevILowPassFilter12db,0))){
    SWIG_fail_ptr("ChebyshevILowPassFilter12db_Sr_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevILowPassFilter12db);
  }
  
  result = (DspFloatType) ((arg1)->Sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowPassFilter12db_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *arg1 = (Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::Q",1,"Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevILowPassFilter12db,0))){
    SWIG_fail_ptr("ChebyshevILowPassFilter12db_Q_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevILowPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowPassFilter12db_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *arg1 = (Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::Q",1,"Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevILowPassFilter12db,0))){
    SWIG_fail_ptr("ChebyshevILowPassFilter12db_Q_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevILowPassFilter12db);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ChebyshevILowPassFilter12db(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::ChebyshevILowPassFilter12db",0,0)
  result = (Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *)new Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevILowPassFilter12db,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowPassFilter12db_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *arg1 = (Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::setQ",1,"Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevILowPassFilter12db,0))){
    SWIG_fail_ptr("ChebyshevILowPassFilter12db_setQ",1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevILowPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowPassFilter12db_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *arg1 = (Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::setCutoff",1,"Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::setCutoff",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevILowPassFilter12db,0))){
    SWIG_fail_ptr("ChebyshevILowPassFilter12db_setCutoff",1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevILowPassFilter12db);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowPassFilter12db_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *arg1 = (Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::setPort",1,"Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevILowPassFilter12db,0))){
    SWIG_fail_ptr("ChebyshevILowPassFilter12db_setPort",1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevILowPassFilter12db);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevILowPassFilter12db_Tick(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *arg1 = (Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::Tick",1,"Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevILowPassFilter12db,0))){
    SWIG_fail_ptr("ChebyshevILowPassFilter12db_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevILowPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ChebyshevILowPassFilter12db(void *obj) {
Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *arg1 = (Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *) obj;
delete arg1;
}
static int _proxy__wrap_new_ChebyshevILowPassFilter12db(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ChebyshevILowPassFilter12db);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ChebyshevILowPassFilter12db_attributes[] = {
    { "bc", _wrap_ChebyshevILowPassFilter12db_bc_get, _wrap_ChebyshevILowPassFilter12db_bc_set },
    { "Fc", _wrap_ChebyshevILowPassFilter12db_Fc_get, _wrap_ChebyshevILowPassFilter12db_Fc_set },
    { "Sr", _wrap_ChebyshevILowPassFilter12db_Sr_get, _wrap_ChebyshevILowPassFilter12db_Sr_set },
    { "Q", _wrap_ChebyshevILowPassFilter12db_Q_get, _wrap_ChebyshevILowPassFilter12db_Q_set },
    {0,0,0}
};
static swig_lua_method swig_ChebyshevILowPassFilter12db_methods[]= {
    { "setQ", _wrap_ChebyshevILowPassFilter12db_setQ},
    { "setCutoff", _wrap_ChebyshevILowPassFilter12db_setCutoff},
    { "setPort", _wrap_ChebyshevILowPassFilter12db_setPort},
    { "Tick", _wrap_ChebyshevILowPassFilter12db_Tick},
    {0,0}
};
static swig_lua_method swig_ChebyshevILowPassFilter12db_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ChebyshevILowPassFilter12db_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ChebyshevILowPassFilter12db_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_Q", Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::PORT_Q)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ChebyshevILowPassFilter12db_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ChebyshevILowPassFilter12db_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ChebyshevILowPassFilter12db_Sf_SwigStatic = {
    "ChebyshevILowPassFilter12db",
    swig_ChebyshevILowPassFilter12db_Sf_SwigStatic_methods,
    swig_ChebyshevILowPassFilter12db_Sf_SwigStatic_attributes,
    swig_ChebyshevILowPassFilter12db_Sf_SwigStatic_constants,
    swig_ChebyshevILowPassFilter12db_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ChebyshevILowPassFilter12db_bases[] = {0};
static const char *swig_ChebyshevILowPassFilter12db_base_names[] = {0};
static swig_lua_class _wrap_class_ChebyshevILowPassFilter12db = { "ChebyshevILowPassFilter12db", "ChebyshevILowPassFilter12db", &SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevILowPassFilter12db,_proxy__wrap_new_ChebyshevILowPassFilter12db, swig_delete_ChebyshevILowPassFilter12db, swig_ChebyshevILowPassFilter12db_methods, swig_ChebyshevILowPassFilter12db_attributes, &swig_ChebyshevILowPassFilter12db_Sf_SwigStatic, swig_ChebyshevILowPassFilter12db_meta, swig_ChebyshevILowPassFilter12db_bases, swig_ChebyshevILowPassFilter12db_base_names };

static int _wrap_Chebyshev2Zero__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  std::complex< DspFloatType > result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::Chebyshev2Zero",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::Chebyshev2Zero",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::Chebyshev2Zero",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::Chebyshev2Zero",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::IIR::ChebyshevFilters::Chebyshev2Zero(arg1,arg2,arg3);
  {
    std::complex< DspFloatType > * resultptr = new std::complex< DspFloatType >((const std::complex< DspFloatType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Zero__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  std::complex< DspFloatType > result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::Chebyshev2Zero",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::Chebyshev2Zero",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::Chebyshev2Zero",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = Filters::IIR::ChebyshevFilters::Chebyshev2Zero(arg1,arg2);
  {
    std::complex< DspFloatType > * resultptr = new std::complex< DspFloatType >((const std::complex< DspFloatType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Zero(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Chebyshev2Zero__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Chebyshev2Zero__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Chebyshev2Zero'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ChebyshevFilters::Chebyshev2Zero(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevFilters::Chebyshev2Zero(DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_Chebyshev2Pole__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  std::complex< DspFloatType > result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::Chebyshev2Pole",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::Chebyshev2Pole",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::Chebyshev2Pole",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::Chebyshev2Pole",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::IIR::ChebyshevFilters::Chebyshev2Pole(arg1,arg2,arg3);
  {
    std::complex< DspFloatType > * resultptr = new std::complex< DspFloatType >((const std::complex< DspFloatType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Pole__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  std::complex< DspFloatType > result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::Chebyshev2Pole",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::Chebyshev2Pole",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::Chebyshev2Pole",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = Filters::IIR::ChebyshevFilters::Chebyshev2Pole(arg1,arg2);
  {
    std::complex< DspFloatType > * resultptr = new std::complex< DspFloatType >((const std::complex< DspFloatType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Pole(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Chebyshev2Pole__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Chebyshev2Pole__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Chebyshev2Pole'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ChebyshevFilters::Chebyshev2Pole(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevFilters::Chebyshev2Pole(DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_Chebyshev2Zeros(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  SwigValueWrapper< std::vector< std::complex< float > > > result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::Chebyshev2Zeros",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::Chebyshev2Zeros",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::Chebyshev2Zeros",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = Filters::IIR::ChebyshevFilters::Chebyshev2Zeros(arg1,arg2);
  {
    std::vector< std::complex< DspFloatType > > * resultptr = new std::vector< std::complex< DspFloatType > >((const std::vector< std::complex< DspFloatType > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Poles(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  SwigValueWrapper< std::vector< std::complex< float > > > result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::Chebyshev2Poles",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::Chebyshev2Poles",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::Chebyshev2Poles",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = Filters::IIR::ChebyshevFilters::Chebyshev2Poles(arg1,arg2);
  {
    std::vector< std::complex< DspFloatType > > * resultptr = new std::vector< std::complex< DspFloatType > >((const std::vector< std::complex< DspFloatType > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowPassSolver__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  DspFloatType arg2 ;
  SwigValueWrapper< std::vector< Filters::BiquadSection > > result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassSolver",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassSolver",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassSolver",2,"DspFloatType");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = Filters::IIR::ChebyshevFilters::ChebyshevIILowPassSolver(arg1,arg2);
  {
    Filters::BiquadSOS * resultptr = new Filters::BiquadSOS((const Filters::BiquadSOS &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowPassSolver__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SwigValueWrapper< std::vector< Filters::BiquadSection > > result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassSolver",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassSolver",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = Filters::IIR::ChebyshevFilters::ChebyshevIILowPassSolver(arg1);
  {
    Filters::BiquadSOS * resultptr = new Filters::BiquadSOS((const Filters::BiquadSOS &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowPassSolver(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_ChebyshevIILowPassSolver__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ChebyshevIILowPassSolver__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ChebyshevIILowPassSolver'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ChebyshevFilters::ChebyshevIILowPassSolver(int,DspFloatType)\n"
    "    Filters::IIR::ChebyshevFilters::ChebyshevIILowPassSolver(int)\n");
  lua_error(L);return 0;
}


static int _wrap_ChebyshevIILowPassFilter12db_bc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *arg1 = (Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *) 0 ;
  Filters::BiquadTypeI *arg2 = (Filters::BiquadTypeI *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::bc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::bc",1,"Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::bc",2,"Filters::BiquadTypeI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevIILowPassFilter12db,0))){
    SWIG_fail_ptr("ChebyshevIILowPassFilter12db_bc_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevIILowPassFilter12db);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeI,0))){
    SWIG_fail_ptr("ChebyshevIILowPassFilter12db_bc_set",2,SWIGTYPE_p_Filters__BiquadTypeI);
  }
  
  if (arg1) (arg1)->bc = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowPassFilter12db_bc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *arg1 = (Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *) 0 ;
  Filters::BiquadTypeI *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::bc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::bc",1,"Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevIILowPassFilter12db,0))){
    SWIG_fail_ptr("ChebyshevIILowPassFilter12db_bc_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevIILowPassFilter12db);
  }
  
  result = (Filters::BiquadTypeI *)& ((arg1)->bc);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeI,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowPassFilter12db_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *arg1 = (Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::Fc",1,"Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevIILowPassFilter12db,0))){
    SWIG_fail_ptr("ChebyshevIILowPassFilter12db_Fc_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevIILowPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowPassFilter12db_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *arg1 = (Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::Fc",1,"Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevIILowPassFilter12db,0))){
    SWIG_fail_ptr("ChebyshevIILowPassFilter12db_Fc_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevIILowPassFilter12db);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowPassFilter12db_Sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *arg1 = (Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::Sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::Sr",1,"Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::Sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevIILowPassFilter12db,0))){
    SWIG_fail_ptr("ChebyshevIILowPassFilter12db_Sr_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevIILowPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowPassFilter12db_Sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *arg1 = (Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::Sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::Sr",1,"Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevIILowPassFilter12db,0))){
    SWIG_fail_ptr("ChebyshevIILowPassFilter12db_Sr_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevIILowPassFilter12db);
  }
  
  result = (DspFloatType) ((arg1)->Sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowPassFilter12db_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *arg1 = (Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::Q",1,"Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevIILowPassFilter12db,0))){
    SWIG_fail_ptr("ChebyshevIILowPassFilter12db_Q_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevIILowPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowPassFilter12db_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *arg1 = (Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::Q",1,"Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevIILowPassFilter12db,0))){
    SWIG_fail_ptr("ChebyshevIILowPassFilter12db_Q_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevIILowPassFilter12db);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ChebyshevIILowPassFilter12db(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::ChebyshevIILowPassFilter12db",0,0)
  result = (Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *)new Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevIILowPassFilter12db,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowPassFilter12db_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *arg1 = (Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::setQ",1,"Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevIILowPassFilter12db,0))){
    SWIG_fail_ptr("ChebyshevIILowPassFilter12db_setQ",1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevIILowPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowPassFilter12db_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *arg1 = (Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::setCutoff",1,"Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::setCutoff",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevIILowPassFilter12db,0))){
    SWIG_fail_ptr("ChebyshevIILowPassFilter12db_setCutoff",1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevIILowPassFilter12db);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowPassFilter12db_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *arg1 = (Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::setPort",1,"Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevIILowPassFilter12db,0))){
    SWIG_fail_ptr("ChebyshevIILowPassFilter12db_setPort",1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevIILowPassFilter12db);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChebyshevIILowPassFilter12db_Tick(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *arg1 = (Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::Tick",1,"Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevIILowPassFilter12db,0))){
    SWIG_fail_ptr("ChebyshevIILowPassFilter12db_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevIILowPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ChebyshevIILowPassFilter12db(void *obj) {
Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *arg1 = (Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *) obj;
delete arg1;
}
static int _proxy__wrap_new_ChebyshevIILowPassFilter12db(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ChebyshevIILowPassFilter12db);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ChebyshevIILowPassFilter12db_attributes[] = {
    { "bc", _wrap_ChebyshevIILowPassFilter12db_bc_get, _wrap_ChebyshevIILowPassFilter12db_bc_set },
    { "Fc", _wrap_ChebyshevIILowPassFilter12db_Fc_get, _wrap_ChebyshevIILowPassFilter12db_Fc_set },
    { "Sr", _wrap_ChebyshevIILowPassFilter12db_Sr_get, _wrap_ChebyshevIILowPassFilter12db_Sr_set },
    { "Q", _wrap_ChebyshevIILowPassFilter12db_Q_get, _wrap_ChebyshevIILowPassFilter12db_Q_set },
    {0,0,0}
};
static swig_lua_method swig_ChebyshevIILowPassFilter12db_methods[]= {
    { "setQ", _wrap_ChebyshevIILowPassFilter12db_setQ},
    { "setCutoff", _wrap_ChebyshevIILowPassFilter12db_setCutoff},
    { "setPort", _wrap_ChebyshevIILowPassFilter12db_setPort},
    { "Tick", _wrap_ChebyshevIILowPassFilter12db_Tick},
    {0,0}
};
static swig_lua_method swig_ChebyshevIILowPassFilter12db_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ChebyshevIILowPassFilter12db_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ChebyshevIILowPassFilter12db_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_Q", Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::PORT_Q)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ChebyshevIILowPassFilter12db_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ChebyshevIILowPassFilter12db_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ChebyshevIILowPassFilter12db_Sf_SwigStatic = {
    "ChebyshevIILowPassFilter12db",
    swig_ChebyshevIILowPassFilter12db_Sf_SwigStatic_methods,
    swig_ChebyshevIILowPassFilter12db_Sf_SwigStatic_attributes,
    swig_ChebyshevIILowPassFilter12db_Sf_SwigStatic_constants,
    swig_ChebyshevIILowPassFilter12db_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ChebyshevIILowPassFilter12db_bases[] = {0};
static const char *swig_ChebyshevIILowPassFilter12db_base_names[] = {0};
static swig_lua_class _wrap_class_ChebyshevIILowPassFilter12db = { "ChebyshevIILowPassFilter12db", "ChebyshevIILowPassFilter12db", &SWIGTYPE_p_Filters__IIR__ChebyshevFilters__ChebyshevIILowPassFilter12db,_proxy__wrap_new_ChebyshevIILowPassFilter12db, swig_delete_ChebyshevIILowPassFilter12db, swig_ChebyshevIILowPassFilter12db_methods, swig_ChebyshevIILowPassFilter12db_attributes, &swig_ChebyshevIILowPassFilter12db_Sf_SwigStatic, swig_ChebyshevIILowPassFilter12db_meta, swig_ChebyshevIILowPassFilter12db_bases, swig_ChebyshevIILowPassFilter12db_base_names };

static int _wrap_ZolzerBiquadFilter_filter_type_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) 0 ;
  Filters::FilterBase::FilterType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::filter_type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::filter_type",1,"Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::filter_type",2,"Filters::FilterBase::FilterType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter,0))){
    SWIG_fail_ptr("ZolzerBiquadFilter_filter_type_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter);
  }
  
  arg2 = (Filters::FilterBase::FilterType)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->filter_type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquadFilter_filter_type_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) 0 ;
  Filters::FilterBase::FilterType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::filter_type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::filter_type",1,"Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter,0))){
    SWIG_fail_ptr("ZolzerBiquadFilter_filter_type_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter);
  }
  
  result = (Filters::FilterBase::FilterType) ((arg1)->filter_type);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquadFilter_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::Fc",1,"Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter,0))){
    SWIG_fail_ptr("ZolzerBiquadFilter_Fc_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquadFilter_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::Fc",1,"Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter,0))){
    SWIG_fail_ptr("ZolzerBiquadFilter_Fc_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquadFilter_Fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::Fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::Fs",1,"Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::Fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter,0))){
    SWIG_fail_ptr("ZolzerBiquadFilter_Fs_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquadFilter_Fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::Fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::Fs",1,"Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter,0))){
    SWIG_fail_ptr("ZolzerBiquadFilter_Fs_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquadFilter_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::Q",1,"Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter,0))){
    SWIG_fail_ptr("ZolzerBiquadFilter_Q_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquadFilter_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::Q",1,"Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter,0))){
    SWIG_fail_ptr("ZolzerBiquadFilter_Q_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquadFilter_G_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::G",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::G",1,"Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::G",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter,0))){
    SWIG_fail_ptr("ZolzerBiquadFilter_G_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->G = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquadFilter_G_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::G",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::G",1,"Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter,0))){
    SWIG_fail_ptr("ZolzerBiquadFilter_G_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter);
  }
  
  result = (DspFloatType) ((arg1)->G);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquadFilter_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::R",1,"Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter,0))){
    SWIG_fail_ptr("ZolzerBiquadFilter_R_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquadFilter_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::R",1,"Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter,0))){
    SWIG_fail_ptr("ZolzerBiquadFilter_R_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerBiquadFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterBase::FilterType arg1 ;
  Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::ZolzerBiquadFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::ZolzerBiquadFilter",1,"Filters::FilterBase::FilterType");
  arg1 = (Filters::FilterBase::FilterType)(int)lua_tonumber(L, 1);
  result = (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *)new Filters::IIR::ZolzerFilters::ZolzerBiquadFilter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerBiquadFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::ZolzerBiquadFilter",0,0)
  result = (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *)new Filters::IIR::ZolzerFilters::ZolzerBiquadFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerBiquadFilter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterBase::FilterType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::ZolzerBiquadFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::ZolzerBiquadFilter",1,"Filters::FilterBase::FilterType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::ZolzerBiquadFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::ZolzerBiquadFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::ZolzerBiquadFilter",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::ZolzerBiquadFilter",5,"DspFloatType");
  arg1 = (Filters::FilterBase::FilterType)(int)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *)new Filters::IIR::ZolzerFilters::ZolzerBiquadFilter(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerBiquadFilter__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterBase::FilterType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::ZolzerBiquadFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::ZolzerBiquadFilter",1,"Filters::FilterBase::FilterType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::ZolzerBiquadFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::ZolzerBiquadFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::ZolzerBiquadFilter",4,"DspFloatType");
  arg1 = (Filters::FilterBase::FilterType)(int)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *)new Filters::IIR::ZolzerFilters::ZolzerBiquadFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerBiquadFilter__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterBase::FilterType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::ZolzerBiquadFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::ZolzerBiquadFilter",1,"Filters::FilterBase::FilterType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::ZolzerBiquadFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::ZolzerBiquadFilter",3,"DspFloatType");
  arg1 = (Filters::FilterBase::FilterType)(int)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *)new Filters::IIR::ZolzerFilters::ZolzerBiquadFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerBiquadFilter(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ZolzerBiquadFilter__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ZolzerBiquadFilter__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_ZolzerBiquadFilter__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ZolzerBiquadFilter__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_ZolzerBiquadFilter__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ZolzerBiquadFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::ZolzerBiquadFilter(Filters::FilterBase::FilterType)\n"
    "    Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::ZolzerBiquadFilter()\n"
    "    Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::ZolzerBiquadFilter(Filters::FilterBase::FilterType,DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::ZolzerBiquadFilter(Filters::FilterBase::FilterType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::ZolzerBiquadFilter(Filters::FilterBase::FilterType,DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_ZolzerBiquadFilter_setCoefficients__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::setCoefficients",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::setCoefficients",1,"Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::setCoefficients",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::setCoefficients",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::setCoefficients",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter,0))){
    SWIG_fail_ptr("ZolzerBiquadFilter_setCoefficients",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  (arg1)->setCoefficients(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquadFilter_setCoefficients__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::setCoefficients",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::setCoefficients",1,"Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::setCoefficients",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::setCoefficients",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter,0))){
    SWIG_fail_ptr("ZolzerBiquadFilter_setCoefficients",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setCoefficients(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquadFilter_setCoefficients(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ZolzerBiquadFilter_setCoefficients__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ZolzerBiquadFilter_setCoefficients__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ZolzerBiquadFilter_setCoefficients'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::setCoefficients(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::setCoefficients(DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_ZolzerBiquadFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::setCutoff",1,"Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter,0))){
    SWIG_fail_ptr("ZolzerBiquadFilter_setCutoff",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquadFilter_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::setQ",1,"Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter,0))){
    SWIG_fail_ptr("ZolzerBiquadFilter_setQ",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquadFilter_setRadius(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::setRadius",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::setRadius",1,"Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::setRadius",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter,0))){
    SWIG_fail_ptr("ZolzerBiquadFilter_setRadius",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setRadius(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquadFilter_setGain(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::setGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::setGain",1,"Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBiquadFilter::setGain",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter,0))){
    SWIG_fail_ptr("ZolzerBiquadFilter_setGain",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setGain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ZolzerBiquadFilter(void *obj) {
Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_ZolzerBiquadFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ZolzerBiquadFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ZolzerBiquadFilter_attributes[] = {
    { "filter_type", _wrap_ZolzerBiquadFilter_filter_type_get, _wrap_ZolzerBiquadFilter_filter_type_set },
    { "Fc", _wrap_ZolzerBiquadFilter_Fc_get, _wrap_ZolzerBiquadFilter_Fc_set },
    { "Fs", _wrap_ZolzerBiquadFilter_Fs_get, _wrap_ZolzerBiquadFilter_Fs_set },
    { "Q", _wrap_ZolzerBiquadFilter_Q_get, _wrap_ZolzerBiquadFilter_Q_set },
    { "G", _wrap_ZolzerBiquadFilter_G_get, _wrap_ZolzerBiquadFilter_G_set },
    { "R", _wrap_ZolzerBiquadFilter_R_get, _wrap_ZolzerBiquadFilter_R_set },
    {0,0,0}
};
static swig_lua_method swig_ZolzerBiquadFilter_methods[]= {
    { "setCoefficients", _wrap_ZolzerBiquadFilter_setCoefficients},
    { "setCutoff", _wrap_ZolzerBiquadFilter_setCutoff},
    { "setQ", _wrap_ZolzerBiquadFilter_setQ},
    { "setRadius", _wrap_ZolzerBiquadFilter_setRadius},
    { "setGain", _wrap_ZolzerBiquadFilter_setGain},
    {0,0}
};
static swig_lua_method swig_ZolzerBiquadFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ZolzerBiquadFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ZolzerBiquadFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ZolzerBiquadFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ZolzerBiquadFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ZolzerBiquadFilter_Sf_SwigStatic = {
    "ZolzerBiquadFilter",
    swig_ZolzerBiquadFilter_Sf_SwigStatic_methods,
    swig_ZolzerBiquadFilter_Sf_SwigStatic_attributes,
    swig_ZolzerBiquadFilter_Sf_SwigStatic_constants,
    swig_ZolzerBiquadFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ZolzerBiquadFilter_bases[] = {0,0};
static const char *swig_ZolzerBiquadFilter_base_names[] = {"Filters::BiquadTransposedTypeII *",0};
static swig_lua_class _wrap_class_ZolzerBiquadFilter = { "ZolzerBiquadFilter", "ZolzerBiquadFilter", &SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter,_proxy__wrap_new_ZolzerBiquadFilter, swig_delete_ZolzerBiquadFilter, swig_ZolzerBiquadFilter_methods, swig_ZolzerBiquadFilter_attributes, &swig_ZolzerBiquadFilter_Sf_SwigStatic, swig_ZolzerBiquadFilter_meta, swig_ZolzerBiquadFilter_bases, swig_ZolzerBiquadFilter_base_names };

static int _wrap_ZolzerLowPassFilter_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::Fc",1,"Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter,0))){
    SWIG_fail_ptr("ZolzerLowPassFilter_Fc_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowPassFilter_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::Fc",1,"Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter,0))){
    SWIG_fail_ptr("ZolzerLowPassFilter_Fc_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowPassFilter_Fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::Fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::Fs",1,"Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::Fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter,0))){
    SWIG_fail_ptr("ZolzerLowPassFilter_Fs_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowPassFilter_Fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::Fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::Fs",1,"Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter,0))){
    SWIG_fail_ptr("ZolzerLowPassFilter_Fs_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowPassFilter_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::Q",1,"Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter,0))){
    SWIG_fail_ptr("ZolzerLowPassFilter_Q_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowPassFilter_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::Q",1,"Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter,0))){
    SWIG_fail_ptr("ZolzerLowPassFilter_Q_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowPassFilter_G_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::G",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::G",1,"Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::G",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter,0))){
    SWIG_fail_ptr("ZolzerLowPassFilter_G_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->G = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowPassFilter_G_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::G",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::G",1,"Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter,0))){
    SWIG_fail_ptr("ZolzerLowPassFilter_G_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->G);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowPassFilter_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::R",1,"Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter,0))){
    SWIG_fail_ptr("ZolzerLowPassFilter_R_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowPassFilter_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::R",1,"Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter,0))){
    SWIG_fail_ptr("ZolzerLowPassFilter_R_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerLowPassFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::ZolzerLowPassFilter",0,0)
  result = (Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *)new Filters::IIR::ZolzerFilters::ZolzerLowPassFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerLowPassFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::ZolzerLowPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::ZolzerLowPassFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::ZolzerLowPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::ZolzerLowPassFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::ZolzerLowPassFilter",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *)new Filters::IIR::ZolzerFilters::ZolzerLowPassFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerLowPassFilter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::ZolzerLowPassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::ZolzerLowPassFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::ZolzerLowPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::ZolzerLowPassFilter",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *)new Filters::IIR::ZolzerFilters::ZolzerLowPassFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerLowPassFilter__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::ZolzerLowPassFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::ZolzerLowPassFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::ZolzerLowPassFilter",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *)new Filters::IIR::ZolzerFilters::ZolzerLowPassFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerLowPassFilter(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ZolzerLowPassFilter__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ZolzerLowPassFilter__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_ZolzerLowPassFilter__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ZolzerLowPassFilter__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ZolzerLowPassFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::ZolzerLowPassFilter()\n"
    "    Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::ZolzerLowPassFilter(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::ZolzerLowPassFilter(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ZolzerFilters::ZolzerLowPassFilter::ZolzerLowPassFilter(DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_ZolzerLowPassFilter(void *obj) {
Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_ZolzerLowPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ZolzerLowPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ZolzerLowPassFilter_attributes[] = {
    { "Fc", _wrap_ZolzerLowPassFilter_Fc_get, _wrap_ZolzerLowPassFilter_Fc_set },
    { "Fs", _wrap_ZolzerLowPassFilter_Fs_get, _wrap_ZolzerLowPassFilter_Fs_set },
    { "Q", _wrap_ZolzerLowPassFilter_Q_get, _wrap_ZolzerLowPassFilter_Q_set },
    { "G", _wrap_ZolzerLowPassFilter_G_get, _wrap_ZolzerLowPassFilter_G_set },
    { "R", _wrap_ZolzerLowPassFilter_R_get, _wrap_ZolzerLowPassFilter_R_set },
    {0,0,0}
};
static swig_lua_method swig_ZolzerLowPassFilter_methods[]= {
    {0,0}
};
static swig_lua_method swig_ZolzerLowPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ZolzerLowPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ZolzerLowPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ZolzerLowPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ZolzerLowPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ZolzerLowPassFilter_Sf_SwigStatic = {
    "ZolzerLowPassFilter",
    swig_ZolzerLowPassFilter_Sf_SwigStatic_methods,
    swig_ZolzerLowPassFilter_Sf_SwigStatic_attributes,
    swig_ZolzerLowPassFilter_Sf_SwigStatic_constants,
    swig_ZolzerLowPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ZolzerLowPassFilter_bases[] = {0,0};
static const char *swig_ZolzerLowPassFilter_base_names[] = {"Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *",0};
static swig_lua_class _wrap_class_ZolzerLowPassFilter = { "ZolzerLowPassFilter", "ZolzerLowPassFilter", &SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter,_proxy__wrap_new_ZolzerLowPassFilter, swig_delete_ZolzerLowPassFilter, swig_ZolzerLowPassFilter_methods, swig_ZolzerLowPassFilter_attributes, &swig_ZolzerLowPassFilter_Sf_SwigStatic, swig_ZolzerLowPassFilter_meta, swig_ZolzerLowPassFilter_bases, swig_ZolzerLowPassFilter_base_names };

static int _wrap_ZolzerHighPassFilter_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::Fc",1,"Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter,0))){
    SWIG_fail_ptr("ZolzerHighPassFilter_Fc_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighPassFilter_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::Fc",1,"Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter,0))){
    SWIG_fail_ptr("ZolzerHighPassFilter_Fc_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighPassFilter_Fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::Fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::Fs",1,"Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::Fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter,0))){
    SWIG_fail_ptr("ZolzerHighPassFilter_Fs_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighPassFilter_Fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::Fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::Fs",1,"Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter,0))){
    SWIG_fail_ptr("ZolzerHighPassFilter_Fs_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighPassFilter_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::Q",1,"Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter,0))){
    SWIG_fail_ptr("ZolzerHighPassFilter_Q_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighPassFilter_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::Q",1,"Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter,0))){
    SWIG_fail_ptr("ZolzerHighPassFilter_Q_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighPassFilter_G_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::G",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::G",1,"Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::G",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter,0))){
    SWIG_fail_ptr("ZolzerHighPassFilter_G_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->G = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighPassFilter_G_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::G",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::G",1,"Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter,0))){
    SWIG_fail_ptr("ZolzerHighPassFilter_G_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->G);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighPassFilter_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::R",1,"Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter,0))){
    SWIG_fail_ptr("ZolzerHighPassFilter_R_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighPassFilter_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::R",1,"Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter,0))){
    SWIG_fail_ptr("ZolzerHighPassFilter_R_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerHighPassFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::ZolzerHighPassFilter",0,0)
  result = (Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *)new Filters::IIR::ZolzerFilters::ZolzerHighPassFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerHighPassFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::ZolzerHighPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::ZolzerHighPassFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::ZolzerHighPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::ZolzerHighPassFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::ZolzerHighPassFilter",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *)new Filters::IIR::ZolzerFilters::ZolzerHighPassFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerHighPassFilter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::ZolzerHighPassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::ZolzerHighPassFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::ZolzerHighPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::ZolzerHighPassFilter",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *)new Filters::IIR::ZolzerFilters::ZolzerHighPassFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerHighPassFilter__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::ZolzerHighPassFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::ZolzerHighPassFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::ZolzerHighPassFilter",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *)new Filters::IIR::ZolzerFilters::ZolzerHighPassFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerHighPassFilter(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ZolzerHighPassFilter__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ZolzerHighPassFilter__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_ZolzerHighPassFilter__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ZolzerHighPassFilter__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ZolzerHighPassFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::ZolzerHighPassFilter()\n"
    "    Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::ZolzerHighPassFilter(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::ZolzerHighPassFilter(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ZolzerFilters::ZolzerHighPassFilter::ZolzerHighPassFilter(DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_ZolzerHighPassFilter(void *obj) {
Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_ZolzerHighPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ZolzerHighPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ZolzerHighPassFilter_attributes[] = {
    { "Fc", _wrap_ZolzerHighPassFilter_Fc_get, _wrap_ZolzerHighPassFilter_Fc_set },
    { "Fs", _wrap_ZolzerHighPassFilter_Fs_get, _wrap_ZolzerHighPassFilter_Fs_set },
    { "Q", _wrap_ZolzerHighPassFilter_Q_get, _wrap_ZolzerHighPassFilter_Q_set },
    { "G", _wrap_ZolzerHighPassFilter_G_get, _wrap_ZolzerHighPassFilter_G_set },
    { "R", _wrap_ZolzerHighPassFilter_R_get, _wrap_ZolzerHighPassFilter_R_set },
    {0,0,0}
};
static swig_lua_method swig_ZolzerHighPassFilter_methods[]= {
    {0,0}
};
static swig_lua_method swig_ZolzerHighPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ZolzerHighPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ZolzerHighPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ZolzerHighPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ZolzerHighPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ZolzerHighPassFilter_Sf_SwigStatic = {
    "ZolzerHighPassFilter",
    swig_ZolzerHighPassFilter_Sf_SwigStatic_methods,
    swig_ZolzerHighPassFilter_Sf_SwigStatic_attributes,
    swig_ZolzerHighPassFilter_Sf_SwigStatic_constants,
    swig_ZolzerHighPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ZolzerHighPassFilter_bases[] = {0,0};
static const char *swig_ZolzerHighPassFilter_base_names[] = {"Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *",0};
static swig_lua_class _wrap_class_ZolzerHighPassFilter = { "ZolzerHighPassFilter", "ZolzerHighPassFilter", &SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter,_proxy__wrap_new_ZolzerHighPassFilter, swig_delete_ZolzerHighPassFilter, swig_ZolzerHighPassFilter_methods, swig_ZolzerHighPassFilter_attributes, &swig_ZolzerHighPassFilter_Sf_SwigStatic, swig_ZolzerHighPassFilter_meta, swig_ZolzerHighPassFilter_bases, swig_ZolzerHighPassFilter_base_names };

static int _wrap_ZolzerAllPassFilter_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::Fc",1,"Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter,0))){
    SWIG_fail_ptr("ZolzerAllPassFilter_Fc_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerAllPassFilter_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::Fc",1,"Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter,0))){
    SWIG_fail_ptr("ZolzerAllPassFilter_Fc_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerAllPassFilter_Fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::Fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::Fs",1,"Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::Fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter,0))){
    SWIG_fail_ptr("ZolzerAllPassFilter_Fs_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerAllPassFilter_Fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::Fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::Fs",1,"Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter,0))){
    SWIG_fail_ptr("ZolzerAllPassFilter_Fs_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerAllPassFilter_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::Q",1,"Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter,0))){
    SWIG_fail_ptr("ZolzerAllPassFilter_Q_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerAllPassFilter_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::Q",1,"Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter,0))){
    SWIG_fail_ptr("ZolzerAllPassFilter_Q_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerAllPassFilter_G_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::G",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::G",1,"Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::G",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter,0))){
    SWIG_fail_ptr("ZolzerAllPassFilter_G_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->G = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerAllPassFilter_G_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::G",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::G",1,"Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter,0))){
    SWIG_fail_ptr("ZolzerAllPassFilter_G_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->G);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerAllPassFilter_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::R",1,"Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter,0))){
    SWIG_fail_ptr("ZolzerAllPassFilter_R_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerAllPassFilter_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::R",1,"Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter,0))){
    SWIG_fail_ptr("ZolzerAllPassFilter_R_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerAllPassFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::ZolzerAllPassFilter",0,0)
  result = (Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *)new Filters::IIR::ZolzerFilters::ZolzerAllPassFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerAllPassFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::ZolzerAllPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::ZolzerAllPassFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::ZolzerAllPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::ZolzerAllPassFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::ZolzerAllPassFilter",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *)new Filters::IIR::ZolzerFilters::ZolzerAllPassFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerAllPassFilter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::ZolzerAllPassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::ZolzerAllPassFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::ZolzerAllPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::ZolzerAllPassFilter",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *)new Filters::IIR::ZolzerFilters::ZolzerAllPassFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerAllPassFilter__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::ZolzerAllPassFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::ZolzerAllPassFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::ZolzerAllPassFilter",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *)new Filters::IIR::ZolzerFilters::ZolzerAllPassFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerAllPassFilter(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ZolzerAllPassFilter__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ZolzerAllPassFilter__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_ZolzerAllPassFilter__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ZolzerAllPassFilter__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ZolzerAllPassFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::ZolzerAllPassFilter()\n"
    "    Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::ZolzerAllPassFilter(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::ZolzerAllPassFilter(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ZolzerFilters::ZolzerAllPassFilter::ZolzerAllPassFilter(DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_ZolzerAllPassFilter(void *obj) {
Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_ZolzerAllPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ZolzerAllPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ZolzerAllPassFilter_attributes[] = {
    { "Fc", _wrap_ZolzerAllPassFilter_Fc_get, _wrap_ZolzerAllPassFilter_Fc_set },
    { "Fs", _wrap_ZolzerAllPassFilter_Fs_get, _wrap_ZolzerAllPassFilter_Fs_set },
    { "Q", _wrap_ZolzerAllPassFilter_Q_get, _wrap_ZolzerAllPassFilter_Q_set },
    { "G", _wrap_ZolzerAllPassFilter_G_get, _wrap_ZolzerAllPassFilter_G_set },
    { "R", _wrap_ZolzerAllPassFilter_R_get, _wrap_ZolzerAllPassFilter_R_set },
    {0,0,0}
};
static swig_lua_method swig_ZolzerAllPassFilter_methods[]= {
    {0,0}
};
static swig_lua_method swig_ZolzerAllPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ZolzerAllPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ZolzerAllPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ZolzerAllPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ZolzerAllPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ZolzerAllPassFilter_Sf_SwigStatic = {
    "ZolzerAllPassFilter",
    swig_ZolzerAllPassFilter_Sf_SwigStatic_methods,
    swig_ZolzerAllPassFilter_Sf_SwigStatic_attributes,
    swig_ZolzerAllPassFilter_Sf_SwigStatic_constants,
    swig_ZolzerAllPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ZolzerAllPassFilter_bases[] = {0,0};
static const char *swig_ZolzerAllPassFilter_base_names[] = {"Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *",0};
static swig_lua_class _wrap_class_ZolzerAllPassFilter = { "ZolzerAllPassFilter", "ZolzerAllPassFilter", &SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter,_proxy__wrap_new_ZolzerAllPassFilter, swig_delete_ZolzerAllPassFilter, swig_ZolzerAllPassFilter_methods, swig_ZolzerAllPassFilter_attributes, &swig_ZolzerAllPassFilter_Sf_SwigStatic, swig_ZolzerAllPassFilter_meta, swig_ZolzerAllPassFilter_bases, swig_ZolzerAllPassFilter_base_names };

static int _wrap_ZolzerLowPass1pFilter_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::Fc",1,"Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter,0))){
    SWIG_fail_ptr("ZolzerLowPass1pFilter_Fc_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowPass1pFilter_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::Fc",1,"Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter,0))){
    SWIG_fail_ptr("ZolzerLowPass1pFilter_Fc_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowPass1pFilter_Fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::Fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::Fs",1,"Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::Fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter,0))){
    SWIG_fail_ptr("ZolzerLowPass1pFilter_Fs_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowPass1pFilter_Fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::Fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::Fs",1,"Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter,0))){
    SWIG_fail_ptr("ZolzerLowPass1pFilter_Fs_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowPass1pFilter_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::Q",1,"Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter,0))){
    SWIG_fail_ptr("ZolzerLowPass1pFilter_Q_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowPass1pFilter_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::Q",1,"Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter,0))){
    SWIG_fail_ptr("ZolzerLowPass1pFilter_Q_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowPass1pFilter_G_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::G",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::G",1,"Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::G",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter,0))){
    SWIG_fail_ptr("ZolzerLowPass1pFilter_G_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->G = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowPass1pFilter_G_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::G",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::G",1,"Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter,0))){
    SWIG_fail_ptr("ZolzerLowPass1pFilter_G_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter);
  }
  
  result = (DspFloatType) ((arg1)->G);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowPass1pFilter_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::R",1,"Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter,0))){
    SWIG_fail_ptr("ZolzerLowPass1pFilter_R_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowPass1pFilter_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::R",1,"Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter,0))){
    SWIG_fail_ptr("ZolzerLowPass1pFilter_R_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerLowPass1pFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::ZolzerLowPass1pFilter",0,0)
  result = (Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *)new Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerLowPass1pFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::ZolzerLowPass1pFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::ZolzerLowPass1pFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::ZolzerLowPass1pFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::ZolzerLowPass1pFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::ZolzerLowPass1pFilter",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *)new Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerLowPass1pFilter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::ZolzerLowPass1pFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::ZolzerLowPass1pFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::ZolzerLowPass1pFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::ZolzerLowPass1pFilter",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *)new Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerLowPass1pFilter__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::ZolzerLowPass1pFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::ZolzerLowPass1pFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::ZolzerLowPass1pFilter",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *)new Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerLowPass1pFilter(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ZolzerLowPass1pFilter__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ZolzerLowPass1pFilter__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_ZolzerLowPass1pFilter__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ZolzerLowPass1pFilter__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ZolzerLowPass1pFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::ZolzerLowPass1pFilter()\n"
    "    Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::ZolzerLowPass1pFilter(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::ZolzerLowPass1pFilter(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter::ZolzerLowPass1pFilter(DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_ZolzerLowPass1pFilter(void *obj) {
Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_ZolzerLowPass1pFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ZolzerLowPass1pFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ZolzerLowPass1pFilter_attributes[] = {
    { "Fc", _wrap_ZolzerLowPass1pFilter_Fc_get, _wrap_ZolzerLowPass1pFilter_Fc_set },
    { "Fs", _wrap_ZolzerLowPass1pFilter_Fs_get, _wrap_ZolzerLowPass1pFilter_Fs_set },
    { "Q", _wrap_ZolzerLowPass1pFilter_Q_get, _wrap_ZolzerLowPass1pFilter_Q_set },
    { "G", _wrap_ZolzerLowPass1pFilter_G_get, _wrap_ZolzerLowPass1pFilter_G_set },
    { "R", _wrap_ZolzerLowPass1pFilter_R_get, _wrap_ZolzerLowPass1pFilter_R_set },
    {0,0,0}
};
static swig_lua_method swig_ZolzerLowPass1pFilter_methods[]= {
    {0,0}
};
static swig_lua_method swig_ZolzerLowPass1pFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ZolzerLowPass1pFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ZolzerLowPass1pFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ZolzerLowPass1pFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ZolzerLowPass1pFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ZolzerLowPass1pFilter_Sf_SwigStatic = {
    "ZolzerLowPass1pFilter",
    swig_ZolzerLowPass1pFilter_Sf_SwigStatic_methods,
    swig_ZolzerLowPass1pFilter_Sf_SwigStatic_attributes,
    swig_ZolzerLowPass1pFilter_Sf_SwigStatic_constants,
    swig_ZolzerLowPass1pFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ZolzerLowPass1pFilter_bases[] = {0,0};
static const char *swig_ZolzerLowPass1pFilter_base_names[] = {"Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *",0};
static swig_lua_class _wrap_class_ZolzerLowPass1pFilter = { "ZolzerLowPass1pFilter", "ZolzerLowPass1pFilter", &SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter,_proxy__wrap_new_ZolzerLowPass1pFilter, swig_delete_ZolzerLowPass1pFilter, swig_ZolzerLowPass1pFilter_methods, swig_ZolzerLowPass1pFilter_attributes, &swig_ZolzerLowPass1pFilter_Sf_SwigStatic, swig_ZolzerLowPass1pFilter_meta, swig_ZolzerLowPass1pFilter_bases, swig_ZolzerLowPass1pFilter_base_names };

static int _wrap_ZolzerHighPass1pFilter_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::Fc",1,"Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter,0))){
    SWIG_fail_ptr("ZolzerHighPass1pFilter_Fc_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighPass1pFilter_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::Fc",1,"Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter,0))){
    SWIG_fail_ptr("ZolzerHighPass1pFilter_Fc_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighPass1pFilter_Fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::Fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::Fs",1,"Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::Fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter,0))){
    SWIG_fail_ptr("ZolzerHighPass1pFilter_Fs_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighPass1pFilter_Fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::Fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::Fs",1,"Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter,0))){
    SWIG_fail_ptr("ZolzerHighPass1pFilter_Fs_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighPass1pFilter_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::Q",1,"Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter,0))){
    SWIG_fail_ptr("ZolzerHighPass1pFilter_Q_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighPass1pFilter_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::Q",1,"Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter,0))){
    SWIG_fail_ptr("ZolzerHighPass1pFilter_Q_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighPass1pFilter_G_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::G",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::G",1,"Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::G",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter,0))){
    SWIG_fail_ptr("ZolzerHighPass1pFilter_G_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->G = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighPass1pFilter_G_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::G",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::G",1,"Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter,0))){
    SWIG_fail_ptr("ZolzerHighPass1pFilter_G_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter);
  }
  
  result = (DspFloatType) ((arg1)->G);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighPass1pFilter_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::R",1,"Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter,0))){
    SWIG_fail_ptr("ZolzerHighPass1pFilter_R_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighPass1pFilter_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::R",1,"Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter,0))){
    SWIG_fail_ptr("ZolzerHighPass1pFilter_R_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerHighPass1pFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::ZolzerHighPass1pFilter",0,0)
  result = (Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *)new Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerHighPass1pFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::ZolzerHighPass1pFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::ZolzerHighPass1pFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::ZolzerHighPass1pFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::ZolzerHighPass1pFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::ZolzerHighPass1pFilter",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *)new Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerHighPass1pFilter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::ZolzerHighPass1pFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::ZolzerHighPass1pFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::ZolzerHighPass1pFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::ZolzerHighPass1pFilter",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *)new Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerHighPass1pFilter__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::ZolzerHighPass1pFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::ZolzerHighPass1pFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::ZolzerHighPass1pFilter",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *)new Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerHighPass1pFilter(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ZolzerHighPass1pFilter__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ZolzerHighPass1pFilter__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_ZolzerHighPass1pFilter__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ZolzerHighPass1pFilter__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ZolzerHighPass1pFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::ZolzerHighPass1pFilter()\n"
    "    Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::ZolzerHighPass1pFilter(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::ZolzerHighPass1pFilter(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter::ZolzerHighPass1pFilter(DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_ZolzerHighPass1pFilter(void *obj) {
Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_ZolzerHighPass1pFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ZolzerHighPass1pFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ZolzerHighPass1pFilter_attributes[] = {
    { "Fc", _wrap_ZolzerHighPass1pFilter_Fc_get, _wrap_ZolzerHighPass1pFilter_Fc_set },
    { "Fs", _wrap_ZolzerHighPass1pFilter_Fs_get, _wrap_ZolzerHighPass1pFilter_Fs_set },
    { "Q", _wrap_ZolzerHighPass1pFilter_Q_get, _wrap_ZolzerHighPass1pFilter_Q_set },
    { "G", _wrap_ZolzerHighPass1pFilter_G_get, _wrap_ZolzerHighPass1pFilter_G_set },
    { "R", _wrap_ZolzerHighPass1pFilter_R_get, _wrap_ZolzerHighPass1pFilter_R_set },
    {0,0,0}
};
static swig_lua_method swig_ZolzerHighPass1pFilter_methods[]= {
    {0,0}
};
static swig_lua_method swig_ZolzerHighPass1pFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ZolzerHighPass1pFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ZolzerHighPass1pFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ZolzerHighPass1pFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ZolzerHighPass1pFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ZolzerHighPass1pFilter_Sf_SwigStatic = {
    "ZolzerHighPass1pFilter",
    swig_ZolzerHighPass1pFilter_Sf_SwigStatic_methods,
    swig_ZolzerHighPass1pFilter_Sf_SwigStatic_attributes,
    swig_ZolzerHighPass1pFilter_Sf_SwigStatic_constants,
    swig_ZolzerHighPass1pFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ZolzerHighPass1pFilter_bases[] = {0,0};
static const char *swig_ZolzerHighPass1pFilter_base_names[] = {"Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *",0};
static swig_lua_class _wrap_class_ZolzerHighPass1pFilter = { "ZolzerHighPass1pFilter", "ZolzerHighPass1pFilter", &SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter,_proxy__wrap_new_ZolzerHighPass1pFilter, swig_delete_ZolzerHighPass1pFilter, swig_ZolzerHighPass1pFilter_methods, swig_ZolzerHighPass1pFilter_attributes, &swig_ZolzerHighPass1pFilter_Sf_SwigStatic, swig_ZolzerHighPass1pFilter_meta, swig_ZolzerHighPass1pFilter_bases, swig_ZolzerHighPass1pFilter_base_names };

static int _wrap_ZolzerAllPass1pFilter_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::Fc",1,"Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter,0))){
    SWIG_fail_ptr("ZolzerAllPass1pFilter_Fc_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerAllPass1pFilter_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::Fc",1,"Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter,0))){
    SWIG_fail_ptr("ZolzerAllPass1pFilter_Fc_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerAllPass1pFilter_Fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::Fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::Fs",1,"Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::Fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter,0))){
    SWIG_fail_ptr("ZolzerAllPass1pFilter_Fs_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerAllPass1pFilter_Fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::Fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::Fs",1,"Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter,0))){
    SWIG_fail_ptr("ZolzerAllPass1pFilter_Fs_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerAllPass1pFilter_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::Q",1,"Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter,0))){
    SWIG_fail_ptr("ZolzerAllPass1pFilter_Q_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerAllPass1pFilter_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::Q",1,"Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter,0))){
    SWIG_fail_ptr("ZolzerAllPass1pFilter_Q_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerAllPass1pFilter_G_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::G",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::G",1,"Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::G",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter,0))){
    SWIG_fail_ptr("ZolzerAllPass1pFilter_G_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->G = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerAllPass1pFilter_G_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::G",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::G",1,"Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter,0))){
    SWIG_fail_ptr("ZolzerAllPass1pFilter_G_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter);
  }
  
  result = (DspFloatType) ((arg1)->G);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerAllPass1pFilter_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::R",1,"Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter,0))){
    SWIG_fail_ptr("ZolzerAllPass1pFilter_R_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerAllPass1pFilter_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::R",1,"Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter,0))){
    SWIG_fail_ptr("ZolzerAllPass1pFilter_R_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerAllPass1pFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::ZolzerAllPass1pFilter",0,0)
  result = (Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *)new Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerAllPass1pFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::ZolzerAllPass1pFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::ZolzerAllPass1pFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::ZolzerAllPass1pFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::ZolzerAllPass1pFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::ZolzerAllPass1pFilter",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *)new Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerAllPass1pFilter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::ZolzerAllPass1pFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::ZolzerAllPass1pFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::ZolzerAllPass1pFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::ZolzerAllPass1pFilter",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *)new Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerAllPass1pFilter__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::ZolzerAllPass1pFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::ZolzerAllPass1pFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::ZolzerAllPass1pFilter",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *)new Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerAllPass1pFilter(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ZolzerAllPass1pFilter__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ZolzerAllPass1pFilter__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_ZolzerAllPass1pFilter__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ZolzerAllPass1pFilter__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ZolzerAllPass1pFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::ZolzerAllPass1pFilter()\n"
    "    Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::ZolzerAllPass1pFilter(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::ZolzerAllPass1pFilter(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter::ZolzerAllPass1pFilter(DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_ZolzerAllPass1pFilter(void *obj) {
Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_ZolzerAllPass1pFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ZolzerAllPass1pFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ZolzerAllPass1pFilter_attributes[] = {
    { "Fc", _wrap_ZolzerAllPass1pFilter_Fc_get, _wrap_ZolzerAllPass1pFilter_Fc_set },
    { "Fs", _wrap_ZolzerAllPass1pFilter_Fs_get, _wrap_ZolzerAllPass1pFilter_Fs_set },
    { "Q", _wrap_ZolzerAllPass1pFilter_Q_get, _wrap_ZolzerAllPass1pFilter_Q_set },
    { "G", _wrap_ZolzerAllPass1pFilter_G_get, _wrap_ZolzerAllPass1pFilter_G_set },
    { "R", _wrap_ZolzerAllPass1pFilter_R_get, _wrap_ZolzerAllPass1pFilter_R_set },
    {0,0,0}
};
static swig_lua_method swig_ZolzerAllPass1pFilter_methods[]= {
    {0,0}
};
static swig_lua_method swig_ZolzerAllPass1pFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ZolzerAllPass1pFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ZolzerAllPass1pFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ZolzerAllPass1pFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ZolzerAllPass1pFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ZolzerAllPass1pFilter_Sf_SwigStatic = {
    "ZolzerAllPass1pFilter",
    swig_ZolzerAllPass1pFilter_Sf_SwigStatic_methods,
    swig_ZolzerAllPass1pFilter_Sf_SwigStatic_attributes,
    swig_ZolzerAllPass1pFilter_Sf_SwigStatic_constants,
    swig_ZolzerAllPass1pFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ZolzerAllPass1pFilter_bases[] = {0,0};
static const char *swig_ZolzerAllPass1pFilter_base_names[] = {"Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *",0};
static swig_lua_class _wrap_class_ZolzerAllPass1pFilter = { "ZolzerAllPass1pFilter", "ZolzerAllPass1pFilter", &SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter,_proxy__wrap_new_ZolzerAllPass1pFilter, swig_delete_ZolzerAllPass1pFilter, swig_ZolzerAllPass1pFilter_methods, swig_ZolzerAllPass1pFilter_attributes, &swig_ZolzerAllPass1pFilter_Sf_SwigStatic, swig_ZolzerAllPass1pFilter_meta, swig_ZolzerAllPass1pFilter_bases, swig_ZolzerAllPass1pFilter_base_names };

static int _wrap_ZolzerBandPassFilter_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::Fc",1,"Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter,0))){
    SWIG_fail_ptr("ZolzerBandPassFilter_Fc_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBandPassFilter_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::Fc",1,"Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter,0))){
    SWIG_fail_ptr("ZolzerBandPassFilter_Fc_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBandPassFilter_Fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::Fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::Fs",1,"Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::Fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter,0))){
    SWIG_fail_ptr("ZolzerBandPassFilter_Fs_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBandPassFilter_Fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::Fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::Fs",1,"Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter,0))){
    SWIG_fail_ptr("ZolzerBandPassFilter_Fs_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBandPassFilter_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::Q",1,"Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter,0))){
    SWIG_fail_ptr("ZolzerBandPassFilter_Q_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBandPassFilter_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::Q",1,"Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter,0))){
    SWIG_fail_ptr("ZolzerBandPassFilter_Q_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBandPassFilter_G_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::G",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::G",1,"Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::G",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter,0))){
    SWIG_fail_ptr("ZolzerBandPassFilter_G_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->G = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBandPassFilter_G_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::G",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::G",1,"Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter,0))){
    SWIG_fail_ptr("ZolzerBandPassFilter_G_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->G);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBandPassFilter_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::R",1,"Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter,0))){
    SWIG_fail_ptr("ZolzerBandPassFilter_R_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBandPassFilter_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::R",1,"Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter,0))){
    SWIG_fail_ptr("ZolzerBandPassFilter_R_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerBandPassFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::ZolzerBandPassFilter",0,0)
  result = (Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *)new Filters::IIR::ZolzerFilters::ZolzerBandPassFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerBandPassFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::ZolzerBandPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::ZolzerBandPassFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::ZolzerBandPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::ZolzerBandPassFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::ZolzerBandPassFilter",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *)new Filters::IIR::ZolzerFilters::ZolzerBandPassFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerBandPassFilter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::ZolzerBandPassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::ZolzerBandPassFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::ZolzerBandPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::ZolzerBandPassFilter",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *)new Filters::IIR::ZolzerFilters::ZolzerBandPassFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerBandPassFilter__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::ZolzerBandPassFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::ZolzerBandPassFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::ZolzerBandPassFilter",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *)new Filters::IIR::ZolzerFilters::ZolzerBandPassFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerBandPassFilter(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ZolzerBandPassFilter__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ZolzerBandPassFilter__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_ZolzerBandPassFilter__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ZolzerBandPassFilter__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ZolzerBandPassFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::ZolzerBandPassFilter()\n"
    "    Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::ZolzerBandPassFilter(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::ZolzerBandPassFilter(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ZolzerFilters::ZolzerBandPassFilter::ZolzerBandPassFilter(DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_ZolzerBandPassFilter(void *obj) {
Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_ZolzerBandPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ZolzerBandPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ZolzerBandPassFilter_attributes[] = {
    { "Fc", _wrap_ZolzerBandPassFilter_Fc_get, _wrap_ZolzerBandPassFilter_Fc_set },
    { "Fs", _wrap_ZolzerBandPassFilter_Fs_get, _wrap_ZolzerBandPassFilter_Fs_set },
    { "Q", _wrap_ZolzerBandPassFilter_Q_get, _wrap_ZolzerBandPassFilter_Q_set },
    { "G", _wrap_ZolzerBandPassFilter_G_get, _wrap_ZolzerBandPassFilter_G_set },
    { "R", _wrap_ZolzerBandPassFilter_R_get, _wrap_ZolzerBandPassFilter_R_set },
    {0,0,0}
};
static swig_lua_method swig_ZolzerBandPassFilter_methods[]= {
    {0,0}
};
static swig_lua_method swig_ZolzerBandPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ZolzerBandPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ZolzerBandPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ZolzerBandPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ZolzerBandPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ZolzerBandPassFilter_Sf_SwigStatic = {
    "ZolzerBandPassFilter",
    swig_ZolzerBandPassFilter_Sf_SwigStatic_methods,
    swig_ZolzerBandPassFilter_Sf_SwigStatic_attributes,
    swig_ZolzerBandPassFilter_Sf_SwigStatic_constants,
    swig_ZolzerBandPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ZolzerBandPassFilter_bases[] = {0,0};
static const char *swig_ZolzerBandPassFilter_base_names[] = {"Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *",0};
static swig_lua_class _wrap_class_ZolzerBandPassFilter = { "ZolzerBandPassFilter", "ZolzerBandPassFilter", &SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter,_proxy__wrap_new_ZolzerBandPassFilter, swig_delete_ZolzerBandPassFilter, swig_ZolzerBandPassFilter_methods, swig_ZolzerBandPassFilter_attributes, &swig_ZolzerBandPassFilter_Sf_SwigStatic, swig_ZolzerBandPassFilter_meta, swig_ZolzerBandPassFilter_bases, swig_ZolzerBandPassFilter_base_names };

static int _wrap_ZolzerNotchFilter_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerNotchFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerNotchFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::Fc",1,"Filters::IIR::ZolzerFilters::ZolzerNotchFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter,0))){
    SWIG_fail_ptr("ZolzerNotchFilter_Fc_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerNotchFilter_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerNotchFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerNotchFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::Fc",1,"Filters::IIR::ZolzerFilters::ZolzerNotchFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter,0))){
    SWIG_fail_ptr("ZolzerNotchFilter_Fc_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerNotchFilter_Fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerNotchFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerNotchFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::Fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::Fs",1,"Filters::IIR::ZolzerFilters::ZolzerNotchFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::Fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter,0))){
    SWIG_fail_ptr("ZolzerNotchFilter_Fs_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerNotchFilter_Fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerNotchFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerNotchFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::Fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::Fs",1,"Filters::IIR::ZolzerFilters::ZolzerNotchFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter,0))){
    SWIG_fail_ptr("ZolzerNotchFilter_Fs_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerNotchFilter_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerNotchFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerNotchFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::Q",1,"Filters::IIR::ZolzerFilters::ZolzerNotchFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter,0))){
    SWIG_fail_ptr("ZolzerNotchFilter_Q_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerNotchFilter_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerNotchFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerNotchFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::Q",1,"Filters::IIR::ZolzerFilters::ZolzerNotchFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter,0))){
    SWIG_fail_ptr("ZolzerNotchFilter_Q_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerNotchFilter_G_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerNotchFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerNotchFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::G",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::G",1,"Filters::IIR::ZolzerFilters::ZolzerNotchFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::G",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter,0))){
    SWIG_fail_ptr("ZolzerNotchFilter_G_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->G = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerNotchFilter_G_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerNotchFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerNotchFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::G",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::G",1,"Filters::IIR::ZolzerFilters::ZolzerNotchFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter,0))){
    SWIG_fail_ptr("ZolzerNotchFilter_G_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter);
  }
  
  result = (DspFloatType) ((arg1)->G);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerNotchFilter_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerNotchFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerNotchFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::R",1,"Filters::IIR::ZolzerFilters::ZolzerNotchFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter,0))){
    SWIG_fail_ptr("ZolzerNotchFilter_R_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerNotchFilter_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerNotchFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerNotchFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::R",1,"Filters::IIR::ZolzerFilters::ZolzerNotchFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter,0))){
    SWIG_fail_ptr("ZolzerNotchFilter_R_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerNotchFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerNotchFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::ZolzerNotchFilter",0,0)
  result = (Filters::IIR::ZolzerFilters::ZolzerNotchFilter *)new Filters::IIR::ZolzerFilters::ZolzerNotchFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerNotchFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::ZolzerFilters::ZolzerNotchFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::ZolzerNotchFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::ZolzerNotchFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::ZolzerNotchFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::ZolzerNotchFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::ZolzerNotchFilter",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::ZolzerFilters::ZolzerNotchFilter *)new Filters::IIR::ZolzerFilters::ZolzerNotchFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerNotchFilter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::ZolzerFilters::ZolzerNotchFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::ZolzerNotchFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::ZolzerNotchFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::ZolzerNotchFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::ZolzerNotchFilter",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::ZolzerFilters::ZolzerNotchFilter *)new Filters::IIR::ZolzerFilters::ZolzerNotchFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerNotchFilter__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Filters::IIR::ZolzerFilters::ZolzerNotchFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::ZolzerNotchFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::ZolzerNotchFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerNotchFilter::ZolzerNotchFilter",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Filters::IIR::ZolzerFilters::ZolzerNotchFilter *)new Filters::IIR::ZolzerFilters::ZolzerNotchFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerNotchFilter(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ZolzerNotchFilter__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ZolzerNotchFilter__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_ZolzerNotchFilter__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ZolzerNotchFilter__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ZolzerNotchFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ZolzerFilters::ZolzerNotchFilter::ZolzerNotchFilter()\n"
    "    Filters::IIR::ZolzerFilters::ZolzerNotchFilter::ZolzerNotchFilter(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ZolzerFilters::ZolzerNotchFilter::ZolzerNotchFilter(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ZolzerFilters::ZolzerNotchFilter::ZolzerNotchFilter(DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_ZolzerNotchFilter(void *obj) {
Filters::IIR::ZolzerFilters::ZolzerNotchFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerNotchFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_ZolzerNotchFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ZolzerNotchFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ZolzerNotchFilter_attributes[] = {
    { "Fc", _wrap_ZolzerNotchFilter_Fc_get, _wrap_ZolzerNotchFilter_Fc_set },
    { "Fs", _wrap_ZolzerNotchFilter_Fs_get, _wrap_ZolzerNotchFilter_Fs_set },
    { "Q", _wrap_ZolzerNotchFilter_Q_get, _wrap_ZolzerNotchFilter_Q_set },
    { "G", _wrap_ZolzerNotchFilter_G_get, _wrap_ZolzerNotchFilter_G_set },
    { "R", _wrap_ZolzerNotchFilter_R_get, _wrap_ZolzerNotchFilter_R_set },
    {0,0,0}
};
static swig_lua_method swig_ZolzerNotchFilter_methods[]= {
    {0,0}
};
static swig_lua_method swig_ZolzerNotchFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ZolzerNotchFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ZolzerNotchFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ZolzerNotchFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ZolzerNotchFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ZolzerNotchFilter_Sf_SwigStatic = {
    "ZolzerNotchFilter",
    swig_ZolzerNotchFilter_Sf_SwigStatic_methods,
    swig_ZolzerNotchFilter_Sf_SwigStatic_attributes,
    swig_ZolzerNotchFilter_Sf_SwigStatic_constants,
    swig_ZolzerNotchFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ZolzerNotchFilter_bases[] = {0,0};
static const char *swig_ZolzerNotchFilter_base_names[] = {"Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *",0};
static swig_lua_class _wrap_class_ZolzerNotchFilter = { "ZolzerNotchFilter", "ZolzerNotchFilter", &SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter,_proxy__wrap_new_ZolzerNotchFilter, swig_delete_ZolzerNotchFilter, swig_ZolzerNotchFilter_methods, swig_ZolzerNotchFilter_attributes, &swig_ZolzerNotchFilter_Sf_SwigStatic, swig_ZolzerNotchFilter_meta, swig_ZolzerNotchFilter_bases, swig_ZolzerNotchFilter_base_names };

static int _wrap_ZolzerPeakBoostFilter_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::Fc",1,"Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter,0))){
    SWIG_fail_ptr("ZolzerPeakBoostFilter_Fc_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerPeakBoostFilter_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::Fc",1,"Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter,0))){
    SWIG_fail_ptr("ZolzerPeakBoostFilter_Fc_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerPeakBoostFilter_Fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::Fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::Fs",1,"Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::Fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter,0))){
    SWIG_fail_ptr("ZolzerPeakBoostFilter_Fs_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerPeakBoostFilter_Fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::Fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::Fs",1,"Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter,0))){
    SWIG_fail_ptr("ZolzerPeakBoostFilter_Fs_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerPeakBoostFilter_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::Q",1,"Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter,0))){
    SWIG_fail_ptr("ZolzerPeakBoostFilter_Q_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerPeakBoostFilter_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::Q",1,"Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter,0))){
    SWIG_fail_ptr("ZolzerPeakBoostFilter_Q_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerPeakBoostFilter_G_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::G",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::G",1,"Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::G",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter,0))){
    SWIG_fail_ptr("ZolzerPeakBoostFilter_G_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->G = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerPeakBoostFilter_G_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::G",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::G",1,"Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter,0))){
    SWIG_fail_ptr("ZolzerPeakBoostFilter_G_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter);
  }
  
  result = (DspFloatType) ((arg1)->G);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerPeakBoostFilter_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::R",1,"Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter,0))){
    SWIG_fail_ptr("ZolzerPeakBoostFilter_R_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerPeakBoostFilter_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::R",1,"Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter,0))){
    SWIG_fail_ptr("ZolzerPeakBoostFilter_R_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerPeakBoostFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::ZolzerPeakBoostFilter",0,0)
  result = (Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *)new Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerPeakBoostFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::ZolzerPeakBoostFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::ZolzerPeakBoostFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::ZolzerPeakBoostFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::ZolzerPeakBoostFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::ZolzerPeakBoostFilter",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *)new Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerPeakBoostFilter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::ZolzerPeakBoostFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::ZolzerPeakBoostFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::ZolzerPeakBoostFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::ZolzerPeakBoostFilter",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *)new Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerPeakBoostFilter__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::ZolzerPeakBoostFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::ZolzerPeakBoostFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::ZolzerPeakBoostFilter",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *)new Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerPeakBoostFilter(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ZolzerPeakBoostFilter__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ZolzerPeakBoostFilter__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_ZolzerPeakBoostFilter__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ZolzerPeakBoostFilter__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ZolzerPeakBoostFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::ZolzerPeakBoostFilter()\n"
    "    Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::ZolzerPeakBoostFilter(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::ZolzerPeakBoostFilter(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter::ZolzerPeakBoostFilter(DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_ZolzerPeakBoostFilter(void *obj) {
Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_ZolzerPeakBoostFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ZolzerPeakBoostFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ZolzerPeakBoostFilter_attributes[] = {
    { "Fc", _wrap_ZolzerPeakBoostFilter_Fc_get, _wrap_ZolzerPeakBoostFilter_Fc_set },
    { "Fs", _wrap_ZolzerPeakBoostFilter_Fs_get, _wrap_ZolzerPeakBoostFilter_Fs_set },
    { "Q", _wrap_ZolzerPeakBoostFilter_Q_get, _wrap_ZolzerPeakBoostFilter_Q_set },
    { "G", _wrap_ZolzerPeakBoostFilter_G_get, _wrap_ZolzerPeakBoostFilter_G_set },
    { "R", _wrap_ZolzerPeakBoostFilter_R_get, _wrap_ZolzerPeakBoostFilter_R_set },
    {0,0,0}
};
static swig_lua_method swig_ZolzerPeakBoostFilter_methods[]= {
    {0,0}
};
static swig_lua_method swig_ZolzerPeakBoostFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ZolzerPeakBoostFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ZolzerPeakBoostFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ZolzerPeakBoostFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ZolzerPeakBoostFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ZolzerPeakBoostFilter_Sf_SwigStatic = {
    "ZolzerPeakBoostFilter",
    swig_ZolzerPeakBoostFilter_Sf_SwigStatic_methods,
    swig_ZolzerPeakBoostFilter_Sf_SwigStatic_attributes,
    swig_ZolzerPeakBoostFilter_Sf_SwigStatic_constants,
    swig_ZolzerPeakBoostFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ZolzerPeakBoostFilter_bases[] = {0,0};
static const char *swig_ZolzerPeakBoostFilter_base_names[] = {"Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *",0};
static swig_lua_class _wrap_class_ZolzerPeakBoostFilter = { "ZolzerPeakBoostFilter", "ZolzerPeakBoostFilter", &SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter,_proxy__wrap_new_ZolzerPeakBoostFilter, swig_delete_ZolzerPeakBoostFilter, swig_ZolzerPeakBoostFilter_methods, swig_ZolzerPeakBoostFilter_attributes, &swig_ZolzerPeakBoostFilter_Sf_SwigStatic, swig_ZolzerPeakBoostFilter_meta, swig_ZolzerPeakBoostFilter_bases, swig_ZolzerPeakBoostFilter_base_names };

static int _wrap_ZolzerPeakCutFilter_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::Fc",1,"Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter,0))){
    SWIG_fail_ptr("ZolzerPeakCutFilter_Fc_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerPeakCutFilter_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::Fc",1,"Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter,0))){
    SWIG_fail_ptr("ZolzerPeakCutFilter_Fc_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerPeakCutFilter_Fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::Fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::Fs",1,"Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::Fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter,0))){
    SWIG_fail_ptr("ZolzerPeakCutFilter_Fs_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerPeakCutFilter_Fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::Fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::Fs",1,"Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter,0))){
    SWIG_fail_ptr("ZolzerPeakCutFilter_Fs_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerPeakCutFilter_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::Q",1,"Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter,0))){
    SWIG_fail_ptr("ZolzerPeakCutFilter_Q_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerPeakCutFilter_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::Q",1,"Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter,0))){
    SWIG_fail_ptr("ZolzerPeakCutFilter_Q_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerPeakCutFilter_G_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::G",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::G",1,"Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::G",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter,0))){
    SWIG_fail_ptr("ZolzerPeakCutFilter_G_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->G = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerPeakCutFilter_G_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::G",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::G",1,"Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter,0))){
    SWIG_fail_ptr("ZolzerPeakCutFilter_G_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter);
  }
  
  result = (DspFloatType) ((arg1)->G);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerPeakCutFilter_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::R",1,"Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter,0))){
    SWIG_fail_ptr("ZolzerPeakCutFilter_R_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerPeakCutFilter_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::R",1,"Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter,0))){
    SWIG_fail_ptr("ZolzerPeakCutFilter_R_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerPeakCutFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::ZolzerPeakCutFilter",0,0)
  result = (Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *)new Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerPeakCutFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::ZolzerPeakCutFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::ZolzerPeakCutFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::ZolzerPeakCutFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::ZolzerPeakCutFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::ZolzerPeakCutFilter",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *)new Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerPeakCutFilter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::ZolzerPeakCutFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::ZolzerPeakCutFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::ZolzerPeakCutFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::ZolzerPeakCutFilter",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *)new Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerPeakCutFilter__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::ZolzerPeakCutFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::ZolzerPeakCutFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::ZolzerPeakCutFilter",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *)new Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerPeakCutFilter(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ZolzerPeakCutFilter__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ZolzerPeakCutFilter__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_ZolzerPeakCutFilter__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ZolzerPeakCutFilter__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ZolzerPeakCutFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::ZolzerPeakCutFilter()\n"
    "    Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::ZolzerPeakCutFilter(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::ZolzerPeakCutFilter(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter::ZolzerPeakCutFilter(DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_ZolzerPeakCutFilter(void *obj) {
Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_ZolzerPeakCutFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ZolzerPeakCutFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ZolzerPeakCutFilter_attributes[] = {
    { "Fc", _wrap_ZolzerPeakCutFilter_Fc_get, _wrap_ZolzerPeakCutFilter_Fc_set },
    { "Fs", _wrap_ZolzerPeakCutFilter_Fs_get, _wrap_ZolzerPeakCutFilter_Fs_set },
    { "Q", _wrap_ZolzerPeakCutFilter_Q_get, _wrap_ZolzerPeakCutFilter_Q_set },
    { "G", _wrap_ZolzerPeakCutFilter_G_get, _wrap_ZolzerPeakCutFilter_G_set },
    { "R", _wrap_ZolzerPeakCutFilter_R_get, _wrap_ZolzerPeakCutFilter_R_set },
    {0,0,0}
};
static swig_lua_method swig_ZolzerPeakCutFilter_methods[]= {
    {0,0}
};
static swig_lua_method swig_ZolzerPeakCutFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ZolzerPeakCutFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ZolzerPeakCutFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ZolzerPeakCutFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ZolzerPeakCutFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ZolzerPeakCutFilter_Sf_SwigStatic = {
    "ZolzerPeakCutFilter",
    swig_ZolzerPeakCutFilter_Sf_SwigStatic_methods,
    swig_ZolzerPeakCutFilter_Sf_SwigStatic_attributes,
    swig_ZolzerPeakCutFilter_Sf_SwigStatic_constants,
    swig_ZolzerPeakCutFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ZolzerPeakCutFilter_bases[] = {0,0};
static const char *swig_ZolzerPeakCutFilter_base_names[] = {"Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *",0};
static swig_lua_class _wrap_class_ZolzerPeakCutFilter = { "ZolzerPeakCutFilter", "ZolzerPeakCutFilter", &SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter,_proxy__wrap_new_ZolzerPeakCutFilter, swig_delete_ZolzerPeakCutFilter, swig_ZolzerPeakCutFilter_methods, swig_ZolzerPeakCutFilter_attributes, &swig_ZolzerPeakCutFilter_Sf_SwigStatic, swig_ZolzerPeakCutFilter_meta, swig_ZolzerPeakCutFilter_bases, swig_ZolzerPeakCutFilter_base_names };

static int _wrap_ZolzerLowShelfBoostFilter_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::Fc",1,"Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter,0))){
    SWIG_fail_ptr("ZolzerLowShelfBoostFilter_Fc_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowShelfBoostFilter_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::Fc",1,"Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter,0))){
    SWIG_fail_ptr("ZolzerLowShelfBoostFilter_Fc_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowShelfBoostFilter_Fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::Fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::Fs",1,"Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::Fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter,0))){
    SWIG_fail_ptr("ZolzerLowShelfBoostFilter_Fs_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowShelfBoostFilter_Fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::Fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::Fs",1,"Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter,0))){
    SWIG_fail_ptr("ZolzerLowShelfBoostFilter_Fs_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowShelfBoostFilter_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::Q",1,"Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter,0))){
    SWIG_fail_ptr("ZolzerLowShelfBoostFilter_Q_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowShelfBoostFilter_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::Q",1,"Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter,0))){
    SWIG_fail_ptr("ZolzerLowShelfBoostFilter_Q_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowShelfBoostFilter_G_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::G",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::G",1,"Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::G",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter,0))){
    SWIG_fail_ptr("ZolzerLowShelfBoostFilter_G_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->G = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowShelfBoostFilter_G_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::G",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::G",1,"Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter,0))){
    SWIG_fail_ptr("ZolzerLowShelfBoostFilter_G_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter);
  }
  
  result = (DspFloatType) ((arg1)->G);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowShelfBoostFilter_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::R",1,"Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter,0))){
    SWIG_fail_ptr("ZolzerLowShelfBoostFilter_R_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowShelfBoostFilter_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::R",1,"Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter,0))){
    SWIG_fail_ptr("ZolzerLowShelfBoostFilter_R_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerLowShelfBoostFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::ZolzerLowShelfBoostFilter",0,0)
  result = (Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *)new Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerLowShelfBoostFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::ZolzerLowShelfBoostFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::ZolzerLowShelfBoostFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::ZolzerLowShelfBoostFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::ZolzerLowShelfBoostFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::ZolzerLowShelfBoostFilter",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *)new Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerLowShelfBoostFilter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::ZolzerLowShelfBoostFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::ZolzerLowShelfBoostFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::ZolzerLowShelfBoostFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::ZolzerLowShelfBoostFilter",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *)new Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerLowShelfBoostFilter__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::ZolzerLowShelfBoostFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::ZolzerLowShelfBoostFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::ZolzerLowShelfBoostFilter",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *)new Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerLowShelfBoostFilter(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ZolzerLowShelfBoostFilter__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ZolzerLowShelfBoostFilter__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_ZolzerLowShelfBoostFilter__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ZolzerLowShelfBoostFilter__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ZolzerLowShelfBoostFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::ZolzerLowShelfBoostFilter()\n"
    "    Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::ZolzerLowShelfBoostFilter(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::ZolzerLowShelfBoostFilter(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter::ZolzerLowShelfBoostFilter(DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_ZolzerLowShelfBoostFilter(void *obj) {
Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_ZolzerLowShelfBoostFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ZolzerLowShelfBoostFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ZolzerLowShelfBoostFilter_attributes[] = {
    { "Fc", _wrap_ZolzerLowShelfBoostFilter_Fc_get, _wrap_ZolzerLowShelfBoostFilter_Fc_set },
    { "Fs", _wrap_ZolzerLowShelfBoostFilter_Fs_get, _wrap_ZolzerLowShelfBoostFilter_Fs_set },
    { "Q", _wrap_ZolzerLowShelfBoostFilter_Q_get, _wrap_ZolzerLowShelfBoostFilter_Q_set },
    { "G", _wrap_ZolzerLowShelfBoostFilter_G_get, _wrap_ZolzerLowShelfBoostFilter_G_set },
    { "R", _wrap_ZolzerLowShelfBoostFilter_R_get, _wrap_ZolzerLowShelfBoostFilter_R_set },
    {0,0,0}
};
static swig_lua_method swig_ZolzerLowShelfBoostFilter_methods[]= {
    {0,0}
};
static swig_lua_method swig_ZolzerLowShelfBoostFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ZolzerLowShelfBoostFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ZolzerLowShelfBoostFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ZolzerLowShelfBoostFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ZolzerLowShelfBoostFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ZolzerLowShelfBoostFilter_Sf_SwigStatic = {
    "ZolzerLowShelfBoostFilter",
    swig_ZolzerLowShelfBoostFilter_Sf_SwigStatic_methods,
    swig_ZolzerLowShelfBoostFilter_Sf_SwigStatic_attributes,
    swig_ZolzerLowShelfBoostFilter_Sf_SwigStatic_constants,
    swig_ZolzerLowShelfBoostFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ZolzerLowShelfBoostFilter_bases[] = {0,0};
static const char *swig_ZolzerLowShelfBoostFilter_base_names[] = {"Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *",0};
static swig_lua_class _wrap_class_ZolzerLowShelfBoostFilter = { "ZolzerLowShelfBoostFilter", "ZolzerLowShelfBoostFilter", &SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter,_proxy__wrap_new_ZolzerLowShelfBoostFilter, swig_delete_ZolzerLowShelfBoostFilter, swig_ZolzerLowShelfBoostFilter_methods, swig_ZolzerLowShelfBoostFilter_attributes, &swig_ZolzerLowShelfBoostFilter_Sf_SwigStatic, swig_ZolzerLowShelfBoostFilter_meta, swig_ZolzerLowShelfBoostFilter_bases, swig_ZolzerLowShelfBoostFilter_base_names };

static int _wrap_ZolzerLowShelfCutFilter_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::Fc",1,"Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter,0))){
    SWIG_fail_ptr("ZolzerLowShelfCutFilter_Fc_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowShelfCutFilter_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::Fc",1,"Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter,0))){
    SWIG_fail_ptr("ZolzerLowShelfCutFilter_Fc_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowShelfCutFilter_Fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::Fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::Fs",1,"Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::Fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter,0))){
    SWIG_fail_ptr("ZolzerLowShelfCutFilter_Fs_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowShelfCutFilter_Fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::Fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::Fs",1,"Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter,0))){
    SWIG_fail_ptr("ZolzerLowShelfCutFilter_Fs_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowShelfCutFilter_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::Q",1,"Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter,0))){
    SWIG_fail_ptr("ZolzerLowShelfCutFilter_Q_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowShelfCutFilter_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::Q",1,"Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter,0))){
    SWIG_fail_ptr("ZolzerLowShelfCutFilter_Q_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowShelfCutFilter_G_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::G",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::G",1,"Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::G",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter,0))){
    SWIG_fail_ptr("ZolzerLowShelfCutFilter_G_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->G = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowShelfCutFilter_G_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::G",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::G",1,"Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter,0))){
    SWIG_fail_ptr("ZolzerLowShelfCutFilter_G_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter);
  }
  
  result = (DspFloatType) ((arg1)->G);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowShelfCutFilter_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::R",1,"Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter,0))){
    SWIG_fail_ptr("ZolzerLowShelfCutFilter_R_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerLowShelfCutFilter_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::R",1,"Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter,0))){
    SWIG_fail_ptr("ZolzerLowShelfCutFilter_R_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerLowShelfCutFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::ZolzerLowShelfCutFilter",0,0)
  result = (Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *)new Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerLowShelfCutFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::ZolzerLowShelfCutFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::ZolzerLowShelfCutFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::ZolzerLowShelfCutFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::ZolzerLowShelfCutFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::ZolzerLowShelfCutFilter",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *)new Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerLowShelfCutFilter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::ZolzerLowShelfCutFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::ZolzerLowShelfCutFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::ZolzerLowShelfCutFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::ZolzerLowShelfCutFilter",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *)new Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerLowShelfCutFilter__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::ZolzerLowShelfCutFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::ZolzerLowShelfCutFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::ZolzerLowShelfCutFilter",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *)new Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerLowShelfCutFilter(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ZolzerLowShelfCutFilter__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ZolzerLowShelfCutFilter__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_ZolzerLowShelfCutFilter__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ZolzerLowShelfCutFilter__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ZolzerLowShelfCutFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::ZolzerLowShelfCutFilter()\n"
    "    Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::ZolzerLowShelfCutFilter(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::ZolzerLowShelfCutFilter(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter::ZolzerLowShelfCutFilter(DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_ZolzerLowShelfCutFilter(void *obj) {
Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_ZolzerLowShelfCutFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ZolzerLowShelfCutFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ZolzerLowShelfCutFilter_attributes[] = {
    { "Fc", _wrap_ZolzerLowShelfCutFilter_Fc_get, _wrap_ZolzerLowShelfCutFilter_Fc_set },
    { "Fs", _wrap_ZolzerLowShelfCutFilter_Fs_get, _wrap_ZolzerLowShelfCutFilter_Fs_set },
    { "Q", _wrap_ZolzerLowShelfCutFilter_Q_get, _wrap_ZolzerLowShelfCutFilter_Q_set },
    { "G", _wrap_ZolzerLowShelfCutFilter_G_get, _wrap_ZolzerLowShelfCutFilter_G_set },
    { "R", _wrap_ZolzerLowShelfCutFilter_R_get, _wrap_ZolzerLowShelfCutFilter_R_set },
    {0,0,0}
};
static swig_lua_method swig_ZolzerLowShelfCutFilter_methods[]= {
    {0,0}
};
static swig_lua_method swig_ZolzerLowShelfCutFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ZolzerLowShelfCutFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ZolzerLowShelfCutFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ZolzerLowShelfCutFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ZolzerLowShelfCutFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ZolzerLowShelfCutFilter_Sf_SwigStatic = {
    "ZolzerLowShelfCutFilter",
    swig_ZolzerLowShelfCutFilter_Sf_SwigStatic_methods,
    swig_ZolzerLowShelfCutFilter_Sf_SwigStatic_attributes,
    swig_ZolzerLowShelfCutFilter_Sf_SwigStatic_constants,
    swig_ZolzerLowShelfCutFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ZolzerLowShelfCutFilter_bases[] = {0,0};
static const char *swig_ZolzerLowShelfCutFilter_base_names[] = {"Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *",0};
static swig_lua_class _wrap_class_ZolzerLowShelfCutFilter = { "ZolzerLowShelfCutFilter", "ZolzerLowShelfCutFilter", &SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter,_proxy__wrap_new_ZolzerLowShelfCutFilter, swig_delete_ZolzerLowShelfCutFilter, swig_ZolzerLowShelfCutFilter_methods, swig_ZolzerLowShelfCutFilter_attributes, &swig_ZolzerLowShelfCutFilter_Sf_SwigStatic, swig_ZolzerLowShelfCutFilter_meta, swig_ZolzerLowShelfCutFilter_bases, swig_ZolzerLowShelfCutFilter_base_names };

static int _wrap_ZolzerHighShelfBoostFilter_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::Fc",1,"Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter,0))){
    SWIG_fail_ptr("ZolzerHighShelfBoostFilter_Fc_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighShelfBoostFilter_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::Fc",1,"Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter,0))){
    SWIG_fail_ptr("ZolzerHighShelfBoostFilter_Fc_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighShelfBoostFilter_Fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::Fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::Fs",1,"Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::Fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter,0))){
    SWIG_fail_ptr("ZolzerHighShelfBoostFilter_Fs_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighShelfBoostFilter_Fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::Fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::Fs",1,"Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter,0))){
    SWIG_fail_ptr("ZolzerHighShelfBoostFilter_Fs_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighShelfBoostFilter_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::Q",1,"Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter,0))){
    SWIG_fail_ptr("ZolzerHighShelfBoostFilter_Q_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighShelfBoostFilter_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::Q",1,"Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter,0))){
    SWIG_fail_ptr("ZolzerHighShelfBoostFilter_Q_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighShelfBoostFilter_G_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::G",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::G",1,"Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::G",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter,0))){
    SWIG_fail_ptr("ZolzerHighShelfBoostFilter_G_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->G = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighShelfBoostFilter_G_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::G",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::G",1,"Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter,0))){
    SWIG_fail_ptr("ZolzerHighShelfBoostFilter_G_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter);
  }
  
  result = (DspFloatType) ((arg1)->G);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighShelfBoostFilter_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::R",1,"Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter,0))){
    SWIG_fail_ptr("ZolzerHighShelfBoostFilter_R_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighShelfBoostFilter_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::R",1,"Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter,0))){
    SWIG_fail_ptr("ZolzerHighShelfBoostFilter_R_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerHighShelfBoostFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::ZolzerHighShelfBoostFilter",0,0)
  result = (Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *)new Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerHighShelfBoostFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::ZolzerHighShelfBoostFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::ZolzerHighShelfBoostFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::ZolzerHighShelfBoostFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::ZolzerHighShelfBoostFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::ZolzerHighShelfBoostFilter",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *)new Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerHighShelfBoostFilter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::ZolzerHighShelfBoostFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::ZolzerHighShelfBoostFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::ZolzerHighShelfBoostFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::ZolzerHighShelfBoostFilter",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *)new Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerHighShelfBoostFilter__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::ZolzerHighShelfBoostFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::ZolzerHighShelfBoostFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::ZolzerHighShelfBoostFilter",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *)new Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerHighShelfBoostFilter(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ZolzerHighShelfBoostFilter__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ZolzerHighShelfBoostFilter__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_ZolzerHighShelfBoostFilter__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ZolzerHighShelfBoostFilter__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ZolzerHighShelfBoostFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::ZolzerHighShelfBoostFilter()\n"
    "    Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::ZolzerHighShelfBoostFilter(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::ZolzerHighShelfBoostFilter(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter::ZolzerHighShelfBoostFilter(DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_ZolzerHighShelfBoostFilter(void *obj) {
Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_ZolzerHighShelfBoostFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ZolzerHighShelfBoostFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ZolzerHighShelfBoostFilter_attributes[] = {
    { "Fc", _wrap_ZolzerHighShelfBoostFilter_Fc_get, _wrap_ZolzerHighShelfBoostFilter_Fc_set },
    { "Fs", _wrap_ZolzerHighShelfBoostFilter_Fs_get, _wrap_ZolzerHighShelfBoostFilter_Fs_set },
    { "Q", _wrap_ZolzerHighShelfBoostFilter_Q_get, _wrap_ZolzerHighShelfBoostFilter_Q_set },
    { "G", _wrap_ZolzerHighShelfBoostFilter_G_get, _wrap_ZolzerHighShelfBoostFilter_G_set },
    { "R", _wrap_ZolzerHighShelfBoostFilter_R_get, _wrap_ZolzerHighShelfBoostFilter_R_set },
    {0,0,0}
};
static swig_lua_method swig_ZolzerHighShelfBoostFilter_methods[]= {
    {0,0}
};
static swig_lua_method swig_ZolzerHighShelfBoostFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ZolzerHighShelfBoostFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ZolzerHighShelfBoostFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ZolzerHighShelfBoostFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ZolzerHighShelfBoostFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ZolzerHighShelfBoostFilter_Sf_SwigStatic = {
    "ZolzerHighShelfBoostFilter",
    swig_ZolzerHighShelfBoostFilter_Sf_SwigStatic_methods,
    swig_ZolzerHighShelfBoostFilter_Sf_SwigStatic_attributes,
    swig_ZolzerHighShelfBoostFilter_Sf_SwigStatic_constants,
    swig_ZolzerHighShelfBoostFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ZolzerHighShelfBoostFilter_bases[] = {0,0};
static const char *swig_ZolzerHighShelfBoostFilter_base_names[] = {"Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *",0};
static swig_lua_class _wrap_class_ZolzerHighShelfBoostFilter = { "ZolzerHighShelfBoostFilter", "ZolzerHighShelfBoostFilter", &SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter,_proxy__wrap_new_ZolzerHighShelfBoostFilter, swig_delete_ZolzerHighShelfBoostFilter, swig_ZolzerHighShelfBoostFilter_methods, swig_ZolzerHighShelfBoostFilter_attributes, &swig_ZolzerHighShelfBoostFilter_Sf_SwigStatic, swig_ZolzerHighShelfBoostFilter_meta, swig_ZolzerHighShelfBoostFilter_bases, swig_ZolzerHighShelfBoostFilter_base_names };

static int _wrap_ZolzerHighShelfCutFilter_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::Fc",1,"Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter,0))){
    SWIG_fail_ptr("ZolzerHighShelfCutFilter_Fc_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighShelfCutFilter_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::Fc",1,"Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter,0))){
    SWIG_fail_ptr("ZolzerHighShelfCutFilter_Fc_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighShelfCutFilter_Fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::Fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::Fs",1,"Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::Fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter,0))){
    SWIG_fail_ptr("ZolzerHighShelfCutFilter_Fs_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighShelfCutFilter_Fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::Fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::Fs",1,"Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter,0))){
    SWIG_fail_ptr("ZolzerHighShelfCutFilter_Fs_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighShelfCutFilter_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::Q",1,"Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter,0))){
    SWIG_fail_ptr("ZolzerHighShelfCutFilter_Q_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighShelfCutFilter_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::Q",1,"Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter,0))){
    SWIG_fail_ptr("ZolzerHighShelfCutFilter_Q_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighShelfCutFilter_G_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::G",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::G",1,"Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::G",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter,0))){
    SWIG_fail_ptr("ZolzerHighShelfCutFilter_G_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->G = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighShelfCutFilter_G_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::G",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::G",1,"Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter,0))){
    SWIG_fail_ptr("ZolzerHighShelfCutFilter_G_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter);
  }
  
  result = (DspFloatType) ((arg1)->G);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighShelfCutFilter_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::R",1,"Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter,0))){
    SWIG_fail_ptr("ZolzerHighShelfCutFilter_R_set",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerHighShelfCutFilter_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::R",1,"Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter,0))){
    SWIG_fail_ptr("ZolzerHighShelfCutFilter_R_get",1,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerHighShelfCutFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::ZolzerHighShelfCutFilter",0,0)
  result = (Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *)new Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerHighShelfCutFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::ZolzerHighShelfCutFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::ZolzerHighShelfCutFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::ZolzerHighShelfCutFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::ZolzerHighShelfCutFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::ZolzerHighShelfCutFilter",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *)new Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerHighShelfCutFilter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::ZolzerHighShelfCutFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::ZolzerHighShelfCutFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::ZolzerHighShelfCutFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::ZolzerHighShelfCutFilter",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *)new Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerHighShelfCutFilter__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::ZolzerHighShelfCutFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::ZolzerHighShelfCutFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::ZolzerHighShelfCutFilter",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *)new Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerHighShelfCutFilter(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ZolzerHighShelfCutFilter__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ZolzerHighShelfCutFilter__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_ZolzerHighShelfCutFilter__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ZolzerHighShelfCutFilter__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ZolzerHighShelfCutFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::ZolzerHighShelfCutFilter()\n"
    "    Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::ZolzerHighShelfCutFilter(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::ZolzerHighShelfCutFilter(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter::ZolzerHighShelfCutFilter(DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_ZolzerHighShelfCutFilter(void *obj) {
Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *arg1 = (Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_ZolzerHighShelfCutFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ZolzerHighShelfCutFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ZolzerHighShelfCutFilter_attributes[] = {
    { "Fc", _wrap_ZolzerHighShelfCutFilter_Fc_get, _wrap_ZolzerHighShelfCutFilter_Fc_set },
    { "Fs", _wrap_ZolzerHighShelfCutFilter_Fs_get, _wrap_ZolzerHighShelfCutFilter_Fs_set },
    { "Q", _wrap_ZolzerHighShelfCutFilter_Q_get, _wrap_ZolzerHighShelfCutFilter_Q_set },
    { "G", _wrap_ZolzerHighShelfCutFilter_G_get, _wrap_ZolzerHighShelfCutFilter_G_set },
    { "R", _wrap_ZolzerHighShelfCutFilter_R_get, _wrap_ZolzerHighShelfCutFilter_R_set },
    {0,0,0}
};
static swig_lua_method swig_ZolzerHighShelfCutFilter_methods[]= {
    {0,0}
};
static swig_lua_method swig_ZolzerHighShelfCutFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ZolzerHighShelfCutFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ZolzerHighShelfCutFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ZolzerHighShelfCutFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ZolzerHighShelfCutFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ZolzerHighShelfCutFilter_Sf_SwigStatic = {
    "ZolzerHighShelfCutFilter",
    swig_ZolzerHighShelfCutFilter_Sf_SwigStatic_methods,
    swig_ZolzerHighShelfCutFilter_Sf_SwigStatic_attributes,
    swig_ZolzerHighShelfCutFilter_Sf_SwigStatic_constants,
    swig_ZolzerHighShelfCutFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ZolzerHighShelfCutFilter_bases[] = {0,0};
static const char *swig_ZolzerHighShelfCutFilter_base_names[] = {"Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *",0};
static swig_lua_class _wrap_class_ZolzerHighShelfCutFilter = { "ZolzerHighShelfCutFilter", "ZolzerHighShelfCutFilter", &SWIGTYPE_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter,_proxy__wrap_new_ZolzerHighShelfCutFilter, swig_delete_ZolzerHighShelfCutFilter, swig_ZolzerHighShelfCutFilter_methods, swig_ZolzerHighShelfCutFilter_attributes, &swig_ZolzerHighShelfCutFilter_Sf_SwigStatic, swig_ZolzerHighShelfCutFilter_meta, swig_ZolzerHighShelfCutFilter_bases, swig_ZolzerHighShelfCutFilter_base_names };

static int _wrap_butterworthpole(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  std::complex< DspFloatType > result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::butterworthpole",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::butterworthpole",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::butterworthpole",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = Filters::IIR::ButterworthFilters::butterworthpole(arg1,arg2);
  {
    std::complex< DspFloatType > * resultptr = new std::complex< DspFloatType >((const std::complex< DspFloatType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cbutterworthpole(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  std::complex< DspFloatType > result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::cbutterworthpole",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::cbutterworthpole",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::cbutterworthpole",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = Filters::IIR::ButterworthFilters::cbutterworthpole(arg1,arg2);
  {
    std::complex< DspFloatType > * resultptr = new std::complex< DspFloatType >((const std::complex< DspFloatType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthPoles(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  std::complex< DspFloatType > result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthPoles",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthPoles",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthPoles",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = Filters::IIR::ButterworthFilters::ButterworthPoles(arg1,arg2);
  {
    std::complex< DspFloatType > * resultptr = new std::complex< DspFloatType >((const std::complex< DspFloatType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassSolver(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SwigValueWrapper< std::vector< Filters::BiquadSection > > result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassSolver",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassSolver",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = Filters::IIR::ButterworthFilters::ButterworthLowPassSolver(arg1);
  {
    Filters::BiquadSOS * resultptr = new Filters::BiquadSOS((const Filters::BiquadSOS &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassSolverRadius(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  DspFloatType arg2 ;
  SwigValueWrapper< std::vector< Filters::BiquadSection > > result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassSolverRadius",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassSolverRadius",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassSolverRadius",2,"DspFloatType");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = Filters::IIR::ButterworthFilters::ButterworthLowPassSolverRadius(arg1,arg2);
  {
    Filters::BiquadSOS * resultptr = new Filters::BiquadSOS((const Filters::BiquadSOS &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassSolverQ(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  DspFloatType arg2 ;
  SwigValueWrapper< std::vector< Filters::BiquadSection > > result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassSolverQ",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassSolverQ",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassSolverQ",2,"DspFloatType");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = Filters::IIR::ButterworthFilters::ButterworthLowPassSolverQ(arg1,arg2);
  {
    Filters::BiquadSOS * resultptr = new Filters::BiquadSOS((const Filters::BiquadSOS &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassSolverRQ(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  SwigValueWrapper< std::vector< Filters::BiquadSection > > result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassSolverRQ",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassSolverRQ",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassSolverRQ",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassSolverRQ",3,"DspFloatType");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::IIR::ButterworthFilters::ButterworthLowPassSolverRQ(arg1,arg2,arg3);
  {
    Filters::BiquadSOS * resultptr = new Filters::BiquadSOS((const Filters::BiquadSOS &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPassSolver(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SwigValueWrapper< std::vector< Filters::BiquadSection > > result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthHighPassSolver",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassSolver",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = Filters::IIR::ButterworthFilters::ButterworthHighPassSolver(arg1);
  {
    Filters::BiquadSOS * resultptr = new Filters::BiquadSOS((const Filters::BiquadSOS &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPassSolveQ(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  DspFloatType arg2 ;
  SwigValueWrapper< std::vector< Filters::BiquadSection > > result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthHighPassSolveQ",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassSolveQ",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassSolveQ",2,"DspFloatType");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = Filters::IIR::ButterworthFilters::ButterworthHighPassSolveQ(arg1,arg2);
  {
    Filters::BiquadSOS * resultptr = new Filters::BiquadSOS((const Filters::BiquadSOS &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPassSolveR(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  DspFloatType arg2 ;
  SwigValueWrapper< std::vector< Filters::BiquadSection > > result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthHighPassSolveR",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassSolveR",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassSolveR",2,"DspFloatType");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = Filters::IIR::ButterworthFilters::ButterworthHighPassSolveR(arg1,arg2);
  {
    Filters::BiquadSOS * resultptr = new Filters::BiquadSOS((const Filters::BiquadSOS &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPassSolveRQ(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  SwigValueWrapper< std::vector< Filters::BiquadSection > > result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthHighPassSolveRQ",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassSolveRQ",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassSolveRQ",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassSolveRQ",3,"DspFloatType");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::IIR::ButterworthFilters::ButterworthHighPassSolveRQ(arg1,arg2,arg3);
  {
    Filters::BiquadSOS * resultptr = new Filters::BiquadSOS((const Filters::BiquadSOS &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassSolver(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  SwigValueWrapper< std::vector< Filters::BiquadSection > > result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassSolver",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassSolver",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassSolver",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassSolver",3,"DspFloatType");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::IIR::ButterworthFilters::ButterworthBandPassSolver(arg1,arg2,arg3);
  {
    Filters::BiquadSOS * resultptr = new Filters::BiquadSOS((const Filters::BiquadSOS &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassSolverQ(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  SwigValueWrapper< std::vector< Filters::BiquadSection > > result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassSolverQ",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassSolverQ",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassSolverQ",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassSolverQ",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassSolverQ",4,"DspFloatType");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = Filters::IIR::ButterworthFilters::ButterworthBandPassSolverQ(arg1,arg2,arg3,arg4);
  {
    Filters::BiquadSOS * resultptr = new Filters::BiquadSOS((const Filters::BiquadSOS &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassSolverR(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  SwigValueWrapper< std::vector< Filters::BiquadSection > > result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassSolverR",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassSolverR",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassSolverR",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassSolverR",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassSolverR",4,"DspFloatType");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = Filters::IIR::ButterworthFilters::ButterworthBandPassSolverR(arg1,arg2,arg3,arg4);
  {
    Filters::BiquadSOS * resultptr = new Filters::BiquadSOS((const Filters::BiquadSOS &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassSolverRQ(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  SwigValueWrapper< std::vector< Filters::BiquadSection > > result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassSolverRQ",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassSolverRQ",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassSolverRQ",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassSolverRQ",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassSolverRQ",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassSolverRQ",5,"DspFloatType");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = Filters::IIR::ButterworthFilters::ButterworthBandPassSolverRQ(arg1,arg2,arg3,arg4,arg5);
  {
    Filters::BiquadSOS * resultptr = new Filters::BiquadSOS((const Filters::BiquadSOS &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopSolver(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  SwigValueWrapper< std::vector< Filters::BiquadSection > > result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopSolver",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopSolver",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopSolver",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopSolver",3,"DspFloatType");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = Filters::IIR::ButterworthFilters::ButterworthBandStopSolver(arg1,arg2,arg3);
  {
    Filters::BiquadSOS * resultptr = new Filters::BiquadSOS((const Filters::BiquadSOS &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopSolverQ(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  SwigValueWrapper< std::vector< Filters::BiquadSection > > result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopSolverQ",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopSolverQ",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopSolverQ",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopSolverQ",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopSolverQ",4,"DspFloatType");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = Filters::IIR::ButterworthFilters::ButterworthBandStopSolverQ(arg1,arg2,arg3,arg4);
  {
    Filters::BiquadSOS * resultptr = new Filters::BiquadSOS((const Filters::BiquadSOS &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopSolverR(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  SwigValueWrapper< std::vector< Filters::BiquadSection > > result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopSolverR",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopSolverR",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopSolverR",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopSolverR",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopSolverR",4,"DspFloatType");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = Filters::IIR::ButterworthFilters::ButterworthBandStopSolverR(arg1,arg2,arg3,arg4);
  {
    Filters::BiquadSOS * resultptr = new Filters::BiquadSOS((const Filters::BiquadSOS &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopSolverRQ(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  SwigValueWrapper< std::vector< Filters::BiquadSection > > result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopSolverRQ",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopSolverRQ",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopSolverRQ",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopSolverRQ",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopSolverRQ",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopSolverRQ",5,"DspFloatType");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = Filters::IIR::ButterworthFilters::ButterworthBandStopSolverRQ(arg1,arg2,arg3,arg4,arg5);
  {
    Filters::BiquadSOS * resultptr = new Filters::BiquadSOS((const Filters::BiquadSOS &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassFilter12db_bc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *) 0 ;
  Filters::BiquadTypeI *arg2 = (Filters::BiquadTypeI *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::bc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::bc",1,"Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::bc",2,"Filters::BiquadTypeI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthLowPassFilter12db_bc_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeI,0))){
    SWIG_fail_ptr("ButterworthLowPassFilter12db_bc_set",2,SWIGTYPE_p_Filters__BiquadTypeI);
  }
  
  if (arg1) (arg1)->bc = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassFilter12db_bc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *) 0 ;
  Filters::BiquadTypeI *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::bc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::bc",1,"Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthLowPassFilter12db_bc_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db);
  }
  
  result = (Filters::BiquadTypeI *)& ((arg1)->bc);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeI,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassFilter12db_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Fc",1,"Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthLowPassFilter12db_Fc_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassFilter12db_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Fc",1,"Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthLowPassFilter12db_Fc_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassFilter12db_Sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Sr",1,"Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthLowPassFilter12db_Sr_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassFilter12db_Sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Sr",1,"Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthLowPassFilter12db_Sr_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db);
  }
  
  result = (DspFloatType) ((arg1)->Sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassFilter12db_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Q",1,"Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthLowPassFilter12db_Q_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassFilter12db_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Q",1,"Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthLowPassFilter12db_Q_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ButterworthLowPassFilter12db(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::ButterworthLowPassFilter12db",0,0)
  result = (Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *)new Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassFilter12db_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::setQ",1,"Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthLowPassFilter12db_setQ",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassFilter12db_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::setCutoff",1,"Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::setCutoff",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthLowPassFilter12db_setCutoff",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassFilter12db_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::setPort",1,"Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthLowPassFilter12db_setPort",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassFilter12db_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Tick",1,"Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthLowPassFilter12db_Tick",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassFilter12db_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Tick",1,"Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthLowPassFilter12db_Tick",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassFilter12db_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Tick",1,"Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthLowPassFilter12db_Tick",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassFilter12db_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Tick",1,"Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthLowPassFilter12db_Tick",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassFilter12db_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ButterworthLowPassFilter12db_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ButterworthLowPassFilter12db_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ButterworthLowPassFilter12db_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_ButterworthLowPassFilter12db_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ButterworthLowPassFilter12db_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_ButterworthLowPassFilter12db(void *obj) {
Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *) obj;
delete arg1;
}
static int _proxy__wrap_new_ButterworthLowPassFilter12db(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ButterworthLowPassFilter12db);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ButterworthLowPassFilter12db_attributes[] = {
    { "bc", _wrap_ButterworthLowPassFilter12db_bc_get, _wrap_ButterworthLowPassFilter12db_bc_set },
    { "Fc", _wrap_ButterworthLowPassFilter12db_Fc_get, _wrap_ButterworthLowPassFilter12db_Fc_set },
    { "Sr", _wrap_ButterworthLowPassFilter12db_Sr_get, _wrap_ButterworthLowPassFilter12db_Sr_set },
    { "Q", _wrap_ButterworthLowPassFilter12db_Q_get, _wrap_ButterworthLowPassFilter12db_Q_set },
    {0,0,0}
};
static swig_lua_method swig_ButterworthLowPassFilter12db_methods[]= {
    { "setQ", _wrap_ButterworthLowPassFilter12db_setQ},
    { "setCutoff", _wrap_ButterworthLowPassFilter12db_setCutoff},
    { "setPort", _wrap_ButterworthLowPassFilter12db_setPort},
    { "Tick", _wrap_ButterworthLowPassFilter12db_Tick},
    {0,0}
};
static swig_lua_method swig_ButterworthLowPassFilter12db_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ButterworthLowPassFilter12db_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ButterworthLowPassFilter12db_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_Q", Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::PORT_Q)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ButterworthLowPassFilter12db_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ButterworthLowPassFilter12db_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ButterworthLowPassFilter12db_Sf_SwigStatic = {
    "ButterworthLowPassFilter12db",
    swig_ButterworthLowPassFilter12db_Sf_SwigStatic_methods,
    swig_ButterworthLowPassFilter12db_Sf_SwigStatic_attributes,
    swig_ButterworthLowPassFilter12db_Sf_SwigStatic_constants,
    swig_ButterworthLowPassFilter12db_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ButterworthLowPassFilter12db_bases[] = {0};
static const char *swig_ButterworthLowPassFilter12db_base_names[] = {0};
static swig_lua_class _wrap_class_ButterworthLowPassFilter12db = { "ButterworthLowPassFilter12db", "ButterworthLowPassFilter12db", &SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db,_proxy__wrap_new_ButterworthLowPassFilter12db, swig_delete_ButterworthLowPassFilter12db, swig_ButterworthLowPassFilter12db_methods, swig_ButterworthLowPassFilter12db_attributes, &swig_ButterworthLowPassFilter12db_Sf_SwigStatic, swig_ButterworthLowPassFilter12db_meta, swig_ButterworthLowPassFilter12db_bases, swig_ButterworthLowPassFilter12db_base_names };

static int _wrap_ButterworthResonantLowPassFilter12db_bc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *) 0 ;
  Filters::BiquadTypeI *arg2 = (Filters::BiquadTypeI *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::bc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::bc",1,"Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::bc",2,"Filters::BiquadTypeI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthResonantLowPassFilter12db_bc_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeI,0))){
    SWIG_fail_ptr("ButterworthResonantLowPassFilter12db_bc_set",2,SWIGTYPE_p_Filters__BiquadTypeI);
  }
  
  if (arg1) (arg1)->bc = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthResonantLowPassFilter12db_bc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *) 0 ;
  Filters::BiquadTypeI *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::bc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::bc",1,"Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthResonantLowPassFilter12db_bc_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db);
  }
  
  result = (Filters::BiquadTypeI *)& ((arg1)->bc);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeI,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthResonantLowPassFilter12db_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::Fc",1,"Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthResonantLowPassFilter12db_Fc_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthResonantLowPassFilter12db_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::Fc",1,"Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthResonantLowPassFilter12db_Fc_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthResonantLowPassFilter12db_Sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::Sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::Sr",1,"Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::Sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthResonantLowPassFilter12db_Sr_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthResonantLowPassFilter12db_Sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::Sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::Sr",1,"Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthResonantLowPassFilter12db_Sr_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db);
  }
  
  result = (DspFloatType) ((arg1)->Sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthResonantLowPassFilter12db_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::R",1,"Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthResonantLowPassFilter12db_R_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthResonantLowPassFilter12db_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::R",1,"Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthResonantLowPassFilter12db_R_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ButterworthResonantLowPassFilter12db(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::ButterworthResonantLowPassFilter12db",0,0)
  result = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *)new Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthResonantLowPassFilter12db_setResonance(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::setResonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::setResonance",1,"Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::setResonance",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthResonantLowPassFilter12db_setResonance",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setResonance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthResonantLowPassFilter12db_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::setCutoff",1,"Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::setCutoff",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthResonantLowPassFilter12db_setCutoff",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthResonantLowPassFilter12db_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::setPort",1,"Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthResonantLowPassFilter12db_setPort",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthResonantLowPassFilter12db_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::Tick",1,"Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthResonantLowPassFilter12db_Tick",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthResonantLowPassFilter12db_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::Tick",1,"Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthResonantLowPassFilter12db_Tick",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthResonantLowPassFilter12db_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::Tick",1,"Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthResonantLowPassFilter12db_Tick",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthResonantLowPassFilter12db_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::Tick",1,"Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthResonantLowPassFilter12db_Tick",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthResonantLowPassFilter12db_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ButterworthResonantLowPassFilter12db_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ButterworthResonantLowPassFilter12db_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ButterworthResonantLowPassFilter12db_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_ButterworthResonantLowPassFilter12db_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ButterworthResonantLowPassFilter12db_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_ButterworthResonantLowPassFilter12db(void *obj) {
Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *) obj;
delete arg1;
}
static int _proxy__wrap_new_ButterworthResonantLowPassFilter12db(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ButterworthResonantLowPassFilter12db);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ButterworthResonantLowPassFilter12db_attributes[] = {
    { "bc", _wrap_ButterworthResonantLowPassFilter12db_bc_get, _wrap_ButterworthResonantLowPassFilter12db_bc_set },
    { "Fc", _wrap_ButterworthResonantLowPassFilter12db_Fc_get, _wrap_ButterworthResonantLowPassFilter12db_Fc_set },
    { "Sr", _wrap_ButterworthResonantLowPassFilter12db_Sr_get, _wrap_ButterworthResonantLowPassFilter12db_Sr_set },
    { "R", _wrap_ButterworthResonantLowPassFilter12db_R_get, _wrap_ButterworthResonantLowPassFilter12db_R_set },
    {0,0,0}
};
static swig_lua_method swig_ButterworthResonantLowPassFilter12db_methods[]= {
    { "setResonance", _wrap_ButterworthResonantLowPassFilter12db_setResonance},
    { "setCutoff", _wrap_ButterworthResonantLowPassFilter12db_setCutoff},
    { "setPort", _wrap_ButterworthResonantLowPassFilter12db_setPort},
    { "Tick", _wrap_ButterworthResonantLowPassFilter12db_Tick},
    {0,0}
};
static swig_lua_method swig_ButterworthResonantLowPassFilter12db_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ButterworthResonantLowPassFilter12db_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ButterworthResonantLowPassFilter12db_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_RESONANCE", Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::PORT_RESONANCE)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ButterworthResonantLowPassFilter12db_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ButterworthResonantLowPassFilter12db_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ButterworthResonantLowPassFilter12db_Sf_SwigStatic = {
    "ButterworthResonantLowPassFilter12db",
    swig_ButterworthResonantLowPassFilter12db_Sf_SwigStatic_methods,
    swig_ButterworthResonantLowPassFilter12db_Sf_SwigStatic_attributes,
    swig_ButterworthResonantLowPassFilter12db_Sf_SwigStatic_constants,
    swig_ButterworthResonantLowPassFilter12db_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ButterworthResonantLowPassFilter12db_bases[] = {0};
static const char *swig_ButterworthResonantLowPassFilter12db_base_names[] = {0};
static swig_lua_class _wrap_class_ButterworthResonantLowPassFilter12db = { "ButterworthResonantLowPassFilter12db", "ButterworthResonantLowPassFilter12db", &SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db,_proxy__wrap_new_ButterworthResonantLowPassFilter12db, swig_delete_ButterworthResonantLowPassFilter12db, swig_ButterworthResonantLowPassFilter12db_methods, swig_ButterworthResonantLowPassFilter12db_attributes, &swig_ButterworthResonantLowPassFilter12db_Sf_SwigStatic, swig_ButterworthResonantLowPassFilter12db_meta, swig_ButterworthResonantLowPassFilter12db_bases, swig_ButterworthResonantLowPassFilter12db_base_names };

static int _wrap_ButterworthDampedLowPassFilter12db_bc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *) 0 ;
  Filters::BiquadTypeI *arg2 = (Filters::BiquadTypeI *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::bc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::bc",1,"Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::bc",2,"Filters::BiquadTypeI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthDampedLowPassFilter12db_bc_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeI,0))){
    SWIG_fail_ptr("ButterworthDampedLowPassFilter12db_bc_set",2,SWIGTYPE_p_Filters__BiquadTypeI);
  }
  
  if (arg1) (arg1)->bc = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthDampedLowPassFilter12db_bc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *) 0 ;
  Filters::BiquadTypeI *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::bc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::bc",1,"Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthDampedLowPassFilter12db_bc_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db);
  }
  
  result = (Filters::BiquadTypeI *)& ((arg1)->bc);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeI,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthDampedLowPassFilter12db_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Fc",1,"Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthDampedLowPassFilter12db_Fc_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthDampedLowPassFilter12db_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Fc",1,"Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthDampedLowPassFilter12db_Fc_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthDampedLowPassFilter12db_Sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Sr",1,"Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthDampedLowPassFilter12db_Sr_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthDampedLowPassFilter12db_Sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Sr",1,"Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthDampedLowPassFilter12db_Sr_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db);
  }
  
  result = (DspFloatType) ((arg1)->Sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthDampedLowPassFilter12db_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Q",1,"Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthDampedLowPassFilter12db_Q_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthDampedLowPassFilter12db_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Q",1,"Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthDampedLowPassFilter12db_Q_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ButterworthDampedLowPassFilter12db(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::ButterworthDampedLowPassFilter12db",0,0)
  result = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *)new Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthDampedLowPassFilter12db_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::setQ",1,"Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthDampedLowPassFilter12db_setQ",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthDampedLowPassFilter12db_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::setCutoff",1,"Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::setCutoff",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthDampedLowPassFilter12db_setCutoff",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthDampedLowPassFilter12db_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::setPort",1,"Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthDampedLowPassFilter12db_setPort",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthDampedLowPassFilter12db_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Tick",1,"Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthDampedLowPassFilter12db_Tick",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthDampedLowPassFilter12db_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Tick",1,"Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthDampedLowPassFilter12db_Tick",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthDampedLowPassFilter12db_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Tick",1,"Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthDampedLowPassFilter12db_Tick",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthDampedLowPassFilter12db_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Tick",1,"Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthDampedLowPassFilter12db_Tick",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthDampedLowPassFilter12db_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ButterworthDampedLowPassFilter12db_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ButterworthDampedLowPassFilter12db_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ButterworthDampedLowPassFilter12db_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_ButterworthDampedLowPassFilter12db_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ButterworthDampedLowPassFilter12db_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_ButterworthDampedLowPassFilter12db(void *obj) {
Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *) obj;
delete arg1;
}
static int _proxy__wrap_new_ButterworthDampedLowPassFilter12db(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ButterworthDampedLowPassFilter12db);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ButterworthDampedLowPassFilter12db_attributes[] = {
    { "bc", _wrap_ButterworthDampedLowPassFilter12db_bc_get, _wrap_ButterworthDampedLowPassFilter12db_bc_set },
    { "Fc", _wrap_ButterworthDampedLowPassFilter12db_Fc_get, _wrap_ButterworthDampedLowPassFilter12db_Fc_set },
    { "Sr", _wrap_ButterworthDampedLowPassFilter12db_Sr_get, _wrap_ButterworthDampedLowPassFilter12db_Sr_set },
    { "Q", _wrap_ButterworthDampedLowPassFilter12db_Q_get, _wrap_ButterworthDampedLowPassFilter12db_Q_set },
    {0,0,0}
};
static swig_lua_method swig_ButterworthDampedLowPassFilter12db_methods[]= {
    { "setQ", _wrap_ButterworthDampedLowPassFilter12db_setQ},
    { "setCutoff", _wrap_ButterworthDampedLowPassFilter12db_setCutoff},
    { "setPort", _wrap_ButterworthDampedLowPassFilter12db_setPort},
    { "Tick", _wrap_ButterworthDampedLowPassFilter12db_Tick},
    {0,0}
};
static swig_lua_method swig_ButterworthDampedLowPassFilter12db_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ButterworthDampedLowPassFilter12db_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ButterworthDampedLowPassFilter12db_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_Q", Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::PORT_Q)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ButterworthDampedLowPassFilter12db_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ButterworthDampedLowPassFilter12db_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ButterworthDampedLowPassFilter12db_Sf_SwigStatic = {
    "ButterworthDampedLowPassFilter12db",
    swig_ButterworthDampedLowPassFilter12db_Sf_SwigStatic_methods,
    swig_ButterworthDampedLowPassFilter12db_Sf_SwigStatic_attributes,
    swig_ButterworthDampedLowPassFilter12db_Sf_SwigStatic_constants,
    swig_ButterworthDampedLowPassFilter12db_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ButterworthDampedLowPassFilter12db_bases[] = {0};
static const char *swig_ButterworthDampedLowPassFilter12db_base_names[] = {0};
static swig_lua_class _wrap_class_ButterworthDampedLowPassFilter12db = { "ButterworthDampedLowPassFilter12db", "ButterworthDampedLowPassFilter12db", &SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db,_proxy__wrap_new_ButterworthDampedLowPassFilter12db, swig_delete_ButterworthDampedLowPassFilter12db, swig_ButterworthDampedLowPassFilter12db_methods, swig_ButterworthDampedLowPassFilter12db_attributes, &swig_ButterworthDampedLowPassFilter12db_Sf_SwigStatic, swig_ButterworthDampedLowPassFilter12db_meta, swig_ButterworthDampedLowPassFilter12db_bases, swig_ButterworthDampedLowPassFilter12db_base_names };

static int _wrap_ButterworthLowPassCascadeFilter_bc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *) 0 ;
  Filters::BiquadTypeICascade *arg2 = (Filters::BiquadTypeICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::bc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::bc",1,"Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::bc",2,"Filters::BiquadTypeICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthLowPassCascadeFilter_bc_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeICascade,0))){
    SWIG_fail_ptr("ButterworthLowPassCascadeFilter_bc_set",2,SWIGTYPE_p_Filters__BiquadTypeICascade);
  }
  
  if (arg1) (arg1)->bc = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassCascadeFilter_bc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *) 0 ;
  Filters::BiquadTypeICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::bc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::bc",1,"Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthLowPassCascadeFilter_bc_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter);
  }
  
  result = (Filters::BiquadTypeICascade *)& ((arg1)->bc);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassCascadeFilter_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Fc",1,"Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthLowPassCascadeFilter_Fc_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassCascadeFilter_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Fc",1,"Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthLowPassCascadeFilter_Fc_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassCascadeFilter_Sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Sr",1,"Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthLowPassCascadeFilter_Sr_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassCascadeFilter_Sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Sr",1,"Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthLowPassCascadeFilter_Sr_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter);
  }
  
  result = (DspFloatType) ((arg1)->Sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassCascadeFilter_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Q",1,"Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthLowPassCascadeFilter_Q_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassCascadeFilter_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Q",1,"Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthLowPassCascadeFilter_Q_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassCascadeFilter_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::order",1,"Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthLowPassCascadeFilter_order_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassCascadeFilter_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::order",1,"Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthLowPassCascadeFilter_order_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassCascadeFilter_sos_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *) 0 ;
  Filters::BiquadSOS *arg2 = (Filters::BiquadSOS *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::sos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::sos",1,"Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::sos",2,"Filters::BiquadSOS *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthLowPassCascadeFilter_sos_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,0))){
    SWIG_fail_ptr("ButterworthLowPassCascadeFilter_sos_set",2,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t);
  }
  
  if (arg1) (arg1)->sos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassCascadeFilter_sos_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *) 0 ;
  Filters::BiquadSOS *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::sos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::sos",1,"Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthLowPassCascadeFilter_sos_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter);
  }
  
  result = (Filters::BiquadSOS *)& ((arg1)->sos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ButterworthLowPassCascadeFilter(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::ButterworthLowPassCascadeFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::ButterworthLowPassCascadeFilter",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *)new Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassCascadeFilter_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::setQ",1,"Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthLowPassCascadeFilter_setQ",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassCascadeFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::setCutoff",1,"Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::setCutoff",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthLowPassCascadeFilter_setCutoff",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassCascadeFilter_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::setPort",1,"Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthLowPassCascadeFilter_setPort",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassCascadeFilter_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Tick",1,"Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthLowPassCascadeFilter_Tick",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassCascadeFilter_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Tick",1,"Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthLowPassCascadeFilter_Tick",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassCascadeFilter_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Tick",1,"Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthLowPassCascadeFilter_Tick",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassCascadeFilter_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Tick",1,"Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthLowPassCascadeFilter_Tick",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassCascadeFilter_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ButterworthLowPassCascadeFilter_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ButterworthLowPassCascadeFilter_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ButterworthLowPassCascadeFilter_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_ButterworthLowPassCascadeFilter_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ButterworthLowPassCascadeFilter_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_ButterworthLowPassCascadeFilter(void *obj) {
Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_ButterworthLowPassCascadeFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ButterworthLowPassCascadeFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ButterworthLowPassCascadeFilter_attributes[] = {
    { "bc", _wrap_ButterworthLowPassCascadeFilter_bc_get, _wrap_ButterworthLowPassCascadeFilter_bc_set },
    { "Fc", _wrap_ButterworthLowPassCascadeFilter_Fc_get, _wrap_ButterworthLowPassCascadeFilter_Fc_set },
    { "Sr", _wrap_ButterworthLowPassCascadeFilter_Sr_get, _wrap_ButterworthLowPassCascadeFilter_Sr_set },
    { "Q", _wrap_ButterworthLowPassCascadeFilter_Q_get, _wrap_ButterworthLowPassCascadeFilter_Q_set },
    { "order", _wrap_ButterworthLowPassCascadeFilter_order_get, _wrap_ButterworthLowPassCascadeFilter_order_set },
    { "sos", _wrap_ButterworthLowPassCascadeFilter_sos_get, _wrap_ButterworthLowPassCascadeFilter_sos_set },
    {0,0,0}
};
static swig_lua_method swig_ButterworthLowPassCascadeFilter_methods[]= {
    { "setQ", _wrap_ButterworthLowPassCascadeFilter_setQ},
    { "setCutoff", _wrap_ButterworthLowPassCascadeFilter_setCutoff},
    { "setPort", _wrap_ButterworthLowPassCascadeFilter_setPort},
    { "Tick", _wrap_ButterworthLowPassCascadeFilter_Tick},
    {0,0}
};
static swig_lua_method swig_ButterworthLowPassCascadeFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ButterworthLowPassCascadeFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ButterworthLowPassCascadeFilter_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_Q", Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::PORT_Q)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ButterworthLowPassCascadeFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ButterworthLowPassCascadeFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ButterworthLowPassCascadeFilter_Sf_SwigStatic = {
    "ButterworthLowPassCascadeFilter",
    swig_ButterworthLowPassCascadeFilter_Sf_SwigStatic_methods,
    swig_ButterworthLowPassCascadeFilter_Sf_SwigStatic_attributes,
    swig_ButterworthLowPassCascadeFilter_Sf_SwigStatic_constants,
    swig_ButterworthLowPassCascadeFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ButterworthLowPassCascadeFilter_bases[] = {0};
static const char *swig_ButterworthLowPassCascadeFilter_base_names[] = {0};
static swig_lua_class _wrap_class_ButterworthLowPassCascadeFilter = { "ButterworthLowPassCascadeFilter", "ButterworthLowPassCascadeFilter", &SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter,_proxy__wrap_new_ButterworthLowPassCascadeFilter, swig_delete_ButterworthLowPassCascadeFilter, swig_ButterworthLowPassCascadeFilter_methods, swig_ButterworthLowPassCascadeFilter_attributes, &swig_ButterworthLowPassCascadeFilter_Sf_SwigStatic, swig_ButterworthLowPassCascadeFilter_meta, swig_ButterworthLowPassCascadeFilter_bases, swig_ButterworthLowPassCascadeFilter_base_names };

static int _wrap_ButterworthResonantLowPassCascadeFilter_bc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *) 0 ;
  Filters::BiquadTypeICascade *arg2 = (Filters::BiquadTypeICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::bc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::bc",1,"Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::bc",2,"Filters::BiquadTypeICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthResonantLowPassCascadeFilter_bc_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeICascade,0))){
    SWIG_fail_ptr("ButterworthResonantLowPassCascadeFilter_bc_set",2,SWIGTYPE_p_Filters__BiquadTypeICascade);
  }
  
  if (arg1) (arg1)->bc = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthResonantLowPassCascadeFilter_bc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *) 0 ;
  Filters::BiquadTypeICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::bc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::bc",1,"Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthResonantLowPassCascadeFilter_bc_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter);
  }
  
  result = (Filters::BiquadTypeICascade *)& ((arg1)->bc);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthResonantLowPassCascadeFilter_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::Fc",1,"Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthResonantLowPassCascadeFilter_Fc_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthResonantLowPassCascadeFilter_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::Fc",1,"Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthResonantLowPassCascadeFilter_Fc_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthResonantLowPassCascadeFilter_Sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::Sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::Sr",1,"Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::Sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthResonantLowPassCascadeFilter_Sr_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthResonantLowPassCascadeFilter_Sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::Sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::Sr",1,"Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthResonantLowPassCascadeFilter_Sr_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter);
  }
  
  result = (DspFloatType) ((arg1)->Sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthResonantLowPassCascadeFilter_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::R",1,"Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthResonantLowPassCascadeFilter_R_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthResonantLowPassCascadeFilter_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::R",1,"Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthResonantLowPassCascadeFilter_R_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthResonantLowPassCascadeFilter_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::order",1,"Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthResonantLowPassCascadeFilter_order_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthResonantLowPassCascadeFilter_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::order",1,"Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthResonantLowPassCascadeFilter_order_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthResonantLowPassCascadeFilter_sos_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *) 0 ;
  Filters::BiquadSOS *arg2 = (Filters::BiquadSOS *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::sos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::sos",1,"Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::sos",2,"Filters::BiquadSOS *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthResonantLowPassCascadeFilter_sos_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,0))){
    SWIG_fail_ptr("ButterworthResonantLowPassCascadeFilter_sos_set",2,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t);
  }
  
  if (arg1) (arg1)->sos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthResonantLowPassCascadeFilter_sos_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *) 0 ;
  Filters::BiquadSOS *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::sos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::sos",1,"Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthResonantLowPassCascadeFilter_sos_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter);
  }
  
  result = (Filters::BiquadSOS *)& ((arg1)->sos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ButterworthResonantLowPassCascadeFilter(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::ButterworthResonantLowPassCascadeFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::ButterworthResonantLowPassCascadeFilter",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *)new Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthResonantLowPassCascadeFilter_setResonance(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::setResonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::setResonance",1,"Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::setResonance",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthResonantLowPassCascadeFilter_setResonance",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setResonance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthResonantLowPassCascadeFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::setCutoff",1,"Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::setCutoff",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthResonantLowPassCascadeFilter_setCutoff",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthResonantLowPassCascadeFilter_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::setPort",1,"Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthResonantLowPassCascadeFilter_setPort",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthResonantLowPassCascadeFilter_Tick(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::Tick",1,"Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthResonantLowPassCascadeFilter_Tick",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ButterworthResonantLowPassCascadeFilter(void *obj) {
Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_ButterworthResonantLowPassCascadeFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ButterworthResonantLowPassCascadeFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ButterworthResonantLowPassCascadeFilter_attributes[] = {
    { "bc", _wrap_ButterworthResonantLowPassCascadeFilter_bc_get, _wrap_ButterworthResonantLowPassCascadeFilter_bc_set },
    { "Fc", _wrap_ButterworthResonantLowPassCascadeFilter_Fc_get, _wrap_ButterworthResonantLowPassCascadeFilter_Fc_set },
    { "Sr", _wrap_ButterworthResonantLowPassCascadeFilter_Sr_get, _wrap_ButterworthResonantLowPassCascadeFilter_Sr_set },
    { "R", _wrap_ButterworthResonantLowPassCascadeFilter_R_get, _wrap_ButterworthResonantLowPassCascadeFilter_R_set },
    { "order", _wrap_ButterworthResonantLowPassCascadeFilter_order_get, _wrap_ButterworthResonantLowPassCascadeFilter_order_set },
    { "sos", _wrap_ButterworthResonantLowPassCascadeFilter_sos_get, _wrap_ButterworthResonantLowPassCascadeFilter_sos_set },
    {0,0,0}
};
static swig_lua_method swig_ButterworthResonantLowPassCascadeFilter_methods[]= {
    { "setResonance", _wrap_ButterworthResonantLowPassCascadeFilter_setResonance},
    { "setCutoff", _wrap_ButterworthResonantLowPassCascadeFilter_setCutoff},
    { "setPort", _wrap_ButterworthResonantLowPassCascadeFilter_setPort},
    { "Tick", _wrap_ButterworthResonantLowPassCascadeFilter_Tick},
    {0,0}
};
static swig_lua_method swig_ButterworthResonantLowPassCascadeFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ButterworthResonantLowPassCascadeFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ButterworthResonantLowPassCascadeFilter_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_RESONANCE", Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::PORT_RESONANCE)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ButterworthResonantLowPassCascadeFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ButterworthResonantLowPassCascadeFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ButterworthResonantLowPassCascadeFilter_Sf_SwigStatic = {
    "ButterworthResonantLowPassCascadeFilter",
    swig_ButterworthResonantLowPassCascadeFilter_Sf_SwigStatic_methods,
    swig_ButterworthResonantLowPassCascadeFilter_Sf_SwigStatic_attributes,
    swig_ButterworthResonantLowPassCascadeFilter_Sf_SwigStatic_constants,
    swig_ButterworthResonantLowPassCascadeFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ButterworthResonantLowPassCascadeFilter_bases[] = {0};
static const char *swig_ButterworthResonantLowPassCascadeFilter_base_names[] = {0};
static swig_lua_class _wrap_class_ButterworthResonantLowPassCascadeFilter = { "ButterworthResonantLowPassCascadeFilter", "ButterworthResonantLowPassCascadeFilter", &SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter,_proxy__wrap_new_ButterworthResonantLowPassCascadeFilter, swig_delete_ButterworthResonantLowPassCascadeFilter, swig_ButterworthResonantLowPassCascadeFilter_methods, swig_ButterworthResonantLowPassCascadeFilter_attributes, &swig_ButterworthResonantLowPassCascadeFilter_Sf_SwigStatic, swig_ButterworthResonantLowPassCascadeFilter_meta, swig_ButterworthResonantLowPassCascadeFilter_bases, swig_ButterworthResonantLowPassCascadeFilter_base_names };

static int _wrap_ButterworthDampedLowPassCascadeFilter_bc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *) 0 ;
  Filters::BiquadTypeICascade *arg2 = (Filters::BiquadTypeICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::bc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::bc",1,"Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::bc",2,"Filters::BiquadTypeICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthDampedLowPassCascadeFilter_bc_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeICascade,0))){
    SWIG_fail_ptr("ButterworthDampedLowPassCascadeFilter_bc_set",2,SWIGTYPE_p_Filters__BiquadTypeICascade);
  }
  
  if (arg1) (arg1)->bc = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthDampedLowPassCascadeFilter_bc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *) 0 ;
  Filters::BiquadTypeICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::bc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::bc",1,"Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthDampedLowPassCascadeFilter_bc_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter);
  }
  
  result = (Filters::BiquadTypeICascade *)& ((arg1)->bc);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthDampedLowPassCascadeFilter_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::Fc",1,"Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthDampedLowPassCascadeFilter_Fc_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthDampedLowPassCascadeFilter_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::Fc",1,"Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthDampedLowPassCascadeFilter_Fc_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthDampedLowPassCascadeFilter_Sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::Sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::Sr",1,"Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::Sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthDampedLowPassCascadeFilter_Sr_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthDampedLowPassCascadeFilter_Sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::Sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::Sr",1,"Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthDampedLowPassCascadeFilter_Sr_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter);
  }
  
  result = (DspFloatType) ((arg1)->Sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthDampedLowPassCascadeFilter_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::Q",1,"Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthDampedLowPassCascadeFilter_Q_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthDampedLowPassCascadeFilter_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::Q",1,"Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthDampedLowPassCascadeFilter_Q_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthDampedLowPassCascadeFilter_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::order",1,"Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthDampedLowPassCascadeFilter_order_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthDampedLowPassCascadeFilter_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::order",1,"Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthDampedLowPassCascadeFilter_order_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthDampedLowPassCascadeFilter_sos_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *) 0 ;
  Filters::BiquadSOS *arg2 = (Filters::BiquadSOS *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::sos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::sos",1,"Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::sos",2,"Filters::BiquadSOS *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthDampedLowPassCascadeFilter_sos_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,0))){
    SWIG_fail_ptr("ButterworthDampedLowPassCascadeFilter_sos_set",2,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t);
  }
  
  if (arg1) (arg1)->sos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthDampedLowPassCascadeFilter_sos_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *) 0 ;
  Filters::BiquadSOS *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::sos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::sos",1,"Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthDampedLowPassCascadeFilter_sos_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter);
  }
  
  result = (Filters::BiquadSOS *)& ((arg1)->sos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ButterworthDampedLowPassCascadeFilter(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::ButterworthDampedLowPassCascadeFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::ButterworthDampedLowPassCascadeFilter",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *)new Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthDampedLowPassCascadeFilter_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::setQ",1,"Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthDampedLowPassCascadeFilter_setQ",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthDampedLowPassCascadeFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::setCutoff",1,"Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::setCutoff",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthDampedLowPassCascadeFilter_setCutoff",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthDampedLowPassCascadeFilter_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::setPort",1,"Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthDampedLowPassCascadeFilter_setPort",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthDampedLowPassCascadeFilter_Tick(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::Tick",1,"Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthDampedLowPassCascadeFilter_Tick",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ButterworthDampedLowPassCascadeFilter(void *obj) {
Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_ButterworthDampedLowPassCascadeFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ButterworthDampedLowPassCascadeFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ButterworthDampedLowPassCascadeFilter_attributes[] = {
    { "bc", _wrap_ButterworthDampedLowPassCascadeFilter_bc_get, _wrap_ButterworthDampedLowPassCascadeFilter_bc_set },
    { "Fc", _wrap_ButterworthDampedLowPassCascadeFilter_Fc_get, _wrap_ButterworthDampedLowPassCascadeFilter_Fc_set },
    { "Sr", _wrap_ButterworthDampedLowPassCascadeFilter_Sr_get, _wrap_ButterworthDampedLowPassCascadeFilter_Sr_set },
    { "Q", _wrap_ButterworthDampedLowPassCascadeFilter_Q_get, _wrap_ButterworthDampedLowPassCascadeFilter_Q_set },
    { "order", _wrap_ButterworthDampedLowPassCascadeFilter_order_get, _wrap_ButterworthDampedLowPassCascadeFilter_order_set },
    { "sos", _wrap_ButterworthDampedLowPassCascadeFilter_sos_get, _wrap_ButterworthDampedLowPassCascadeFilter_sos_set },
    {0,0,0}
};
static swig_lua_method swig_ButterworthDampedLowPassCascadeFilter_methods[]= {
    { "setQ", _wrap_ButterworthDampedLowPassCascadeFilter_setQ},
    { "setCutoff", _wrap_ButterworthDampedLowPassCascadeFilter_setCutoff},
    { "setPort", _wrap_ButterworthDampedLowPassCascadeFilter_setPort},
    { "Tick", _wrap_ButterworthDampedLowPassCascadeFilter_Tick},
    {0,0}
};
static swig_lua_method swig_ButterworthDampedLowPassCascadeFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ButterworthDampedLowPassCascadeFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ButterworthDampedLowPassCascadeFilter_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_Q", Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::PORT_Q)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ButterworthDampedLowPassCascadeFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ButterworthDampedLowPassCascadeFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ButterworthDampedLowPassCascadeFilter_Sf_SwigStatic = {
    "ButterworthDampedLowPassCascadeFilter",
    swig_ButterworthDampedLowPassCascadeFilter_Sf_SwigStatic_methods,
    swig_ButterworthDampedLowPassCascadeFilter_Sf_SwigStatic_attributes,
    swig_ButterworthDampedLowPassCascadeFilter_Sf_SwigStatic_constants,
    swig_ButterworthDampedLowPassCascadeFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ButterworthDampedLowPassCascadeFilter_bases[] = {0};
static const char *swig_ButterworthDampedLowPassCascadeFilter_base_names[] = {0};
static swig_lua_class _wrap_class_ButterworthDampedLowPassCascadeFilter = { "ButterworthDampedLowPassCascadeFilter", "ButterworthDampedLowPassCascadeFilter", &SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter,_proxy__wrap_new_ButterworthDampedLowPassCascadeFilter, swig_delete_ButterworthDampedLowPassCascadeFilter, swig_ButterworthDampedLowPassCascadeFilter_methods, swig_ButterworthDampedLowPassCascadeFilter_attributes, &swig_ButterworthDampedLowPassCascadeFilter_Sf_SwigStatic, swig_ButterworthDampedLowPassCascadeFilter_meta, swig_ButterworthDampedLowPassCascadeFilter_bases, swig_ButterworthDampedLowPassCascadeFilter_base_names };

static int _wrap_ButterworthHighPassFilter12db_bc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *) 0 ;
  Filters::BiquadTypeI *arg2 = (Filters::BiquadTypeI *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::bc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::bc",1,"Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::bc",2,"Filters::BiquadTypeI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthHighPassFilter12db_bc_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassFilter12db);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeI,0))){
    SWIG_fail_ptr("ButterworthHighPassFilter12db_bc_set",2,SWIGTYPE_p_Filters__BiquadTypeI);
  }
  
  if (arg1) (arg1)->bc = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPassFilter12db_bc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *) 0 ;
  Filters::BiquadTypeI *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::bc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::bc",1,"Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthHighPassFilter12db_bc_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassFilter12db);
  }
  
  result = (Filters::BiquadTypeI *)& ((arg1)->bc);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeI,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPassFilter12db_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::Fc",1,"Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthHighPassFilter12db_Fc_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPassFilter12db_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::Fc",1,"Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthHighPassFilter12db_Fc_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassFilter12db);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPassFilter12db_Sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::Sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::Sr",1,"Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::Sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthHighPassFilter12db_Sr_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPassFilter12db_Sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::Sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::Sr",1,"Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthHighPassFilter12db_Sr_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassFilter12db);
  }
  
  result = (DspFloatType) ((arg1)->Sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPassFilter12db_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::Q",1,"Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthHighPassFilter12db_Q_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPassFilter12db_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::Q",1,"Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthHighPassFilter12db_Q_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassFilter12db);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ButterworthHighPassFilter12db(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::ButterworthHighPassFilter12db",0,0)
  result = (Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *)new Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassFilter12db,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPassFilter12db_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::setQ",1,"Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthHighPassFilter12db_setQ",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPassFilter12db_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::setCutoff",1,"Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::setCutoff",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthHighPassFilter12db_setCutoff",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassFilter12db);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPassFilter12db_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::setPort",1,"Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthHighPassFilter12db_setPort",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassFilter12db);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPassFilter12db_Tick(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::Tick",1,"Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthHighPassFilter12db_Tick",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ButterworthHighPassFilter12db(void *obj) {
Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *) obj;
delete arg1;
}
static int _proxy__wrap_new_ButterworthHighPassFilter12db(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ButterworthHighPassFilter12db);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ButterworthHighPassFilter12db_attributes[] = {
    { "bc", _wrap_ButterworthHighPassFilter12db_bc_get, _wrap_ButterworthHighPassFilter12db_bc_set },
    { "Fc", _wrap_ButterworthHighPassFilter12db_Fc_get, _wrap_ButterworthHighPassFilter12db_Fc_set },
    { "Sr", _wrap_ButterworthHighPassFilter12db_Sr_get, _wrap_ButterworthHighPassFilter12db_Sr_set },
    { "Q", _wrap_ButterworthHighPassFilter12db_Q_get, _wrap_ButterworthHighPassFilter12db_Q_set },
    {0,0,0}
};
static swig_lua_method swig_ButterworthHighPassFilter12db_methods[]= {
    { "setQ", _wrap_ButterworthHighPassFilter12db_setQ},
    { "setCutoff", _wrap_ButterworthHighPassFilter12db_setCutoff},
    { "setPort", _wrap_ButterworthHighPassFilter12db_setPort},
    { "Tick", _wrap_ButterworthHighPassFilter12db_Tick},
    {0,0}
};
static swig_lua_method swig_ButterworthHighPassFilter12db_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ButterworthHighPassFilter12db_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ButterworthHighPassFilter12db_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_Q", Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::PORT_Q)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ButterworthHighPassFilter12db_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ButterworthHighPassFilter12db_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ButterworthHighPassFilter12db_Sf_SwigStatic = {
    "ButterworthHighPassFilter12db",
    swig_ButterworthHighPassFilter12db_Sf_SwigStatic_methods,
    swig_ButterworthHighPassFilter12db_Sf_SwigStatic_attributes,
    swig_ButterworthHighPassFilter12db_Sf_SwigStatic_constants,
    swig_ButterworthHighPassFilter12db_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ButterworthHighPassFilter12db_bases[] = {0};
static const char *swig_ButterworthHighPassFilter12db_base_names[] = {0};
static swig_lua_class _wrap_class_ButterworthHighPassFilter12db = { "ButterworthHighPassFilter12db", "ButterworthHighPassFilter12db", &SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassFilter12db,_proxy__wrap_new_ButterworthHighPassFilter12db, swig_delete_ButterworthHighPassFilter12db, swig_ButterworthHighPassFilter12db_methods, swig_ButterworthHighPassFilter12db_attributes, &swig_ButterworthHighPassFilter12db_Sf_SwigStatic, swig_ButterworthHighPassFilter12db_meta, swig_ButterworthHighPassFilter12db_bases, swig_ButterworthHighPassFilter12db_base_names };

static int _wrap_ButterworthHighPassCascadeFilter_bc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *) 0 ;
  Filters::BiquadTypeICascade *arg2 = (Filters::BiquadTypeICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::bc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::bc",1,"Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::bc",2,"Filters::BiquadTypeICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthHighPassCascadeFilter_bc_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeICascade,0))){
    SWIG_fail_ptr("ButterworthHighPassCascadeFilter_bc_set",2,SWIGTYPE_p_Filters__BiquadTypeICascade);
  }
  
  if (arg1) (arg1)->bc = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPassCascadeFilter_bc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *) 0 ;
  Filters::BiquadTypeICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::bc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::bc",1,"Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthHighPassCascadeFilter_bc_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter);
  }
  
  result = (Filters::BiquadTypeICascade *)& ((arg1)->bc);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPassCascadeFilter_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::Fc",1,"Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthHighPassCascadeFilter_Fc_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPassCascadeFilter_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::Fc",1,"Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthHighPassCascadeFilter_Fc_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPassCascadeFilter_Sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::Sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::Sr",1,"Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::Sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthHighPassCascadeFilter_Sr_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPassCascadeFilter_Sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::Sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::Sr",1,"Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthHighPassCascadeFilter_Sr_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter);
  }
  
  result = (DspFloatType) ((arg1)->Sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPassCascadeFilter_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::Q",1,"Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthHighPassCascadeFilter_Q_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPassCascadeFilter_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::Q",1,"Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthHighPassCascadeFilter_Q_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPassCascadeFilter_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::order",1,"Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthHighPassCascadeFilter_order_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPassCascadeFilter_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::order",1,"Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthHighPassCascadeFilter_order_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPassCascadeFilter_sos_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *) 0 ;
  Filters::BiquadSOS *arg2 = (Filters::BiquadSOS *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::sos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::sos",1,"Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::sos",2,"Filters::BiquadSOS *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthHighPassCascadeFilter_sos_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,0))){
    SWIG_fail_ptr("ButterworthHighPassCascadeFilter_sos_set",2,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t);
  }
  
  if (arg1) (arg1)->sos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPassCascadeFilter_sos_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *) 0 ;
  Filters::BiquadSOS *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::sos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::sos",1,"Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthHighPassCascadeFilter_sos_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter);
  }
  
  result = (Filters::BiquadSOS *)& ((arg1)->sos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ButterworthHighPassCascadeFilter(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::ButterworthHighPassCascadeFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::ButterworthHighPassCascadeFilter",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *)new Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPassCascadeFilter_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::setQ",1,"Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthHighPassCascadeFilter_setQ",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPassCascadeFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::setCutoff",1,"Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::setCutoff",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthHighPassCascadeFilter_setCutoff",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPassCascadeFilter_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::setPort",1,"Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthHighPassCascadeFilter_setPort",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPassCascadeFilter_Tick(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::Tick",1,"Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthHighPassCascadeFilter_Tick",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ButterworthHighPassCascadeFilter(void *obj) {
Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_ButterworthHighPassCascadeFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ButterworthHighPassCascadeFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ButterworthHighPassCascadeFilter_attributes[] = {
    { "bc", _wrap_ButterworthHighPassCascadeFilter_bc_get, _wrap_ButterworthHighPassCascadeFilter_bc_set },
    { "Fc", _wrap_ButterworthHighPassCascadeFilter_Fc_get, _wrap_ButterworthHighPassCascadeFilter_Fc_set },
    { "Sr", _wrap_ButterworthHighPassCascadeFilter_Sr_get, _wrap_ButterworthHighPassCascadeFilter_Sr_set },
    { "Q", _wrap_ButterworthHighPassCascadeFilter_Q_get, _wrap_ButterworthHighPassCascadeFilter_Q_set },
    { "order", _wrap_ButterworthHighPassCascadeFilter_order_get, _wrap_ButterworthHighPassCascadeFilter_order_set },
    { "sos", _wrap_ButterworthHighPassCascadeFilter_sos_get, _wrap_ButterworthHighPassCascadeFilter_sos_set },
    {0,0,0}
};
static swig_lua_method swig_ButterworthHighPassCascadeFilter_methods[]= {
    { "setQ", _wrap_ButterworthHighPassCascadeFilter_setQ},
    { "setCutoff", _wrap_ButterworthHighPassCascadeFilter_setCutoff},
    { "setPort", _wrap_ButterworthHighPassCascadeFilter_setPort},
    { "Tick", _wrap_ButterworthHighPassCascadeFilter_Tick},
    {0,0}
};
static swig_lua_method swig_ButterworthHighPassCascadeFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ButterworthHighPassCascadeFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ButterworthHighPassCascadeFilter_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_Q", Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::PORT_Q)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ButterworthHighPassCascadeFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ButterworthHighPassCascadeFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ButterworthHighPassCascadeFilter_Sf_SwigStatic = {
    "ButterworthHighPassCascadeFilter",
    swig_ButterworthHighPassCascadeFilter_Sf_SwigStatic_methods,
    swig_ButterworthHighPassCascadeFilter_Sf_SwigStatic_attributes,
    swig_ButterworthHighPassCascadeFilter_Sf_SwigStatic_constants,
    swig_ButterworthHighPassCascadeFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ButterworthHighPassCascadeFilter_bases[] = {0};
static const char *swig_ButterworthHighPassCascadeFilter_base_names[] = {0};
static swig_lua_class _wrap_class_ButterworthHighPassCascadeFilter = { "ButterworthHighPassCascadeFilter", "ButterworthHighPassCascadeFilter", &SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter,_proxy__wrap_new_ButterworthHighPassCascadeFilter, swig_delete_ButterworthHighPassCascadeFilter, swig_ButterworthHighPassCascadeFilter_methods, swig_ButterworthHighPassCascadeFilter_attributes, &swig_ButterworthHighPassCascadeFilter_Sf_SwigStatic, swig_ButterworthHighPassCascadeFilter_meta, swig_ButterworthHighPassCascadeFilter_bases, swig_ButterworthHighPassCascadeFilter_base_names };

static int _wrap_ButterworthBandPassFilter12db_bc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *) 0 ;
  Filters::BiquadTypeI *arg2 = (Filters::BiquadTypeI *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::bc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::bc",1,"Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::bc",2,"Filters::BiquadTypeI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthBandPassFilter12db_bc_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeI,0))){
    SWIG_fail_ptr("ButterworthBandPassFilter12db_bc_set",2,SWIGTYPE_p_Filters__BiquadTypeI);
  }
  
  if (arg1) (arg1)->bc = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassFilter12db_bc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *) 0 ;
  Filters::BiquadTypeI *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::bc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::bc",1,"Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthBandPassFilter12db_bc_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db);
  }
  
  result = (Filters::BiquadTypeI *)& ((arg1)->bc);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeI,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassFilter12db_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::Fc",1,"Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthBandPassFilter12db_Fc_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassFilter12db_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::Fc",1,"Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthBandPassFilter12db_Fc_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassFilter12db_Sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::Sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::Sr",1,"Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::Sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthBandPassFilter12db_Sr_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassFilter12db_Sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::Sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::Sr",1,"Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthBandPassFilter12db_Sr_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db);
  }
  
  result = (DspFloatType) ((arg1)->Sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassFilter12db_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::Q",1,"Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthBandPassFilter12db_Q_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassFilter12db_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::Q",1,"Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthBandPassFilter12db_Q_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassFilter12db_bw_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::bw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::bw",1,"Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::bw",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthBandPassFilter12db_bw_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->bw = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassFilter12db_bw_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::bw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::bw",1,"Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthBandPassFilter12db_bw_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db);
  }
  
  result = (DspFloatType) ((arg1)->bw);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ButterworthBandPassFilter12db(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::ButterworthBandPassFilter12db",0,0)
  result = (Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *)new Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassFilter12db_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::setQ",1,"Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthBandPassFilter12db_setQ",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassFilter12db_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::setCutoff",1,"Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::setCutoff",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthBandPassFilter12db_setCutoff",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassFilter12db_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::setPort",1,"Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthBandPassFilter12db_setPort",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassFilter12db_Tick(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::Tick",1,"Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db,0))){
    SWIG_fail_ptr("ButterworthBandPassFilter12db_Tick",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ButterworthBandPassFilter12db(void *obj) {
Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *) obj;
delete arg1;
}
static int _proxy__wrap_new_ButterworthBandPassFilter12db(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ButterworthBandPassFilter12db);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ButterworthBandPassFilter12db_attributes[] = {
    { "bc", _wrap_ButterworthBandPassFilter12db_bc_get, _wrap_ButterworthBandPassFilter12db_bc_set },
    { "Fc", _wrap_ButterworthBandPassFilter12db_Fc_get, _wrap_ButterworthBandPassFilter12db_Fc_set },
    { "Sr", _wrap_ButterworthBandPassFilter12db_Sr_get, _wrap_ButterworthBandPassFilter12db_Sr_set },
    { "Q", _wrap_ButterworthBandPassFilter12db_Q_get, _wrap_ButterworthBandPassFilter12db_Q_set },
    { "bw", _wrap_ButterworthBandPassFilter12db_bw_get, _wrap_ButterworthBandPassFilter12db_bw_set },
    {0,0,0}
};
static swig_lua_method swig_ButterworthBandPassFilter12db_methods[]= {
    { "setQ", _wrap_ButterworthBandPassFilter12db_setQ},
    { "setCutoff", _wrap_ButterworthBandPassFilter12db_setCutoff},
    { "setPort", _wrap_ButterworthBandPassFilter12db_setPort},
    { "Tick", _wrap_ButterworthBandPassFilter12db_Tick},
    {0,0}
};
static swig_lua_method swig_ButterworthBandPassFilter12db_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ButterworthBandPassFilter12db_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ButterworthBandPassFilter12db_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_Q", Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::PORT_Q)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ButterworthBandPassFilter12db_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ButterworthBandPassFilter12db_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ButterworthBandPassFilter12db_Sf_SwigStatic = {
    "ButterworthBandPassFilter12db",
    swig_ButterworthBandPassFilter12db_Sf_SwigStatic_methods,
    swig_ButterworthBandPassFilter12db_Sf_SwigStatic_attributes,
    swig_ButterworthBandPassFilter12db_Sf_SwigStatic_constants,
    swig_ButterworthBandPassFilter12db_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ButterworthBandPassFilter12db_bases[] = {0};
static const char *swig_ButterworthBandPassFilter12db_base_names[] = {0};
static swig_lua_class _wrap_class_ButterworthBandPassFilter12db = { "ButterworthBandPassFilter12db", "ButterworthBandPassFilter12db", &SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db,_proxy__wrap_new_ButterworthBandPassFilter12db, swig_delete_ButterworthBandPassFilter12db, swig_ButterworthBandPassFilter12db_methods, swig_ButterworthBandPassFilter12db_attributes, &swig_ButterworthBandPassFilter12db_Sf_SwigStatic, swig_ButterworthBandPassFilter12db_meta, swig_ButterworthBandPassFilter12db_bases, swig_ButterworthBandPassFilter12db_base_names };

static int _wrap_ButterworthBandPassCascadeFilter_bc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *) 0 ;
  Filters::BiquadTypeICascade *arg2 = (Filters::BiquadTypeICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::bc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::bc",1,"Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::bc",2,"Filters::BiquadTypeICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandPassCascadeFilter_bc_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeICascade,0))){
    SWIG_fail_ptr("ButterworthBandPassCascadeFilter_bc_set",2,SWIGTYPE_p_Filters__BiquadTypeICascade);
  }
  
  if (arg1) (arg1)->bc = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassCascadeFilter_bc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *) 0 ;
  Filters::BiquadTypeICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::bc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::bc",1,"Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandPassCascadeFilter_bc_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter);
  }
  
  result = (Filters::BiquadTypeICascade *)& ((arg1)->bc);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassCascadeFilter_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::Fc",1,"Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandPassCascadeFilter_Fc_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassCascadeFilter_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::Fc",1,"Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandPassCascadeFilter_Fc_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassCascadeFilter_Sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::Sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::Sr",1,"Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::Sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandPassCascadeFilter_Sr_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassCascadeFilter_Sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::Sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::Sr",1,"Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandPassCascadeFilter_Sr_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter);
  }
  
  result = (DspFloatType) ((arg1)->Sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassCascadeFilter_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::Q",1,"Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandPassCascadeFilter_Q_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassCascadeFilter_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::Q",1,"Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandPassCascadeFilter_Q_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassCascadeFilter_bw_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::bw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::bw",1,"Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::bw",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandPassCascadeFilter_bw_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->bw = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassCascadeFilter_bw_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::bw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::bw",1,"Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandPassCascadeFilter_bw_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter);
  }
  
  result = (DspFloatType) ((arg1)->bw);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassCascadeFilter_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::order",1,"Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandPassCascadeFilter_order_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassCascadeFilter_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::order",1,"Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandPassCascadeFilter_order_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassCascadeFilter_sos_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *) 0 ;
  Filters::BiquadSOS *arg2 = (Filters::BiquadSOS *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::sos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::sos",1,"Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::sos",2,"Filters::BiquadSOS *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandPassCascadeFilter_sos_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,0))){
    SWIG_fail_ptr("ButterworthBandPassCascadeFilter_sos_set",2,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t);
  }
  
  if (arg1) (arg1)->sos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassCascadeFilter_sos_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *) 0 ;
  Filters::BiquadSOS *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::sos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::sos",1,"Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandPassCascadeFilter_sos_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter);
  }
  
  result = (Filters::BiquadSOS *)& ((arg1)->sos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ButterworthBandPassCascadeFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::ButterworthBandPassCascadeFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::ButterworthBandPassCascadeFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::ButterworthBandPassCascadeFilter",2,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *)new Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ButterworthBandPassCascadeFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::ButterworthBandPassCascadeFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::ButterworthBandPassCascadeFilter",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *)new Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ButterworthBandPassCascadeFilter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ButterworthBandPassCascadeFilter__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ButterworthBandPassCascadeFilter__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ButterworthBandPassCascadeFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::ButterworthBandPassCascadeFilter(size_t,DspFloatType)\n"
    "    Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::ButterworthBandPassCascadeFilter(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ButterworthBandPassCascadeFilter_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::setQ",1,"Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandPassCascadeFilter_setQ",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassCascadeFilter_setBandWidth(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::setBandWidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::setBandWidth",1,"Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::setBandWidth",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandPassCascadeFilter_setBandWidth",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setBandWidth(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassCascadeFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::setCutoff",1,"Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::setCutoff",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandPassCascadeFilter_setCutoff",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassCascadeFilter_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::setPort",1,"Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandPassCascadeFilter_setPort",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassCascadeFilter_Tick(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::Tick",1,"Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandPassCascadeFilter_Tick",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ButterworthBandPassCascadeFilter(void *obj) {
Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_ButterworthBandPassCascadeFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ButterworthBandPassCascadeFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ButterworthBandPassCascadeFilter_attributes[] = {
    { "bc", _wrap_ButterworthBandPassCascadeFilter_bc_get, _wrap_ButterworthBandPassCascadeFilter_bc_set },
    { "Fc", _wrap_ButterworthBandPassCascadeFilter_Fc_get, _wrap_ButterworthBandPassCascadeFilter_Fc_set },
    { "Sr", _wrap_ButterworthBandPassCascadeFilter_Sr_get, _wrap_ButterworthBandPassCascadeFilter_Sr_set },
    { "Q", _wrap_ButterworthBandPassCascadeFilter_Q_get, _wrap_ButterworthBandPassCascadeFilter_Q_set },
    { "bw", _wrap_ButterworthBandPassCascadeFilter_bw_get, _wrap_ButterworthBandPassCascadeFilter_bw_set },
    { "order", _wrap_ButterworthBandPassCascadeFilter_order_get, _wrap_ButterworthBandPassCascadeFilter_order_set },
    { "sos", _wrap_ButterworthBandPassCascadeFilter_sos_get, _wrap_ButterworthBandPassCascadeFilter_sos_set },
    {0,0,0}
};
static swig_lua_method swig_ButterworthBandPassCascadeFilter_methods[]= {
    { "setQ", _wrap_ButterworthBandPassCascadeFilter_setQ},
    { "setBandWidth", _wrap_ButterworthBandPassCascadeFilter_setBandWidth},
    { "setCutoff", _wrap_ButterworthBandPassCascadeFilter_setCutoff},
    { "setPort", _wrap_ButterworthBandPassCascadeFilter_setPort},
    { "Tick", _wrap_ButterworthBandPassCascadeFilter_Tick},
    {0,0}
};
static swig_lua_method swig_ButterworthBandPassCascadeFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ButterworthBandPassCascadeFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ButterworthBandPassCascadeFilter_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_BW", Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::PORT_BW)},
    {SWIG_LUA_CONSTTAB_INT("PORT_Q", Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::PORT_Q)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ButterworthBandPassCascadeFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ButterworthBandPassCascadeFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ButterworthBandPassCascadeFilter_Sf_SwigStatic = {
    "ButterworthBandPassCascadeFilter",
    swig_ButterworthBandPassCascadeFilter_Sf_SwigStatic_methods,
    swig_ButterworthBandPassCascadeFilter_Sf_SwigStatic_attributes,
    swig_ButterworthBandPassCascadeFilter_Sf_SwigStatic_constants,
    swig_ButterworthBandPassCascadeFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ButterworthBandPassCascadeFilter_bases[] = {0};
static const char *swig_ButterworthBandPassCascadeFilter_base_names[] = {0};
static swig_lua_class _wrap_class_ButterworthBandPassCascadeFilter = { "ButterworthBandPassCascadeFilter", "ButterworthBandPassCascadeFilter", &SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter,_proxy__wrap_new_ButterworthBandPassCascadeFilter, swig_delete_ButterworthBandPassCascadeFilter, swig_ButterworthBandPassCascadeFilter_methods, swig_ButterworthBandPassCascadeFilter_attributes, &swig_ButterworthBandPassCascadeFilter_Sf_SwigStatic, swig_ButterworthBandPassCascadeFilter_meta, swig_ButterworthBandPassCascadeFilter_bases, swig_ButterworthBandPassCascadeFilter_base_names };

static int _wrap_ButterworthBandStopFilter12db_bc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *) 0 ;
  Filters::BiquadTypeI *arg2 = (Filters::BiquadTypeI *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::bc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::bc",1,"Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::bc",2,"Filters::BiquadTypeI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db,0))){
    SWIG_fail_ptr("ButterworthBandStopFilter12db_bc_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeI,0))){
    SWIG_fail_ptr("ButterworthBandStopFilter12db_bc_set",2,SWIGTYPE_p_Filters__BiquadTypeI);
  }
  
  if (arg1) (arg1)->bc = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopFilter12db_bc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *) 0 ;
  Filters::BiquadTypeI *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::bc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::bc",1,"Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db,0))){
    SWIG_fail_ptr("ButterworthBandStopFilter12db_bc_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db);
  }
  
  result = (Filters::BiquadTypeI *)& ((arg1)->bc);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeI,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopFilter12db_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::Fc",1,"Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db,0))){
    SWIG_fail_ptr("ButterworthBandStopFilter12db_Fc_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopFilter12db_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::Fc",1,"Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db,0))){
    SWIG_fail_ptr("ButterworthBandStopFilter12db_Fc_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopFilter12db_Sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::Sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::Sr",1,"Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::Sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db,0))){
    SWIG_fail_ptr("ButterworthBandStopFilter12db_Sr_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopFilter12db_Sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::Sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::Sr",1,"Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db,0))){
    SWIG_fail_ptr("ButterworthBandStopFilter12db_Sr_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db);
  }
  
  result = (DspFloatType) ((arg1)->Sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopFilter12db_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::Q",1,"Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db,0))){
    SWIG_fail_ptr("ButterworthBandStopFilter12db_Q_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopFilter12db_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::Q",1,"Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db,0))){
    SWIG_fail_ptr("ButterworthBandStopFilter12db_Q_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopFilter12db_bw_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::bw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::bw",1,"Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::bw",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db,0))){
    SWIG_fail_ptr("ButterworthBandStopFilter12db_bw_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->bw = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopFilter12db_bw_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::bw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::bw",1,"Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db,0))){
    SWIG_fail_ptr("ButterworthBandStopFilter12db_bw_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db);
  }
  
  result = (DspFloatType) ((arg1)->bw);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ButterworthBandStopFilter12db(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::ButterworthBandStopFilter12db",0,0)
  result = (Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *)new Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopFilter12db_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::setQ",1,"Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db,0))){
    SWIG_fail_ptr("ButterworthBandStopFilter12db_setQ",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopFilter12db_setBandWidth(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::setBandWidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::setBandWidth",1,"Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::setBandWidth",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db,0))){
    SWIG_fail_ptr("ButterworthBandStopFilter12db_setBandWidth",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setBandWidth(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopFilter12db_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::setCutoff",1,"Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::setCutoff",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db,0))){
    SWIG_fail_ptr("ButterworthBandStopFilter12db_setCutoff",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopFilter12db_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::setPort",1,"Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db,0))){
    SWIG_fail_ptr("ButterworthBandStopFilter12db_setPort",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopFilter12db_Tick(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::Tick",1,"Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db,0))){
    SWIG_fail_ptr("ButterworthBandStopFilter12db_Tick",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ButterworthBandStopFilter12db(void *obj) {
Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *) obj;
delete arg1;
}
static int _proxy__wrap_new_ButterworthBandStopFilter12db(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ButterworthBandStopFilter12db);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ButterworthBandStopFilter12db_attributes[] = {
    { "bc", _wrap_ButterworthBandStopFilter12db_bc_get, _wrap_ButterworthBandStopFilter12db_bc_set },
    { "Fc", _wrap_ButterworthBandStopFilter12db_Fc_get, _wrap_ButterworthBandStopFilter12db_Fc_set },
    { "Sr", _wrap_ButterworthBandStopFilter12db_Sr_get, _wrap_ButterworthBandStopFilter12db_Sr_set },
    { "Q", _wrap_ButterworthBandStopFilter12db_Q_get, _wrap_ButterworthBandStopFilter12db_Q_set },
    { "bw", _wrap_ButterworthBandStopFilter12db_bw_get, _wrap_ButterworthBandStopFilter12db_bw_set },
    {0,0,0}
};
static swig_lua_method swig_ButterworthBandStopFilter12db_methods[]= {
    { "setQ", _wrap_ButterworthBandStopFilter12db_setQ},
    { "setBandWidth", _wrap_ButterworthBandStopFilter12db_setBandWidth},
    { "setCutoff", _wrap_ButterworthBandStopFilter12db_setCutoff},
    { "setPort", _wrap_ButterworthBandStopFilter12db_setPort},
    { "Tick", _wrap_ButterworthBandStopFilter12db_Tick},
    {0,0}
};
static swig_lua_method swig_ButterworthBandStopFilter12db_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ButterworthBandStopFilter12db_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ButterworthBandStopFilter12db_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_BW", Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::PORT_BW)},
    {SWIG_LUA_CONSTTAB_INT("PORT_Q", Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::PORT_Q)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ButterworthBandStopFilter12db_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ButterworthBandStopFilter12db_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ButterworthBandStopFilter12db_Sf_SwigStatic = {
    "ButterworthBandStopFilter12db",
    swig_ButterworthBandStopFilter12db_Sf_SwigStatic_methods,
    swig_ButterworthBandStopFilter12db_Sf_SwigStatic_attributes,
    swig_ButterworthBandStopFilter12db_Sf_SwigStatic_constants,
    swig_ButterworthBandStopFilter12db_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ButterworthBandStopFilter12db_bases[] = {0};
static const char *swig_ButterworthBandStopFilter12db_base_names[] = {0};
static swig_lua_class _wrap_class_ButterworthBandStopFilter12db = { "ButterworthBandStopFilter12db", "ButterworthBandStopFilter12db", &SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db,_proxy__wrap_new_ButterworthBandStopFilter12db, swig_delete_ButterworthBandStopFilter12db, swig_ButterworthBandStopFilter12db_methods, swig_ButterworthBandStopFilter12db_attributes, &swig_ButterworthBandStopFilter12db_Sf_SwigStatic, swig_ButterworthBandStopFilter12db_meta, swig_ButterworthBandStopFilter12db_bases, swig_ButterworthBandStopFilter12db_base_names };

static int _wrap_ButterworthBandStopCascadeFilter_bc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *) 0 ;
  Filters::BiquadTypeICascade *arg2 = (Filters::BiquadTypeICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::bc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::bc",1,"Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::bc",2,"Filters::BiquadTypeICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandStopCascadeFilter_bc_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeICascade,0))){
    SWIG_fail_ptr("ButterworthBandStopCascadeFilter_bc_set",2,SWIGTYPE_p_Filters__BiquadTypeICascade);
  }
  
  if (arg1) (arg1)->bc = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopCascadeFilter_bc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *) 0 ;
  Filters::BiquadTypeICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::bc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::bc",1,"Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandStopCascadeFilter_bc_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter);
  }
  
  result = (Filters::BiquadTypeICascade *)& ((arg1)->bc);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopCascadeFilter_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::Fc",1,"Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandStopCascadeFilter_Fc_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopCascadeFilter_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::Fc",1,"Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandStopCascadeFilter_Fc_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopCascadeFilter_Sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::Sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::Sr",1,"Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::Sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandStopCascadeFilter_Sr_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopCascadeFilter_Sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::Sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::Sr",1,"Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandStopCascadeFilter_Sr_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter);
  }
  
  result = (DspFloatType) ((arg1)->Sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopCascadeFilter_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::Q",1,"Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandStopCascadeFilter_Q_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopCascadeFilter_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::Q",1,"Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandStopCascadeFilter_Q_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopCascadeFilter_bw_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::bw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::bw",1,"Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::bw",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandStopCascadeFilter_bw_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->bw = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopCascadeFilter_bw_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::bw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::bw",1,"Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandStopCascadeFilter_bw_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter);
  }
  
  result = (DspFloatType) ((arg1)->bw);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopCascadeFilter_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::order",1,"Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandStopCascadeFilter_order_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopCascadeFilter_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::order",1,"Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandStopCascadeFilter_order_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopCascadeFilter_sos_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *) 0 ;
  Filters::BiquadSOS *arg2 = (Filters::BiquadSOS *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::sos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::sos",1,"Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::sos",2,"Filters::BiquadSOS *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandStopCascadeFilter_sos_set",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,0))){
    SWIG_fail_ptr("ButterworthBandStopCascadeFilter_sos_set",2,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t);
  }
  
  if (arg1) (arg1)->sos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopCascadeFilter_sos_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *) 0 ;
  Filters::BiquadSOS *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::sos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::sos",1,"Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandStopCascadeFilter_sos_get",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter);
  }
  
  result = (Filters::BiquadSOS *)& ((arg1)->sos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ButterworthBandStopCascadeFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::ButterworthBandStopCascadeFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::ButterworthBandStopCascadeFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::ButterworthBandStopCascadeFilter",2,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *)new Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ButterworthBandStopCascadeFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::ButterworthBandStopCascadeFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::ButterworthBandStopCascadeFilter",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *)new Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ButterworthBandStopCascadeFilter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ButterworthBandStopCascadeFilter__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ButterworthBandStopCascadeFilter__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ButterworthBandStopCascadeFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::ButterworthBandStopCascadeFilter(size_t,DspFloatType)\n"
    "    Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::ButterworthBandStopCascadeFilter(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ButterworthBandStopCascadeFilter_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::setQ",1,"Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandStopCascadeFilter_setQ",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopCascadeFilter_setBandWidth(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::setBandWidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::setBandWidth",1,"Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::setBandWidth",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandStopCascadeFilter_setBandWidth",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setBandWidth(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopCascadeFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::setCutoff",1,"Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::setCutoff",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandStopCascadeFilter_setCutoff",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopCascadeFilter_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::setPort",1,"Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandStopCascadeFilter_setPort",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopCascadeFilter_Tick(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::Tick",1,"Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter,0))){
    SWIG_fail_ptr("ButterworthBandStopCascadeFilter_Tick",1,SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ButterworthBandStopCascadeFilter(void *obj) {
Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *arg1 = (Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_ButterworthBandStopCascadeFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ButterworthBandStopCascadeFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ButterworthBandStopCascadeFilter_attributes[] = {
    { "bc", _wrap_ButterworthBandStopCascadeFilter_bc_get, _wrap_ButterworthBandStopCascadeFilter_bc_set },
    { "Fc", _wrap_ButterworthBandStopCascadeFilter_Fc_get, _wrap_ButterworthBandStopCascadeFilter_Fc_set },
    { "Sr", _wrap_ButterworthBandStopCascadeFilter_Sr_get, _wrap_ButterworthBandStopCascadeFilter_Sr_set },
    { "Q", _wrap_ButterworthBandStopCascadeFilter_Q_get, _wrap_ButterworthBandStopCascadeFilter_Q_set },
    { "bw", _wrap_ButterworthBandStopCascadeFilter_bw_get, _wrap_ButterworthBandStopCascadeFilter_bw_set },
    { "order", _wrap_ButterworthBandStopCascadeFilter_order_get, _wrap_ButterworthBandStopCascadeFilter_order_set },
    { "sos", _wrap_ButterworthBandStopCascadeFilter_sos_get, _wrap_ButterworthBandStopCascadeFilter_sos_set },
    {0,0,0}
};
static swig_lua_method swig_ButterworthBandStopCascadeFilter_methods[]= {
    { "setQ", _wrap_ButterworthBandStopCascadeFilter_setQ},
    { "setBandWidth", _wrap_ButterworthBandStopCascadeFilter_setBandWidth},
    { "setCutoff", _wrap_ButterworthBandStopCascadeFilter_setCutoff},
    { "setPort", _wrap_ButterworthBandStopCascadeFilter_setPort},
    { "Tick", _wrap_ButterworthBandStopCascadeFilter_Tick},
    {0,0}
};
static swig_lua_method swig_ButterworthBandStopCascadeFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ButterworthBandStopCascadeFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ButterworthBandStopCascadeFilter_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_BW", Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::PORT_BW)},
    {SWIG_LUA_CONSTTAB_INT("PORT_Q", Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::PORT_Q)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ButterworthBandStopCascadeFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ButterworthBandStopCascadeFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ButterworthBandStopCascadeFilter_Sf_SwigStatic = {
    "ButterworthBandStopCascadeFilter",
    swig_ButterworthBandStopCascadeFilter_Sf_SwigStatic_methods,
    swig_ButterworthBandStopCascadeFilter_Sf_SwigStatic_attributes,
    swig_ButterworthBandStopCascadeFilter_Sf_SwigStatic_constants,
    swig_ButterworthBandStopCascadeFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ButterworthBandStopCascadeFilter_bases[] = {0};
static const char *swig_ButterworthBandStopCascadeFilter_base_names[] = {0};
static swig_lua_class _wrap_class_ButterworthBandStopCascadeFilter = { "ButterworthBandStopCascadeFilter", "ButterworthBandStopCascadeFilter", &SWIGTYPE_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter,_proxy__wrap_new_ButterworthBandStopCascadeFilter, swig_delete_ButterworthBandStopCascadeFilter, swig_ButterworthBandStopCascadeFilter_methods, swig_ButterworthBandStopCascadeFilter_attributes, &swig_ButterworthBandStopCascadeFilter_Sf_SwigStatic, swig_ButterworthBandStopCascadeFilter_meta, swig_ButterworthBandStopCascadeFilter_bases, swig_ButterworthBandStopCascadeFilter_base_names };

static int _wrap_Parameters_filterType_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Biquad::Parameters *arg1 = (Filters::IIR::Biquad::Parameters *) 0 ;
  Filters::IIR::Biquad::FilterType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Biquad::Parameters::filterType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Biquad::Parameters::filterType",1,"Filters::IIR::Biquad::Parameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Biquad::Parameters::filterType",2,"Filters::IIR::Biquad::FilterType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Biquad__Parameters,0))){
    SWIG_fail_ptr("Parameters_filterType_set",1,SWIGTYPE_p_Filters__IIR__Biquad__Parameters);
  }
  
  arg2 = (Filters::IIR::Biquad::FilterType)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->filterType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Parameters_filterType_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Biquad::Parameters *arg1 = (Filters::IIR::Biquad::Parameters *) 0 ;
  Filters::IIR::Biquad::FilterType result;
  
  SWIG_check_num_args("Filters::IIR::Biquad::Parameters::filterType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Biquad::Parameters::filterType",1,"Filters::IIR::Biquad::Parameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Biquad__Parameters,0))){
    SWIG_fail_ptr("Parameters_filterType_get",1,SWIGTYPE_p_Filters__IIR__Biquad__Parameters);
  }
  
  result = (Filters::IIR::Biquad::FilterType) ((arg1)->filterType);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Parameters_fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Biquad::Parameters *arg1 = (Filters::IIR::Biquad::Parameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Biquad::Parameters::fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Biquad::Parameters::fs",1,"Filters::IIR::Biquad::Parameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Biquad::Parameters::fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Biquad__Parameters,0))){
    SWIG_fail_ptr("Parameters_fs_set",1,SWIGTYPE_p_Filters__IIR__Biquad__Parameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Parameters_fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Biquad::Parameters *arg1 = (Filters::IIR::Biquad::Parameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Biquad::Parameters::fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Biquad::Parameters::fs",1,"Filters::IIR::Biquad::Parameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Biquad__Parameters,0))){
    SWIG_fail_ptr("Parameters_fs_get",1,SWIGTYPE_p_Filters__IIR__Biquad__Parameters);
  }
  
  result = (DspFloatType) ((arg1)->fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Parameters_f0_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Biquad::Parameters *arg1 = (Filters::IIR::Biquad::Parameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Biquad::Parameters::f0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Biquad::Parameters::f0",1,"Filters::IIR::Biquad::Parameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Biquad::Parameters::f0",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Biquad__Parameters,0))){
    SWIG_fail_ptr("Parameters_f0_set",1,SWIGTYPE_p_Filters__IIR__Biquad__Parameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->f0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Parameters_f0_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Biquad::Parameters *arg1 = (Filters::IIR::Biquad::Parameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Biquad::Parameters::f0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Biquad::Parameters::f0",1,"Filters::IIR::Biquad::Parameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Biquad__Parameters,0))){
    SWIG_fail_ptr("Parameters_f0_get",1,SWIGTYPE_p_Filters__IIR__Biquad__Parameters);
  }
  
  result = (DspFloatType) ((arg1)->f0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Parameters_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Biquad::Parameters *arg1 = (Filters::IIR::Biquad::Parameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Biquad::Parameters::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Biquad::Parameters::Q",1,"Filters::IIR::Biquad::Parameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Biquad::Parameters::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Biquad__Parameters,0))){
    SWIG_fail_ptr("Parameters_Q_set",1,SWIGTYPE_p_Filters__IIR__Biquad__Parameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Parameters_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Biquad::Parameters *arg1 = (Filters::IIR::Biquad::Parameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Biquad::Parameters::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Biquad::Parameters::Q",1,"Filters::IIR::Biquad::Parameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Biquad__Parameters,0))){
    SWIG_fail_ptr("Parameters_Q_get",1,SWIGTYPE_p_Filters__IIR__Biquad__Parameters);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Parameters_dBGain_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Biquad::Parameters *arg1 = (Filters::IIR::Biquad::Parameters *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Biquad::Parameters::dBGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Biquad::Parameters::dBGain",1,"Filters::IIR::Biquad::Parameters *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Biquad::Parameters::dBGain",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Biquad__Parameters,0))){
    SWIG_fail_ptr("Parameters_dBGain_set",1,SWIGTYPE_p_Filters__IIR__Biquad__Parameters);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->dBGain = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Parameters_dBGain_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Biquad::Parameters *arg1 = (Filters::IIR::Biquad::Parameters *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Biquad::Parameters::dBGain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Biquad::Parameters::dBGain",1,"Filters::IIR::Biquad::Parameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Biquad__Parameters,0))){
    SWIG_fail_ptr("Parameters_dBGain_get",1,SWIGTYPE_p_Filters__IIR__Biquad__Parameters);
  }
  
  result = (DspFloatType) ((arg1)->dBGain);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Parameters(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Biquad::Parameters *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Biquad::Parameters::Parameters",0,0)
  result = (Filters::IIR::Biquad::Parameters *)new Filters::IIR::Biquad::Parameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__Biquad__Parameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Parameters(void *obj) {
Filters::IIR::Biquad::Parameters *arg1 = (Filters::IIR::Biquad::Parameters *) obj;
delete arg1;
}
static int _proxy__wrap_new_Parameters(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Parameters);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Parameters_attributes[] = {
    { "filterType", _wrap_Parameters_filterType_get, _wrap_Parameters_filterType_set },
    { "fs", _wrap_Parameters_fs_get, _wrap_Parameters_fs_set },
    { "f0", _wrap_Parameters_f0_get, _wrap_Parameters_f0_set },
    { "Q", _wrap_Parameters_Q_get, _wrap_Parameters_Q_set },
    { "dBGain", _wrap_Parameters_dBGain_get, _wrap_Parameters_dBGain_set },
    {0,0,0}
};
static swig_lua_method swig_Parameters_methods[]= {
    {0,0}
};
static swig_lua_method swig_Parameters_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Parameters_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Parameters_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Parameters_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Parameters_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Parameters_Sf_SwigStatic = {
    "Parameters",
    swig_Parameters_Sf_SwigStatic_methods,
    swig_Parameters_Sf_SwigStatic_attributes,
    swig_Parameters_Sf_SwigStatic_constants,
    swig_Parameters_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Parameters_bases[] = {0};
static const char *swig_Parameters_base_names[] = {0};
static swig_lua_class _wrap_class_Parameters = { "Parameters", "Parameters", &SWIGTYPE_p_Filters__IIR__Biquad__Parameters,_proxy__wrap_new_Parameters, swig_delete_Parameters, swig_Parameters_methods, swig_Parameters_attributes, &swig_Parameters_Sf_SwigStatic, swig_Parameters_meta, swig_Parameters_bases, swig_Parameters_base_names };

static int _wrap_new_IIRBiquadFilter(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Biquad::Biquad *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Biquad::Biquad::Biquad",0,0)
  result = (Filters::IIR::Biquad::Biquad *)new Filters::IIR::Biquad::Biquad();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__Biquad__Biquad,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBiquadFilter_setParams(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Biquad::Biquad *arg1 = (Filters::IIR::Biquad::Biquad *) 0 ;
  Filters::IIR::Biquad::Parameters *arg2 = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Biquad::Biquad::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::setParams",1,"Filters::IIR::Biquad::Biquad *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::setParams",2,"Filters::IIR::Biquad::Parameters const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Biquad__Biquad,0))){
    SWIG_fail_ptr("IIRBiquadFilter_setParams",1,SWIGTYPE_p_Filters__IIR__Biquad__Biquad);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__IIR__Biquad__Parameters,0))){
    SWIG_fail_ptr("IIRBiquadFilter_setParams",2,SWIGTYPE_p_Filters__IIR__Biquad__Parameters);
  }
  
  (arg1)->setParams((Filters::IIR::Biquad::Parameters const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBiquadFilter_getParams(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Biquad::Biquad *arg1 = (Filters::IIR::Biquad::Biquad *) 0 ;
  Filters::IIR::Biquad::Parameters result;
  
  SWIG_check_num_args("Filters::IIR::Biquad::Biquad::getParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::getParams",1,"Filters::IIR::Biquad::Biquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Biquad__Biquad,0))){
    SWIG_fail_ptr("IIRBiquadFilter_getParams",1,SWIGTYPE_p_Filters__IIR__Biquad__Biquad);
  }
  
  result = (arg1)->getParams();
  {
    Filters::IIR::Biquad::Parameters * resultptr = new Filters::IIR::Biquad::Parameters((const Filters::IIR::Biquad::Parameters &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Filters__IIR__Biquad__Parameters,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBiquadFilter_process(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Biquad::Biquad *arg1 = (Filters::IIR::Biquad::Biquad *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Biquad::Biquad::process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::process",1,"Filters::IIR::Biquad::Biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::process",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Biquad__Biquad,0))){
    SWIG_fail_ptr("IIRBiquadFilter_process",1,SWIGTYPE_p_Filters__IIR__Biquad__Biquad);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBiquadFilter_setFilterType(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Biquad::Biquad *arg1 = (Filters::IIR::Biquad::Biquad *) 0 ;
  Filters::IIR::Biquad::FilterType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Biquad::Biquad::setFilterType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::setFilterType",1,"Filters::IIR::Biquad::Biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::setFilterType",2,"Filters::IIR::Biquad::FilterType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Biquad__Biquad,0))){
    SWIG_fail_ptr("IIRBiquadFilter_setFilterType",1,SWIGTYPE_p_Filters__IIR__Biquad__Biquad);
  }
  
  arg2 = (Filters::IIR::Biquad::FilterType)(int)lua_tonumber(L, 2);
  (arg1)->setFilterType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBiquadFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Biquad::Biquad *arg1 = (Filters::IIR::Biquad::Biquad *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Biquad::Biquad::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::setCutoff",1,"Filters::IIR::Biquad::Biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Biquad__Biquad,0))){
    SWIG_fail_ptr("IIRBiquadFilter_setCutoff",1,SWIGTYPE_p_Filters__IIR__Biquad__Biquad);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBiquadFilter_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Biquad::Biquad *arg1 = (Filters::IIR::Biquad::Biquad *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Biquad::Biquad::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::setQ",1,"Filters::IIR::Biquad::Biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Biquad__Biquad,0))){
    SWIG_fail_ptr("IIRBiquadFilter_setQ",1,SWIGTYPE_p_Filters__IIR__Biquad__Biquad);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBiquadFilter_setGain(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Biquad::Biquad *arg1 = (Filters::IIR::Biquad::Biquad *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Biquad::Biquad::setGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::setGain",1,"Filters::IIR::Biquad::Biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::setGain",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Biquad__Biquad,0))){
    SWIG_fail_ptr("IIRBiquadFilter_setGain",1,SWIGTYPE_p_Filters__IIR__Biquad__Biquad);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setGain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBiquadFilter_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Biquad::Biquad *arg1 = (Filters::IIR::Biquad::Biquad *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::Biquad::Biquad::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::setPort",1,"Filters::IIR::Biquad::Biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Biquad__Biquad,0))){
    SWIG_fail_ptr("IIRBiquadFilter_setPort",1,SWIGTYPE_p_Filters__IIR__Biquad__Biquad);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBiquadFilter_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Biquad::Biquad *arg1 = (Filters::IIR::Biquad::Biquad *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Biquad::Biquad::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::Tick",1,"Filters::IIR::Biquad::Biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Biquad__Biquad,0))){
    SWIG_fail_ptr("IIRBiquadFilter_Tick",1,SWIGTYPE_p_Filters__IIR__Biquad__Biquad);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBiquadFilter_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Biquad::Biquad *arg1 = (Filters::IIR::Biquad::Biquad *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Biquad::Biquad::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::Tick",1,"Filters::IIR::Biquad::Biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Biquad__Biquad,0))){
    SWIG_fail_ptr("IIRBiquadFilter_Tick",1,SWIGTYPE_p_Filters__IIR__Biquad__Biquad);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBiquadFilter_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Biquad::Biquad *arg1 = (Filters::IIR::Biquad::Biquad *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Biquad::Biquad::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::Tick",1,"Filters::IIR::Biquad::Biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Biquad__Biquad,0))){
    SWIG_fail_ptr("IIRBiquadFilter_Tick",1,SWIGTYPE_p_Filters__IIR__Biquad__Biquad);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBiquadFilter_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Biquad::Biquad *arg1 = (Filters::IIR::Biquad::Biquad *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Biquad::Biquad::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::Tick",1,"Filters::IIR::Biquad::Biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Biquad__Biquad,0))){
    SWIG_fail_ptr("IIRBiquadFilter_Tick",1,SWIGTYPE_p_Filters__IIR__Biquad__Biquad);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBiquadFilter_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Biquad__Biquad, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRBiquadFilter_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Biquad__Biquad, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRBiquadFilter_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Biquad__Biquad, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRBiquadFilter_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Biquad__Biquad, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRBiquadFilter_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRBiquadFilter_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::Biquad::Biquad::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Biquad::Biquad::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Biquad::Biquad::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Biquad::Biquad::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_IIRBiquadFilter_morph__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Biquad::Biquad *arg1 = (Filters::IIR::Biquad::Biquad *) 0 ;
  Filters::IIR::Biquad::Biquad *arg2 = 0 ;
  float arg3 ;
  
  SWIG_check_num_args("Filters::IIR::Biquad::Biquad::morph",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::morph",1,"Filters::IIR::Biquad::Biquad *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::morph",2,"Filters::IIR::Biquad::Biquad &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::morph",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Biquad__Biquad,0))){
    SWIG_fail_ptr("IIRBiquadFilter_morph",1,SWIGTYPE_p_Filters__IIR__Biquad__Biquad);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__IIR__Biquad__Biquad,0))){
    SWIG_fail_ptr("IIRBiquadFilter_morph",2,SWIGTYPE_p_Filters__IIR__Biquad__Biquad);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->morph(*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBiquadFilter_morph__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Biquad::Biquad *arg1 = (Filters::IIR::Biquad::Biquad *) 0 ;
  Filters::IIR::Biquad::Biquad *arg2 = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Biquad::Biquad::morph",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::morph",1,"Filters::IIR::Biquad::Biquad *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::Biquad::Biquad::morph",2,"Filters::IIR::Biquad::Biquad &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Biquad__Biquad,0))){
    SWIG_fail_ptr("IIRBiquadFilter_morph",1,SWIGTYPE_p_Filters__IIR__Biquad__Biquad);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__IIR__Biquad__Biquad,0))){
    SWIG_fail_ptr("IIRBiquadFilter_morph",2,SWIGTYPE_p_Filters__IIR__Biquad__Biquad);
  }
  
  (arg1)->morph(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBiquadFilter_morph(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Biquad__Biquad, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Biquad__Biquad, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IIRBiquadFilter_morph__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Biquad__Biquad, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Biquad__Biquad, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRBiquadFilter_morph__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRBiquadFilter_morph'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::Biquad::Biquad::morph(Filters::IIR::Biquad::Biquad &,float)\n"
    "    Filters::IIR::Biquad::Biquad::morph(Filters::IIR::Biquad::Biquad &)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRBiquadFilter(void *obj) {
Filters::IIR::Biquad::Biquad *arg1 = (Filters::IIR::Biquad::Biquad *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRBiquadFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRBiquadFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRBiquadFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IIRBiquadFilter_methods[]= {
    { "setParams", _wrap_IIRBiquadFilter_setParams},
    { "getParams", _wrap_IIRBiquadFilter_getParams},
    { "process", _wrap_IIRBiquadFilter_process},
    { "setFilterType", _wrap_IIRBiquadFilter_setFilterType},
    { "setCutoff", _wrap_IIRBiquadFilter_setCutoff},
    { "setQ", _wrap_IIRBiquadFilter_setQ},
    { "setGain", _wrap_IIRBiquadFilter_setGain},
    { "setPort", _wrap_IIRBiquadFilter_setPort},
    { "Tick", _wrap_IIRBiquadFilter_Tick},
    { "morph", _wrap_IIRBiquadFilter_morph},
    {0,0}
};
static swig_lua_method swig_IIRBiquadFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRBiquadFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRBiquadFilter_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_TYPE", Filters::IIR::Biquad::Biquad::PORT_TYPE)},
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::Biquad::Biquad::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_Q", Filters::IIR::Biquad::Biquad::PORT_Q)},
    {SWIG_LUA_CONSTTAB_INT("PORT_GAIN", Filters::IIR::Biquad::Biquad::PORT_GAIN)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRBiquadFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRBiquadFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRBiquadFilter_Sf_SwigStatic = {
    "IIRBiquadFilter",
    swig_IIRBiquadFilter_Sf_SwigStatic_methods,
    swig_IIRBiquadFilter_Sf_SwigStatic_attributes,
    swig_IIRBiquadFilter_Sf_SwigStatic_constants,
    swig_IIRBiquadFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRBiquadFilter_bases[] = {0,0};
static const char *swig_IIRBiquadFilter_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRBiquadFilter = { "IIRBiquadFilter", "IIRBiquadFilter", &SWIGTYPE_p_Filters__IIR__Biquad__Biquad,_proxy__wrap_new_IIRBiquadFilter, swig_delete_IIRBiquadFilter, swig_IIRBiquadFilter_methods, swig_IIRBiquadFilter_attributes, &swig_IIRBiquadFilter_Sf_SwigStatic, swig_IIRBiquadFilter_meta, swig_IIRBiquadFilter_bases, swig_IIRBiquadFilter_base_names };

static int _wrap_new_Biquad__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Nigel::Biquad *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Nigel::Biquad::Biquad",0,0)
  result = (Filters::IIR::Nigel::Biquad *)new Filters::IIR::Nigel::Biquad();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__Nigel__Biquad,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Biquad__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::Nigel::Biquad *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Nigel::Biquad::Biquad",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::Nigel::Biquad::Biquad",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Nigel::Biquad::Biquad",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Nigel::Biquad::Biquad",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Nigel::Biquad::Biquad",4,"DspFloatType");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::Nigel::Biquad *)new Filters::IIR::Nigel::Biquad(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__Nigel__Biquad,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Biquad(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Biquad__SWIG_0(L);
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Biquad__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Biquad'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::Nigel::Biquad::Biquad()\n"
    "    Filters::IIR::Nigel::Biquad::Biquad(int,DspFloatType,DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_Biquad_setType(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Nigel::Biquad *arg1 = (Filters::IIR::Nigel::Biquad *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Nigel::Biquad::setType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Nigel::Biquad::setType",1,"Filters::IIR::Nigel::Biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Nigel::Biquad::setType",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Nigel__Biquad,0))){
    SWIG_fail_ptr("Biquad_setType",1,SWIGTYPE_p_Filters__IIR__Nigel__Biquad);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Nigel::Biquad *arg1 = (Filters::IIR::Nigel::Biquad *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Nigel::Biquad::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Nigel::Biquad::setQ",1,"Filters::IIR::Nigel::Biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Nigel::Biquad::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Nigel__Biquad,0))){
    SWIG_fail_ptr("Biquad_setQ",1,SWIGTYPE_p_Filters__IIR__Nigel__Biquad);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_setFc(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Nigel::Biquad *arg1 = (Filters::IIR::Nigel::Biquad *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Nigel::Biquad::setFc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Nigel::Biquad::setFc",1,"Filters::IIR::Nigel::Biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Nigel::Biquad::setFc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Nigel__Biquad,0))){
    SWIG_fail_ptr("Biquad_setFc",1,SWIGTYPE_p_Filters__IIR__Nigel__Biquad);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setFc(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_setPeakGain(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Nigel::Biquad *arg1 = (Filters::IIR::Nigel::Biquad *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Nigel::Biquad::setPeakGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Nigel::Biquad::setPeakGain",1,"Filters::IIR::Nigel::Biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Nigel::Biquad::setPeakGain",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Nigel__Biquad,0))){
    SWIG_fail_ptr("Biquad_setPeakGain",1,SWIGTYPE_p_Filters__IIR__Nigel__Biquad);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setPeakGain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Nigel::Biquad *arg1 = (Filters::IIR::Nigel::Biquad *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::Nigel::Biquad::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Nigel::Biquad::setPort",1,"Filters::IIR::Nigel::Biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Nigel::Biquad::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Nigel::Biquad::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Nigel__Biquad,0))){
    SWIG_fail_ptr("Biquad_setPort",1,SWIGTYPE_p_Filters__IIR__Nigel__Biquad);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_setBiquad(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Nigel::Biquad *arg1 = (Filters::IIR::Nigel::Biquad *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  
  SWIG_check_num_args("Filters::IIR::Nigel::Biquad::setBiquad",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Nigel::Biquad::setBiquad",1,"Filters::IIR::Nigel::Biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Nigel::Biquad::setBiquad",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Nigel::Biquad::setBiquad",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Nigel::Biquad::setBiquad",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::Nigel::Biquad::setBiquad",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Nigel__Biquad,0))){
    SWIG_fail_ptr("Biquad_setBiquad",1,SWIGTYPE_p_Filters__IIR__Nigel__Biquad);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  (arg1)->setBiquad(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_process(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Nigel::Biquad *arg1 = (Filters::IIR::Nigel::Biquad *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("Filters::IIR::Nigel::Biquad::process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Nigel::Biquad::process",1,"Filters::IIR::Nigel::Biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Nigel::Biquad::process",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Nigel__Biquad,0))){
    SWIG_fail_ptr("Biquad_process",1,SWIGTYPE_p_Filters__IIR__Nigel__Biquad);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Biquad(void *obj) {
Filters::IIR::Nigel::Biquad *arg1 = (Filters::IIR::Nigel::Biquad *) obj;
delete arg1;
}
static int _proxy__wrap_new_Biquad(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Biquad);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Biquad_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Biquad_methods[]= {
    { "setType", _wrap_Biquad_setType},
    { "setQ", _wrap_Biquad_setQ},
    { "setFc", _wrap_Biquad_setFc},
    { "setPeakGain", _wrap_Biquad_setPeakGain},
    { "setPort", _wrap_Biquad_setPort},
    { "setBiquad", _wrap_Biquad_setBiquad},
    { "process", _wrap_Biquad_process},
    {0,0}
};
static swig_lua_method swig_Biquad_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Biquad_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Biquad_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_TYPE", Filters::IIR::Nigel::Biquad::PORT_TYPE)},
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::Nigel::Biquad::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_Q", Filters::IIR::Nigel::Biquad::PORT_Q)},
    {SWIG_LUA_CONSTTAB_INT("PORT_GAIN", Filters::IIR::Nigel::Biquad::PORT_GAIN)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Biquad_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Biquad_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Biquad_Sf_SwigStatic = {
    "Biquad",
    swig_Biquad_Sf_SwigStatic_methods,
    swig_Biquad_Sf_SwigStatic_attributes,
    swig_Biquad_Sf_SwigStatic_constants,
    swig_Biquad_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Biquad_bases[] = {0};
static const char *swig_Biquad_base_names[] = {0};
static swig_lua_class _wrap_class_Biquad = { "Biquad", "Biquad", &SWIGTYPE_p_Filters__IIR__Nigel__Biquad,_proxy__wrap_new_Biquad, swig_delete_Biquad, swig_Biquad_methods, swig_Biquad_attributes, &swig_Biquad_Sf_SwigStatic, swig_Biquad_meta, swig_Biquad_bases, swig_Biquad_base_names };

static int _wrap_IIRBesselLowPass_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::LowPassFilter *arg1 = (Filters::IIR::Bessel::LowPassFilter *) 0 ;
  Dsp::Bessel::LowPass< 32 > arg2 ;
  Dsp::Bessel::LowPass< 32 > *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::LowPassFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::prototype",1,"Filters::IIR::Bessel::LowPassFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::prototype",2,"Dsp::Bessel::LowPass< 32 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter,0))){
    SWIG_fail_ptr("IIRBesselLowPass_prototype_set",1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__Bessel__LowPassT_32_t,0))){
    SWIG_fail_ptr("IIRBesselLowPass_prototype_set",2,SWIGTYPE_p_Dsp__Bessel__LowPassT_32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselLowPass_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::LowPassFilter *arg1 = (Filters::IIR::Bessel::LowPassFilter *) 0 ;
  Dsp::Bessel::LowPass< 32 > result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::LowPassFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::prototype",1,"Filters::IIR::Bessel::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter,0))){
    SWIG_fail_ptr("IIRBesselLowPass_prototype_get",1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::Bessel::LowPass< 32 > * resultptr = new Dsp::Bessel::LowPass< 32 >((const Dsp::Bessel::LowPass< 32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__Bessel__LowPassT_32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselLowPass_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::LowPassFilter *arg1 = (Filters::IIR::Bessel::LowPassFilter *) 0 ;
  Filters::BiquadTransposedTypeIICascade *arg2 = (Filters::BiquadTransposedTypeIICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::LowPassFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::biquads",1,"Filters::IIR::Bessel::LowPassFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::biquads",2,"Filters::BiquadTransposedTypeIICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter,0))){
    SWIG_fail_ptr("IIRBesselLowPass_biquads_set",1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0))){
    SWIG_fail_ptr("IIRBesselLowPass_biquads_set",2,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselLowPass_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::LowPassFilter *arg1 = (Filters::IIR::Bessel::LowPassFilter *) 0 ;
  Filters::BiquadTransposedTypeIICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::LowPassFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::biquads",1,"Filters::IIR::Bessel::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter,0))){
    SWIG_fail_ptr("IIRBesselLowPass_biquads_get",1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter);
  }
  
  result = (Filters::BiquadTransposedTypeIICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselLowPass_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::LowPassFilter *arg1 = (Filters::IIR::Bessel::LowPassFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::LowPassFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::order",1,"Filters::IIR::Bessel::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter,0))){
    SWIG_fail_ptr("IIRBesselLowPass_order_set",1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselLowPass_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::LowPassFilter *arg1 = (Filters::IIR::Bessel::LowPassFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::LowPassFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::order",1,"Filters::IIR::Bessel::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter,0))){
    SWIG_fail_ptr("IIRBesselLowPass_order_get",1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselLowPass_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::LowPassFilter *arg1 = (Filters::IIR::Bessel::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::LowPassFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::fc",1,"Filters::IIR::Bessel::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter,0))){
    SWIG_fail_ptr("IIRBesselLowPass_fc_set",1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselLowPass_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::LowPassFilter *arg1 = (Filters::IIR::Bessel::LowPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::LowPassFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::fc",1,"Filters::IIR::Bessel::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter,0))){
    SWIG_fail_ptr("IIRBesselLowPass_fc_get",1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselLowPass_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::LowPassFilter *arg1 = (Filters::IIR::Bessel::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::LowPassFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::sr",1,"Filters::IIR::Bessel::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter,0))){
    SWIG_fail_ptr("IIRBesselLowPass_sr_set",1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselLowPass_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::LowPassFilter *arg1 = (Filters::IIR::Bessel::LowPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::LowPassFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::sr",1,"Filters::IIR::Bessel::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter,0))){
    SWIG_fail_ptr("IIRBesselLowPass_sr_get",1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselLowPass_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::LowPassFilter *arg1 = (Filters::IIR::Bessel::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::LowPassFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::R",1,"Filters::IIR::Bessel::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter,0))){
    SWIG_fail_ptr("IIRBesselLowPass_R_set",1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselLowPass_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::LowPassFilter *arg1 = (Filters::IIR::Bessel::LowPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::LowPassFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::R",1,"Filters::IIR::Bessel::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter,0))){
    SWIG_fail_ptr("IIRBesselLowPass_R_get",1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRBesselLowPass(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::Bessel::LowPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::LowPassFilter::LowPassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::LowPassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::LowPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::LowPassFilter",3,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::Bessel::LowPassFilter *)new Filters::IIR::Bessel::LowPassFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselLowPass_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::LowPassFilter *arg1 = (Filters::IIR::Bessel::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::LowPassFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::setCutoff",1,"Filters::IIR::Bessel::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter,0))){
    SWIG_fail_ptr("IIRBesselLowPass_setCutoff",1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselLowPass_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::LowPassFilter *arg1 = (Filters::IIR::Bessel::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::LowPassFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::setQ",1,"Filters::IIR::Bessel::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter,0))){
    SWIG_fail_ptr("IIRBesselLowPass_setQ",1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselLowPass_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::LowPassFilter *arg1 = (Filters::IIR::Bessel::LowPassFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::LowPassFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::setPort",1,"Filters::IIR::Bessel::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter,0))){
    SWIG_fail_ptr("IIRBesselLowPass_setPort",1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselLowPass_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::LowPassFilter *arg1 = (Filters::IIR::Bessel::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::LowPassFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::Tick",1,"Filters::IIR::Bessel::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter,0))){
    SWIG_fail_ptr("IIRBesselLowPass_Tick",1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselLowPass_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::LowPassFilter *arg1 = (Filters::IIR::Bessel::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::LowPassFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::Tick",1,"Filters::IIR::Bessel::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter,0))){
    SWIG_fail_ptr("IIRBesselLowPass_Tick",1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselLowPass_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::LowPassFilter *arg1 = (Filters::IIR::Bessel::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::LowPassFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::Tick",1,"Filters::IIR::Bessel::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter,0))){
    SWIG_fail_ptr("IIRBesselLowPass_Tick",1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselLowPass_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::LowPassFilter *arg1 = (Filters::IIR::Bessel::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::LowPassFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::Tick",1,"Filters::IIR::Bessel::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::LowPassFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter,0))){
    SWIG_fail_ptr("IIRBesselLowPass_Tick",1,SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselLowPass_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRBesselLowPass_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRBesselLowPass_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRBesselLowPass_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRBesselLowPass_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRBesselLowPass_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::Bessel::LowPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Bessel::LowPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Bessel::LowPassFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Bessel::LowPassFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRBesselLowPass(void *obj) {
Filters::IIR::Bessel::LowPassFilter *arg1 = (Filters::IIR::Bessel::LowPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRBesselLowPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRBesselLowPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRBesselLowPass_attributes[] = {
    { "prototype", _wrap_IIRBesselLowPass_prototype_get, _wrap_IIRBesselLowPass_prototype_set },
    { "biquads", _wrap_IIRBesselLowPass_biquads_get, _wrap_IIRBesselLowPass_biquads_set },
    { "order", _wrap_IIRBesselLowPass_order_get, _wrap_IIRBesselLowPass_order_set },
    { "fc", _wrap_IIRBesselLowPass_fc_get, _wrap_IIRBesselLowPass_fc_set },
    { "sr", _wrap_IIRBesselLowPass_sr_get, _wrap_IIRBesselLowPass_sr_set },
    { "R", _wrap_IIRBesselLowPass_R_get, _wrap_IIRBesselLowPass_R_set },
    {0,0,0}
};
static swig_lua_method swig_IIRBesselLowPass_methods[]= {
    { "setCutoff", _wrap_IIRBesselLowPass_setCutoff},
    { "setQ", _wrap_IIRBesselLowPass_setQ},
    { "setPort", _wrap_IIRBesselLowPass_setPort},
    { "Tick", _wrap_IIRBesselLowPass_Tick},
    {0,0}
};
static swig_lua_method swig_IIRBesselLowPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRBesselLowPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRBesselLowPass_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_ORDER", Filters::IIR::Bessel::LowPassFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::Bessel::LowPassFilter::PORT_CUTOFF)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRBesselLowPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRBesselLowPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRBesselLowPass_Sf_SwigStatic = {
    "IIRBesselLowPass",
    swig_IIRBesselLowPass_Sf_SwigStatic_methods,
    swig_IIRBesselLowPass_Sf_SwigStatic_attributes,
    swig_IIRBesselLowPass_Sf_SwigStatic_constants,
    swig_IIRBesselLowPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRBesselLowPass_bases[] = {0,0};
static const char *swig_IIRBesselLowPass_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRBesselLowPass = { "IIRBesselLowPass", "IIRBesselLowPass", &SWIGTYPE_p_Filters__IIR__Bessel__LowPassFilter,_proxy__wrap_new_IIRBesselLowPass, swig_delete_IIRBesselLowPass, swig_IIRBesselLowPass_methods, swig_IIRBesselLowPass_attributes, &swig_IIRBesselLowPass_Sf_SwigStatic, swig_IIRBesselLowPass_meta, swig_IIRBesselLowPass_bases, swig_IIRBesselLowPass_base_names };

static int _wrap_IIRBesselHighPass_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::HighPassFilter *arg1 = (Filters::IIR::Bessel::HighPassFilter *) 0 ;
  Dsp::Bessel::HighPass< 32 > arg2 ;
  Dsp::Bessel::HighPass< 32 > *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::HighPassFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::prototype",1,"Filters::IIR::Bessel::HighPassFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::prototype",2,"Dsp::Bessel::HighPass< 32 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter,0))){
    SWIG_fail_ptr("IIRBesselHighPass_prototype_set",1,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__Bessel__HighPassT_32_t,0))){
    SWIG_fail_ptr("IIRBesselHighPass_prototype_set",2,SWIGTYPE_p_Dsp__Bessel__HighPassT_32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselHighPass_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::HighPassFilter *arg1 = (Filters::IIR::Bessel::HighPassFilter *) 0 ;
  Dsp::Bessel::HighPass< 32 > result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::HighPassFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::prototype",1,"Filters::IIR::Bessel::HighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter,0))){
    SWIG_fail_ptr("IIRBesselHighPass_prototype_get",1,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::Bessel::HighPass< 32 > * resultptr = new Dsp::Bessel::HighPass< 32 >((const Dsp::Bessel::HighPass< 32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__Bessel__HighPassT_32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselHighPass_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::HighPassFilter *arg1 = (Filters::IIR::Bessel::HighPassFilter *) 0 ;
  Filters::BiquadTransposedTypeIICascade *arg2 = (Filters::BiquadTransposedTypeIICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::HighPassFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::biquads",1,"Filters::IIR::Bessel::HighPassFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::biquads",2,"Filters::BiquadTransposedTypeIICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter,0))){
    SWIG_fail_ptr("IIRBesselHighPass_biquads_set",1,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0))){
    SWIG_fail_ptr("IIRBesselHighPass_biquads_set",2,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselHighPass_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::HighPassFilter *arg1 = (Filters::IIR::Bessel::HighPassFilter *) 0 ;
  Filters::BiquadTransposedTypeIICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::HighPassFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::biquads",1,"Filters::IIR::Bessel::HighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter,0))){
    SWIG_fail_ptr("IIRBesselHighPass_biquads_get",1,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter);
  }
  
  result = (Filters::BiquadTransposedTypeIICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselHighPass_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::HighPassFilter *arg1 = (Filters::IIR::Bessel::HighPassFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::HighPassFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::order",1,"Filters::IIR::Bessel::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter,0))){
    SWIG_fail_ptr("IIRBesselHighPass_order_set",1,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselHighPass_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::HighPassFilter *arg1 = (Filters::IIR::Bessel::HighPassFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::HighPassFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::order",1,"Filters::IIR::Bessel::HighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter,0))){
    SWIG_fail_ptr("IIRBesselHighPass_order_get",1,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselHighPass_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::HighPassFilter *arg1 = (Filters::IIR::Bessel::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::HighPassFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::fc",1,"Filters::IIR::Bessel::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter,0))){
    SWIG_fail_ptr("IIRBesselHighPass_fc_set",1,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselHighPass_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::HighPassFilter *arg1 = (Filters::IIR::Bessel::HighPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::HighPassFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::fc",1,"Filters::IIR::Bessel::HighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter,0))){
    SWIG_fail_ptr("IIRBesselHighPass_fc_get",1,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselHighPass_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::HighPassFilter *arg1 = (Filters::IIR::Bessel::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::HighPassFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::sr",1,"Filters::IIR::Bessel::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter,0))){
    SWIG_fail_ptr("IIRBesselHighPass_sr_set",1,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselHighPass_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::HighPassFilter *arg1 = (Filters::IIR::Bessel::HighPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::HighPassFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::sr",1,"Filters::IIR::Bessel::HighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter,0))){
    SWIG_fail_ptr("IIRBesselHighPass_sr_get",1,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRBesselHighPass(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::Bessel::HighPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::HighPassFilter::HighPassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::HighPassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::HighPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::HighPassFilter",3,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::Bessel::HighPassFilter *)new Filters::IIR::Bessel::HighPassFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselHighPass_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::HighPassFilter *arg1 = (Filters::IIR::Bessel::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::HighPassFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::setCutoff",1,"Filters::IIR::Bessel::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter,0))){
    SWIG_fail_ptr("IIRBesselHighPass_setCutoff",1,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselHighPass_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::HighPassFilter *arg1 = (Filters::IIR::Bessel::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::HighPassFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::setQ",1,"Filters::IIR::Bessel::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter,0))){
    SWIG_fail_ptr("IIRBesselHighPass_setQ",1,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselHighPass_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::HighPassFilter *arg1 = (Filters::IIR::Bessel::HighPassFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::HighPassFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::setPort",1,"Filters::IIR::Bessel::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter,0))){
    SWIG_fail_ptr("IIRBesselHighPass_setPort",1,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselHighPass_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::HighPassFilter *arg1 = (Filters::IIR::Bessel::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::HighPassFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::Tick",1,"Filters::IIR::Bessel::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter,0))){
    SWIG_fail_ptr("IIRBesselHighPass_Tick",1,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselHighPass_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::HighPassFilter *arg1 = (Filters::IIR::Bessel::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::HighPassFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::Tick",1,"Filters::IIR::Bessel::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter,0))){
    SWIG_fail_ptr("IIRBesselHighPass_Tick",1,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselHighPass_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::HighPassFilter *arg1 = (Filters::IIR::Bessel::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::HighPassFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::Tick",1,"Filters::IIR::Bessel::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter,0))){
    SWIG_fail_ptr("IIRBesselHighPass_Tick",1,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselHighPass_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::HighPassFilter *arg1 = (Filters::IIR::Bessel::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::HighPassFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::Tick",1,"Filters::IIR::Bessel::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::HighPassFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter,0))){
    SWIG_fail_ptr("IIRBesselHighPass_Tick",1,SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselHighPass_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRBesselHighPass_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRBesselHighPass_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRBesselHighPass_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRBesselHighPass_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRBesselHighPass_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::Bessel::HighPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Bessel::HighPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Bessel::HighPassFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Bessel::HighPassFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRBesselHighPass(void *obj) {
Filters::IIR::Bessel::HighPassFilter *arg1 = (Filters::IIR::Bessel::HighPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRBesselHighPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRBesselHighPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRBesselHighPass_attributes[] = {
    { "prototype", _wrap_IIRBesselHighPass_prototype_get, _wrap_IIRBesselHighPass_prototype_set },
    { "biquads", _wrap_IIRBesselHighPass_biquads_get, _wrap_IIRBesselHighPass_biquads_set },
    { "order", _wrap_IIRBesselHighPass_order_get, _wrap_IIRBesselHighPass_order_set },
    { "fc", _wrap_IIRBesselHighPass_fc_get, _wrap_IIRBesselHighPass_fc_set },
    { "sr", _wrap_IIRBesselHighPass_sr_get, _wrap_IIRBesselHighPass_sr_set },
    {0,0,0}
};
static swig_lua_method swig_IIRBesselHighPass_methods[]= {
    { "setCutoff", _wrap_IIRBesselHighPass_setCutoff},
    { "setQ", _wrap_IIRBesselHighPass_setQ},
    { "setPort", _wrap_IIRBesselHighPass_setPort},
    { "Tick", _wrap_IIRBesselHighPass_Tick},
    {0,0}
};
static swig_lua_method swig_IIRBesselHighPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRBesselHighPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRBesselHighPass_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_ORDER", Filters::IIR::Bessel::HighPassFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::Bessel::HighPassFilter::PORT_CUTOFF)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRBesselHighPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRBesselHighPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRBesselHighPass_Sf_SwigStatic = {
    "IIRBesselHighPass",
    swig_IIRBesselHighPass_Sf_SwigStatic_methods,
    swig_IIRBesselHighPass_Sf_SwigStatic_attributes,
    swig_IIRBesselHighPass_Sf_SwigStatic_constants,
    swig_IIRBesselHighPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRBesselHighPass_bases[] = {0,0};
static const char *swig_IIRBesselHighPass_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRBesselHighPass = { "IIRBesselHighPass", "IIRBesselHighPass", &SWIGTYPE_p_Filters__IIR__Bessel__HighPassFilter,_proxy__wrap_new_IIRBesselHighPass, swig_delete_IIRBesselHighPass, swig_IIRBesselHighPass_methods, swig_IIRBesselHighPass_attributes, &swig_IIRBesselHighPass_Sf_SwigStatic, swig_IIRBesselHighPass_meta, swig_IIRBesselHighPass_bases, swig_IIRBesselHighPass_base_names };

static int _wrap_IIRBesselBandPass_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandPassFilter *arg1 = (Filters::IIR::Bessel::BandPassFilter *) 0 ;
  Dsp::Bessel::BandPass< 32 > arg2 ;
  Dsp::Bessel::BandPass< 32 > *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandPassFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::prototype",1,"Filters::IIR::Bessel::BandPassFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::prototype",2,"Dsp::Bessel::BandPass< 32 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter,0))){
    SWIG_fail_ptr("IIRBesselBandPass_prototype_set",1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__Bessel__BandPassT_32_t,0))){
    SWIG_fail_ptr("IIRBesselBandPass_prototype_set",2,SWIGTYPE_p_Dsp__Bessel__BandPassT_32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandPass_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandPassFilter *arg1 = (Filters::IIR::Bessel::BandPassFilter *) 0 ;
  Dsp::Bessel::BandPass< 32 > result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandPassFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::prototype",1,"Filters::IIR::Bessel::BandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter,0))){
    SWIG_fail_ptr("IIRBesselBandPass_prototype_get",1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::Bessel::BandPass< 32 > * resultptr = new Dsp::Bessel::BandPass< 32 >((const Dsp::Bessel::BandPass< 32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__Bessel__BandPassT_32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandPass_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandPassFilter *arg1 = (Filters::IIR::Bessel::BandPassFilter *) 0 ;
  Filters::BiquadTransposedTypeIICascade *arg2 = (Filters::BiquadTransposedTypeIICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandPassFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::biquads",1,"Filters::IIR::Bessel::BandPassFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::biquads",2,"Filters::BiquadTransposedTypeIICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter,0))){
    SWIG_fail_ptr("IIRBesselBandPass_biquads_set",1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0))){
    SWIG_fail_ptr("IIRBesselBandPass_biquads_set",2,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandPass_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandPassFilter *arg1 = (Filters::IIR::Bessel::BandPassFilter *) 0 ;
  Filters::BiquadTransposedTypeIICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandPassFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::biquads",1,"Filters::IIR::Bessel::BandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter,0))){
    SWIG_fail_ptr("IIRBesselBandPass_biquads_get",1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter);
  }
  
  result = (Filters::BiquadTransposedTypeIICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandPass_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandPassFilter *arg1 = (Filters::IIR::Bessel::BandPassFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandPassFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::order",1,"Filters::IIR::Bessel::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter,0))){
    SWIG_fail_ptr("IIRBesselBandPass_order_set",1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandPass_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandPassFilter *arg1 = (Filters::IIR::Bessel::BandPassFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandPassFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::order",1,"Filters::IIR::Bessel::BandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter,0))){
    SWIG_fail_ptr("IIRBesselBandPass_order_get",1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandPass_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandPassFilter *arg1 = (Filters::IIR::Bessel::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandPassFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::fc",1,"Filters::IIR::Bessel::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter,0))){
    SWIG_fail_ptr("IIRBesselBandPass_fc_set",1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandPass_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandPassFilter *arg1 = (Filters::IIR::Bessel::BandPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandPassFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::fc",1,"Filters::IIR::Bessel::BandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter,0))){
    SWIG_fail_ptr("IIRBesselBandPass_fc_get",1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandPass_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandPassFilter *arg1 = (Filters::IIR::Bessel::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandPassFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::sr",1,"Filters::IIR::Bessel::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter,0))){
    SWIG_fail_ptr("IIRBesselBandPass_sr_set",1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandPass_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandPassFilter *arg1 = (Filters::IIR::Bessel::BandPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandPassFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::sr",1,"Filters::IIR::Bessel::BandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter,0))){
    SWIG_fail_ptr("IIRBesselBandPass_sr_get",1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandPass_bw_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandPassFilter *arg1 = (Filters::IIR::Bessel::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandPassFilter::bw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::bw",1,"Filters::IIR::Bessel::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::bw",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter,0))){
    SWIG_fail_ptr("IIRBesselBandPass_bw_set",1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->bw = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandPass_bw_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandPassFilter *arg1 = (Filters::IIR::Bessel::BandPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandPassFilter::bw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::bw",1,"Filters::IIR::Bessel::BandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter,0))){
    SWIG_fail_ptr("IIRBesselBandPass_bw_get",1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->bw);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRBesselBandPass(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::Bessel::BandPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandPassFilter::BandPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::BandPassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::BandPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::BandPassFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::BandPassFilter",4,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::Bessel::BandPassFilter *)new Filters::IIR::Bessel::BandPassFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandPass_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandPassFilter *arg1 = (Filters::IIR::Bessel::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandPassFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::setCutoff",1,"Filters::IIR::Bessel::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter,0))){
    SWIG_fail_ptr("IIRBesselBandPass_setCutoff",1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandPass_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandPassFilter *arg1 = (Filters::IIR::Bessel::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandPassFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::setQ",1,"Filters::IIR::Bessel::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter,0))){
    SWIG_fail_ptr("IIRBesselBandPass_setQ",1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandPass_setBW(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandPassFilter *arg1 = (Filters::IIR::Bessel::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandPassFilter::setBW",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::setBW",1,"Filters::IIR::Bessel::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::setBW",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter,0))){
    SWIG_fail_ptr("IIRBesselBandPass_setBW",1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setBW(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandPass_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandPassFilter *arg1 = (Filters::IIR::Bessel::BandPassFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandPassFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::setPort",1,"Filters::IIR::Bessel::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter,0))){
    SWIG_fail_ptr("IIRBesselBandPass_setPort",1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandPass_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandPassFilter *arg1 = (Filters::IIR::Bessel::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandPassFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::Tick",1,"Filters::IIR::Bessel::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter,0))){
    SWIG_fail_ptr("IIRBesselBandPass_Tick",1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandPass_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandPassFilter *arg1 = (Filters::IIR::Bessel::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandPassFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::Tick",1,"Filters::IIR::Bessel::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter,0))){
    SWIG_fail_ptr("IIRBesselBandPass_Tick",1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandPass_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandPassFilter *arg1 = (Filters::IIR::Bessel::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandPassFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::Tick",1,"Filters::IIR::Bessel::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter,0))){
    SWIG_fail_ptr("IIRBesselBandPass_Tick",1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandPass_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandPassFilter *arg1 = (Filters::IIR::Bessel::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandPassFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::Tick",1,"Filters::IIR::Bessel::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::BandPassFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter,0))){
    SWIG_fail_ptr("IIRBesselBandPass_Tick",1,SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandPass_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRBesselBandPass_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRBesselBandPass_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRBesselBandPass_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRBesselBandPass_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRBesselBandPass_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::Bessel::BandPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Bessel::BandPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Bessel::BandPassFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Bessel::BandPassFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRBesselBandPass(void *obj) {
Filters::IIR::Bessel::BandPassFilter *arg1 = (Filters::IIR::Bessel::BandPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRBesselBandPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRBesselBandPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRBesselBandPass_attributes[] = {
    { "prototype", _wrap_IIRBesselBandPass_prototype_get, _wrap_IIRBesselBandPass_prototype_set },
    { "biquads", _wrap_IIRBesselBandPass_biquads_get, _wrap_IIRBesselBandPass_biquads_set },
    { "order", _wrap_IIRBesselBandPass_order_get, _wrap_IIRBesselBandPass_order_set },
    { "fc", _wrap_IIRBesselBandPass_fc_get, _wrap_IIRBesselBandPass_fc_set },
    { "sr", _wrap_IIRBesselBandPass_sr_get, _wrap_IIRBesselBandPass_sr_set },
    { "bw", _wrap_IIRBesselBandPass_bw_get, _wrap_IIRBesselBandPass_bw_set },
    {0,0,0}
};
static swig_lua_method swig_IIRBesselBandPass_methods[]= {
    { "setCutoff", _wrap_IIRBesselBandPass_setCutoff},
    { "setQ", _wrap_IIRBesselBandPass_setQ},
    { "setBW", _wrap_IIRBesselBandPass_setBW},
    { "setPort", _wrap_IIRBesselBandPass_setPort},
    { "Tick", _wrap_IIRBesselBandPass_Tick},
    {0,0}
};
static swig_lua_method swig_IIRBesselBandPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRBesselBandPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRBesselBandPass_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_ORDER", Filters::IIR::Bessel::BandPassFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::Bessel::BandPassFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_BW", Filters::IIR::Bessel::BandPassFilter::PORT_BW)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRBesselBandPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRBesselBandPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRBesselBandPass_Sf_SwigStatic = {
    "IIRBesselBandPass",
    swig_IIRBesselBandPass_Sf_SwigStatic_methods,
    swig_IIRBesselBandPass_Sf_SwigStatic_attributes,
    swig_IIRBesselBandPass_Sf_SwigStatic_constants,
    swig_IIRBesselBandPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRBesselBandPass_bases[] = {0,0};
static const char *swig_IIRBesselBandPass_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRBesselBandPass = { "IIRBesselBandPass", "IIRBesselBandPass", &SWIGTYPE_p_Filters__IIR__Bessel__BandPassFilter,_proxy__wrap_new_IIRBesselBandPass, swig_delete_IIRBesselBandPass, swig_IIRBesselBandPass_methods, swig_IIRBesselBandPass_attributes, &swig_IIRBesselBandPass_Sf_SwigStatic, swig_IIRBesselBandPass_meta, swig_IIRBesselBandPass_bases, swig_IIRBesselBandPass_base_names };

static int _wrap_IIRBesselBandStop_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandStopFilter *arg1 = (Filters::IIR::Bessel::BandStopFilter *) 0 ;
  Dsp::Bessel::BandStop< 32 > arg2 ;
  Dsp::Bessel::BandStop< 32 > *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandStopFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::prototype",1,"Filters::IIR::Bessel::BandStopFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::prototype",2,"Dsp::Bessel::BandStop< 32 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter,0))){
    SWIG_fail_ptr("IIRBesselBandStop_prototype_set",1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__Bessel__BandStopT_32_t,0))){
    SWIG_fail_ptr("IIRBesselBandStop_prototype_set",2,SWIGTYPE_p_Dsp__Bessel__BandStopT_32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandStop_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandStopFilter *arg1 = (Filters::IIR::Bessel::BandStopFilter *) 0 ;
  Dsp::Bessel::BandStop< 32 > result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandStopFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::prototype",1,"Filters::IIR::Bessel::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter,0))){
    SWIG_fail_ptr("IIRBesselBandStop_prototype_get",1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::Bessel::BandStop< 32 > * resultptr = new Dsp::Bessel::BandStop< 32 >((const Dsp::Bessel::BandStop< 32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__Bessel__BandStopT_32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandStop_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandStopFilter *arg1 = (Filters::IIR::Bessel::BandStopFilter *) 0 ;
  Filters::BiquadTransposedTypeIICascade *arg2 = (Filters::BiquadTransposedTypeIICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandStopFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::biquads",1,"Filters::IIR::Bessel::BandStopFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::biquads",2,"Filters::BiquadTransposedTypeIICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter,0))){
    SWIG_fail_ptr("IIRBesselBandStop_biquads_set",1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0))){
    SWIG_fail_ptr("IIRBesselBandStop_biquads_set",2,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandStop_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandStopFilter *arg1 = (Filters::IIR::Bessel::BandStopFilter *) 0 ;
  Filters::BiquadTransposedTypeIICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandStopFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::biquads",1,"Filters::IIR::Bessel::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter,0))){
    SWIG_fail_ptr("IIRBesselBandStop_biquads_get",1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter);
  }
  
  result = (Filters::BiquadTransposedTypeIICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandStop_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandStopFilter *arg1 = (Filters::IIR::Bessel::BandStopFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandStopFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::order",1,"Filters::IIR::Bessel::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter,0))){
    SWIG_fail_ptr("IIRBesselBandStop_order_set",1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandStop_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandStopFilter *arg1 = (Filters::IIR::Bessel::BandStopFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandStopFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::order",1,"Filters::IIR::Bessel::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter,0))){
    SWIG_fail_ptr("IIRBesselBandStop_order_get",1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandStop_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandStopFilter *arg1 = (Filters::IIR::Bessel::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandStopFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::fc",1,"Filters::IIR::Bessel::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter,0))){
    SWIG_fail_ptr("IIRBesselBandStop_fc_set",1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandStop_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandStopFilter *arg1 = (Filters::IIR::Bessel::BandStopFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandStopFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::fc",1,"Filters::IIR::Bessel::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter,0))){
    SWIG_fail_ptr("IIRBesselBandStop_fc_get",1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandStop_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandStopFilter *arg1 = (Filters::IIR::Bessel::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandStopFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::sr",1,"Filters::IIR::Bessel::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter,0))){
    SWIG_fail_ptr("IIRBesselBandStop_sr_set",1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandStop_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandStopFilter *arg1 = (Filters::IIR::Bessel::BandStopFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandStopFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::sr",1,"Filters::IIR::Bessel::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter,0))){
    SWIG_fail_ptr("IIRBesselBandStop_sr_get",1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandStop_bw_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandStopFilter *arg1 = (Filters::IIR::Bessel::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandStopFilter::bw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::bw",1,"Filters::IIR::Bessel::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::bw",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter,0))){
    SWIG_fail_ptr("IIRBesselBandStop_bw_set",1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->bw = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandStop_bw_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandStopFilter *arg1 = (Filters::IIR::Bessel::BandStopFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandStopFilter::bw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::bw",1,"Filters::IIR::Bessel::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter,0))){
    SWIG_fail_ptr("IIRBesselBandStop_bw_get",1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter);
  }
  
  result = (DspFloatType) ((arg1)->bw);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRBesselBandStop(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::Bessel::BandStopFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandStopFilter::BandStopFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::BandStopFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::BandStopFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::BandStopFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::BandStopFilter",4,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::Bessel::BandStopFilter *)new Filters::IIR::Bessel::BandStopFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandStop_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandStopFilter *arg1 = (Filters::IIR::Bessel::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandStopFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::setCutoff",1,"Filters::IIR::Bessel::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter,0))){
    SWIG_fail_ptr("IIRBesselBandStop_setCutoff",1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandStop_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandStopFilter *arg1 = (Filters::IIR::Bessel::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandStopFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::setQ",1,"Filters::IIR::Bessel::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter,0))){
    SWIG_fail_ptr("IIRBesselBandStop_setQ",1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandStop_setBW(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandStopFilter *arg1 = (Filters::IIR::Bessel::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandStopFilter::setBW",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::setBW",1,"Filters::IIR::Bessel::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::setBW",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter,0))){
    SWIG_fail_ptr("IIRBesselBandStop_setBW",1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setBW(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandStop_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandStopFilter *arg1 = (Filters::IIR::Bessel::BandStopFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandStopFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::setPort",1,"Filters::IIR::Bessel::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter,0))){
    SWIG_fail_ptr("IIRBesselBandStop_setPort",1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandStop_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandStopFilter *arg1 = (Filters::IIR::Bessel::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandStopFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::Tick",1,"Filters::IIR::Bessel::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter,0))){
    SWIG_fail_ptr("IIRBesselBandStop_Tick",1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandStop_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandStopFilter *arg1 = (Filters::IIR::Bessel::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandStopFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::Tick",1,"Filters::IIR::Bessel::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter,0))){
    SWIG_fail_ptr("IIRBesselBandStop_Tick",1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandStop_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandStopFilter *arg1 = (Filters::IIR::Bessel::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandStopFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::Tick",1,"Filters::IIR::Bessel::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter,0))){
    SWIG_fail_ptr("IIRBesselBandStop_Tick",1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandStop_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Bessel::BandStopFilter *arg1 = (Filters::IIR::Bessel::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Bessel::BandStopFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::Tick",1,"Filters::IIR::Bessel::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Bessel::BandStopFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter,0))){
    SWIG_fail_ptr("IIRBesselBandStop_Tick",1,SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRBesselBandStop_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRBesselBandStop_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRBesselBandStop_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRBesselBandStop_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRBesselBandStop_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRBesselBandStop_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::Bessel::BandStopFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Bessel::BandStopFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Bessel::BandStopFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Bessel::BandStopFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRBesselBandStop(void *obj) {
Filters::IIR::Bessel::BandStopFilter *arg1 = (Filters::IIR::Bessel::BandStopFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRBesselBandStop(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRBesselBandStop);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRBesselBandStop_attributes[] = {
    { "prototype", _wrap_IIRBesselBandStop_prototype_get, _wrap_IIRBesselBandStop_prototype_set },
    { "biquads", _wrap_IIRBesselBandStop_biquads_get, _wrap_IIRBesselBandStop_biquads_set },
    { "order", _wrap_IIRBesselBandStop_order_get, _wrap_IIRBesselBandStop_order_set },
    { "fc", _wrap_IIRBesselBandStop_fc_get, _wrap_IIRBesselBandStop_fc_set },
    { "sr", _wrap_IIRBesselBandStop_sr_get, _wrap_IIRBesselBandStop_sr_set },
    { "bw", _wrap_IIRBesselBandStop_bw_get, _wrap_IIRBesselBandStop_bw_set },
    {0,0,0}
};
static swig_lua_method swig_IIRBesselBandStop_methods[]= {
    { "setCutoff", _wrap_IIRBesselBandStop_setCutoff},
    { "setQ", _wrap_IIRBesselBandStop_setQ},
    { "setBW", _wrap_IIRBesselBandStop_setBW},
    { "setPort", _wrap_IIRBesselBandStop_setPort},
    { "Tick", _wrap_IIRBesselBandStop_Tick},
    {0,0}
};
static swig_lua_method swig_IIRBesselBandStop_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRBesselBandStop_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRBesselBandStop_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_ORDER", Filters::IIR::Bessel::BandStopFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::Bessel::BandStopFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_BW", Filters::IIR::Bessel::BandStopFilter::PORT_BW)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRBesselBandStop_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRBesselBandStop_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRBesselBandStop_SwigStatic = {
    "IIRBesselBandStop",
    swig_IIRBesselBandStop_SwigStatic_methods,
    swig_IIRBesselBandStop_SwigStatic_attributes,
    swig_IIRBesselBandStop_SwigStatic_constants,
    swig_IIRBesselBandStop_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRBesselBandStop_bases[] = {0,0};
static const char *swig_IIRBesselBandStop_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRBesselBandStop = { "IIRBesselBandStop", "IIRBesselBandStop", &SWIGTYPE_p_Filters__IIR__Bessel__BandStopFilter,_proxy__wrap_new_IIRBesselBandStop, swig_delete_IIRBesselBandStop, swig_IIRBesselBandStop_methods, swig_IIRBesselBandStop_attributes, &swig_IIRBesselBandStop_SwigStatic, swig_IIRBesselBandStop_meta, swig_IIRBesselBandStop_bases, swig_IIRBesselBandStop_base_names };

static int _wrap_IIRButterworthLowPass_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowPassFilter *arg1 = (Filters::IIR::Butterworth::LowPassFilter *) 0 ;
  Dsp::Butterworth::LowPass< 32 > arg2 ;
  Dsp::Butterworth::LowPass< 32 > *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowPassFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::prototype",1,"Filters::IIR::Butterworth::LowPassFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::prototype",2,"Dsp::Butterworth::LowPass< 32 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowPass_prototype_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__Butterworth__LowPassT_32_t,0))){
    SWIG_fail_ptr("IIRButterworthLowPass_prototype_set",2,SWIGTYPE_p_Dsp__Butterworth__LowPassT_32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowPass_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowPassFilter *arg1 = (Filters::IIR::Butterworth::LowPassFilter *) 0 ;
  Dsp::Butterworth::LowPass< 32 > result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowPassFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::prototype",1,"Filters::IIR::Butterworth::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowPass_prototype_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::Butterworth::LowPass< 32 > * resultptr = new Dsp::Butterworth::LowPass< 32 >((const Dsp::Butterworth::LowPass< 32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__Butterworth__LowPassT_32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowPass_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowPassFilter *arg1 = (Filters::IIR::Butterworth::LowPassFilter *) 0 ;
  Filters::BiquadTransposedTypeIICascade *arg2 = (Filters::BiquadTransposedTypeIICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowPassFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::biquads",1,"Filters::IIR::Butterworth::LowPassFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::biquads",2,"Filters::BiquadTransposedTypeIICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowPass_biquads_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0))){
    SWIG_fail_ptr("IIRButterworthLowPass_biquads_set",2,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowPass_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowPassFilter *arg1 = (Filters::IIR::Butterworth::LowPassFilter *) 0 ;
  Filters::BiquadTransposedTypeIICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowPassFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::biquads",1,"Filters::IIR::Butterworth::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowPass_biquads_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter);
  }
  
  result = (Filters::BiquadTransposedTypeIICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowPass_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowPassFilter *arg1 = (Filters::IIR::Butterworth::LowPassFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowPassFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::order",1,"Filters::IIR::Butterworth::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowPass_order_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowPass_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowPassFilter *arg1 = (Filters::IIR::Butterworth::LowPassFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowPassFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::order",1,"Filters::IIR::Butterworth::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowPass_order_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowPass_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowPassFilter *arg1 = (Filters::IIR::Butterworth::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowPassFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::fc",1,"Filters::IIR::Butterworth::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowPass_fc_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowPass_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowPassFilter *arg1 = (Filters::IIR::Butterworth::LowPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowPassFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::fc",1,"Filters::IIR::Butterworth::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowPass_fc_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowPass_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowPassFilter *arg1 = (Filters::IIR::Butterworth::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowPassFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::sr",1,"Filters::IIR::Butterworth::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowPass_sr_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowPass_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowPassFilter *arg1 = (Filters::IIR::Butterworth::LowPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowPassFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::sr",1,"Filters::IIR::Butterworth::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowPass_sr_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowPass_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowPassFilter *arg1 = (Filters::IIR::Butterworth::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowPassFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::R",1,"Filters::IIR::Butterworth::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowPass_R_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowPass_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowPassFilter *arg1 = (Filters::IIR::Butterworth::LowPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowPassFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::R",1,"Filters::IIR::Butterworth::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowPass_R_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRButterworthLowPass(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::Butterworth::LowPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowPassFilter::LowPassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::LowPassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::LowPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::LowPassFilter",3,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::Butterworth::LowPassFilter *)new Filters::IIR::Butterworth::LowPassFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowPass_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowPassFilter *arg1 = (Filters::IIR::Butterworth::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowPassFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::setCutoff",1,"Filters::IIR::Butterworth::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowPass_setCutoff",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowPass_setResonance(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowPassFilter *arg1 = (Filters::IIR::Butterworth::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowPassFilter::setResonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::setResonance",1,"Filters::IIR::Butterworth::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::setResonance",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowPass_setResonance",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setResonance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowPass_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowPassFilter *arg1 = (Filters::IIR::Butterworth::LowPassFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowPassFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::setPort",1,"Filters::IIR::Butterworth::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowPass_setPort",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowPass_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowPassFilter *arg1 = (Filters::IIR::Butterworth::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowPassFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::Tick",1,"Filters::IIR::Butterworth::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowPass_Tick",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowPass_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowPassFilter *arg1 = (Filters::IIR::Butterworth::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowPassFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::Tick",1,"Filters::IIR::Butterworth::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowPass_Tick",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowPass_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowPassFilter *arg1 = (Filters::IIR::Butterworth::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowPassFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::Tick",1,"Filters::IIR::Butterworth::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowPass_Tick",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowPass_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowPassFilter *arg1 = (Filters::IIR::Butterworth::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowPassFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::Tick",1,"Filters::IIR::Butterworth::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::LowPassFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowPass_Tick",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowPass_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRButterworthLowPass_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRButterworthLowPass_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRButterworthLowPass_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRButterworthLowPass_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRButterworthLowPass_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::Butterworth::LowPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Butterworth::LowPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Butterworth::LowPassFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Butterworth::LowPassFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRButterworthLowPass(void *obj) {
Filters::IIR::Butterworth::LowPassFilter *arg1 = (Filters::IIR::Butterworth::LowPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRButterworthLowPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRButterworthLowPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRButterworthLowPass_attributes[] = {
    { "prototype", _wrap_IIRButterworthLowPass_prototype_get, _wrap_IIRButterworthLowPass_prototype_set },
    { "biquads", _wrap_IIRButterworthLowPass_biquads_get, _wrap_IIRButterworthLowPass_biquads_set },
    { "order", _wrap_IIRButterworthLowPass_order_get, _wrap_IIRButterworthLowPass_order_set },
    { "fc", _wrap_IIRButterworthLowPass_fc_get, _wrap_IIRButterworthLowPass_fc_set },
    { "sr", _wrap_IIRButterworthLowPass_sr_get, _wrap_IIRButterworthLowPass_sr_set },
    { "R", _wrap_IIRButterworthLowPass_R_get, _wrap_IIRButterworthLowPass_R_set },
    {0,0,0}
};
static swig_lua_method swig_IIRButterworthLowPass_methods[]= {
    { "setCutoff", _wrap_IIRButterworthLowPass_setCutoff},
    { "setResonance", _wrap_IIRButterworthLowPass_setResonance},
    { "setPort", _wrap_IIRButterworthLowPass_setPort},
    { "Tick", _wrap_IIRButterworthLowPass_Tick},
    {0,0}
};
static swig_lua_method swig_IIRButterworthLowPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRButterworthLowPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRButterworthLowPass_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_ORDER", Filters::IIR::Butterworth::LowPassFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::Butterworth::LowPassFilter::PORT_CUTOFF)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRButterworthLowPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRButterworthLowPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRButterworthLowPass_Sf_SwigStatic = {
    "IIRButterworthLowPass",
    swig_IIRButterworthLowPass_Sf_SwigStatic_methods,
    swig_IIRButterworthLowPass_Sf_SwigStatic_attributes,
    swig_IIRButterworthLowPass_Sf_SwigStatic_constants,
    swig_IIRButterworthLowPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRButterworthLowPass_bases[] = {0,0};
static const char *swig_IIRButterworthLowPass_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRButterworthLowPass = { "IIRButterworthLowPass", "IIRButterworthLowPass", &SWIGTYPE_p_Filters__IIR__Butterworth__LowPassFilter,_proxy__wrap_new_IIRButterworthLowPass, swig_delete_IIRButterworthLowPass, swig_IIRButterworthLowPass_methods, swig_IIRButterworthLowPass_attributes, &swig_IIRButterworthLowPass_Sf_SwigStatic, swig_IIRButterworthLowPass_meta, swig_IIRButterworthLowPass_bases, swig_IIRButterworthLowPass_base_names };

static int _wrap_IIRButterworthHighPass_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighPassFilter *arg1 = (Filters::IIR::Butterworth::HighPassFilter *) 0 ;
  Dsp::Butterworth::HighPass< 32 > arg2 ;
  Dsp::Butterworth::HighPass< 32 > *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighPassFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::prototype",1,"Filters::IIR::Butterworth::HighPassFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::prototype",2,"Dsp::Butterworth::HighPass< 32 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighPass_prototype_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__Butterworth__HighPassT_32_t,0))){
    SWIG_fail_ptr("IIRButterworthHighPass_prototype_set",2,SWIGTYPE_p_Dsp__Butterworth__HighPassT_32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighPass_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighPassFilter *arg1 = (Filters::IIR::Butterworth::HighPassFilter *) 0 ;
  Dsp::Butterworth::HighPass< 32 > result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighPassFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::prototype",1,"Filters::IIR::Butterworth::HighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighPass_prototype_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::Butterworth::HighPass< 32 > * resultptr = new Dsp::Butterworth::HighPass< 32 >((const Dsp::Butterworth::HighPass< 32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__Butterworth__HighPassT_32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighPass_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighPassFilter *arg1 = (Filters::IIR::Butterworth::HighPassFilter *) 0 ;
  Filters::BiquadTransposedTypeIICascade *arg2 = (Filters::BiquadTransposedTypeIICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighPassFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::biquads",1,"Filters::IIR::Butterworth::HighPassFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::biquads",2,"Filters::BiquadTransposedTypeIICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighPass_biquads_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0))){
    SWIG_fail_ptr("IIRButterworthHighPass_biquads_set",2,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighPass_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighPassFilter *arg1 = (Filters::IIR::Butterworth::HighPassFilter *) 0 ;
  Filters::BiquadTransposedTypeIICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighPassFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::biquads",1,"Filters::IIR::Butterworth::HighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighPass_biquads_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter);
  }
  
  result = (Filters::BiquadTransposedTypeIICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighPass_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighPassFilter *arg1 = (Filters::IIR::Butterworth::HighPassFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighPassFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::order",1,"Filters::IIR::Butterworth::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighPass_order_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighPass_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighPassFilter *arg1 = (Filters::IIR::Butterworth::HighPassFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighPassFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::order",1,"Filters::IIR::Butterworth::HighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighPass_order_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighPass_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighPassFilter *arg1 = (Filters::IIR::Butterworth::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighPassFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::fc",1,"Filters::IIR::Butterworth::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighPass_fc_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighPass_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighPassFilter *arg1 = (Filters::IIR::Butterworth::HighPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighPassFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::fc",1,"Filters::IIR::Butterworth::HighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighPass_fc_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighPass_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighPassFilter *arg1 = (Filters::IIR::Butterworth::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighPassFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::sr",1,"Filters::IIR::Butterworth::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighPass_sr_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighPass_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighPassFilter *arg1 = (Filters::IIR::Butterworth::HighPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighPassFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::sr",1,"Filters::IIR::Butterworth::HighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighPass_sr_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighPass_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighPassFilter *arg1 = (Filters::IIR::Butterworth::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighPassFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::R",1,"Filters::IIR::Butterworth::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighPass_R_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighPass_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighPassFilter *arg1 = (Filters::IIR::Butterworth::HighPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighPassFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::R",1,"Filters::IIR::Butterworth::HighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighPass_R_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRButterworthHighPass(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::Butterworth::HighPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighPassFilter::HighPassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::HighPassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::HighPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::HighPassFilter",3,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::Butterworth::HighPassFilter *)new Filters::IIR::Butterworth::HighPassFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighPass_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighPassFilter *arg1 = (Filters::IIR::Butterworth::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighPassFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::setCutoff",1,"Filters::IIR::Butterworth::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighPass_setCutoff",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighPass_setResonance(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighPassFilter *arg1 = (Filters::IIR::Butterworth::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighPassFilter::setResonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::setResonance",1,"Filters::IIR::Butterworth::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::setResonance",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighPass_setResonance",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setResonance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighPass_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighPassFilter *arg1 = (Filters::IIR::Butterworth::HighPassFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighPassFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::setPort",1,"Filters::IIR::Butterworth::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighPass_setPort",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighPass_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighPassFilter *arg1 = (Filters::IIR::Butterworth::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighPassFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::Tick",1,"Filters::IIR::Butterworth::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighPass_Tick",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighPass_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighPassFilter *arg1 = (Filters::IIR::Butterworth::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighPassFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::Tick",1,"Filters::IIR::Butterworth::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighPass_Tick",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighPass_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighPassFilter *arg1 = (Filters::IIR::Butterworth::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighPassFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::Tick",1,"Filters::IIR::Butterworth::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighPass_Tick",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighPass_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighPassFilter *arg1 = (Filters::IIR::Butterworth::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighPassFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::Tick",1,"Filters::IIR::Butterworth::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::HighPassFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighPass_Tick",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighPass_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRButterworthHighPass_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRButterworthHighPass_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRButterworthHighPass_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRButterworthHighPass_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRButterworthHighPass_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::Butterworth::HighPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Butterworth::HighPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Butterworth::HighPassFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Butterworth::HighPassFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRButterworthHighPass(void *obj) {
Filters::IIR::Butterworth::HighPassFilter *arg1 = (Filters::IIR::Butterworth::HighPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRButterworthHighPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRButterworthHighPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRButterworthHighPass_attributes[] = {
    { "prototype", _wrap_IIRButterworthHighPass_prototype_get, _wrap_IIRButterworthHighPass_prototype_set },
    { "biquads", _wrap_IIRButterworthHighPass_biquads_get, _wrap_IIRButterworthHighPass_biquads_set },
    { "order", _wrap_IIRButterworthHighPass_order_get, _wrap_IIRButterworthHighPass_order_set },
    { "fc", _wrap_IIRButterworthHighPass_fc_get, _wrap_IIRButterworthHighPass_fc_set },
    { "sr", _wrap_IIRButterworthHighPass_sr_get, _wrap_IIRButterworthHighPass_sr_set },
    { "R", _wrap_IIRButterworthHighPass_R_get, _wrap_IIRButterworthHighPass_R_set },
    {0,0,0}
};
static swig_lua_method swig_IIRButterworthHighPass_methods[]= {
    { "setCutoff", _wrap_IIRButterworthHighPass_setCutoff},
    { "setResonance", _wrap_IIRButterworthHighPass_setResonance},
    { "setPort", _wrap_IIRButterworthHighPass_setPort},
    { "Tick", _wrap_IIRButterworthHighPass_Tick},
    {0,0}
};
static swig_lua_method swig_IIRButterworthHighPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRButterworthHighPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRButterworthHighPass_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_ORDER", Filters::IIR::Butterworth::HighPassFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::Butterworth::HighPassFilter::PORT_CUTOFF)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRButterworthHighPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRButterworthHighPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRButterworthHighPass_Sf_SwigStatic = {
    "IIRButterworthHighPass",
    swig_IIRButterworthHighPass_Sf_SwigStatic_methods,
    swig_IIRButterworthHighPass_Sf_SwigStatic_attributes,
    swig_IIRButterworthHighPass_Sf_SwigStatic_constants,
    swig_IIRButterworthHighPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRButterworthHighPass_bases[] = {0,0};
static const char *swig_IIRButterworthHighPass_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRButterworthHighPass = { "IIRButterworthHighPass", "IIRButterworthHighPass", &SWIGTYPE_p_Filters__IIR__Butterworth__HighPassFilter,_proxy__wrap_new_IIRButterworthHighPass, swig_delete_IIRButterworthHighPass, swig_IIRButterworthHighPass_methods, swig_IIRButterworthHighPass_attributes, &swig_IIRButterworthHighPass_Sf_SwigStatic, swig_IIRButterworthHighPass_meta, swig_IIRButterworthHighPass_bases, swig_IIRButterworthHighPass_base_names };

static int _wrap_IIRButterworthBandPass_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandPassFilter *arg1 = (Filters::IIR::Butterworth::BandPassFilter *) 0 ;
  Dsp::Butterworth::BandPass< 32 > arg2 ;
  Dsp::Butterworth::BandPass< 32 > *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandPassFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::prototype",1,"Filters::IIR::Butterworth::BandPassFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::prototype",2,"Dsp::Butterworth::BandPass< 32 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandPass_prototype_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__Butterworth__BandPassT_32_t,0))){
    SWIG_fail_ptr("IIRButterworthBandPass_prototype_set",2,SWIGTYPE_p_Dsp__Butterworth__BandPassT_32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandPass_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandPassFilter *arg1 = (Filters::IIR::Butterworth::BandPassFilter *) 0 ;
  Dsp::Butterworth::BandPass< 32 > result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandPassFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::prototype",1,"Filters::IIR::Butterworth::BandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandPass_prototype_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::Butterworth::BandPass< 32 > * resultptr = new Dsp::Butterworth::BandPass< 32 >((const Dsp::Butterworth::BandPass< 32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__Butterworth__BandPassT_32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandPass_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandPassFilter *arg1 = (Filters::IIR::Butterworth::BandPassFilter *) 0 ;
  Filters::BiquadTransposedTypeIICascade *arg2 = (Filters::BiquadTransposedTypeIICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandPassFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::biquads",1,"Filters::IIR::Butterworth::BandPassFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::biquads",2,"Filters::BiquadTransposedTypeIICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandPass_biquads_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0))){
    SWIG_fail_ptr("IIRButterworthBandPass_biquads_set",2,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandPass_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandPassFilter *arg1 = (Filters::IIR::Butterworth::BandPassFilter *) 0 ;
  Filters::BiquadTransposedTypeIICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandPassFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::biquads",1,"Filters::IIR::Butterworth::BandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandPass_biquads_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter);
  }
  
  result = (Filters::BiquadTransposedTypeIICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandPass_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandPassFilter *arg1 = (Filters::IIR::Butterworth::BandPassFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandPassFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::order",1,"Filters::IIR::Butterworth::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandPass_order_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandPass_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandPassFilter *arg1 = (Filters::IIR::Butterworth::BandPassFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandPassFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::order",1,"Filters::IIR::Butterworth::BandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandPass_order_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandPass_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandPassFilter *arg1 = (Filters::IIR::Butterworth::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandPassFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::fc",1,"Filters::IIR::Butterworth::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandPass_fc_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandPass_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandPassFilter *arg1 = (Filters::IIR::Butterworth::BandPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandPassFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::fc",1,"Filters::IIR::Butterworth::BandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandPass_fc_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandPass_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandPassFilter *arg1 = (Filters::IIR::Butterworth::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandPassFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::sr",1,"Filters::IIR::Butterworth::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandPass_sr_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandPass_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandPassFilter *arg1 = (Filters::IIR::Butterworth::BandPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandPassFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::sr",1,"Filters::IIR::Butterworth::BandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandPass_sr_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandPass_bw_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandPassFilter *arg1 = (Filters::IIR::Butterworth::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandPassFilter::bw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::bw",1,"Filters::IIR::Butterworth::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::bw",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandPass_bw_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->bw = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandPass_bw_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandPassFilter *arg1 = (Filters::IIR::Butterworth::BandPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandPassFilter::bw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::bw",1,"Filters::IIR::Butterworth::BandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandPass_bw_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->bw);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandPass_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandPassFilter *arg1 = (Filters::IIR::Butterworth::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandPassFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::R",1,"Filters::IIR::Butterworth::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandPass_R_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandPass_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandPassFilter *arg1 = (Filters::IIR::Butterworth::BandPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandPassFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::R",1,"Filters::IIR::Butterworth::BandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandPass_R_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRButterworthBandPass(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::Butterworth::BandPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandPassFilter::BandPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::BandPassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::BandPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::BandPassFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::BandPassFilter",4,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::Butterworth::BandPassFilter *)new Filters::IIR::Butterworth::BandPassFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandPass_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandPassFilter *arg1 = (Filters::IIR::Butterworth::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandPassFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::setCutoff",1,"Filters::IIR::Butterworth::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandPass_setCutoff",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandPass_setResonance(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandPassFilter *arg1 = (Filters::IIR::Butterworth::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandPassFilter::setResonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::setResonance",1,"Filters::IIR::Butterworth::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::setResonance",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandPass_setResonance",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setResonance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandPass_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandPassFilter *arg1 = (Filters::IIR::Butterworth::BandPassFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandPassFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::setPort",1,"Filters::IIR::Butterworth::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandPass_setPort",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandPass_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandPassFilter *arg1 = (Filters::IIR::Butterworth::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandPassFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::Tick",1,"Filters::IIR::Butterworth::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandPass_Tick",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandPass_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandPassFilter *arg1 = (Filters::IIR::Butterworth::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandPassFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::Tick",1,"Filters::IIR::Butterworth::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandPass_Tick",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandPass_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandPassFilter *arg1 = (Filters::IIR::Butterworth::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandPassFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::Tick",1,"Filters::IIR::Butterworth::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandPass_Tick",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandPass_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandPassFilter *arg1 = (Filters::IIR::Butterworth::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandPassFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::Tick",1,"Filters::IIR::Butterworth::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandPassFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandPass_Tick",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandPass_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRButterworthBandPass_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRButterworthBandPass_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRButterworthBandPass_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRButterworthBandPass_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRButterworthBandPass_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::Butterworth::BandPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Butterworth::BandPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Butterworth::BandPassFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Butterworth::BandPassFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRButterworthBandPass(void *obj) {
Filters::IIR::Butterworth::BandPassFilter *arg1 = (Filters::IIR::Butterworth::BandPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRButterworthBandPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRButterworthBandPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRButterworthBandPass_attributes[] = {
    { "prototype", _wrap_IIRButterworthBandPass_prototype_get, _wrap_IIRButterworthBandPass_prototype_set },
    { "biquads", _wrap_IIRButterworthBandPass_biquads_get, _wrap_IIRButterworthBandPass_biquads_set },
    { "order", _wrap_IIRButterworthBandPass_order_get, _wrap_IIRButterworthBandPass_order_set },
    { "fc", _wrap_IIRButterworthBandPass_fc_get, _wrap_IIRButterworthBandPass_fc_set },
    { "sr", _wrap_IIRButterworthBandPass_sr_get, _wrap_IIRButterworthBandPass_sr_set },
    { "bw", _wrap_IIRButterworthBandPass_bw_get, _wrap_IIRButterworthBandPass_bw_set },
    { "R", _wrap_IIRButterworthBandPass_R_get, _wrap_IIRButterworthBandPass_R_set },
    {0,0,0}
};
static swig_lua_method swig_IIRButterworthBandPass_methods[]= {
    { "setCutoff", _wrap_IIRButterworthBandPass_setCutoff},
    { "setResonance", _wrap_IIRButterworthBandPass_setResonance},
    { "setPort", _wrap_IIRButterworthBandPass_setPort},
    { "Tick", _wrap_IIRButterworthBandPass_Tick},
    {0,0}
};
static swig_lua_method swig_IIRButterworthBandPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRButterworthBandPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRButterworthBandPass_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_ORDER", Filters::IIR::Butterworth::BandPassFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::Butterworth::BandPassFilter::PORT_CUTOFF)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRButterworthBandPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRButterworthBandPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRButterworthBandPass_Sf_SwigStatic = {
    "IIRButterworthBandPass",
    swig_IIRButterworthBandPass_Sf_SwigStatic_methods,
    swig_IIRButterworthBandPass_Sf_SwigStatic_attributes,
    swig_IIRButterworthBandPass_Sf_SwigStatic_constants,
    swig_IIRButterworthBandPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRButterworthBandPass_bases[] = {0,0};
static const char *swig_IIRButterworthBandPass_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRButterworthBandPass = { "IIRButterworthBandPass", "IIRButterworthBandPass", &SWIGTYPE_p_Filters__IIR__Butterworth__BandPassFilter,_proxy__wrap_new_IIRButterworthBandPass, swig_delete_IIRButterworthBandPass, swig_IIRButterworthBandPass_methods, swig_IIRButterworthBandPass_attributes, &swig_IIRButterworthBandPass_Sf_SwigStatic, swig_IIRButterworthBandPass_meta, swig_IIRButterworthBandPass_bases, swig_IIRButterworthBandPass_base_names };

static int _wrap_IIRButterworthBandStop_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandStopFilter *arg1 = (Filters::IIR::Butterworth::BandStopFilter *) 0 ;
  Dsp::Butterworth::BandStop< 32 > arg2 ;
  Dsp::Butterworth::BandStop< 32 > *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandStopFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::prototype",1,"Filters::IIR::Butterworth::BandStopFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::prototype",2,"Dsp::Butterworth::BandStop< 32 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandStop_prototype_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__Butterworth__BandStopT_32_t,0))){
    SWIG_fail_ptr("IIRButterworthBandStop_prototype_set",2,SWIGTYPE_p_Dsp__Butterworth__BandStopT_32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandStop_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandStopFilter *arg1 = (Filters::IIR::Butterworth::BandStopFilter *) 0 ;
  Dsp::Butterworth::BandStop< 32 > result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandStopFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::prototype",1,"Filters::IIR::Butterworth::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandStop_prototype_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::Butterworth::BandStop< 32 > * resultptr = new Dsp::Butterworth::BandStop< 32 >((const Dsp::Butterworth::BandStop< 32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__Butterworth__BandStopT_32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandStop_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandStopFilter *arg1 = (Filters::IIR::Butterworth::BandStopFilter *) 0 ;
  Filters::BiquadTransposedTypeIICascade *arg2 = (Filters::BiquadTransposedTypeIICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandStopFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::biquads",1,"Filters::IIR::Butterworth::BandStopFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::biquads",2,"Filters::BiquadTransposedTypeIICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandStop_biquads_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0))){
    SWIG_fail_ptr("IIRButterworthBandStop_biquads_set",2,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandStop_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandStopFilter *arg1 = (Filters::IIR::Butterworth::BandStopFilter *) 0 ;
  Filters::BiquadTransposedTypeIICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandStopFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::biquads",1,"Filters::IIR::Butterworth::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandStop_biquads_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter);
  }
  
  result = (Filters::BiquadTransposedTypeIICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandStop_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandStopFilter *arg1 = (Filters::IIR::Butterworth::BandStopFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandStopFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::order",1,"Filters::IIR::Butterworth::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandStop_order_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandStop_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandStopFilter *arg1 = (Filters::IIR::Butterworth::BandStopFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandStopFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::order",1,"Filters::IIR::Butterworth::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandStop_order_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandStop_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandStopFilter *arg1 = (Filters::IIR::Butterworth::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandStopFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::fc",1,"Filters::IIR::Butterworth::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandStop_fc_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandStop_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandStopFilter *arg1 = (Filters::IIR::Butterworth::BandStopFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandStopFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::fc",1,"Filters::IIR::Butterworth::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandStop_fc_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandStop_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandStopFilter *arg1 = (Filters::IIR::Butterworth::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandStopFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::sr",1,"Filters::IIR::Butterworth::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandStop_sr_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandStop_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandStopFilter *arg1 = (Filters::IIR::Butterworth::BandStopFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandStopFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::sr",1,"Filters::IIR::Butterworth::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandStop_sr_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandStop_bw_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandStopFilter *arg1 = (Filters::IIR::Butterworth::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandStopFilter::bw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::bw",1,"Filters::IIR::Butterworth::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::bw",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandStop_bw_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->bw = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandStop_bw_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandStopFilter *arg1 = (Filters::IIR::Butterworth::BandStopFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandStopFilter::bw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::bw",1,"Filters::IIR::Butterworth::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandStop_bw_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter);
  }
  
  result = (DspFloatType) ((arg1)->bw);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandStop_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandStopFilter *arg1 = (Filters::IIR::Butterworth::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandStopFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::R",1,"Filters::IIR::Butterworth::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandStop_R_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandStop_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandStopFilter *arg1 = (Filters::IIR::Butterworth::BandStopFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandStopFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::R",1,"Filters::IIR::Butterworth::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandStop_R_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRButterworthBandStop(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::Butterworth::BandStopFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandStopFilter::BandStopFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::BandStopFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::BandStopFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::BandStopFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::BandStopFilter",4,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::Butterworth::BandStopFilter *)new Filters::IIR::Butterworth::BandStopFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandStop_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandStopFilter *arg1 = (Filters::IIR::Butterworth::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandStopFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::setCutoff",1,"Filters::IIR::Butterworth::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandStop_setCutoff",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandStop_setResonance(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandStopFilter *arg1 = (Filters::IIR::Butterworth::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandStopFilter::setResonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::setResonance",1,"Filters::IIR::Butterworth::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::setResonance",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandStop_setResonance",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setResonance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandStop_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandStopFilter *arg1 = (Filters::IIR::Butterworth::BandStopFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandStopFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::setPort",1,"Filters::IIR::Butterworth::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandStop_setPort",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandStop_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandStopFilter *arg1 = (Filters::IIR::Butterworth::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandStopFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::Tick",1,"Filters::IIR::Butterworth::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandStop_Tick",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandStop_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandStopFilter *arg1 = (Filters::IIR::Butterworth::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandStopFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::Tick",1,"Filters::IIR::Butterworth::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandStop_Tick",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandStop_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandStopFilter *arg1 = (Filters::IIR::Butterworth::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandStopFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::Tick",1,"Filters::IIR::Butterworth::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandStop_Tick",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandStop_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandStopFilter *arg1 = (Filters::IIR::Butterworth::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandStopFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::Tick",1,"Filters::IIR::Butterworth::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandStopFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandStop_Tick",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandStop_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRButterworthBandStop_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRButterworthBandStop_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRButterworthBandStop_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRButterworthBandStop_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRButterworthBandStop_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::Butterworth::BandStopFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Butterworth::BandStopFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Butterworth::BandStopFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Butterworth::BandStopFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRButterworthBandStop(void *obj) {
Filters::IIR::Butterworth::BandStopFilter *arg1 = (Filters::IIR::Butterworth::BandStopFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRButterworthBandStop(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRButterworthBandStop);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRButterworthBandStop_attributes[] = {
    { "prototype", _wrap_IIRButterworthBandStop_prototype_get, _wrap_IIRButterworthBandStop_prototype_set },
    { "biquads", _wrap_IIRButterworthBandStop_biquads_get, _wrap_IIRButterworthBandStop_biquads_set },
    { "order", _wrap_IIRButterworthBandStop_order_get, _wrap_IIRButterworthBandStop_order_set },
    { "fc", _wrap_IIRButterworthBandStop_fc_get, _wrap_IIRButterworthBandStop_fc_set },
    { "sr", _wrap_IIRButterworthBandStop_sr_get, _wrap_IIRButterworthBandStop_sr_set },
    { "bw", _wrap_IIRButterworthBandStop_bw_get, _wrap_IIRButterworthBandStop_bw_set },
    { "R", _wrap_IIRButterworthBandStop_R_get, _wrap_IIRButterworthBandStop_R_set },
    {0,0,0}
};
static swig_lua_method swig_IIRButterworthBandStop_methods[]= {
    { "setCutoff", _wrap_IIRButterworthBandStop_setCutoff},
    { "setResonance", _wrap_IIRButterworthBandStop_setResonance},
    { "setPort", _wrap_IIRButterworthBandStop_setPort},
    { "Tick", _wrap_IIRButterworthBandStop_Tick},
    {0,0}
};
static swig_lua_method swig_IIRButterworthBandStop_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRButterworthBandStop_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRButterworthBandStop_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_ORDER", Filters::IIR::Butterworth::BandStopFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::Butterworth::BandStopFilter::PORT_CUTOFF)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRButterworthBandStop_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRButterworthBandStop_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRButterworthBandStop_SwigStatic = {
    "IIRButterworthBandStop",
    swig_IIRButterworthBandStop_SwigStatic_methods,
    swig_IIRButterworthBandStop_SwigStatic_attributes,
    swig_IIRButterworthBandStop_SwigStatic_constants,
    swig_IIRButterworthBandStop_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRButterworthBandStop_bases[] = {0,0};
static const char *swig_IIRButterworthBandStop_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRButterworthBandStop = { "IIRButterworthBandStop", "IIRButterworthBandStop", &SWIGTYPE_p_Filters__IIR__Butterworth__BandStopFilter,_proxy__wrap_new_IIRButterworthBandStop, swig_delete_IIRButterworthBandStop, swig_IIRButterworthBandStop_methods, swig_IIRButterworthBandStop_attributes, &swig_IIRButterworthBandStop_SwigStatic, swig_IIRButterworthBandStop_meta, swig_IIRButterworthBandStop_bases, swig_IIRButterworthBandStop_base_names };

static int _wrap_IIRButterworthLowShelf_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowShelfFilter *arg1 = (Filters::IIR::Butterworth::LowShelfFilter *) 0 ;
  Dsp::Butterworth::LowShelf< 32 > arg2 ;
  Dsp::Butterworth::LowShelf< 32 > *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowShelfFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::prototype",1,"Filters::IIR::Butterworth::LowShelfFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::prototype",2,"Dsp::Butterworth::LowShelf< 32 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowShelf_prototype_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__Butterworth__LowShelfT_32_t,0))){
    SWIG_fail_ptr("IIRButterworthLowShelf_prototype_set",2,SWIGTYPE_p_Dsp__Butterworth__LowShelfT_32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowShelf_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowShelfFilter *arg1 = (Filters::IIR::Butterworth::LowShelfFilter *) 0 ;
  Dsp::Butterworth::LowShelf< 32 > result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowShelfFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::prototype",1,"Filters::IIR::Butterworth::LowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowShelf_prototype_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::Butterworth::LowShelf< 32 > * resultptr = new Dsp::Butterworth::LowShelf< 32 >((const Dsp::Butterworth::LowShelf< 32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__Butterworth__LowShelfT_32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowShelf_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowShelfFilter *arg1 = (Filters::IIR::Butterworth::LowShelfFilter *) 0 ;
  Filters::BiquadTransposedTypeIICascade *arg2 = (Filters::BiquadTransposedTypeIICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowShelfFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::biquads",1,"Filters::IIR::Butterworth::LowShelfFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::biquads",2,"Filters::BiquadTransposedTypeIICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowShelf_biquads_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0))){
    SWIG_fail_ptr("IIRButterworthLowShelf_biquads_set",2,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowShelf_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowShelfFilter *arg1 = (Filters::IIR::Butterworth::LowShelfFilter *) 0 ;
  Filters::BiquadTransposedTypeIICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowShelfFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::biquads",1,"Filters::IIR::Butterworth::LowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowShelf_biquads_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter);
  }
  
  result = (Filters::BiquadTransposedTypeIICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowShelf_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowShelfFilter *arg1 = (Filters::IIR::Butterworth::LowShelfFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowShelfFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::order",1,"Filters::IIR::Butterworth::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowShelf_order_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowShelf_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowShelfFilter *arg1 = (Filters::IIR::Butterworth::LowShelfFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowShelfFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::order",1,"Filters::IIR::Butterworth::LowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowShelf_order_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowShelf_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowShelfFilter *arg1 = (Filters::IIR::Butterworth::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowShelfFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::fc",1,"Filters::IIR::Butterworth::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowShelf_fc_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowShelf_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowShelfFilter *arg1 = (Filters::IIR::Butterworth::LowShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowShelfFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::fc",1,"Filters::IIR::Butterworth::LowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowShelf_fc_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowShelf_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowShelfFilter *arg1 = (Filters::IIR::Butterworth::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowShelfFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::sr",1,"Filters::IIR::Butterworth::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowShelf_sr_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowShelf_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowShelfFilter *arg1 = (Filters::IIR::Butterworth::LowShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowShelfFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::sr",1,"Filters::IIR::Butterworth::LowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowShelf_sr_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowShelf_g_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowShelfFilter *arg1 = (Filters::IIR::Butterworth::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowShelfFilter::g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::g",1,"Filters::IIR::Butterworth::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::g",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowShelf_g_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->g = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowShelf_g_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowShelfFilter *arg1 = (Filters::IIR::Butterworth::LowShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowShelfFilter::g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::g",1,"Filters::IIR::Butterworth::LowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowShelf_g_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->g);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowShelf_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowShelfFilter *arg1 = (Filters::IIR::Butterworth::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowShelfFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::R",1,"Filters::IIR::Butterworth::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowShelf_R_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowShelf_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowShelfFilter *arg1 = (Filters::IIR::Butterworth::LowShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowShelfFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::R",1,"Filters::IIR::Butterworth::LowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowShelf_R_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRButterworthLowShelf(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::Butterworth::LowShelfFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowShelfFilter::LowShelfFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::LowShelfFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::LowShelfFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::LowShelfFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::LowShelfFilter",4,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::Butterworth::LowShelfFilter *)new Filters::IIR::Butterworth::LowShelfFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowShelf_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowShelfFilter *arg1 = (Filters::IIR::Butterworth::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowShelfFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::setCutoff",1,"Filters::IIR::Butterworth::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowShelf_setCutoff",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowShelf_setResonance(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowShelfFilter *arg1 = (Filters::IIR::Butterworth::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowShelfFilter::setResonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::setResonance",1,"Filters::IIR::Butterworth::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::setResonance",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowShelf_setResonance",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setResonance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowShelf_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowShelfFilter *arg1 = (Filters::IIR::Butterworth::LowShelfFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowShelfFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::setPort",1,"Filters::IIR::Butterworth::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowShelf_setPort",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowShelf_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowShelfFilter *arg1 = (Filters::IIR::Butterworth::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowShelfFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::Tick",1,"Filters::IIR::Butterworth::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowShelf_Tick",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowShelf_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowShelfFilter *arg1 = (Filters::IIR::Butterworth::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowShelfFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::Tick",1,"Filters::IIR::Butterworth::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowShelf_Tick",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowShelf_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowShelfFilter *arg1 = (Filters::IIR::Butterworth::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowShelfFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::Tick",1,"Filters::IIR::Butterworth::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowShelf_Tick",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowShelf_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::LowShelfFilter *arg1 = (Filters::IIR::Butterworth::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::LowShelfFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::Tick",1,"Filters::IIR::Butterworth::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::LowShelfFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthLowShelf_Tick",1,SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthLowShelf_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRButterworthLowShelf_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRButterworthLowShelf_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRButterworthLowShelf_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRButterworthLowShelf_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRButterworthLowShelf_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::Butterworth::LowShelfFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Butterworth::LowShelfFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Butterworth::LowShelfFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Butterworth::LowShelfFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRButterworthLowShelf(void *obj) {
Filters::IIR::Butterworth::LowShelfFilter *arg1 = (Filters::IIR::Butterworth::LowShelfFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRButterworthLowShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRButterworthLowShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRButterworthLowShelf_attributes[] = {
    { "prototype", _wrap_IIRButterworthLowShelf_prototype_get, _wrap_IIRButterworthLowShelf_prototype_set },
    { "biquads", _wrap_IIRButterworthLowShelf_biquads_get, _wrap_IIRButterworthLowShelf_biquads_set },
    { "order", _wrap_IIRButterworthLowShelf_order_get, _wrap_IIRButterworthLowShelf_order_set },
    { "fc", _wrap_IIRButterworthLowShelf_fc_get, _wrap_IIRButterworthLowShelf_fc_set },
    { "sr", _wrap_IIRButterworthLowShelf_sr_get, _wrap_IIRButterworthLowShelf_sr_set },
    { "g", _wrap_IIRButterworthLowShelf_g_get, _wrap_IIRButterworthLowShelf_g_set },
    { "R", _wrap_IIRButterworthLowShelf_R_get, _wrap_IIRButterworthLowShelf_R_set },
    {0,0,0}
};
static swig_lua_method swig_IIRButterworthLowShelf_methods[]= {
    { "setCutoff", _wrap_IIRButterworthLowShelf_setCutoff},
    { "setResonance", _wrap_IIRButterworthLowShelf_setResonance},
    { "setPort", _wrap_IIRButterworthLowShelf_setPort},
    { "Tick", _wrap_IIRButterworthLowShelf_Tick},
    {0,0}
};
static swig_lua_method swig_IIRButterworthLowShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRButterworthLowShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRButterworthLowShelf_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_ORDER", Filters::IIR::Butterworth::LowShelfFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::Butterworth::LowShelfFilter::PORT_CUTOFF)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRButterworthLowShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRButterworthLowShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRButterworthLowShelf_Sf_SwigStatic = {
    "IIRButterworthLowShelf",
    swig_IIRButterworthLowShelf_Sf_SwigStatic_methods,
    swig_IIRButterworthLowShelf_Sf_SwigStatic_attributes,
    swig_IIRButterworthLowShelf_Sf_SwigStatic_constants,
    swig_IIRButterworthLowShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRButterworthLowShelf_bases[] = {0,0};
static const char *swig_IIRButterworthLowShelf_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRButterworthLowShelf = { "IIRButterworthLowShelf", "IIRButterworthLowShelf", &SWIGTYPE_p_Filters__IIR__Butterworth__LowShelfFilter,_proxy__wrap_new_IIRButterworthLowShelf, swig_delete_IIRButterworthLowShelf, swig_IIRButterworthLowShelf_methods, swig_IIRButterworthLowShelf_attributes, &swig_IIRButterworthLowShelf_Sf_SwigStatic, swig_IIRButterworthLowShelf_meta, swig_IIRButterworthLowShelf_bases, swig_IIRButterworthLowShelf_base_names };

static int _wrap_IIRButterworthHighShelf_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighShelfFilter *arg1 = (Filters::IIR::Butterworth::HighShelfFilter *) 0 ;
  Dsp::Butterworth::HighShelf< 32 > arg2 ;
  Dsp::Butterworth::HighShelf< 32 > *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighShelfFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::prototype",1,"Filters::IIR::Butterworth::HighShelfFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::prototype",2,"Dsp::Butterworth::HighShelf< 32 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighShelf_prototype_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__Butterworth__HighShelfT_32_t,0))){
    SWIG_fail_ptr("IIRButterworthHighShelf_prototype_set",2,SWIGTYPE_p_Dsp__Butterworth__HighShelfT_32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighShelf_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighShelfFilter *arg1 = (Filters::IIR::Butterworth::HighShelfFilter *) 0 ;
  Dsp::Butterworth::HighShelf< 32 > result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighShelfFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::prototype",1,"Filters::IIR::Butterworth::HighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighShelf_prototype_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::Butterworth::HighShelf< 32 > * resultptr = new Dsp::Butterworth::HighShelf< 32 >((const Dsp::Butterworth::HighShelf< 32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__Butterworth__HighShelfT_32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighShelf_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighShelfFilter *arg1 = (Filters::IIR::Butterworth::HighShelfFilter *) 0 ;
  Filters::BiquadTransposedTypeIICascade *arg2 = (Filters::BiquadTransposedTypeIICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighShelfFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::biquads",1,"Filters::IIR::Butterworth::HighShelfFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::biquads",2,"Filters::BiquadTransposedTypeIICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighShelf_biquads_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0))){
    SWIG_fail_ptr("IIRButterworthHighShelf_biquads_set",2,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighShelf_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighShelfFilter *arg1 = (Filters::IIR::Butterworth::HighShelfFilter *) 0 ;
  Filters::BiquadTransposedTypeIICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighShelfFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::biquads",1,"Filters::IIR::Butterworth::HighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighShelf_biquads_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter);
  }
  
  result = (Filters::BiquadTransposedTypeIICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighShelf_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighShelfFilter *arg1 = (Filters::IIR::Butterworth::HighShelfFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighShelfFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::order",1,"Filters::IIR::Butterworth::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighShelf_order_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighShelf_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighShelfFilter *arg1 = (Filters::IIR::Butterworth::HighShelfFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighShelfFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::order",1,"Filters::IIR::Butterworth::HighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighShelf_order_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighShelf_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighShelfFilter *arg1 = (Filters::IIR::Butterworth::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighShelfFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::fc",1,"Filters::IIR::Butterworth::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighShelf_fc_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighShelf_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighShelfFilter *arg1 = (Filters::IIR::Butterworth::HighShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighShelfFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::fc",1,"Filters::IIR::Butterworth::HighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighShelf_fc_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighShelf_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighShelfFilter *arg1 = (Filters::IIR::Butterworth::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighShelfFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::sr",1,"Filters::IIR::Butterworth::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighShelf_sr_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighShelf_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighShelfFilter *arg1 = (Filters::IIR::Butterworth::HighShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighShelfFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::sr",1,"Filters::IIR::Butterworth::HighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighShelf_sr_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighShelf_g_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighShelfFilter *arg1 = (Filters::IIR::Butterworth::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighShelfFilter::g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::g",1,"Filters::IIR::Butterworth::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::g",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighShelf_g_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->g = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighShelf_g_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighShelfFilter *arg1 = (Filters::IIR::Butterworth::HighShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighShelfFilter::g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::g",1,"Filters::IIR::Butterworth::HighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighShelf_g_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->g);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighShelf_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighShelfFilter *arg1 = (Filters::IIR::Butterworth::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighShelfFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::R",1,"Filters::IIR::Butterworth::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighShelf_R_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighShelf_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighShelfFilter *arg1 = (Filters::IIR::Butterworth::HighShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighShelfFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::R",1,"Filters::IIR::Butterworth::HighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighShelf_R_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRButterworthHighShelf(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::Butterworth::HighShelfFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighShelfFilter::HighShelfFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::HighShelfFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::HighShelfFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::HighShelfFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::HighShelfFilter",4,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::Butterworth::HighShelfFilter *)new Filters::IIR::Butterworth::HighShelfFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighShelf_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighShelfFilter *arg1 = (Filters::IIR::Butterworth::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighShelfFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::setCutoff",1,"Filters::IIR::Butterworth::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighShelf_setCutoff",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighShelf_setResonance(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighShelfFilter *arg1 = (Filters::IIR::Butterworth::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighShelfFilter::setResonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::setResonance",1,"Filters::IIR::Butterworth::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::setResonance",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighShelf_setResonance",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setResonance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighShelf_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighShelfFilter *arg1 = (Filters::IIR::Butterworth::HighShelfFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighShelfFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::setPort",1,"Filters::IIR::Butterworth::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighShelf_setPort",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighShelf_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighShelfFilter *arg1 = (Filters::IIR::Butterworth::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighShelfFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::Tick",1,"Filters::IIR::Butterworth::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighShelf_Tick",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighShelf_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighShelfFilter *arg1 = (Filters::IIR::Butterworth::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighShelfFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::Tick",1,"Filters::IIR::Butterworth::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighShelf_Tick",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighShelf_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighShelfFilter *arg1 = (Filters::IIR::Butterworth::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighShelfFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::Tick",1,"Filters::IIR::Butterworth::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighShelf_Tick",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighShelf_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::HighShelfFilter *arg1 = (Filters::IIR::Butterworth::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::HighShelfFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::Tick",1,"Filters::IIR::Butterworth::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::HighShelfFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthHighShelf_Tick",1,SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthHighShelf_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRButterworthHighShelf_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRButterworthHighShelf_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRButterworthHighShelf_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRButterworthHighShelf_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRButterworthHighShelf_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::Butterworth::HighShelfFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Butterworth::HighShelfFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Butterworth::HighShelfFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Butterworth::HighShelfFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRButterworthHighShelf(void *obj) {
Filters::IIR::Butterworth::HighShelfFilter *arg1 = (Filters::IIR::Butterworth::HighShelfFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRButterworthHighShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRButterworthHighShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRButterworthHighShelf_attributes[] = {
    { "prototype", _wrap_IIRButterworthHighShelf_prototype_get, _wrap_IIRButterworthHighShelf_prototype_set },
    { "biquads", _wrap_IIRButterworthHighShelf_biquads_get, _wrap_IIRButterworthHighShelf_biquads_set },
    { "order", _wrap_IIRButterworthHighShelf_order_get, _wrap_IIRButterworthHighShelf_order_set },
    { "fc", _wrap_IIRButterworthHighShelf_fc_get, _wrap_IIRButterworthHighShelf_fc_set },
    { "sr", _wrap_IIRButterworthHighShelf_sr_get, _wrap_IIRButterworthHighShelf_sr_set },
    { "g", _wrap_IIRButterworthHighShelf_g_get, _wrap_IIRButterworthHighShelf_g_set },
    { "R", _wrap_IIRButterworthHighShelf_R_get, _wrap_IIRButterworthHighShelf_R_set },
    {0,0,0}
};
static swig_lua_method swig_IIRButterworthHighShelf_methods[]= {
    { "setCutoff", _wrap_IIRButterworthHighShelf_setCutoff},
    { "setResonance", _wrap_IIRButterworthHighShelf_setResonance},
    { "setPort", _wrap_IIRButterworthHighShelf_setPort},
    { "Tick", _wrap_IIRButterworthHighShelf_Tick},
    {0,0}
};
static swig_lua_method swig_IIRButterworthHighShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRButterworthHighShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRButterworthHighShelf_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_ORDER", Filters::IIR::Butterworth::HighShelfFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::Butterworth::HighShelfFilter::PORT_CUTOFF)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRButterworthHighShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRButterworthHighShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRButterworthHighShelf_Sf_SwigStatic = {
    "IIRButterworthHighShelf",
    swig_IIRButterworthHighShelf_Sf_SwigStatic_methods,
    swig_IIRButterworthHighShelf_Sf_SwigStatic_attributes,
    swig_IIRButterworthHighShelf_Sf_SwigStatic_constants,
    swig_IIRButterworthHighShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRButterworthHighShelf_bases[] = {0,0};
static const char *swig_IIRButterworthHighShelf_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRButterworthHighShelf = { "IIRButterworthHighShelf", "IIRButterworthHighShelf", &SWIGTYPE_p_Filters__IIR__Butterworth__HighShelfFilter,_proxy__wrap_new_IIRButterworthHighShelf, swig_delete_IIRButterworthHighShelf, swig_IIRButterworthHighShelf_methods, swig_IIRButterworthHighShelf_attributes, &swig_IIRButterworthHighShelf_Sf_SwigStatic, swig_IIRButterworthHighShelf_meta, swig_IIRButterworthHighShelf_bases, swig_IIRButterworthHighShelf_base_names };

static int _wrap_IIRButterworthBandShelf_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandShelfFilter *arg1 = (Filters::IIR::Butterworth::BandShelfFilter *) 0 ;
  Dsp::Butterworth::BandShelf< 32 > arg2 ;
  Dsp::Butterworth::BandShelf< 32 > *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandShelfFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::prototype",1,"Filters::IIR::Butterworth::BandShelfFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::prototype",2,"Dsp::Butterworth::BandShelf< 32 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandShelf_prototype_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__Butterworth__BandShelfT_32_t,0))){
    SWIG_fail_ptr("IIRButterworthBandShelf_prototype_set",2,SWIGTYPE_p_Dsp__Butterworth__BandShelfT_32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandShelf_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandShelfFilter *arg1 = (Filters::IIR::Butterworth::BandShelfFilter *) 0 ;
  Dsp::Butterworth::BandShelf< 32 > result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandShelfFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::prototype",1,"Filters::IIR::Butterworth::BandShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandShelf_prototype_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::Butterworth::BandShelf< 32 > * resultptr = new Dsp::Butterworth::BandShelf< 32 >((const Dsp::Butterworth::BandShelf< 32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__Butterworth__BandShelfT_32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandShelf_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandShelfFilter *arg1 = (Filters::IIR::Butterworth::BandShelfFilter *) 0 ;
  Filters::BiquadTransposedTypeIICascade *arg2 = (Filters::BiquadTransposedTypeIICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandShelfFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::biquads",1,"Filters::IIR::Butterworth::BandShelfFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::biquads",2,"Filters::BiquadTransposedTypeIICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandShelf_biquads_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0))){
    SWIG_fail_ptr("IIRButterworthBandShelf_biquads_set",2,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandShelf_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandShelfFilter *arg1 = (Filters::IIR::Butterworth::BandShelfFilter *) 0 ;
  Filters::BiquadTransposedTypeIICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandShelfFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::biquads",1,"Filters::IIR::Butterworth::BandShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandShelf_biquads_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter);
  }
  
  result = (Filters::BiquadTransposedTypeIICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandShelf_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandShelfFilter *arg1 = (Filters::IIR::Butterworth::BandShelfFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandShelfFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::order",1,"Filters::IIR::Butterworth::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandShelf_order_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandShelf_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandShelfFilter *arg1 = (Filters::IIR::Butterworth::BandShelfFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandShelfFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::order",1,"Filters::IIR::Butterworth::BandShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandShelf_order_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandShelf_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandShelfFilter *arg1 = (Filters::IIR::Butterworth::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandShelfFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::fc",1,"Filters::IIR::Butterworth::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandShelf_fc_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandShelf_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandShelfFilter *arg1 = (Filters::IIR::Butterworth::BandShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandShelfFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::fc",1,"Filters::IIR::Butterworth::BandShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandShelf_fc_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandShelf_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandShelfFilter *arg1 = (Filters::IIR::Butterworth::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandShelfFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::sr",1,"Filters::IIR::Butterworth::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandShelf_sr_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandShelf_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandShelfFilter *arg1 = (Filters::IIR::Butterworth::BandShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandShelfFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::sr",1,"Filters::IIR::Butterworth::BandShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandShelf_sr_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandShelf_g_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandShelfFilter *arg1 = (Filters::IIR::Butterworth::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandShelfFilter::g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::g",1,"Filters::IIR::Butterworth::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::g",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandShelf_g_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->g = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandShelf_g_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandShelfFilter *arg1 = (Filters::IIR::Butterworth::BandShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandShelfFilter::g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::g",1,"Filters::IIR::Butterworth::BandShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandShelf_g_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->g);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandShelf_bw_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandShelfFilter *arg1 = (Filters::IIR::Butterworth::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandShelfFilter::bw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::bw",1,"Filters::IIR::Butterworth::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::bw",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandShelf_bw_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->bw = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandShelf_bw_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandShelfFilter *arg1 = (Filters::IIR::Butterworth::BandShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandShelfFilter::bw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::bw",1,"Filters::IIR::Butterworth::BandShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandShelf_bw_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->bw);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandShelf_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandShelfFilter *arg1 = (Filters::IIR::Butterworth::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandShelfFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::R",1,"Filters::IIR::Butterworth::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandShelf_R_set",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandShelf_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandShelfFilter *arg1 = (Filters::IIR::Butterworth::BandShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandShelfFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::R",1,"Filters::IIR::Butterworth::BandShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandShelf_R_get",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRButterworthBandShelf(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  Filters::IIR::Butterworth::BandShelfFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandShelfFilter::BandShelfFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::BandShelfFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::BandShelfFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::BandShelfFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::BandShelfFilter",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::BandShelfFilter",5,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (Filters::IIR::Butterworth::BandShelfFilter *)new Filters::IIR::Butterworth::BandShelfFilter(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandShelf_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandShelfFilter *arg1 = (Filters::IIR::Butterworth::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandShelfFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::setCutoff",1,"Filters::IIR::Butterworth::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandShelf_setCutoff",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandShelf_setResonance(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandShelfFilter *arg1 = (Filters::IIR::Butterworth::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandShelfFilter::setResonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::setResonance",1,"Filters::IIR::Butterworth::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::setResonance",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandShelf_setResonance",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setResonance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandShelf_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandShelfFilter *arg1 = (Filters::IIR::Butterworth::BandShelfFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandShelfFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::setPort",1,"Filters::IIR::Butterworth::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandShelf_setPort",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandShelf_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandShelfFilter *arg1 = (Filters::IIR::Butterworth::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandShelfFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::Tick",1,"Filters::IIR::Butterworth::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandShelf_Tick",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandShelf_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandShelfFilter *arg1 = (Filters::IIR::Butterworth::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandShelfFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::Tick",1,"Filters::IIR::Butterworth::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandShelf_Tick",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandShelf_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandShelfFilter *arg1 = (Filters::IIR::Butterworth::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandShelfFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::Tick",1,"Filters::IIR::Butterworth::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandShelf_Tick",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandShelf_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Butterworth::BandShelfFilter *arg1 = (Filters::IIR::Butterworth::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Butterworth::BandShelfFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::Tick",1,"Filters::IIR::Butterworth::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Butterworth::BandShelfFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRButterworthBandShelf_Tick",1,SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRButterworthBandShelf_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRButterworthBandShelf_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRButterworthBandShelf_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRButterworthBandShelf_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRButterworthBandShelf_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRButterworthBandShelf_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::Butterworth::BandShelfFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Butterworth::BandShelfFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Butterworth::BandShelfFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Butterworth::BandShelfFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRButterworthBandShelf(void *obj) {
Filters::IIR::Butterworth::BandShelfFilter *arg1 = (Filters::IIR::Butterworth::BandShelfFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRButterworthBandShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRButterworthBandShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRButterworthBandShelf_attributes[] = {
    { "prototype", _wrap_IIRButterworthBandShelf_prototype_get, _wrap_IIRButterworthBandShelf_prototype_set },
    { "biquads", _wrap_IIRButterworthBandShelf_biquads_get, _wrap_IIRButterworthBandShelf_biquads_set },
    { "order", _wrap_IIRButterworthBandShelf_order_get, _wrap_IIRButterworthBandShelf_order_set },
    { "fc", _wrap_IIRButterworthBandShelf_fc_get, _wrap_IIRButterworthBandShelf_fc_set },
    { "sr", _wrap_IIRButterworthBandShelf_sr_get, _wrap_IIRButterworthBandShelf_sr_set },
    { "g", _wrap_IIRButterworthBandShelf_g_get, _wrap_IIRButterworthBandShelf_g_set },
    { "bw", _wrap_IIRButterworthBandShelf_bw_get, _wrap_IIRButterworthBandShelf_bw_set },
    { "R", _wrap_IIRButterworthBandShelf_R_get, _wrap_IIRButterworthBandShelf_R_set },
    {0,0,0}
};
static swig_lua_method swig_IIRButterworthBandShelf_methods[]= {
    { "setCutoff", _wrap_IIRButterworthBandShelf_setCutoff},
    { "setResonance", _wrap_IIRButterworthBandShelf_setResonance},
    { "setPort", _wrap_IIRButterworthBandShelf_setPort},
    { "Tick", _wrap_IIRButterworthBandShelf_Tick},
    {0,0}
};
static swig_lua_method swig_IIRButterworthBandShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRButterworthBandShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRButterworthBandShelf_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_ORDER", Filters::IIR::Butterworth::BandShelfFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::Butterworth::BandShelfFilter::PORT_CUTOFF)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRButterworthBandShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRButterworthBandShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRButterworthBandShelf_Sf_SwigStatic = {
    "IIRButterworthBandShelf",
    swig_IIRButterworthBandShelf_Sf_SwigStatic_methods,
    swig_IIRButterworthBandShelf_Sf_SwigStatic_attributes,
    swig_IIRButterworthBandShelf_Sf_SwigStatic_constants,
    swig_IIRButterworthBandShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRButterworthBandShelf_bases[] = {0,0};
static const char *swig_IIRButterworthBandShelf_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRButterworthBandShelf = { "IIRButterworthBandShelf", "IIRButterworthBandShelf", &SWIGTYPE_p_Filters__IIR__Butterworth__BandShelfFilter,_proxy__wrap_new_IIRButterworthBandShelf, swig_delete_IIRButterworthBandShelf, swig_IIRButterworthBandShelf_methods, swig_IIRButterworthBandShelf_attributes, &swig_IIRButterworthBandShelf_Sf_SwigStatic, swig_IIRButterworthBandShelf_meta, swig_IIRButterworthBandShelf_bases, swig_IIRButterworthBandShelf_base_names };

static int _wrap_IIRChebyshevIILowPass_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowPassFilter *arg1 = (Filters::IIR::ChebyshevII::LowPassFilter *) 0 ;
  Dsp::ChebyshevII::LowPass< 32 > arg2 ;
  Dsp::ChebyshevII::LowPass< 32 > *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowPassFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::prototype",1,"Filters::IIR::ChebyshevII::LowPassFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::prototype",2,"Dsp::ChebyshevII::LowPass< 32 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowPass_prototype_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__ChebyshevII__LowPassT_32_t,0))){
    SWIG_fail_ptr("IIRChebyshevIILowPass_prototype_set",2,SWIGTYPE_p_Dsp__ChebyshevII__LowPassT_32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowPass_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowPassFilter *arg1 = (Filters::IIR::ChebyshevII::LowPassFilter *) 0 ;
  Dsp::ChebyshevII::LowPass< 32 > result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowPassFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::prototype",1,"Filters::IIR::ChebyshevII::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowPass_prototype_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::ChebyshevII::LowPass< 32 > * resultptr = new Dsp::ChebyshevII::LowPass< 32 >((const Dsp::ChebyshevII::LowPass< 32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__ChebyshevII__LowPassT_32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowPass_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowPassFilter *arg1 = (Filters::IIR::ChebyshevII::LowPassFilter *) 0 ;
  Filters::BiquadTransposedTypeIICascade *arg2 = (Filters::BiquadTransposedTypeIICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowPassFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::biquads",1,"Filters::IIR::ChebyshevII::LowPassFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::biquads",2,"Filters::BiquadTransposedTypeIICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowPass_biquads_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0))){
    SWIG_fail_ptr("IIRChebyshevIILowPass_biquads_set",2,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowPass_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowPassFilter *arg1 = (Filters::IIR::ChebyshevII::LowPassFilter *) 0 ;
  Filters::BiquadTransposedTypeIICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowPassFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::biquads",1,"Filters::IIR::ChebyshevII::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowPass_biquads_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter);
  }
  
  result = (Filters::BiquadTransposedTypeIICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowPass_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowPassFilter *arg1 = (Filters::IIR::ChebyshevII::LowPassFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowPassFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::order",1,"Filters::IIR::ChebyshevII::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowPass_order_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowPass_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowPassFilter *arg1 = (Filters::IIR::ChebyshevII::LowPassFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowPassFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::order",1,"Filters::IIR::ChebyshevII::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowPass_order_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowPass_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowPassFilter *arg1 = (Filters::IIR::ChebyshevII::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowPassFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::fc",1,"Filters::IIR::ChebyshevII::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowPass_fc_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowPass_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowPassFilter *arg1 = (Filters::IIR::ChebyshevII::LowPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowPassFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::fc",1,"Filters::IIR::ChebyshevII::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowPass_fc_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowPass_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowPassFilter *arg1 = (Filters::IIR::ChebyshevII::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowPassFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::sr",1,"Filters::IIR::ChebyshevII::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowPass_sr_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowPass_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowPassFilter *arg1 = (Filters::IIR::ChebyshevII::LowPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowPassFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::sr",1,"Filters::IIR::ChebyshevII::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowPass_sr_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowPass_stop_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowPassFilter *arg1 = (Filters::IIR::ChebyshevII::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowPassFilter::stop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::stop",1,"Filters::IIR::ChebyshevII::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::stop",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowPass_stop_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->stop = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowPass_stop_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowPassFilter *arg1 = (Filters::IIR::ChebyshevII::LowPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowPassFilter::stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::stop",1,"Filters::IIR::ChebyshevII::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowPass_stop_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->stop);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIILowPass__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::ChebyshevII::LowPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowPassFilter::LowPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::LowPassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::LowPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::LowPassFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::LowPassFilter",4,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::ChebyshevII::LowPassFilter *)new Filters::IIR::ChebyshevII::LowPassFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIILowPass__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::ChebyshevII::LowPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowPassFilter::LowPassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::LowPassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::LowPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::LowPassFilter",3,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::ChebyshevII::LowPassFilter *)new Filters::IIR::ChebyshevII::LowPassFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIILowPass(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_IIRChebyshevIILowPass__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_IIRChebyshevIILowPass__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IIRChebyshevIILowPass'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ChebyshevII::LowPassFilter::LowPassFilter(size_t,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevII::LowPassFilter::LowPassFilter(size_t,DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_IIRChebyshevIILowPass_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowPassFilter *arg1 = (Filters::IIR::ChebyshevII::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowPassFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::setCutoff",1,"Filters::IIR::ChebyshevII::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowPass_setCutoff",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowPass_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowPassFilter *arg1 = (Filters::IIR::ChebyshevII::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowPassFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::setQ",1,"Filters::IIR::ChebyshevII::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowPass_setQ",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowPass_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowPassFilter *arg1 = (Filters::IIR::ChebyshevII::LowPassFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowPassFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::setPort",1,"Filters::IIR::ChebyshevII::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowPass_setPort",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowPass_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowPassFilter *arg1 = (Filters::IIR::ChebyshevII::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowPassFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::Tick",1,"Filters::IIR::ChebyshevII::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowPass_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowPass_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowPassFilter *arg1 = (Filters::IIR::ChebyshevII::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowPassFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::Tick",1,"Filters::IIR::ChebyshevII::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowPass_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowPass_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowPassFilter *arg1 = (Filters::IIR::ChebyshevII::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowPassFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::Tick",1,"Filters::IIR::ChebyshevII::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowPass_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowPass_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowPassFilter *arg1 = (Filters::IIR::ChebyshevII::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowPassFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::Tick",1,"Filters::IIR::ChebyshevII::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowPassFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowPass_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowPass_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRChebyshevIILowPass_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRChebyshevIILowPass_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRChebyshevIILowPass_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRChebyshevIILowPass_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRChebyshevIILowPass_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ChebyshevII::LowPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevII::LowPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevII::LowPassFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevII::LowPassFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRChebyshevIILowPass(void *obj) {
Filters::IIR::ChebyshevII::LowPassFilter *arg1 = (Filters::IIR::ChebyshevII::LowPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRChebyshevIILowPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRChebyshevIILowPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRChebyshevIILowPass_attributes[] = {
    { "prototype", _wrap_IIRChebyshevIILowPass_prototype_get, _wrap_IIRChebyshevIILowPass_prototype_set },
    { "biquads", _wrap_IIRChebyshevIILowPass_biquads_get, _wrap_IIRChebyshevIILowPass_biquads_set },
    { "order", _wrap_IIRChebyshevIILowPass_order_get, _wrap_IIRChebyshevIILowPass_order_set },
    { "fc", _wrap_IIRChebyshevIILowPass_fc_get, _wrap_IIRChebyshevIILowPass_fc_set },
    { "sr", _wrap_IIRChebyshevIILowPass_sr_get, _wrap_IIRChebyshevIILowPass_sr_set },
    { "stop", _wrap_IIRChebyshevIILowPass_stop_get, _wrap_IIRChebyshevIILowPass_stop_set },
    {0,0,0}
};
static swig_lua_method swig_IIRChebyshevIILowPass_methods[]= {
    { "setCutoff", _wrap_IIRChebyshevIILowPass_setCutoff},
    { "setQ", _wrap_IIRChebyshevIILowPass_setQ},
    { "setPort", _wrap_IIRChebyshevIILowPass_setPort},
    { "Tick", _wrap_IIRChebyshevIILowPass_Tick},
    {0,0}
};
static swig_lua_method swig_IIRChebyshevIILowPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRChebyshevIILowPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRChebyshevIILowPass_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_ORDER", Filters::IIR::ChebyshevII::LowPassFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::ChebyshevII::LowPassFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_STOPBAND", Filters::IIR::ChebyshevII::LowPassFilter::PORT_STOPBAND)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRChebyshevIILowPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRChebyshevIILowPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRChebyshevIILowPass_Sf_SwigStatic = {
    "IIRChebyshevIILowPass",
    swig_IIRChebyshevIILowPass_Sf_SwigStatic_methods,
    swig_IIRChebyshevIILowPass_Sf_SwigStatic_attributes,
    swig_IIRChebyshevIILowPass_Sf_SwigStatic_constants,
    swig_IIRChebyshevIILowPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRChebyshevIILowPass_bases[] = {0,0};
static const char *swig_IIRChebyshevIILowPass_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRChebyshevIILowPass = { "IIRChebyshevIILowPass", "IIRChebyshevIILowPass", &SWIGTYPE_p_Filters__IIR__ChebyshevII__LowPassFilter,_proxy__wrap_new_IIRChebyshevIILowPass, swig_delete_IIRChebyshevIILowPass, swig_IIRChebyshevIILowPass_methods, swig_IIRChebyshevIILowPass_attributes, &swig_IIRChebyshevIILowPass_Sf_SwigStatic, swig_IIRChebyshevIILowPass_meta, swig_IIRChebyshevIILowPass_bases, swig_IIRChebyshevIILowPass_base_names };

static int _wrap_IIRChebyshevIIHighPass_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighPassFilter *arg1 = (Filters::IIR::ChebyshevII::HighPassFilter *) 0 ;
  Dsp::ChebyshevII::HighPass< 32 > arg2 ;
  Dsp::ChebyshevII::HighPass< 32 > *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighPassFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::prototype",1,"Filters::IIR::ChebyshevII::HighPassFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::prototype",2,"Dsp::ChebyshevII::HighPass< 32 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighPass_prototype_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__ChebyshevII__HighPassT_32_t,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighPass_prototype_set",2,SWIGTYPE_p_Dsp__ChebyshevII__HighPassT_32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighPass_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighPassFilter *arg1 = (Filters::IIR::ChebyshevII::HighPassFilter *) 0 ;
  Dsp::ChebyshevII::HighPass< 32 > result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighPassFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::prototype",1,"Filters::IIR::ChebyshevII::HighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighPass_prototype_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::ChebyshevII::HighPass< 32 > * resultptr = new Dsp::ChebyshevII::HighPass< 32 >((const Dsp::ChebyshevII::HighPass< 32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__ChebyshevII__HighPassT_32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighPass_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighPassFilter *arg1 = (Filters::IIR::ChebyshevII::HighPassFilter *) 0 ;
  Filters::BiquadTransposedTypeIICascade *arg2 = (Filters::BiquadTransposedTypeIICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighPassFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::biquads",1,"Filters::IIR::ChebyshevII::HighPassFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::biquads",2,"Filters::BiquadTransposedTypeIICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighPass_biquads_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighPass_biquads_set",2,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighPass_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighPassFilter *arg1 = (Filters::IIR::ChebyshevII::HighPassFilter *) 0 ;
  Filters::BiquadTransposedTypeIICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighPassFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::biquads",1,"Filters::IIR::ChebyshevII::HighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighPass_biquads_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter);
  }
  
  result = (Filters::BiquadTransposedTypeIICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighPass_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighPassFilter *arg1 = (Filters::IIR::ChebyshevII::HighPassFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighPassFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::order",1,"Filters::IIR::ChebyshevII::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighPass_order_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighPass_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighPassFilter *arg1 = (Filters::IIR::ChebyshevII::HighPassFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighPassFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::order",1,"Filters::IIR::ChebyshevII::HighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighPass_order_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighPass_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighPassFilter *arg1 = (Filters::IIR::ChebyshevII::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighPassFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::fc",1,"Filters::IIR::ChebyshevII::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighPass_fc_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighPass_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighPassFilter *arg1 = (Filters::IIR::ChebyshevII::HighPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighPassFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::fc",1,"Filters::IIR::ChebyshevII::HighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighPass_fc_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighPass_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighPassFilter *arg1 = (Filters::IIR::ChebyshevII::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighPassFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::sr",1,"Filters::IIR::ChebyshevII::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighPass_sr_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighPass_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighPassFilter *arg1 = (Filters::IIR::ChebyshevII::HighPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighPassFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::sr",1,"Filters::IIR::ChebyshevII::HighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighPass_sr_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighPass_stop_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighPassFilter *arg1 = (Filters::IIR::ChebyshevII::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighPassFilter::stop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::stop",1,"Filters::IIR::ChebyshevII::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::stop",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighPass_stop_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->stop = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighPass_stop_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighPassFilter *arg1 = (Filters::IIR::ChebyshevII::HighPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighPassFilter::stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::stop",1,"Filters::IIR::ChebyshevII::HighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighPass_stop_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->stop);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIIHighPass__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::ChebyshevII::HighPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighPassFilter::HighPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::HighPassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::HighPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::HighPassFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::HighPassFilter",4,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::ChebyshevII::HighPassFilter *)new Filters::IIR::ChebyshevII::HighPassFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIIHighPass__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::ChebyshevII::HighPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighPassFilter::HighPassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::HighPassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::HighPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::HighPassFilter",3,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::ChebyshevII::HighPassFilter *)new Filters::IIR::ChebyshevII::HighPassFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIIHighPass(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_IIRChebyshevIIHighPass__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_IIRChebyshevIIHighPass__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IIRChebyshevIIHighPass'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ChebyshevII::HighPassFilter::HighPassFilter(size_t,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevII::HighPassFilter::HighPassFilter(size_t,DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_IIRChebyshevIIHighPass_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighPassFilter *arg1 = (Filters::IIR::ChebyshevII::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighPassFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::setCutoff",1,"Filters::IIR::ChebyshevII::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighPass_setCutoff",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighPass_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighPassFilter *arg1 = (Filters::IIR::ChebyshevII::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighPassFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::setQ",1,"Filters::IIR::ChebyshevII::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighPass_setQ",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighPass_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighPassFilter *arg1 = (Filters::IIR::ChebyshevII::HighPassFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighPassFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::setPort",1,"Filters::IIR::ChebyshevII::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighPass_setPort",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighPass_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighPassFilter *arg1 = (Filters::IIR::ChebyshevII::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighPassFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::Tick",1,"Filters::IIR::ChebyshevII::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighPass_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighPass_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighPassFilter *arg1 = (Filters::IIR::ChebyshevII::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighPassFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::Tick",1,"Filters::IIR::ChebyshevII::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighPass_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighPass_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighPassFilter *arg1 = (Filters::IIR::ChebyshevII::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighPassFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::Tick",1,"Filters::IIR::ChebyshevII::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighPass_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighPass_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighPassFilter *arg1 = (Filters::IIR::ChebyshevII::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighPassFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::Tick",1,"Filters::IIR::ChebyshevII::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighPassFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighPass_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighPass_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRChebyshevIIHighPass_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRChebyshevIIHighPass_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRChebyshevIIHighPass_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRChebyshevIIHighPass_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRChebyshevIIHighPass_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ChebyshevII::HighPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevII::HighPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevII::HighPassFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevII::HighPassFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRChebyshevIIHighPass(void *obj) {
Filters::IIR::ChebyshevII::HighPassFilter *arg1 = (Filters::IIR::ChebyshevII::HighPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRChebyshevIIHighPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRChebyshevIIHighPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRChebyshevIIHighPass_attributes[] = {
    { "prototype", _wrap_IIRChebyshevIIHighPass_prototype_get, _wrap_IIRChebyshevIIHighPass_prototype_set },
    { "biquads", _wrap_IIRChebyshevIIHighPass_biquads_get, _wrap_IIRChebyshevIIHighPass_biquads_set },
    { "order", _wrap_IIRChebyshevIIHighPass_order_get, _wrap_IIRChebyshevIIHighPass_order_set },
    { "fc", _wrap_IIRChebyshevIIHighPass_fc_get, _wrap_IIRChebyshevIIHighPass_fc_set },
    { "sr", _wrap_IIRChebyshevIIHighPass_sr_get, _wrap_IIRChebyshevIIHighPass_sr_set },
    { "stop", _wrap_IIRChebyshevIIHighPass_stop_get, _wrap_IIRChebyshevIIHighPass_stop_set },
    {0,0,0}
};
static swig_lua_method swig_IIRChebyshevIIHighPass_methods[]= {
    { "setCutoff", _wrap_IIRChebyshevIIHighPass_setCutoff},
    { "setQ", _wrap_IIRChebyshevIIHighPass_setQ},
    { "setPort", _wrap_IIRChebyshevIIHighPass_setPort},
    { "Tick", _wrap_IIRChebyshevIIHighPass_Tick},
    {0,0}
};
static swig_lua_method swig_IIRChebyshevIIHighPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRChebyshevIIHighPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRChebyshevIIHighPass_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_ORDER", Filters::IIR::ChebyshevII::HighPassFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::ChebyshevII::HighPassFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_STOPBAND", Filters::IIR::ChebyshevII::HighPassFilter::PORT_STOPBAND)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRChebyshevIIHighPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRChebyshevIIHighPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRChebyshevIIHighPass_Sf_SwigStatic = {
    "IIRChebyshevIIHighPass",
    swig_IIRChebyshevIIHighPass_Sf_SwigStatic_methods,
    swig_IIRChebyshevIIHighPass_Sf_SwigStatic_attributes,
    swig_IIRChebyshevIIHighPass_Sf_SwigStatic_constants,
    swig_IIRChebyshevIIHighPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRChebyshevIIHighPass_bases[] = {0,0};
static const char *swig_IIRChebyshevIIHighPass_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRChebyshevIIHighPass = { "IIRChebyshevIIHighPass", "IIRChebyshevIIHighPass", &SWIGTYPE_p_Filters__IIR__ChebyshevII__HighPassFilter,_proxy__wrap_new_IIRChebyshevIIHighPass, swig_delete_IIRChebyshevIIHighPass, swig_IIRChebyshevIIHighPass_methods, swig_IIRChebyshevIIHighPass_attributes, &swig_IIRChebyshevIIHighPass_Sf_SwigStatic, swig_IIRChebyshevIIHighPass_meta, swig_IIRChebyshevIIHighPass_bases, swig_IIRChebyshevIIHighPass_base_names };

static int _wrap_IIRChebyshevIIBandPass_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandPassFilter *arg1 = (Filters::IIR::ChebyshevII::BandPassFilter *) 0 ;
  Dsp::ChebyshevII::BandPass< 32 > arg2 ;
  Dsp::ChebyshevII::BandPass< 32 > *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandPassFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::prototype",1,"Filters::IIR::ChebyshevII::BandPassFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::prototype",2,"Dsp::ChebyshevII::BandPass< 32 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandPass_prototype_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__ChebyshevII__BandPassT_32_t,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandPass_prototype_set",2,SWIGTYPE_p_Dsp__ChebyshevII__BandPassT_32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandPass_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandPassFilter *arg1 = (Filters::IIR::ChebyshevII::BandPassFilter *) 0 ;
  Dsp::ChebyshevII::BandPass< 32 > result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandPassFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::prototype",1,"Filters::IIR::ChebyshevII::BandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandPass_prototype_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::ChebyshevII::BandPass< 32 > * resultptr = new Dsp::ChebyshevII::BandPass< 32 >((const Dsp::ChebyshevII::BandPass< 32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__ChebyshevII__BandPassT_32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandPass_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandPassFilter *arg1 = (Filters::IIR::ChebyshevII::BandPassFilter *) 0 ;
  Filters::BiquadTransposedTypeIICascade *arg2 = (Filters::BiquadTransposedTypeIICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandPassFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::biquads",1,"Filters::IIR::ChebyshevII::BandPassFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::biquads",2,"Filters::BiquadTransposedTypeIICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandPass_biquads_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandPass_biquads_set",2,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandPass_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandPassFilter *arg1 = (Filters::IIR::ChebyshevII::BandPassFilter *) 0 ;
  Filters::BiquadTransposedTypeIICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandPassFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::biquads",1,"Filters::IIR::ChebyshevII::BandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandPass_biquads_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter);
  }
  
  result = (Filters::BiquadTransposedTypeIICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandPass_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandPassFilter *arg1 = (Filters::IIR::ChebyshevII::BandPassFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandPassFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::order",1,"Filters::IIR::ChebyshevII::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandPass_order_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandPass_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandPassFilter *arg1 = (Filters::IIR::ChebyshevII::BandPassFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandPassFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::order",1,"Filters::IIR::ChebyshevII::BandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandPass_order_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandPass_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandPassFilter *arg1 = (Filters::IIR::ChebyshevII::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandPassFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::fc",1,"Filters::IIR::ChebyshevII::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandPass_fc_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandPass_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandPassFilter *arg1 = (Filters::IIR::ChebyshevII::BandPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandPassFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::fc",1,"Filters::IIR::ChebyshevII::BandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandPass_fc_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandPass_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandPassFilter *arg1 = (Filters::IIR::ChebyshevII::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandPassFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::sr",1,"Filters::IIR::ChebyshevII::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandPass_sr_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandPass_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandPassFilter *arg1 = (Filters::IIR::ChebyshevII::BandPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandPassFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::sr",1,"Filters::IIR::ChebyshevII::BandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandPass_sr_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandPass_stop_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandPassFilter *arg1 = (Filters::IIR::ChebyshevII::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandPassFilter::stop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::stop",1,"Filters::IIR::ChebyshevII::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::stop",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandPass_stop_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->stop = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandPass_stop_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandPassFilter *arg1 = (Filters::IIR::ChebyshevII::BandPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandPassFilter::stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::stop",1,"Filters::IIR::ChebyshevII::BandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandPass_stop_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->stop);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandPass_bw_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandPassFilter *arg1 = (Filters::IIR::ChebyshevII::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandPassFilter::bw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::bw",1,"Filters::IIR::ChebyshevII::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::bw",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandPass_bw_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->bw = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandPass_bw_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandPassFilter *arg1 = (Filters::IIR::ChebyshevII::BandPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandPassFilter::bw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::bw",1,"Filters::IIR::ChebyshevII::BandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandPass_bw_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->bw);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIIBandPass__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  Filters::IIR::ChebyshevII::BandPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandPassFilter::BandPassFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::BandPassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::BandPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::BandPassFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::BandPassFilter",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::BandPassFilter",5,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (Filters::IIR::ChebyshevII::BandPassFilter *)new Filters::IIR::ChebyshevII::BandPassFilter(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIIBandPass__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::ChebyshevII::BandPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandPassFilter::BandPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::BandPassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::BandPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::BandPassFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::BandPassFilter",4,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::ChebyshevII::BandPassFilter *)new Filters::IIR::ChebyshevII::BandPassFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIIBandPass__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::ChebyshevII::BandPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandPassFilter::BandPassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::BandPassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::BandPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::BandPassFilter",3,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::ChebyshevII::BandPassFilter *)new Filters::IIR::ChebyshevII::BandPassFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIIBandPass(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_IIRChebyshevIIBandPass__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_IIRChebyshevIIBandPass__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_IIRChebyshevIIBandPass__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IIRChebyshevIIBandPass'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ChebyshevII::BandPassFilter::BandPassFilter(size_t,DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevII::BandPassFilter::BandPassFilter(size_t,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevII::BandPassFilter::BandPassFilter(size_t,DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_IIRChebyshevIIBandPass_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandPassFilter *arg1 = (Filters::IIR::ChebyshevII::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandPassFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::setCutoff",1,"Filters::IIR::ChebyshevII::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandPass_setCutoff",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandPass_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandPassFilter *arg1 = (Filters::IIR::ChebyshevII::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandPassFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::setQ",1,"Filters::IIR::ChebyshevII::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandPass_setQ",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandPass_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandPassFilter *arg1 = (Filters::IIR::ChebyshevII::BandPassFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandPassFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::setPort",1,"Filters::IIR::ChebyshevII::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandPass_setPort",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandPass_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandPassFilter *arg1 = (Filters::IIR::ChebyshevII::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandPassFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::Tick",1,"Filters::IIR::ChebyshevII::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandPass_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandPass_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandPassFilter *arg1 = (Filters::IIR::ChebyshevII::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandPassFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::Tick",1,"Filters::IIR::ChebyshevII::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandPass_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandPass_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandPassFilter *arg1 = (Filters::IIR::ChebyshevII::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandPassFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::Tick",1,"Filters::IIR::ChebyshevII::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandPass_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandPass_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandPassFilter *arg1 = (Filters::IIR::ChebyshevII::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandPassFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::Tick",1,"Filters::IIR::ChebyshevII::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandPassFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandPass_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandPass_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRChebyshevIIBandPass_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRChebyshevIIBandPass_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRChebyshevIIBandPass_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRChebyshevIIBandPass_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRChebyshevIIBandPass_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ChebyshevII::BandPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevII::BandPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevII::BandPassFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevII::BandPassFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRChebyshevIIBandPass(void *obj) {
Filters::IIR::ChebyshevII::BandPassFilter *arg1 = (Filters::IIR::ChebyshevII::BandPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRChebyshevIIBandPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRChebyshevIIBandPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRChebyshevIIBandPass_attributes[] = {
    { "prototype", _wrap_IIRChebyshevIIBandPass_prototype_get, _wrap_IIRChebyshevIIBandPass_prototype_set },
    { "biquads", _wrap_IIRChebyshevIIBandPass_biquads_get, _wrap_IIRChebyshevIIBandPass_biquads_set },
    { "order", _wrap_IIRChebyshevIIBandPass_order_get, _wrap_IIRChebyshevIIBandPass_order_set },
    { "fc", _wrap_IIRChebyshevIIBandPass_fc_get, _wrap_IIRChebyshevIIBandPass_fc_set },
    { "sr", _wrap_IIRChebyshevIIBandPass_sr_get, _wrap_IIRChebyshevIIBandPass_sr_set },
    { "stop", _wrap_IIRChebyshevIIBandPass_stop_get, _wrap_IIRChebyshevIIBandPass_stop_set },
    { "bw", _wrap_IIRChebyshevIIBandPass_bw_get, _wrap_IIRChebyshevIIBandPass_bw_set },
    {0,0,0}
};
static swig_lua_method swig_IIRChebyshevIIBandPass_methods[]= {
    { "setCutoff", _wrap_IIRChebyshevIIBandPass_setCutoff},
    { "setQ", _wrap_IIRChebyshevIIBandPass_setQ},
    { "setPort", _wrap_IIRChebyshevIIBandPass_setPort},
    { "Tick", _wrap_IIRChebyshevIIBandPass_Tick},
    {0,0}
};
static swig_lua_method swig_IIRChebyshevIIBandPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRChebyshevIIBandPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRChebyshevIIBandPass_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_ORDER", Filters::IIR::ChebyshevII::BandPassFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::ChebyshevII::BandPassFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_BANDWIDTH", Filters::IIR::ChebyshevII::BandPassFilter::PORT_BANDWIDTH)},
    {SWIG_LUA_CONSTTAB_INT("PORT_STOPBAND", Filters::IIR::ChebyshevII::BandPassFilter::PORT_STOPBAND)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRChebyshevIIBandPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRChebyshevIIBandPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRChebyshevIIBandPass_Sf_SwigStatic = {
    "IIRChebyshevIIBandPass",
    swig_IIRChebyshevIIBandPass_Sf_SwigStatic_methods,
    swig_IIRChebyshevIIBandPass_Sf_SwigStatic_attributes,
    swig_IIRChebyshevIIBandPass_Sf_SwigStatic_constants,
    swig_IIRChebyshevIIBandPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRChebyshevIIBandPass_bases[] = {0,0};
static const char *swig_IIRChebyshevIIBandPass_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRChebyshevIIBandPass = { "IIRChebyshevIIBandPass", "IIRChebyshevIIBandPass", &SWIGTYPE_p_Filters__IIR__ChebyshevII__BandPassFilter,_proxy__wrap_new_IIRChebyshevIIBandPass, swig_delete_IIRChebyshevIIBandPass, swig_IIRChebyshevIIBandPass_methods, swig_IIRChebyshevIIBandPass_attributes, &swig_IIRChebyshevIIBandPass_Sf_SwigStatic, swig_IIRChebyshevIIBandPass_meta, swig_IIRChebyshevIIBandPass_bases, swig_IIRChebyshevIIBandPass_base_names };

static int _wrap_IIRChebyshevIIBandStop_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandStopFilter *arg1 = (Filters::IIR::ChebyshevII::BandStopFilter *) 0 ;
  Dsp::ChebyshevII::BandStop< 32 > arg2 ;
  Dsp::ChebyshevII::BandStop< 32 > *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandStopFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::prototype",1,"Filters::IIR::ChebyshevII::BandStopFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::prototype",2,"Dsp::ChebyshevII::BandStop< 32 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandStop_prototype_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__ChebyshevII__BandStopT_32_t,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandStop_prototype_set",2,SWIGTYPE_p_Dsp__ChebyshevII__BandStopT_32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandStop_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandStopFilter *arg1 = (Filters::IIR::ChebyshevII::BandStopFilter *) 0 ;
  Dsp::ChebyshevII::BandStop< 32 > result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandStopFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::prototype",1,"Filters::IIR::ChebyshevII::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandStop_prototype_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::ChebyshevII::BandStop< 32 > * resultptr = new Dsp::ChebyshevII::BandStop< 32 >((const Dsp::ChebyshevII::BandStop< 32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__ChebyshevII__BandStopT_32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandStop_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandStopFilter *arg1 = (Filters::IIR::ChebyshevII::BandStopFilter *) 0 ;
  Filters::BiquadTransposedTypeIICascade *arg2 = (Filters::BiquadTransposedTypeIICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandStopFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::biquads",1,"Filters::IIR::ChebyshevII::BandStopFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::biquads",2,"Filters::BiquadTransposedTypeIICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandStop_biquads_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandStop_biquads_set",2,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandStop_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandStopFilter *arg1 = (Filters::IIR::ChebyshevII::BandStopFilter *) 0 ;
  Filters::BiquadTransposedTypeIICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandStopFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::biquads",1,"Filters::IIR::ChebyshevII::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandStop_biquads_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter);
  }
  
  result = (Filters::BiquadTransposedTypeIICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTransposedTypeIICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandStop_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandStopFilter *arg1 = (Filters::IIR::ChebyshevII::BandStopFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandStopFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::order",1,"Filters::IIR::ChebyshevII::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandStop_order_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandStop_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandStopFilter *arg1 = (Filters::IIR::ChebyshevII::BandStopFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandStopFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::order",1,"Filters::IIR::ChebyshevII::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandStop_order_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandStop_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandStopFilter *arg1 = (Filters::IIR::ChebyshevII::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandStopFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::fc",1,"Filters::IIR::ChebyshevII::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandStop_fc_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandStop_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandStopFilter *arg1 = (Filters::IIR::ChebyshevII::BandStopFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandStopFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::fc",1,"Filters::IIR::ChebyshevII::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandStop_fc_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandStop_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandStopFilter *arg1 = (Filters::IIR::ChebyshevII::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandStopFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::sr",1,"Filters::IIR::ChebyshevII::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandStop_sr_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandStop_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandStopFilter *arg1 = (Filters::IIR::ChebyshevII::BandStopFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandStopFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::sr",1,"Filters::IIR::ChebyshevII::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandStop_sr_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandStop_stop_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandStopFilter *arg1 = (Filters::IIR::ChebyshevII::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandStopFilter::stop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::stop",1,"Filters::IIR::ChebyshevII::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::stop",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandStop_stop_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->stop = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandStop_stop_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandStopFilter *arg1 = (Filters::IIR::ChebyshevII::BandStopFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandStopFilter::stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::stop",1,"Filters::IIR::ChebyshevII::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandStop_stop_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter);
  }
  
  result = (DspFloatType) ((arg1)->stop);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandStop_bw_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandStopFilter *arg1 = (Filters::IIR::ChebyshevII::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandStopFilter::bw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::bw",1,"Filters::IIR::ChebyshevII::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::bw",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandStop_bw_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->bw = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandStop_bw_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandStopFilter *arg1 = (Filters::IIR::ChebyshevII::BandStopFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandStopFilter::bw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::bw",1,"Filters::IIR::ChebyshevII::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandStop_bw_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter);
  }
  
  result = (DspFloatType) ((arg1)->bw);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIIBandStop__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  Filters::IIR::ChebyshevII::BandStopFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandStopFilter::BandStopFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::BandStopFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::BandStopFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::BandStopFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::BandStopFilter",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::BandStopFilter",5,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (Filters::IIR::ChebyshevII::BandStopFilter *)new Filters::IIR::ChebyshevII::BandStopFilter(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIIBandStop__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::ChebyshevII::BandStopFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandStopFilter::BandStopFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::BandStopFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::BandStopFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::BandStopFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::BandStopFilter",4,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::ChebyshevII::BandStopFilter *)new Filters::IIR::ChebyshevII::BandStopFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIIBandStop__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::ChebyshevII::BandStopFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandStopFilter::BandStopFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::BandStopFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::BandStopFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::BandStopFilter",3,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::ChebyshevII::BandStopFilter *)new Filters::IIR::ChebyshevII::BandStopFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIIBandStop(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_IIRChebyshevIIBandStop__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_IIRChebyshevIIBandStop__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_IIRChebyshevIIBandStop__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IIRChebyshevIIBandStop'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ChebyshevII::BandStopFilter::BandStopFilter(size_t,DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevII::BandStopFilter::BandStopFilter(size_t,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevII::BandStopFilter::BandStopFilter(size_t,DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_IIRChebyshevIIBandStop_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandStopFilter *arg1 = (Filters::IIR::ChebyshevII::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandStopFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::setCutoff",1,"Filters::IIR::ChebyshevII::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandStop_setCutoff",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandStop_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandStopFilter *arg1 = (Filters::IIR::ChebyshevII::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandStopFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::setQ",1,"Filters::IIR::ChebyshevII::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandStop_setQ",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandStop_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandStopFilter *arg1 = (Filters::IIR::ChebyshevII::BandStopFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandStopFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::setPort",1,"Filters::IIR::ChebyshevII::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandStop_setPort",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandStop_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandStopFilter *arg1 = (Filters::IIR::ChebyshevII::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandStopFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::Tick",1,"Filters::IIR::ChebyshevII::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandStop_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandStop_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandStopFilter *arg1 = (Filters::IIR::ChebyshevII::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandStopFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::Tick",1,"Filters::IIR::ChebyshevII::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandStop_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandStop_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandStopFilter *arg1 = (Filters::IIR::ChebyshevII::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandStopFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::Tick",1,"Filters::IIR::ChebyshevII::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandStop_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandStop_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandStopFilter *arg1 = (Filters::IIR::ChebyshevII::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandStopFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::Tick",1,"Filters::IIR::ChebyshevII::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandStopFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandStop_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandStop_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRChebyshevIIBandStop_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRChebyshevIIBandStop_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRChebyshevIIBandStop_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRChebyshevIIBandStop_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRChebyshevIIBandStop_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ChebyshevII::BandStopFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevII::BandStopFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevII::BandStopFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevII::BandStopFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRChebyshevIIBandStop(void *obj) {
Filters::IIR::ChebyshevII::BandStopFilter *arg1 = (Filters::IIR::ChebyshevII::BandStopFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRChebyshevIIBandStop(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRChebyshevIIBandStop);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRChebyshevIIBandStop_attributes[] = {
    { "prototype", _wrap_IIRChebyshevIIBandStop_prototype_get, _wrap_IIRChebyshevIIBandStop_prototype_set },
    { "biquads", _wrap_IIRChebyshevIIBandStop_biquads_get, _wrap_IIRChebyshevIIBandStop_biquads_set },
    { "order", _wrap_IIRChebyshevIIBandStop_order_get, _wrap_IIRChebyshevIIBandStop_order_set },
    { "fc", _wrap_IIRChebyshevIIBandStop_fc_get, _wrap_IIRChebyshevIIBandStop_fc_set },
    { "sr", _wrap_IIRChebyshevIIBandStop_sr_get, _wrap_IIRChebyshevIIBandStop_sr_set },
    { "stop", _wrap_IIRChebyshevIIBandStop_stop_get, _wrap_IIRChebyshevIIBandStop_stop_set },
    { "bw", _wrap_IIRChebyshevIIBandStop_bw_get, _wrap_IIRChebyshevIIBandStop_bw_set },
    {0,0,0}
};
static swig_lua_method swig_IIRChebyshevIIBandStop_methods[]= {
    { "setCutoff", _wrap_IIRChebyshevIIBandStop_setCutoff},
    { "setQ", _wrap_IIRChebyshevIIBandStop_setQ},
    { "setPort", _wrap_IIRChebyshevIIBandStop_setPort},
    { "Tick", _wrap_IIRChebyshevIIBandStop_Tick},
    {0,0}
};
static swig_lua_method swig_IIRChebyshevIIBandStop_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRChebyshevIIBandStop_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRChebyshevIIBandStop_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_ORDER", Filters::IIR::ChebyshevII::BandStopFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::ChebyshevII::BandStopFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_BANDWIDTH", Filters::IIR::ChebyshevII::BandStopFilter::PORT_BANDWIDTH)},
    {SWIG_LUA_CONSTTAB_INT("PORT_STOPBAND", Filters::IIR::ChebyshevII::BandStopFilter::PORT_STOPBAND)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRChebyshevIIBandStop_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRChebyshevIIBandStop_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRChebyshevIIBandStop_SwigStatic = {
    "IIRChebyshevIIBandStop",
    swig_IIRChebyshevIIBandStop_SwigStatic_methods,
    swig_IIRChebyshevIIBandStop_SwigStatic_attributes,
    swig_IIRChebyshevIIBandStop_SwigStatic_constants,
    swig_IIRChebyshevIIBandStop_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRChebyshevIIBandStop_bases[] = {0,0};
static const char *swig_IIRChebyshevIIBandStop_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRChebyshevIIBandStop = { "IIRChebyshevIIBandStop", "IIRChebyshevIIBandStop", &SWIGTYPE_p_Filters__IIR__ChebyshevII__BandStopFilter,_proxy__wrap_new_IIRChebyshevIIBandStop, swig_delete_IIRChebyshevIIBandStop, swig_IIRChebyshevIIBandStop_methods, swig_IIRChebyshevIIBandStop_attributes, &swig_IIRChebyshevIIBandStop_SwigStatic, swig_IIRChebyshevIIBandStop_meta, swig_IIRChebyshevIIBandStop_bases, swig_IIRChebyshevIIBandStop_base_names };

static int _wrap_IIRChebyshevIIBandShelf_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevII::BandShelfFilter *) 0 ;
  Dsp::ChebyshevII::BandShelf< 32 > arg2 ;
  Dsp::ChebyshevII::BandShelf< 32 > *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandShelfFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::prototype",1,"Filters::IIR::ChebyshevII::BandShelfFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::prototype",2,"Dsp::ChebyshevII::BandShelf< 32 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandShelf_prototype_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__ChebyshevII__BandShelfT_32_t,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandShelf_prototype_set",2,SWIGTYPE_p_Dsp__ChebyshevII__BandShelfT_32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandShelf_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevII::BandShelfFilter *) 0 ;
  Dsp::ChebyshevII::BandShelf< 32 > result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandShelfFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::prototype",1,"Filters::IIR::ChebyshevII::BandShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandShelf_prototype_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::ChebyshevII::BandShelf< 32 > * resultptr = new Dsp::ChebyshevII::BandShelf< 32 >((const Dsp::ChebyshevII::BandShelf< 32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__ChebyshevII__BandShelfT_32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandShelf_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevII::BandShelfFilter *) 0 ;
  Filters::BiquadTypeIICascade *arg2 = (Filters::BiquadTypeIICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandShelfFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::biquads",1,"Filters::IIR::ChebyshevII::BandShelfFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::biquads",2,"Filters::BiquadTypeIICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandShelf_biquads_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeIICascade,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandShelf_biquads_set",2,SWIGTYPE_p_Filters__BiquadTypeIICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandShelf_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevII::BandShelfFilter *) 0 ;
  Filters::BiquadTypeIICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandShelfFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::biquads",1,"Filters::IIR::ChebyshevII::BandShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandShelf_biquads_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter);
  }
  
  result = (Filters::BiquadTypeIICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeIICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandShelf_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevII::BandShelfFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandShelfFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::order",1,"Filters::IIR::ChebyshevII::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandShelf_order_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandShelf_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevII::BandShelfFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandShelfFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::order",1,"Filters::IIR::ChebyshevII::BandShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandShelf_order_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandShelf_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevII::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandShelfFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::fc",1,"Filters::IIR::ChebyshevII::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandShelf_fc_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandShelf_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevII::BandShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandShelfFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::fc",1,"Filters::IIR::ChebyshevII::BandShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandShelf_fc_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandShelf_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevII::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandShelfFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::sr",1,"Filters::IIR::ChebyshevII::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandShelf_sr_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandShelf_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevII::BandShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandShelfFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::sr",1,"Filters::IIR::ChebyshevII::BandShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandShelf_sr_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandShelf_stop_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevII::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandShelfFilter::stop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::stop",1,"Filters::IIR::ChebyshevII::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::stop",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandShelf_stop_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->stop = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandShelf_stop_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevII::BandShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandShelfFilter::stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::stop",1,"Filters::IIR::ChebyshevII::BandShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandShelf_stop_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->stop);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandShelf_bw_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevII::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandShelfFilter::bw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::bw",1,"Filters::IIR::ChebyshevII::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::bw",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandShelf_bw_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->bw = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandShelf_bw_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevII::BandShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandShelfFilter::bw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::bw",1,"Filters::IIR::ChebyshevII::BandShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandShelf_bw_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->bw);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandShelf_g_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevII::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandShelfFilter::g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::g",1,"Filters::IIR::ChebyshevII::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::g",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandShelf_g_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->g = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandShelf_g_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevII::BandShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandShelfFilter::g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::g",1,"Filters::IIR::ChebyshevII::BandShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandShelf_g_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->g);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIIBandShelf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType arg6 ;
  Filters::IIR::ChebyshevII::BandShelfFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandShelfFilter::BandShelfFilter",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::BandShelfFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::BandShelfFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::BandShelfFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::BandShelfFilter",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::BandShelfFilter",5,"DspFloatType");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::BandShelfFilter",6,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  result = (Filters::IIR::ChebyshevII::BandShelfFilter *)new Filters::IIR::ChebyshevII::BandShelfFilter(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIIBandShelf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  Filters::IIR::ChebyshevII::BandShelfFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandShelfFilter::BandShelfFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::BandShelfFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::BandShelfFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::BandShelfFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::BandShelfFilter",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::BandShelfFilter",5,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (Filters::IIR::ChebyshevII::BandShelfFilter *)new Filters::IIR::ChebyshevII::BandShelfFilter(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIIBandShelf(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_IIRChebyshevIIBandShelf__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_IIRChebyshevIIBandShelf__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IIRChebyshevIIBandShelf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ChebyshevII::BandShelfFilter::BandShelfFilter(size_t,DspFloatType,DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevII::BandShelfFilter::BandShelfFilter(size_t,DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_IIRChebyshevIIBandShelf_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevII::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandShelfFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::setCutoff",1,"Filters::IIR::ChebyshevII::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandShelf_setCutoff",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandShelf_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevII::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandShelfFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::setQ",1,"Filters::IIR::ChebyshevII::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandShelf_setQ",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandShelf_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevII::BandShelfFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandShelfFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::setPort",1,"Filters::IIR::ChebyshevII::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandShelf_setPort",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandShelf_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevII::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandShelfFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::Tick",1,"Filters::IIR::ChebyshevII::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandShelf_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandShelf_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevII::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandShelfFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::Tick",1,"Filters::IIR::ChebyshevII::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandShelf_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandShelf_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevII::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandShelfFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::Tick",1,"Filters::IIR::ChebyshevII::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandShelf_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandShelf_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevII::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::BandShelfFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::Tick",1,"Filters::IIR::ChebyshevII::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::BandShelfFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIBandShelf_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIBandShelf_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRChebyshevIIBandShelf_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRChebyshevIIBandShelf_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRChebyshevIIBandShelf_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRChebyshevIIBandShelf_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRChebyshevIIBandShelf_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ChebyshevII::BandShelfFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevII::BandShelfFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevII::BandShelfFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevII::BandShelfFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRChebyshevIIBandShelf(void *obj) {
Filters::IIR::ChebyshevII::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevII::BandShelfFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRChebyshevIIBandShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRChebyshevIIBandShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRChebyshevIIBandShelf_attributes[] = {
    { "prototype", _wrap_IIRChebyshevIIBandShelf_prototype_get, _wrap_IIRChebyshevIIBandShelf_prototype_set },
    { "biquads", _wrap_IIRChebyshevIIBandShelf_biquads_get, _wrap_IIRChebyshevIIBandShelf_biquads_set },
    { "order", _wrap_IIRChebyshevIIBandShelf_order_get, _wrap_IIRChebyshevIIBandShelf_order_set },
    { "fc", _wrap_IIRChebyshevIIBandShelf_fc_get, _wrap_IIRChebyshevIIBandShelf_fc_set },
    { "sr", _wrap_IIRChebyshevIIBandShelf_sr_get, _wrap_IIRChebyshevIIBandShelf_sr_set },
    { "stop", _wrap_IIRChebyshevIIBandShelf_stop_get, _wrap_IIRChebyshevIIBandShelf_stop_set },
    { "bw", _wrap_IIRChebyshevIIBandShelf_bw_get, _wrap_IIRChebyshevIIBandShelf_bw_set },
    { "g", _wrap_IIRChebyshevIIBandShelf_g_get, _wrap_IIRChebyshevIIBandShelf_g_set },
    {0,0,0}
};
static swig_lua_method swig_IIRChebyshevIIBandShelf_methods[]= {
    { "setCutoff", _wrap_IIRChebyshevIIBandShelf_setCutoff},
    { "setQ", _wrap_IIRChebyshevIIBandShelf_setQ},
    { "setPort", _wrap_IIRChebyshevIIBandShelf_setPort},
    { "Tick", _wrap_IIRChebyshevIIBandShelf_Tick},
    {0,0}
};
static swig_lua_method swig_IIRChebyshevIIBandShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRChebyshevIIBandShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRChebyshevIIBandShelf_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_ORDER", Filters::IIR::ChebyshevII::BandShelfFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::ChebyshevII::BandShelfFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_BANDWIDTH", Filters::IIR::ChebyshevII::BandShelfFilter::PORT_BANDWIDTH)},
    {SWIG_LUA_CONSTTAB_INT("PORT_STOPBAND", Filters::IIR::ChebyshevII::BandShelfFilter::PORT_STOPBAND)},
    {SWIG_LUA_CONSTTAB_INT("PORT_GAIN", Filters::IIR::ChebyshevII::BandShelfFilter::PORT_GAIN)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRChebyshevIIBandShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRChebyshevIIBandShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRChebyshevIIBandShelf_Sf_SwigStatic = {
    "IIRChebyshevIIBandShelf",
    swig_IIRChebyshevIIBandShelf_Sf_SwigStatic_methods,
    swig_IIRChebyshevIIBandShelf_Sf_SwigStatic_attributes,
    swig_IIRChebyshevIIBandShelf_Sf_SwigStatic_constants,
    swig_IIRChebyshevIIBandShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRChebyshevIIBandShelf_bases[] = {0,0};
static const char *swig_IIRChebyshevIIBandShelf_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRChebyshevIIBandShelf = { "IIRChebyshevIIBandShelf", "IIRChebyshevIIBandShelf", &SWIGTYPE_p_Filters__IIR__ChebyshevII__BandShelfFilter,_proxy__wrap_new_IIRChebyshevIIBandShelf, swig_delete_IIRChebyshevIIBandShelf, swig_IIRChebyshevIIBandShelf_methods, swig_IIRChebyshevIIBandShelf_attributes, &swig_IIRChebyshevIIBandShelf_Sf_SwigStatic, swig_IIRChebyshevIIBandShelf_meta, swig_IIRChebyshevIIBandShelf_bases, swig_IIRChebyshevIIBandShelf_base_names };

static int _wrap_IIRChebyshevIILowShelf_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevII::LowShelfFilter *) 0 ;
  Dsp::ChebyshevII::LowShelf< 32 > arg2 ;
  Dsp::ChebyshevII::LowShelf< 32 > *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowShelfFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::prototype",1,"Filters::IIR::ChebyshevII::LowShelfFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::prototype",2,"Dsp::ChebyshevII::LowShelf< 32 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowShelf_prototype_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__ChebyshevII__LowShelfT_32_t,0))){
    SWIG_fail_ptr("IIRChebyshevIILowShelf_prototype_set",2,SWIGTYPE_p_Dsp__ChebyshevII__LowShelfT_32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowShelf_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevII::LowShelfFilter *) 0 ;
  Dsp::ChebyshevII::LowShelf< 32 > result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowShelfFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::prototype",1,"Filters::IIR::ChebyshevII::LowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowShelf_prototype_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::ChebyshevII::LowShelf< 32 > * resultptr = new Dsp::ChebyshevII::LowShelf< 32 >((const Dsp::ChebyshevII::LowShelf< 32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__ChebyshevII__LowShelfT_32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowShelf_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevII::LowShelfFilter *) 0 ;
  Filters::BiquadTypeIICascade *arg2 = (Filters::BiquadTypeIICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowShelfFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::biquads",1,"Filters::IIR::ChebyshevII::LowShelfFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::biquads",2,"Filters::BiquadTypeIICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowShelf_biquads_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeIICascade,0))){
    SWIG_fail_ptr("IIRChebyshevIILowShelf_biquads_set",2,SWIGTYPE_p_Filters__BiquadTypeIICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowShelf_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevII::LowShelfFilter *) 0 ;
  Filters::BiquadTypeIICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowShelfFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::biquads",1,"Filters::IIR::ChebyshevII::LowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowShelf_biquads_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter);
  }
  
  result = (Filters::BiquadTypeIICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeIICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowShelf_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevII::LowShelfFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowShelfFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::order",1,"Filters::IIR::ChebyshevII::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowShelf_order_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowShelf_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevII::LowShelfFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowShelfFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::order",1,"Filters::IIR::ChebyshevII::LowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowShelf_order_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowShelf_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevII::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowShelfFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::fc",1,"Filters::IIR::ChebyshevII::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowShelf_fc_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowShelf_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevII::LowShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowShelfFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::fc",1,"Filters::IIR::ChebyshevII::LowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowShelf_fc_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowShelf_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevII::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowShelfFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::sr",1,"Filters::IIR::ChebyshevII::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowShelf_sr_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowShelf_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevII::LowShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowShelfFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::sr",1,"Filters::IIR::ChebyshevII::LowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowShelf_sr_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowShelf_stop_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevII::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowShelfFilter::stop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::stop",1,"Filters::IIR::ChebyshevII::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::stop",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowShelf_stop_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->stop = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowShelf_stop_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevII::LowShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowShelfFilter::stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::stop",1,"Filters::IIR::ChebyshevII::LowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowShelf_stop_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->stop);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowShelf_bw_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevII::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowShelfFilter::bw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::bw",1,"Filters::IIR::ChebyshevII::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::bw",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowShelf_bw_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->bw = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowShelf_bw_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevII::LowShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowShelfFilter::bw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::bw",1,"Filters::IIR::ChebyshevII::LowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowShelf_bw_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->bw);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowShelf_g_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevII::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowShelfFilter::g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::g",1,"Filters::IIR::ChebyshevII::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::g",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowShelf_g_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->g = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowShelf_g_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevII::LowShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowShelfFilter::g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::g",1,"Filters::IIR::ChebyshevII::LowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowShelf_g_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->g);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIILowShelf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  Filters::IIR::ChebyshevII::LowShelfFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowShelfFilter::LowShelfFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::LowShelfFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::LowShelfFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::LowShelfFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::LowShelfFilter",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::LowShelfFilter",5,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (Filters::IIR::ChebyshevII::LowShelfFilter *)new Filters::IIR::ChebyshevII::LowShelfFilter(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIILowShelf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::ChebyshevII::LowShelfFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowShelfFilter::LowShelfFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::LowShelfFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::LowShelfFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::LowShelfFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::LowShelfFilter",4,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::ChebyshevII::LowShelfFilter *)new Filters::IIR::ChebyshevII::LowShelfFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIILowShelf(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_IIRChebyshevIILowShelf__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_IIRChebyshevIILowShelf__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IIRChebyshevIILowShelf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ChebyshevII::LowShelfFilter::LowShelfFilter(size_t,DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevII::LowShelfFilter::LowShelfFilter(size_t,DspFloatType,DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_IIRChebyshevIILowShelf_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevII::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowShelfFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::setCutoff",1,"Filters::IIR::ChebyshevII::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowShelf_setCutoff",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowShelf_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevII::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowShelfFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::setQ",1,"Filters::IIR::ChebyshevII::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowShelf_setQ",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowShelf_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevII::LowShelfFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowShelfFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::setPort",1,"Filters::IIR::ChebyshevII::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowShelf_setPort",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowShelf_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevII::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowShelfFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::Tick",1,"Filters::IIR::ChebyshevII::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowShelf_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowShelf_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevII::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowShelfFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::Tick",1,"Filters::IIR::ChebyshevII::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowShelf_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowShelf_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevII::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowShelfFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::Tick",1,"Filters::IIR::ChebyshevII::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowShelf_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowShelf_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevII::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::LowShelfFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::Tick",1,"Filters::IIR::ChebyshevII::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::LowShelfFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIILowShelf_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIILowShelf_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRChebyshevIILowShelf_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRChebyshevIILowShelf_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRChebyshevIILowShelf_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRChebyshevIILowShelf_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRChebyshevIILowShelf_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ChebyshevII::LowShelfFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevII::LowShelfFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevII::LowShelfFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevII::LowShelfFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRChebyshevIILowShelf(void *obj) {
Filters::IIR::ChebyshevII::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevII::LowShelfFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRChebyshevIILowShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRChebyshevIILowShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRChebyshevIILowShelf_attributes[] = {
    { "prototype", _wrap_IIRChebyshevIILowShelf_prototype_get, _wrap_IIRChebyshevIILowShelf_prototype_set },
    { "biquads", _wrap_IIRChebyshevIILowShelf_biquads_get, _wrap_IIRChebyshevIILowShelf_biquads_set },
    { "order", _wrap_IIRChebyshevIILowShelf_order_get, _wrap_IIRChebyshevIILowShelf_order_set },
    { "fc", _wrap_IIRChebyshevIILowShelf_fc_get, _wrap_IIRChebyshevIILowShelf_fc_set },
    { "sr", _wrap_IIRChebyshevIILowShelf_sr_get, _wrap_IIRChebyshevIILowShelf_sr_set },
    { "stop", _wrap_IIRChebyshevIILowShelf_stop_get, _wrap_IIRChebyshevIILowShelf_stop_set },
    { "bw", _wrap_IIRChebyshevIILowShelf_bw_get, _wrap_IIRChebyshevIILowShelf_bw_set },
    { "g", _wrap_IIRChebyshevIILowShelf_g_get, _wrap_IIRChebyshevIILowShelf_g_set },
    {0,0,0}
};
static swig_lua_method swig_IIRChebyshevIILowShelf_methods[]= {
    { "setCutoff", _wrap_IIRChebyshevIILowShelf_setCutoff},
    { "setQ", _wrap_IIRChebyshevIILowShelf_setQ},
    { "setPort", _wrap_IIRChebyshevIILowShelf_setPort},
    { "Tick", _wrap_IIRChebyshevIILowShelf_Tick},
    {0,0}
};
static swig_lua_method swig_IIRChebyshevIILowShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRChebyshevIILowShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRChebyshevIILowShelf_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_ORDER", Filters::IIR::ChebyshevII::LowShelfFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::ChebyshevII::LowShelfFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_BANDWIDTH", Filters::IIR::ChebyshevII::LowShelfFilter::PORT_BANDWIDTH)},
    {SWIG_LUA_CONSTTAB_INT("PORT_STOPBAND", Filters::IIR::ChebyshevII::LowShelfFilter::PORT_STOPBAND)},
    {SWIG_LUA_CONSTTAB_INT("PORT_GAIN", Filters::IIR::ChebyshevII::LowShelfFilter::PORT_GAIN)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRChebyshevIILowShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRChebyshevIILowShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRChebyshevIILowShelf_Sf_SwigStatic = {
    "IIRChebyshevIILowShelf",
    swig_IIRChebyshevIILowShelf_Sf_SwigStatic_methods,
    swig_IIRChebyshevIILowShelf_Sf_SwigStatic_attributes,
    swig_IIRChebyshevIILowShelf_Sf_SwigStatic_constants,
    swig_IIRChebyshevIILowShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRChebyshevIILowShelf_bases[] = {0,0};
static const char *swig_IIRChebyshevIILowShelf_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRChebyshevIILowShelf = { "IIRChebyshevIILowShelf", "IIRChebyshevIILowShelf", &SWIGTYPE_p_Filters__IIR__ChebyshevII__LowShelfFilter,_proxy__wrap_new_IIRChebyshevIILowShelf, swig_delete_IIRChebyshevIILowShelf, swig_IIRChebyshevIILowShelf_methods, swig_IIRChebyshevIILowShelf_attributes, &swig_IIRChebyshevIILowShelf_Sf_SwigStatic, swig_IIRChebyshevIILowShelf_meta, swig_IIRChebyshevIILowShelf_bases, swig_IIRChebyshevIILowShelf_base_names };

static int _wrap_IIRChebyshevIIHighShelf_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevII::HighShelfFilter *) 0 ;
  Dsp::ChebyshevII::HighShelf< 32 > arg2 ;
  Dsp::ChebyshevII::HighShelf< 32 > *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighShelfFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::prototype",1,"Filters::IIR::ChebyshevII::HighShelfFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::prototype",2,"Dsp::ChebyshevII::HighShelf< 32 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighShelf_prototype_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__ChebyshevII__HighShelfT_32_t,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighShelf_prototype_set",2,SWIGTYPE_p_Dsp__ChebyshevII__HighShelfT_32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighShelf_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevII::HighShelfFilter *) 0 ;
  Dsp::ChebyshevII::HighShelf< 32 > result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighShelfFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::prototype",1,"Filters::IIR::ChebyshevII::HighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighShelf_prototype_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::ChebyshevII::HighShelf< 32 > * resultptr = new Dsp::ChebyshevII::HighShelf< 32 >((const Dsp::ChebyshevII::HighShelf< 32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__ChebyshevII__HighShelfT_32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighShelf_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevII::HighShelfFilter *) 0 ;
  Filters::BiquadTypeIICascade *arg2 = (Filters::BiquadTypeIICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighShelfFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::biquads",1,"Filters::IIR::ChebyshevII::HighShelfFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::biquads",2,"Filters::BiquadTypeIICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighShelf_biquads_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeIICascade,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighShelf_biquads_set",2,SWIGTYPE_p_Filters__BiquadTypeIICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighShelf_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevII::HighShelfFilter *) 0 ;
  Filters::BiquadTypeIICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighShelfFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::biquads",1,"Filters::IIR::ChebyshevII::HighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighShelf_biquads_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter);
  }
  
  result = (Filters::BiquadTypeIICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeIICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighShelf_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevII::HighShelfFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighShelfFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::order",1,"Filters::IIR::ChebyshevII::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighShelf_order_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighShelf_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevII::HighShelfFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighShelfFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::order",1,"Filters::IIR::ChebyshevII::HighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighShelf_order_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighShelf_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevII::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighShelfFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::fc",1,"Filters::IIR::ChebyshevII::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighShelf_fc_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighShelf_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevII::HighShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighShelfFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::fc",1,"Filters::IIR::ChebyshevII::HighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighShelf_fc_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighShelf_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevII::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighShelfFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::sr",1,"Filters::IIR::ChebyshevII::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighShelf_sr_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighShelf_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevII::HighShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighShelfFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::sr",1,"Filters::IIR::ChebyshevII::HighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighShelf_sr_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighShelf_stop_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevII::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighShelfFilter::stop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::stop",1,"Filters::IIR::ChebyshevII::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::stop",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighShelf_stop_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->stop = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighShelf_stop_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevII::HighShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighShelfFilter::stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::stop",1,"Filters::IIR::ChebyshevII::HighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighShelf_stop_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->stop);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighShelf_bw_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevII::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighShelfFilter::bw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::bw",1,"Filters::IIR::ChebyshevII::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::bw",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighShelf_bw_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->bw = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighShelf_bw_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevII::HighShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighShelfFilter::bw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::bw",1,"Filters::IIR::ChebyshevII::HighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighShelf_bw_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->bw);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighShelf_g_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevII::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighShelfFilter::g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::g",1,"Filters::IIR::ChebyshevII::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::g",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighShelf_g_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->g = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighShelf_g_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevII::HighShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighShelfFilter::g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::g",1,"Filters::IIR::ChebyshevII::HighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighShelf_g_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->g);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIIHighShelf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  Filters::IIR::ChebyshevII::HighShelfFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighShelfFilter::HighShelfFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::HighShelfFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::HighShelfFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::HighShelfFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::HighShelfFilter",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::HighShelfFilter",5,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (Filters::IIR::ChebyshevII::HighShelfFilter *)new Filters::IIR::ChebyshevII::HighShelfFilter(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIIHighShelf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::ChebyshevII::HighShelfFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighShelfFilter::HighShelfFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::HighShelfFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::HighShelfFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::HighShelfFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::HighShelfFilter",4,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::ChebyshevII::HighShelfFilter *)new Filters::IIR::ChebyshevII::HighShelfFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIIHighShelf(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_IIRChebyshevIIHighShelf__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_IIRChebyshevIIHighShelf__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IIRChebyshevIIHighShelf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ChebyshevII::HighShelfFilter::HighShelfFilter(size_t,DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevII::HighShelfFilter::HighShelfFilter(size_t,DspFloatType,DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_IIRChebyshevIIHighShelf_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevII::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighShelfFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::setCutoff",1,"Filters::IIR::ChebyshevII::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighShelf_setCutoff",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighShelf_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevII::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighShelfFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::setQ",1,"Filters::IIR::ChebyshevII::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighShelf_setQ",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighShelf_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevII::HighShelfFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighShelfFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::setPort",1,"Filters::IIR::ChebyshevII::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighShelf_setPort",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighShelf_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevII::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighShelfFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::Tick",1,"Filters::IIR::ChebyshevII::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighShelf_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighShelf_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevII::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighShelfFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::Tick",1,"Filters::IIR::ChebyshevII::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighShelf_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighShelf_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevII::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighShelfFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::Tick",1,"Filters::IIR::ChebyshevII::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighShelf_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighShelf_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevII::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevII::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevII::HighShelfFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::Tick",1,"Filters::IIR::ChebyshevII::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevII::HighShelfFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIIHighShelf_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIIHighShelf_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRChebyshevIIHighShelf_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRChebyshevIIHighShelf_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRChebyshevIIHighShelf_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRChebyshevIIHighShelf_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRChebyshevIIHighShelf_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ChebyshevII::HighShelfFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevII::HighShelfFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevII::HighShelfFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevII::HighShelfFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRChebyshevIIHighShelf(void *obj) {
Filters::IIR::ChebyshevII::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevII::HighShelfFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRChebyshevIIHighShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRChebyshevIIHighShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRChebyshevIIHighShelf_attributes[] = {
    { "prototype", _wrap_IIRChebyshevIIHighShelf_prototype_get, _wrap_IIRChebyshevIIHighShelf_prototype_set },
    { "biquads", _wrap_IIRChebyshevIIHighShelf_biquads_get, _wrap_IIRChebyshevIIHighShelf_biquads_set },
    { "order", _wrap_IIRChebyshevIIHighShelf_order_get, _wrap_IIRChebyshevIIHighShelf_order_set },
    { "fc", _wrap_IIRChebyshevIIHighShelf_fc_get, _wrap_IIRChebyshevIIHighShelf_fc_set },
    { "sr", _wrap_IIRChebyshevIIHighShelf_sr_get, _wrap_IIRChebyshevIIHighShelf_sr_set },
    { "stop", _wrap_IIRChebyshevIIHighShelf_stop_get, _wrap_IIRChebyshevIIHighShelf_stop_set },
    { "bw", _wrap_IIRChebyshevIIHighShelf_bw_get, _wrap_IIRChebyshevIIHighShelf_bw_set },
    { "g", _wrap_IIRChebyshevIIHighShelf_g_get, _wrap_IIRChebyshevIIHighShelf_g_set },
    {0,0,0}
};
static swig_lua_method swig_IIRChebyshevIIHighShelf_methods[]= {
    { "setCutoff", _wrap_IIRChebyshevIIHighShelf_setCutoff},
    { "setQ", _wrap_IIRChebyshevIIHighShelf_setQ},
    { "setPort", _wrap_IIRChebyshevIIHighShelf_setPort},
    { "Tick", _wrap_IIRChebyshevIIHighShelf_Tick},
    {0,0}
};
static swig_lua_method swig_IIRChebyshevIIHighShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRChebyshevIIHighShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRChebyshevIIHighShelf_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_ORDER", Filters::IIR::ChebyshevII::HighShelfFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::ChebyshevII::HighShelfFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_BANDWIDTH", Filters::IIR::ChebyshevII::HighShelfFilter::PORT_BANDWIDTH)},
    {SWIG_LUA_CONSTTAB_INT("PORT_STOPBAND", Filters::IIR::ChebyshevII::HighShelfFilter::PORT_STOPBAND)},
    {SWIG_LUA_CONSTTAB_INT("PORT_GAIN", Filters::IIR::ChebyshevII::HighShelfFilter::PORT_GAIN)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRChebyshevIIHighShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRChebyshevIIHighShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRChebyshevIIHighShelf_Sf_SwigStatic = {
    "IIRChebyshevIIHighShelf",
    swig_IIRChebyshevIIHighShelf_Sf_SwigStatic_methods,
    swig_IIRChebyshevIIHighShelf_Sf_SwigStatic_attributes,
    swig_IIRChebyshevIIHighShelf_Sf_SwigStatic_constants,
    swig_IIRChebyshevIIHighShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRChebyshevIIHighShelf_bases[] = {0,0};
static const char *swig_IIRChebyshevIIHighShelf_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRChebyshevIIHighShelf = { "IIRChebyshevIIHighShelf", "IIRChebyshevIIHighShelf", &SWIGTYPE_p_Filters__IIR__ChebyshevII__HighShelfFilter,_proxy__wrap_new_IIRChebyshevIIHighShelf, swig_delete_IIRChebyshevIIHighShelf, swig_IIRChebyshevIIHighShelf_methods, swig_IIRChebyshevIIHighShelf_attributes, &swig_IIRChebyshevIIHighShelf_Sf_SwigStatic, swig_IIRChebyshevIIHighShelf_meta, swig_IIRChebyshevIIHighShelf_bases, swig_IIRChebyshevIIHighShelf_base_names };

static int _wrap_IIRChebyshevILowPass_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowPassFilter *arg1 = (Filters::IIR::ChebyshevI::LowPassFilter *) 0 ;
  Dsp::ChebyshevI::LowPass< 32 > arg2 ;
  Dsp::ChebyshevI::LowPass< 32 > *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowPassFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::prototype",1,"Filters::IIR::ChebyshevI::LowPassFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::prototype",2,"Dsp::ChebyshevI::LowPass< 32 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowPass_prototype_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__ChebyshevI__LowPassT_32_t,0))){
    SWIG_fail_ptr("IIRChebyshevILowPass_prototype_set",2,SWIGTYPE_p_Dsp__ChebyshevI__LowPassT_32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowPass_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowPassFilter *arg1 = (Filters::IIR::ChebyshevI::LowPassFilter *) 0 ;
  Dsp::ChebyshevI::LowPass< 32 > result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowPassFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::prototype",1,"Filters::IIR::ChebyshevI::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowPass_prototype_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::ChebyshevI::LowPass< 32 > * resultptr = new Dsp::ChebyshevI::LowPass< 32 >((const Dsp::ChebyshevI::LowPass< 32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__ChebyshevI__LowPassT_32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowPass_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowPassFilter *arg1 = (Filters::IIR::ChebyshevI::LowPassFilter *) 0 ;
  Filters::BiquadTypeIICascade *arg2 = (Filters::BiquadTypeIICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowPassFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::biquads",1,"Filters::IIR::ChebyshevI::LowPassFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::biquads",2,"Filters::BiquadTypeIICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowPass_biquads_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeIICascade,0))){
    SWIG_fail_ptr("IIRChebyshevILowPass_biquads_set",2,SWIGTYPE_p_Filters__BiquadTypeIICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowPass_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowPassFilter *arg1 = (Filters::IIR::ChebyshevI::LowPassFilter *) 0 ;
  Filters::BiquadTypeIICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowPassFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::biquads",1,"Filters::IIR::ChebyshevI::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowPass_biquads_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter);
  }
  
  result = (Filters::BiquadTypeIICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeIICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowPass_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowPassFilter *arg1 = (Filters::IIR::ChebyshevI::LowPassFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowPassFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::order",1,"Filters::IIR::ChebyshevI::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowPass_order_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowPass_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowPassFilter *arg1 = (Filters::IIR::ChebyshevI::LowPassFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowPassFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::order",1,"Filters::IIR::ChebyshevI::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowPass_order_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowPass_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowPassFilter *arg1 = (Filters::IIR::ChebyshevI::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowPassFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::fc",1,"Filters::IIR::ChebyshevI::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowPass_fc_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowPass_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowPassFilter *arg1 = (Filters::IIR::ChebyshevI::LowPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowPassFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::fc",1,"Filters::IIR::ChebyshevI::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowPass_fc_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowPass_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowPassFilter *arg1 = (Filters::IIR::ChebyshevI::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowPassFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::sr",1,"Filters::IIR::ChebyshevI::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowPass_sr_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowPass_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowPassFilter *arg1 = (Filters::IIR::ChebyshevI::LowPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowPassFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::sr",1,"Filters::IIR::ChebyshevI::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowPass_sr_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowPass_ripple_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowPassFilter *arg1 = (Filters::IIR::ChebyshevI::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowPassFilter::ripple",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::ripple",1,"Filters::IIR::ChebyshevI::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::ripple",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowPass_ripple_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->ripple = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowPass_ripple_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowPassFilter *arg1 = (Filters::IIR::ChebyshevI::LowPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowPassFilter::ripple",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::ripple",1,"Filters::IIR::ChebyshevI::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowPass_ripple_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->ripple);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevILowPass__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::ChebyshevI::LowPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowPassFilter::LowPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::LowPassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::LowPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::LowPassFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::LowPassFilter",4,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::ChebyshevI::LowPassFilter *)new Filters::IIR::ChebyshevI::LowPassFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevILowPass__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::ChebyshevI::LowPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowPassFilter::LowPassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::LowPassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::LowPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::LowPassFilter",3,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::ChebyshevI::LowPassFilter *)new Filters::IIR::ChebyshevI::LowPassFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevILowPass(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_IIRChebyshevILowPass__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_IIRChebyshevILowPass__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IIRChebyshevILowPass'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ChebyshevI::LowPassFilter::LowPassFilter(size_t,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevI::LowPassFilter::LowPassFilter(size_t,DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_IIRChebyshevILowPass_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowPassFilter *arg1 = (Filters::IIR::ChebyshevI::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowPassFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::setCutoff",1,"Filters::IIR::ChebyshevI::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowPass_setCutoff",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowPass_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowPassFilter *arg1 = (Filters::IIR::ChebyshevI::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowPassFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::setQ",1,"Filters::IIR::ChebyshevI::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowPass_setQ",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowPass_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowPassFilter *arg1 = (Filters::IIR::ChebyshevI::LowPassFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowPassFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::setPort",1,"Filters::IIR::ChebyshevI::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowPass_setPort",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowPass_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowPassFilter *arg1 = (Filters::IIR::ChebyshevI::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowPassFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::Tick",1,"Filters::IIR::ChebyshevI::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowPass_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowPass_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowPassFilter *arg1 = (Filters::IIR::ChebyshevI::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowPassFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::Tick",1,"Filters::IIR::ChebyshevI::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowPass_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowPass_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowPassFilter *arg1 = (Filters::IIR::ChebyshevI::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowPassFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::Tick",1,"Filters::IIR::ChebyshevI::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowPass_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowPass_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowPassFilter *arg1 = (Filters::IIR::ChebyshevI::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowPassFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::Tick",1,"Filters::IIR::ChebyshevI::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowPassFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowPass_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowPass_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRChebyshevILowPass_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRChebyshevILowPass_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRChebyshevILowPass_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRChebyshevILowPass_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRChebyshevILowPass_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ChebyshevI::LowPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevI::LowPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevI::LowPassFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevI::LowPassFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRChebyshevILowPass(void *obj) {
Filters::IIR::ChebyshevI::LowPassFilter *arg1 = (Filters::IIR::ChebyshevI::LowPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRChebyshevILowPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRChebyshevILowPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRChebyshevILowPass_attributes[] = {
    { "prototype", _wrap_IIRChebyshevILowPass_prototype_get, _wrap_IIRChebyshevILowPass_prototype_set },
    { "biquads", _wrap_IIRChebyshevILowPass_biquads_get, _wrap_IIRChebyshevILowPass_biquads_set },
    { "order", _wrap_IIRChebyshevILowPass_order_get, _wrap_IIRChebyshevILowPass_order_set },
    { "fc", _wrap_IIRChebyshevILowPass_fc_get, _wrap_IIRChebyshevILowPass_fc_set },
    { "sr", _wrap_IIRChebyshevILowPass_sr_get, _wrap_IIRChebyshevILowPass_sr_set },
    { "ripple", _wrap_IIRChebyshevILowPass_ripple_get, _wrap_IIRChebyshevILowPass_ripple_set },
    {0,0,0}
};
static swig_lua_method swig_IIRChebyshevILowPass_methods[]= {
    { "setCutoff", _wrap_IIRChebyshevILowPass_setCutoff},
    { "setQ", _wrap_IIRChebyshevILowPass_setQ},
    { "setPort", _wrap_IIRChebyshevILowPass_setPort},
    { "Tick", _wrap_IIRChebyshevILowPass_Tick},
    {0,0}
};
static swig_lua_method swig_IIRChebyshevILowPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRChebyshevILowPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRChebyshevILowPass_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_ORDER", Filters::IIR::ChebyshevI::LowPassFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::ChebyshevI::LowPassFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_RIPPLE", Filters::IIR::ChebyshevI::LowPassFilter::PORT_RIPPLE)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRChebyshevILowPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRChebyshevILowPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRChebyshevILowPass_Sf_SwigStatic = {
    "IIRChebyshevILowPass",
    swig_IIRChebyshevILowPass_Sf_SwigStatic_methods,
    swig_IIRChebyshevILowPass_Sf_SwigStatic_attributes,
    swig_IIRChebyshevILowPass_Sf_SwigStatic_constants,
    swig_IIRChebyshevILowPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRChebyshevILowPass_bases[] = {0,0};
static const char *swig_IIRChebyshevILowPass_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRChebyshevILowPass = { "IIRChebyshevILowPass", "IIRChebyshevILowPass", &SWIGTYPE_p_Filters__IIR__ChebyshevI__LowPassFilter,_proxy__wrap_new_IIRChebyshevILowPass, swig_delete_IIRChebyshevILowPass, swig_IIRChebyshevILowPass_methods, swig_IIRChebyshevILowPass_attributes, &swig_IIRChebyshevILowPass_Sf_SwigStatic, swig_IIRChebyshevILowPass_meta, swig_IIRChebyshevILowPass_bases, swig_IIRChebyshevILowPass_base_names };

static int _wrap_IIRChebyshevIHighPass_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighPassFilter *arg1 = (Filters::IIR::ChebyshevI::HighPassFilter *) 0 ;
  Dsp::ChebyshevI::HighPass< 32 > arg2 ;
  Dsp::ChebyshevI::HighPass< 32 > *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighPassFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::prototype",1,"Filters::IIR::ChebyshevI::HighPassFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::prototype",2,"Dsp::ChebyshevI::HighPass< 32 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighPass_prototype_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__ChebyshevI__HighPassT_32_t,0))){
    SWIG_fail_ptr("IIRChebyshevIHighPass_prototype_set",2,SWIGTYPE_p_Dsp__ChebyshevI__HighPassT_32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighPass_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighPassFilter *arg1 = (Filters::IIR::ChebyshevI::HighPassFilter *) 0 ;
  Dsp::ChebyshevI::HighPass< 32 > result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighPassFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::prototype",1,"Filters::IIR::ChebyshevI::HighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighPass_prototype_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::ChebyshevI::HighPass< 32 > * resultptr = new Dsp::ChebyshevI::HighPass< 32 >((const Dsp::ChebyshevI::HighPass< 32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__ChebyshevI__HighPassT_32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighPass_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighPassFilter *arg1 = (Filters::IIR::ChebyshevI::HighPassFilter *) 0 ;
  Filters::BiquadTypeIICascade *arg2 = (Filters::BiquadTypeIICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighPassFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::biquads",1,"Filters::IIR::ChebyshevI::HighPassFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::biquads",2,"Filters::BiquadTypeIICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighPass_biquads_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeIICascade,0))){
    SWIG_fail_ptr("IIRChebyshevIHighPass_biquads_set",2,SWIGTYPE_p_Filters__BiquadTypeIICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighPass_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighPassFilter *arg1 = (Filters::IIR::ChebyshevI::HighPassFilter *) 0 ;
  Filters::BiquadTypeIICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighPassFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::biquads",1,"Filters::IIR::ChebyshevI::HighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighPass_biquads_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter);
  }
  
  result = (Filters::BiquadTypeIICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeIICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighPass_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighPassFilter *arg1 = (Filters::IIR::ChebyshevI::HighPassFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighPassFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::order",1,"Filters::IIR::ChebyshevI::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighPass_order_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighPass_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighPassFilter *arg1 = (Filters::IIR::ChebyshevI::HighPassFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighPassFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::order",1,"Filters::IIR::ChebyshevI::HighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighPass_order_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighPass_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighPassFilter *arg1 = (Filters::IIR::ChebyshevI::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighPassFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::fc",1,"Filters::IIR::ChebyshevI::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighPass_fc_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighPass_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighPassFilter *arg1 = (Filters::IIR::ChebyshevI::HighPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighPassFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::fc",1,"Filters::IIR::ChebyshevI::HighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighPass_fc_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighPass_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighPassFilter *arg1 = (Filters::IIR::ChebyshevI::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighPassFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::sr",1,"Filters::IIR::ChebyshevI::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighPass_sr_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighPass_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighPassFilter *arg1 = (Filters::IIR::ChebyshevI::HighPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighPassFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::sr",1,"Filters::IIR::ChebyshevI::HighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighPass_sr_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighPass_ripple_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighPassFilter *arg1 = (Filters::IIR::ChebyshevI::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighPassFilter::ripple",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::ripple",1,"Filters::IIR::ChebyshevI::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::ripple",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighPass_ripple_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->ripple = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighPass_ripple_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighPassFilter *arg1 = (Filters::IIR::ChebyshevI::HighPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighPassFilter::ripple",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::ripple",1,"Filters::IIR::ChebyshevI::HighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighPass_ripple_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->ripple);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIHighPass__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::ChebyshevI::HighPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighPassFilter::HighPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::HighPassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::HighPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::HighPassFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::HighPassFilter",4,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::ChebyshevI::HighPassFilter *)new Filters::IIR::ChebyshevI::HighPassFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIHighPass__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::ChebyshevI::HighPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighPassFilter::HighPassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::HighPassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::HighPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::HighPassFilter",3,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::ChebyshevI::HighPassFilter *)new Filters::IIR::ChebyshevI::HighPassFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIHighPass(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_IIRChebyshevIHighPass__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_IIRChebyshevIHighPass__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IIRChebyshevIHighPass'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ChebyshevI::HighPassFilter::HighPassFilter(size_t,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevI::HighPassFilter::HighPassFilter(size_t,DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_IIRChebyshevIHighPass_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighPassFilter *arg1 = (Filters::IIR::ChebyshevI::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighPassFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::setCutoff",1,"Filters::IIR::ChebyshevI::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighPass_setCutoff",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighPass_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighPassFilter *arg1 = (Filters::IIR::ChebyshevI::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighPassFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::setQ",1,"Filters::IIR::ChebyshevI::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighPass_setQ",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighPass_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighPassFilter *arg1 = (Filters::IIR::ChebyshevI::HighPassFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighPassFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::setPort",1,"Filters::IIR::ChebyshevI::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighPass_setPort",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighPass_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighPassFilter *arg1 = (Filters::IIR::ChebyshevI::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighPassFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::Tick",1,"Filters::IIR::ChebyshevI::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighPass_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighPass_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighPassFilter *arg1 = (Filters::IIR::ChebyshevI::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighPassFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::Tick",1,"Filters::IIR::ChebyshevI::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighPass_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighPass_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighPassFilter *arg1 = (Filters::IIR::ChebyshevI::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighPassFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::Tick",1,"Filters::IIR::ChebyshevI::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighPass_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighPass_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighPassFilter *arg1 = (Filters::IIR::ChebyshevI::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighPassFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::Tick",1,"Filters::IIR::ChebyshevI::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighPassFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighPass_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighPass_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRChebyshevIHighPass_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRChebyshevIHighPass_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRChebyshevIHighPass_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRChebyshevIHighPass_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRChebyshevIHighPass_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ChebyshevI::HighPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevI::HighPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevI::HighPassFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevI::HighPassFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRChebyshevIHighPass(void *obj) {
Filters::IIR::ChebyshevI::HighPassFilter *arg1 = (Filters::IIR::ChebyshevI::HighPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRChebyshevIHighPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRChebyshevIHighPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRChebyshevIHighPass_attributes[] = {
    { "prototype", _wrap_IIRChebyshevIHighPass_prototype_get, _wrap_IIRChebyshevIHighPass_prototype_set },
    { "biquads", _wrap_IIRChebyshevIHighPass_biquads_get, _wrap_IIRChebyshevIHighPass_biquads_set },
    { "order", _wrap_IIRChebyshevIHighPass_order_get, _wrap_IIRChebyshevIHighPass_order_set },
    { "fc", _wrap_IIRChebyshevIHighPass_fc_get, _wrap_IIRChebyshevIHighPass_fc_set },
    { "sr", _wrap_IIRChebyshevIHighPass_sr_get, _wrap_IIRChebyshevIHighPass_sr_set },
    { "ripple", _wrap_IIRChebyshevIHighPass_ripple_get, _wrap_IIRChebyshevIHighPass_ripple_set },
    {0,0,0}
};
static swig_lua_method swig_IIRChebyshevIHighPass_methods[]= {
    { "setCutoff", _wrap_IIRChebyshevIHighPass_setCutoff},
    { "setQ", _wrap_IIRChebyshevIHighPass_setQ},
    { "setPort", _wrap_IIRChebyshevIHighPass_setPort},
    { "Tick", _wrap_IIRChebyshevIHighPass_Tick},
    {0,0}
};
static swig_lua_method swig_IIRChebyshevIHighPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRChebyshevIHighPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRChebyshevIHighPass_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_ORDER", Filters::IIR::ChebyshevI::HighPassFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::ChebyshevI::HighPassFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_RIPPLE", Filters::IIR::ChebyshevI::HighPassFilter::PORT_RIPPLE)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRChebyshevIHighPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRChebyshevIHighPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRChebyshevIHighPass_Sf_SwigStatic = {
    "IIRChebyshevIHighPass",
    swig_IIRChebyshevIHighPass_Sf_SwigStatic_methods,
    swig_IIRChebyshevIHighPass_Sf_SwigStatic_attributes,
    swig_IIRChebyshevIHighPass_Sf_SwigStatic_constants,
    swig_IIRChebyshevIHighPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRChebyshevIHighPass_bases[] = {0,0};
static const char *swig_IIRChebyshevIHighPass_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRChebyshevIHighPass = { "IIRChebyshevIHighPass", "IIRChebyshevIHighPass", &SWIGTYPE_p_Filters__IIR__ChebyshevI__HighPassFilter,_proxy__wrap_new_IIRChebyshevIHighPass, swig_delete_IIRChebyshevIHighPass, swig_IIRChebyshevIHighPass_methods, swig_IIRChebyshevIHighPass_attributes, &swig_IIRChebyshevIHighPass_Sf_SwigStatic, swig_IIRChebyshevIHighPass_meta, swig_IIRChebyshevIHighPass_bases, swig_IIRChebyshevIHighPass_base_names };

static int _wrap_IIRChebyshevIBandPass_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandPassFilter *arg1 = (Filters::IIR::ChebyshevI::BandPassFilter *) 0 ;
  Dsp::ChebyshevI::BandPass< 32 > arg2 ;
  Dsp::ChebyshevI::BandPass< 32 > *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandPassFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::prototype",1,"Filters::IIR::ChebyshevI::BandPassFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::prototype",2,"Dsp::ChebyshevI::BandPass< 32 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandPass_prototype_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__ChebyshevI__BandPassT_32_t,0))){
    SWIG_fail_ptr("IIRChebyshevIBandPass_prototype_set",2,SWIGTYPE_p_Dsp__ChebyshevI__BandPassT_32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandPass_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandPassFilter *arg1 = (Filters::IIR::ChebyshevI::BandPassFilter *) 0 ;
  Dsp::ChebyshevI::BandPass< 32 > result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandPassFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::prototype",1,"Filters::IIR::ChebyshevI::BandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandPass_prototype_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::ChebyshevI::BandPass< 32 > * resultptr = new Dsp::ChebyshevI::BandPass< 32 >((const Dsp::ChebyshevI::BandPass< 32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__ChebyshevI__BandPassT_32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandPass_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandPassFilter *arg1 = (Filters::IIR::ChebyshevI::BandPassFilter *) 0 ;
  Filters::BiquadTypeIICascade *arg2 = (Filters::BiquadTypeIICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandPassFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::biquads",1,"Filters::IIR::ChebyshevI::BandPassFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::biquads",2,"Filters::BiquadTypeIICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandPass_biquads_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeIICascade,0))){
    SWIG_fail_ptr("IIRChebyshevIBandPass_biquads_set",2,SWIGTYPE_p_Filters__BiquadTypeIICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandPass_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandPassFilter *arg1 = (Filters::IIR::ChebyshevI::BandPassFilter *) 0 ;
  Filters::BiquadTypeIICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandPassFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::biquads",1,"Filters::IIR::ChebyshevI::BandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandPass_biquads_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter);
  }
  
  result = (Filters::BiquadTypeIICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeIICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandPass_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandPassFilter *arg1 = (Filters::IIR::ChebyshevI::BandPassFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandPassFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::order",1,"Filters::IIR::ChebyshevI::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandPass_order_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandPass_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandPassFilter *arg1 = (Filters::IIR::ChebyshevI::BandPassFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandPassFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::order",1,"Filters::IIR::ChebyshevI::BandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandPass_order_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandPass_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandPassFilter *arg1 = (Filters::IIR::ChebyshevI::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandPassFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::fc",1,"Filters::IIR::ChebyshevI::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandPass_fc_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandPass_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandPassFilter *arg1 = (Filters::IIR::ChebyshevI::BandPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandPassFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::fc",1,"Filters::IIR::ChebyshevI::BandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandPass_fc_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandPass_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandPassFilter *arg1 = (Filters::IIR::ChebyshevI::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandPassFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::sr",1,"Filters::IIR::ChebyshevI::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandPass_sr_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandPass_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandPassFilter *arg1 = (Filters::IIR::ChebyshevI::BandPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandPassFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::sr",1,"Filters::IIR::ChebyshevI::BandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandPass_sr_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandPass_ripple_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandPassFilter *arg1 = (Filters::IIR::ChebyshevI::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandPassFilter::ripple",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::ripple",1,"Filters::IIR::ChebyshevI::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::ripple",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandPass_ripple_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->ripple = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandPass_ripple_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandPassFilter *arg1 = (Filters::IIR::ChebyshevI::BandPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandPassFilter::ripple",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::ripple",1,"Filters::IIR::ChebyshevI::BandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandPass_ripple_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->ripple);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandPass_bw_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandPassFilter *arg1 = (Filters::IIR::ChebyshevI::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandPassFilter::bw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::bw",1,"Filters::IIR::ChebyshevI::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::bw",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandPass_bw_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->bw = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandPass_bw_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandPassFilter *arg1 = (Filters::IIR::ChebyshevI::BandPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandPassFilter::bw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::bw",1,"Filters::IIR::ChebyshevI::BandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandPass_bw_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->bw);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIBandPass__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  Filters::IIR::ChebyshevI::BandPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandPassFilter::BandPassFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::BandPassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::BandPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::BandPassFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::BandPassFilter",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::BandPassFilter",5,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (Filters::IIR::ChebyshevI::BandPassFilter *)new Filters::IIR::ChebyshevI::BandPassFilter(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIBandPass__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::ChebyshevI::BandPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandPassFilter::BandPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::BandPassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::BandPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::BandPassFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::BandPassFilter",4,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::ChebyshevI::BandPassFilter *)new Filters::IIR::ChebyshevI::BandPassFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIBandPass(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_IIRChebyshevIBandPass__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_IIRChebyshevIBandPass__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IIRChebyshevIBandPass'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ChebyshevI::BandPassFilter::BandPassFilter(size_t,DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevI::BandPassFilter::BandPassFilter(size_t,DspFloatType,DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_IIRChebyshevIBandPass_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandPassFilter *arg1 = (Filters::IIR::ChebyshevI::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandPassFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::setCutoff",1,"Filters::IIR::ChebyshevI::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandPass_setCutoff",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandPass_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandPassFilter *arg1 = (Filters::IIR::ChebyshevI::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandPassFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::setQ",1,"Filters::IIR::ChebyshevI::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandPass_setQ",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandPass_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandPassFilter *arg1 = (Filters::IIR::ChebyshevI::BandPassFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandPassFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::setPort",1,"Filters::IIR::ChebyshevI::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandPass_setPort",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandPass_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandPassFilter *arg1 = (Filters::IIR::ChebyshevI::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandPassFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::Tick",1,"Filters::IIR::ChebyshevI::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandPass_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandPass_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandPassFilter *arg1 = (Filters::IIR::ChebyshevI::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandPassFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::Tick",1,"Filters::IIR::ChebyshevI::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandPass_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandPass_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandPassFilter *arg1 = (Filters::IIR::ChebyshevI::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandPassFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::Tick",1,"Filters::IIR::ChebyshevI::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandPass_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandPass_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandPassFilter *arg1 = (Filters::IIR::ChebyshevI::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandPassFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::Tick",1,"Filters::IIR::ChebyshevI::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandPassFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandPass_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandPass_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRChebyshevIBandPass_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRChebyshevIBandPass_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRChebyshevIBandPass_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRChebyshevIBandPass_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRChebyshevIBandPass_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ChebyshevI::BandPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevI::BandPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevI::BandPassFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevI::BandPassFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRChebyshevIBandPass(void *obj) {
Filters::IIR::ChebyshevI::BandPassFilter *arg1 = (Filters::IIR::ChebyshevI::BandPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRChebyshevIBandPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRChebyshevIBandPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRChebyshevIBandPass_attributes[] = {
    { "prototype", _wrap_IIRChebyshevIBandPass_prototype_get, _wrap_IIRChebyshevIBandPass_prototype_set },
    { "biquads", _wrap_IIRChebyshevIBandPass_biquads_get, _wrap_IIRChebyshevIBandPass_biquads_set },
    { "order", _wrap_IIRChebyshevIBandPass_order_get, _wrap_IIRChebyshevIBandPass_order_set },
    { "fc", _wrap_IIRChebyshevIBandPass_fc_get, _wrap_IIRChebyshevIBandPass_fc_set },
    { "sr", _wrap_IIRChebyshevIBandPass_sr_get, _wrap_IIRChebyshevIBandPass_sr_set },
    { "ripple", _wrap_IIRChebyshevIBandPass_ripple_get, _wrap_IIRChebyshevIBandPass_ripple_set },
    { "bw", _wrap_IIRChebyshevIBandPass_bw_get, _wrap_IIRChebyshevIBandPass_bw_set },
    {0,0,0}
};
static swig_lua_method swig_IIRChebyshevIBandPass_methods[]= {
    { "setCutoff", _wrap_IIRChebyshevIBandPass_setCutoff},
    { "setQ", _wrap_IIRChebyshevIBandPass_setQ},
    { "setPort", _wrap_IIRChebyshevIBandPass_setPort},
    { "Tick", _wrap_IIRChebyshevIBandPass_Tick},
    {0,0}
};
static swig_lua_method swig_IIRChebyshevIBandPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRChebyshevIBandPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRChebyshevIBandPass_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_ORDER", Filters::IIR::ChebyshevI::BandPassFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::ChebyshevI::BandPassFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_BANDWIDTH", Filters::IIR::ChebyshevI::BandPassFilter::PORT_BANDWIDTH)},
    {SWIG_LUA_CONSTTAB_INT("PORT_RIPPLE", Filters::IIR::ChebyshevI::BandPassFilter::PORT_RIPPLE)},
    {SWIG_LUA_CONSTTAB_INT("PORT_GAIN", Filters::IIR::ChebyshevI::BandPassFilter::PORT_GAIN)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRChebyshevIBandPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRChebyshevIBandPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRChebyshevIBandPass_Sf_SwigStatic = {
    "IIRChebyshevIBandPass",
    swig_IIRChebyshevIBandPass_Sf_SwigStatic_methods,
    swig_IIRChebyshevIBandPass_Sf_SwigStatic_attributes,
    swig_IIRChebyshevIBandPass_Sf_SwigStatic_constants,
    swig_IIRChebyshevIBandPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRChebyshevIBandPass_bases[] = {0,0};
static const char *swig_IIRChebyshevIBandPass_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRChebyshevIBandPass = { "IIRChebyshevIBandPass", "IIRChebyshevIBandPass", &SWIGTYPE_p_Filters__IIR__ChebyshevI__BandPassFilter,_proxy__wrap_new_IIRChebyshevIBandPass, swig_delete_IIRChebyshevIBandPass, swig_IIRChebyshevIBandPass_methods, swig_IIRChebyshevIBandPass_attributes, &swig_IIRChebyshevIBandPass_Sf_SwigStatic, swig_IIRChebyshevIBandPass_meta, swig_IIRChebyshevIBandPass_bases, swig_IIRChebyshevIBandPass_base_names };

static int _wrap_IIRChebyshevIBandStop_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandStopFilter *arg1 = (Filters::IIR::ChebyshevI::BandStopFilter *) 0 ;
  Dsp::ChebyshevI::BandStop< 32 > arg2 ;
  Dsp::ChebyshevI::BandStop< 32 > *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandStopFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::prototype",1,"Filters::IIR::ChebyshevI::BandStopFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::prototype",2,"Dsp::ChebyshevI::BandStop< 32 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandStop_prototype_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__ChebyshevI__BandStopT_32_t,0))){
    SWIG_fail_ptr("IIRChebyshevIBandStop_prototype_set",2,SWIGTYPE_p_Dsp__ChebyshevI__BandStopT_32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandStop_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandStopFilter *arg1 = (Filters::IIR::ChebyshevI::BandStopFilter *) 0 ;
  Dsp::ChebyshevI::BandStop< 32 > result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandStopFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::prototype",1,"Filters::IIR::ChebyshevI::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandStop_prototype_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::ChebyshevI::BandStop< 32 > * resultptr = new Dsp::ChebyshevI::BandStop< 32 >((const Dsp::ChebyshevI::BandStop< 32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__ChebyshevI__BandStopT_32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandStop_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandStopFilter *arg1 = (Filters::IIR::ChebyshevI::BandStopFilter *) 0 ;
  Filters::BiquadTypeIICascade *arg2 = (Filters::BiquadTypeIICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandStopFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::biquads",1,"Filters::IIR::ChebyshevI::BandStopFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::biquads",2,"Filters::BiquadTypeIICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandStop_biquads_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeIICascade,0))){
    SWIG_fail_ptr("IIRChebyshevIBandStop_biquads_set",2,SWIGTYPE_p_Filters__BiquadTypeIICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandStop_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandStopFilter *arg1 = (Filters::IIR::ChebyshevI::BandStopFilter *) 0 ;
  Filters::BiquadTypeIICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandStopFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::biquads",1,"Filters::IIR::ChebyshevI::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandStop_biquads_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter);
  }
  
  result = (Filters::BiquadTypeIICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeIICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandStop_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandStopFilter *arg1 = (Filters::IIR::ChebyshevI::BandStopFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandStopFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::order",1,"Filters::IIR::ChebyshevI::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandStop_order_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandStop_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandStopFilter *arg1 = (Filters::IIR::ChebyshevI::BandStopFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandStopFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::order",1,"Filters::IIR::ChebyshevI::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandStop_order_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandStop_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandStopFilter *arg1 = (Filters::IIR::ChebyshevI::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandStopFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::fc",1,"Filters::IIR::ChebyshevI::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandStop_fc_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandStop_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandStopFilter *arg1 = (Filters::IIR::ChebyshevI::BandStopFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandStopFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::fc",1,"Filters::IIR::ChebyshevI::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandStop_fc_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandStop_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandStopFilter *arg1 = (Filters::IIR::ChebyshevI::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandStopFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::sr",1,"Filters::IIR::ChebyshevI::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandStop_sr_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandStop_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandStopFilter *arg1 = (Filters::IIR::ChebyshevI::BandStopFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandStopFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::sr",1,"Filters::IIR::ChebyshevI::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandStop_sr_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandStop_ripple_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandStopFilter *arg1 = (Filters::IIR::ChebyshevI::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandStopFilter::ripple",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::ripple",1,"Filters::IIR::ChebyshevI::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::ripple",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandStop_ripple_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->ripple = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandStop_ripple_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandStopFilter *arg1 = (Filters::IIR::ChebyshevI::BandStopFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandStopFilter::ripple",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::ripple",1,"Filters::IIR::ChebyshevI::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandStop_ripple_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter);
  }
  
  result = (DspFloatType) ((arg1)->ripple);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandStop_bw_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandStopFilter *arg1 = (Filters::IIR::ChebyshevI::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandStopFilter::bw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::bw",1,"Filters::IIR::ChebyshevI::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::bw",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandStop_bw_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->bw = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandStop_bw_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandStopFilter *arg1 = (Filters::IIR::ChebyshevI::BandStopFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandStopFilter::bw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::bw",1,"Filters::IIR::ChebyshevI::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandStop_bw_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter);
  }
  
  result = (DspFloatType) ((arg1)->bw);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIBandStop__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  Filters::IIR::ChebyshevI::BandStopFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandStopFilter::BandStopFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::BandStopFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::BandStopFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::BandStopFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::BandStopFilter",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::BandStopFilter",5,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (Filters::IIR::ChebyshevI::BandStopFilter *)new Filters::IIR::ChebyshevI::BandStopFilter(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIBandStop__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::ChebyshevI::BandStopFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandStopFilter::BandStopFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::BandStopFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::BandStopFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::BandStopFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::BandStopFilter",4,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::ChebyshevI::BandStopFilter *)new Filters::IIR::ChebyshevI::BandStopFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIBandStop(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_IIRChebyshevIBandStop__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_IIRChebyshevIBandStop__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IIRChebyshevIBandStop'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ChebyshevI::BandStopFilter::BandStopFilter(size_t,DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevI::BandStopFilter::BandStopFilter(size_t,DspFloatType,DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_IIRChebyshevIBandStop_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandStopFilter *arg1 = (Filters::IIR::ChebyshevI::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandStopFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::setCutoff",1,"Filters::IIR::ChebyshevI::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandStop_setCutoff",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandStop_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandStopFilter *arg1 = (Filters::IIR::ChebyshevI::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandStopFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::setQ",1,"Filters::IIR::ChebyshevI::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandStop_setQ",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandStop_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandStopFilter *arg1 = (Filters::IIR::ChebyshevI::BandStopFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandStopFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::setPort",1,"Filters::IIR::ChebyshevI::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandStop_setPort",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandStop_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandStopFilter *arg1 = (Filters::IIR::ChebyshevI::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandStopFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::Tick",1,"Filters::IIR::ChebyshevI::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandStop_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandStop_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandStopFilter *arg1 = (Filters::IIR::ChebyshevI::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandStopFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::Tick",1,"Filters::IIR::ChebyshevI::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandStop_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandStop_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandStopFilter *arg1 = (Filters::IIR::ChebyshevI::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandStopFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::Tick",1,"Filters::IIR::ChebyshevI::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandStop_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandStop_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandStopFilter *arg1 = (Filters::IIR::ChebyshevI::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandStopFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::Tick",1,"Filters::IIR::ChebyshevI::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandStopFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandStop_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandStop_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRChebyshevIBandStop_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRChebyshevIBandStop_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRChebyshevIBandStop_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRChebyshevIBandStop_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRChebyshevIBandStop_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ChebyshevI::BandStopFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevI::BandStopFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevI::BandStopFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevI::BandStopFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRChebyshevIBandStop(void *obj) {
Filters::IIR::ChebyshevI::BandStopFilter *arg1 = (Filters::IIR::ChebyshevI::BandStopFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRChebyshevIBandStop(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRChebyshevIBandStop);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRChebyshevIBandStop_attributes[] = {
    { "prototype", _wrap_IIRChebyshevIBandStop_prototype_get, _wrap_IIRChebyshevIBandStop_prototype_set },
    { "biquads", _wrap_IIRChebyshevIBandStop_biquads_get, _wrap_IIRChebyshevIBandStop_biquads_set },
    { "order", _wrap_IIRChebyshevIBandStop_order_get, _wrap_IIRChebyshevIBandStop_order_set },
    { "fc", _wrap_IIRChebyshevIBandStop_fc_get, _wrap_IIRChebyshevIBandStop_fc_set },
    { "sr", _wrap_IIRChebyshevIBandStop_sr_get, _wrap_IIRChebyshevIBandStop_sr_set },
    { "ripple", _wrap_IIRChebyshevIBandStop_ripple_get, _wrap_IIRChebyshevIBandStop_ripple_set },
    { "bw", _wrap_IIRChebyshevIBandStop_bw_get, _wrap_IIRChebyshevIBandStop_bw_set },
    {0,0,0}
};
static swig_lua_method swig_IIRChebyshevIBandStop_methods[]= {
    { "setCutoff", _wrap_IIRChebyshevIBandStop_setCutoff},
    { "setQ", _wrap_IIRChebyshevIBandStop_setQ},
    { "setPort", _wrap_IIRChebyshevIBandStop_setPort},
    { "Tick", _wrap_IIRChebyshevIBandStop_Tick},
    {0,0}
};
static swig_lua_method swig_IIRChebyshevIBandStop_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRChebyshevIBandStop_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRChebyshevIBandStop_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_ORDER", Filters::IIR::ChebyshevI::BandStopFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::ChebyshevI::BandStopFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_BANDWIDTH", Filters::IIR::ChebyshevI::BandStopFilter::PORT_BANDWIDTH)},
    {SWIG_LUA_CONSTTAB_INT("PORT_RIPPLE", Filters::IIR::ChebyshevI::BandStopFilter::PORT_RIPPLE)},
    {SWIG_LUA_CONSTTAB_INT("PORT_GAIN", Filters::IIR::ChebyshevI::BandStopFilter::PORT_GAIN)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRChebyshevIBandStop_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRChebyshevIBandStop_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRChebyshevIBandStop_SwigStatic = {
    "IIRChebyshevIBandStop",
    swig_IIRChebyshevIBandStop_SwigStatic_methods,
    swig_IIRChebyshevIBandStop_SwigStatic_attributes,
    swig_IIRChebyshevIBandStop_SwigStatic_constants,
    swig_IIRChebyshevIBandStop_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRChebyshevIBandStop_bases[] = {0,0};
static const char *swig_IIRChebyshevIBandStop_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRChebyshevIBandStop = { "IIRChebyshevIBandStop", "IIRChebyshevIBandStop", &SWIGTYPE_p_Filters__IIR__ChebyshevI__BandStopFilter,_proxy__wrap_new_IIRChebyshevIBandStop, swig_delete_IIRChebyshevIBandStop, swig_IIRChebyshevIBandStop_methods, swig_IIRChebyshevIBandStop_attributes, &swig_IIRChebyshevIBandStop_SwigStatic, swig_IIRChebyshevIBandStop_meta, swig_IIRChebyshevIBandStop_bases, swig_IIRChebyshevIBandStop_base_names };

static int _wrap_IIRChebyshevIBandShelf_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevI::BandShelfFilter *) 0 ;
  Dsp::ChebyshevI::BandShelf< 32 > arg2 ;
  Dsp::ChebyshevI::BandShelf< 32 > *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandShelfFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::prototype",1,"Filters::IIR::ChebyshevI::BandShelfFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::prototype",2,"Dsp::ChebyshevI::BandShelf< 32 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandShelf_prototype_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__ChebyshevI__BandShelfT_32_t,0))){
    SWIG_fail_ptr("IIRChebyshevIBandShelf_prototype_set",2,SWIGTYPE_p_Dsp__ChebyshevI__BandShelfT_32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandShelf_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevI::BandShelfFilter *) 0 ;
  Dsp::ChebyshevI::BandShelf< 32 > result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandShelfFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::prototype",1,"Filters::IIR::ChebyshevI::BandShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandShelf_prototype_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::ChebyshevI::BandShelf< 32 > * resultptr = new Dsp::ChebyshevI::BandShelf< 32 >((const Dsp::ChebyshevI::BandShelf< 32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__ChebyshevI__BandShelfT_32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandShelf_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevI::BandShelfFilter *) 0 ;
  Filters::BiquadTypeIICascade *arg2 = (Filters::BiquadTypeIICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandShelfFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::biquads",1,"Filters::IIR::ChebyshevI::BandShelfFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::biquads",2,"Filters::BiquadTypeIICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandShelf_biquads_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeIICascade,0))){
    SWIG_fail_ptr("IIRChebyshevIBandShelf_biquads_set",2,SWIGTYPE_p_Filters__BiquadTypeIICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandShelf_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevI::BandShelfFilter *) 0 ;
  Filters::BiquadTypeIICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandShelfFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::biquads",1,"Filters::IIR::ChebyshevI::BandShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandShelf_biquads_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter);
  }
  
  result = (Filters::BiquadTypeIICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeIICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandShelf_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevI::BandShelfFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandShelfFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::order",1,"Filters::IIR::ChebyshevI::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandShelf_order_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandShelf_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevI::BandShelfFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandShelfFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::order",1,"Filters::IIR::ChebyshevI::BandShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandShelf_order_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandShelf_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevI::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandShelfFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::fc",1,"Filters::IIR::ChebyshevI::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandShelf_fc_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandShelf_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevI::BandShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandShelfFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::fc",1,"Filters::IIR::ChebyshevI::BandShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandShelf_fc_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandShelf_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevI::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandShelfFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::sr",1,"Filters::IIR::ChebyshevI::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandShelf_sr_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandShelf_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevI::BandShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandShelfFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::sr",1,"Filters::IIR::ChebyshevI::BandShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandShelf_sr_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandShelf_ripple_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevI::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandShelfFilter::ripple",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::ripple",1,"Filters::IIR::ChebyshevI::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::ripple",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandShelf_ripple_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->ripple = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandShelf_ripple_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevI::BandShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandShelfFilter::ripple",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::ripple",1,"Filters::IIR::ChebyshevI::BandShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandShelf_ripple_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->ripple);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandShelf_bw_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevI::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandShelfFilter::bw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::bw",1,"Filters::IIR::ChebyshevI::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::bw",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandShelf_bw_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->bw = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandShelf_bw_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevI::BandShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandShelfFilter::bw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::bw",1,"Filters::IIR::ChebyshevI::BandShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandShelf_bw_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->bw);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandShelf_g_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevI::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandShelfFilter::g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::g",1,"Filters::IIR::ChebyshevI::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::g",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandShelf_g_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->g = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandShelf_g_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevI::BandShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandShelfFilter::g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::g",1,"Filters::IIR::ChebyshevI::BandShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandShelf_g_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->g);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIBandShelf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType arg6 ;
  Filters::IIR::ChebyshevI::BandShelfFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandShelfFilter::BandShelfFilter",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::BandShelfFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::BandShelfFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::BandShelfFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::BandShelfFilter",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::BandShelfFilter",5,"DspFloatType");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::BandShelfFilter",6,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  result = (Filters::IIR::ChebyshevI::BandShelfFilter *)new Filters::IIR::ChebyshevI::BandShelfFilter(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIBandShelf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  Filters::IIR::ChebyshevI::BandShelfFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandShelfFilter::BandShelfFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::BandShelfFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::BandShelfFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::BandShelfFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::BandShelfFilter",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::BandShelfFilter",5,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (Filters::IIR::ChebyshevI::BandShelfFilter *)new Filters::IIR::ChebyshevI::BandShelfFilter(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIBandShelf(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_IIRChebyshevIBandShelf__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_IIRChebyshevIBandShelf__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IIRChebyshevIBandShelf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ChebyshevI::BandShelfFilter::BandShelfFilter(size_t,DspFloatType,DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevI::BandShelfFilter::BandShelfFilter(size_t,DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_IIRChebyshevIBandShelf_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevI::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandShelfFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::setCutoff",1,"Filters::IIR::ChebyshevI::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandShelf_setCutoff",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandShelf_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevI::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandShelfFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::setQ",1,"Filters::IIR::ChebyshevI::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandShelf_setQ",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandShelf_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevI::BandShelfFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandShelfFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::setPort",1,"Filters::IIR::ChebyshevI::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandShelf_setPort",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandShelf_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevI::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandShelfFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::Tick",1,"Filters::IIR::ChebyshevI::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandShelf_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandShelf_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevI::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandShelfFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::Tick",1,"Filters::IIR::ChebyshevI::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandShelf_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandShelf_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevI::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandShelfFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::Tick",1,"Filters::IIR::ChebyshevI::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandShelf_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandShelf_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevI::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::BandShelfFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::Tick",1,"Filters::IIR::ChebyshevI::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::BandShelfFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIBandShelf_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIBandShelf_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRChebyshevIBandShelf_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRChebyshevIBandShelf_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRChebyshevIBandShelf_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRChebyshevIBandShelf_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRChebyshevIBandShelf_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ChebyshevI::BandShelfFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevI::BandShelfFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevI::BandShelfFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevI::BandShelfFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRChebyshevIBandShelf(void *obj) {
Filters::IIR::ChebyshevI::BandShelfFilter *arg1 = (Filters::IIR::ChebyshevI::BandShelfFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRChebyshevIBandShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRChebyshevIBandShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRChebyshevIBandShelf_attributes[] = {
    { "prototype", _wrap_IIRChebyshevIBandShelf_prototype_get, _wrap_IIRChebyshevIBandShelf_prototype_set },
    { "biquads", _wrap_IIRChebyshevIBandShelf_biquads_get, _wrap_IIRChebyshevIBandShelf_biquads_set },
    { "order", _wrap_IIRChebyshevIBandShelf_order_get, _wrap_IIRChebyshevIBandShelf_order_set },
    { "fc", _wrap_IIRChebyshevIBandShelf_fc_get, _wrap_IIRChebyshevIBandShelf_fc_set },
    { "sr", _wrap_IIRChebyshevIBandShelf_sr_get, _wrap_IIRChebyshevIBandShelf_sr_set },
    { "ripple", _wrap_IIRChebyshevIBandShelf_ripple_get, _wrap_IIRChebyshevIBandShelf_ripple_set },
    { "bw", _wrap_IIRChebyshevIBandShelf_bw_get, _wrap_IIRChebyshevIBandShelf_bw_set },
    { "g", _wrap_IIRChebyshevIBandShelf_g_get, _wrap_IIRChebyshevIBandShelf_g_set },
    {0,0,0}
};
static swig_lua_method swig_IIRChebyshevIBandShelf_methods[]= {
    { "setCutoff", _wrap_IIRChebyshevIBandShelf_setCutoff},
    { "setQ", _wrap_IIRChebyshevIBandShelf_setQ},
    { "setPort", _wrap_IIRChebyshevIBandShelf_setPort},
    { "Tick", _wrap_IIRChebyshevIBandShelf_Tick},
    {0,0}
};
static swig_lua_method swig_IIRChebyshevIBandShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRChebyshevIBandShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRChebyshevIBandShelf_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_ORDER", Filters::IIR::ChebyshevI::BandShelfFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::ChebyshevI::BandShelfFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_RIPPLE", Filters::IIR::ChebyshevI::BandShelfFilter::PORT_RIPPLE)},
    {SWIG_LUA_CONSTTAB_INT("PORT_BANDWIDTH", Filters::IIR::ChebyshevI::BandShelfFilter::PORT_BANDWIDTH)},
    {SWIG_LUA_CONSTTAB_INT("PORT_GAIN", Filters::IIR::ChebyshevI::BandShelfFilter::PORT_GAIN)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRChebyshevIBandShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRChebyshevIBandShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRChebyshevIBandShelf_Sf_SwigStatic = {
    "IIRChebyshevIBandShelf",
    swig_IIRChebyshevIBandShelf_Sf_SwigStatic_methods,
    swig_IIRChebyshevIBandShelf_Sf_SwigStatic_attributes,
    swig_IIRChebyshevIBandShelf_Sf_SwigStatic_constants,
    swig_IIRChebyshevIBandShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRChebyshevIBandShelf_bases[] = {0,0};
static const char *swig_IIRChebyshevIBandShelf_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRChebyshevIBandShelf = { "IIRChebyshevIBandShelf", "IIRChebyshevIBandShelf", &SWIGTYPE_p_Filters__IIR__ChebyshevI__BandShelfFilter,_proxy__wrap_new_IIRChebyshevIBandShelf, swig_delete_IIRChebyshevIBandShelf, swig_IIRChebyshevIBandShelf_methods, swig_IIRChebyshevIBandShelf_attributes, &swig_IIRChebyshevIBandShelf_Sf_SwigStatic, swig_IIRChebyshevIBandShelf_meta, swig_IIRChebyshevIBandShelf_bases, swig_IIRChebyshevIBandShelf_base_names };

static int _wrap_IIRChebyshevILowShelf_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevI::LowShelfFilter *) 0 ;
  Dsp::ChebyshevI::LowShelf< 32 > arg2 ;
  Dsp::ChebyshevI::LowShelf< 32 > *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowShelfFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::prototype",1,"Filters::IIR::ChebyshevI::LowShelfFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::prototype",2,"Dsp::ChebyshevI::LowShelf< 32 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowShelf_prototype_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__ChebyshevI__LowShelfT_32_t,0))){
    SWIG_fail_ptr("IIRChebyshevILowShelf_prototype_set",2,SWIGTYPE_p_Dsp__ChebyshevI__LowShelfT_32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowShelf_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevI::LowShelfFilter *) 0 ;
  Dsp::ChebyshevI::LowShelf< 32 > result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowShelfFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::prototype",1,"Filters::IIR::ChebyshevI::LowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowShelf_prototype_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::ChebyshevI::LowShelf< 32 > * resultptr = new Dsp::ChebyshevI::LowShelf< 32 >((const Dsp::ChebyshevI::LowShelf< 32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__ChebyshevI__LowShelfT_32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowShelf_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevI::LowShelfFilter *) 0 ;
  Filters::BiquadTypeIICascade *arg2 = (Filters::BiquadTypeIICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowShelfFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::biquads",1,"Filters::IIR::ChebyshevI::LowShelfFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::biquads",2,"Filters::BiquadTypeIICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowShelf_biquads_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeIICascade,0))){
    SWIG_fail_ptr("IIRChebyshevILowShelf_biquads_set",2,SWIGTYPE_p_Filters__BiquadTypeIICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowShelf_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevI::LowShelfFilter *) 0 ;
  Filters::BiquadTypeIICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowShelfFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::biquads",1,"Filters::IIR::ChebyshevI::LowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowShelf_biquads_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter);
  }
  
  result = (Filters::BiquadTypeIICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeIICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowShelf_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevI::LowShelfFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowShelfFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::order",1,"Filters::IIR::ChebyshevI::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowShelf_order_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowShelf_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevI::LowShelfFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowShelfFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::order",1,"Filters::IIR::ChebyshevI::LowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowShelf_order_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowShelf_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevI::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowShelfFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::fc",1,"Filters::IIR::ChebyshevI::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowShelf_fc_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowShelf_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevI::LowShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowShelfFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::fc",1,"Filters::IIR::ChebyshevI::LowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowShelf_fc_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowShelf_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevI::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowShelfFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::sr",1,"Filters::IIR::ChebyshevI::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowShelf_sr_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowShelf_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevI::LowShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowShelfFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::sr",1,"Filters::IIR::ChebyshevI::LowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowShelf_sr_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowShelf_ripple_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevI::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowShelfFilter::ripple",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::ripple",1,"Filters::IIR::ChebyshevI::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::ripple",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowShelf_ripple_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->ripple = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowShelf_ripple_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevI::LowShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowShelfFilter::ripple",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::ripple",1,"Filters::IIR::ChebyshevI::LowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowShelf_ripple_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->ripple);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowShelf_bw_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevI::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowShelfFilter::bw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::bw",1,"Filters::IIR::ChebyshevI::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::bw",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowShelf_bw_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->bw = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowShelf_bw_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevI::LowShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowShelfFilter::bw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::bw",1,"Filters::IIR::ChebyshevI::LowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowShelf_bw_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->bw);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowShelf_g_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevI::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowShelfFilter::g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::g",1,"Filters::IIR::ChebyshevI::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::g",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowShelf_g_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->g = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowShelf_g_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevI::LowShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowShelfFilter::g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::g",1,"Filters::IIR::ChebyshevI::LowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowShelf_g_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->g);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevILowShelf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  Filters::IIR::ChebyshevI::LowShelfFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowShelfFilter::LowShelfFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::LowShelfFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::LowShelfFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::LowShelfFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::LowShelfFilter",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::LowShelfFilter",5,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (Filters::IIR::ChebyshevI::LowShelfFilter *)new Filters::IIR::ChebyshevI::LowShelfFilter(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevILowShelf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::ChebyshevI::LowShelfFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowShelfFilter::LowShelfFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::LowShelfFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::LowShelfFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::LowShelfFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::LowShelfFilter",4,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::ChebyshevI::LowShelfFilter *)new Filters::IIR::ChebyshevI::LowShelfFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevILowShelf(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_IIRChebyshevILowShelf__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_IIRChebyshevILowShelf__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IIRChebyshevILowShelf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ChebyshevI::LowShelfFilter::LowShelfFilter(size_t,DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevI::LowShelfFilter::LowShelfFilter(size_t,DspFloatType,DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_IIRChebyshevILowShelf_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevI::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowShelfFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::setCutoff",1,"Filters::IIR::ChebyshevI::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowShelf_setCutoff",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowShelf_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevI::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowShelfFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::setQ",1,"Filters::IIR::ChebyshevI::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowShelf_setQ",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowShelf_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevI::LowShelfFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowShelfFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::setPort",1,"Filters::IIR::ChebyshevI::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowShelf_setPort",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowShelf_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevI::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowShelfFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::Tick",1,"Filters::IIR::ChebyshevI::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowShelf_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowShelf_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevI::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowShelfFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::Tick",1,"Filters::IIR::ChebyshevI::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowShelf_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowShelf_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevI::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowShelfFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::Tick",1,"Filters::IIR::ChebyshevI::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowShelf_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowShelf_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevI::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::LowShelfFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::Tick",1,"Filters::IIR::ChebyshevI::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::LowShelfFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevILowShelf_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevILowShelf_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRChebyshevILowShelf_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRChebyshevILowShelf_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRChebyshevILowShelf_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRChebyshevILowShelf_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRChebyshevILowShelf_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ChebyshevI::LowShelfFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevI::LowShelfFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevI::LowShelfFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevI::LowShelfFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRChebyshevILowShelf(void *obj) {
Filters::IIR::ChebyshevI::LowShelfFilter *arg1 = (Filters::IIR::ChebyshevI::LowShelfFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRChebyshevILowShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRChebyshevILowShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRChebyshevILowShelf_attributes[] = {
    { "prototype", _wrap_IIRChebyshevILowShelf_prototype_get, _wrap_IIRChebyshevILowShelf_prototype_set },
    { "biquads", _wrap_IIRChebyshevILowShelf_biquads_get, _wrap_IIRChebyshevILowShelf_biquads_set },
    { "order", _wrap_IIRChebyshevILowShelf_order_get, _wrap_IIRChebyshevILowShelf_order_set },
    { "fc", _wrap_IIRChebyshevILowShelf_fc_get, _wrap_IIRChebyshevILowShelf_fc_set },
    { "sr", _wrap_IIRChebyshevILowShelf_sr_get, _wrap_IIRChebyshevILowShelf_sr_set },
    { "ripple", _wrap_IIRChebyshevILowShelf_ripple_get, _wrap_IIRChebyshevILowShelf_ripple_set },
    { "bw", _wrap_IIRChebyshevILowShelf_bw_get, _wrap_IIRChebyshevILowShelf_bw_set },
    { "g", _wrap_IIRChebyshevILowShelf_g_get, _wrap_IIRChebyshevILowShelf_g_set },
    {0,0,0}
};
static swig_lua_method swig_IIRChebyshevILowShelf_methods[]= {
    { "setCutoff", _wrap_IIRChebyshevILowShelf_setCutoff},
    { "setQ", _wrap_IIRChebyshevILowShelf_setQ},
    { "setPort", _wrap_IIRChebyshevILowShelf_setPort},
    { "Tick", _wrap_IIRChebyshevILowShelf_Tick},
    {0,0}
};
static swig_lua_method swig_IIRChebyshevILowShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRChebyshevILowShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRChebyshevILowShelf_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_ORDER", Filters::IIR::ChebyshevI::LowShelfFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::ChebyshevI::LowShelfFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_RIPPLE", Filters::IIR::ChebyshevI::LowShelfFilter::PORT_RIPPLE)},
    {SWIG_LUA_CONSTTAB_INT("PORT_BANDWIDTH", Filters::IIR::ChebyshevI::LowShelfFilter::PORT_BANDWIDTH)},
    {SWIG_LUA_CONSTTAB_INT("PORT_GAIN", Filters::IIR::ChebyshevI::LowShelfFilter::PORT_GAIN)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRChebyshevILowShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRChebyshevILowShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRChebyshevILowShelf_Sf_SwigStatic = {
    "IIRChebyshevILowShelf",
    swig_IIRChebyshevILowShelf_Sf_SwigStatic_methods,
    swig_IIRChebyshevILowShelf_Sf_SwigStatic_attributes,
    swig_IIRChebyshevILowShelf_Sf_SwigStatic_constants,
    swig_IIRChebyshevILowShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRChebyshevILowShelf_bases[] = {0,0};
static const char *swig_IIRChebyshevILowShelf_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRChebyshevILowShelf = { "IIRChebyshevILowShelf", "IIRChebyshevILowShelf", &SWIGTYPE_p_Filters__IIR__ChebyshevI__LowShelfFilter,_proxy__wrap_new_IIRChebyshevILowShelf, swig_delete_IIRChebyshevILowShelf, swig_IIRChebyshevILowShelf_methods, swig_IIRChebyshevILowShelf_attributes, &swig_IIRChebyshevILowShelf_Sf_SwigStatic, swig_IIRChebyshevILowShelf_meta, swig_IIRChebyshevILowShelf_bases, swig_IIRChebyshevILowShelf_base_names };

static int _wrap_IIRChebyshevIHighShelf_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevI::HighShelfFilter *) 0 ;
  Dsp::ChebyshevI::HighShelf< 32 > arg2 ;
  Dsp::ChebyshevI::HighShelf< 32 > *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighShelfFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::prototype",1,"Filters::IIR::ChebyshevI::HighShelfFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::prototype",2,"Dsp::ChebyshevI::HighShelf< 32 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighShelf_prototype_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__ChebyshevI__HighShelfT_32_t,0))){
    SWIG_fail_ptr("IIRChebyshevIHighShelf_prototype_set",2,SWIGTYPE_p_Dsp__ChebyshevI__HighShelfT_32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighShelf_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevI::HighShelfFilter *) 0 ;
  Dsp::ChebyshevI::HighShelf< 32 > result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighShelfFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::prototype",1,"Filters::IIR::ChebyshevI::HighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighShelf_prototype_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::ChebyshevI::HighShelf< 32 > * resultptr = new Dsp::ChebyshevI::HighShelf< 32 >((const Dsp::ChebyshevI::HighShelf< 32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__ChebyshevI__HighShelfT_32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighShelf_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevI::HighShelfFilter *) 0 ;
  Filters::BiquadTypeIICascade *arg2 = (Filters::BiquadTypeIICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighShelfFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::biquads",1,"Filters::IIR::ChebyshevI::HighShelfFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::biquads",2,"Filters::BiquadTypeIICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighShelf_biquads_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeIICascade,0))){
    SWIG_fail_ptr("IIRChebyshevIHighShelf_biquads_set",2,SWIGTYPE_p_Filters__BiquadTypeIICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighShelf_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevI::HighShelfFilter *) 0 ;
  Filters::BiquadTypeIICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighShelfFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::biquads",1,"Filters::IIR::ChebyshevI::HighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighShelf_biquads_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter);
  }
  
  result = (Filters::BiquadTypeIICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeIICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighShelf_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevI::HighShelfFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighShelfFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::order",1,"Filters::IIR::ChebyshevI::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighShelf_order_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighShelf_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevI::HighShelfFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighShelfFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::order",1,"Filters::IIR::ChebyshevI::HighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighShelf_order_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighShelf_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevI::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighShelfFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::fc",1,"Filters::IIR::ChebyshevI::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighShelf_fc_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighShelf_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevI::HighShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighShelfFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::fc",1,"Filters::IIR::ChebyshevI::HighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighShelf_fc_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighShelf_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevI::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighShelfFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::sr",1,"Filters::IIR::ChebyshevI::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighShelf_sr_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighShelf_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevI::HighShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighShelfFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::sr",1,"Filters::IIR::ChebyshevI::HighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighShelf_sr_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighShelf_ripple_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevI::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighShelfFilter::ripple",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::ripple",1,"Filters::IIR::ChebyshevI::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::ripple",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighShelf_ripple_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->ripple = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighShelf_ripple_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevI::HighShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighShelfFilter::ripple",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::ripple",1,"Filters::IIR::ChebyshevI::HighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighShelf_ripple_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->ripple);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighShelf_bw_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevI::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighShelfFilter::bw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::bw",1,"Filters::IIR::ChebyshevI::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::bw",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighShelf_bw_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->bw = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighShelf_bw_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevI::HighShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighShelfFilter::bw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::bw",1,"Filters::IIR::ChebyshevI::HighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighShelf_bw_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->bw);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighShelf_g_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevI::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighShelfFilter::g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::g",1,"Filters::IIR::ChebyshevI::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::g",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighShelf_g_set",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->g = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighShelf_g_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevI::HighShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighShelfFilter::g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::g",1,"Filters::IIR::ChebyshevI::HighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighShelf_g_get",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->g);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIHighShelf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  Filters::IIR::ChebyshevI::HighShelfFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighShelfFilter::HighShelfFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::HighShelfFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::HighShelfFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::HighShelfFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::HighShelfFilter",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::HighShelfFilter",5,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (Filters::IIR::ChebyshevI::HighShelfFilter *)new Filters::IIR::ChebyshevI::HighShelfFilter(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIHighShelf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::ChebyshevI::HighShelfFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighShelfFilter::HighShelfFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::HighShelfFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::HighShelfFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::HighShelfFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::HighShelfFilter",4,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::ChebyshevI::HighShelfFilter *)new Filters::IIR::ChebyshevI::HighShelfFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRChebyshevIHighShelf(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_IIRChebyshevIHighShelf__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_IIRChebyshevIHighShelf__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IIRChebyshevIHighShelf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ChebyshevI::HighShelfFilter::HighShelfFilter(size_t,DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevI::HighShelfFilter::HighShelfFilter(size_t,DspFloatType,DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_IIRChebyshevIHighShelf_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevI::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighShelfFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::setCutoff",1,"Filters::IIR::ChebyshevI::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighShelf_setCutoff",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighShelf_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevI::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighShelfFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::setQ",1,"Filters::IIR::ChebyshevI::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighShelf_setQ",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighShelf_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevI::HighShelfFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighShelfFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::setPort",1,"Filters::IIR::ChebyshevI::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighShelf_setPort",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighShelf_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevI::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighShelfFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::Tick",1,"Filters::IIR::ChebyshevI::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighShelf_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighShelf_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevI::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighShelfFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::Tick",1,"Filters::IIR::ChebyshevI::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighShelf_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighShelf_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevI::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighShelfFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::Tick",1,"Filters::IIR::ChebyshevI::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighShelf_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighShelf_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::ChebyshevI::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevI::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::ChebyshevI::HighShelfFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::Tick",1,"Filters::IIR::ChebyshevI::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::ChebyshevI::HighShelfFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRChebyshevIHighShelf_Tick",1,SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRChebyshevIHighShelf_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRChebyshevIHighShelf_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRChebyshevIHighShelf_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRChebyshevIHighShelf_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRChebyshevIHighShelf_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRChebyshevIHighShelf_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::ChebyshevI::HighShelfFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevI::HighShelfFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevI::HighShelfFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::ChebyshevI::HighShelfFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRChebyshevIHighShelf(void *obj) {
Filters::IIR::ChebyshevI::HighShelfFilter *arg1 = (Filters::IIR::ChebyshevI::HighShelfFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRChebyshevIHighShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRChebyshevIHighShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRChebyshevIHighShelf_attributes[] = {
    { "prototype", _wrap_IIRChebyshevIHighShelf_prototype_get, _wrap_IIRChebyshevIHighShelf_prototype_set },
    { "biquads", _wrap_IIRChebyshevIHighShelf_biquads_get, _wrap_IIRChebyshevIHighShelf_biquads_set },
    { "order", _wrap_IIRChebyshevIHighShelf_order_get, _wrap_IIRChebyshevIHighShelf_order_set },
    { "fc", _wrap_IIRChebyshevIHighShelf_fc_get, _wrap_IIRChebyshevIHighShelf_fc_set },
    { "sr", _wrap_IIRChebyshevIHighShelf_sr_get, _wrap_IIRChebyshevIHighShelf_sr_set },
    { "ripple", _wrap_IIRChebyshevIHighShelf_ripple_get, _wrap_IIRChebyshevIHighShelf_ripple_set },
    { "bw", _wrap_IIRChebyshevIHighShelf_bw_get, _wrap_IIRChebyshevIHighShelf_bw_set },
    { "g", _wrap_IIRChebyshevIHighShelf_g_get, _wrap_IIRChebyshevIHighShelf_g_set },
    {0,0,0}
};
static swig_lua_method swig_IIRChebyshevIHighShelf_methods[]= {
    { "setCutoff", _wrap_IIRChebyshevIHighShelf_setCutoff},
    { "setQ", _wrap_IIRChebyshevIHighShelf_setQ},
    { "setPort", _wrap_IIRChebyshevIHighShelf_setPort},
    { "Tick", _wrap_IIRChebyshevIHighShelf_Tick},
    {0,0}
};
static swig_lua_method swig_IIRChebyshevIHighShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRChebyshevIHighShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRChebyshevIHighShelf_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_ORDER", Filters::IIR::ChebyshevI::HighShelfFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Filters::IIR::ChebyshevI::HighShelfFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_RIPPLE", Filters::IIR::ChebyshevI::HighShelfFilter::PORT_RIPPLE)},
    {SWIG_LUA_CONSTTAB_INT("PORT_BANDWIDTH", Filters::IIR::ChebyshevI::HighShelfFilter::PORT_BANDWIDTH)},
    {SWIG_LUA_CONSTTAB_INT("PORT_GAIN", Filters::IIR::ChebyshevI::HighShelfFilter::PORT_GAIN)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRChebyshevIHighShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRChebyshevIHighShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRChebyshevIHighShelf_Sf_SwigStatic = {
    "IIRChebyshevIHighShelf",
    swig_IIRChebyshevIHighShelf_Sf_SwigStatic_methods,
    swig_IIRChebyshevIHighShelf_Sf_SwigStatic_attributes,
    swig_IIRChebyshevIHighShelf_Sf_SwigStatic_constants,
    swig_IIRChebyshevIHighShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRChebyshevIHighShelf_bases[] = {0,0};
static const char *swig_IIRChebyshevIHighShelf_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRChebyshevIHighShelf = { "IIRChebyshevIHighShelf", "IIRChebyshevIHighShelf", &SWIGTYPE_p_Filters__IIR__ChebyshevI__HighShelfFilter,_proxy__wrap_new_IIRChebyshevIHighShelf, swig_delete_IIRChebyshevIHighShelf, swig_IIRChebyshevIHighShelf_methods, swig_IIRChebyshevIHighShelf_attributes, &swig_IIRChebyshevIHighShelf_Sf_SwigStatic, swig_IIRChebyshevIHighShelf_meta, swig_IIRChebyshevIHighShelf_bases, swig_IIRChebyshevIHighShelf_base_names };

static int _wrap_IIRLegendreLowPass_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::LowPassFilter *arg1 = (Filters::IIR::Legendre::LowPassFilter *) 0 ;
  Dsp::Legendre::LowPass< 32 > arg2 ;
  Dsp::Legendre::LowPass< 32 > *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::LowPassFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::prototype",1,"Filters::IIR::Legendre::LowPassFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::prototype",2,"Dsp::Legendre::LowPass< 32 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreLowPass_prototype_set",1,SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__Legendre__LowPassT_32_t,0))){
    SWIG_fail_ptr("IIRLegendreLowPass_prototype_set",2,SWIGTYPE_p_Dsp__Legendre__LowPassT_32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreLowPass_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::LowPassFilter *arg1 = (Filters::IIR::Legendre::LowPassFilter *) 0 ;
  Dsp::Legendre::LowPass< 32 > result;
  
  SWIG_check_num_args("Filters::IIR::Legendre::LowPassFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::prototype",1,"Filters::IIR::Legendre::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreLowPass_prototype_get",1,SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::Legendre::LowPass< 32 > * resultptr = new Dsp::Legendre::LowPass< 32 >((const Dsp::Legendre::LowPass< 32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__Legendre__LowPassT_32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreLowPass_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::LowPassFilter *arg1 = (Filters::IIR::Legendre::LowPassFilter *) 0 ;
  Filters::BiquadTypeICascade *arg2 = (Filters::BiquadTypeICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::LowPassFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::biquads",1,"Filters::IIR::Legendre::LowPassFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::biquads",2,"Filters::BiquadTypeICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreLowPass_biquads_set",1,SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeICascade,0))){
    SWIG_fail_ptr("IIRLegendreLowPass_biquads_set",2,SWIGTYPE_p_Filters__BiquadTypeICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreLowPass_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::LowPassFilter *arg1 = (Filters::IIR::Legendre::LowPassFilter *) 0 ;
  Filters::BiquadTypeICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::LowPassFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::biquads",1,"Filters::IIR::Legendre::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreLowPass_biquads_get",1,SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter);
  }
  
  result = (Filters::BiquadTypeICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreLowPass_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::LowPassFilter *arg1 = (Filters::IIR::Legendre::LowPassFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::LowPassFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::order",1,"Filters::IIR::Legendre::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreLowPass_order_set",1,SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreLowPass_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::LowPassFilter *arg1 = (Filters::IIR::Legendre::LowPassFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::Legendre::LowPassFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::order",1,"Filters::IIR::Legendre::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreLowPass_order_get",1,SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreLowPass_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::LowPassFilter *arg1 = (Filters::IIR::Legendre::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::LowPassFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::fc",1,"Filters::IIR::Legendre::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreLowPass_fc_set",1,SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreLowPass_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::LowPassFilter *arg1 = (Filters::IIR::Legendre::LowPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Legendre::LowPassFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::fc",1,"Filters::IIR::Legendre::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreLowPass_fc_get",1,SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreLowPass_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::LowPassFilter *arg1 = (Filters::IIR::Legendre::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::LowPassFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::sr",1,"Filters::IIR::Legendre::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreLowPass_sr_set",1,SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreLowPass_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::LowPassFilter *arg1 = (Filters::IIR::Legendre::LowPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Legendre::LowPassFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::sr",1,"Filters::IIR::Legendre::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreLowPass_sr_get",1,SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRLegendreLowPass(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::Legendre::LowPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::LowPassFilter::LowPassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::LowPassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::LowPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::LowPassFilter",3,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::Legendre::LowPassFilter *)new Filters::IIR::Legendre::LowPassFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreLowPass_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::LowPassFilter *arg1 = (Filters::IIR::Legendre::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::LowPassFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::setCutoff",1,"Filters::IIR::Legendre::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreLowPass_setCutoff",1,SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreLowPass_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::LowPassFilter *arg1 = (Filters::IIR::Legendre::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::LowPassFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::setQ",1,"Filters::IIR::Legendre::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreLowPass_setQ",1,SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreLowPass_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::LowPassFilter *arg1 = (Filters::IIR::Legendre::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Legendre::LowPassFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::Tick",1,"Filters::IIR::Legendre::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreLowPass_Tick",1,SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreLowPass_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::LowPassFilter *arg1 = (Filters::IIR::Legendre::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Legendre::LowPassFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::Tick",1,"Filters::IIR::Legendre::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreLowPass_Tick",1,SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreLowPass_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::LowPassFilter *arg1 = (Filters::IIR::Legendre::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Legendre::LowPassFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::Tick",1,"Filters::IIR::Legendre::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreLowPass_Tick",1,SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreLowPass_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::LowPassFilter *arg1 = (Filters::IIR::Legendre::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Legendre::LowPassFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::Tick",1,"Filters::IIR::Legendre::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::LowPassFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreLowPass_Tick",1,SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreLowPass_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRLegendreLowPass_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRLegendreLowPass_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRLegendreLowPass_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRLegendreLowPass_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRLegendreLowPass_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::Legendre::LowPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Legendre::LowPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Legendre::LowPassFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Legendre::LowPassFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRLegendreLowPass(void *obj) {
Filters::IIR::Legendre::LowPassFilter *arg1 = (Filters::IIR::Legendre::LowPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRLegendreLowPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRLegendreLowPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRLegendreLowPass_attributes[] = {
    { "prototype", _wrap_IIRLegendreLowPass_prototype_get, _wrap_IIRLegendreLowPass_prototype_set },
    { "biquads", _wrap_IIRLegendreLowPass_biquads_get, _wrap_IIRLegendreLowPass_biquads_set },
    { "order", _wrap_IIRLegendreLowPass_order_get, _wrap_IIRLegendreLowPass_order_set },
    { "fc", _wrap_IIRLegendreLowPass_fc_get, _wrap_IIRLegendreLowPass_fc_set },
    { "sr", _wrap_IIRLegendreLowPass_sr_get, _wrap_IIRLegendreLowPass_sr_set },
    {0,0,0}
};
static swig_lua_method swig_IIRLegendreLowPass_methods[]= {
    { "setCutoff", _wrap_IIRLegendreLowPass_setCutoff},
    { "setQ", _wrap_IIRLegendreLowPass_setQ},
    { "Tick", _wrap_IIRLegendreLowPass_Tick},
    {0,0}
};
static swig_lua_method swig_IIRLegendreLowPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRLegendreLowPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRLegendreLowPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRLegendreLowPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRLegendreLowPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRLegendreLowPass_Sf_SwigStatic = {
    "IIRLegendreLowPass",
    swig_IIRLegendreLowPass_Sf_SwigStatic_methods,
    swig_IIRLegendreLowPass_Sf_SwigStatic_attributes,
    swig_IIRLegendreLowPass_Sf_SwigStatic_constants,
    swig_IIRLegendreLowPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRLegendreLowPass_bases[] = {0,0};
static const char *swig_IIRLegendreLowPass_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRLegendreLowPass = { "IIRLegendreLowPass", "IIRLegendreLowPass", &SWIGTYPE_p_Filters__IIR__Legendre__LowPassFilter,_proxy__wrap_new_IIRLegendreLowPass, swig_delete_IIRLegendreLowPass, swig_IIRLegendreLowPass_methods, swig_IIRLegendreLowPass_attributes, &swig_IIRLegendreLowPass_Sf_SwigStatic, swig_IIRLegendreLowPass_meta, swig_IIRLegendreLowPass_bases, swig_IIRLegendreLowPass_base_names };

static int _wrap_IIRLegendreHighPass_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::HighPassFilter *arg1 = (Filters::IIR::Legendre::HighPassFilter *) 0 ;
  Dsp::Legendre::HighPass< 32 > arg2 ;
  Dsp::Legendre::HighPass< 32 > *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::HighPassFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::prototype",1,"Filters::IIR::Legendre::HighPassFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::prototype",2,"Dsp::Legendre::HighPass< 32 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreHighPass_prototype_set",1,SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__Legendre__HighPassT_32_t,0))){
    SWIG_fail_ptr("IIRLegendreHighPass_prototype_set",2,SWIGTYPE_p_Dsp__Legendre__HighPassT_32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreHighPass_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::HighPassFilter *arg1 = (Filters::IIR::Legendre::HighPassFilter *) 0 ;
  Dsp::Legendre::HighPass< 32 > result;
  
  SWIG_check_num_args("Filters::IIR::Legendre::HighPassFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::prototype",1,"Filters::IIR::Legendre::HighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreHighPass_prototype_get",1,SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::Legendre::HighPass< 32 > * resultptr = new Dsp::Legendre::HighPass< 32 >((const Dsp::Legendre::HighPass< 32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__Legendre__HighPassT_32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreHighPass_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::HighPassFilter *arg1 = (Filters::IIR::Legendre::HighPassFilter *) 0 ;
  Filters::BiquadTypeICascade *arg2 = (Filters::BiquadTypeICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::HighPassFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::biquads",1,"Filters::IIR::Legendre::HighPassFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::biquads",2,"Filters::BiquadTypeICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreHighPass_biquads_set",1,SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeICascade,0))){
    SWIG_fail_ptr("IIRLegendreHighPass_biquads_set",2,SWIGTYPE_p_Filters__BiquadTypeICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreHighPass_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::HighPassFilter *arg1 = (Filters::IIR::Legendre::HighPassFilter *) 0 ;
  Filters::BiquadTypeICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::HighPassFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::biquads",1,"Filters::IIR::Legendre::HighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreHighPass_biquads_get",1,SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter);
  }
  
  result = (Filters::BiquadTypeICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreHighPass_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::HighPassFilter *arg1 = (Filters::IIR::Legendre::HighPassFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::HighPassFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::order",1,"Filters::IIR::Legendre::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreHighPass_order_set",1,SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreHighPass_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::HighPassFilter *arg1 = (Filters::IIR::Legendre::HighPassFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::Legendre::HighPassFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::order",1,"Filters::IIR::Legendre::HighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreHighPass_order_get",1,SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreHighPass_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::HighPassFilter *arg1 = (Filters::IIR::Legendre::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::HighPassFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::fc",1,"Filters::IIR::Legendre::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreHighPass_fc_set",1,SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreHighPass_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::HighPassFilter *arg1 = (Filters::IIR::Legendre::HighPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Legendre::HighPassFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::fc",1,"Filters::IIR::Legendre::HighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreHighPass_fc_get",1,SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreHighPass_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::HighPassFilter *arg1 = (Filters::IIR::Legendre::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::HighPassFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::sr",1,"Filters::IIR::Legendre::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreHighPass_sr_set",1,SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreHighPass_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::HighPassFilter *arg1 = (Filters::IIR::Legendre::HighPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Legendre::HighPassFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::sr",1,"Filters::IIR::Legendre::HighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreHighPass_sr_get",1,SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRLegendreHighPass(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::Legendre::HighPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::HighPassFilter::HighPassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::HighPassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::HighPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::HighPassFilter",3,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::Legendre::HighPassFilter *)new Filters::IIR::Legendre::HighPassFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreHighPass_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::HighPassFilter *arg1 = (Filters::IIR::Legendre::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::HighPassFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::setCutoff",1,"Filters::IIR::Legendre::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreHighPass_setCutoff",1,SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreHighPass_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::HighPassFilter *arg1 = (Filters::IIR::Legendre::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::HighPassFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::setQ",1,"Filters::IIR::Legendre::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreHighPass_setQ",1,SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreHighPass_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::HighPassFilter *arg1 = (Filters::IIR::Legendre::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Legendre::HighPassFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::Tick",1,"Filters::IIR::Legendre::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreHighPass_Tick",1,SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreHighPass_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::HighPassFilter *arg1 = (Filters::IIR::Legendre::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Legendre::HighPassFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::Tick",1,"Filters::IIR::Legendre::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreHighPass_Tick",1,SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreHighPass_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::HighPassFilter *arg1 = (Filters::IIR::Legendre::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Legendre::HighPassFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::Tick",1,"Filters::IIR::Legendre::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreHighPass_Tick",1,SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreHighPass_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::HighPassFilter *arg1 = (Filters::IIR::Legendre::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Legendre::HighPassFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::Tick",1,"Filters::IIR::Legendre::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::HighPassFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreHighPass_Tick",1,SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreHighPass_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRLegendreHighPass_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRLegendreHighPass_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRLegendreHighPass_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRLegendreHighPass_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRLegendreHighPass_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::Legendre::HighPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Legendre::HighPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Legendre::HighPassFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Legendre::HighPassFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRLegendreHighPass(void *obj) {
Filters::IIR::Legendre::HighPassFilter *arg1 = (Filters::IIR::Legendre::HighPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRLegendreHighPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRLegendreHighPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRLegendreHighPass_attributes[] = {
    { "prototype", _wrap_IIRLegendreHighPass_prototype_get, _wrap_IIRLegendreHighPass_prototype_set },
    { "biquads", _wrap_IIRLegendreHighPass_biquads_get, _wrap_IIRLegendreHighPass_biquads_set },
    { "order", _wrap_IIRLegendreHighPass_order_get, _wrap_IIRLegendreHighPass_order_set },
    { "fc", _wrap_IIRLegendreHighPass_fc_get, _wrap_IIRLegendreHighPass_fc_set },
    { "sr", _wrap_IIRLegendreHighPass_sr_get, _wrap_IIRLegendreHighPass_sr_set },
    {0,0,0}
};
static swig_lua_method swig_IIRLegendreHighPass_methods[]= {
    { "setCutoff", _wrap_IIRLegendreHighPass_setCutoff},
    { "setQ", _wrap_IIRLegendreHighPass_setQ},
    { "Tick", _wrap_IIRLegendreHighPass_Tick},
    {0,0}
};
static swig_lua_method swig_IIRLegendreHighPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRLegendreHighPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRLegendreHighPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRLegendreHighPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRLegendreHighPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRLegendreHighPass_Sf_SwigStatic = {
    "IIRLegendreHighPass",
    swig_IIRLegendreHighPass_Sf_SwigStatic_methods,
    swig_IIRLegendreHighPass_Sf_SwigStatic_attributes,
    swig_IIRLegendreHighPass_Sf_SwigStatic_constants,
    swig_IIRLegendreHighPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRLegendreHighPass_bases[] = {0,0};
static const char *swig_IIRLegendreHighPass_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRLegendreHighPass = { "IIRLegendreHighPass", "IIRLegendreHighPass", &SWIGTYPE_p_Filters__IIR__Legendre__HighPassFilter,_proxy__wrap_new_IIRLegendreHighPass, swig_delete_IIRLegendreHighPass, swig_IIRLegendreHighPass_methods, swig_IIRLegendreHighPass_attributes, &swig_IIRLegendreHighPass_Sf_SwigStatic, swig_IIRLegendreHighPass_meta, swig_IIRLegendreHighPass_bases, swig_IIRLegendreHighPass_base_names };

static int _wrap_IIRLegendreBandPass_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandPassFilter *arg1 = (Filters::IIR::Legendre::BandPassFilter *) 0 ;
  Dsp::Legendre::BandPass< 32 > arg2 ;
  Dsp::Legendre::BandPass< 32 > *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandPassFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::prototype",1,"Filters::IIR::Legendre::BandPassFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::prototype",2,"Dsp::Legendre::BandPass< 32 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandPass_prototype_set",1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__Legendre__BandPassT_32_t,0))){
    SWIG_fail_ptr("IIRLegendreBandPass_prototype_set",2,SWIGTYPE_p_Dsp__Legendre__BandPassT_32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandPass_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandPassFilter *arg1 = (Filters::IIR::Legendre::BandPassFilter *) 0 ;
  Dsp::Legendre::BandPass< 32 > result;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandPassFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::prototype",1,"Filters::IIR::Legendre::BandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandPass_prototype_get",1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::Legendre::BandPass< 32 > * resultptr = new Dsp::Legendre::BandPass< 32 >((const Dsp::Legendre::BandPass< 32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__Legendre__BandPassT_32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandPass_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandPassFilter *arg1 = (Filters::IIR::Legendre::BandPassFilter *) 0 ;
  Filters::BiquadTypeICascade *arg2 = (Filters::BiquadTypeICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandPassFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::biquads",1,"Filters::IIR::Legendre::BandPassFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::biquads",2,"Filters::BiquadTypeICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandPass_biquads_set",1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeICascade,0))){
    SWIG_fail_ptr("IIRLegendreBandPass_biquads_set",2,SWIGTYPE_p_Filters__BiquadTypeICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandPass_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandPassFilter *arg1 = (Filters::IIR::Legendre::BandPassFilter *) 0 ;
  Filters::BiquadTypeICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandPassFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::biquads",1,"Filters::IIR::Legendre::BandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandPass_biquads_get",1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter);
  }
  
  result = (Filters::BiquadTypeICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandPass_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandPassFilter *arg1 = (Filters::IIR::Legendre::BandPassFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandPassFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::order",1,"Filters::IIR::Legendre::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandPass_order_set",1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandPass_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandPassFilter *arg1 = (Filters::IIR::Legendre::BandPassFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandPassFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::order",1,"Filters::IIR::Legendre::BandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandPass_order_get",1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandPass_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandPassFilter *arg1 = (Filters::IIR::Legendre::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandPassFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::fc",1,"Filters::IIR::Legendre::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandPass_fc_set",1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandPass_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandPassFilter *arg1 = (Filters::IIR::Legendre::BandPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandPassFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::fc",1,"Filters::IIR::Legendre::BandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandPass_fc_get",1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandPass_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandPassFilter *arg1 = (Filters::IIR::Legendre::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandPassFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::sr",1,"Filters::IIR::Legendre::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandPass_sr_set",1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandPass_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandPassFilter *arg1 = (Filters::IIR::Legendre::BandPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandPassFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::sr",1,"Filters::IIR::Legendre::BandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandPass_sr_get",1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandPass_width_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandPassFilter *arg1 = (Filters::IIR::Legendre::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandPassFilter::width",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::width",1,"Filters::IIR::Legendre::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::width",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandPass_width_set",1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->width = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandPass_width_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandPassFilter *arg1 = (Filters::IIR::Legendre::BandPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandPassFilter::width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::width",1,"Filters::IIR::Legendre::BandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandPass_width_get",1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->width);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRLegendreBandPass(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::Legendre::BandPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandPassFilter::BandPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::BandPassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::BandPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::BandPassFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::BandPassFilter",4,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::Legendre::BandPassFilter *)new Filters::IIR::Legendre::BandPassFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandPass_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandPassFilter *arg1 = (Filters::IIR::Legendre::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandPassFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::setCutoff",1,"Filters::IIR::Legendre::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandPass_setCutoff",1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandPass_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandPassFilter *arg1 = (Filters::IIR::Legendre::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandPassFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::setQ",1,"Filters::IIR::Legendre::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandPass_setQ",1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandPass_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandPassFilter *arg1 = (Filters::IIR::Legendre::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandPassFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::Tick",1,"Filters::IIR::Legendre::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandPass_Tick",1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandPass_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandPassFilter *arg1 = (Filters::IIR::Legendre::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandPassFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::Tick",1,"Filters::IIR::Legendre::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandPass_Tick",1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandPass_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandPassFilter *arg1 = (Filters::IIR::Legendre::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandPassFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::Tick",1,"Filters::IIR::Legendre::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandPass_Tick",1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandPass_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandPassFilter *arg1 = (Filters::IIR::Legendre::BandPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandPassFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::Tick",1,"Filters::IIR::Legendre::BandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::BandPassFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandPass_Tick",1,SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandPass_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRLegendreBandPass_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRLegendreBandPass_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRLegendreBandPass_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRLegendreBandPass_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRLegendreBandPass_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::Legendre::BandPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Legendre::BandPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Legendre::BandPassFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Legendre::BandPassFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRLegendreBandPass(void *obj) {
Filters::IIR::Legendre::BandPassFilter *arg1 = (Filters::IIR::Legendre::BandPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRLegendreBandPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRLegendreBandPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRLegendreBandPass_attributes[] = {
    { "prototype", _wrap_IIRLegendreBandPass_prototype_get, _wrap_IIRLegendreBandPass_prototype_set },
    { "biquads", _wrap_IIRLegendreBandPass_biquads_get, _wrap_IIRLegendreBandPass_biquads_set },
    { "order", _wrap_IIRLegendreBandPass_order_get, _wrap_IIRLegendreBandPass_order_set },
    { "fc", _wrap_IIRLegendreBandPass_fc_get, _wrap_IIRLegendreBandPass_fc_set },
    { "sr", _wrap_IIRLegendreBandPass_sr_get, _wrap_IIRLegendreBandPass_sr_set },
    { "width", _wrap_IIRLegendreBandPass_width_get, _wrap_IIRLegendreBandPass_width_set },
    {0,0,0}
};
static swig_lua_method swig_IIRLegendreBandPass_methods[]= {
    { "setCutoff", _wrap_IIRLegendreBandPass_setCutoff},
    { "setQ", _wrap_IIRLegendreBandPass_setQ},
    { "Tick", _wrap_IIRLegendreBandPass_Tick},
    {0,0}
};
static swig_lua_method swig_IIRLegendreBandPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRLegendreBandPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRLegendreBandPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRLegendreBandPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRLegendreBandPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRLegendreBandPass_Sf_SwigStatic = {
    "IIRLegendreBandPass",
    swig_IIRLegendreBandPass_Sf_SwigStatic_methods,
    swig_IIRLegendreBandPass_Sf_SwigStatic_attributes,
    swig_IIRLegendreBandPass_Sf_SwigStatic_constants,
    swig_IIRLegendreBandPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRLegendreBandPass_bases[] = {0,0};
static const char *swig_IIRLegendreBandPass_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRLegendreBandPass = { "IIRLegendreBandPass", "IIRLegendreBandPass", &SWIGTYPE_p_Filters__IIR__Legendre__BandPassFilter,_proxy__wrap_new_IIRLegendreBandPass, swig_delete_IIRLegendreBandPass, swig_IIRLegendreBandPass_methods, swig_IIRLegendreBandPass_attributes, &swig_IIRLegendreBandPass_Sf_SwigStatic, swig_IIRLegendreBandPass_meta, swig_IIRLegendreBandPass_bases, swig_IIRLegendreBandPass_base_names };

static int _wrap_IIRLegendreBandStop_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandStopFilter *arg1 = (Filters::IIR::Legendre::BandStopFilter *) 0 ;
  Dsp::Legendre::BandStop< 32 > arg2 ;
  Dsp::Legendre::BandStop< 32 > *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandStopFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::prototype",1,"Filters::IIR::Legendre::BandStopFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::prototype",2,"Dsp::Legendre::BandStop< 32 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandStop_prototype_set",1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__Legendre__BandStopT_32_t,0))){
    SWIG_fail_ptr("IIRLegendreBandStop_prototype_set",2,SWIGTYPE_p_Dsp__Legendre__BandStopT_32_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandStop_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandStopFilter *arg1 = (Filters::IIR::Legendre::BandStopFilter *) 0 ;
  Dsp::Legendre::BandStop< 32 > result;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandStopFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::prototype",1,"Filters::IIR::Legendre::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandStop_prototype_get",1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::Legendre::BandStop< 32 > * resultptr = new Dsp::Legendre::BandStop< 32 >((const Dsp::Legendre::BandStop< 32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__Legendre__BandStopT_32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandStop_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandStopFilter *arg1 = (Filters::IIR::Legendre::BandStopFilter *) 0 ;
  Filters::BiquadTypeICascade *arg2 = (Filters::BiquadTypeICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandStopFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::biquads",1,"Filters::IIR::Legendre::BandStopFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::biquads",2,"Filters::BiquadTypeICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandStop_biquads_set",1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeICascade,0))){
    SWIG_fail_ptr("IIRLegendreBandStop_biquads_set",2,SWIGTYPE_p_Filters__BiquadTypeICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandStop_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandStopFilter *arg1 = (Filters::IIR::Legendre::BandStopFilter *) 0 ;
  Filters::BiquadTypeICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandStopFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::biquads",1,"Filters::IIR::Legendre::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandStop_biquads_get",1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter);
  }
  
  result = (Filters::BiquadTypeICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandStop_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandStopFilter *arg1 = (Filters::IIR::Legendre::BandStopFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandStopFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::order",1,"Filters::IIR::Legendre::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandStop_order_set",1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandStop_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandStopFilter *arg1 = (Filters::IIR::Legendre::BandStopFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandStopFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::order",1,"Filters::IIR::Legendre::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandStop_order_get",1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandStop_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandStopFilter *arg1 = (Filters::IIR::Legendre::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandStopFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::fc",1,"Filters::IIR::Legendre::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandStop_fc_set",1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandStop_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandStopFilter *arg1 = (Filters::IIR::Legendre::BandStopFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandStopFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::fc",1,"Filters::IIR::Legendre::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandStop_fc_get",1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandStop_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandStopFilter *arg1 = (Filters::IIR::Legendre::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandStopFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::sr",1,"Filters::IIR::Legendre::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandStop_sr_set",1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandStop_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandStopFilter *arg1 = (Filters::IIR::Legendre::BandStopFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandStopFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::sr",1,"Filters::IIR::Legendre::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandStop_sr_get",1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandStop_width_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandStopFilter *arg1 = (Filters::IIR::Legendre::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandStopFilter::width",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::width",1,"Filters::IIR::Legendre::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::width",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandStop_width_set",1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->width = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandStop_width_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandStopFilter *arg1 = (Filters::IIR::Legendre::BandStopFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandStopFilter::width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::width",1,"Filters::IIR::Legendre::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandStop_width_get",1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter);
  }
  
  result = (DspFloatType) ((arg1)->width);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRLegendreBandStop(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::Legendre::BandStopFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandStopFilter::BandStopFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::BandStopFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::BandStopFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::BandStopFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::BandStopFilter",4,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::Legendre::BandStopFilter *)new Filters::IIR::Legendre::BandStopFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandStop_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandStopFilter *arg1 = (Filters::IIR::Legendre::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandStopFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::setCutoff",1,"Filters::IIR::Legendre::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandStop_setCutoff",1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandStop_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandStopFilter *arg1 = (Filters::IIR::Legendre::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandStopFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::setQ",1,"Filters::IIR::Legendre::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandStop_setQ",1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandStop_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandStopFilter *arg1 = (Filters::IIR::Legendre::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandStopFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::Tick",1,"Filters::IIR::Legendre::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandStop_Tick",1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandStop_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandStopFilter *arg1 = (Filters::IIR::Legendre::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandStopFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::Tick",1,"Filters::IIR::Legendre::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandStop_Tick",1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandStop_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandStopFilter *arg1 = (Filters::IIR::Legendre::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandStopFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::Tick",1,"Filters::IIR::Legendre::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandStop_Tick",1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandStop_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::Legendre::BandStopFilter *arg1 = (Filters::IIR::Legendre::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::Legendre::BandStopFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::Tick",1,"Filters::IIR::Legendre::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::Legendre::BandStopFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter,0))){
    SWIG_fail_ptr("IIRLegendreBandStop_Tick",1,SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRLegendreBandStop_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRLegendreBandStop_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRLegendreBandStop_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRLegendreBandStop_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRLegendreBandStop_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRLegendreBandStop_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::Legendre::BandStopFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Legendre::BandStopFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Legendre::BandStopFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::Legendre::BandStopFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRLegendreBandStop(void *obj) {
Filters::IIR::Legendre::BandStopFilter *arg1 = (Filters::IIR::Legendre::BandStopFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRLegendreBandStop(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRLegendreBandStop);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRLegendreBandStop_attributes[] = {
    { "prototype", _wrap_IIRLegendreBandStop_prototype_get, _wrap_IIRLegendreBandStop_prototype_set },
    { "biquads", _wrap_IIRLegendreBandStop_biquads_get, _wrap_IIRLegendreBandStop_biquads_set },
    { "order", _wrap_IIRLegendreBandStop_order_get, _wrap_IIRLegendreBandStop_order_set },
    { "fc", _wrap_IIRLegendreBandStop_fc_get, _wrap_IIRLegendreBandStop_fc_set },
    { "sr", _wrap_IIRLegendreBandStop_sr_get, _wrap_IIRLegendreBandStop_sr_set },
    { "width", _wrap_IIRLegendreBandStop_width_get, _wrap_IIRLegendreBandStop_width_set },
    {0,0,0}
};
static swig_lua_method swig_IIRLegendreBandStop_methods[]= {
    { "setCutoff", _wrap_IIRLegendreBandStop_setCutoff},
    { "setQ", _wrap_IIRLegendreBandStop_setQ},
    { "Tick", _wrap_IIRLegendreBandStop_Tick},
    {0,0}
};
static swig_lua_method swig_IIRLegendreBandStop_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRLegendreBandStop_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRLegendreBandStop_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRLegendreBandStop_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRLegendreBandStop_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRLegendreBandStop_SwigStatic = {
    "IIRLegendreBandStop",
    swig_IIRLegendreBandStop_SwigStatic_methods,
    swig_IIRLegendreBandStop_SwigStatic_attributes,
    swig_IIRLegendreBandStop_SwigStatic_constants,
    swig_IIRLegendreBandStop_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRLegendreBandStop_bases[] = {0,0};
static const char *swig_IIRLegendreBandStop_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRLegendreBandStop = { "IIRLegendreBandStop", "IIRLegendreBandStop", &SWIGTYPE_p_Filters__IIR__Legendre__BandStopFilter,_proxy__wrap_new_IIRLegendreBandStop, swig_delete_IIRLegendreBandStop, swig_IIRLegendreBandStop_methods, swig_IIRLegendreBandStop_attributes, &swig_IIRLegendreBandStop_SwigStatic, swig_IIRLegendreBandStop_meta, swig_IIRLegendreBandStop_bases, swig_IIRLegendreBandStop_base_names };

static int _wrap_IIRRBJLowPass_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowPassFilter *arg1 = (Filters::IIR::RBJ::LowPassFilter *) 0 ;
  Dsp::RBJ::LowPass arg2 ;
  Dsp::RBJ::LowPass *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowPassFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::prototype",1,"Filters::IIR::RBJ::LowPassFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::prototype",2,"Dsp::RBJ::LowPass");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter,0))){
    SWIG_fail_ptr("IIRRBJLowPass_prototype_set",1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__RBJ__LowPass,0))){
    SWIG_fail_ptr("IIRRBJLowPass_prototype_set",2,SWIGTYPE_p_Dsp__RBJ__LowPass);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowPass_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowPassFilter *arg1 = (Filters::IIR::RBJ::LowPassFilter *) 0 ;
  Dsp::RBJ::LowPass result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowPassFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::prototype",1,"Filters::IIR::RBJ::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter,0))){
    SWIG_fail_ptr("IIRRBJLowPass_prototype_get",1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::RBJ::LowPass * resultptr = new Dsp::RBJ::LowPass((const Dsp::RBJ::LowPass &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__RBJ__LowPass,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowPass_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowPassFilter *arg1 = (Filters::IIR::RBJ::LowPassFilter *) 0 ;
  Filters::BiquadTypeICascade *arg2 = (Filters::BiquadTypeICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowPassFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::biquads",1,"Filters::IIR::RBJ::LowPassFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::biquads",2,"Filters::BiquadTypeICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter,0))){
    SWIG_fail_ptr("IIRRBJLowPass_biquads_set",1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeICascade,0))){
    SWIG_fail_ptr("IIRRBJLowPass_biquads_set",2,SWIGTYPE_p_Filters__BiquadTypeICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowPass_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowPassFilter *arg1 = (Filters::IIR::RBJ::LowPassFilter *) 0 ;
  Filters::BiquadTypeICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowPassFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::biquads",1,"Filters::IIR::RBJ::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter,0))){
    SWIG_fail_ptr("IIRRBJLowPass_biquads_get",1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter);
  }
  
  result = (Filters::BiquadTypeICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowPass_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowPassFilter *arg1 = (Filters::IIR::RBJ::LowPassFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowPassFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::order",1,"Filters::IIR::RBJ::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter,0))){
    SWIG_fail_ptr("IIRRBJLowPass_order_set",1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowPass_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowPassFilter *arg1 = (Filters::IIR::RBJ::LowPassFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowPassFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::order",1,"Filters::IIR::RBJ::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter,0))){
    SWIG_fail_ptr("IIRRBJLowPass_order_get",1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowPass_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowPassFilter *arg1 = (Filters::IIR::RBJ::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowPassFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::fc",1,"Filters::IIR::RBJ::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter,0))){
    SWIG_fail_ptr("IIRRBJLowPass_fc_set",1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowPass_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowPassFilter *arg1 = (Filters::IIR::RBJ::LowPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowPassFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::fc",1,"Filters::IIR::RBJ::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter,0))){
    SWIG_fail_ptr("IIRRBJLowPass_fc_get",1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowPass_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowPassFilter *arg1 = (Filters::IIR::RBJ::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowPassFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::sr",1,"Filters::IIR::RBJ::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter,0))){
    SWIG_fail_ptr("IIRRBJLowPass_sr_set",1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowPass_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowPassFilter *arg1 = (Filters::IIR::RBJ::LowPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowPassFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::sr",1,"Filters::IIR::RBJ::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter,0))){
    SWIG_fail_ptr("IIRRBJLowPass_sr_get",1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowPass_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowPassFilter *arg1 = (Filters::IIR::RBJ::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowPassFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::Q",1,"Filters::IIR::RBJ::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter,0))){
    SWIG_fail_ptr("IIRRBJLowPass_Q_set",1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowPass_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowPassFilter *arg1 = (Filters::IIR::RBJ::LowPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowPassFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::Q",1,"Filters::IIR::RBJ::LowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter,0))){
    SWIG_fail_ptr("IIRRBJLowPass_Q_get",1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJLowPass(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::RBJ::LowPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowPassFilter::LowPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::LowPassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::LowPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::LowPassFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::LowPassFilter",4,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::RBJ::LowPassFilter *)new Filters::IIR::RBJ::LowPassFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowPass_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowPassFilter *arg1 = (Filters::IIR::RBJ::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowPassFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::setCutoff",1,"Filters::IIR::RBJ::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter,0))){
    SWIG_fail_ptr("IIRRBJLowPass_setCutoff",1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowPass_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowPassFilter *arg1 = (Filters::IIR::RBJ::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowPassFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::setQ",1,"Filters::IIR::RBJ::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter,0))){
    SWIG_fail_ptr("IIRRBJLowPass_setQ",1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowPass_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowPassFilter *arg1 = (Filters::IIR::RBJ::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowPassFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::Tick",1,"Filters::IIR::RBJ::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter,0))){
    SWIG_fail_ptr("IIRRBJLowPass_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowPass_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowPassFilter *arg1 = (Filters::IIR::RBJ::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowPassFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::Tick",1,"Filters::IIR::RBJ::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter,0))){
    SWIG_fail_ptr("IIRRBJLowPass_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowPass_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowPassFilter *arg1 = (Filters::IIR::RBJ::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowPassFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::Tick",1,"Filters::IIR::RBJ::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter,0))){
    SWIG_fail_ptr("IIRRBJLowPass_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowPass_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowPassFilter *arg1 = (Filters::IIR::RBJ::LowPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowPassFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::Tick",1,"Filters::IIR::RBJ::LowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::LowPassFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter,0))){
    SWIG_fail_ptr("IIRRBJLowPass_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowPass_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRRBJLowPass_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRRBJLowPass_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRRBJLowPass_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRRBJLowPass_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRRBJLowPass_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::RBJ::LowPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJ::LowPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJ::LowPassFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJ::LowPassFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRRBJLowPass(void *obj) {
Filters::IIR::RBJ::LowPassFilter *arg1 = (Filters::IIR::RBJ::LowPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRRBJLowPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRRBJLowPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRRBJLowPass_attributes[] = {
    { "prototype", _wrap_IIRRBJLowPass_prototype_get, _wrap_IIRRBJLowPass_prototype_set },
    { "biquads", _wrap_IIRRBJLowPass_biquads_get, _wrap_IIRRBJLowPass_biquads_set },
    { "order", _wrap_IIRRBJLowPass_order_get, _wrap_IIRRBJLowPass_order_set },
    { "fc", _wrap_IIRRBJLowPass_fc_get, _wrap_IIRRBJLowPass_fc_set },
    { "sr", _wrap_IIRRBJLowPass_sr_get, _wrap_IIRRBJLowPass_sr_set },
    { "Q", _wrap_IIRRBJLowPass_Q_get, _wrap_IIRRBJLowPass_Q_set },
    {0,0,0}
};
static swig_lua_method swig_IIRRBJLowPass_methods[]= {
    { "setCutoff", _wrap_IIRRBJLowPass_setCutoff},
    { "setQ", _wrap_IIRRBJLowPass_setQ},
    { "Tick", _wrap_IIRRBJLowPass_Tick},
    {0,0}
};
static swig_lua_method swig_IIRRBJLowPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRRBJLowPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRRBJLowPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRRBJLowPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRRBJLowPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRRBJLowPass_Sf_SwigStatic = {
    "IIRRBJLowPass",
    swig_IIRRBJLowPass_Sf_SwigStatic_methods,
    swig_IIRRBJLowPass_Sf_SwigStatic_attributes,
    swig_IIRRBJLowPass_Sf_SwigStatic_constants,
    swig_IIRRBJLowPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRRBJLowPass_bases[] = {0,0};
static const char *swig_IIRRBJLowPass_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRRBJLowPass = { "IIRRBJLowPass", "IIRRBJLowPass", &SWIGTYPE_p_Filters__IIR__RBJ__LowPassFilter,_proxy__wrap_new_IIRRBJLowPass, swig_delete_IIRRBJLowPass, swig_IIRRBJLowPass_methods, swig_IIRRBJLowPass_attributes, &swig_IIRRBJLowPass_Sf_SwigStatic, swig_IIRRBJLowPass_meta, swig_IIRRBJLowPass_bases, swig_IIRRBJLowPass_base_names };

static int _wrap_IIRRBJHighPass_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighPassFilter *arg1 = (Filters::IIR::RBJ::HighPassFilter *) 0 ;
  Dsp::RBJ::HighPass arg2 ;
  Dsp::RBJ::HighPass *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighPassFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::prototype",1,"Filters::IIR::RBJ::HighPassFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::prototype",2,"Dsp::RBJ::HighPass");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter,0))){
    SWIG_fail_ptr("IIRRBJHighPass_prototype_set",1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__RBJ__HighPass,0))){
    SWIG_fail_ptr("IIRRBJHighPass_prototype_set",2,SWIGTYPE_p_Dsp__RBJ__HighPass);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighPass_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighPassFilter *arg1 = (Filters::IIR::RBJ::HighPassFilter *) 0 ;
  Dsp::RBJ::HighPass result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighPassFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::prototype",1,"Filters::IIR::RBJ::HighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter,0))){
    SWIG_fail_ptr("IIRRBJHighPass_prototype_get",1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::RBJ::HighPass * resultptr = new Dsp::RBJ::HighPass((const Dsp::RBJ::HighPass &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__RBJ__HighPass,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighPass_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighPassFilter *arg1 = (Filters::IIR::RBJ::HighPassFilter *) 0 ;
  Filters::BiquadTypeICascade *arg2 = (Filters::BiquadTypeICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighPassFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::biquads",1,"Filters::IIR::RBJ::HighPassFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::biquads",2,"Filters::BiquadTypeICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter,0))){
    SWIG_fail_ptr("IIRRBJHighPass_biquads_set",1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeICascade,0))){
    SWIG_fail_ptr("IIRRBJHighPass_biquads_set",2,SWIGTYPE_p_Filters__BiquadTypeICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighPass_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighPassFilter *arg1 = (Filters::IIR::RBJ::HighPassFilter *) 0 ;
  Filters::BiquadTypeICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighPassFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::biquads",1,"Filters::IIR::RBJ::HighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter,0))){
    SWIG_fail_ptr("IIRRBJHighPass_biquads_get",1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter);
  }
  
  result = (Filters::BiquadTypeICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighPass_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighPassFilter *arg1 = (Filters::IIR::RBJ::HighPassFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighPassFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::order",1,"Filters::IIR::RBJ::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter,0))){
    SWIG_fail_ptr("IIRRBJHighPass_order_set",1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighPass_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighPassFilter *arg1 = (Filters::IIR::RBJ::HighPassFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighPassFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::order",1,"Filters::IIR::RBJ::HighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter,0))){
    SWIG_fail_ptr("IIRRBJHighPass_order_get",1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighPass_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighPassFilter *arg1 = (Filters::IIR::RBJ::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighPassFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::fc",1,"Filters::IIR::RBJ::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter,0))){
    SWIG_fail_ptr("IIRRBJHighPass_fc_set",1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighPass_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighPassFilter *arg1 = (Filters::IIR::RBJ::HighPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighPassFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::fc",1,"Filters::IIR::RBJ::HighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter,0))){
    SWIG_fail_ptr("IIRRBJHighPass_fc_get",1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighPass_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighPassFilter *arg1 = (Filters::IIR::RBJ::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighPassFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::sr",1,"Filters::IIR::RBJ::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter,0))){
    SWIG_fail_ptr("IIRRBJHighPass_sr_set",1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighPass_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighPassFilter *arg1 = (Filters::IIR::RBJ::HighPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighPassFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::sr",1,"Filters::IIR::RBJ::HighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter,0))){
    SWIG_fail_ptr("IIRRBJHighPass_sr_get",1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighPass_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighPassFilter *arg1 = (Filters::IIR::RBJ::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighPassFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::Q",1,"Filters::IIR::RBJ::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter,0))){
    SWIG_fail_ptr("IIRRBJHighPass_Q_set",1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighPass_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighPassFilter *arg1 = (Filters::IIR::RBJ::HighPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighPassFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::Q",1,"Filters::IIR::RBJ::HighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter,0))){
    SWIG_fail_ptr("IIRRBJHighPass_Q_get",1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJHighPass(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::RBJ::HighPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighPassFilter::HighPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::HighPassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::HighPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::HighPassFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::HighPassFilter",4,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::RBJ::HighPassFilter *)new Filters::IIR::RBJ::HighPassFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighPass_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighPassFilter *arg1 = (Filters::IIR::RBJ::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighPassFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::setCutoff",1,"Filters::IIR::RBJ::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter,0))){
    SWIG_fail_ptr("IIRRBJHighPass_setCutoff",1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighPass_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighPassFilter *arg1 = (Filters::IIR::RBJ::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighPassFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::setQ",1,"Filters::IIR::RBJ::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter,0))){
    SWIG_fail_ptr("IIRRBJHighPass_setQ",1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighPass_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighPassFilter *arg1 = (Filters::IIR::RBJ::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighPassFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::Tick",1,"Filters::IIR::RBJ::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter,0))){
    SWIG_fail_ptr("IIRRBJHighPass_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighPass_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighPassFilter *arg1 = (Filters::IIR::RBJ::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighPassFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::Tick",1,"Filters::IIR::RBJ::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter,0))){
    SWIG_fail_ptr("IIRRBJHighPass_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighPass_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighPassFilter *arg1 = (Filters::IIR::RBJ::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighPassFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::Tick",1,"Filters::IIR::RBJ::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter,0))){
    SWIG_fail_ptr("IIRRBJHighPass_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighPass_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighPassFilter *arg1 = (Filters::IIR::RBJ::HighPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighPassFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::Tick",1,"Filters::IIR::RBJ::HighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::HighPassFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter,0))){
    SWIG_fail_ptr("IIRRBJHighPass_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighPass_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRRBJHighPass_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRRBJHighPass_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRRBJHighPass_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRRBJHighPass_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRRBJHighPass_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::RBJ::HighPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJ::HighPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJ::HighPassFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJ::HighPassFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRRBJHighPass(void *obj) {
Filters::IIR::RBJ::HighPassFilter *arg1 = (Filters::IIR::RBJ::HighPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRRBJHighPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRRBJHighPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRRBJHighPass_attributes[] = {
    { "prototype", _wrap_IIRRBJHighPass_prototype_get, _wrap_IIRRBJHighPass_prototype_set },
    { "biquads", _wrap_IIRRBJHighPass_biquads_get, _wrap_IIRRBJHighPass_biquads_set },
    { "order", _wrap_IIRRBJHighPass_order_get, _wrap_IIRRBJHighPass_order_set },
    { "fc", _wrap_IIRRBJHighPass_fc_get, _wrap_IIRRBJHighPass_fc_set },
    { "sr", _wrap_IIRRBJHighPass_sr_get, _wrap_IIRRBJHighPass_sr_set },
    { "Q", _wrap_IIRRBJHighPass_Q_get, _wrap_IIRRBJHighPass_Q_set },
    {0,0,0}
};
static swig_lua_method swig_IIRRBJHighPass_methods[]= {
    { "setCutoff", _wrap_IIRRBJHighPass_setCutoff},
    { "setQ", _wrap_IIRRBJHighPass_setQ},
    { "Tick", _wrap_IIRRBJHighPass_Tick},
    {0,0}
};
static swig_lua_method swig_IIRRBJHighPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRRBJHighPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRRBJHighPass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRRBJHighPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRRBJHighPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRRBJHighPass_Sf_SwigStatic = {
    "IIRRBJHighPass",
    swig_IIRRBJHighPass_Sf_SwigStatic_methods,
    swig_IIRRBJHighPass_Sf_SwigStatic_attributes,
    swig_IIRRBJHighPass_Sf_SwigStatic_constants,
    swig_IIRRBJHighPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRRBJHighPass_bases[] = {0,0};
static const char *swig_IIRRBJHighPass_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRRBJHighPass = { "IIRRBJHighPass", "IIRRBJHighPass", &SWIGTYPE_p_Filters__IIR__RBJ__HighPassFilter,_proxy__wrap_new_IIRRBJHighPass, swig_delete_IIRRBJHighPass, swig_IIRRBJHighPass_methods, swig_IIRRBJHighPass_attributes, &swig_IIRRBJHighPass_Sf_SwigStatic, swig_IIRRBJHighPass_meta, swig_IIRRBJHighPass_bases, swig_IIRRBJHighPass_base_names };

static int _wrap_AllPassFilter_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::AllPassFilter *arg1 = (Filters::IIR::RBJ::AllPassFilter *) 0 ;
  Dsp::RBJ::AllPass arg2 ;
  Dsp::RBJ::AllPass *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::AllPassFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::prototype",1,"Filters::IIR::RBJ::AllPassFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::prototype",2,"Dsp::RBJ::AllPass");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter,0))){
    SWIG_fail_ptr("AllPassFilter_prototype_set",1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__RBJ__AllPass,0))){
    SWIG_fail_ptr("AllPassFilter_prototype_set",2,SWIGTYPE_p_Dsp__RBJ__AllPass);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AllPassFilter_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::AllPassFilter *arg1 = (Filters::IIR::RBJ::AllPassFilter *) 0 ;
  Dsp::RBJ::AllPass result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::AllPassFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::prototype",1,"Filters::IIR::RBJ::AllPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter,0))){
    SWIG_fail_ptr("AllPassFilter_prototype_get",1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::RBJ::AllPass * resultptr = new Dsp::RBJ::AllPass((const Dsp::RBJ::AllPass &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__RBJ__AllPass,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AllPassFilter_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::AllPassFilter *arg1 = (Filters::IIR::RBJ::AllPassFilter *) 0 ;
  Filters::BiquadTypeICascade *arg2 = (Filters::BiquadTypeICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::AllPassFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::biquads",1,"Filters::IIR::RBJ::AllPassFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::biquads",2,"Filters::BiquadTypeICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter,0))){
    SWIG_fail_ptr("AllPassFilter_biquads_set",1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeICascade,0))){
    SWIG_fail_ptr("AllPassFilter_biquads_set",2,SWIGTYPE_p_Filters__BiquadTypeICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AllPassFilter_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::AllPassFilter *arg1 = (Filters::IIR::RBJ::AllPassFilter *) 0 ;
  Filters::BiquadTypeICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::AllPassFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::biquads",1,"Filters::IIR::RBJ::AllPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter,0))){
    SWIG_fail_ptr("AllPassFilter_biquads_get",1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter);
  }
  
  result = (Filters::BiquadTypeICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AllPassFilter_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::AllPassFilter *arg1 = (Filters::IIR::RBJ::AllPassFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::AllPassFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::order",1,"Filters::IIR::RBJ::AllPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter,0))){
    SWIG_fail_ptr("AllPassFilter_order_set",1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AllPassFilter_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::AllPassFilter *arg1 = (Filters::IIR::RBJ::AllPassFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::AllPassFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::order",1,"Filters::IIR::RBJ::AllPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter,0))){
    SWIG_fail_ptr("AllPassFilter_order_get",1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AllPassFilter_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::AllPassFilter *arg1 = (Filters::IIR::RBJ::AllPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::AllPassFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::fc",1,"Filters::IIR::RBJ::AllPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter,0))){
    SWIG_fail_ptr("AllPassFilter_fc_set",1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AllPassFilter_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::AllPassFilter *arg1 = (Filters::IIR::RBJ::AllPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::AllPassFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::fc",1,"Filters::IIR::RBJ::AllPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter,0))){
    SWIG_fail_ptr("AllPassFilter_fc_get",1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AllPassFilter_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::AllPassFilter *arg1 = (Filters::IIR::RBJ::AllPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::AllPassFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::sr",1,"Filters::IIR::RBJ::AllPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter,0))){
    SWIG_fail_ptr("AllPassFilter_sr_set",1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AllPassFilter_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::AllPassFilter *arg1 = (Filters::IIR::RBJ::AllPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::AllPassFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::sr",1,"Filters::IIR::RBJ::AllPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter,0))){
    SWIG_fail_ptr("AllPassFilter_sr_get",1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AllPassFilter_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::AllPassFilter *arg1 = (Filters::IIR::RBJ::AllPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::AllPassFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::Q",1,"Filters::IIR::RBJ::AllPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter,0))){
    SWIG_fail_ptr("AllPassFilter_Q_set",1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AllPassFilter_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::AllPassFilter *arg1 = (Filters::IIR::RBJ::AllPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::AllPassFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::Q",1,"Filters::IIR::RBJ::AllPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter,0))){
    SWIG_fail_ptr("AllPassFilter_Q_get",1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AllPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::RBJ::AllPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::AllPassFilter::AllPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::AllPassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::AllPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::AllPassFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::AllPassFilter",4,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::RBJ::AllPassFilter *)new Filters::IIR::RBJ::AllPassFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AllPassFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::AllPassFilter *arg1 = (Filters::IIR::RBJ::AllPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::AllPassFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::setCutoff",1,"Filters::IIR::RBJ::AllPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter,0))){
    SWIG_fail_ptr("AllPassFilter_setCutoff",1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AllPassFilter_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::AllPassFilter *arg1 = (Filters::IIR::RBJ::AllPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::AllPassFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::setQ",1,"Filters::IIR::RBJ::AllPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter,0))){
    SWIG_fail_ptr("AllPassFilter_setQ",1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AllPassFilter_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::AllPassFilter *arg1 = (Filters::IIR::RBJ::AllPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::AllPassFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::Tick",1,"Filters::IIR::RBJ::AllPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter,0))){
    SWIG_fail_ptr("AllPassFilter_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AllPassFilter_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::AllPassFilter *arg1 = (Filters::IIR::RBJ::AllPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::AllPassFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::Tick",1,"Filters::IIR::RBJ::AllPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter,0))){
    SWIG_fail_ptr("AllPassFilter_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AllPassFilter_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::AllPassFilter *arg1 = (Filters::IIR::RBJ::AllPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::AllPassFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::Tick",1,"Filters::IIR::RBJ::AllPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter,0))){
    SWIG_fail_ptr("AllPassFilter_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AllPassFilter_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::AllPassFilter *arg1 = (Filters::IIR::RBJ::AllPassFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::AllPassFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::Tick",1,"Filters::IIR::RBJ::AllPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::AllPassFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter,0))){
    SWIG_fail_ptr("AllPassFilter_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AllPassFilter_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AllPassFilter_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AllPassFilter_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AllPassFilter_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_AllPassFilter_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AllPassFilter_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::RBJ::AllPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJ::AllPassFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJ::AllPassFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJ::AllPassFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_AllPassFilter(void *obj) {
Filters::IIR::RBJ::AllPassFilter *arg1 = (Filters::IIR::RBJ::AllPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_AllPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AllPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AllPassFilter_attributes[] = {
    { "prototype", _wrap_AllPassFilter_prototype_get, _wrap_AllPassFilter_prototype_set },
    { "biquads", _wrap_AllPassFilter_biquads_get, _wrap_AllPassFilter_biquads_set },
    { "order", _wrap_AllPassFilter_order_get, _wrap_AllPassFilter_order_set },
    { "fc", _wrap_AllPassFilter_fc_get, _wrap_AllPassFilter_fc_set },
    { "sr", _wrap_AllPassFilter_sr_get, _wrap_AllPassFilter_sr_set },
    { "Q", _wrap_AllPassFilter_Q_get, _wrap_AllPassFilter_Q_set },
    {0,0,0}
};
static swig_lua_method swig_AllPassFilter_methods[]= {
    { "setCutoff", _wrap_AllPassFilter_setCutoff},
    { "setQ", _wrap_AllPassFilter_setQ},
    { "Tick", _wrap_AllPassFilter_Tick},
    {0,0}
};
static swig_lua_method swig_AllPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AllPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AllPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AllPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AllPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AllPassFilter_Sf_SwigStatic = {
    "AllPassFilter",
    swig_AllPassFilter_Sf_SwigStatic_methods,
    swig_AllPassFilter_Sf_SwigStatic_attributes,
    swig_AllPassFilter_Sf_SwigStatic_constants,
    swig_AllPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AllPassFilter_bases[] = {0,0};
static const char *swig_AllPassFilter_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_AllPassFilter = { "AllPassFilter", "AllPassFilter", &SWIGTYPE_p_Filters__IIR__RBJ__AllPassFilter,_proxy__wrap_new_AllPassFilter, swig_delete_AllPassFilter, swig_AllPassFilter_methods, swig_AllPassFilter_attributes, &swig_AllPassFilter_Sf_SwigStatic, swig_AllPassFilter_meta, swig_AllPassFilter_bases, swig_AllPassFilter_base_names };

static int _wrap_BandPass1Filter_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass1Filter *arg1 = (Filters::IIR::RBJ::BandPass1Filter *) 0 ;
  Dsp::RBJ::BandPass1 arg2 ;
  Dsp::RBJ::BandPass1 *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass1Filter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::prototype",1,"Filters::IIR::RBJ::BandPass1Filter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::prototype",2,"Dsp::RBJ::BandPass1");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter,0))){
    SWIG_fail_ptr("BandPass1Filter_prototype_set",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__RBJ__BandPass1,0))){
    SWIG_fail_ptr("BandPass1Filter_prototype_set",2,SWIGTYPE_p_Dsp__RBJ__BandPass1);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass1Filter_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass1Filter *arg1 = (Filters::IIR::RBJ::BandPass1Filter *) 0 ;
  Dsp::RBJ::BandPass1 result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass1Filter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::prototype",1,"Filters::IIR::RBJ::BandPass1Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter,0))){
    SWIG_fail_ptr("BandPass1Filter_prototype_get",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::RBJ::BandPass1 * resultptr = new Dsp::RBJ::BandPass1((const Dsp::RBJ::BandPass1 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__RBJ__BandPass1,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass1Filter_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass1Filter *arg1 = (Filters::IIR::RBJ::BandPass1Filter *) 0 ;
  Filters::BiquadTypeICascade *arg2 = (Filters::BiquadTypeICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass1Filter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::biquads",1,"Filters::IIR::RBJ::BandPass1Filter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::biquads",2,"Filters::BiquadTypeICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter,0))){
    SWIG_fail_ptr("BandPass1Filter_biquads_set",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeICascade,0))){
    SWIG_fail_ptr("BandPass1Filter_biquads_set",2,SWIGTYPE_p_Filters__BiquadTypeICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass1Filter_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass1Filter *arg1 = (Filters::IIR::RBJ::BandPass1Filter *) 0 ;
  Filters::BiquadTypeICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass1Filter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::biquads",1,"Filters::IIR::RBJ::BandPass1Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter,0))){
    SWIG_fail_ptr("BandPass1Filter_biquads_get",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter);
  }
  
  result = (Filters::BiquadTypeICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass1Filter_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass1Filter *arg1 = (Filters::IIR::RBJ::BandPass1Filter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass1Filter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::order",1,"Filters::IIR::RBJ::BandPass1Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter,0))){
    SWIG_fail_ptr("BandPass1Filter_order_set",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass1Filter_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass1Filter *arg1 = (Filters::IIR::RBJ::BandPass1Filter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass1Filter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::order",1,"Filters::IIR::RBJ::BandPass1Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter,0))){
    SWIG_fail_ptr("BandPass1Filter_order_get",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass1Filter_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass1Filter *arg1 = (Filters::IIR::RBJ::BandPass1Filter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass1Filter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::fc",1,"Filters::IIR::RBJ::BandPass1Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter,0))){
    SWIG_fail_ptr("BandPass1Filter_fc_set",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass1Filter_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass1Filter *arg1 = (Filters::IIR::RBJ::BandPass1Filter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass1Filter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::fc",1,"Filters::IIR::RBJ::BandPass1Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter,0))){
    SWIG_fail_ptr("BandPass1Filter_fc_get",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass1Filter_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass1Filter *arg1 = (Filters::IIR::RBJ::BandPass1Filter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass1Filter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::sr",1,"Filters::IIR::RBJ::BandPass1Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter,0))){
    SWIG_fail_ptr("BandPass1Filter_sr_set",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass1Filter_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass1Filter *arg1 = (Filters::IIR::RBJ::BandPass1Filter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass1Filter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::sr",1,"Filters::IIR::RBJ::BandPass1Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter,0))){
    SWIG_fail_ptr("BandPass1Filter_sr_get",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass1Filter_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass1Filter *arg1 = (Filters::IIR::RBJ::BandPass1Filter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass1Filter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::Q",1,"Filters::IIR::RBJ::BandPass1Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter,0))){
    SWIG_fail_ptr("BandPass1Filter_Q_set",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass1Filter_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass1Filter *arg1 = (Filters::IIR::RBJ::BandPass1Filter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass1Filter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::Q",1,"Filters::IIR::RBJ::BandPass1Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter,0))){
    SWIG_fail_ptr("BandPass1Filter_Q_get",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BandPass1Filter(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::RBJ::BandPass1Filter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass1Filter::BandPass1Filter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::BandPass1Filter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::BandPass1Filter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::BandPass1Filter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::BandPass1Filter",4,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::RBJ::BandPass1Filter *)new Filters::IIR::RBJ::BandPass1Filter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass1Filter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass1Filter *arg1 = (Filters::IIR::RBJ::BandPass1Filter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass1Filter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::setCutoff",1,"Filters::IIR::RBJ::BandPass1Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter,0))){
    SWIG_fail_ptr("BandPass1Filter_setCutoff",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass1Filter_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass1Filter *arg1 = (Filters::IIR::RBJ::BandPass1Filter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass1Filter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::setQ",1,"Filters::IIR::RBJ::BandPass1Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter,0))){
    SWIG_fail_ptr("BandPass1Filter_setQ",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass1Filter_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass1Filter *arg1 = (Filters::IIR::RBJ::BandPass1Filter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass1Filter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::Tick",1,"Filters::IIR::RBJ::BandPass1Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter,0))){
    SWIG_fail_ptr("BandPass1Filter_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass1Filter_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass1Filter *arg1 = (Filters::IIR::RBJ::BandPass1Filter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass1Filter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::Tick",1,"Filters::IIR::RBJ::BandPass1Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter,0))){
    SWIG_fail_ptr("BandPass1Filter_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass1Filter_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass1Filter *arg1 = (Filters::IIR::RBJ::BandPass1Filter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass1Filter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::Tick",1,"Filters::IIR::RBJ::BandPass1Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter,0))){
    SWIG_fail_ptr("BandPass1Filter_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass1Filter_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass1Filter *arg1 = (Filters::IIR::RBJ::BandPass1Filter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass1Filter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::Tick",1,"Filters::IIR::RBJ::BandPass1Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass1Filter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter,0))){
    SWIG_fail_ptr("BandPass1Filter_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass1Filter_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BandPass1Filter_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BandPass1Filter_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_BandPass1Filter_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_BandPass1Filter_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BandPass1Filter_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::RBJ::BandPass1Filter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJ::BandPass1Filter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJ::BandPass1Filter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJ::BandPass1Filter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_BandPass1Filter(void *obj) {
Filters::IIR::RBJ::BandPass1Filter *arg1 = (Filters::IIR::RBJ::BandPass1Filter *) obj;
delete arg1;
}
static int _proxy__wrap_new_BandPass1Filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BandPass1Filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BandPass1Filter_attributes[] = {
    { "prototype", _wrap_BandPass1Filter_prototype_get, _wrap_BandPass1Filter_prototype_set },
    { "biquads", _wrap_BandPass1Filter_biquads_get, _wrap_BandPass1Filter_biquads_set },
    { "order", _wrap_BandPass1Filter_order_get, _wrap_BandPass1Filter_order_set },
    { "fc", _wrap_BandPass1Filter_fc_get, _wrap_BandPass1Filter_fc_set },
    { "sr", _wrap_BandPass1Filter_sr_get, _wrap_BandPass1Filter_sr_set },
    { "Q", _wrap_BandPass1Filter_Q_get, _wrap_BandPass1Filter_Q_set },
    {0,0,0}
};
static swig_lua_method swig_BandPass1Filter_methods[]= {
    { "setCutoff", _wrap_BandPass1Filter_setCutoff},
    { "setQ", _wrap_BandPass1Filter_setQ},
    { "Tick", _wrap_BandPass1Filter_Tick},
    {0,0}
};
static swig_lua_method swig_BandPass1Filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BandPass1Filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BandPass1Filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BandPass1Filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BandPass1Filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BandPass1Filter_Sf_SwigStatic = {
    "BandPass1Filter",
    swig_BandPass1Filter_Sf_SwigStatic_methods,
    swig_BandPass1Filter_Sf_SwigStatic_attributes,
    swig_BandPass1Filter_Sf_SwigStatic_constants,
    swig_BandPass1Filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BandPass1Filter_bases[] = {0,0};
static const char *swig_BandPass1Filter_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_BandPass1Filter = { "BandPass1Filter", "BandPass1Filter", &SWIGTYPE_p_Filters__IIR__RBJ__BandPass1Filter,_proxy__wrap_new_BandPass1Filter, swig_delete_BandPass1Filter, swig_BandPass1Filter_methods, swig_BandPass1Filter_attributes, &swig_BandPass1Filter_Sf_SwigStatic, swig_BandPass1Filter_meta, swig_BandPass1Filter_bases, swig_BandPass1Filter_base_names };

static int _wrap_BandPass2Filter_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass2Filter *arg1 = (Filters::IIR::RBJ::BandPass2Filter *) 0 ;
  Dsp::RBJ::BandPass2 arg2 ;
  Dsp::RBJ::BandPass2 *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass2Filter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::prototype",1,"Filters::IIR::RBJ::BandPass2Filter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::prototype",2,"Dsp::RBJ::BandPass2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter,0))){
    SWIG_fail_ptr("BandPass2Filter_prototype_set",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__RBJ__BandPass2,0))){
    SWIG_fail_ptr("BandPass2Filter_prototype_set",2,SWIGTYPE_p_Dsp__RBJ__BandPass2);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass2Filter_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass2Filter *arg1 = (Filters::IIR::RBJ::BandPass2Filter *) 0 ;
  Dsp::RBJ::BandPass2 result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass2Filter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::prototype",1,"Filters::IIR::RBJ::BandPass2Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter,0))){
    SWIG_fail_ptr("BandPass2Filter_prototype_get",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::RBJ::BandPass2 * resultptr = new Dsp::RBJ::BandPass2((const Dsp::RBJ::BandPass2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__RBJ__BandPass2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass2Filter_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass2Filter *arg1 = (Filters::IIR::RBJ::BandPass2Filter *) 0 ;
  Filters::BiquadTypeICascade *arg2 = (Filters::BiquadTypeICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass2Filter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::biquads",1,"Filters::IIR::RBJ::BandPass2Filter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::biquads",2,"Filters::BiquadTypeICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter,0))){
    SWIG_fail_ptr("BandPass2Filter_biquads_set",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeICascade,0))){
    SWIG_fail_ptr("BandPass2Filter_biquads_set",2,SWIGTYPE_p_Filters__BiquadTypeICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass2Filter_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass2Filter *arg1 = (Filters::IIR::RBJ::BandPass2Filter *) 0 ;
  Filters::BiquadTypeICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass2Filter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::biquads",1,"Filters::IIR::RBJ::BandPass2Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter,0))){
    SWIG_fail_ptr("BandPass2Filter_biquads_get",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter);
  }
  
  result = (Filters::BiquadTypeICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass2Filter_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass2Filter *arg1 = (Filters::IIR::RBJ::BandPass2Filter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass2Filter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::order",1,"Filters::IIR::RBJ::BandPass2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter,0))){
    SWIG_fail_ptr("BandPass2Filter_order_set",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass2Filter_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass2Filter *arg1 = (Filters::IIR::RBJ::BandPass2Filter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass2Filter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::order",1,"Filters::IIR::RBJ::BandPass2Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter,0))){
    SWIG_fail_ptr("BandPass2Filter_order_get",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass2Filter_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass2Filter *arg1 = (Filters::IIR::RBJ::BandPass2Filter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass2Filter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::fc",1,"Filters::IIR::RBJ::BandPass2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter,0))){
    SWIG_fail_ptr("BandPass2Filter_fc_set",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass2Filter_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass2Filter *arg1 = (Filters::IIR::RBJ::BandPass2Filter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass2Filter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::fc",1,"Filters::IIR::RBJ::BandPass2Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter,0))){
    SWIG_fail_ptr("BandPass2Filter_fc_get",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass2Filter_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass2Filter *arg1 = (Filters::IIR::RBJ::BandPass2Filter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass2Filter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::sr",1,"Filters::IIR::RBJ::BandPass2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter,0))){
    SWIG_fail_ptr("BandPass2Filter_sr_set",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass2Filter_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass2Filter *arg1 = (Filters::IIR::RBJ::BandPass2Filter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass2Filter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::sr",1,"Filters::IIR::RBJ::BandPass2Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter,0))){
    SWIG_fail_ptr("BandPass2Filter_sr_get",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass2Filter_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass2Filter *arg1 = (Filters::IIR::RBJ::BandPass2Filter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass2Filter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::Q",1,"Filters::IIR::RBJ::BandPass2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter,0))){
    SWIG_fail_ptr("BandPass2Filter_Q_set",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass2Filter_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass2Filter *arg1 = (Filters::IIR::RBJ::BandPass2Filter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass2Filter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::Q",1,"Filters::IIR::RBJ::BandPass2Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter,0))){
    SWIG_fail_ptr("BandPass2Filter_Q_get",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BandPass2Filter(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::RBJ::BandPass2Filter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass2Filter::BandPass2Filter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::BandPass2Filter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::BandPass2Filter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::BandPass2Filter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::BandPass2Filter",4,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::RBJ::BandPass2Filter *)new Filters::IIR::RBJ::BandPass2Filter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass2Filter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass2Filter *arg1 = (Filters::IIR::RBJ::BandPass2Filter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass2Filter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::setCutoff",1,"Filters::IIR::RBJ::BandPass2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter,0))){
    SWIG_fail_ptr("BandPass2Filter_setCutoff",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass2Filter_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass2Filter *arg1 = (Filters::IIR::RBJ::BandPass2Filter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass2Filter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::setQ",1,"Filters::IIR::RBJ::BandPass2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter,0))){
    SWIG_fail_ptr("BandPass2Filter_setQ",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass2Filter_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass2Filter *arg1 = (Filters::IIR::RBJ::BandPass2Filter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass2Filter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::Tick",1,"Filters::IIR::RBJ::BandPass2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter,0))){
    SWIG_fail_ptr("BandPass2Filter_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass2Filter_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass2Filter *arg1 = (Filters::IIR::RBJ::BandPass2Filter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass2Filter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::Tick",1,"Filters::IIR::RBJ::BandPass2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter,0))){
    SWIG_fail_ptr("BandPass2Filter_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass2Filter_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass2Filter *arg1 = (Filters::IIR::RBJ::BandPass2Filter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass2Filter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::Tick",1,"Filters::IIR::RBJ::BandPass2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter,0))){
    SWIG_fail_ptr("BandPass2Filter_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass2Filter_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandPass2Filter *arg1 = (Filters::IIR::RBJ::BandPass2Filter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandPass2Filter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::Tick",1,"Filters::IIR::RBJ::BandPass2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandPass2Filter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter,0))){
    SWIG_fail_ptr("BandPass2Filter_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandPass2Filter_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BandPass2Filter_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BandPass2Filter_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_BandPass2Filter_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_BandPass2Filter_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BandPass2Filter_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::RBJ::BandPass2Filter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJ::BandPass2Filter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJ::BandPass2Filter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJ::BandPass2Filter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_BandPass2Filter(void *obj) {
Filters::IIR::RBJ::BandPass2Filter *arg1 = (Filters::IIR::RBJ::BandPass2Filter *) obj;
delete arg1;
}
static int _proxy__wrap_new_BandPass2Filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BandPass2Filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BandPass2Filter_attributes[] = {
    { "prototype", _wrap_BandPass2Filter_prototype_get, _wrap_BandPass2Filter_prototype_set },
    { "biquads", _wrap_BandPass2Filter_biquads_get, _wrap_BandPass2Filter_biquads_set },
    { "order", _wrap_BandPass2Filter_order_get, _wrap_BandPass2Filter_order_set },
    { "fc", _wrap_BandPass2Filter_fc_get, _wrap_BandPass2Filter_fc_set },
    { "sr", _wrap_BandPass2Filter_sr_get, _wrap_BandPass2Filter_sr_set },
    { "Q", _wrap_BandPass2Filter_Q_get, _wrap_BandPass2Filter_Q_set },
    {0,0,0}
};
static swig_lua_method swig_BandPass2Filter_methods[]= {
    { "setCutoff", _wrap_BandPass2Filter_setCutoff},
    { "setQ", _wrap_BandPass2Filter_setQ},
    { "Tick", _wrap_BandPass2Filter_Tick},
    {0,0}
};
static swig_lua_method swig_BandPass2Filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BandPass2Filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BandPass2Filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BandPass2Filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BandPass2Filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BandPass2Filter_Sf_SwigStatic = {
    "BandPass2Filter",
    swig_BandPass2Filter_Sf_SwigStatic_methods,
    swig_BandPass2Filter_Sf_SwigStatic_attributes,
    swig_BandPass2Filter_Sf_SwigStatic_constants,
    swig_BandPass2Filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BandPass2Filter_bases[] = {0,0};
static const char *swig_BandPass2Filter_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_BandPass2Filter = { "BandPass2Filter", "BandPass2Filter", &SWIGTYPE_p_Filters__IIR__RBJ__BandPass2Filter,_proxy__wrap_new_BandPass2Filter, swig_delete_BandPass2Filter, swig_BandPass2Filter_methods, swig_BandPass2Filter_attributes, &swig_BandPass2Filter_Sf_SwigStatic, swig_BandPass2Filter_meta, swig_BandPass2Filter_bases, swig_BandPass2Filter_base_names };

static int _wrap_IIRRBJBandStop_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandStopFilter *arg1 = (Filters::IIR::RBJ::BandStopFilter *) 0 ;
  Dsp::RBJ::BandStop arg2 ;
  Dsp::RBJ::BandStop *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandStopFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::prototype",1,"Filters::IIR::RBJ::BandStopFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::prototype",2,"Dsp::RBJ::BandStop");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter,0))){
    SWIG_fail_ptr("IIRRBJBandStop_prototype_set",1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__RBJ__BandStop,0))){
    SWIG_fail_ptr("IIRRBJBandStop_prototype_set",2,SWIGTYPE_p_Dsp__RBJ__BandStop);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandStop_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandStopFilter *arg1 = (Filters::IIR::RBJ::BandStopFilter *) 0 ;
  Dsp::RBJ::BandStop result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandStopFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::prototype",1,"Filters::IIR::RBJ::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter,0))){
    SWIG_fail_ptr("IIRRBJBandStop_prototype_get",1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::RBJ::BandStop * resultptr = new Dsp::RBJ::BandStop((const Dsp::RBJ::BandStop &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__RBJ__BandStop,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandStop_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandStopFilter *arg1 = (Filters::IIR::RBJ::BandStopFilter *) 0 ;
  Filters::BiquadTypeICascade *arg2 = (Filters::BiquadTypeICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandStopFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::biquads",1,"Filters::IIR::RBJ::BandStopFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::biquads",2,"Filters::BiquadTypeICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter,0))){
    SWIG_fail_ptr("IIRRBJBandStop_biquads_set",1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeICascade,0))){
    SWIG_fail_ptr("IIRRBJBandStop_biquads_set",2,SWIGTYPE_p_Filters__BiquadTypeICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandStop_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandStopFilter *arg1 = (Filters::IIR::RBJ::BandStopFilter *) 0 ;
  Filters::BiquadTypeICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandStopFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::biquads",1,"Filters::IIR::RBJ::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter,0))){
    SWIG_fail_ptr("IIRRBJBandStop_biquads_get",1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter);
  }
  
  result = (Filters::BiquadTypeICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandStop_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandStopFilter *arg1 = (Filters::IIR::RBJ::BandStopFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandStopFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::order",1,"Filters::IIR::RBJ::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter,0))){
    SWIG_fail_ptr("IIRRBJBandStop_order_set",1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandStop_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandStopFilter *arg1 = (Filters::IIR::RBJ::BandStopFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandStopFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::order",1,"Filters::IIR::RBJ::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter,0))){
    SWIG_fail_ptr("IIRRBJBandStop_order_get",1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandStop_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandStopFilter *arg1 = (Filters::IIR::RBJ::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandStopFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::fc",1,"Filters::IIR::RBJ::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter,0))){
    SWIG_fail_ptr("IIRRBJBandStop_fc_set",1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandStop_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandStopFilter *arg1 = (Filters::IIR::RBJ::BandStopFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandStopFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::fc",1,"Filters::IIR::RBJ::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter,0))){
    SWIG_fail_ptr("IIRRBJBandStop_fc_get",1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandStop_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandStopFilter *arg1 = (Filters::IIR::RBJ::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandStopFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::sr",1,"Filters::IIR::RBJ::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter,0))){
    SWIG_fail_ptr("IIRRBJBandStop_sr_set",1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandStop_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandStopFilter *arg1 = (Filters::IIR::RBJ::BandStopFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandStopFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::sr",1,"Filters::IIR::RBJ::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter,0))){
    SWIG_fail_ptr("IIRRBJBandStop_sr_get",1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandStop_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandStopFilter *arg1 = (Filters::IIR::RBJ::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandStopFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::Q",1,"Filters::IIR::RBJ::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter,0))){
    SWIG_fail_ptr("IIRRBJBandStop_Q_set",1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandStop_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandStopFilter *arg1 = (Filters::IIR::RBJ::BandStopFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandStopFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::Q",1,"Filters::IIR::RBJ::BandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter,0))){
    SWIG_fail_ptr("IIRRBJBandStop_Q_get",1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJBandStop(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::RBJ::BandStopFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandStopFilter::BandStopFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::BandStopFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::BandStopFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::BandStopFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::BandStopFilter",4,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::RBJ::BandStopFilter *)new Filters::IIR::RBJ::BandStopFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandStop_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandStopFilter *arg1 = (Filters::IIR::RBJ::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandStopFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::setCutoff",1,"Filters::IIR::RBJ::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter,0))){
    SWIG_fail_ptr("IIRRBJBandStop_setCutoff",1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandStop_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandStopFilter *arg1 = (Filters::IIR::RBJ::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandStopFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::setQ",1,"Filters::IIR::RBJ::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter,0))){
    SWIG_fail_ptr("IIRRBJBandStop_setQ",1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandStop_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandStopFilter *arg1 = (Filters::IIR::RBJ::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandStopFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::Tick",1,"Filters::IIR::RBJ::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter,0))){
    SWIG_fail_ptr("IIRRBJBandStop_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandStop_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandStopFilter *arg1 = (Filters::IIR::RBJ::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandStopFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::Tick",1,"Filters::IIR::RBJ::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter,0))){
    SWIG_fail_ptr("IIRRBJBandStop_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandStop_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandStopFilter *arg1 = (Filters::IIR::RBJ::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandStopFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::Tick",1,"Filters::IIR::RBJ::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter,0))){
    SWIG_fail_ptr("IIRRBJBandStop_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandStop_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandStopFilter *arg1 = (Filters::IIR::RBJ::BandStopFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandStopFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::Tick",1,"Filters::IIR::RBJ::BandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandStopFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter,0))){
    SWIG_fail_ptr("IIRRBJBandStop_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandStop_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRRBJBandStop_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRRBJBandStop_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRRBJBandStop_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRRBJBandStop_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRRBJBandStop_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::RBJ::BandStopFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJ::BandStopFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJ::BandStopFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJ::BandStopFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRRBJBandStop(void *obj) {
Filters::IIR::RBJ::BandStopFilter *arg1 = (Filters::IIR::RBJ::BandStopFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRRBJBandStop(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRRBJBandStop);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRRBJBandStop_attributes[] = {
    { "prototype", _wrap_IIRRBJBandStop_prototype_get, _wrap_IIRRBJBandStop_prototype_set },
    { "biquads", _wrap_IIRRBJBandStop_biquads_get, _wrap_IIRRBJBandStop_biquads_set },
    { "order", _wrap_IIRRBJBandStop_order_get, _wrap_IIRRBJBandStop_order_set },
    { "fc", _wrap_IIRRBJBandStop_fc_get, _wrap_IIRRBJBandStop_fc_set },
    { "sr", _wrap_IIRRBJBandStop_sr_get, _wrap_IIRRBJBandStop_sr_set },
    { "Q", _wrap_IIRRBJBandStop_Q_get, _wrap_IIRRBJBandStop_Q_set },
    {0,0,0}
};
static swig_lua_method swig_IIRRBJBandStop_methods[]= {
    { "setCutoff", _wrap_IIRRBJBandStop_setCutoff},
    { "setQ", _wrap_IIRRBJBandStop_setQ},
    { "Tick", _wrap_IIRRBJBandStop_Tick},
    {0,0}
};
static swig_lua_method swig_IIRRBJBandStop_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRRBJBandStop_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRRBJBandStop_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRRBJBandStop_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRRBJBandStop_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRRBJBandStop_SwigStatic = {
    "IIRRBJBandStop",
    swig_IIRRBJBandStop_SwigStatic_methods,
    swig_IIRRBJBandStop_SwigStatic_attributes,
    swig_IIRRBJBandStop_SwigStatic_constants,
    swig_IIRRBJBandStop_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRRBJBandStop_bases[] = {0,0};
static const char *swig_IIRRBJBandStop_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRRBJBandStop = { "IIRRBJBandStop", "IIRRBJBandStop", &SWIGTYPE_p_Filters__IIR__RBJ__BandStopFilter,_proxy__wrap_new_IIRRBJBandStop, swig_delete_IIRRBJBandStop, swig_IIRRBJBandStop_methods, swig_IIRRBJBandStop_attributes, &swig_IIRRBJBandStop_SwigStatic, swig_IIRRBJBandStop_meta, swig_IIRRBJBandStop_bases, swig_IIRRBJBandStop_base_names };

static int _wrap_IIRRBJLowShelf_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowShelfFilter *arg1 = (Filters::IIR::RBJ::LowShelfFilter *) 0 ;
  Dsp::RBJ::LowShelf arg2 ;
  Dsp::RBJ::LowShelf *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowShelfFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::prototype",1,"Filters::IIR::RBJ::LowShelfFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::prototype",2,"Dsp::RBJ::LowShelf");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJLowShelf_prototype_set",1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__RBJ__LowShelf,0))){
    SWIG_fail_ptr("IIRRBJLowShelf_prototype_set",2,SWIGTYPE_p_Dsp__RBJ__LowShelf);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowShelf_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowShelfFilter *arg1 = (Filters::IIR::RBJ::LowShelfFilter *) 0 ;
  Dsp::RBJ::LowShelf result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowShelfFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::prototype",1,"Filters::IIR::RBJ::LowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJLowShelf_prototype_get",1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::RBJ::LowShelf * resultptr = new Dsp::RBJ::LowShelf((const Dsp::RBJ::LowShelf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__RBJ__LowShelf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowShelf_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowShelfFilter *arg1 = (Filters::IIR::RBJ::LowShelfFilter *) 0 ;
  Filters::BiquadTypeICascade *arg2 = (Filters::BiquadTypeICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowShelfFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::biquads",1,"Filters::IIR::RBJ::LowShelfFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::biquads",2,"Filters::BiquadTypeICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJLowShelf_biquads_set",1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeICascade,0))){
    SWIG_fail_ptr("IIRRBJLowShelf_biquads_set",2,SWIGTYPE_p_Filters__BiquadTypeICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowShelf_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowShelfFilter *arg1 = (Filters::IIR::RBJ::LowShelfFilter *) 0 ;
  Filters::BiquadTypeICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowShelfFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::biquads",1,"Filters::IIR::RBJ::LowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJLowShelf_biquads_get",1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter);
  }
  
  result = (Filters::BiquadTypeICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowShelf_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowShelfFilter *arg1 = (Filters::IIR::RBJ::LowShelfFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowShelfFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::order",1,"Filters::IIR::RBJ::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJLowShelf_order_set",1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowShelf_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowShelfFilter *arg1 = (Filters::IIR::RBJ::LowShelfFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowShelfFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::order",1,"Filters::IIR::RBJ::LowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJLowShelf_order_get",1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowShelf_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowShelfFilter *arg1 = (Filters::IIR::RBJ::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowShelfFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::fc",1,"Filters::IIR::RBJ::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJLowShelf_fc_set",1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowShelf_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowShelfFilter *arg1 = (Filters::IIR::RBJ::LowShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowShelfFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::fc",1,"Filters::IIR::RBJ::LowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJLowShelf_fc_get",1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowShelf_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowShelfFilter *arg1 = (Filters::IIR::RBJ::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowShelfFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::sr",1,"Filters::IIR::RBJ::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJLowShelf_sr_set",1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowShelf_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowShelfFilter *arg1 = (Filters::IIR::RBJ::LowShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowShelfFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::sr",1,"Filters::IIR::RBJ::LowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJLowShelf_sr_get",1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowShelf_G_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowShelfFilter *arg1 = (Filters::IIR::RBJ::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowShelfFilter::G",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::G",1,"Filters::IIR::RBJ::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::G",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJLowShelf_G_set",1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->G = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowShelf_G_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowShelfFilter *arg1 = (Filters::IIR::RBJ::LowShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowShelfFilter::G",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::G",1,"Filters::IIR::RBJ::LowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJLowShelf_G_get",1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->G);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowShelf_S_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowShelfFilter *arg1 = (Filters::IIR::RBJ::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowShelfFilter::S",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::S",1,"Filters::IIR::RBJ::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::S",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJLowShelf_S_set",1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->S = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowShelf_S_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowShelfFilter *arg1 = (Filters::IIR::RBJ::LowShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowShelfFilter::S",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::S",1,"Filters::IIR::RBJ::LowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJLowShelf_S_get",1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->S);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJLowShelf(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  Filters::IIR::RBJ::LowShelfFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowShelfFilter::LowShelfFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::LowShelfFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::LowShelfFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::LowShelfFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::LowShelfFilter",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::LowShelfFilter",5,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (Filters::IIR::RBJ::LowShelfFilter *)new Filters::IIR::RBJ::LowShelfFilter(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowShelf_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowShelfFilter *arg1 = (Filters::IIR::RBJ::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowShelfFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::setCutoff",1,"Filters::IIR::RBJ::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJLowShelf_setCutoff",1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowShelf_setGain(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowShelfFilter *arg1 = (Filters::IIR::RBJ::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowShelfFilter::setGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::setGain",1,"Filters::IIR::RBJ::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::setGain",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJLowShelf_setGain",1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setGain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowShelf_setSlope(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowShelfFilter *arg1 = (Filters::IIR::RBJ::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowShelfFilter::setSlope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::setSlope",1,"Filters::IIR::RBJ::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::setSlope",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJLowShelf_setSlope",1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setSlope(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowShelf_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowShelfFilter *arg1 = (Filters::IIR::RBJ::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowShelfFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::Tick",1,"Filters::IIR::RBJ::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJLowShelf_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowShelf_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowShelfFilter *arg1 = (Filters::IIR::RBJ::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowShelfFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::Tick",1,"Filters::IIR::RBJ::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJLowShelf_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowShelf_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowShelfFilter *arg1 = (Filters::IIR::RBJ::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowShelfFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::Tick",1,"Filters::IIR::RBJ::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJLowShelf_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowShelf_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::LowShelfFilter *arg1 = (Filters::IIR::RBJ::LowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::LowShelfFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::Tick",1,"Filters::IIR::RBJ::LowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::LowShelfFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJLowShelf_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowShelf_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRRBJLowShelf_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRRBJLowShelf_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRRBJLowShelf_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRRBJLowShelf_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRRBJLowShelf_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::RBJ::LowShelfFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJ::LowShelfFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJ::LowShelfFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJ::LowShelfFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRRBJLowShelf(void *obj) {
Filters::IIR::RBJ::LowShelfFilter *arg1 = (Filters::IIR::RBJ::LowShelfFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRRBJLowShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRRBJLowShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRRBJLowShelf_attributes[] = {
    { "prototype", _wrap_IIRRBJLowShelf_prototype_get, _wrap_IIRRBJLowShelf_prototype_set },
    { "biquads", _wrap_IIRRBJLowShelf_biquads_get, _wrap_IIRRBJLowShelf_biquads_set },
    { "order", _wrap_IIRRBJLowShelf_order_get, _wrap_IIRRBJLowShelf_order_set },
    { "fc", _wrap_IIRRBJLowShelf_fc_get, _wrap_IIRRBJLowShelf_fc_set },
    { "sr", _wrap_IIRRBJLowShelf_sr_get, _wrap_IIRRBJLowShelf_sr_set },
    { "G", _wrap_IIRRBJLowShelf_G_get, _wrap_IIRRBJLowShelf_G_set },
    { "S", _wrap_IIRRBJLowShelf_S_get, _wrap_IIRRBJLowShelf_S_set },
    {0,0,0}
};
static swig_lua_method swig_IIRRBJLowShelf_methods[]= {
    { "setCutoff", _wrap_IIRRBJLowShelf_setCutoff},
    { "setGain", _wrap_IIRRBJLowShelf_setGain},
    { "setSlope", _wrap_IIRRBJLowShelf_setSlope},
    { "Tick", _wrap_IIRRBJLowShelf_Tick},
    {0,0}
};
static swig_lua_method swig_IIRRBJLowShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRRBJLowShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRRBJLowShelf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRRBJLowShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRRBJLowShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRRBJLowShelf_Sf_SwigStatic = {
    "IIRRBJLowShelf",
    swig_IIRRBJLowShelf_Sf_SwigStatic_methods,
    swig_IIRRBJLowShelf_Sf_SwigStatic_attributes,
    swig_IIRRBJLowShelf_Sf_SwigStatic_constants,
    swig_IIRRBJLowShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRRBJLowShelf_bases[] = {0,0};
static const char *swig_IIRRBJLowShelf_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRRBJLowShelf = { "IIRRBJLowShelf", "IIRRBJLowShelf", &SWIGTYPE_p_Filters__IIR__RBJ__LowShelfFilter,_proxy__wrap_new_IIRRBJLowShelf, swig_delete_IIRRBJLowShelf, swig_IIRRBJLowShelf_methods, swig_IIRRBJLowShelf_attributes, &swig_IIRRBJLowShelf_Sf_SwigStatic, swig_IIRRBJLowShelf_meta, swig_IIRRBJLowShelf_bases, swig_IIRRBJLowShelf_base_names };

static int _wrap_IIRRBJHighShelf_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighShelfFilter *arg1 = (Filters::IIR::RBJ::HighShelfFilter *) 0 ;
  Dsp::RBJ::HighShelf arg2 ;
  Dsp::RBJ::HighShelf *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighShelfFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::prototype",1,"Filters::IIR::RBJ::HighShelfFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::prototype",2,"Dsp::RBJ::HighShelf");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJHighShelf_prototype_set",1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__RBJ__HighShelf,0))){
    SWIG_fail_ptr("IIRRBJHighShelf_prototype_set",2,SWIGTYPE_p_Dsp__RBJ__HighShelf);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighShelf_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighShelfFilter *arg1 = (Filters::IIR::RBJ::HighShelfFilter *) 0 ;
  Dsp::RBJ::HighShelf result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighShelfFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::prototype",1,"Filters::IIR::RBJ::HighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJHighShelf_prototype_get",1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::RBJ::HighShelf * resultptr = new Dsp::RBJ::HighShelf((const Dsp::RBJ::HighShelf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__RBJ__HighShelf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighShelf_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighShelfFilter *arg1 = (Filters::IIR::RBJ::HighShelfFilter *) 0 ;
  Filters::BiquadTypeICascade *arg2 = (Filters::BiquadTypeICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighShelfFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::biquads",1,"Filters::IIR::RBJ::HighShelfFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::biquads",2,"Filters::BiquadTypeICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJHighShelf_biquads_set",1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeICascade,0))){
    SWIG_fail_ptr("IIRRBJHighShelf_biquads_set",2,SWIGTYPE_p_Filters__BiquadTypeICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighShelf_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighShelfFilter *arg1 = (Filters::IIR::RBJ::HighShelfFilter *) 0 ;
  Filters::BiquadTypeICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighShelfFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::biquads",1,"Filters::IIR::RBJ::HighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJHighShelf_biquads_get",1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter);
  }
  
  result = (Filters::BiquadTypeICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighShelf_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighShelfFilter *arg1 = (Filters::IIR::RBJ::HighShelfFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighShelfFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::order",1,"Filters::IIR::RBJ::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJHighShelf_order_set",1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighShelf_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighShelfFilter *arg1 = (Filters::IIR::RBJ::HighShelfFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighShelfFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::order",1,"Filters::IIR::RBJ::HighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJHighShelf_order_get",1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighShelf_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighShelfFilter *arg1 = (Filters::IIR::RBJ::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighShelfFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::fc",1,"Filters::IIR::RBJ::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJHighShelf_fc_set",1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighShelf_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighShelfFilter *arg1 = (Filters::IIR::RBJ::HighShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighShelfFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::fc",1,"Filters::IIR::RBJ::HighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJHighShelf_fc_get",1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighShelf_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighShelfFilter *arg1 = (Filters::IIR::RBJ::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighShelfFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::sr",1,"Filters::IIR::RBJ::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJHighShelf_sr_set",1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighShelf_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighShelfFilter *arg1 = (Filters::IIR::RBJ::HighShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighShelfFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::sr",1,"Filters::IIR::RBJ::HighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJHighShelf_sr_get",1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighShelf_G_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighShelfFilter *arg1 = (Filters::IIR::RBJ::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighShelfFilter::G",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::G",1,"Filters::IIR::RBJ::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::G",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJHighShelf_G_set",1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->G = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighShelf_G_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighShelfFilter *arg1 = (Filters::IIR::RBJ::HighShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighShelfFilter::G",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::G",1,"Filters::IIR::RBJ::HighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJHighShelf_G_get",1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->G);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighShelf_S_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighShelfFilter *arg1 = (Filters::IIR::RBJ::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighShelfFilter::S",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::S",1,"Filters::IIR::RBJ::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::S",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJHighShelf_S_set",1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->S = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighShelf_S_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighShelfFilter *arg1 = (Filters::IIR::RBJ::HighShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighShelfFilter::S",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::S",1,"Filters::IIR::RBJ::HighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJHighShelf_S_get",1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->S);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJHighShelf(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  Filters::IIR::RBJ::HighShelfFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighShelfFilter::HighShelfFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::HighShelfFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::HighShelfFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::HighShelfFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::HighShelfFilter",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::HighShelfFilter",5,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (Filters::IIR::RBJ::HighShelfFilter *)new Filters::IIR::RBJ::HighShelfFilter(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighShelf_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighShelfFilter *arg1 = (Filters::IIR::RBJ::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighShelfFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::setCutoff",1,"Filters::IIR::RBJ::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJHighShelf_setCutoff",1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighShelf_setGain(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighShelfFilter *arg1 = (Filters::IIR::RBJ::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighShelfFilter::setGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::setGain",1,"Filters::IIR::RBJ::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::setGain",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJHighShelf_setGain",1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setGain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighShelf_setSlope(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighShelfFilter *arg1 = (Filters::IIR::RBJ::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighShelfFilter::setSlope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::setSlope",1,"Filters::IIR::RBJ::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::setSlope",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJHighShelf_setSlope",1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setSlope(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighShelf_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighShelfFilter *arg1 = (Filters::IIR::RBJ::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighShelfFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::Tick",1,"Filters::IIR::RBJ::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJHighShelf_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighShelf_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighShelfFilter *arg1 = (Filters::IIR::RBJ::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighShelfFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::Tick",1,"Filters::IIR::RBJ::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJHighShelf_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighShelf_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighShelfFilter *arg1 = (Filters::IIR::RBJ::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighShelfFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::Tick",1,"Filters::IIR::RBJ::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJHighShelf_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighShelf_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::HighShelfFilter *arg1 = (Filters::IIR::RBJ::HighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::HighShelfFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::Tick",1,"Filters::IIR::RBJ::HighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::HighShelfFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJHighShelf_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighShelf_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRRBJHighShelf_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRRBJHighShelf_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRRBJHighShelf_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRRBJHighShelf_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRRBJHighShelf_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::RBJ::HighShelfFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJ::HighShelfFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJ::HighShelfFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJ::HighShelfFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRRBJHighShelf(void *obj) {
Filters::IIR::RBJ::HighShelfFilter *arg1 = (Filters::IIR::RBJ::HighShelfFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRRBJHighShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRRBJHighShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRRBJHighShelf_attributes[] = {
    { "prototype", _wrap_IIRRBJHighShelf_prototype_get, _wrap_IIRRBJHighShelf_prototype_set },
    { "biquads", _wrap_IIRRBJHighShelf_biquads_get, _wrap_IIRRBJHighShelf_biquads_set },
    { "order", _wrap_IIRRBJHighShelf_order_get, _wrap_IIRRBJHighShelf_order_set },
    { "fc", _wrap_IIRRBJHighShelf_fc_get, _wrap_IIRRBJHighShelf_fc_set },
    { "sr", _wrap_IIRRBJHighShelf_sr_get, _wrap_IIRRBJHighShelf_sr_set },
    { "G", _wrap_IIRRBJHighShelf_G_get, _wrap_IIRRBJHighShelf_G_set },
    { "S", _wrap_IIRRBJHighShelf_S_get, _wrap_IIRRBJHighShelf_S_set },
    {0,0,0}
};
static swig_lua_method swig_IIRRBJHighShelf_methods[]= {
    { "setCutoff", _wrap_IIRRBJHighShelf_setCutoff},
    { "setGain", _wrap_IIRRBJHighShelf_setGain},
    { "setSlope", _wrap_IIRRBJHighShelf_setSlope},
    { "Tick", _wrap_IIRRBJHighShelf_Tick},
    {0,0}
};
static swig_lua_method swig_IIRRBJHighShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRRBJHighShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRRBJHighShelf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRRBJHighShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRRBJHighShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRRBJHighShelf_Sf_SwigStatic = {
    "IIRRBJHighShelf",
    swig_IIRRBJHighShelf_Sf_SwigStatic_methods,
    swig_IIRRBJHighShelf_Sf_SwigStatic_attributes,
    swig_IIRRBJHighShelf_Sf_SwigStatic_constants,
    swig_IIRRBJHighShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRRBJHighShelf_bases[] = {0,0};
static const char *swig_IIRRBJHighShelf_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRRBJHighShelf = { "IIRRBJHighShelf", "IIRRBJHighShelf", &SWIGTYPE_p_Filters__IIR__RBJ__HighShelfFilter,_proxy__wrap_new_IIRRBJHighShelf, swig_delete_IIRRBJHighShelf, swig_IIRRBJHighShelf_methods, swig_IIRRBJHighShelf_attributes, &swig_IIRRBJHighShelf_Sf_SwigStatic, swig_IIRRBJHighShelf_meta, swig_IIRRBJHighShelf_bases, swig_IIRRBJHighShelf_base_names };

static int _wrap_IIRRBJBandShelf_prototype_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandShelfFilter *arg1 = (Filters::IIR::RBJ::BandShelfFilter *) 0 ;
  Dsp::RBJ::BandShelf arg2 ;
  Dsp::RBJ::BandShelf *argp2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandShelfFilter::prototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::prototype",1,"Filters::IIR::RBJ::BandShelfFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::prototype",2,"Dsp::RBJ::BandShelf");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJBandShelf_prototype_set",1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Dsp__RBJ__BandShelf,0))){
    SWIG_fail_ptr("IIRRBJBandShelf_prototype_set",2,SWIGTYPE_p_Dsp__RBJ__BandShelf);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->prototype = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandShelf_prototype_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandShelfFilter *arg1 = (Filters::IIR::RBJ::BandShelfFilter *) 0 ;
  Dsp::RBJ::BandShelf result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandShelfFilter::prototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::prototype",1,"Filters::IIR::RBJ::BandShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJBandShelf_prototype_get",1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter);
  }
  
  result =  ((arg1)->prototype);
  {
    Dsp::RBJ::BandShelf * resultptr = new Dsp::RBJ::BandShelf((const Dsp::RBJ::BandShelf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Dsp__RBJ__BandShelf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandShelf_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandShelfFilter *arg1 = (Filters::IIR::RBJ::BandShelfFilter *) 0 ;
  Filters::BiquadTypeICascade *arg2 = (Filters::BiquadTypeICascade *) 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandShelfFilter::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::biquads",1,"Filters::IIR::RBJ::BandShelfFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::biquads",2,"Filters::BiquadTypeICascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJBandShelf_biquads_set",1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadTypeICascade,0))){
    SWIG_fail_ptr("IIRRBJBandShelf_biquads_set",2,SWIGTYPE_p_Filters__BiquadTypeICascade);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandShelf_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandShelfFilter *arg1 = (Filters::IIR::RBJ::BandShelfFilter *) 0 ;
  Filters::BiquadTypeICascade *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandShelfFilter::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::biquads",1,"Filters::IIR::RBJ::BandShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJBandShelf_biquads_get",1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter);
  }
  
  result = (Filters::BiquadTypeICascade *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTypeICascade,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandShelf_order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandShelfFilter *arg1 = (Filters::IIR::RBJ::BandShelfFilter *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandShelfFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::order",1,"Filters::IIR::RBJ::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJBandShelf_order_set",1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandShelf_order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandShelfFilter *arg1 = (Filters::IIR::RBJ::BandShelfFilter *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandShelfFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::order",1,"Filters::IIR::RBJ::BandShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJBandShelf_order_get",1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandShelf_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandShelfFilter *arg1 = (Filters::IIR::RBJ::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandShelfFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::fc",1,"Filters::IIR::RBJ::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJBandShelf_fc_set",1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandShelf_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandShelfFilter *arg1 = (Filters::IIR::RBJ::BandShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandShelfFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::fc",1,"Filters::IIR::RBJ::BandShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJBandShelf_fc_get",1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandShelf_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandShelfFilter *arg1 = (Filters::IIR::RBJ::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandShelfFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::sr",1,"Filters::IIR::RBJ::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJBandShelf_sr_set",1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandShelf_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandShelfFilter *arg1 = (Filters::IIR::RBJ::BandShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandShelfFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::sr",1,"Filters::IIR::RBJ::BandShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJBandShelf_sr_get",1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandShelf_G_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandShelfFilter *arg1 = (Filters::IIR::RBJ::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandShelfFilter::G",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::G",1,"Filters::IIR::RBJ::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::G",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJBandShelf_G_set",1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->G = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandShelf_G_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandShelfFilter *arg1 = (Filters::IIR::RBJ::BandShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandShelfFilter::G",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::G",1,"Filters::IIR::RBJ::BandShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJBandShelf_G_get",1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->G);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandShelf_S_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandShelfFilter *arg1 = (Filters::IIR::RBJ::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandShelfFilter::S",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::S",1,"Filters::IIR::RBJ::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::S",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJBandShelf_S_set",1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->S = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandShelf_S_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandShelfFilter *arg1 = (Filters::IIR::RBJ::BandShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandShelfFilter::S",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::S",1,"Filters::IIR::RBJ::BandShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJBandShelf_S_get",1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->S);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJBandShelf(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  Filters::IIR::RBJ::BandShelfFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandShelfFilter::BandShelfFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::BandShelfFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::BandShelfFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::BandShelfFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::BandShelfFilter",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::BandShelfFilter",5,"DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (Filters::IIR::RBJ::BandShelfFilter *)new Filters::IIR::RBJ::BandShelfFilter(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandShelf_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandShelfFilter *arg1 = (Filters::IIR::RBJ::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandShelfFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::setCutoff",1,"Filters::IIR::RBJ::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJBandShelf_setCutoff",1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandShelf_setGain(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandShelfFilter *arg1 = (Filters::IIR::RBJ::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandShelfFilter::setGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::setGain",1,"Filters::IIR::RBJ::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::setGain",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJBandShelf_setGain",1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setGain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandShelf_setSlope(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandShelfFilter *arg1 = (Filters::IIR::RBJ::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandShelfFilter::setSlope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::setSlope",1,"Filters::IIR::RBJ::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::setSlope",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJBandShelf_setSlope",1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setSlope(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandShelf_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandShelfFilter *arg1 = (Filters::IIR::RBJ::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandShelfFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::Tick",1,"Filters::IIR::RBJ::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJBandShelf_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandShelf_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandShelfFilter *arg1 = (Filters::IIR::RBJ::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandShelfFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::Tick",1,"Filters::IIR::RBJ::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJBandShelf_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandShelf_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandShelfFilter *arg1 = (Filters::IIR::RBJ::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandShelfFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::Tick",1,"Filters::IIR::RBJ::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJBandShelf_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandShelf_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJ::BandShelfFilter *arg1 = (Filters::IIR::RBJ::BandShelfFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJ::BandShelfFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::Tick",1,"Filters::IIR::RBJ::BandShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJ::BandShelfFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJBandShelf_Tick",1,SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandShelf_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IIRRBJBandShelf_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IIRRBJBandShelf_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IIRRBJBandShelf_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IIRRBJBandShelf_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IIRRBJBandShelf_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::RBJ::BandShelfFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJ::BandShelfFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJ::BandShelfFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJ::BandShelfFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRRBJBandShelf(void *obj) {
Filters::IIR::RBJ::BandShelfFilter *arg1 = (Filters::IIR::RBJ::BandShelfFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRRBJBandShelf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRRBJBandShelf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRRBJBandShelf_attributes[] = {
    { "prototype", _wrap_IIRRBJBandShelf_prototype_get, _wrap_IIRRBJBandShelf_prototype_set },
    { "biquads", _wrap_IIRRBJBandShelf_biquads_get, _wrap_IIRRBJBandShelf_biquads_set },
    { "order", _wrap_IIRRBJBandShelf_order_get, _wrap_IIRRBJBandShelf_order_set },
    { "fc", _wrap_IIRRBJBandShelf_fc_get, _wrap_IIRRBJBandShelf_fc_set },
    { "sr", _wrap_IIRRBJBandShelf_sr_get, _wrap_IIRRBJBandShelf_sr_set },
    { "G", _wrap_IIRRBJBandShelf_G_get, _wrap_IIRRBJBandShelf_G_set },
    { "S", _wrap_IIRRBJBandShelf_S_get, _wrap_IIRRBJBandShelf_S_set },
    {0,0,0}
};
static swig_lua_method swig_IIRRBJBandShelf_methods[]= {
    { "setCutoff", _wrap_IIRRBJBandShelf_setCutoff},
    { "setGain", _wrap_IIRRBJBandShelf_setGain},
    { "setSlope", _wrap_IIRRBJBandShelf_setSlope},
    { "Tick", _wrap_IIRRBJBandShelf_Tick},
    {0,0}
};
static swig_lua_method swig_IIRRBJBandShelf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRRBJBandShelf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRRBJBandShelf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRRBJBandShelf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRRBJBandShelf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRRBJBandShelf_Sf_SwigStatic = {
    "IIRRBJBandShelf",
    swig_IIRRBJBandShelf_Sf_SwigStatic_methods,
    swig_IIRRBJBandShelf_Sf_SwigStatic_attributes,
    swig_IIRRBJBandShelf_Sf_SwigStatic_constants,
    swig_IIRRBJBandShelf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRRBJBandShelf_bases[] = {0,0};
static const char *swig_IIRRBJBandShelf_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_IIRRBJBandShelf = { "IIRRBJBandShelf", "IIRRBJBandShelf", &SWIGTYPE_p_Filters__IIR__RBJ__BandShelfFilter,_proxy__wrap_new_IIRRBJBandShelf, swig_delete_IIRRBJBandShelf, swig_IIRRBJBandShelf_methods, swig_IIRRBJBandShelf_attributes, &swig_IIRRBJBandShelf_Sf_SwigStatic, swig_IIRRBJBandShelf_meta, swig_IIRRBJBandShelf_bases, swig_IIRRBJBandShelf_base_names };

static int _wrap_RBJBiquadFilter_filter_type_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBiquadFilter *arg1 = (Filters::IIR::RBJFilters::RBJBiquadFilter *) 0 ;
  Filters::FilterBase::FilterType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBiquadFilter::filter_type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::filter_type",1,"Filters::IIR::RBJFilters::RBJBiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::filter_type",2,"Filters::FilterBase::FilterType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter,0))){
    SWIG_fail_ptr("RBJBiquadFilter_filter_type_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter);
  }
  
  arg2 = (Filters::FilterBase::FilterType)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->filter_type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBiquadFilter_filter_type_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBiquadFilter *arg1 = (Filters::IIR::RBJFilters::RBJBiquadFilter *) 0 ;
  Filters::FilterBase::FilterType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBiquadFilter::filter_type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::filter_type",1,"Filters::IIR::RBJFilters::RBJBiquadFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter,0))){
    SWIG_fail_ptr("RBJBiquadFilter_filter_type_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter);
  }
  
  result = (Filters::FilterBase::FilterType) ((arg1)->filter_type);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBiquadFilter_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBiquadFilter *arg1 = (Filters::IIR::RBJFilters::RBJBiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBiquadFilter::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::Fc",1,"Filters::IIR::RBJFilters::RBJBiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter,0))){
    SWIG_fail_ptr("RBJBiquadFilter_Fc_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBiquadFilter_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBiquadFilter *arg1 = (Filters::IIR::RBJFilters::RBJBiquadFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBiquadFilter::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::Fc",1,"Filters::IIR::RBJFilters::RBJBiquadFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter,0))){
    SWIG_fail_ptr("RBJBiquadFilter_Fc_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBiquadFilter_Fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBiquadFilter *arg1 = (Filters::IIR::RBJFilters::RBJBiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBiquadFilter::Fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::Fs",1,"Filters::IIR::RBJFilters::RBJBiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::Fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter,0))){
    SWIG_fail_ptr("RBJBiquadFilter_Fs_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBiquadFilter_Fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBiquadFilter *arg1 = (Filters::IIR::RBJFilters::RBJBiquadFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBiquadFilter::Fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::Fs",1,"Filters::IIR::RBJFilters::RBJBiquadFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter,0))){
    SWIG_fail_ptr("RBJBiquadFilter_Fs_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBiquadFilter_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBiquadFilter *arg1 = (Filters::IIR::RBJFilters::RBJBiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBiquadFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::Q",1,"Filters::IIR::RBJFilters::RBJBiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter,0))){
    SWIG_fail_ptr("RBJBiquadFilter_Q_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBiquadFilter_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBiquadFilter *arg1 = (Filters::IIR::RBJFilters::RBJBiquadFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBiquadFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::Q",1,"Filters::IIR::RBJFilters::RBJBiquadFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter,0))){
    SWIG_fail_ptr("RBJBiquadFilter_Q_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBiquadFilter_G_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBiquadFilter *arg1 = (Filters::IIR::RBJFilters::RBJBiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBiquadFilter::G",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::G",1,"Filters::IIR::RBJFilters::RBJBiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::G",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter,0))){
    SWIG_fail_ptr("RBJBiquadFilter_G_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->G = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBiquadFilter_G_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBiquadFilter *arg1 = (Filters::IIR::RBJFilters::RBJBiquadFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBiquadFilter::G",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::G",1,"Filters::IIR::RBJFilters::RBJBiquadFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter,0))){
    SWIG_fail_ptr("RBJBiquadFilter_G_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter);
  }
  
  result = (DspFloatType) ((arg1)->G);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBiquadFilter_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBiquadFilter *arg1 = (Filters::IIR::RBJFilters::RBJBiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBiquadFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::R",1,"Filters::IIR::RBJFilters::RBJBiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter,0))){
    SWIG_fail_ptr("RBJBiquadFilter_R_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBiquadFilter_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBiquadFilter *arg1 = (Filters::IIR::RBJFilters::RBJBiquadFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBiquadFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::R",1,"Filters::IIR::RBJFilters::RBJBiquadFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter,0))){
    SWIG_fail_ptr("RBJBiquadFilter_R_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJBiquadFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterBase::FilterType arg1 ;
  Filters::IIR::RBJFilters::RBJBiquadFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBiquadFilter::RBJBiquadFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::RBJBiquadFilter",1,"Filters::FilterBase::FilterType");
  arg1 = (Filters::FilterBase::FilterType)(int)lua_tonumber(L, 1);
  result = (Filters::IIR::RBJFilters::RBJBiquadFilter *)new Filters::IIR::RBJFilters::RBJBiquadFilter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJBiquadFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBiquadFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBiquadFilter::RBJBiquadFilter",0,0)
  result = (Filters::IIR::RBJFilters::RBJBiquadFilter *)new Filters::IIR::RBJFilters::RBJBiquadFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJBiquadFilter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterBase::FilterType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  Filters::IIR::RBJFilters::RBJBiquadFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBiquadFilter::RBJBiquadFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::RBJBiquadFilter",1,"Filters::FilterBase::FilterType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::RBJBiquadFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::RBJBiquadFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::RBJBiquadFilter",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::RBJBiquadFilter",5,"DspFloatType");
  arg1 = (Filters::FilterBase::FilterType)(int)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (Filters::IIR::RBJFilters::RBJBiquadFilter *)new Filters::IIR::RBJFilters::RBJBiquadFilter(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJBiquadFilter__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterBase::FilterType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::RBJFilters::RBJBiquadFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBiquadFilter::RBJBiquadFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::RBJBiquadFilter",1,"Filters::FilterBase::FilterType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::RBJBiquadFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::RBJBiquadFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::RBJBiquadFilter",4,"DspFloatType");
  arg1 = (Filters::FilterBase::FilterType)(int)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::RBJFilters::RBJBiquadFilter *)new Filters::IIR::RBJFilters::RBJBiquadFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJBiquadFilter__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterBase::FilterType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::RBJFilters::RBJBiquadFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBiquadFilter::RBJBiquadFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::RBJBiquadFilter",1,"Filters::FilterBase::FilterType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::RBJBiquadFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::RBJBiquadFilter",3,"DspFloatType");
  arg1 = (Filters::FilterBase::FilterType)(int)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::RBJFilters::RBJBiquadFilter *)new Filters::IIR::RBJFilters::RBJBiquadFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJBiquadFilter(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_RBJBiquadFilter__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_RBJBiquadFilter__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_RBJBiquadFilter__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_RBJBiquadFilter__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_RBJBiquadFilter__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RBJBiquadFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::RBJFilters::RBJBiquadFilter::RBJBiquadFilter(Filters::FilterBase::FilterType)\n"
    "    Filters::IIR::RBJFilters::RBJBiquadFilter::RBJBiquadFilter()\n"
    "    Filters::IIR::RBJFilters::RBJBiquadFilter::RBJBiquadFilter(Filters::FilterBase::FilterType,DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJFilters::RBJBiquadFilter::RBJBiquadFilter(Filters::FilterBase::FilterType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJFilters::RBJBiquadFilter::RBJBiquadFilter(Filters::FilterBase::FilterType,DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_RBJBiquadFilter_setCoefficients__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBiquadFilter *arg1 = (Filters::IIR::RBJFilters::RBJBiquadFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBiquadFilter::setCoefficients",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::setCoefficients",1,"Filters::IIR::RBJFilters::RBJBiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::setCoefficients",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::setCoefficients",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::setCoefficients",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter,0))){
    SWIG_fail_ptr("RBJBiquadFilter_setCoefficients",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  (arg1)->setCoefficients(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBiquadFilter_setCoefficients__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBiquadFilter *arg1 = (Filters::IIR::RBJFilters::RBJBiquadFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBiquadFilter::setCoefficients",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::setCoefficients",1,"Filters::IIR::RBJFilters::RBJBiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::setCoefficients",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::setCoefficients",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter,0))){
    SWIG_fail_ptr("RBJBiquadFilter_setCoefficients",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setCoefficients(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBiquadFilter_setCoefficients(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_RBJBiquadFilter_setCoefficients__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_RBJBiquadFilter_setCoefficients__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RBJBiquadFilter_setCoefficients'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::RBJFilters::RBJBiquadFilter::setCoefficients(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJFilters::RBJBiquadFilter::setCoefficients(DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_RBJBiquadFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBiquadFilter *arg1 = (Filters::IIR::RBJFilters::RBJBiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBiquadFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::setCutoff",1,"Filters::IIR::RBJFilters::RBJBiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter,0))){
    SWIG_fail_ptr("RBJBiquadFilter_setCutoff",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBiquadFilter_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBiquadFilter *arg1 = (Filters::IIR::RBJFilters::RBJBiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBiquadFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::setQ",1,"Filters::IIR::RBJFilters::RBJBiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter,0))){
    SWIG_fail_ptr("RBJBiquadFilter_setQ",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBiquadFilter_setRadius(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBiquadFilter *arg1 = (Filters::IIR::RBJFilters::RBJBiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBiquadFilter::setRadius",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::setRadius",1,"Filters::IIR::RBJFilters::RBJBiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::setRadius",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter,0))){
    SWIG_fail_ptr("RBJBiquadFilter_setRadius",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setRadius(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJBiquadFilter_setGain(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBiquadFilter *arg1 = (Filters::IIR::RBJFilters::RBJBiquadFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBiquadFilter::setGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::setGain",1,"Filters::IIR::RBJFilters::RBJBiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBiquadFilter::setGain",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter,0))){
    SWIG_fail_ptr("RBJBiquadFilter_setGain",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setGain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RBJBiquadFilter(void *obj) {
Filters::IIR::RBJFilters::RBJBiquadFilter *arg1 = (Filters::IIR::RBJFilters::RBJBiquadFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_RBJBiquadFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RBJBiquadFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RBJBiquadFilter_attributes[] = {
    { "filter_type", _wrap_RBJBiquadFilter_filter_type_get, _wrap_RBJBiquadFilter_filter_type_set },
    { "Fc", _wrap_RBJBiquadFilter_Fc_get, _wrap_RBJBiquadFilter_Fc_set },
    { "Fs", _wrap_RBJBiquadFilter_Fs_get, _wrap_RBJBiquadFilter_Fs_set },
    { "Q", _wrap_RBJBiquadFilter_Q_get, _wrap_RBJBiquadFilter_Q_set },
    { "G", _wrap_RBJBiquadFilter_G_get, _wrap_RBJBiquadFilter_G_set },
    { "R", _wrap_RBJBiquadFilter_R_get, _wrap_RBJBiquadFilter_R_set },
    {0,0,0}
};
static swig_lua_method swig_RBJBiquadFilter_methods[]= {
    { "setCoefficients", _wrap_RBJBiquadFilter_setCoefficients},
    { "setCutoff", _wrap_RBJBiquadFilter_setCutoff},
    { "setQ", _wrap_RBJBiquadFilter_setQ},
    { "setRadius", _wrap_RBJBiquadFilter_setRadius},
    { "setGain", _wrap_RBJBiquadFilter_setGain},
    {0,0}
};
static swig_lua_method swig_RBJBiquadFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RBJBiquadFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RBJBiquadFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RBJBiquadFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RBJBiquadFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RBJBiquadFilter_Sf_SwigStatic = {
    "RBJBiquadFilter",
    swig_RBJBiquadFilter_Sf_SwigStatic_methods,
    swig_RBJBiquadFilter_Sf_SwigStatic_attributes,
    swig_RBJBiquadFilter_Sf_SwigStatic_constants,
    swig_RBJBiquadFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RBJBiquadFilter_bases[] = {0,0};
static const char *swig_RBJBiquadFilter_base_names[] = {"Filters::BiquadTransposedTypeII *",0};
static swig_lua_class _wrap_class_RBJBiquadFilter = { "RBJBiquadFilter", "RBJBiquadFilter", &SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBiquadFilter,_proxy__wrap_new_RBJBiquadFilter, swig_delete_RBJBiquadFilter, swig_RBJBiquadFilter_methods, swig_RBJBiquadFilter_attributes, &swig_RBJBiquadFilter_Sf_SwigStatic, swig_RBJBiquadFilter_meta, swig_RBJBiquadFilter_bases, swig_RBJBiquadFilter_base_names };

static int _wrap_IIRRBJLowPassBiquad_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJLowPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJLowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJLowPassFilter::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowPassFilter::Fc",1,"Filters::IIR::RBJFilters::RBJLowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowPassFilter::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowPassFilter,0))){
    SWIG_fail_ptr("IIRRBJLowPassBiquad_Fc_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowPassBiquad_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJLowPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJLowPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJLowPassFilter::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowPassFilter::Fc",1,"Filters::IIR::RBJFilters::RBJLowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowPassFilter,0))){
    SWIG_fail_ptr("IIRRBJLowPassBiquad_Fc_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowPassBiquad_Fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJLowPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJLowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJLowPassFilter::Fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowPassFilter::Fs",1,"Filters::IIR::RBJFilters::RBJLowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowPassFilter::Fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowPassFilter,0))){
    SWIG_fail_ptr("IIRRBJLowPassBiquad_Fs_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowPassBiquad_Fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJLowPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJLowPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJLowPassFilter::Fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowPassFilter::Fs",1,"Filters::IIR::RBJFilters::RBJLowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowPassFilter,0))){
    SWIG_fail_ptr("IIRRBJLowPassBiquad_Fs_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowPassBiquad_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJLowPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJLowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJLowPassFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowPassFilter::Q",1,"Filters::IIR::RBJFilters::RBJLowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowPassFilter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowPassFilter,0))){
    SWIG_fail_ptr("IIRRBJLowPassBiquad_Q_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowPassBiquad_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJLowPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJLowPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJLowPassFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowPassFilter::Q",1,"Filters::IIR::RBJFilters::RBJLowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowPassFilter,0))){
    SWIG_fail_ptr("IIRRBJLowPassBiquad_Q_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowPassBiquad_G_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJLowPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJLowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJLowPassFilter::G",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowPassFilter::G",1,"Filters::IIR::RBJFilters::RBJLowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowPassFilter::G",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowPassFilter,0))){
    SWIG_fail_ptr("IIRRBJLowPassBiquad_G_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->G = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowPassBiquad_G_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJLowPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJLowPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJLowPassFilter::G",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowPassFilter::G",1,"Filters::IIR::RBJFilters::RBJLowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowPassFilter,0))){
    SWIG_fail_ptr("IIRRBJLowPassBiquad_G_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->G);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowPassBiquad_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJLowPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJLowPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJLowPassFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowPassFilter::R",1,"Filters::IIR::RBJFilters::RBJLowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowPassFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowPassFilter,0))){
    SWIG_fail_ptr("IIRRBJLowPassBiquad_R_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowPassBiquad_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJLowPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJLowPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJLowPassFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowPassFilter::R",1,"Filters::IIR::RBJFilters::RBJLowPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowPassFilter,0))){
    SWIG_fail_ptr("IIRRBJLowPassBiquad_R_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJLowPassBiquad__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJLowPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJLowPassFilter::RBJLowPassFilter",0,0)
  result = (Filters::IIR::RBJFilters::RBJLowPassFilter *)new Filters::IIR::RBJFilters::RBJLowPassFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJLowPassBiquad__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::RBJFilters::RBJLowPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJLowPassFilter::RBJLowPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowPassFilter::RBJLowPassFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowPassFilter::RBJLowPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowPassFilter::RBJLowPassFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowPassFilter::RBJLowPassFilter",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::RBJFilters::RBJLowPassFilter *)new Filters::IIR::RBJFilters::RBJLowPassFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJLowPassBiquad__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::RBJFilters::RBJLowPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJLowPassFilter::RBJLowPassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowPassFilter::RBJLowPassFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowPassFilter::RBJLowPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowPassFilter::RBJLowPassFilter",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::RBJFilters::RBJLowPassFilter *)new Filters::IIR::RBJFilters::RBJLowPassFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJLowPassBiquad__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Filters::IIR::RBJFilters::RBJLowPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJLowPassFilter::RBJLowPassFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowPassFilter::RBJLowPassFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowPassFilter::RBJLowPassFilter",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Filters::IIR::RBJFilters::RBJLowPassFilter *)new Filters::IIR::RBJFilters::RBJLowPassFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJLowPassBiquad(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_IIRRBJLowPassBiquad__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_IIRRBJLowPassBiquad__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_IIRRBJLowPassBiquad__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_IIRRBJLowPassBiquad__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IIRRBJLowPassBiquad'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::RBJFilters::RBJLowPassFilter::RBJLowPassFilter()\n"
    "    Filters::IIR::RBJFilters::RBJLowPassFilter::RBJLowPassFilter(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJFilters::RBJLowPassFilter::RBJLowPassFilter(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJFilters::RBJLowPassFilter::RBJLowPassFilter(DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRRBJLowPassBiquad(void *obj) {
Filters::IIR::RBJFilters::RBJLowPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJLowPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRRBJLowPassBiquad(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRRBJLowPassBiquad);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRRBJLowPassBiquad_attributes[] = {
    { "Fc", _wrap_IIRRBJLowPassBiquad_Fc_get, _wrap_IIRRBJLowPassBiquad_Fc_set },
    { "Fs", _wrap_IIRRBJLowPassBiquad_Fs_get, _wrap_IIRRBJLowPassBiquad_Fs_set },
    { "Q", _wrap_IIRRBJLowPassBiquad_Q_get, _wrap_IIRRBJLowPassBiquad_Q_set },
    { "G", _wrap_IIRRBJLowPassBiquad_G_get, _wrap_IIRRBJLowPassBiquad_G_set },
    { "R", _wrap_IIRRBJLowPassBiquad_R_get, _wrap_IIRRBJLowPassBiquad_R_set },
    {0,0,0}
};
static swig_lua_method swig_IIRRBJLowPassBiquad_methods[]= {
    {0,0}
};
static swig_lua_method swig_IIRRBJLowPassBiquad_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRRBJLowPassBiquad_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRRBJLowPassBiquad_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRRBJLowPassBiquad_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRRBJLowPassBiquad_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRRBJLowPassBiquad_Sf_SwigStatic = {
    "IIRRBJLowPassBiquad",
    swig_IIRRBJLowPassBiquad_Sf_SwigStatic_methods,
    swig_IIRRBJLowPassBiquad_Sf_SwigStatic_attributes,
    swig_IIRRBJLowPassBiquad_Sf_SwigStatic_constants,
    swig_IIRRBJLowPassBiquad_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRRBJLowPassBiquad_bases[] = {0,0};
static const char *swig_IIRRBJLowPassBiquad_base_names[] = {"Filters::IIR::RBJFilters::RBJBiquadFilter *",0};
static swig_lua_class _wrap_class_IIRRBJLowPassBiquad = { "IIRRBJLowPassBiquad", "IIRRBJLowPassBiquad", &SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowPassFilter,_proxy__wrap_new_IIRRBJLowPassBiquad, swig_delete_IIRRBJLowPassBiquad, swig_IIRRBJLowPassBiquad_methods, swig_IIRRBJLowPassBiquad_attributes, &swig_IIRRBJLowPassBiquad_Sf_SwigStatic, swig_IIRRBJLowPassBiquad_meta, swig_IIRRBJLowPassBiquad_bases, swig_IIRRBJLowPassBiquad_base_names };

static int _wrap_IIRRBJHighPassBiquad_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJHighPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJHighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJHighPassFilter::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighPassFilter::Fc",1,"Filters::IIR::RBJFilters::RBJHighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighPassFilter::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighPassFilter,0))){
    SWIG_fail_ptr("IIRRBJHighPassBiquad_Fc_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighPassBiquad_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJHighPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJHighPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJHighPassFilter::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighPassFilter::Fc",1,"Filters::IIR::RBJFilters::RBJHighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighPassFilter,0))){
    SWIG_fail_ptr("IIRRBJHighPassBiquad_Fc_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighPassBiquad_Fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJHighPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJHighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJHighPassFilter::Fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighPassFilter::Fs",1,"Filters::IIR::RBJFilters::RBJHighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighPassFilter::Fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighPassFilter,0))){
    SWIG_fail_ptr("IIRRBJHighPassBiquad_Fs_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighPassBiquad_Fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJHighPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJHighPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJHighPassFilter::Fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighPassFilter::Fs",1,"Filters::IIR::RBJFilters::RBJHighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighPassFilter,0))){
    SWIG_fail_ptr("IIRRBJHighPassBiquad_Fs_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighPassBiquad_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJHighPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJHighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJHighPassFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighPassFilter::Q",1,"Filters::IIR::RBJFilters::RBJHighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighPassFilter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighPassFilter,0))){
    SWIG_fail_ptr("IIRRBJHighPassBiquad_Q_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighPassBiquad_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJHighPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJHighPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJHighPassFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighPassFilter::Q",1,"Filters::IIR::RBJFilters::RBJHighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighPassFilter,0))){
    SWIG_fail_ptr("IIRRBJHighPassBiquad_Q_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighPassBiquad_G_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJHighPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJHighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJHighPassFilter::G",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighPassFilter::G",1,"Filters::IIR::RBJFilters::RBJHighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighPassFilter::G",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighPassFilter,0))){
    SWIG_fail_ptr("IIRRBJHighPassBiquad_G_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->G = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighPassBiquad_G_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJHighPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJHighPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJHighPassFilter::G",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighPassFilter::G",1,"Filters::IIR::RBJFilters::RBJHighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighPassFilter,0))){
    SWIG_fail_ptr("IIRRBJHighPassBiquad_G_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->G);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighPassBiquad_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJHighPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJHighPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJHighPassFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighPassFilter::R",1,"Filters::IIR::RBJFilters::RBJHighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighPassFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighPassFilter,0))){
    SWIG_fail_ptr("IIRRBJHighPassBiquad_R_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighPassBiquad_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJHighPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJHighPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJHighPassFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighPassFilter::R",1,"Filters::IIR::RBJFilters::RBJHighPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighPassFilter,0))){
    SWIG_fail_ptr("IIRRBJHighPassBiquad_R_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJHighPassBiquad__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJHighPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJHighPassFilter::RBJHighPassFilter",0,0)
  result = (Filters::IIR::RBJFilters::RBJHighPassFilter *)new Filters::IIR::RBJFilters::RBJHighPassFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJHighPassBiquad__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::RBJFilters::RBJHighPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJHighPassFilter::RBJHighPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighPassFilter::RBJHighPassFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighPassFilter::RBJHighPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighPassFilter::RBJHighPassFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighPassFilter::RBJHighPassFilter",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::RBJFilters::RBJHighPassFilter *)new Filters::IIR::RBJFilters::RBJHighPassFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJHighPassBiquad__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::RBJFilters::RBJHighPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJHighPassFilter::RBJHighPassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighPassFilter::RBJHighPassFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighPassFilter::RBJHighPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighPassFilter::RBJHighPassFilter",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::RBJFilters::RBJHighPassFilter *)new Filters::IIR::RBJFilters::RBJHighPassFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJHighPassBiquad__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Filters::IIR::RBJFilters::RBJHighPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJHighPassFilter::RBJHighPassFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighPassFilter::RBJHighPassFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighPassFilter::RBJHighPassFilter",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Filters::IIR::RBJFilters::RBJHighPassFilter *)new Filters::IIR::RBJFilters::RBJHighPassFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJHighPassBiquad(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_IIRRBJHighPassBiquad__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_IIRRBJHighPassBiquad__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_IIRRBJHighPassBiquad__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_IIRRBJHighPassBiquad__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IIRRBJHighPassBiquad'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::RBJFilters::RBJHighPassFilter::RBJHighPassFilter()\n"
    "    Filters::IIR::RBJFilters::RBJHighPassFilter::RBJHighPassFilter(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJFilters::RBJHighPassFilter::RBJHighPassFilter(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJFilters::RBJHighPassFilter::RBJHighPassFilter(DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRRBJHighPassBiquad(void *obj) {
Filters::IIR::RBJFilters::RBJHighPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJHighPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRRBJHighPassBiquad(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRRBJHighPassBiquad);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRRBJHighPassBiquad_attributes[] = {
    { "Fc", _wrap_IIRRBJHighPassBiquad_Fc_get, _wrap_IIRRBJHighPassBiquad_Fc_set },
    { "Fs", _wrap_IIRRBJHighPassBiquad_Fs_get, _wrap_IIRRBJHighPassBiquad_Fs_set },
    { "Q", _wrap_IIRRBJHighPassBiquad_Q_get, _wrap_IIRRBJHighPassBiquad_Q_set },
    { "G", _wrap_IIRRBJHighPassBiquad_G_get, _wrap_IIRRBJHighPassBiquad_G_set },
    { "R", _wrap_IIRRBJHighPassBiquad_R_get, _wrap_IIRRBJHighPassBiquad_R_set },
    {0,0,0}
};
static swig_lua_method swig_IIRRBJHighPassBiquad_methods[]= {
    {0,0}
};
static swig_lua_method swig_IIRRBJHighPassBiquad_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRRBJHighPassBiquad_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRRBJHighPassBiquad_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRRBJHighPassBiquad_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRRBJHighPassBiquad_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRRBJHighPassBiquad_Sf_SwigStatic = {
    "IIRRBJHighPassBiquad",
    swig_IIRRBJHighPassBiquad_Sf_SwigStatic_methods,
    swig_IIRRBJHighPassBiquad_Sf_SwigStatic_attributes,
    swig_IIRRBJHighPassBiquad_Sf_SwigStatic_constants,
    swig_IIRRBJHighPassBiquad_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRRBJHighPassBiquad_bases[] = {0,0};
static const char *swig_IIRRBJHighPassBiquad_base_names[] = {"Filters::IIR::RBJFilters::RBJBiquadFilter *",0};
static swig_lua_class _wrap_class_IIRRBJHighPassBiquad = { "IIRRBJHighPassBiquad", "IIRRBJHighPassBiquad", &SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighPassFilter,_proxy__wrap_new_IIRRBJHighPassBiquad, swig_delete_IIRRBJHighPassBiquad, swig_IIRRBJHighPassBiquad_methods, swig_IIRRBJHighPassBiquad_attributes, &swig_IIRRBJHighPassBiquad_Sf_SwigStatic, swig_IIRRBJHighPassBiquad_meta, swig_IIRRBJHighPassBiquad_bases, swig_IIRRBJHighPassBiquad_base_names };

static int _wrap_IIRRBJAllPassBiquad_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJAllPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJAllPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJAllPassFilter::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJAllPassFilter::Fc",1,"Filters::IIR::RBJFilters::RBJAllPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJAllPassFilter::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJAllPassFilter,0))){
    SWIG_fail_ptr("IIRRBJAllPassBiquad_Fc_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJAllPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJAllPassBiquad_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJAllPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJAllPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJAllPassFilter::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJAllPassFilter::Fc",1,"Filters::IIR::RBJFilters::RBJAllPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJAllPassFilter,0))){
    SWIG_fail_ptr("IIRRBJAllPassBiquad_Fc_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJAllPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJAllPassBiquad_Fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJAllPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJAllPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJAllPassFilter::Fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJAllPassFilter::Fs",1,"Filters::IIR::RBJFilters::RBJAllPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJAllPassFilter::Fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJAllPassFilter,0))){
    SWIG_fail_ptr("IIRRBJAllPassBiquad_Fs_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJAllPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJAllPassBiquad_Fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJAllPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJAllPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJAllPassFilter::Fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJAllPassFilter::Fs",1,"Filters::IIR::RBJFilters::RBJAllPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJAllPassFilter,0))){
    SWIG_fail_ptr("IIRRBJAllPassBiquad_Fs_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJAllPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJAllPassBiquad_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJAllPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJAllPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJAllPassFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJAllPassFilter::Q",1,"Filters::IIR::RBJFilters::RBJAllPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJAllPassFilter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJAllPassFilter,0))){
    SWIG_fail_ptr("IIRRBJAllPassBiquad_Q_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJAllPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJAllPassBiquad_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJAllPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJAllPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJAllPassFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJAllPassFilter::Q",1,"Filters::IIR::RBJFilters::RBJAllPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJAllPassFilter,0))){
    SWIG_fail_ptr("IIRRBJAllPassBiquad_Q_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJAllPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJAllPassBiquad_G_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJAllPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJAllPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJAllPassFilter::G",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJAllPassFilter::G",1,"Filters::IIR::RBJFilters::RBJAllPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJAllPassFilter::G",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJAllPassFilter,0))){
    SWIG_fail_ptr("IIRRBJAllPassBiquad_G_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJAllPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->G = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJAllPassBiquad_G_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJAllPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJAllPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJAllPassFilter::G",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJAllPassFilter::G",1,"Filters::IIR::RBJFilters::RBJAllPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJAllPassFilter,0))){
    SWIG_fail_ptr("IIRRBJAllPassBiquad_G_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJAllPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->G);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJAllPassBiquad_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJAllPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJAllPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJAllPassFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJAllPassFilter::R",1,"Filters::IIR::RBJFilters::RBJAllPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJAllPassFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJAllPassFilter,0))){
    SWIG_fail_ptr("IIRRBJAllPassBiquad_R_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJAllPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJAllPassBiquad_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJAllPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJAllPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJAllPassFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJAllPassFilter::R",1,"Filters::IIR::RBJFilters::RBJAllPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJAllPassFilter,0))){
    SWIG_fail_ptr("IIRRBJAllPassBiquad_R_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJAllPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJAllPassBiquad__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJAllPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJAllPassFilter::RBJAllPassFilter",0,0)
  result = (Filters::IIR::RBJFilters::RBJAllPassFilter *)new Filters::IIR::RBJFilters::RBJAllPassFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJAllPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJAllPassBiquad__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::RBJFilters::RBJAllPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJAllPassFilter::RBJAllPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJAllPassFilter::RBJAllPassFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJAllPassFilter::RBJAllPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJAllPassFilter::RBJAllPassFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJAllPassFilter::RBJAllPassFilter",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::RBJFilters::RBJAllPassFilter *)new Filters::IIR::RBJFilters::RBJAllPassFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJAllPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJAllPassBiquad__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::RBJFilters::RBJAllPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJAllPassFilter::RBJAllPassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJAllPassFilter::RBJAllPassFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJAllPassFilter::RBJAllPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJAllPassFilter::RBJAllPassFilter",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::RBJFilters::RBJAllPassFilter *)new Filters::IIR::RBJFilters::RBJAllPassFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJAllPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJAllPassBiquad__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Filters::IIR::RBJFilters::RBJAllPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJAllPassFilter::RBJAllPassFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJAllPassFilter::RBJAllPassFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJAllPassFilter::RBJAllPassFilter",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Filters::IIR::RBJFilters::RBJAllPassFilter *)new Filters::IIR::RBJFilters::RBJAllPassFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJAllPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJAllPassBiquad(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_IIRRBJAllPassBiquad__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_IIRRBJAllPassBiquad__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_IIRRBJAllPassBiquad__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_IIRRBJAllPassBiquad__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IIRRBJAllPassBiquad'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::RBJFilters::RBJAllPassFilter::RBJAllPassFilter()\n"
    "    Filters::IIR::RBJFilters::RBJAllPassFilter::RBJAllPassFilter(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJFilters::RBJAllPassFilter::RBJAllPassFilter(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJFilters::RBJAllPassFilter::RBJAllPassFilter(DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRRBJAllPassBiquad(void *obj) {
Filters::IIR::RBJFilters::RBJAllPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJAllPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRRBJAllPassBiquad(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRRBJAllPassBiquad);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRRBJAllPassBiquad_attributes[] = {
    { "Fc", _wrap_IIRRBJAllPassBiquad_Fc_get, _wrap_IIRRBJAllPassBiquad_Fc_set },
    { "Fs", _wrap_IIRRBJAllPassBiquad_Fs_get, _wrap_IIRRBJAllPassBiquad_Fs_set },
    { "Q", _wrap_IIRRBJAllPassBiquad_Q_get, _wrap_IIRRBJAllPassBiquad_Q_set },
    { "G", _wrap_IIRRBJAllPassBiquad_G_get, _wrap_IIRRBJAllPassBiquad_G_set },
    { "R", _wrap_IIRRBJAllPassBiquad_R_get, _wrap_IIRRBJAllPassBiquad_R_set },
    {0,0,0}
};
static swig_lua_method swig_IIRRBJAllPassBiquad_methods[]= {
    {0,0}
};
static swig_lua_method swig_IIRRBJAllPassBiquad_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRRBJAllPassBiquad_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRRBJAllPassBiquad_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRRBJAllPassBiquad_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRRBJAllPassBiquad_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRRBJAllPassBiquad_Sf_SwigStatic = {
    "IIRRBJAllPassBiquad",
    swig_IIRRBJAllPassBiquad_Sf_SwigStatic_methods,
    swig_IIRRBJAllPassBiquad_Sf_SwigStatic_attributes,
    swig_IIRRBJAllPassBiquad_Sf_SwigStatic_constants,
    swig_IIRRBJAllPassBiquad_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRRBJAllPassBiquad_bases[] = {0,0};
static const char *swig_IIRRBJAllPassBiquad_base_names[] = {"Filters::IIR::RBJFilters::RBJBiquadFilter *",0};
static swig_lua_class _wrap_class_IIRRBJAllPassBiquad = { "IIRRBJAllPassBiquad", "IIRRBJAllPassBiquad", &SWIGTYPE_p_Filters__IIR__RBJFilters__RBJAllPassFilter,_proxy__wrap_new_IIRRBJAllPassBiquad, swig_delete_IIRRBJAllPassBiquad, swig_IIRRBJAllPassBiquad_methods, swig_IIRRBJAllPassBiquad_attributes, &swig_IIRRBJAllPassBiquad_Sf_SwigStatic, swig_IIRRBJAllPassBiquad_meta, swig_IIRRBJAllPassBiquad_bases, swig_IIRRBJAllPassBiquad_base_names };

static int _wrap_IIRRBJBandPassBiquad_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBandPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJBandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBandPassFilter::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandPassFilter::Fc",1,"Filters::IIR::RBJFilters::RBJBandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandPassFilter::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandPassFilter,0))){
    SWIG_fail_ptr("IIRRBJBandPassBiquad_Fc_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandPassBiquad_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBandPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJBandPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBandPassFilter::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandPassFilter::Fc",1,"Filters::IIR::RBJFilters::RBJBandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandPassFilter,0))){
    SWIG_fail_ptr("IIRRBJBandPassBiquad_Fc_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandPassBiquad_Fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBandPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJBandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBandPassFilter::Fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandPassFilter::Fs",1,"Filters::IIR::RBJFilters::RBJBandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandPassFilter::Fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandPassFilter,0))){
    SWIG_fail_ptr("IIRRBJBandPassBiquad_Fs_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandPassBiquad_Fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBandPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJBandPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBandPassFilter::Fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandPassFilter::Fs",1,"Filters::IIR::RBJFilters::RBJBandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandPassFilter,0))){
    SWIG_fail_ptr("IIRRBJBandPassBiquad_Fs_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandPassBiquad_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBandPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJBandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBandPassFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandPassFilter::Q",1,"Filters::IIR::RBJFilters::RBJBandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandPassFilter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandPassFilter,0))){
    SWIG_fail_ptr("IIRRBJBandPassBiquad_Q_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandPassBiquad_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBandPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJBandPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBandPassFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandPassFilter::Q",1,"Filters::IIR::RBJFilters::RBJBandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandPassFilter,0))){
    SWIG_fail_ptr("IIRRBJBandPassBiquad_Q_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandPassBiquad_G_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBandPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJBandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBandPassFilter::G",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandPassFilter::G",1,"Filters::IIR::RBJFilters::RBJBandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandPassFilter::G",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandPassFilter,0))){
    SWIG_fail_ptr("IIRRBJBandPassBiquad_G_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->G = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandPassBiquad_G_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBandPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJBandPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBandPassFilter::G",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandPassFilter::G",1,"Filters::IIR::RBJFilters::RBJBandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandPassFilter,0))){
    SWIG_fail_ptr("IIRRBJBandPassBiquad_G_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->G);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandPassBiquad_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBandPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJBandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBandPassFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandPassFilter::R",1,"Filters::IIR::RBJFilters::RBJBandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandPassFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandPassFilter,0))){
    SWIG_fail_ptr("IIRRBJBandPassBiquad_R_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandPassBiquad_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBandPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJBandPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBandPassFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandPassFilter::R",1,"Filters::IIR::RBJFilters::RBJBandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandPassFilter,0))){
    SWIG_fail_ptr("IIRRBJBandPassBiquad_R_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJBandPassBiquad__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBandPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBandPassFilter::RBJBandPassFilter",0,0)
  result = (Filters::IIR::RBJFilters::RBJBandPassFilter *)new Filters::IIR::RBJFilters::RBJBandPassFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJBandPassBiquad__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::RBJFilters::RBJBandPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBandPassFilter::RBJBandPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandPassFilter::RBJBandPassFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandPassFilter::RBJBandPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandPassFilter::RBJBandPassFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandPassFilter::RBJBandPassFilter",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::RBJFilters::RBJBandPassFilter *)new Filters::IIR::RBJFilters::RBJBandPassFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJBandPassBiquad__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::RBJFilters::RBJBandPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBandPassFilter::RBJBandPassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandPassFilter::RBJBandPassFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandPassFilter::RBJBandPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandPassFilter::RBJBandPassFilter",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::RBJFilters::RBJBandPassFilter *)new Filters::IIR::RBJFilters::RBJBandPassFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJBandPassBiquad__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Filters::IIR::RBJFilters::RBJBandPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBandPassFilter::RBJBandPassFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandPassFilter::RBJBandPassFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandPassFilter::RBJBandPassFilter",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Filters::IIR::RBJFilters::RBJBandPassFilter *)new Filters::IIR::RBJFilters::RBJBandPassFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJBandPassBiquad(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_IIRRBJBandPassBiquad__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_IIRRBJBandPassBiquad__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_IIRRBJBandPassBiquad__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_IIRRBJBandPassBiquad__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IIRRBJBandPassBiquad'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::RBJFilters::RBJBandPassFilter::RBJBandPassFilter()\n"
    "    Filters::IIR::RBJFilters::RBJBandPassFilter::RBJBandPassFilter(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJFilters::RBJBandPassFilter::RBJBandPassFilter(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJFilters::RBJBandPassFilter::RBJBandPassFilter(DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRRBJBandPassBiquad(void *obj) {
Filters::IIR::RBJFilters::RBJBandPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJBandPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRRBJBandPassBiquad(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRRBJBandPassBiquad);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRRBJBandPassBiquad_attributes[] = {
    { "Fc", _wrap_IIRRBJBandPassBiquad_Fc_get, _wrap_IIRRBJBandPassBiquad_Fc_set },
    { "Fs", _wrap_IIRRBJBandPassBiquad_Fs_get, _wrap_IIRRBJBandPassBiquad_Fs_set },
    { "Q", _wrap_IIRRBJBandPassBiquad_Q_get, _wrap_IIRRBJBandPassBiquad_Q_set },
    { "G", _wrap_IIRRBJBandPassBiquad_G_get, _wrap_IIRRBJBandPassBiquad_G_set },
    { "R", _wrap_IIRRBJBandPassBiquad_R_get, _wrap_IIRRBJBandPassBiquad_R_set },
    {0,0,0}
};
static swig_lua_method swig_IIRRBJBandPassBiquad_methods[]= {
    {0,0}
};
static swig_lua_method swig_IIRRBJBandPassBiquad_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRRBJBandPassBiquad_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRRBJBandPassBiquad_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRRBJBandPassBiquad_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRRBJBandPassBiquad_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRRBJBandPassBiquad_Sf_SwigStatic = {
    "IIRRBJBandPassBiquad",
    swig_IIRRBJBandPassBiquad_Sf_SwigStatic_methods,
    swig_IIRRBJBandPassBiquad_Sf_SwigStatic_attributes,
    swig_IIRRBJBandPassBiquad_Sf_SwigStatic_constants,
    swig_IIRRBJBandPassBiquad_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRRBJBandPassBiquad_bases[] = {0,0};
static const char *swig_IIRRBJBandPassBiquad_base_names[] = {"Filters::IIR::RBJFilters::RBJBiquadFilter *",0};
static swig_lua_class _wrap_class_IIRRBJBandPassBiquad = { "IIRRBJBandPassBiquad", "IIRRBJBandPassBiquad", &SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandPassFilter,_proxy__wrap_new_IIRRBJBandPassBiquad, swig_delete_IIRRBJBandPassBiquad, swig_IIRRBJBandPassBiquad_methods, swig_IIRRBJBandPassBiquad_attributes, &swig_IIRRBJBandPassBiquad_Sf_SwigStatic, swig_IIRRBJBandPassBiquad_meta, swig_IIRRBJBandPassBiquad_bases, swig_IIRRBJBandPassBiquad_base_names };

static int _wrap_RBJSkirtBandPassFilter_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::Fc",1,"Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter,0))){
    SWIG_fail_ptr("RBJSkirtBandPassFilter_Fc_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJSkirtBandPassFilter_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::Fc",1,"Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter,0))){
    SWIG_fail_ptr("RBJSkirtBandPassFilter_Fc_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJSkirtBandPassFilter_Fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::Fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::Fs",1,"Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::Fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter,0))){
    SWIG_fail_ptr("RBJSkirtBandPassFilter_Fs_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJSkirtBandPassFilter_Fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::Fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::Fs",1,"Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter,0))){
    SWIG_fail_ptr("RBJSkirtBandPassFilter_Fs_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJSkirtBandPassFilter_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::Q",1,"Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter,0))){
    SWIG_fail_ptr("RBJSkirtBandPassFilter_Q_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJSkirtBandPassFilter_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::Q",1,"Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter,0))){
    SWIG_fail_ptr("RBJSkirtBandPassFilter_Q_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJSkirtBandPassFilter_G_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::G",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::G",1,"Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::G",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter,0))){
    SWIG_fail_ptr("RBJSkirtBandPassFilter_G_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->G = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJSkirtBandPassFilter_G_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::G",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::G",1,"Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter,0))){
    SWIG_fail_ptr("RBJSkirtBandPassFilter_G_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->G);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJSkirtBandPassFilter_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::R",1,"Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter,0))){
    SWIG_fail_ptr("RBJSkirtBandPassFilter_R_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJSkirtBandPassFilter_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::R",1,"Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter,0))){
    SWIG_fail_ptr("RBJSkirtBandPassFilter_R_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJSkirtBandPassFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::RBJSkirtBandPassFilter",0,0)
  result = (Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *)new Filters::IIR::RBJFilters::RBJSkirtBandPassFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJSkirtBandPassFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::RBJSkirtBandPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::RBJSkirtBandPassFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::RBJSkirtBandPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::RBJSkirtBandPassFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::RBJSkirtBandPassFilter",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *)new Filters::IIR::RBJFilters::RBJSkirtBandPassFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJSkirtBandPassFilter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::RBJSkirtBandPassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::RBJSkirtBandPassFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::RBJSkirtBandPassFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::RBJSkirtBandPassFilter",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *)new Filters::IIR::RBJFilters::RBJSkirtBandPassFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJSkirtBandPassFilter__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::RBJSkirtBandPassFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::RBJSkirtBandPassFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::RBJSkirtBandPassFilter",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *)new Filters::IIR::RBJFilters::RBJSkirtBandPassFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJSkirtBandPassFilter(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_RBJSkirtBandPassFilter__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_RBJSkirtBandPassFilter__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_RBJSkirtBandPassFilter__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_RBJSkirtBandPassFilter__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RBJSkirtBandPassFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::RBJSkirtBandPassFilter()\n"
    "    Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::RBJSkirtBandPassFilter(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::RBJSkirtBandPassFilter(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJFilters::RBJSkirtBandPassFilter::RBJSkirtBandPassFilter(DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_RBJSkirtBandPassFilter(void *obj) {
Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *arg1 = (Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_RBJSkirtBandPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RBJSkirtBandPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RBJSkirtBandPassFilter_attributes[] = {
    { "Fc", _wrap_RBJSkirtBandPassFilter_Fc_get, _wrap_RBJSkirtBandPassFilter_Fc_set },
    { "Fs", _wrap_RBJSkirtBandPassFilter_Fs_get, _wrap_RBJSkirtBandPassFilter_Fs_set },
    { "Q", _wrap_RBJSkirtBandPassFilter_Q_get, _wrap_RBJSkirtBandPassFilter_Q_set },
    { "G", _wrap_RBJSkirtBandPassFilter_G_get, _wrap_RBJSkirtBandPassFilter_G_set },
    { "R", _wrap_RBJSkirtBandPassFilter_R_get, _wrap_RBJSkirtBandPassFilter_R_set },
    {0,0,0}
};
static swig_lua_method swig_RBJSkirtBandPassFilter_methods[]= {
    {0,0}
};
static swig_lua_method swig_RBJSkirtBandPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RBJSkirtBandPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RBJSkirtBandPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RBJSkirtBandPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RBJSkirtBandPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RBJSkirtBandPassFilter_Sf_SwigStatic = {
    "RBJSkirtBandPassFilter",
    swig_RBJSkirtBandPassFilter_Sf_SwigStatic_methods,
    swig_RBJSkirtBandPassFilter_Sf_SwigStatic_attributes,
    swig_RBJSkirtBandPassFilter_Sf_SwigStatic_constants,
    swig_RBJSkirtBandPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RBJSkirtBandPassFilter_bases[] = {0,0};
static const char *swig_RBJSkirtBandPassFilter_base_names[] = {"Filters::IIR::RBJFilters::RBJBiquadFilter *",0};
static swig_lua_class _wrap_class_RBJSkirtBandPassFilter = { "RBJSkirtBandPassFilter", "RBJSkirtBandPassFilter", &SWIGTYPE_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter,_proxy__wrap_new_RBJSkirtBandPassFilter, swig_delete_RBJSkirtBandPassFilter, swig_RBJSkirtBandPassFilter_methods, swig_RBJSkirtBandPassFilter_attributes, &swig_RBJSkirtBandPassFilter_Sf_SwigStatic, swig_RBJSkirtBandPassFilter_meta, swig_RBJSkirtBandPassFilter_bases, swig_RBJSkirtBandPassFilter_base_names };

static int _wrap_IIRRBJBandStopBiquad_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBandStopFilter *arg1 = (Filters::IIR::RBJFilters::RBJBandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBandStopFilter::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandStopFilter::Fc",1,"Filters::IIR::RBJFilters::RBJBandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandStopFilter::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandStopFilter,0))){
    SWIG_fail_ptr("IIRRBJBandStopBiquad_Fc_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandStopBiquad_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBandStopFilter *arg1 = (Filters::IIR::RBJFilters::RBJBandStopFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBandStopFilter::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandStopFilter::Fc",1,"Filters::IIR::RBJFilters::RBJBandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandStopFilter,0))){
    SWIG_fail_ptr("IIRRBJBandStopBiquad_Fc_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandStopFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandStopBiquad_Fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBandStopFilter *arg1 = (Filters::IIR::RBJFilters::RBJBandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBandStopFilter::Fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandStopFilter::Fs",1,"Filters::IIR::RBJFilters::RBJBandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandStopFilter::Fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandStopFilter,0))){
    SWIG_fail_ptr("IIRRBJBandStopBiquad_Fs_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandStopBiquad_Fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBandStopFilter *arg1 = (Filters::IIR::RBJFilters::RBJBandStopFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBandStopFilter::Fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandStopFilter::Fs",1,"Filters::IIR::RBJFilters::RBJBandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandStopFilter,0))){
    SWIG_fail_ptr("IIRRBJBandStopBiquad_Fs_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandStopFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandStopBiquad_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBandStopFilter *arg1 = (Filters::IIR::RBJFilters::RBJBandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBandStopFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandStopFilter::Q",1,"Filters::IIR::RBJFilters::RBJBandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandStopFilter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandStopFilter,0))){
    SWIG_fail_ptr("IIRRBJBandStopBiquad_Q_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandStopBiquad_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBandStopFilter *arg1 = (Filters::IIR::RBJFilters::RBJBandStopFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBandStopFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandStopFilter::Q",1,"Filters::IIR::RBJFilters::RBJBandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandStopFilter,0))){
    SWIG_fail_ptr("IIRRBJBandStopBiquad_Q_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandStopFilter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandStopBiquad_G_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBandStopFilter *arg1 = (Filters::IIR::RBJFilters::RBJBandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBandStopFilter::G",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandStopFilter::G",1,"Filters::IIR::RBJFilters::RBJBandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandStopFilter::G",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandStopFilter,0))){
    SWIG_fail_ptr("IIRRBJBandStopBiquad_G_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->G = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandStopBiquad_G_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBandStopFilter *arg1 = (Filters::IIR::RBJFilters::RBJBandStopFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBandStopFilter::G",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandStopFilter::G",1,"Filters::IIR::RBJFilters::RBJBandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandStopFilter,0))){
    SWIG_fail_ptr("IIRRBJBandStopBiquad_G_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandStopFilter);
  }
  
  result = (DspFloatType) ((arg1)->G);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandStopBiquad_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBandStopFilter *arg1 = (Filters::IIR::RBJFilters::RBJBandStopFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBandStopFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandStopFilter::R",1,"Filters::IIR::RBJFilters::RBJBandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandStopFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandStopFilter,0))){
    SWIG_fail_ptr("IIRRBJBandStopBiquad_R_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandStopFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJBandStopBiquad_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBandStopFilter *arg1 = (Filters::IIR::RBJFilters::RBJBandStopFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBandStopFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandStopFilter::R",1,"Filters::IIR::RBJFilters::RBJBandStopFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandStopFilter,0))){
    SWIG_fail_ptr("IIRRBJBandStopBiquad_R_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandStopFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJBandStopBiquad__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJBandStopFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBandStopFilter::RBJBandStopFilter",0,0)
  result = (Filters::IIR::RBJFilters::RBJBandStopFilter *)new Filters::IIR::RBJFilters::RBJBandStopFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandStopFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJBandStopBiquad__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::RBJFilters::RBJBandStopFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBandStopFilter::RBJBandStopFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandStopFilter::RBJBandStopFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandStopFilter::RBJBandStopFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandStopFilter::RBJBandStopFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandStopFilter::RBJBandStopFilter",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::RBJFilters::RBJBandStopFilter *)new Filters::IIR::RBJFilters::RBJBandStopFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandStopFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJBandStopBiquad__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::RBJFilters::RBJBandStopFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBandStopFilter::RBJBandStopFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandStopFilter::RBJBandStopFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandStopFilter::RBJBandStopFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandStopFilter::RBJBandStopFilter",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::RBJFilters::RBJBandStopFilter *)new Filters::IIR::RBJFilters::RBJBandStopFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandStopFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJBandStopBiquad__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Filters::IIR::RBJFilters::RBJBandStopFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJBandStopFilter::RBJBandStopFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandStopFilter::RBJBandStopFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJBandStopFilter::RBJBandStopFilter",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Filters::IIR::RBJFilters::RBJBandStopFilter *)new Filters::IIR::RBJFilters::RBJBandStopFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandStopFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJBandStopBiquad(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_IIRRBJBandStopBiquad__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_IIRRBJBandStopBiquad__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_IIRRBJBandStopBiquad__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_IIRRBJBandStopBiquad__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IIRRBJBandStopBiquad'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::RBJFilters::RBJBandStopFilter::RBJBandStopFilter()\n"
    "    Filters::IIR::RBJFilters::RBJBandStopFilter::RBJBandStopFilter(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJFilters::RBJBandStopFilter::RBJBandStopFilter(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJFilters::RBJBandStopFilter::RBJBandStopFilter(DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRRBJBandStopBiquad(void *obj) {
Filters::IIR::RBJFilters::RBJBandStopFilter *arg1 = (Filters::IIR::RBJFilters::RBJBandStopFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRRBJBandStopBiquad(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRRBJBandStopBiquad);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRRBJBandStopBiquad_attributes[] = {
    { "Fc", _wrap_IIRRBJBandStopBiquad_Fc_get, _wrap_IIRRBJBandStopBiquad_Fc_set },
    { "Fs", _wrap_IIRRBJBandStopBiquad_Fs_get, _wrap_IIRRBJBandStopBiquad_Fs_set },
    { "Q", _wrap_IIRRBJBandStopBiquad_Q_get, _wrap_IIRRBJBandStopBiquad_Q_set },
    { "G", _wrap_IIRRBJBandStopBiquad_G_get, _wrap_IIRRBJBandStopBiquad_G_set },
    { "R", _wrap_IIRRBJBandStopBiquad_R_get, _wrap_IIRRBJBandStopBiquad_R_set },
    {0,0,0}
};
static swig_lua_method swig_IIRRBJBandStopBiquad_methods[]= {
    {0,0}
};
static swig_lua_method swig_IIRRBJBandStopBiquad_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRRBJBandStopBiquad_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRRBJBandStopBiquad_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRRBJBandStopBiquad_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRRBJBandStopBiquad_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRRBJBandStopBiquad_Sf_SwigStatic = {
    "IIRRBJBandStopBiquad",
    swig_IIRRBJBandStopBiquad_Sf_SwigStatic_methods,
    swig_IIRRBJBandStopBiquad_Sf_SwigStatic_attributes,
    swig_IIRRBJBandStopBiquad_Sf_SwigStatic_constants,
    swig_IIRRBJBandStopBiquad_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRRBJBandStopBiquad_bases[] = {0,0};
static const char *swig_IIRRBJBandStopBiquad_base_names[] = {"Filters::IIR::RBJFilters::RBJBiquadFilter *",0};
static swig_lua_class _wrap_class_IIRRBJBandStopBiquad = { "IIRRBJBandStopBiquad", "IIRRBJBandStopBiquad", &SWIGTYPE_p_Filters__IIR__RBJFilters__RBJBandStopFilter,_proxy__wrap_new_IIRRBJBandStopBiquad, swig_delete_IIRRBJBandStopBiquad, swig_IIRRBJBandStopBiquad_methods, swig_IIRRBJBandStopBiquad_attributes, &swig_IIRRBJBandStopBiquad_Sf_SwigStatic, swig_IIRRBJBandStopBiquad_meta, swig_IIRRBJBandStopBiquad_bases, swig_IIRRBJBandStopBiquad_base_names };

static int _wrap_IIRRBJPeakingBiquad_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJPeakFilter *arg1 = (Filters::IIR::RBJFilters::RBJPeakFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJPeakFilter::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJPeakFilter::Fc",1,"Filters::IIR::RBJFilters::RBJPeakFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJPeakFilter::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJPeakFilter,0))){
    SWIG_fail_ptr("IIRRBJPeakingBiquad_Fc_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJPeakFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJPeakingBiquad_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJPeakFilter *arg1 = (Filters::IIR::RBJFilters::RBJPeakFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJPeakFilter::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJPeakFilter::Fc",1,"Filters::IIR::RBJFilters::RBJPeakFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJPeakFilter,0))){
    SWIG_fail_ptr("IIRRBJPeakingBiquad_Fc_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJPeakFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJPeakingBiquad_Fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJPeakFilter *arg1 = (Filters::IIR::RBJFilters::RBJPeakFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJPeakFilter::Fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJPeakFilter::Fs",1,"Filters::IIR::RBJFilters::RBJPeakFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJPeakFilter::Fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJPeakFilter,0))){
    SWIG_fail_ptr("IIRRBJPeakingBiquad_Fs_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJPeakFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJPeakingBiquad_Fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJPeakFilter *arg1 = (Filters::IIR::RBJFilters::RBJPeakFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJPeakFilter::Fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJPeakFilter::Fs",1,"Filters::IIR::RBJFilters::RBJPeakFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJPeakFilter,0))){
    SWIG_fail_ptr("IIRRBJPeakingBiquad_Fs_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJPeakFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJPeakingBiquad_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJPeakFilter *arg1 = (Filters::IIR::RBJFilters::RBJPeakFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJPeakFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJPeakFilter::Q",1,"Filters::IIR::RBJFilters::RBJPeakFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJPeakFilter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJPeakFilter,0))){
    SWIG_fail_ptr("IIRRBJPeakingBiquad_Q_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJPeakFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJPeakingBiquad_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJPeakFilter *arg1 = (Filters::IIR::RBJFilters::RBJPeakFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJPeakFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJPeakFilter::Q",1,"Filters::IIR::RBJFilters::RBJPeakFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJPeakFilter,0))){
    SWIG_fail_ptr("IIRRBJPeakingBiquad_Q_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJPeakFilter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJPeakingBiquad_G_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJPeakFilter *arg1 = (Filters::IIR::RBJFilters::RBJPeakFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJPeakFilter::G",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJPeakFilter::G",1,"Filters::IIR::RBJFilters::RBJPeakFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJPeakFilter::G",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJPeakFilter,0))){
    SWIG_fail_ptr("IIRRBJPeakingBiquad_G_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJPeakFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->G = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJPeakingBiquad_G_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJPeakFilter *arg1 = (Filters::IIR::RBJFilters::RBJPeakFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJPeakFilter::G",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJPeakFilter::G",1,"Filters::IIR::RBJFilters::RBJPeakFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJPeakFilter,0))){
    SWIG_fail_ptr("IIRRBJPeakingBiquad_G_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJPeakFilter);
  }
  
  result = (DspFloatType) ((arg1)->G);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJPeakingBiquad_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJPeakFilter *arg1 = (Filters::IIR::RBJFilters::RBJPeakFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJPeakFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJPeakFilter::R",1,"Filters::IIR::RBJFilters::RBJPeakFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJPeakFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJPeakFilter,0))){
    SWIG_fail_ptr("IIRRBJPeakingBiquad_R_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJPeakFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJPeakingBiquad_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJPeakFilter *arg1 = (Filters::IIR::RBJFilters::RBJPeakFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJPeakFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJPeakFilter::R",1,"Filters::IIR::RBJFilters::RBJPeakFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJPeakFilter,0))){
    SWIG_fail_ptr("IIRRBJPeakingBiquad_R_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJPeakFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJPeakingBiquad__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJPeakFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJPeakFilter::RBJPeakFilter",0,0)
  result = (Filters::IIR::RBJFilters::RBJPeakFilter *)new Filters::IIR::RBJFilters::RBJPeakFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJPeakFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJPeakingBiquad__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::RBJFilters::RBJPeakFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJPeakFilter::RBJPeakFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJPeakFilter::RBJPeakFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJPeakFilter::RBJPeakFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJPeakFilter::RBJPeakFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJPeakFilter::RBJPeakFilter",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::RBJFilters::RBJPeakFilter *)new Filters::IIR::RBJFilters::RBJPeakFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJPeakFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJPeakingBiquad__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::RBJFilters::RBJPeakFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJPeakFilter::RBJPeakFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJPeakFilter::RBJPeakFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJPeakFilter::RBJPeakFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJPeakFilter::RBJPeakFilter",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::RBJFilters::RBJPeakFilter *)new Filters::IIR::RBJFilters::RBJPeakFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJPeakFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJPeakingBiquad__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Filters::IIR::RBJFilters::RBJPeakFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJPeakFilter::RBJPeakFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJPeakFilter::RBJPeakFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJPeakFilter::RBJPeakFilter",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Filters::IIR::RBJFilters::RBJPeakFilter *)new Filters::IIR::RBJFilters::RBJPeakFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJPeakFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJPeakingBiquad(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_IIRRBJPeakingBiquad__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_IIRRBJPeakingBiquad__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_IIRRBJPeakingBiquad__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_IIRRBJPeakingBiquad__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IIRRBJPeakingBiquad'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::RBJFilters::RBJPeakFilter::RBJPeakFilter()\n"
    "    Filters::IIR::RBJFilters::RBJPeakFilter::RBJPeakFilter(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJFilters::RBJPeakFilter::RBJPeakFilter(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJFilters::RBJPeakFilter::RBJPeakFilter(DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRRBJPeakingBiquad(void *obj) {
Filters::IIR::RBJFilters::RBJPeakFilter *arg1 = (Filters::IIR::RBJFilters::RBJPeakFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRRBJPeakingBiquad(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRRBJPeakingBiquad);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRRBJPeakingBiquad_attributes[] = {
    { "Fc", _wrap_IIRRBJPeakingBiquad_Fc_get, _wrap_IIRRBJPeakingBiquad_Fc_set },
    { "Fs", _wrap_IIRRBJPeakingBiquad_Fs_get, _wrap_IIRRBJPeakingBiquad_Fs_set },
    { "Q", _wrap_IIRRBJPeakingBiquad_Q_get, _wrap_IIRRBJPeakingBiquad_Q_set },
    { "G", _wrap_IIRRBJPeakingBiquad_G_get, _wrap_IIRRBJPeakingBiquad_G_set },
    { "R", _wrap_IIRRBJPeakingBiquad_R_get, _wrap_IIRRBJPeakingBiquad_R_set },
    {0,0,0}
};
static swig_lua_method swig_IIRRBJPeakingBiquad_methods[]= {
    {0,0}
};
static swig_lua_method swig_IIRRBJPeakingBiquad_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRRBJPeakingBiquad_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRRBJPeakingBiquad_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRRBJPeakingBiquad_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRRBJPeakingBiquad_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRRBJPeakingBiquad_Sf_SwigStatic = {
    "IIRRBJPeakingBiquad",
    swig_IIRRBJPeakingBiquad_Sf_SwigStatic_methods,
    swig_IIRRBJPeakingBiquad_Sf_SwigStatic_attributes,
    swig_IIRRBJPeakingBiquad_Sf_SwigStatic_constants,
    swig_IIRRBJPeakingBiquad_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRRBJPeakingBiquad_bases[] = {0,0};
static const char *swig_IIRRBJPeakingBiquad_base_names[] = {"Filters::IIR::RBJFilters::RBJBiquadFilter *",0};
static swig_lua_class _wrap_class_IIRRBJPeakingBiquad = { "IIRRBJPeakingBiquad", "IIRRBJPeakingBiquad", &SWIGTYPE_p_Filters__IIR__RBJFilters__RBJPeakFilter,_proxy__wrap_new_IIRRBJPeakingBiquad, swig_delete_IIRRBJPeakingBiquad, swig_IIRRBJPeakingBiquad_methods, swig_IIRRBJPeakingBiquad_attributes, &swig_IIRRBJPeakingBiquad_Sf_SwigStatic, swig_IIRRBJPeakingBiquad_meta, swig_IIRRBJPeakingBiquad_bases, swig_IIRRBJPeakingBiquad_base_names };

static int _wrap_IIRRBJLowShelfBiquad_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJLowShelfFilter *arg1 = (Filters::IIR::RBJFilters::RBJLowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJLowShelfFilter::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowShelfFilter::Fc",1,"Filters::IIR::RBJFilters::RBJLowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowShelfFilter::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJLowShelfBiquad_Fc_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowShelfBiquad_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJLowShelfFilter *arg1 = (Filters::IIR::RBJFilters::RBJLowShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJLowShelfFilter::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowShelfFilter::Fc",1,"Filters::IIR::RBJFilters::RBJLowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJLowShelfBiquad_Fc_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowShelfBiquad_Fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJLowShelfFilter *arg1 = (Filters::IIR::RBJFilters::RBJLowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJLowShelfFilter::Fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowShelfFilter::Fs",1,"Filters::IIR::RBJFilters::RBJLowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowShelfFilter::Fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJLowShelfBiquad_Fs_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowShelfBiquad_Fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJLowShelfFilter *arg1 = (Filters::IIR::RBJFilters::RBJLowShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJLowShelfFilter::Fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowShelfFilter::Fs",1,"Filters::IIR::RBJFilters::RBJLowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJLowShelfBiquad_Fs_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowShelfBiquad_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJLowShelfFilter *arg1 = (Filters::IIR::RBJFilters::RBJLowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJLowShelfFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowShelfFilter::Q",1,"Filters::IIR::RBJFilters::RBJLowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowShelfFilter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJLowShelfBiquad_Q_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowShelfBiquad_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJLowShelfFilter *arg1 = (Filters::IIR::RBJFilters::RBJLowShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJLowShelfFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowShelfFilter::Q",1,"Filters::IIR::RBJFilters::RBJLowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJLowShelfBiquad_Q_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowShelfBiquad_G_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJLowShelfFilter *arg1 = (Filters::IIR::RBJFilters::RBJLowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJLowShelfFilter::G",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowShelfFilter::G",1,"Filters::IIR::RBJFilters::RBJLowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowShelfFilter::G",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJLowShelfBiquad_G_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->G = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowShelfBiquad_G_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJLowShelfFilter *arg1 = (Filters::IIR::RBJFilters::RBJLowShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJLowShelfFilter::G",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowShelfFilter::G",1,"Filters::IIR::RBJFilters::RBJLowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJLowShelfBiquad_G_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->G);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowShelfBiquad_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJLowShelfFilter *arg1 = (Filters::IIR::RBJFilters::RBJLowShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJLowShelfFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowShelfFilter::R",1,"Filters::IIR::RBJFilters::RBJLowShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowShelfFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJLowShelfBiquad_R_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJLowShelfBiquad_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJLowShelfFilter *arg1 = (Filters::IIR::RBJFilters::RBJLowShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJLowShelfFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowShelfFilter::R",1,"Filters::IIR::RBJFilters::RBJLowShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJLowShelfBiquad_R_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJLowShelfBiquad__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJLowShelfFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJLowShelfFilter::RBJLowShelfFilter",0,0)
  result = (Filters::IIR::RBJFilters::RBJLowShelfFilter *)new Filters::IIR::RBJFilters::RBJLowShelfFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJLowShelfBiquad__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::RBJFilters::RBJLowShelfFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJLowShelfFilter::RBJLowShelfFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowShelfFilter::RBJLowShelfFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowShelfFilter::RBJLowShelfFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowShelfFilter::RBJLowShelfFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowShelfFilter::RBJLowShelfFilter",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::RBJFilters::RBJLowShelfFilter *)new Filters::IIR::RBJFilters::RBJLowShelfFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJLowShelfBiquad__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::RBJFilters::RBJLowShelfFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJLowShelfFilter::RBJLowShelfFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowShelfFilter::RBJLowShelfFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowShelfFilter::RBJLowShelfFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowShelfFilter::RBJLowShelfFilter",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::RBJFilters::RBJLowShelfFilter *)new Filters::IIR::RBJFilters::RBJLowShelfFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJLowShelfBiquad__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Filters::IIR::RBJFilters::RBJLowShelfFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJLowShelfFilter::RBJLowShelfFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowShelfFilter::RBJLowShelfFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJLowShelfFilter::RBJLowShelfFilter",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Filters::IIR::RBJFilters::RBJLowShelfFilter *)new Filters::IIR::RBJFilters::RBJLowShelfFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJLowShelfBiquad(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_IIRRBJLowShelfBiquad__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_IIRRBJLowShelfBiquad__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_IIRRBJLowShelfBiquad__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_IIRRBJLowShelfBiquad__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IIRRBJLowShelfBiquad'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::RBJFilters::RBJLowShelfFilter::RBJLowShelfFilter()\n"
    "    Filters::IIR::RBJFilters::RBJLowShelfFilter::RBJLowShelfFilter(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJFilters::RBJLowShelfFilter::RBJLowShelfFilter(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJFilters::RBJLowShelfFilter::RBJLowShelfFilter(DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRRBJLowShelfBiquad(void *obj) {
Filters::IIR::RBJFilters::RBJLowShelfFilter *arg1 = (Filters::IIR::RBJFilters::RBJLowShelfFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRRBJLowShelfBiquad(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRRBJLowShelfBiquad);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRRBJLowShelfBiquad_attributes[] = {
    { "Fc", _wrap_IIRRBJLowShelfBiquad_Fc_get, _wrap_IIRRBJLowShelfBiquad_Fc_set },
    { "Fs", _wrap_IIRRBJLowShelfBiquad_Fs_get, _wrap_IIRRBJLowShelfBiquad_Fs_set },
    { "Q", _wrap_IIRRBJLowShelfBiquad_Q_get, _wrap_IIRRBJLowShelfBiquad_Q_set },
    { "G", _wrap_IIRRBJLowShelfBiquad_G_get, _wrap_IIRRBJLowShelfBiquad_G_set },
    { "R", _wrap_IIRRBJLowShelfBiquad_R_get, _wrap_IIRRBJLowShelfBiquad_R_set },
    {0,0,0}
};
static swig_lua_method swig_IIRRBJLowShelfBiquad_methods[]= {
    {0,0}
};
static swig_lua_method swig_IIRRBJLowShelfBiquad_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRRBJLowShelfBiquad_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRRBJLowShelfBiquad_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRRBJLowShelfBiquad_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRRBJLowShelfBiquad_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRRBJLowShelfBiquad_Sf_SwigStatic = {
    "IIRRBJLowShelfBiquad",
    swig_IIRRBJLowShelfBiquad_Sf_SwigStatic_methods,
    swig_IIRRBJLowShelfBiquad_Sf_SwigStatic_attributes,
    swig_IIRRBJLowShelfBiquad_Sf_SwigStatic_constants,
    swig_IIRRBJLowShelfBiquad_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRRBJLowShelfBiquad_bases[] = {0,0};
static const char *swig_IIRRBJLowShelfBiquad_base_names[] = {"Filters::IIR::RBJFilters::RBJBiquadFilter *",0};
static swig_lua_class _wrap_class_IIRRBJLowShelfBiquad = { "IIRRBJLowShelfBiquad", "IIRRBJLowShelfBiquad", &SWIGTYPE_p_Filters__IIR__RBJFilters__RBJLowShelfFilter,_proxy__wrap_new_IIRRBJLowShelfBiquad, swig_delete_IIRRBJLowShelfBiquad, swig_IIRRBJLowShelfBiquad_methods, swig_IIRRBJLowShelfBiquad_attributes, &swig_IIRRBJLowShelfBiquad_Sf_SwigStatic, swig_IIRRBJLowShelfBiquad_meta, swig_IIRRBJLowShelfBiquad_bases, swig_IIRRBJLowShelfBiquad_base_names };

static int _wrap_IIRRBJHighShelfBiquad_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJHighShelfFilter *arg1 = (Filters::IIR::RBJFilters::RBJHighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJHighShelfFilter::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighShelfFilter::Fc",1,"Filters::IIR::RBJFilters::RBJHighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighShelfFilter::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJHighShelfBiquad_Fc_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighShelfBiquad_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJHighShelfFilter *arg1 = (Filters::IIR::RBJFilters::RBJHighShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJHighShelfFilter::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighShelfFilter::Fc",1,"Filters::IIR::RBJFilters::RBJHighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJHighShelfBiquad_Fc_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighShelfBiquad_Fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJHighShelfFilter *arg1 = (Filters::IIR::RBJFilters::RBJHighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJHighShelfFilter::Fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighShelfFilter::Fs",1,"Filters::IIR::RBJFilters::RBJHighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighShelfFilter::Fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJHighShelfBiquad_Fs_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighShelfBiquad_Fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJHighShelfFilter *arg1 = (Filters::IIR::RBJFilters::RBJHighShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJHighShelfFilter::Fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighShelfFilter::Fs",1,"Filters::IIR::RBJFilters::RBJHighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJHighShelfBiquad_Fs_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighShelfBiquad_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJHighShelfFilter *arg1 = (Filters::IIR::RBJFilters::RBJHighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJHighShelfFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighShelfFilter::Q",1,"Filters::IIR::RBJFilters::RBJHighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighShelfFilter::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJHighShelfBiquad_Q_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighShelfBiquad_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJHighShelfFilter *arg1 = (Filters::IIR::RBJFilters::RBJHighShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJHighShelfFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighShelfFilter::Q",1,"Filters::IIR::RBJFilters::RBJHighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJHighShelfBiquad_Q_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighShelfBiquad_G_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJHighShelfFilter *arg1 = (Filters::IIR::RBJFilters::RBJHighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJHighShelfFilter::G",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighShelfFilter::G",1,"Filters::IIR::RBJFilters::RBJHighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighShelfFilter::G",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJHighShelfBiquad_G_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->G = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighShelfBiquad_G_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJHighShelfFilter *arg1 = (Filters::IIR::RBJFilters::RBJHighShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJHighShelfFilter::G",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighShelfFilter::G",1,"Filters::IIR::RBJFilters::RBJHighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJHighShelfBiquad_G_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->G);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighShelfBiquad_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJHighShelfFilter *arg1 = (Filters::IIR::RBJFilters::RBJHighShelfFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJHighShelfFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighShelfFilter::R",1,"Filters::IIR::RBJFilters::RBJHighShelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighShelfFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJHighShelfBiquad_R_set",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighShelfFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IIRRBJHighShelfBiquad_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJHighShelfFilter *arg1 = (Filters::IIR::RBJFilters::RBJHighShelfFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJHighShelfFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighShelfFilter::R",1,"Filters::IIR::RBJFilters::RBJHighShelfFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighShelfFilter,0))){
    SWIG_fail_ptr("IIRRBJHighShelfBiquad_R_get",1,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighShelfFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJHighShelfBiquad__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::IIR::RBJFilters::RBJHighShelfFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJHighShelfFilter::RBJHighShelfFilter",0,0)
  result = (Filters::IIR::RBJFilters::RBJHighShelfFilter *)new Filters::IIR::RBJFilters::RBJHighShelfFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJHighShelfBiquad__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Filters::IIR::RBJFilters::RBJHighShelfFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJHighShelfFilter::RBJHighShelfFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighShelfFilter::RBJHighShelfFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighShelfFilter::RBJHighShelfFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighShelfFilter::RBJHighShelfFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighShelfFilter::RBJHighShelfFilter",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Filters::IIR::RBJFilters::RBJHighShelfFilter *)new Filters::IIR::RBJFilters::RBJHighShelfFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJHighShelfBiquad__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Filters::IIR::RBJFilters::RBJHighShelfFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJHighShelfFilter::RBJHighShelfFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighShelfFilter::RBJHighShelfFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighShelfFilter::RBJHighShelfFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighShelfFilter::RBJHighShelfFilter",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Filters::IIR::RBJFilters::RBJHighShelfFilter *)new Filters::IIR::RBJFilters::RBJHighShelfFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJHighShelfBiquad__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Filters::IIR::RBJFilters::RBJHighShelfFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::IIR::RBJFilters::RBJHighShelfFilter::RBJHighShelfFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighShelfFilter::RBJHighShelfFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::IIR::RBJFilters::RBJHighShelfFilter::RBJHighShelfFilter",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Filters::IIR::RBJFilters::RBJHighShelfFilter *)new Filters::IIR::RBJFilters::RBJHighShelfFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IIRRBJHighShelfBiquad(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_IIRRBJHighShelfBiquad__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_IIRRBJHighShelfBiquad__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_IIRRBJHighShelfBiquad__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_IIRRBJHighShelfBiquad__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IIRRBJHighShelfBiquad'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::IIR::RBJFilters::RBJHighShelfFilter::RBJHighShelfFilter()\n"
    "    Filters::IIR::RBJFilters::RBJHighShelfFilter::RBJHighShelfFilter(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJFilters::RBJHighShelfFilter::RBJHighShelfFilter(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Filters::IIR::RBJFilters::RBJHighShelfFilter::RBJHighShelfFilter(DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_IIRRBJHighShelfBiquad(void *obj) {
Filters::IIR::RBJFilters::RBJHighShelfFilter *arg1 = (Filters::IIR::RBJFilters::RBJHighShelfFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_IIRRBJHighShelfBiquad(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IIRRBJHighShelfBiquad);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IIRRBJHighShelfBiquad_attributes[] = {
    { "Fc", _wrap_IIRRBJHighShelfBiquad_Fc_get, _wrap_IIRRBJHighShelfBiquad_Fc_set },
    { "Fs", _wrap_IIRRBJHighShelfBiquad_Fs_get, _wrap_IIRRBJHighShelfBiquad_Fs_set },
    { "Q", _wrap_IIRRBJHighShelfBiquad_Q_get, _wrap_IIRRBJHighShelfBiquad_Q_set },
    { "G", _wrap_IIRRBJHighShelfBiquad_G_get, _wrap_IIRRBJHighShelfBiquad_G_set },
    { "R", _wrap_IIRRBJHighShelfBiquad_R_get, _wrap_IIRRBJHighShelfBiquad_R_set },
    {0,0,0}
};
static swig_lua_method swig_IIRRBJHighShelfBiquad_methods[]= {
    {0,0}
};
static swig_lua_method swig_IIRRBJHighShelfBiquad_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IIRRBJHighShelfBiquad_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IIRRBJHighShelfBiquad_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IIRRBJHighShelfBiquad_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IIRRBJHighShelfBiquad_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IIRRBJHighShelfBiquad_Sf_SwigStatic = {
    "IIRRBJHighShelfBiquad",
    swig_IIRRBJHighShelfBiquad_Sf_SwigStatic_methods,
    swig_IIRRBJHighShelfBiquad_Sf_SwigStatic_attributes,
    swig_IIRRBJHighShelfBiquad_Sf_SwigStatic_constants,
    swig_IIRRBJHighShelfBiquad_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IIRRBJHighShelfBiquad_bases[] = {0,0};
static const char *swig_IIRRBJHighShelfBiquad_base_names[] = {"Filters::IIR::RBJFilters::RBJBiquadFilter *",0};
static swig_lua_class _wrap_class_IIRRBJHighShelfBiquad = { "IIRRBJHighShelfBiquad", "IIRRBJHighShelfBiquad", &SWIGTYPE_p_Filters__IIR__RBJFilters__RBJHighShelfFilter,_proxy__wrap_new_IIRRBJHighShelfBiquad, swig_delete_IIRRBJHighShelfBiquad, swig_IIRRBJHighShelfBiquad_methods, swig_IIRRBJHighShelfBiquad_attributes, &swig_IIRRBJHighShelfBiquad_Sf_SwigStatic, swig_IIRRBJHighShelfBiquad_meta, swig_IIRRBJHighShelfBiquad_bases, swig_IIRRBJHighShelfBiquad_base_names };

static int _wrap_new_float_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float *arg2 = 0 ;
  float temp2 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::vector",2,"float const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< float > *)new std::vector< float >(arg1,(float const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< float > *)new std::vector< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"std::vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("new_float_vector",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (std::vector< float > *)new std::vector< float >((std::vector< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_float_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_float_vector__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_float_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::vector(size_t,float const &)\n"
    "    std::vector< float >::vector(size_t)\n"
    "    std::vector< float >::vector(std::vector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("std::vector< float >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::__getitem",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector___getitem",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)std_vector_Sl_float_Sg____getitem__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("std::vector< float >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::__setitem",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float >::__setitem",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector___setitem",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  std_vector_Sl_float_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_begin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  SwigValueWrapper< std::vector_iterator< float > > result;
  
  SWIG_check_num_args("std::vector< float >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::begin",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_begin",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = std_vector_Sl_float_Sg__begin__SWIG(arg1);
  {
    std::vector_iterator< float > * resultptr = new std::vector_iterator< float >((const std::vector_iterator< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_c_end(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  SwigValueWrapper< std::vector_iterator< float > > result;
  
  SWIG_check_num_args("std::vector< float >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::end",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_c_end",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = std_vector_Sl_float_Sg__end__SWIG(arg1);
  {
    std::vector_iterator< float > * resultptr = new std::vector_iterator< float >((const std::vector_iterator< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< float >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::erase",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_erase",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_float_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< float >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::erase",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_erase",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_float_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::erase(size_t)\n"
    "    std::vector< float >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_float_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::front",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_front",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (float *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::back",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (float *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("std::vector< float >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::push_back",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::push_back",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_push_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  SWIG_check_num_args("std::vector< float >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::pop_back",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_pop_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::at",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_at",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("std::vector< float >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::assign",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float >::assign",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_assign",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::data",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_data",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (float *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::size",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_size",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< float >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::empty",1,"std::vector< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_empty",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (bool)((std::vector< float > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< float >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::resize",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_resize",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  SWIG_check_num_args("std::vector< float >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::clear",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_clear",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< float >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::swap",1,"std::vector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< float >::swap",2,"std::vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_swap",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_swap",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  SWIG_check_num_args("std::vector< float >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::shrink_to_fit",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< float >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::reserve",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_reserve",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< float >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::max_size",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_max_size",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< float >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::capacity",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_capacity",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_vector(void *obj) {
std::vector< float > *arg1 = (std::vector< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_vector_methods[]= {
    { "__getitem", _wrap_float_vector___getitem},
    { "__setitem", _wrap_float_vector___setitem},
    { "begin", _wrap_float_vector_begin},
    { "c_end", _wrap_float_vector_c_end},
    { "erase", _wrap_float_vector_erase},
    { "front", _wrap_float_vector_front},
    { "back", _wrap_float_vector_back},
    { "push_back", _wrap_float_vector_push_back},
    { "pop_back", _wrap_float_vector_pop_back},
    { "at", _wrap_float_vector_at},
    { "assign", _wrap_float_vector_assign},
    { "data", _wrap_float_vector_data},
    { "size", _wrap_float_vector_size},
    { "empty", _wrap_float_vector_empty},
    { "resize", _wrap_float_vector_resize},
    { "clear", _wrap_float_vector_clear},
    { "swap", _wrap_float_vector_swap},
    { "shrink_to_fit", _wrap_float_vector_shrink_to_fit},
    { "reserve", _wrap_float_vector_reserve},
    { "max_size", _wrap_float_vector_max_size},
    { "capacity", _wrap_float_vector_capacity},
    {0,0}
};
static swig_lua_method swig_float_vector_meta[] = {
    { "__getitem", _wrap_float_vector___getitem},
    { "__setitem", _wrap_float_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_float_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_vector_Sf_SwigStatic = {
    "float_vector",
    swig_float_vector_Sf_SwigStatic_methods,
    swig_float_vector_Sf_SwigStatic_attributes,
    swig_float_vector_Sf_SwigStatic_constants,
    swig_float_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_vector_bases[] = {0};
static const char *swig_float_vector_base_names[] = {0};
static swig_lua_class _wrap_class_float_vector = { "float_vector", "float_vector", &SWIGTYPE_p_std__vectorT_float_t,_proxy__wrap_new_float_vector, swig_delete_float_vector, swig_float_vector_methods, swig_float_vector_attributes, &swig_float_vector_Sf_SwigStatic, swig_float_vector_meta, swig_float_vector_bases, swig_float_vector_base_names };

static int _wrap_new_double_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double *arg2 = 0 ;
  double temp2 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::vector",2,"double const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< double > *)new std::vector< double >(arg1,(double const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< double > *)new std::vector< double >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"std::vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("new_double_vector",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_double_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_double_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_double_vector__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_double_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::vector(size_t,double const &)\n"
    "    std::vector< double >::vector(size_t)\n"
    "    std::vector< double >::vector(std::vector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_double_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("std::vector< double >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::__getitem",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector___getitem",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)std_vector_Sl_double_Sg____getitem__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("std::vector< double >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::__setitem",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< double >::__setitem",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector___setitem",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  std_vector_Sl_double_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_begin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  SwigValueWrapper< std::vector_iterator< double > > result;
  
  SWIG_check_num_args("std::vector< double >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::begin",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_begin",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = std_vector_Sl_double_Sg__begin__SWIG(arg1);
  {
    std::vector_iterator< double > * resultptr = new std::vector_iterator< double >((const std::vector_iterator< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_c_end(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  SwigValueWrapper< std::vector_iterator< double > > result;
  
  SWIG_check_num_args("std::vector< double >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::end",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_c_end",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = std_vector_Sl_double_Sg__end__SWIG(arg1);
  {
    std::vector_iterator< double > * resultptr = new std::vector_iterator< double >((const std::vector_iterator< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< double >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::erase",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_erase",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_double_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< double >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::erase",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< double >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_erase",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_double_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_double_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::erase(size_t)\n"
    "    std::vector< double >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_double_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::front",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_front",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::back",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_num_args("std::vector< double >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::push_back",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::push_back",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_push_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("std::vector< double >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::pop_back",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_pop_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::at",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_at",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  SWIG_check_num_args("std::vector< double >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::assign",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< double >::assign",3,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_assign",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(double const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::data",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_data",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< double >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::size",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_size",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< double >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::empty",1,"std::vector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_empty",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)((std::vector< double > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< double >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::resize",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_resize",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("std::vector< double >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::clear",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_clear",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< double >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::swap",1,"std::vector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< double >::swap",2,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_swap",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_swap",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("std::vector< double >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::shrink_to_fit",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< double >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::reserve",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_reserve",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< double >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::max_size",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_max_size",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< double >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::capacity",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_capacity",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_vector(void *obj) {
std::vector< double > *arg1 = (std::vector< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_double_vector_methods[]= {
    { "__getitem", _wrap_double_vector___getitem},
    { "__setitem", _wrap_double_vector___setitem},
    { "begin", _wrap_double_vector_begin},
    { "c_end", _wrap_double_vector_c_end},
    { "erase", _wrap_double_vector_erase},
    { "front", _wrap_double_vector_front},
    { "back", _wrap_double_vector_back},
    { "push_back", _wrap_double_vector_push_back},
    { "pop_back", _wrap_double_vector_pop_back},
    { "at", _wrap_double_vector_at},
    { "assign", _wrap_double_vector_assign},
    { "data", _wrap_double_vector_data},
    { "size", _wrap_double_vector_size},
    { "empty", _wrap_double_vector_empty},
    { "resize", _wrap_double_vector_resize},
    { "clear", _wrap_double_vector_clear},
    { "swap", _wrap_double_vector_swap},
    { "shrink_to_fit", _wrap_double_vector_shrink_to_fit},
    { "reserve", _wrap_double_vector_reserve},
    { "max_size", _wrap_double_vector_max_size},
    { "capacity", _wrap_double_vector_capacity},
    {0,0}
};
static swig_lua_method swig_double_vector_meta[] = {
    { "__getitem", _wrap_double_vector___getitem},
    { "__setitem", _wrap_double_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_double_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_vector_Sf_SwigStatic = {
    "double_vector",
    swig_double_vector_Sf_SwigStatic_methods,
    swig_double_vector_Sf_SwigStatic_attributes,
    swig_double_vector_Sf_SwigStatic_constants,
    swig_double_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_vector_bases[] = {0};
static const char *swig_double_vector_base_names[] = {0};
static swig_lua_class _wrap_class_double_vector = { "double_vector", "double_vector", &SWIGTYPE_p_std__vectorT_double_t,_proxy__wrap_new_double_vector, swig_delete_double_vector, swig_double_vector_methods, swig_double_vector_attributes, &swig_double_vector_Sf_SwigStatic, swig_double_vector_meta, swig_double_vector_bases, swig_double_vector_base_names };

static int _wrap_new_complex_float_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::complex< float > *arg2 = 0 ;
  std::vector< std::complex< float > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::vector",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::vector",2,"std::complex< float > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("new_complex_float_vector",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (std::vector< std::complex< float > > *)new std::vector< std::complex< float > >(arg1,(std::complex< float > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_float_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< std::complex< float > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< std::complex< float > > *)new std::vector< std::complex< float > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_float_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = 0 ;
  std::vector< std::complex< float > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::vector",1,"std::vector< std::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("new_complex_float_vector",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (std::vector< std::complex< float > > *)new std::vector< std::complex< float > >((std::vector< std::complex< float > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_float_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_complex_float_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_complex_float_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_complex_float_vector__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_complex_float_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< float > >::vector(size_t,std::complex< float > const &)\n"
    "    std::vector< std::complex< float > >::vector(size_t)\n"
    "    std::vector< std::complex< float > >::vector(std::vector< std::complex< float > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_float_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::__getitem",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector___getitem",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = std_vector_Sl_std_complex_Sl_float_Sg__Sg____getitem__SWIG(arg1,arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  std::complex< float > arg3 ;
  std::complex< float > *argp3 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::__setitem",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::complex< float > >::__setitem",3,"std::complex< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector___setitem",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("complex_float_vector___setitem",3,SWIGTYPE_p_std__complexT_float_t);
  }
  arg3 = *argp3;
  
  std_vector_Sl_std_complex_Sl_float_Sg__Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_begin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::complex< float > > > result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::begin",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_begin",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = std_vector_Sl_std_complex_Sl_float_Sg__Sg__begin__SWIG(arg1);
  {
    std::vector_iterator< std::complex< float > > * resultptr = new std::vector_iterator< std::complex< float > >((const std::vector_iterator< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_c_end(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::complex< float > > > result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::end",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_c_end",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = std_vector_Sl_std_complex_Sl_float_Sg__Sg__end__SWIG(arg1);
  {
    std::vector_iterator< std::complex< float > > * resultptr = new std::vector_iterator< std::complex< float > >((const std::vector_iterator< std::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::erase",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_erase",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_std_complex_Sl_float_Sg__Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::erase",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< std::complex< float > >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_erase",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_std_complex_Sl_float_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_complex_float_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_complex_float_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'complex_float_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< float > >::erase(size_t)\n"
    "    std::vector< std::complex< float > >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_float_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::front",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_front",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (std::complex< float > *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::back",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_back",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (std::complex< float > *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::push_back",1,"std::vector< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::push_back",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_push_back",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("complex_float_vector_push_back",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  (arg1)->push_back((std::complex< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::pop_back",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_pop_back",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::at",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_at",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::complex< float > *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  std::complex< float > *arg3 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::assign",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::assign",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::complex< float > >::assign",3,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_assign",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("complex_float_vector_assign",3,SWIGTYPE_p_std__complexT_float_t);
  }
  
  (arg1)->assign(arg2,(std::complex< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::data",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_data",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (std::complex< float > *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::size",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_size",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::empty",1,"std::vector< std::complex< float > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_empty",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (bool)((std::vector< std::complex< float > > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::resize",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_resize",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::clear",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_clear",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::vector< std::complex< float > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::swap",1,"std::vector< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::swap",2,"std::vector< std::complex< float > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_swap",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_swap",2,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::shrink_to_fit",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::reserve",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_reserve",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::max_size",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_max_size",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::capacity",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_capacity",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_complex_float_vector(void *obj) {
std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_complex_float_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_complex_float_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_complex_float_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_complex_float_vector_methods[]= {
    { "__getitem", _wrap_complex_float_vector___getitem},
    { "__setitem", _wrap_complex_float_vector___setitem},
    { "begin", _wrap_complex_float_vector_begin},
    { "c_end", _wrap_complex_float_vector_c_end},
    { "erase", _wrap_complex_float_vector_erase},
    { "front", _wrap_complex_float_vector_front},
    { "back", _wrap_complex_float_vector_back},
    { "push_back", _wrap_complex_float_vector_push_back},
    { "pop_back", _wrap_complex_float_vector_pop_back},
    { "at", _wrap_complex_float_vector_at},
    { "assign", _wrap_complex_float_vector_assign},
    { "data", _wrap_complex_float_vector_data},
    { "size", _wrap_complex_float_vector_size},
    { "empty", _wrap_complex_float_vector_empty},
    { "resize", _wrap_complex_float_vector_resize},
    { "clear", _wrap_complex_float_vector_clear},
    { "swap", _wrap_complex_float_vector_swap},
    { "shrink_to_fit", _wrap_complex_float_vector_shrink_to_fit},
    { "reserve", _wrap_complex_float_vector_reserve},
    { "max_size", _wrap_complex_float_vector_max_size},
    { "capacity", _wrap_complex_float_vector_capacity},
    {0,0}
};
static swig_lua_method swig_complex_float_vector_meta[] = {
    { "__getitem", _wrap_complex_float_vector___getitem},
    { "__setitem", _wrap_complex_float_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_complex_float_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_complex_float_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_complex_float_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_complex_float_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_complex_float_vector_Sf_SwigStatic = {
    "complex_float_vector",
    swig_complex_float_vector_Sf_SwigStatic_methods,
    swig_complex_float_vector_Sf_SwigStatic_attributes,
    swig_complex_float_vector_Sf_SwigStatic_constants,
    swig_complex_float_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_complex_float_vector_bases[] = {0};
static const char *swig_complex_float_vector_base_names[] = {0};
static swig_lua_class _wrap_class_complex_float_vector = { "complex_float_vector", "complex_float_vector", &SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,_proxy__wrap_new_complex_float_vector, swig_delete_complex_float_vector, swig_complex_float_vector_methods, swig_complex_float_vector_attributes, &swig_complex_float_vector_Sf_SwigStatic, swig_complex_float_vector_meta, swig_complex_float_vector_bases, swig_complex_float_vector_base_names };

static int _wrap_new_complex_double_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::complex< double > *arg2 = 0 ;
  std::vector< std::complex< double > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::vector",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::vector",2,"std::complex< double > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("new_complex_double_vector",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (std::vector< std::complex< double > > *)new std::vector< std::complex< double > >(arg1,(std::complex< double > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_double_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< std::complex< double > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< std::complex< double > > *)new std::vector< std::complex< double > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_double_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = 0 ;
  std::vector< std::complex< double > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::vector",1,"std::vector< std::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("new_complex_double_vector",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (std::vector< std::complex< double > > *)new std::vector< std::complex< double > >((std::vector< std::complex< double > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_double_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_complex_double_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_complex_double_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_complex_double_vector__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_complex_double_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< double > >::vector(size_t,std::complex< double > const &)\n"
    "    std::vector< std::complex< double > >::vector(size_t)\n"
    "    std::vector< std::complex< double > >::vector(std::vector< std::complex< double > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_double_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::__getitem",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector___getitem",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = std_vector_Sl_std_complex_Sl_double_Sg__Sg____getitem__SWIG(arg1,arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  std::complex< double > arg3 ;
  std::complex< double > *argp3 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::__setitem",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::complex< double > >::__setitem",3,"std::complex< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector___setitem",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex_double_vector___setitem",3,SWIGTYPE_p_std__complexT_double_t);
  }
  arg3 = *argp3;
  
  std_vector_Sl_std_complex_Sl_double_Sg__Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_begin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::complex< double > > > result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::begin",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_begin",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = std_vector_Sl_std_complex_Sl_double_Sg__Sg__begin__SWIG(arg1);
  {
    std::vector_iterator< std::complex< double > > * resultptr = new std::vector_iterator< std::complex< double > >((const std::vector_iterator< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_c_end(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::complex< double > > > result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::end",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_c_end",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = std_vector_Sl_std_complex_Sl_double_Sg__Sg__end__SWIG(arg1);
  {
    std::vector_iterator< std::complex< double > > * resultptr = new std::vector_iterator< std::complex< double > >((const std::vector_iterator< std::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::erase",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_erase",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_std_complex_Sl_double_Sg__Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::erase",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< std::complex< double > >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_erase",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_std_complex_Sl_double_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_complex_double_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_complex_double_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'complex_double_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< double > >::erase(size_t)\n"
    "    std::vector< std::complex< double > >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_double_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::front",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_front",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (std::complex< double > *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::back",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_back",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (std::complex< double > *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::push_back",1,"std::vector< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::push_back",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_push_back",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex_double_vector_push_back",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  (arg1)->push_back((std::complex< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::pop_back",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_pop_back",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::at",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_at",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::complex< double > *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  std::complex< double > *arg3 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::assign",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::assign",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::complex< double > >::assign",3,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_assign",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex_double_vector_assign",3,SWIGTYPE_p_std__complexT_double_t);
  }
  
  (arg1)->assign(arg2,(std::complex< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::data",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_data",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (std::complex< double > *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::size",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_size",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::empty",1,"std::vector< std::complex< double > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_empty",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (bool)((std::vector< std::complex< double > > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::resize",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_resize",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::clear",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_clear",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::vector< std::complex< double > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::swap",1,"std::vector< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::swap",2,"std::vector< std::complex< double > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_swap",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_swap",2,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::shrink_to_fit",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::reserve",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_reserve",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::max_size",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_max_size",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::capacity",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_capacity",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_complex_double_vector(void *obj) {
std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_complex_double_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_complex_double_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_complex_double_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_complex_double_vector_methods[]= {
    { "__getitem", _wrap_complex_double_vector___getitem},
    { "__setitem", _wrap_complex_double_vector___setitem},
    { "begin", _wrap_complex_double_vector_begin},
    { "c_end", _wrap_complex_double_vector_c_end},
    { "erase", _wrap_complex_double_vector_erase},
    { "front", _wrap_complex_double_vector_front},
    { "back", _wrap_complex_double_vector_back},
    { "push_back", _wrap_complex_double_vector_push_back},
    { "pop_back", _wrap_complex_double_vector_pop_back},
    { "at", _wrap_complex_double_vector_at},
    { "assign", _wrap_complex_double_vector_assign},
    { "data", _wrap_complex_double_vector_data},
    { "size", _wrap_complex_double_vector_size},
    { "empty", _wrap_complex_double_vector_empty},
    { "resize", _wrap_complex_double_vector_resize},
    { "clear", _wrap_complex_double_vector_clear},
    { "swap", _wrap_complex_double_vector_swap},
    { "shrink_to_fit", _wrap_complex_double_vector_shrink_to_fit},
    { "reserve", _wrap_complex_double_vector_reserve},
    { "max_size", _wrap_complex_double_vector_max_size},
    { "capacity", _wrap_complex_double_vector_capacity},
    {0,0}
};
static swig_lua_method swig_complex_double_vector_meta[] = {
    { "__getitem", _wrap_complex_double_vector___getitem},
    { "__setitem", _wrap_complex_double_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_complex_double_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_complex_double_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_complex_double_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_complex_double_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_complex_double_vector_Sf_SwigStatic = {
    "complex_double_vector",
    swig_complex_double_vector_Sf_SwigStatic_methods,
    swig_complex_double_vector_Sf_SwigStatic_attributes,
    swig_complex_double_vector_Sf_SwigStatic_constants,
    swig_complex_double_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_complex_double_vector_bases[] = {0};
static const char *swig_complex_double_vector_base_names[] = {0};
static swig_lua_class _wrap_class_complex_double_vector = { "complex_double_vector", "complex_double_vector", &SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,_proxy__wrap_new_complex_double_vector, swig_delete_complex_double_vector, swig_complex_double_vector_methods, swig_complex_double_vector_attributes, &swig_complex_double_vector_Sf_SwigStatic, swig_complex_double_vector_meta, swig_complex_double_vector_bases, swig_complex_double_vector_base_names };

static int _wrap_BufferSize_get(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("BufferSize",0,0)
  result = (int)(int)BufferSize;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_inverseSampleRate_set(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  
  SWIG_check_num_args("inverseSampleRate",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("inverseSampleRate",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  inverseSampleRate = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_inverseSampleRate_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType result;
  
  SWIG_check_num_args("inverseSampleRate",0,0)
  result = (DspFloatType)inverseSampleRate;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_SwigModule_attributes[] = {
    { "noise", _wrap_noise_get, _wrap_noise_set },
    { "sampleRate", _wrap_sampleRate_get, _wrap_sampleRate_set },
    { "invSampleRate", _wrap_invSampleRate_get, _wrap_invSampleRate_set },
    { "BufferSize", _wrap_BufferSize_get, SWIG_Lua_set_immutable },
    { "inverseSampleRate", _wrap_inverseSampleRate_get, _wrap_inverseSampleRate_set },
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("fe_divbyzero", FE_DIVBYZERO)},
    {SWIG_LUA_CONSTTAB_INT("fe_inexact", FE_INEXACT)},
    {SWIG_LUA_CONSTTAB_INT("fe_invalid", FE_INVALID)},
    {SWIG_LUA_CONSTTAB_INT("fe_overflow", FE_OVERFLOW)},
    {SWIG_LUA_CONSTTAB_INT("fe_underflow", FE_UNDERFLOW)},
    {SWIG_LUA_CONSTTAB_INT("fe_all_except", FE_ALL_EXCEPT)},
    {SWIG_LUA_CONSTTAB_INT("fe_downward", FE_DOWNWARD)},
    {SWIG_LUA_CONSTTAB_INT("fe_tonearest", FE_TONEAREST)},
    {SWIG_LUA_CONSTTAB_INT("fe_towardzero", FE_TOWARDZERO)},
    {SWIG_LUA_CONSTTAB_INT("fe_upward", FE_UPWARD)},
    {SWIG_LUA_CONSTTAB_INT("fe_dfl_env", FE_DFL_ENV)},
    {SWIG_LUA_CONSTTAB_INT("char_bit", CHAR_BIT)},
    {SWIG_LUA_CONSTTAB_INT("schar_min", SCHAR_MIN)},
    {SWIG_LUA_CONSTTAB_INT("schar_max", SCHAR_MAX)},
    {SWIG_LUA_CONSTTAB_INT("uchar_max", UCHAR_MAX)},
    {SWIG_LUA_CONSTTAB_INT("char_min", CHAR_MIN)},
    {SWIG_LUA_CONSTTAB_INT("char_max", CHAR_MAX)},
    {SWIG_LUA_CONSTTAB_INT("mb_len_max", MB_LEN_MAX)},
    {SWIG_LUA_CONSTTAB_INT("shrt_min", SHRT_MIN)},
    {SWIG_LUA_CONSTTAB_INT("shrt_max", SHRT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("ushrt_max", USHRT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("int_min", INT_MIN)},
    {SWIG_LUA_CONSTTAB_INT("int_max", INT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("uint_max", UINT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("long_min", LONG_MIN)},
    {SWIG_LUA_CONSTTAB_INT("long_max", LONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("ulong_max", ULONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("llong_min", LLONG_MIN)},
    {SWIG_LUA_CONSTTAB_INT("llong_max", LLONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("ullong_max", ULLONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("PARAMETER2_PROCESSOR", PARAMETER2_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREOSPLITTER_PROCESSOR", STEREOSPLITTER_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_GENERATOR_PROCESSOR", MONO_GENERATOR_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_FUNCTION_PROCESSOR", MONO_FUNCTION_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_OSCILLATOR_PROCESSOR", MONO_OSCILLATOR_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_FILTER_PROCESSOR", MONO_FILTER_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_AMPLIFIER_PROCESSOR", MONO_AMPLIFIER_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_FX_PROCESSOR", MONO_FX_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_CASCADE_PROCESSOR", MONO_CASCADE_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_MIXER_PROCESSOR", MONO_MIXER_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_MORPHER_PROCESSOR", MONO_MORPHER_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_OPERATOR_PROCESSOR", MONO_OPERATOR_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_OVERSAMPLE_PROCESSOR", MONO_OVERSAMPLE_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_UPSAMPLE_PROCESSOR", MONO_UPSAMPLE_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_DOWNSAMPLE_PROCESSOR", MONO_DOWNSAMPLE_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_FX_PROCESSOR", STEREO_FX_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_OVERSAMPLER_PROCESSOR", STEREO_OVERSAMPLER_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_UPSAMPLER_PROCESSOR", STEREO_UPSAMPLER_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_DOWNSAMPLER_PROCESSOR", STEREO_DOWNSAMPLER_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_GENERATOR_PROCESSOR", STEREO_GENERATOR_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_FUNCTION_PROCESSOR", STEREO_FUNCTION_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_PARAMETER2_PROCESSOR", STEREO_PARAMETER2_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_OSCILLATOR_PROCESSOR", STEREO_OSCILLATOR_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_FILTER_PROCESSOR", STEREO_FILTER_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_AMPLIFIER_PROCESSOR", STEREO_AMPLIFIER_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_CASCADE_PROCESSOR", STEREO_CASCADE_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_OPERATOR_PROCESSOR", STEREO_OPERATOR_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_SIGNAL_SOURCE_PROCESSOR", MONO_SIGNAL_SOURCE_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_SIGNAL_SOURCE_PROCESSOR", STEREO_SIGNAL_SOURCE_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_SIGNAL_SINK_PROCESSOR", MONO_SIGNAL_SINK_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_SIGNAL_SINK_PROCESSOR", STEREO_SIGNAL_SINK_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("INTERLEAVE_PROCESSOR", INTERLEAVE_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("DEINERLEAVE_PROCESSOR", DEINERLEAVE_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("FILTER_BANK_PROCESSOR", FILTER_BANK_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("SPECTRUM_PROCESSOR", SPECTRUM_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("FilterBase_LOWPASS", Filters::FilterBase::LOWPASS)},
    {SWIG_LUA_CONSTTAB_INT("FilterBase_HIGHPASS", Filters::FilterBase::HIGHPASS)},
    {SWIG_LUA_CONSTTAB_INT("FilterBase_BANDPASS", Filters::FilterBase::BANDPASS)},
    {SWIG_LUA_CONSTTAB_INT("FilterBase_NOTCH", Filters::FilterBase::NOTCH)},
    {SWIG_LUA_CONSTTAB_INT("FilterBase_PEAK", Filters::FilterBase::PEAK)},
    {SWIG_LUA_CONSTTAB_INT("FilterBase_LOWSHELF", Filters::FilterBase::LOWSHELF)},
    {SWIG_LUA_CONSTTAB_INT("FilterBase_HIGHSHELF", Filters::FilterBase::HIGHSHELF)},
    {SWIG_LUA_CONSTTAB_INT("FilterBase_ALLPASS", Filters::FilterBase::ALLPASS)},
    {SWIG_LUA_CONSTTAB_INT("FilterBase_SKIRTBANDPASS", Filters::FilterBase::SKIRTBANDPASS)},
    {SWIG_LUA_CONSTTAB_INT("FilterBase_ZERODBBANDPASS", Filters::FilterBase::ZERODBBANDPASS)},
    {SWIG_LUA_CONSTTAB_INT("FilterBase_LOWPASS1P", Filters::FilterBase::LOWPASS1P)},
    {SWIG_LUA_CONSTTAB_INT("FilterBase_HIGHPASS1P", Filters::FilterBase::HIGHPASS1P)},
    {SWIG_LUA_CONSTTAB_INT("FilterBase_ALLPASS1P", Filters::FilterBase::ALLPASS1P)},
    {SWIG_LUA_CONSTTAB_INT("FilterBase_LOWSHELFBOOST", Filters::FilterBase::LOWSHELFBOOST)},
    {SWIG_LUA_CONSTTAB_INT("FilterBase_LOWSHELFCUT", Filters::FilterBase::LOWSHELFCUT)},
    {SWIG_LUA_CONSTTAB_INT("FilterBase_HIGHSHELFBOOST", Filters::FilterBase::HIGHSHELFBOOST)},
    {SWIG_LUA_CONSTTAB_INT("FilterBase_HIGHSHELFCUT", Filters::FilterBase::HIGHSHELFCUT)},
    {SWIG_LUA_CONSTTAB_INT("FilterBase_PEAKBOOST", Filters::FilterBase::PEAKBOOST)},
    {SWIG_LUA_CONSTTAB_INT("FilterBase_PEAKCUT", Filters::FilterBase::PEAKCUT)},
    {SWIG_LUA_CONSTTAB_INT("BiquadFilter_PORT_CUTOFF", Filters::BiquadFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("BiquadFilter_PORT_Q", Filters::BiquadFilter::PORT_Q)},
    {SWIG_LUA_CONSTTAB_INT("ChebyshevILowPassFilter12db_PORT_CUTOFF", Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("ChebyshevILowPassFilter12db_PORT_Q", Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db::PORT_Q)},
    {SWIG_LUA_CONSTTAB_INT("ChebyshevIILowPassFilter12db_PORT_CUTOFF", Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("ChebyshevIILowPassFilter12db_PORT_Q", Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db::PORT_Q)},
    {SWIG_LUA_CONSTTAB_INT("ButterworthLowPassFilter12db_PORT_CUTOFF", Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("ButterworthLowPassFilter12db_PORT_Q", Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db::PORT_Q)},
    {SWIG_LUA_CONSTTAB_INT("ButterworthResonantLowPassFilter12db_PORT_CUTOFF", Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("ButterworthResonantLowPassFilter12db_PORT_RESONANCE", Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db::PORT_RESONANCE)},
    {SWIG_LUA_CONSTTAB_INT("ButterworthDampedLowPassFilter12db_PORT_CUTOFF", Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("ButterworthDampedLowPassFilter12db_PORT_Q", Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db::PORT_Q)},
    {SWIG_LUA_CONSTTAB_INT("ButterworthLowPassCascadeFilter_PORT_CUTOFF", Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("ButterworthLowPassCascadeFilter_PORT_Q", Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter::PORT_Q)},
    {SWIG_LUA_CONSTTAB_INT("ButterworthResonantLowPassCascadeFilter_PORT_CUTOFF", Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("ButterworthResonantLowPassCascadeFilter_PORT_RESONANCE", Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter::PORT_RESONANCE)},
    {SWIG_LUA_CONSTTAB_INT("ButterworthDampedLowPassCascadeFilter_PORT_CUTOFF", Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("ButterworthDampedLowPassCascadeFilter_PORT_Q", Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter::PORT_Q)},
    {SWIG_LUA_CONSTTAB_INT("ButterworthHighPassFilter12db_PORT_CUTOFF", Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("ButterworthHighPassFilter12db_PORT_Q", Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db::PORT_Q)},
    {SWIG_LUA_CONSTTAB_INT("ButterworthHighPassCascadeFilter_PORT_CUTOFF", Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("ButterworthHighPassCascadeFilter_PORT_Q", Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter::PORT_Q)},
    {SWIG_LUA_CONSTTAB_INT("ButterworthBandPassFilter12db_PORT_CUTOFF", Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("ButterworthBandPassFilter12db_PORT_Q", Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db::PORT_Q)},
    {SWIG_LUA_CONSTTAB_INT("ButterworthBandPassCascadeFilter_PORT_CUTOFF", Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("ButterworthBandPassCascadeFilter_PORT_BW", Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::PORT_BW)},
    {SWIG_LUA_CONSTTAB_INT("ButterworthBandPassCascadeFilter_PORT_Q", Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter::PORT_Q)},
    {SWIG_LUA_CONSTTAB_INT("ButterworthBandStopFilter12db_PORT_CUTOFF", Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("ButterworthBandStopFilter12db_PORT_BW", Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::PORT_BW)},
    {SWIG_LUA_CONSTTAB_INT("ButterworthBandStopFilter12db_PORT_Q", Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db::PORT_Q)},
    {SWIG_LUA_CONSTTAB_INT("ButterworthBandStopCascadeFilter_PORT_CUTOFF", Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("ButterworthBandStopCascadeFilter_PORT_BW", Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::PORT_BW)},
    {SWIG_LUA_CONSTTAB_INT("ButterworthBandStopCascadeFilter_PORT_Q", Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter::PORT_Q)},
    {SWIG_LUA_CONSTTAB_INT("FilterType_LowPass", Filters::IIR::Biquad::FilterType::LowPass)},
    {SWIG_LUA_CONSTTAB_INT("FilterType_HighPass", Filters::IIR::Biquad::FilterType::HighPass)},
    {SWIG_LUA_CONSTTAB_INT("FilterType_BandPass", Filters::IIR::Biquad::FilterType::BandPass)},
    {SWIG_LUA_CONSTTAB_INT("FilterType_Notch", Filters::IIR::Biquad::FilterType::Notch)},
    {SWIG_LUA_CONSTTAB_INT("FilterType_AllPass", Filters::IIR::Biquad::FilterType::AllPass)},
    {SWIG_LUA_CONSTTAB_INT("FilterType_Peaking", Filters::IIR::Biquad::FilterType::Peaking)},
    {SWIG_LUA_CONSTTAB_INT("FilterType_LowShelf", Filters::IIR::Biquad::FilterType::LowShelf)},
    {SWIG_LUA_CONSTTAB_INT("FilterType_HighShelf", Filters::IIR::Biquad::FilterType::HighShelf)},
    {SWIG_LUA_CONSTTAB_INT("FilterType_OnePoleZeroLP", Filters::IIR::Biquad::FilterType::OnePoleZeroLP)},
    {SWIG_LUA_CONSTTAB_INT("FilterType_OnePoleZeroHP", Filters::IIR::Biquad::FilterType::OnePoleZeroHP)},
    {SWIG_LUA_CONSTTAB_INT("IIRBiquadFilter_PORT_TYPE", Filters::IIR::Biquad::Biquad::PORT_TYPE)},
    {SWIG_LUA_CONSTTAB_INT("IIRBiquadFilter_PORT_CUTOFF", Filters::IIR::Biquad::Biquad::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("IIRBiquadFilter_PORT_Q", Filters::IIR::Biquad::Biquad::PORT_Q)},
    {SWIG_LUA_CONSTTAB_INT("IIRBiquadFilter_PORT_GAIN", Filters::IIR::Biquad::Biquad::PORT_GAIN)},
    {SWIG_LUA_CONSTTAB_INT("bq_type_lowpass", Filters::IIR::Nigel::bq_type_lowpass)},
    {SWIG_LUA_CONSTTAB_INT("bq_type_highpass", Filters::IIR::Nigel::bq_type_highpass)},
    {SWIG_LUA_CONSTTAB_INT("bq_type_bandpass", Filters::IIR::Nigel::bq_type_bandpass)},
    {SWIG_LUA_CONSTTAB_INT("bq_type_notch", Filters::IIR::Nigel::bq_type_notch)},
    {SWIG_LUA_CONSTTAB_INT("bq_type_peak", Filters::IIR::Nigel::bq_type_peak)},
    {SWIG_LUA_CONSTTAB_INT("bq_type_lowshelf", Filters::IIR::Nigel::bq_type_lowshelf)},
    {SWIG_LUA_CONSTTAB_INT("bq_type_highshelf", Filters::IIR::Nigel::bq_type_highshelf)},
    {SWIG_LUA_CONSTTAB_INT("Biquad_PORT_TYPE", Filters::IIR::Nigel::Biquad::PORT_TYPE)},
    {SWIG_LUA_CONSTTAB_INT("Biquad_PORT_CUTOFF", Filters::IIR::Nigel::Biquad::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("Biquad_PORT_Q", Filters::IIR::Nigel::Biquad::PORT_Q)},
    {SWIG_LUA_CONSTTAB_INT("Biquad_PORT_GAIN", Filters::IIR::Nigel::Biquad::PORT_GAIN)},
    {SWIG_LUA_CONSTTAB_INT("IIRBesselLowPass_PORT_ORDER", Filters::IIR::Bessel::LowPassFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("IIRBesselLowPass_PORT_CUTOFF", Filters::IIR::Bessel::LowPassFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("IIRBesselHighPass_PORT_ORDER", Filters::IIR::Bessel::HighPassFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("IIRBesselHighPass_PORT_CUTOFF", Filters::IIR::Bessel::HighPassFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("IIRBesselBandPass_PORT_ORDER", Filters::IIR::Bessel::BandPassFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("IIRBesselBandPass_PORT_CUTOFF", Filters::IIR::Bessel::BandPassFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("IIRBesselBandPass_PORT_BW", Filters::IIR::Bessel::BandPassFilter::PORT_BW)},
    {SWIG_LUA_CONSTTAB_INT("IIRBesselBandStop_PORT_ORDER", Filters::IIR::Bessel::BandStopFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("IIRBesselBandStop_PORT_CUTOFF", Filters::IIR::Bessel::BandStopFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("IIRBesselBandStop_PORT_BW", Filters::IIR::Bessel::BandStopFilter::PORT_BW)},
    {SWIG_LUA_CONSTTAB_INT("IIRButterworthLowPass_PORT_ORDER", Filters::IIR::Butterworth::LowPassFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("IIRButterworthLowPass_PORT_CUTOFF", Filters::IIR::Butterworth::LowPassFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("IIRButterworthHighPass_PORT_ORDER", Filters::IIR::Butterworth::HighPassFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("IIRButterworthHighPass_PORT_CUTOFF", Filters::IIR::Butterworth::HighPassFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("IIRButterworthBandPass_PORT_ORDER", Filters::IIR::Butterworth::BandPassFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("IIRButterworthBandPass_PORT_CUTOFF", Filters::IIR::Butterworth::BandPassFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("IIRButterworthBandStop_PORT_ORDER", Filters::IIR::Butterworth::BandStopFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("IIRButterworthBandStop_PORT_CUTOFF", Filters::IIR::Butterworth::BandStopFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("IIRButterworthLowShelf_PORT_ORDER", Filters::IIR::Butterworth::LowShelfFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("IIRButterworthLowShelf_PORT_CUTOFF", Filters::IIR::Butterworth::LowShelfFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("IIRButterworthHighShelf_PORT_ORDER", Filters::IIR::Butterworth::HighShelfFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("IIRButterworthHighShelf_PORT_CUTOFF", Filters::IIR::Butterworth::HighShelfFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("IIRButterworthBandShelf_PORT_ORDER", Filters::IIR::Butterworth::BandShelfFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("IIRButterworthBandShelf_PORT_CUTOFF", Filters::IIR::Butterworth::BandShelfFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIILowPass_PORT_ORDER", Filters::IIR::ChebyshevII::LowPassFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIILowPass_PORT_CUTOFF", Filters::IIR::ChebyshevII::LowPassFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIILowPass_PORT_STOPBAND", Filters::IIR::ChebyshevII::LowPassFilter::PORT_STOPBAND)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIIHighPass_PORT_ORDER", Filters::IIR::ChebyshevII::HighPassFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIIHighPass_PORT_CUTOFF", Filters::IIR::ChebyshevII::HighPassFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIIHighPass_PORT_STOPBAND", Filters::IIR::ChebyshevII::HighPassFilter::PORT_STOPBAND)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIIBandPass_PORT_ORDER", Filters::IIR::ChebyshevII::BandPassFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIIBandPass_PORT_CUTOFF", Filters::IIR::ChebyshevII::BandPassFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIIBandPass_PORT_BANDWIDTH", Filters::IIR::ChebyshevII::BandPassFilter::PORT_BANDWIDTH)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIIBandPass_PORT_STOPBAND", Filters::IIR::ChebyshevII::BandPassFilter::PORT_STOPBAND)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIIBandStop_PORT_ORDER", Filters::IIR::ChebyshevII::BandStopFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIIBandStop_PORT_CUTOFF", Filters::IIR::ChebyshevII::BandStopFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIIBandStop_PORT_BANDWIDTH", Filters::IIR::ChebyshevII::BandStopFilter::PORT_BANDWIDTH)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIIBandStop_PORT_STOPBAND", Filters::IIR::ChebyshevII::BandStopFilter::PORT_STOPBAND)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIIBandShelf_PORT_ORDER", Filters::IIR::ChebyshevII::BandShelfFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIIBandShelf_PORT_CUTOFF", Filters::IIR::ChebyshevII::BandShelfFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIIBandShelf_PORT_BANDWIDTH", Filters::IIR::ChebyshevII::BandShelfFilter::PORT_BANDWIDTH)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIIBandShelf_PORT_STOPBAND", Filters::IIR::ChebyshevII::BandShelfFilter::PORT_STOPBAND)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIIBandShelf_PORT_GAIN", Filters::IIR::ChebyshevII::BandShelfFilter::PORT_GAIN)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIILowShelf_PORT_ORDER", Filters::IIR::ChebyshevII::LowShelfFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIILowShelf_PORT_CUTOFF", Filters::IIR::ChebyshevII::LowShelfFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIILowShelf_PORT_BANDWIDTH", Filters::IIR::ChebyshevII::LowShelfFilter::PORT_BANDWIDTH)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIILowShelf_PORT_STOPBAND", Filters::IIR::ChebyshevII::LowShelfFilter::PORT_STOPBAND)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIILowShelf_PORT_GAIN", Filters::IIR::ChebyshevII::LowShelfFilter::PORT_GAIN)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIIHighShelf_PORT_ORDER", Filters::IIR::ChebyshevII::HighShelfFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIIHighShelf_PORT_CUTOFF", Filters::IIR::ChebyshevII::HighShelfFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIIHighShelf_PORT_BANDWIDTH", Filters::IIR::ChebyshevII::HighShelfFilter::PORT_BANDWIDTH)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIIHighShelf_PORT_STOPBAND", Filters::IIR::ChebyshevII::HighShelfFilter::PORT_STOPBAND)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIIHighShelf_PORT_GAIN", Filters::IIR::ChebyshevII::HighShelfFilter::PORT_GAIN)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevILowPass_PORT_ORDER", Filters::IIR::ChebyshevI::LowPassFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevILowPass_PORT_CUTOFF", Filters::IIR::ChebyshevI::LowPassFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevILowPass_PORT_RIPPLE", Filters::IIR::ChebyshevI::LowPassFilter::PORT_RIPPLE)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIHighPass_PORT_ORDER", Filters::IIR::ChebyshevI::HighPassFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIHighPass_PORT_CUTOFF", Filters::IIR::ChebyshevI::HighPassFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIHighPass_PORT_RIPPLE", Filters::IIR::ChebyshevI::HighPassFilter::PORT_RIPPLE)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIBandPass_PORT_ORDER", Filters::IIR::ChebyshevI::BandPassFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIBandPass_PORT_CUTOFF", Filters::IIR::ChebyshevI::BandPassFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIBandPass_PORT_BANDWIDTH", Filters::IIR::ChebyshevI::BandPassFilter::PORT_BANDWIDTH)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIBandPass_PORT_RIPPLE", Filters::IIR::ChebyshevI::BandPassFilter::PORT_RIPPLE)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIBandPass_PORT_GAIN", Filters::IIR::ChebyshevI::BandPassFilter::PORT_GAIN)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIBandStop_PORT_ORDER", Filters::IIR::ChebyshevI::BandStopFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIBandStop_PORT_CUTOFF", Filters::IIR::ChebyshevI::BandStopFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIBandStop_PORT_BANDWIDTH", Filters::IIR::ChebyshevI::BandStopFilter::PORT_BANDWIDTH)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIBandStop_PORT_RIPPLE", Filters::IIR::ChebyshevI::BandStopFilter::PORT_RIPPLE)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIBandStop_PORT_GAIN", Filters::IIR::ChebyshevI::BandStopFilter::PORT_GAIN)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIBandShelf_PORT_ORDER", Filters::IIR::ChebyshevI::BandShelfFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIBandShelf_PORT_CUTOFF", Filters::IIR::ChebyshevI::BandShelfFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIBandShelf_PORT_RIPPLE", Filters::IIR::ChebyshevI::BandShelfFilter::PORT_RIPPLE)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIBandShelf_PORT_BANDWIDTH", Filters::IIR::ChebyshevI::BandShelfFilter::PORT_BANDWIDTH)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIBandShelf_PORT_GAIN", Filters::IIR::ChebyshevI::BandShelfFilter::PORT_GAIN)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevILowShelf_PORT_ORDER", Filters::IIR::ChebyshevI::LowShelfFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevILowShelf_PORT_CUTOFF", Filters::IIR::ChebyshevI::LowShelfFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevILowShelf_PORT_RIPPLE", Filters::IIR::ChebyshevI::LowShelfFilter::PORT_RIPPLE)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevILowShelf_PORT_BANDWIDTH", Filters::IIR::ChebyshevI::LowShelfFilter::PORT_BANDWIDTH)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevILowShelf_PORT_GAIN", Filters::IIR::ChebyshevI::LowShelfFilter::PORT_GAIN)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIHighShelf_PORT_ORDER", Filters::IIR::ChebyshevI::HighShelfFilter::PORT_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIHighShelf_PORT_CUTOFF", Filters::IIR::ChebyshevI::HighShelfFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIHighShelf_PORT_RIPPLE", Filters::IIR::ChebyshevI::HighShelfFilter::PORT_RIPPLE)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIHighShelf_PORT_BANDWIDTH", Filters::IIR::ChebyshevI::HighShelfFilter::PORT_BANDWIDTH)},
    {SWIG_LUA_CONSTTAB_INT("IIRChebyshevIHighShelf_PORT_GAIN", Filters::IIR::ChebyshevI::HighShelfFilter::PORT_GAIN)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "Huge", _wrap_Huge},
    { "Hugef", _wrap_Hugef},
    { "Infinity", _wrap_Infinity},
    { "NaN", _wrap_NaN},
    { "absf", _wrap_absf},
    { "cubef", _wrap_cubef},
    { "sqrtf", _wrap_sqrtf},
    { "expf", _wrap_expf},
    { "exp2f", _wrap_exp2f},
    { "logf", _wrap_logf},
    { "log10f", _wrap_log10f},
    { "log2f", _wrap_log2f},
    { "logbf", _wrap_logbf},
    { "powf", _wrap_powf},
    { "floorf", _wrap_floorf},
    { "acosf", _wrap_acosf},
    { "asinf", _wrap_asinf},
    { "atanf", _wrap_atanf},
    { "atan2f", _wrap_atan2f},
    { "cosf", _wrap_cosf},
    { "sinf", _wrap_sinf},
    { "tanf", _wrap_tanf},
    { "coshf", _wrap_coshf},
    { "sinhf", _wrap_sinhf},
    { "tanhf", _wrap_tanhf},
    { "lgammaf", _wrap_lgammaf},
    { "acoshf", _wrap_acoshf},
    { "asinhf", _wrap_asinhf},
    { "atanhf", _wrap_atanhf},
    { "cbrtf", _wrap_cbrtf},
    { "ceilf", _wrap_ceilf},
    { "copysignf", _wrap_copysignf},
    { "erff", _wrap_erff},
    { "erfcf", _wrap_erfcf},
    { "expm1f", _wrap_expm1f},
    { "fdimf", _wrap_fdimf},
    { "fmaf", _wrap_fmaf},
    { "fmaxf", _wrap_fmaxf},
    { "fminf", _wrap_fminf},
    { "fmodf", _wrap_fmodf},
    { "fpclassifyf", _wrap_fpclassifyf},
    { "hypotf", _wrap_hypotf},
    { "ilogbf", _wrap_ilogbf},
    { "isfinitef", _wrap_isfinitef},
    { "isgreaterf", _wrap_isgreaterf},
    { "isgreaterequalf", _wrap_isgreaterequalf},
    { "isinff", _wrap_isinff},
    { "islessf", _wrap_islessf},
    { "islessequalf", _wrap_islessequalf},
    { "isnanf", _wrap_isnanf},
    { "isnormalf", _wrap_isnormalf},
    { "isunorderedf", _wrap_isunorderedf},
    { "ldexpf", _wrap_ldexpf},
    { "llrintf", _wrap_llrintf},
    { "llroundf", _wrap_llroundf},
    { "log1pf", _wrap_log1pf},
    { "lrintf", _wrap_lrintf},
    { "lroundf", _wrap_lroundf},
    { "nanf", _wrap_nanf},
    { "nanff", _wrap_nanff},
    { "nanlf", _wrap_nanlf},
    { "nearbyintf", _wrap_nearbyintf},
    { "nextafterf", _wrap_nextafterf},
    { "nexttowardf", _wrap_nexttowardf},
    { "remainderf", _wrap_remainderf},
    { "rintf", _wrap_rintf},
    { "roundf", _wrap_roundf},
    { "scalblnf", _wrap_scalblnf},
    { "scalbnf", _wrap_scalbnf},
    { "squaref", _wrap_squaref},
    { "tgammaf", _wrap_tgammaf},
    { "truncf", _wrap_truncf},
    { "absd", _wrap_absd},
    { "sqrtd", _wrap_sqrtd},
    { "expd", _wrap_expd},
    { "exp2d", _wrap_exp2d},
    { "logd", _wrap_logd},
    { "log10d", _wrap_log10d},
    { "log2d", _wrap_log2d},
    { "logbd", _wrap_logbd},
    { "powd", _wrap_powd},
    { "floord", _wrap_floord},
    { "acosd", _wrap_acosd},
    { "asind", _wrap_asind},
    { "atand", _wrap_atand},
    { "atan2d", _wrap_atan2d},
    { "cosd", _wrap_cosd},
    { "sind", _wrap_sind},
    { "tand", _wrap_tand},
    { "coshd", _wrap_coshd},
    { "sinhd", _wrap_sinhd},
    { "tanhd", _wrap_tanhd},
    { "lgammad", _wrap_lgammad},
    { "acoshd", _wrap_acoshd},
    { "asinhd", _wrap_asinhd},
    { "atanhd", _wrap_atanhd},
    { "cbrtd", _wrap_cbrtd},
    { "ceild", _wrap_ceild},
    { "copysignd", _wrap_copysignd},
    { "erfd", _wrap_erfd},
    { "erfcd", _wrap_erfcd},
    { "expm1d", _wrap_expm1d},
    { "fdimd", _wrap_fdimd},
    { "fmad", _wrap_fmad},
    { "fmaxd", _wrap_fmaxd},
    { "fmind", _wrap_fmind},
    { "fmodd", _wrap_fmodd},
    { "fpclassifyd", _wrap_fpclassifyd},
    { "hypotd", _wrap_hypotd},
    { "ilogbd", _wrap_ilogbd},
    { "isfinited", _wrap_isfinited},
    { "isgreaterd", _wrap_isgreaterd},
    { "isgreaterequald", _wrap_isgreaterequald},
    { "isinfd", _wrap_isinfd},
    { "islessd", _wrap_islessd},
    { "islessequald", _wrap_islessequald},
    { "isnand", _wrap_isnand},
    { "isnormald", _wrap_isnormald},
    { "isunorderedd", _wrap_isunorderedd},
    { "ldexpd", _wrap_ldexpd},
    { "llrintd", _wrap_llrintd},
    { "llroundd", _wrap_llroundd},
    { "log1pd", _wrap_log1pd},
    { "lrintd", _wrap_lrintd},
    { "lroundd", _wrap_lroundd},
    { "nand", _wrap_nand},
    { "nanfd", _wrap_nanfd},
    { "nanld", _wrap_nanld},
    { "nearbyintd", _wrap_nearbyintd},
    { "nextafterd", _wrap_nextafterd},
    { "nexttowardd", _wrap_nexttowardd},
    { "remainderd", _wrap_remainderd},
    { "rintd", _wrap_rintd},
    { "roundd", _wrap_roundd},
    { "scalblnd", _wrap_scalblnd},
    { "scalbnd", _wrap_scalbnd},
    { "squared", _wrap_squared},
    { "tgammad", _wrap_tgammad},
    { "truncd", _wrap_truncd},
    { "feclearexcept", _wrap_feclearexcept},
    { "fegetexceptflag", _wrap_fegetexceptflag},
    { "feraiseexcept", _wrap_feraiseexcept},
    { "fesetexceptflag", _wrap_fesetexceptflag},
    { "fetestexcept", _wrap_fetestexcept},
    { "fegetround", _wrap_fegetround},
    { "fesetround", _wrap_fesetround},
    { "fegetenv", _wrap_fegetenv},
    { "feholdexcept", _wrap_feholdexcept},
    { "fesetenv", _wrap_fesetenv},
    { "feupdateenv", _wrap_feupdateenv},
    { "factorial", _wrap_factorial},
    { "binomial", _wrap_binomial},
    { "DigitalQ", _wrap_DigitalQ},
    { "AnalogQ", _wrap_AnalogQ},
    { "QSlope", _wrap_QSlope},
    { "Bandwidth", _wrap_Bandwidth},
    { "BandwidthQ", _wrap_BandwidthQ},
    { "Q", _wrap_Q},
    { "f0", _wrap_f0},
    { "f0ff", _wrap_f0ff},
    { "f1", _wrap_f1},
    { "f2bw", _wrap_f2bw},
    { "f2", _wrap_f2},
    { "f1bw", _wrap_f1bw},
    { "OctaveBWToQ", _wrap_OctaveBWToQ},
    { "QtoOctaveBandwidth1", _wrap_QtoOctaveBandwidth1},
    { "QToOctaveBandwidth2", _wrap_QToOctaveBandwidth2},
    { "QToOctaveNSinh", _wrap_QToOctaveNSinh},
    { "QToOctaveBandwidth4", _wrap_QToOctaveBandwidth4},
    { "OctaveRatio", _wrap_OctaveRatio},
    { "OctaveRatioF", _wrap_OctaveRatioF},
    { "freqReponse", _wrap_freqReponse},
    { "magReponse", _wrap_magReponse},
    { "phaseReponse", _wrap_phaseReponse},
    { "impulseResponse", _wrap_impulseResponse},
    { "LowpassOnePole", _wrap_LowpassOnePole},
    { "HighpassOnePole", _wrap_HighpassOnePole},
    { "AllpassOnePoleOneZero", _wrap_AllpassOnePoleOneZero},
    { "LowpassOnePoleOneZero", _wrap_LowpassOnePoleOneZero},
    { "HighpassOnePoleOneZero", _wrap_HighpassOnePoleOneZero},
    { "LowpassBiquad", _wrap_LowpassBiquad},
    { "HighpassBiquad", _wrap_HighpassBiquad},
    { "AllpassBiquad", _wrap_AllpassBiquad},
    { "BandpassBiquad", _wrap_BandpassBiquad},
    { "NotchBiquad", _wrap_NotchBiquad},
    { "PeakBiquad", _wrap_PeakBiquad},
    { "LowshelfBiquad", _wrap_LowshelfBiquad},
    { "HighshelfBiquad", _wrap_HighshelfBiquad},
    { "RBJLowpassBiquad", _wrap_RBJLowpassBiquad},
    { "RBJLowpassBiquadR", _wrap_RBJLowpassBiquadR},
    { "RBJLowpassBiquadBW", _wrap_RBJLowpassBiquadBW},
    { "RBJHighpassBiquad", _wrap_RBJHighpassBiquad},
    { "RBJHighpassBiquadBW", _wrap_RBJHighpassBiquadBW},
    { "RBJBandpassConstantSkirtBiquad", _wrap_RBJBandpassConstantSkirtBiquad},
    { "RBJBandpassConstantSkirtBiquadBW", _wrap_RBJBandpassConstantSkirtBiquadBW},
    { "RBJBandpassConstant0dbBiquad", _wrap_RBJBandpassConstant0dbBiquad},
    { "RBJBandpassConstant0dbBiquadBW", _wrap_RBJBandpassConstant0dbBiquadBW},
    { "RBJNotchBiquad", _wrap_RBJNotchBiquad},
    { "RBJNotchBiquadBW", _wrap_RBJNotchBiquadBW},
    { "RBJAllpassBiquad", _wrap_RBJAllpassBiquad},
    { "RBJAllpassBiquadBW", _wrap_RBJAllpassBiquadBW},
    { "RBJPeakBiquad", _wrap_RBJPeakBiquad},
    { "RBJPeakBiquadBW", _wrap_RBJPeakBiquadBW},
    { "RBJLowshelfBiquad", _wrap_RBJLowshelfBiquad},
    { "RBJLowshelfBiquadSlope", _wrap_RBJLowshelfBiquadSlope},
    { "RBJHighshelfBiquad", _wrap_RBJHighshelfBiquad},
    { "RBJHighshelfBiquadSlope", _wrap_RBJHighshelfBiquadSlope},
    { "MassbergLowpassBiquad", _wrap_MassbergLowpassBiquad},
    { "ZolzerNotch", _wrap_ZolzerNotch},
    { "ZolzerLowpass1p", _wrap_ZolzerLowpass1p},
    { "ZolzerHighpass1p", _wrap_ZolzerHighpass1p},
    { "ZolzerAllpass1p", _wrap_ZolzerAllpass1p},
    { "ZolzerLowpass", _wrap_ZolzerLowpass},
    { "ZolzerAllpass", _wrap_ZolzerAllpass},
    { "ZolzerHighpass", _wrap_ZolzerHighpass},
    { "ZolzerBandpass", _wrap_ZolzerBandpass},
    { "ZolzerLFBoost", _wrap_ZolzerLFBoost},
    { "ZolzerLFCut", _wrap_ZolzerLFCut},
    { "ZolzerHFBoost", _wrap_ZolzerHFBoost},
    { "ZolzerHFCut", _wrap_ZolzerHFCut},
    { "ZolzerBoost", _wrap_ZolzerBoost},
    { "ZolzerCut", _wrap_ZolzerCut},
    { "prewarp", _wrap_prewarp},
    { "prewarpR", _wrap_prewarpR},
    { "prewarpQ", _wrap_prewarpQ},
    { "prewarpRQ", _wrap_prewarpRQ},
    { "inversebilinear", _wrap_inversebilinear},
    { "bilinear1", _wrap_bilinear1},
    { "bilinear", _wrap_bilinear},
    { "AnalogBiquadTypeI", _wrap_AnalogBiquadTypeI},
    { "AnalogBiquadSection", _wrap_AnalogBiquadSection},
    { "AnalogBiquadCascade", _wrap_AnalogBiquadCascade},
    { "ChebyshevH0", _wrap_ChebyshevH0},
    { "ChebyshevPole", _wrap_ChebyshevPole},
    { "ChebyshevPoles", _wrap_ChebyshevPoles},
    { "ChebyshevILowPassSolver", _wrap_ChebyshevILowPassSolver},
    { "Chebyshev2Zero", _wrap_Chebyshev2Zero},
    { "Chebyshev2Pole", _wrap_Chebyshev2Pole},
    { "Chebyshev2Zeros", _wrap_Chebyshev2Zeros},
    { "Chebyshev2Poles", _wrap_Chebyshev2Poles},
    { "ChebyshevIILowPassSolver", _wrap_ChebyshevIILowPassSolver},
    { "butterworthpole", _wrap_butterworthpole},
    { "cbutterworthpole", _wrap_cbutterworthpole},
    { "ButterworthPoles", _wrap_ButterworthPoles},
    { "ButterworthLowPassSolver", _wrap_ButterworthLowPassSolver},
    { "ButterworthLowPassSolverRadius", _wrap_ButterworthLowPassSolverRadius},
    { "ButterworthLowPassSolverQ", _wrap_ButterworthLowPassSolverQ},
    { "ButterworthLowPassSolverRQ", _wrap_ButterworthLowPassSolverRQ},
    { "ButterworthHighPassSolver", _wrap_ButterworthHighPassSolver},
    { "ButterworthHighPassSolveQ", _wrap_ButterworthHighPassSolveQ},
    { "ButterworthHighPassSolveR", _wrap_ButterworthHighPassSolveR},
    { "ButterworthHighPassSolveRQ", _wrap_ButterworthHighPassSolveRQ},
    { "ButterworthBandPassSolver", _wrap_ButterworthBandPassSolver},
    { "ButterworthBandPassSolverQ", _wrap_ButterworthBandPassSolverQ},
    { "ButterworthBandPassSolverR", _wrap_ButterworthBandPassSolverR},
    { "ButterworthBandPassSolverRQ", _wrap_ButterworthBandPassSolverRQ},
    { "ButterworthBandStopSolver", _wrap_ButterworthBandStopSolver},
    { "ButterworthBandStopSolverQ", _wrap_ButterworthBandStopSolverQ},
    { "ButterworthBandStopSolverR", _wrap_ButterworthBandStopSolverR},
    { "ButterworthBandStopSolverRQ", _wrap_ButterworthBandStopSolverRQ},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_gslice,
&_wrap_class_slice,
&_wrap_class_float_complex,
&_wrap_class_double_complex,
&_wrap_class_float_valarray,
&_wrap_class_float_numeric_limits,
&_wrap_class_double_numeric_limits,
&_wrap_class_int_numeric_limits,
&_wrap_class_uint_numeric_limits,
&_wrap_class_short_numeric_limits,
&_wrap_class_ushort_numeric_limits,
&_wrap_class_long_numeric_limits,
&_wrap_class_ulong_numeric_limits,
&_wrap_class_llong_numeric_limits,
&_wrap_class_ullong_numeric_limits,
&_wrap_class_Random,
&_wrap_class_SoundProcessor,
&_wrap_class_Port,
&_wrap_class_Ports,
&_wrap_class_MonoProcessor,
&_wrap_class_MonoCascadeProcessor,
&_wrap_class_StereoProcessor,
&_wrap_class_StereoCascadeProcessor,
&_wrap_class_MonoFXProcessor,
&_wrap_class_StereoFXProcessor,
&_wrap_class_GeneratorProcessor,
&_wrap_class_MixerProcessor,
&_wrap_class_FunctionProcessor,
&_wrap_class_Parameter2Processor,
&_wrap_class_StereoSplitterProcessor,
&_wrap_class_OscillatorProcessor,
&_wrap_class_FilterProcessor,
&_wrap_class_AmplifierProcessor,
&_wrap_class_StereoOscillatorProcessor,
&_wrap_class_StereoGeneratorProcessor,
&_wrap_class_StereoFunctionProcessor,
&_wrap_class_StereoFilterProcessor,
&_wrap_class_StereoAmplifierProcessor,
&_wrap_class_SpectrumProcessor,
&_wrap_class_SignalSourceProcessor,
&_wrap_class_SignalSinkProcessor,
&_wrap_class_MonoOversampleProcessor,
&_wrap_class_MonoUpsampleProcessor,
&_wrap_class_MonoDownsampleProcessor,
&_wrap_class_OperatorProcessor,
&_wrap_class_MonoOperatorProcessor,
&_wrap_class_MonoCascadeOperatorProcessor,
&_wrap_class_MonoMultiplierOperatorProcessor,
&_wrap_class_MonoAdderOperatorProcessor,
&_wrap_class_MonoSubtractorOperatorProcessor,
&_wrap_class_MonoModulatorOperatorProcessor,
&_wrap_class_MonoBlendOperatorProcessor,
&_wrap_class_FilterCoefficients,
&_wrap_class_FilterBase,
&_wrap_class_BiquadFilter,
&_wrap_class_BiquadFilterCascader,
&_wrap_class_BiquadParallelFilters,
&_wrap_class_BiquadSection,
&_wrap_class_BiquadTypeI,
&_wrap_class_BiquadTypeII,
&_wrap_class_BiquadTransposedTypeI,
&_wrap_class_BiquadTransposedTypeII,
&_wrap_class_BiquadTypeICascade,
&_wrap_class_BiquadTypeIICascade,
&_wrap_class_BiquadTransposedTypeICascade,
&_wrap_class_BiquadTransposedTypeIICascade,
&_wrap_class_ChebyshevILowPassFilter12db,
&_wrap_class_ChebyshevIILowPassFilter12db,
&_wrap_class_ZolzerBiquadFilter,
&_wrap_class_ZolzerLowPassFilter,
&_wrap_class_ZolzerHighPassFilter,
&_wrap_class_ZolzerAllPassFilter,
&_wrap_class_ZolzerLowPass1pFilter,
&_wrap_class_ZolzerHighPass1pFilter,
&_wrap_class_ZolzerAllPass1pFilter,
&_wrap_class_ZolzerBandPassFilter,
&_wrap_class_ZolzerNotchFilter,
&_wrap_class_ZolzerPeakBoostFilter,
&_wrap_class_ZolzerPeakCutFilter,
&_wrap_class_ZolzerLowShelfBoostFilter,
&_wrap_class_ZolzerLowShelfCutFilter,
&_wrap_class_ZolzerHighShelfBoostFilter,
&_wrap_class_ZolzerHighShelfCutFilter,
&_wrap_class_ButterworthLowPassFilter12db,
&_wrap_class_ButterworthResonantLowPassFilter12db,
&_wrap_class_ButterworthDampedLowPassFilter12db,
&_wrap_class_ButterworthLowPassCascadeFilter,
&_wrap_class_ButterworthResonantLowPassCascadeFilter,
&_wrap_class_ButterworthDampedLowPassCascadeFilter,
&_wrap_class_ButterworthHighPassFilter12db,
&_wrap_class_ButterworthHighPassCascadeFilter,
&_wrap_class_ButterworthBandPassFilter12db,
&_wrap_class_ButterworthBandPassCascadeFilter,
&_wrap_class_ButterworthBandStopFilter12db,
&_wrap_class_ButterworthBandStopCascadeFilter,
&_wrap_class_Parameters,
&_wrap_class_IIRBiquadFilter,
&_wrap_class_Biquad,
&_wrap_class_IIRBesselLowPass,
&_wrap_class_IIRBesselHighPass,
&_wrap_class_IIRBesselBandPass,
&_wrap_class_IIRBesselBandStop,
&_wrap_class_IIRButterworthLowPass,
&_wrap_class_IIRButterworthHighPass,
&_wrap_class_IIRButterworthBandPass,
&_wrap_class_IIRButterworthBandStop,
&_wrap_class_IIRButterworthLowShelf,
&_wrap_class_IIRButterworthHighShelf,
&_wrap_class_IIRButterworthBandShelf,
&_wrap_class_IIRChebyshevIILowPass,
&_wrap_class_IIRChebyshevIIHighPass,
&_wrap_class_IIRChebyshevIIBandPass,
&_wrap_class_IIRChebyshevIIBandStop,
&_wrap_class_IIRChebyshevIIBandShelf,
&_wrap_class_IIRChebyshevIILowShelf,
&_wrap_class_IIRChebyshevIIHighShelf,
&_wrap_class_IIRChebyshevILowPass,
&_wrap_class_IIRChebyshevIHighPass,
&_wrap_class_IIRChebyshevIBandPass,
&_wrap_class_IIRChebyshevIBandStop,
&_wrap_class_IIRChebyshevIBandShelf,
&_wrap_class_IIRChebyshevILowShelf,
&_wrap_class_IIRChebyshevIHighShelf,
&_wrap_class_IIRLegendreLowPass,
&_wrap_class_IIRLegendreHighPass,
&_wrap_class_IIRLegendreBandPass,
&_wrap_class_IIRLegendreBandStop,
&_wrap_class_IIRRBJLowPass,
&_wrap_class_IIRRBJHighPass,
&_wrap_class_AllPassFilter,
&_wrap_class_BandPass1Filter,
&_wrap_class_BandPass2Filter,
&_wrap_class_IIRRBJBandStop,
&_wrap_class_IIRRBJLowShelf,
&_wrap_class_IIRRBJHighShelf,
&_wrap_class_IIRRBJBandShelf,
&_wrap_class_RBJBiquadFilter,
&_wrap_class_IIRRBJLowPassBiquad,
&_wrap_class_IIRRBJHighPassBiquad,
&_wrap_class_IIRRBJAllPassBiquad,
&_wrap_class_IIRRBJBandPassBiquad,
&_wrap_class_RBJSkirtBandPassFilter,
&_wrap_class_IIRRBJBandStopBiquad,
&_wrap_class_IIRRBJPeakingBiquad,
&_wrap_class_IIRRBJLowShelfBiquad,
&_wrap_class_IIRRBJHighShelfBiquad,
&_wrap_class_float_vector,
&_wrap_class_double_vector,
&_wrap_class_complex_float_vector,
&_wrap_class_complex_double_vector,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "Filters",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilterTo_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *)  ((Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilterTo_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *)  ((Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilterTo_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *)  ((Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilterTo_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *)  ((Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilterTo_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *)  ((Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilterTo_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *)  ((Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilterTo_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *)  ((Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilterTo_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *)  ((Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilterTo_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *)  ((Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilterTo_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *)  ((Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilterTo_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *)  ((Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilterTo_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *)  ((Filters::IIR::ZolzerFilters::ZolzerNotchFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilterTo_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *)  ((Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilterTo_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *)  ((Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJBandStopFilterTo_p_Filters__IIR__RBJFilters__RBJBiquadFilter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::IIR::RBJFilters::RBJBiquadFilter *)  ((Filters::IIR::RBJFilters::RBJBandStopFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJLowShelfFilterTo_p_Filters__IIR__RBJFilters__RBJBiquadFilter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::IIR::RBJFilters::RBJBiquadFilter *)  ((Filters::IIR::RBJFilters::RBJLowShelfFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJHighShelfFilterTo_p_Filters__IIR__RBJFilters__RBJBiquadFilter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::IIR::RBJFilters::RBJBiquadFilter *)  ((Filters::IIR::RBJFilters::RBJHighShelfFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJLowPassFilterTo_p_Filters__IIR__RBJFilters__RBJBiquadFilter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::IIR::RBJFilters::RBJBiquadFilter *)  ((Filters::IIR::RBJFilters::RBJLowPassFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJHighPassFilterTo_p_Filters__IIR__RBJFilters__RBJBiquadFilter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::IIR::RBJFilters::RBJBiquadFilter *)  ((Filters::IIR::RBJFilters::RBJHighPassFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJAllPassFilterTo_p_Filters__IIR__RBJFilters__RBJBiquadFilter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::IIR::RBJFilters::RBJBiquadFilter *)  ((Filters::IIR::RBJFilters::RBJAllPassFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJBandPassFilterTo_p_Filters__IIR__RBJFilters__RBJBiquadFilter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::IIR::RBJFilters::RBJBiquadFilter *)  ((Filters::IIR::RBJFilters::RBJBandPassFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilterTo_p_Filters__IIR__RBJFilters__RBJBiquadFilter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::IIR::RBJFilters::RBJBiquadFilter *)  ((Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJPeakFilterTo_p_Filters__IIR__RBJFilters__RBJBiquadFilter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::IIR::RBJFilters::RBJBiquadFilter *)  ((Filters::IIR::RBJFilters::RBJPeakFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilterTo_p_Filters__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::FilterBase *) (Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilterTo_p_Filters__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::FilterBase *) (Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJPeakFilterTo_p_Filters__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::FilterBase *) (Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJPeakFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilterTo_p_Filters__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::FilterBase *) (Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJBandPassFilterTo_p_Filters__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::FilterBase *) (Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJBandPassFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJAllPassFilterTo_p_Filters__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::FilterBase *) (Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJAllPassFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJHighPassFilterTo_p_Filters__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::FilterBase *) (Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJHighPassFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJLowPassFilterTo_p_Filters__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::FilterBase *) (Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJLowPassFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilterTo_p_Filters__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::FilterBase *) (Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilterTo_p_Filters__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::FilterBase *) (Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilterTo_p_Filters__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::FilterBase *) (Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilterTo_p_Filters__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::FilterBase *) (Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *) x));
}
static void *_p_Filters__BiquadTypeITo_p_Filters__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::FilterBase *)  ((Filters::BiquadTypeI *) x));
}
static void *_p_Filters__BiquadTransposedTypeITo_p_Filters__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::FilterBase *)  ((Filters::BiquadTransposedTypeI *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilterTo_p_Filters__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::FilterBase *) (Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *) x));
}
static void *_p_Filters__BiquadTypeICascadeTo_p_Filters__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::FilterBase *)  ((Filters::BiquadTypeICascade *) x));
}
static void *_p_Filters__BiquadTypeIICascadeTo_p_Filters__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::FilterBase *)  ((Filters::BiquadTypeIICascade *) x));
}
static void *_p_Filters__BiquadTransposedTypeICascadeTo_p_Filters__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::FilterBase *)  ((Filters::BiquadTransposedTypeICascade *) x));
}
static void *_p_Filters__BiquadTransposedTypeIICascadeTo_p_Filters__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::FilterBase *)  ((Filters::BiquadTransposedTypeIICascade *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilterTo_p_Filters__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::FilterBase *) (Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *) x));
}
static void *_p_Filters__BiquadTypeIITo_p_Filters__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::FilterBase *)  ((Filters::BiquadTypeII *) x));
}
static void *_p_Filters__BiquadTransposedTypeIITo_p_Filters__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::FilterBase *)  ((Filters::BiquadTransposedTypeII *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilterTo_p_Filters__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::FilterBase *) (Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJHighShelfFilterTo_p_Filters__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::FilterBase *) (Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJHighShelfFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJLowShelfFilterTo_p_Filters__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::FilterBase *) (Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJLowShelfFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJBandStopFilterTo_p_Filters__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::FilterBase *) (Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJBandStopFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJBiquadFilterTo_p_Filters__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::FilterBase *) (Filters::BiquadTransposedTypeII *) ((Filters::IIR::RBJFilters::RBJBiquadFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilterTo_p_Filters__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::FilterBase *) (Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilterTo_p_Filters__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::FilterBase *) (Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilterTo_p_Filters__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::FilterBase *) (Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerNotchFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilterTo_p_Filters__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::FilterBase *) (Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *) x));
}
static void *_p_Filters__BiquadFilterTo_p_Filters__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::FilterBase *)  ((Filters::BiquadFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilterTo_p_Filters__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::FilterBase *) (Filters::BiquadTransposedTypeII *) ((Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilterTo_p_Filters__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::FilterBase *) (Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilterTo_p_Filters__BiquadTransposedTypeII(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadTransposedTypeII *) (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilterTo_p_Filters__BiquadTransposedTypeII(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadTransposedTypeII *) (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilterTo_p_Filters__BiquadTransposedTypeII(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadTransposedTypeII *) (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilterTo_p_Filters__BiquadTransposedTypeII(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadTransposedTypeII *) (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilterTo_p_Filters__BiquadTransposedTypeII(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadTransposedTypeII *) (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilterTo_p_Filters__BiquadTransposedTypeII(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadTransposedTypeII *) (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilterTo_p_Filters__BiquadTransposedTypeII(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadTransposedTypeII *) (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilterTo_p_Filters__BiquadTransposedTypeII(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadTransposedTypeII *) (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilterTo_p_Filters__BiquadTransposedTypeII(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadTransposedTypeII *) (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJLowPassFilterTo_p_Filters__BiquadTransposedTypeII(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadTransposedTypeII *) (Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJLowPassFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJHighPassFilterTo_p_Filters__BiquadTransposedTypeII(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadTransposedTypeII *) (Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJHighPassFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJAllPassFilterTo_p_Filters__BiquadTransposedTypeII(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadTransposedTypeII *) (Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJAllPassFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJBandPassFilterTo_p_Filters__BiquadTransposedTypeII(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadTransposedTypeII *) (Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJBandPassFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilterTo_p_Filters__BiquadTransposedTypeII(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadTransposedTypeII *) (Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJPeakFilterTo_p_Filters__BiquadTransposedTypeII(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadTransposedTypeII *) (Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJPeakFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilterTo_p_Filters__BiquadTransposedTypeII(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadTransposedTypeII *) (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilterTo_p_Filters__BiquadTransposedTypeII(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadTransposedTypeII *) (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilterTo_p_Filters__BiquadTransposedTypeII(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadTransposedTypeII *) (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerNotchFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilterTo_p_Filters__BiquadTransposedTypeII(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadTransposedTypeII *) (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilterTo_p_Filters__BiquadTransposedTypeII(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadTransposedTypeII *) (Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilterTo_p_Filters__BiquadTransposedTypeII(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadTransposedTypeII *)  ((Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJBiquadFilterTo_p_Filters__BiquadTransposedTypeII(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadTransposedTypeII *)  ((Filters::IIR::RBJFilters::RBJBiquadFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJBandStopFilterTo_p_Filters__BiquadTransposedTypeII(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadTransposedTypeII *) (Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJBandStopFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJLowShelfFilterTo_p_Filters__BiquadTransposedTypeII(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadTransposedTypeII *) (Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJLowShelfFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJHighShelfFilterTo_p_Filters__BiquadTransposedTypeII(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadTransposedTypeII *) (Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJHighShelfFilter *) x));
}
static void *_p_p_Filters__IIR__Biquad__BiquadTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::Biquad::Biquad **) x));
}
static void *_p_p_Filters__IIR__RBJFilters__RBJPeakFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJPeakFilter **) x));
}
static void *_p_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJSkirtBandPassFilter **) x));
}
static void *_p_p_Filters__IIR__RBJFilters__RBJBandPassFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJBandPassFilter **) x));
}
static void *_p_p_Filters__IIR__RBJFilters__RBJAllPassFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJAllPassFilter **) x));
}
static void *_p_p_Filters__IIR__RBJFilters__RBJHighPassFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJHighPassFilter **) x));
}
static void *_p_p_Filters__IIR__RBJFilters__RBJLowPassFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJLowPassFilter **) x));
}
static void *_p_p_Filters__IIR__RBJ__BandPass1FilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::RBJ::BandPass1Filter **) x));
}
static void *_p_p_Filters__IIR__RBJ__AllPassFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::RBJ::AllPassFilter **) x));
}
static void *_p_p_Filters__IIR__RBJ__HighPassFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::RBJ::HighPassFilter **) x));
}
static void *_p_p_Filters__IIR__RBJ__LowPassFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::RBJ::LowPassFilter **) x));
}
static void *_p_p_Filters__IIR__Legendre__BandPassFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::Legendre::BandPassFilter **) x));
}
static void *_p_p_Filters__IIR__Legendre__HighPassFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::Legendre::HighPassFilter **) x));
}
static void *_p_p_Filters__IIR__Legendre__LowPassFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::Legendre::LowPassFilter **) x));
}
static void *_p_p_Filters__IIR__ChebyshevI__BandPassFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::ChebyshevI::BandPassFilter **) x));
}
static void *_p_p_Filters__IIR__ChebyshevI__HighPassFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::ChebyshevI::HighPassFilter **) x));
}
static void *_p_p_Filters__IIR__ChebyshevI__LowPassFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::ChebyshevI::LowPassFilter **) x));
}
static void *_p_p_Filters__IIR__ChebyshevII__BandPassFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::ChebyshevII::BandPassFilter **) x));
}
static void *_p_p_Filters__IIR__ChebyshevII__HighPassFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::ChebyshevII::HighPassFilter **) x));
}
static void *_p_p_Filters__IIR__ChebyshevII__LowPassFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::ChebyshevII::LowPassFilter **) x));
}
static void *_p_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerAllPassFilter **) x));
}
static void *_p_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerHighPassFilter **) x));
}
static void *_p_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerLowPassFilter **) x));
}
static void *_p_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerBandPassFilter **) x));
}
static void *_p_p_Filters__IIR__Bessel__LowPassFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::Bessel::LowPassFilter **) x));
}
static void *_p_p_Filters__IIR__Bessel__HighPassFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::Bessel::HighPassFilter **) x));
}
static void *_p_p_Filters__IIR__Bessel__BandPassFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::Bessel::BandPassFilter **) x));
}
static void *_p_p_Filters__IIR__Butterworth__LowPassFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::Butterworth::LowPassFilter **) x));
}
static void *_p_p_Filters__IIR__Butterworth__HighPassFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::Butterworth::HighPassFilter **) x));
}
static void *_p_p_Filters__IIR__Butterworth__BandPassFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::Butterworth::BandPassFilter **) x));
}
static void *_p_p_Filters__BiquadTransposedTypeIITo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **) (Filters::FilterBase *) ((Filters::BiquadTransposedTypeII **) x));
}
static void *_p_p_Filters__BiquadTypeIITo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **) (Filters::FilterBase *) ((Filters::BiquadTypeII **) x));
}
static void *_p_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter **) x));
}
static void *_p_p_Filters__IIR__RBJFilters__RBJHighShelfFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJHighShelfFilter **) x));
}
static void *_p_p_Filters__IIR__RBJFilters__RBJLowShelfFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJLowShelfFilter **) x));
}
static void *_p_p_Filters__IIR__RBJFilters__RBJBandStopFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJBandStopFilter **) x));
}
static void *_p_p_Filters__IIR__RBJFilters__RBJBiquadFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *) ((Filters::IIR::RBJFilters::RBJBiquadFilter **) x));
}
static void *_p_p_Filters__IIR__RBJ__BandShelfFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::RBJ::BandShelfFilter **) x));
}
static void *_p_p_Filters__IIR__RBJ__HighShelfFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::RBJ::HighShelfFilter **) x));
}
static void *_p_p_Filters__IIR__RBJ__LowShelfFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::RBJ::LowShelfFilter **) x));
}
static void *_p_p_Filters__IIR__RBJ__BandStopFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::RBJ::BandStopFilter **) x));
}
static void *_p_p_Filters__IIR__RBJ__BandPass2FilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::RBJ::BandPass2Filter **) x));
}
static void *_p_p_Filters__IIR__Legendre__BandStopFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::Legendre::BandStopFilter **) x));
}
static void *_p_p_Filters__IIR__ChebyshevI__HighShelfFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::ChebyshevI::HighShelfFilter **) x));
}
static void *_p_p_Filters__IIR__ChebyshevI__LowShelfFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::ChebyshevI::LowShelfFilter **) x));
}
static void *_p_p_Filters__IIR__ChebyshevI__BandShelfFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::ChebyshevI::BandShelfFilter **) x));
}
static void *_p_p_Filters__IIR__ChebyshevI__BandStopFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::ChebyshevI::BandStopFilter **) x));
}
static void *_p_p_Filters__IIR__ChebyshevII__HighShelfFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::ChebyshevII::HighShelfFilter **) x));
}
static void *_p_p_Filters__IIR__ChebyshevII__LowShelfFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::ChebyshevII::LowShelfFilter **) x));
}
static void *_p_p_Filters__IIR__ChebyshevII__BandShelfFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::ChebyshevII::BandShelfFilter **) x));
}
static void *_p_p_Filters__IIR__ChebyshevII__BandStopFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::ChebyshevII::BandStopFilter **) x));
}
static void *_p_p_Filters__IIR__Butterworth__BandShelfFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::Butterworth::BandShelfFilter **) x));
}
static void *_p_p_Filters__IIR__Butterworth__HighShelfFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::Butterworth::HighShelfFilter **) x));
}
static void *_p_p_Filters__IIR__Butterworth__LowShelfFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::Butterworth::LowShelfFilter **) x));
}
static void *_p_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *) ((Filters::IIR::ZolzerFilters::ZolzerBiquadFilter **) x));
}
static void *_p_p_Filters__BiquadFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **) (Filters::FilterBase *) ((Filters::BiquadFilter **) x));
}
static void *_p_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter **) x));
}
static void *_p_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter **) x));
}
static void *_p_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerNotchFilter **) x));
}
static void *_p_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter **) x));
}
static void *_p_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter **) x));
}
static void *_p_p_Filters__IIR__Bessel__BandStopFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::Bessel::BandStopFilter **) x));
}
static void *_p_p_Filters__IIR__Butterworth__BandStopFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::IIR::Butterworth::BandStopFilter **) x));
}
static void *_p_p_Filters__BiquadTransposedTypeIICascadeTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **) (Filters::FilterBase *) ((Filters::BiquadTransposedTypeIICascade **) x));
}
static void *_p_p_Filters__BiquadTransposedTypeICascadeTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **) (Filters::FilterBase *) ((Filters::BiquadTransposedTypeICascade **) x));
}
static void *_p_p_Filters__BiquadTypeIICascadeTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **) (Filters::FilterBase *) ((Filters::BiquadTypeIICascade **) x));
}
static void *_p_p_Filters__BiquadTypeICascadeTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **) (Filters::FilterBase *) ((Filters::BiquadTypeICascade **) x));
}
static void *_p_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter **) x));
}
static void *_p_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter **) x));
}
static void *_p_p_Filters__BiquadTransposedTypeITo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **) (Filters::FilterBase *) ((Filters::BiquadTransposedTypeI **) x));
}
static void *_p_p_Filters__BiquadTypeITo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **) (Filters::FilterBase *) ((Filters::BiquadTypeI **) x));
}
static void *_p_p_Filters__FilterBaseTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Filters::FilterBase **) x));
}
static void *_p_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter **) x));
}
static void *_p_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter **) x));
}
static void *_p_Filters__IIR__Biquad__BiquadTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::Biquad::Biquad *) x));
}
static void *_p_Filters__IIR__ChebyshevII__BandPassFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::ChebyshevII::BandPassFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevII__HighPassFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::ChebyshevII::HighPassFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevII__LowPassFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::ChebyshevII::LowPassFilter *) x));
}
static void *_p_Filters__IIR__Butterworth__BandPassFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::Butterworth::BandPassFilter *) x));
}
static void *_p_Filters__IIR__Butterworth__HighPassFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::Butterworth::HighPassFilter *) x));
}
static void *_p_Filters__IIR__Butterworth__LowPassFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::Butterworth::LowPassFilter *) x));
}
static void *_p_Filters__IIR__Bessel__BandPassFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::Bessel::BandPassFilter *) x));
}
static void *_p_Filters__IIR__Bessel__HighPassFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::Bessel::HighPassFilter *) x));
}
static void *_p_Filters__IIR__Bessel__LowPassFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::Bessel::LowPassFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevI__LowPassFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::ChebyshevI::LowPassFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevI__HighPassFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::ChebyshevI::HighPassFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevI__BandPassFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::ChebyshevI::BandPassFilter *) x));
}
static void *_p_Filters__IIR__Legendre__LowPassFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::Legendre::LowPassFilter *) x));
}
static void *_p_Filters__IIR__Legendre__HighPassFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::Legendre::HighPassFilter *) x));
}
static void *_p_Filters__IIR__Legendre__BandPassFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::Legendre::BandPassFilter *) x));
}
static void *_p_Filters__IIR__RBJ__LowPassFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::RBJ::LowPassFilter *) x));
}
static void *_p_Filters__IIR__RBJ__HighPassFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::RBJ::HighPassFilter *) x));
}
static void *_p_Filters__IIR__RBJ__AllPassFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::RBJ::AllPassFilter *) x));
}
static void *_p_Filters__IIR__RBJ__BandPass1FilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::RBJ::BandPass1Filter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJLowPassFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJLowPassFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJHighPassFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJHighPassFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJAllPassFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJAllPassFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJBandPassFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJBandPassFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJPeakFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJPeakFilter *) x));
}
static void *_p_Filters__BiquadTransposedTypeIITo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *)(Filters::FilterBase *) ((Filters::BiquadTransposedTypeII *) x));
}
static void *_p_Filters__BiquadTypeIITo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *)(Filters::FilterBase *) ((Filters::BiquadTypeII *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevII__BandStopFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::ChebyshevII::BandStopFilter *) x));
}
static void *_p_Filters__IIR__Butterworth__BandShelfFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::Butterworth::BandShelfFilter *) x));
}
static void *_p_Filters__IIR__Butterworth__HighShelfFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::Butterworth::HighShelfFilter *) x));
}
static void *_p_Filters__IIR__Butterworth__LowShelfFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::Butterworth::LowShelfFilter *) x));
}
static void *_p_Filters__IIR__Butterworth__BandStopFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::Butterworth::BandStopFilter *) x));
}
static void *_p_Filters__IIR__Bessel__BandStopFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::Bessel::BandStopFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerNotchFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *) ((Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) x));
}
static void *_p_Filters__BiquadFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *)(Filters::FilterBase *) ((Filters::BiquadFilter *) x));
}
static void *_p_Filters__BiquadTransposedTypeIICascadeTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *)(Filters::FilterBase *) ((Filters::BiquadTransposedTypeIICascade *) x));
}
static void *_p_Filters__BiquadTransposedTypeICascadeTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *)(Filters::FilterBase *) ((Filters::BiquadTransposedTypeICascade *) x));
}
static void *_p_Filters__BiquadTypeIICascadeTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *)(Filters::FilterBase *) ((Filters::BiquadTypeIICascade *) x));
}
static void *_p_Filters__BiquadTypeICascadeTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *)(Filters::FilterBase *) ((Filters::BiquadTypeICascade *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevII__BandShelfFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::ChebyshevII::BandShelfFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevII__LowShelfFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::ChebyshevII::LowShelfFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevII__HighShelfFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::ChebyshevII::HighShelfFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevI__BandStopFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::ChebyshevI::BandStopFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevI__BandShelfFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::ChebyshevI::BandShelfFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevI__LowShelfFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::ChebyshevI::LowShelfFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevI__HighShelfFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::ChebyshevI::HighShelfFilter *) x));
}
static void *_p_Filters__IIR__Legendre__BandStopFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::Legendre::BandStopFilter *) x));
}
static void *_p_Filters__IIR__RBJ__BandPass2FilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::RBJ::BandPass2Filter *) x));
}
static void *_p_Filters__IIR__RBJ__BandStopFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::RBJ::BandStopFilter *) x));
}
static void *_p_Filters__IIR__RBJ__LowShelfFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::RBJ::LowShelfFilter *) x));
}
static void *_p_Filters__IIR__RBJ__HighShelfFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::RBJ::HighShelfFilter *) x));
}
static void *_p_Filters__IIR__RBJ__BandShelfFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::IIR::RBJ::BandShelfFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJBiquadFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *) ((Filters::IIR::RBJFilters::RBJBiquadFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJBandStopFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJBandStopFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJLowShelfFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJLowShelfFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJHighShelfFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJHighShelfFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *) x));
}
static void *_p_Filters__BiquadTransposedTypeITo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *)(Filters::FilterBase *) ((Filters::BiquadTransposedTypeI *) x));
}
static void *_p_Filters__BiquadTypeITo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *)(Filters::FilterBase *) ((Filters::BiquadTypeI *) x));
}
static void *_p_AmplifierProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *) ((AmplifierProcessor *) x));
}
static void *_p_FilterProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *) ((FilterProcessor *) x));
}
static void *_p_OscillatorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *) ((OscillatorProcessor *) x));
}
static void *_p_StereoSplitterProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((StereoSplitterProcessor *) x));
}
static void *_p_Parameter2ProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((Parameter2Processor *) x));
}
static void *_p_FunctionProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *) ((FunctionProcessor *) x));
}
static void *_p_MixerProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((MixerProcessor *) x));
}
static void *_p_GeneratorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *) ((GeneratorProcessor *) x));
}
static void *_p_StereoFXProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (StereoProcessor *) ((StereoFXProcessor *) x));
}
static void *_p_MonoFXProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *) ((MonoFXProcessor *) x));
}
static void *_p_StereoCascadeProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (StereoProcessor *) ((StereoCascadeProcessor *) x));
}
static void *_p_StereoProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((StereoProcessor *) x));
}
static void *_p_MonoCascadeProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *) ((MonoCascadeProcessor *) x));
}
static void *_p_MonoProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((MonoProcessor *) x));
}
static void *_p_StereoOscillatorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (StereoProcessor *) ((StereoOscillatorProcessor *) x));
}
static void *_p_StereoGeneratorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (StereoProcessor *) ((StereoGeneratorProcessor *) x));
}
static void *_p_StereoFunctionProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (StereoProcessor *) ((StereoFunctionProcessor *) x));
}
static void *_p_StereoFilterProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (StereoProcessor *) ((StereoFilterProcessor *) x));
}
static void *_p_StereoAmplifierProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (StereoProcessor *) ((StereoAmplifierProcessor *) x));
}
static void *_p_SpectrumProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((SpectrumProcessor *) x));
}
static void *_p_SignalSourceProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((SignalSourceProcessor *) x));
}
static void *_p_SignalSinkProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((SignalSinkProcessor *) x));
}
static void *_p_MonoOversampleProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((MonoOversampleProcessor *) x));
}
static void *_p_MonoUpsampleProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((MonoUpsampleProcessor *) x));
}
static void *_p_MonoDownsampleProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((MonoDownsampleProcessor *) x));
}
static void *_p_OperatorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((OperatorProcessor *) x));
}
static void *_p_MonoOperatorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((MonoOperatorProcessor *) x));
}
static void *_p_MonoCascadeOperatorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoOperatorProcessor *) ((MonoCascadeOperatorProcessor *) x));
}
static void *_p_MonoMultiplierOperatorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoOperatorProcessor *) ((MonoMultiplierOperatorProcessor *) x));
}
static void *_p_MonoAdderOperatorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoOperatorProcessor *) ((MonoAdderOperatorProcessor *) x));
}
static void *_p_MonoSubtractorOperatorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoOperatorProcessor *) ((MonoSubtractorOperatorProcessor *) x));
}
static void *_p_MonoModulatorOperatorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoOperatorProcessor *) ((MonoModulatorOperatorProcessor *) x));
}
static void *_p_MonoBlendOperatorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoOperatorProcessor *) ((MonoBlendOperatorProcessor *) x));
}
static void *_p_Filters__FilterBaseTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Filters::FilterBase *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *) x));
}
static void *_p_Filters__IIR__Biquad__BiquadTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::Biquad::Biquad *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJHighPassFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJHighPassFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJLowPassFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJLowPassFilter *) x));
}
static void *_p_Filters__IIR__RBJ__BandPass1FilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::RBJ::BandPass1Filter *) x));
}
static void *_p_Filters__IIR__RBJ__AllPassFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::RBJ::AllPassFilter *) x));
}
static void *_p_Filters__IIR__RBJ__HighPassFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::RBJ::HighPassFilter *) x));
}
static void *_p_Filters__IIR__RBJ__LowPassFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::RBJ::LowPassFilter *) x));
}
static void *_p_Filters__IIR__Legendre__BandPassFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::Legendre::BandPassFilter *) x));
}
static void *_p_Filters__IIR__Legendre__HighPassFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::Legendre::HighPassFilter *) x));
}
static void *_p_Filters__IIR__Legendre__LowPassFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::Legendre::LowPassFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevI__BandPassFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::ChebyshevI::BandPassFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevI__HighPassFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::ChebyshevI::HighPassFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevI__LowPassFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::ChebyshevI::LowPassFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevII__BandPassFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::ChebyshevII::BandPassFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevII__HighPassFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::ChebyshevII::HighPassFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevII__LowPassFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::ChebyshevII::LowPassFilter *) x));
}
static void *_p_Filters__IIR__Butterworth__BandPassFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::Butterworth::BandPassFilter *) x));
}
static void *_p_Filters__IIR__Butterworth__HighPassFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::Butterworth::HighPassFilter *) x));
}
static void *_p_Filters__IIR__Butterworth__LowPassFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::Butterworth::LowPassFilter *) x));
}
static void *_p_Filters__IIR__Bessel__BandPassFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::Bessel::BandPassFilter *) x));
}
static void *_p_Filters__IIR__Bessel__HighPassFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::Bessel::HighPassFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *) x));
}
static void *_p_Filters__IIR__Bessel__LowPassFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::Bessel::LowPassFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJAllPassFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJAllPassFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJBandPassFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJBandPassFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJPeakFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJPeakFilter *) x));
}
static void *_p_Filters__BiquadTransposedTypeIITo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *)(Filters::FilterBase *) ((Filters::BiquadTransposedTypeII *) x));
}
static void *_p_Filters__BiquadTypeIITo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *)(Filters::FilterBase *) ((Filters::BiquadTypeII *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJBiquadFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *) ((Filters::IIR::RBJFilters::RBJBiquadFilter *) x));
}
static void *_p_Filters__IIR__RBJ__BandShelfFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::RBJ::BandShelfFilter *) x));
}
static void *_p_Filters__IIR__RBJ__HighShelfFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::RBJ::HighShelfFilter *) x));
}
static void *_p_Filters__IIR__RBJ__LowShelfFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::RBJ::LowShelfFilter *) x));
}
static void *_p_Filters__IIR__RBJ__BandStopFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::RBJ::BandStopFilter *) x));
}
static void *_p_Filters__IIR__RBJ__BandPass2FilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::RBJ::BandPass2Filter *) x));
}
static void *_p_Filters__IIR__Legendre__BandStopFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::Legendre::BandStopFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevI__HighShelfFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::ChebyshevI::HighShelfFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevI__LowShelfFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::ChebyshevI::LowShelfFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevI__BandShelfFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::ChebyshevI::BandShelfFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevI__BandStopFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::ChebyshevI::BandStopFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevII__HighShelfFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::ChebyshevII::HighShelfFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevII__LowShelfFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::ChebyshevII::LowShelfFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevII__BandShelfFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::ChebyshevII::BandShelfFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevII__BandStopFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::ChebyshevII::BandStopFilter *) x));
}
static void *_p_Filters__IIR__Butterworth__BandShelfFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::Butterworth::BandShelfFilter *) x));
}
static void *_p_Filters__IIR__Butterworth__HighShelfFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::Butterworth::HighShelfFilter *) x));
}
static void *_p_Filters__IIR__Butterworth__LowShelfFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::Butterworth::LowShelfFilter *) x));
}
static void *_p_Filters__IIR__Butterworth__BandStopFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::Butterworth::BandStopFilter *) x));
}
static void *_p_Filters__IIR__Bessel__BandStopFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::IIR::Bessel::BandStopFilter *) x));
}
static void *_p_Filters__BiquadFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *)(Filters::FilterBase *) ((Filters::BiquadFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *) ((Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerNotchFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *) x));
}
static void *_p_Filters__BiquadTypeICascadeTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *)(Filters::FilterBase *) ((Filters::BiquadTypeICascade *) x));
}
static void *_p_Filters__BiquadTypeIICascadeTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *)(Filters::FilterBase *) ((Filters::BiquadTypeIICascade *) x));
}
static void *_p_Filters__BiquadTransposedTypeICascadeTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *)(Filters::FilterBase *) ((Filters::BiquadTransposedTypeICascade *) x));
}
static void *_p_Filters__BiquadTransposedTypeIICascadeTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *)(Filters::FilterBase *) ((Filters::BiquadTransposedTypeIICascade *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJBandStopFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJBandStopFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJLowShelfFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJLowShelfFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJHighShelfFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJHighShelfFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *) x));
}
static void *_p_Filters__BiquadTransposedTypeITo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *)(Filters::FilterBase *) ((Filters::BiquadTransposedTypeI *) x));
}
static void *_p_Filters__BiquadTypeITo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *)(Filters::FilterBase *) ((Filters::BiquadTypeI *) x));
}
static void *_p_AmplifierProcessorTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *)  ((AmplifierProcessor *) x));
}
static void *_p_FilterProcessorTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *)  ((FilterProcessor *) x));
}
static void *_p_OscillatorProcessorTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *)  ((OscillatorProcessor *) x));
}
static void *_p_FunctionProcessorTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *)  ((FunctionProcessor *) x));
}
static void *_p_GeneratorProcessorTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *)  ((GeneratorProcessor *) x));
}
static void *_p_MonoFXProcessorTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *)  ((MonoFXProcessor *) x));
}
static void *_p_MonoCascadeProcessorTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *)  ((MonoCascadeProcessor *) x));
}
static void *_p_Filters__FilterBaseTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Filters::FilterBase *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *)(Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *) x));
}
static void *_p_StereoCascadeProcessorTo_p_StereoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((StereoProcessor *)  ((StereoCascadeProcessor *) x));
}
static void *_p_StereoFXProcessorTo_p_StereoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((StereoProcessor *)  ((StereoFXProcessor *) x));
}
static void *_p_StereoOscillatorProcessorTo_p_StereoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((StereoProcessor *)  ((StereoOscillatorProcessor *) x));
}
static void *_p_StereoGeneratorProcessorTo_p_StereoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((StereoProcessor *)  ((StereoGeneratorProcessor *) x));
}
static void *_p_StereoFunctionProcessorTo_p_StereoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((StereoProcessor *)  ((StereoFunctionProcessor *) x));
}
static void *_p_StereoFilterProcessorTo_p_StereoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((StereoProcessor *)  ((StereoFilterProcessor *) x));
}
static void *_p_StereoAmplifierProcessorTo_p_StereoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((StereoProcessor *)  ((StereoAmplifierProcessor *) x));
}
static void *_p_MonoCascadeOperatorProcessorTo_p_MonoOperatorProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoOperatorProcessor *)  ((MonoCascadeOperatorProcessor *) x));
}
static void *_p_MonoMultiplierOperatorProcessorTo_p_MonoOperatorProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoOperatorProcessor *)  ((MonoMultiplierOperatorProcessor *) x));
}
static void *_p_MonoAdderOperatorProcessorTo_p_MonoOperatorProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoOperatorProcessor *)  ((MonoAdderOperatorProcessor *) x));
}
static void *_p_MonoSubtractorOperatorProcessorTo_p_MonoOperatorProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoOperatorProcessor *)  ((MonoSubtractorOperatorProcessor *) x));
}
static void *_p_MonoModulatorOperatorProcessorTo_p_MonoOperatorProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoOperatorProcessor *)  ((MonoModulatorOperatorProcessor *) x));
}
static void *_p_MonoBlendOperatorProcessorTo_p_MonoOperatorProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoOperatorProcessor *)  ((MonoBlendOperatorProcessor *) x));
}
static void *_p_Filters__IIR__Biquad__BiquadTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::Biquad::Biquad *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJPeakFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJPeakFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJBandPassFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJBandPassFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJAllPassFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJAllPassFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJHighPassFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJHighPassFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJLowPassFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJLowPassFilter *) x));
}
static void *_p_Filters__IIR__RBJ__BandPass1FilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::RBJ::BandPass1Filter *) x));
}
static void *_p_Filters__IIR__RBJ__AllPassFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::RBJ::AllPassFilter *) x));
}
static void *_p_Filters__IIR__RBJ__HighPassFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::RBJ::HighPassFilter *) x));
}
static void *_p_Filters__IIR__RBJ__LowPassFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::RBJ::LowPassFilter *) x));
}
static void *_p_Filters__IIR__Legendre__BandPassFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::Legendre::BandPassFilter *) x));
}
static void *_p_Filters__IIR__Legendre__HighPassFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::Legendre::HighPassFilter *) x));
}
static void *_p_Filters__IIR__Legendre__LowPassFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::Legendre::LowPassFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevI__BandPassFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::ChebyshevI::BandPassFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevI__HighPassFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::ChebyshevI::HighPassFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevI__LowPassFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::ChebyshevI::LowPassFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevII__BandPassFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::ChebyshevII::BandPassFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevII__HighPassFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::ChebyshevII::HighPassFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevII__LowPassFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::ChebyshevII::LowPassFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *) x));
}
static void *_p_Filters__IIR__Bessel__LowPassFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::Bessel::LowPassFilter *) x));
}
static void *_p_Filters__IIR__Bessel__HighPassFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::Bessel::HighPassFilter *) x));
}
static void *_p_Filters__IIR__Bessel__BandPassFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::Bessel::BandPassFilter *) x));
}
static void *_p_Filters__IIR__Butterworth__LowPassFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::Butterworth::LowPassFilter *) x));
}
static void *_p_Filters__IIR__Butterworth__HighPassFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::Butterworth::HighPassFilter *) x));
}
static void *_p_Filters__IIR__Butterworth__BandPassFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::Butterworth::BandPassFilter *) x));
}
static void *_p_Filters__BiquadTransposedTypeIITo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *) (Filters::FilterBase *) ((Filters::BiquadTransposedTypeII *) x));
}
static void *_p_Filters__BiquadTypeIITo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *) (Filters::FilterBase *) ((Filters::BiquadTypeII *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJHighShelfFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJHighShelfFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJLowShelfFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJLowShelfFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJBandStopFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::RBJFilters::RBJBiquadFilter *) ((Filters::IIR::RBJFilters::RBJBandStopFilter *) x));
}
static void *_p_Filters__IIR__RBJFilters__RBJBiquadFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *) ((Filters::IIR::RBJFilters::RBJBiquadFilter *) x));
}
static void *_p_Filters__IIR__RBJ__BandShelfFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::RBJ::BandShelfFilter *) x));
}
static void *_p_Filters__IIR__RBJ__HighShelfFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::RBJ::HighShelfFilter *) x));
}
static void *_p_Filters__IIR__RBJ__LowShelfFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::RBJ::LowShelfFilter *) x));
}
static void *_p_Filters__IIR__RBJ__BandStopFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::RBJ::BandStopFilter *) x));
}
static void *_p_Filters__IIR__RBJ__BandPass2FilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::RBJ::BandPass2Filter *) x));
}
static void *_p_Filters__IIR__Legendre__BandStopFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::Legendre::BandStopFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevI__HighShelfFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::ChebyshevI::HighShelfFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevI__LowShelfFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::ChebyshevI::LowShelfFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevI__BandShelfFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::ChebyshevI::BandShelfFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevI__BandStopFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::ChebyshevI::BandStopFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevII__HighShelfFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::ChebyshevII::HighShelfFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevII__LowShelfFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::ChebyshevII::LowShelfFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevII__BandShelfFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::ChebyshevII::BandShelfFilter *) x));
}
static void *_p_Filters__IIR__ChebyshevII__BandStopFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::ChebyshevII::BandStopFilter *) x));
}
static void *_p_Filters__IIR__Butterworth__BandShelfFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::Butterworth::BandShelfFilter *) x));
}
static void *_p_Filters__IIR__Butterworth__HighShelfFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::Butterworth::HighShelfFilter *) x));
}
static void *_p_Filters__IIR__Butterworth__LowShelfFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::Butterworth::LowShelfFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *) ((Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) x));
}
static void *_p_Filters__BiquadFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *) (Filters::FilterBase *) ((Filters::BiquadFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerNotchFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *) x));
}
static void *_p_Filters__IIR__Bessel__BandStopFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::Bessel::BandStopFilter *) x));
}
static void *_p_Filters__IIR__Butterworth__BandStopFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::IIR::Butterworth::BandStopFilter *) x));
}
static void *_p_Filters__BiquadTransposedTypeIICascadeTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *) (Filters::FilterBase *) ((Filters::BiquadTransposedTypeIICascade *) x));
}
static void *_p_Filters__BiquadTransposedTypeICascadeTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *) (Filters::FilterBase *) ((Filters::BiquadTransposedTypeICascade *) x));
}
static void *_p_Filters__BiquadTypeIICascadeTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *) (Filters::FilterBase *) ((Filters::BiquadTypeIICascade *) x));
}
static void *_p_Filters__BiquadTypeICascadeTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *) (Filters::FilterBase *) ((Filters::BiquadTypeICascade *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *) x));
}
static void *_p_Filters__BiquadTransposedTypeITo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *) (Filters::FilterBase *) ((Filters::BiquadTransposedTypeI *) x));
}
static void *_p_Filters__BiquadTypeITo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *) (Filters::FilterBase *) ((Filters::BiquadTypeI *) x));
}
static void *_p_Filters__FilterBaseTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Filters::FilterBase *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *) x));
}
static void *_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *) (Filters::FilterBase *)(Filters::BiquadTransposedTypeII *)(Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *) ((Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *) x));
}
static swig_type_info _swigt__p_AmplifierProcessor = {"_p_AmplifierProcessor", "AmplifierProcessor *", 0, 0, (void*)&_wrap_class_AmplifierProcessor, 0};
static swig_type_info _swigt__p_Dsp__Bessel__BandPassT_32_t = {"_p_Dsp__Bessel__BandPassT_32_t", "Dsp::Bessel::BandPass< 32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__Bessel__BandStopT_32_t = {"_p_Dsp__Bessel__BandStopT_32_t", "Dsp::Bessel::BandStop< 32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__Bessel__HighPassT_32_t = {"_p_Dsp__Bessel__HighPassT_32_t", "Dsp::Bessel::HighPass< 32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__Bessel__LowPassT_32_t = {"_p_Dsp__Bessel__LowPassT_32_t", "Dsp::Bessel::LowPass< 32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__Butterworth__BandPassT_32_t = {"_p_Dsp__Butterworth__BandPassT_32_t", "Dsp::Butterworth::BandPass< 32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__Butterworth__BandShelfT_32_t = {"_p_Dsp__Butterworth__BandShelfT_32_t", "Dsp::Butterworth::BandShelf< 32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__Butterworth__BandStopT_32_t = {"_p_Dsp__Butterworth__BandStopT_32_t", "Dsp::Butterworth::BandStop< 32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__Butterworth__HighPassT_32_t = {"_p_Dsp__Butterworth__HighPassT_32_t", "Dsp::Butterworth::HighPass< 32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__Butterworth__HighShelfT_32_t = {"_p_Dsp__Butterworth__HighShelfT_32_t", "Dsp::Butterworth::HighShelf< 32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__Butterworth__LowPassT_32_t = {"_p_Dsp__Butterworth__LowPassT_32_t", "Dsp::Butterworth::LowPass< 32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__Butterworth__LowShelfT_32_t = {"_p_Dsp__Butterworth__LowShelfT_32_t", "Dsp::Butterworth::LowShelf< 32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__ChebyshevII__BandPassT_32_t = {"_p_Dsp__ChebyshevII__BandPassT_32_t", "Dsp::ChebyshevII::BandPass< 32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__ChebyshevII__BandShelfT_32_t = {"_p_Dsp__ChebyshevII__BandShelfT_32_t", "Dsp::ChebyshevII::BandShelf< 32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__ChebyshevII__BandStopT_32_t = {"_p_Dsp__ChebyshevII__BandStopT_32_t", "Dsp::ChebyshevII::BandStop< 32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__ChebyshevII__HighPassT_32_t = {"_p_Dsp__ChebyshevII__HighPassT_32_t", "Dsp::ChebyshevII::HighPass< 32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__ChebyshevII__HighShelfT_32_t = {"_p_Dsp__ChebyshevII__HighShelfT_32_t", "Dsp::ChebyshevII::HighShelf< 32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__ChebyshevII__LowPassT_32_t = {"_p_Dsp__ChebyshevII__LowPassT_32_t", "Dsp::ChebyshevII::LowPass< 32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__ChebyshevII__LowShelfT_32_t = {"_p_Dsp__ChebyshevII__LowShelfT_32_t", "Dsp::ChebyshevII::LowShelf< 32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__ChebyshevI__BandPassT_32_t = {"_p_Dsp__ChebyshevI__BandPassT_32_t", "Dsp::ChebyshevI::BandPass< 32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__ChebyshevI__BandShelfT_32_t = {"_p_Dsp__ChebyshevI__BandShelfT_32_t", "Dsp::ChebyshevI::BandShelf< 32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__ChebyshevI__BandStopT_32_t = {"_p_Dsp__ChebyshevI__BandStopT_32_t", "Dsp::ChebyshevI::BandStop< 32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__ChebyshevI__HighPassT_32_t = {"_p_Dsp__ChebyshevI__HighPassT_32_t", "Dsp::ChebyshevI::HighPass< 32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__ChebyshevI__HighShelfT_32_t = {"_p_Dsp__ChebyshevI__HighShelfT_32_t", "Dsp::ChebyshevI::HighShelf< 32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__ChebyshevI__LowPassT_32_t = {"_p_Dsp__ChebyshevI__LowPassT_32_t", "Dsp::ChebyshevI::LowPass< 32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__ChebyshevI__LowShelfT_32_t = {"_p_Dsp__ChebyshevI__LowShelfT_32_t", "Dsp::ChebyshevI::LowShelf< 32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__Legendre__BandPassT_32_t = {"_p_Dsp__Legendre__BandPassT_32_t", "Dsp::Legendre::BandPass< 32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__Legendre__BandStopT_32_t = {"_p_Dsp__Legendre__BandStopT_32_t", "Dsp::Legendre::BandStop< 32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__Legendre__HighPassT_32_t = {"_p_Dsp__Legendre__HighPassT_32_t", "Dsp::Legendre::HighPass< 32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__Legendre__LowPassT_32_t = {"_p_Dsp__Legendre__LowPassT_32_t", "Dsp::Legendre::LowPass< 32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__RBJ__AllPass = {"_p_Dsp__RBJ__AllPass", "Dsp::RBJ::AllPass *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__RBJ__BandPass1 = {"_p_Dsp__RBJ__BandPass1", "Dsp::RBJ::BandPass1 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__RBJ__BandPass2 = {"_p_Dsp__RBJ__BandPass2", "Dsp::RBJ::BandPass2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__RBJ__BandShelf = {"_p_Dsp__RBJ__BandShelf", "Dsp::RBJ::BandShelf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__RBJ__BandStop = {"_p_Dsp__RBJ__BandStop", "Dsp::RBJ::BandStop *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__RBJ__HighPass = {"_p_Dsp__RBJ__HighPass", "Dsp::RBJ::HighPass *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__RBJ__HighShelf = {"_p_Dsp__RBJ__HighShelf", "Dsp::RBJ::HighShelf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__RBJ__LowPass = {"_p_Dsp__RBJ__LowPass", "Dsp::RBJ::LowPass *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dsp__RBJ__LowShelf = {"_p_Dsp__RBJ__LowShelf", "Dsp::RBJ::LowShelf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FilterProcessor = {"_p_FilterProcessor", "FilterProcessor *", 0, 0, (void*)&_wrap_class_FilterProcessor, 0};
static swig_type_info _swigt__p_Filters__BiquadFilter = {"_p_Filters__BiquadFilter", "Filters::BiquadFilter *", 0, 0, (void*)&_wrap_class_BiquadFilter, 0};
static swig_type_info _swigt__p_Filters__BiquadFilterCascader = {"_p_Filters__BiquadFilterCascader", "Filters::BiquadFilterCascader *", 0, 0, (void*)&_wrap_class_BiquadFilterCascader, 0};
static swig_type_info _swigt__p_Filters__BiquadParallelFilters = {"_p_Filters__BiquadParallelFilters", "Filters::BiquadParallelFilters *", 0, 0, (void*)&_wrap_class_BiquadParallelFilters, 0};
static swig_type_info _swigt__p_Filters__BiquadSection = {"_p_Filters__BiquadSection", "Filters::BiquadSection *", 0, 0, (void*)&_wrap_class_BiquadSection, 0};
static swig_type_info _swigt__p_Filters__BiquadTransposedTypeI = {"_p_Filters__BiquadTransposedTypeI", "Filters::BiquadTransposedTypeI *", 0, 0, (void*)&_wrap_class_BiquadTransposedTypeI, 0};
static swig_type_info _swigt__p_Filters__BiquadTransposedTypeICascade = {"_p_Filters__BiquadTransposedTypeICascade", "Filters::BiquadTransposedTypeICascade *", 0, 0, (void*)&_wrap_class_BiquadTransposedTypeICascade, 0};
static swig_type_info _swigt__p_Filters__BiquadTransposedTypeII = {"_p_Filters__BiquadTransposedTypeII", "Filters::BiquadTransposedTypeII *", 0, 0, (void*)&_wrap_class_BiquadTransposedTypeII, 0};
static swig_type_info _swigt__p_Filters__BiquadTransposedTypeIICascade = {"_p_Filters__BiquadTransposedTypeIICascade", "Filters::BiquadTransposedTypeIICascade *", 0, 0, (void*)&_wrap_class_BiquadTransposedTypeIICascade, 0};
static swig_type_info _swigt__p_Filters__BiquadTypeI = {"_p_Filters__BiquadTypeI", "Filters::BiquadTypeI *", 0, 0, (void*)&_wrap_class_BiquadTypeI, 0};
static swig_type_info _swigt__p_Filters__BiquadTypeICascade = {"_p_Filters__BiquadTypeICascade", "Filters::BiquadTypeICascade *", 0, 0, (void*)&_wrap_class_BiquadTypeICascade, 0};
static swig_type_info _swigt__p_Filters__BiquadTypeII = {"_p_Filters__BiquadTypeII", "Filters::BiquadTypeII *", 0, 0, (void*)&_wrap_class_BiquadTypeII, 0};
static swig_type_info _swigt__p_Filters__BiquadTypeIICascade = {"_p_Filters__BiquadTypeIICascade", "Filters::BiquadTypeIICascade *", 0, 0, (void*)&_wrap_class_BiquadTypeIICascade, 0};
static swig_type_info _swigt__p_Filters__FilterBase = {"_p_Filters__FilterBase", "Filters::FilterBase *", 0, 0, (void*)&_wrap_class_FilterBase, 0};
static swig_type_info _swigt__p_Filters__FilterCoefficients = {"_p_Filters__FilterCoefficients", "Filters::FilterCoefficients *", 0, 0, (void*)&_wrap_class_FilterCoefficients, 0};
static swig_type_info _swigt__p_Filters__IIR__Bessel__BandPassFilter = {"_p_Filters__IIR__Bessel__BandPassFilter", "Filters::IIR::Bessel::BandPassFilter *", 0, 0, (void*)&_wrap_class_IIRBesselBandPass, 0};
static swig_type_info _swigt__p_Filters__IIR__Bessel__BandStopFilter = {"_p_Filters__IIR__Bessel__BandStopFilter", "Filters::IIR::Bessel::BandStopFilter *", 0, 0, (void*)&_wrap_class_IIRBesselBandStop, 0};
static swig_type_info _swigt__p_Filters__IIR__Bessel__HighPassFilter = {"_p_Filters__IIR__Bessel__HighPassFilter", "Filters::IIR::Bessel::HighPassFilter *", 0, 0, (void*)&_wrap_class_IIRBesselHighPass, 0};
static swig_type_info _swigt__p_Filters__IIR__Bessel__LowPassFilter = {"_p_Filters__IIR__Bessel__LowPassFilter", "Filters::IIR::Bessel::LowPassFilter *", 0, 0, (void*)&_wrap_class_IIRBesselLowPass, 0};
static swig_type_info _swigt__p_Filters__IIR__Biquad__Biquad = {"_p_Filters__IIR__Biquad__Biquad", "Filters::IIR::Biquad::Biquad *", 0, 0, (void*)&_wrap_class_IIRBiquadFilter, 0};
static swig_type_info _swigt__p_Filters__IIR__Biquad__Parameters = {"_p_Filters__IIR__Biquad__Parameters", "Filters::IIR::Biquad::Parameters *", 0, 0, (void*)&_wrap_class_Parameters, 0};
static swig_type_info _swigt__p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter = {"_p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter", "Filters::IIR::ButterworthFilters::ButterworthBandPassCascadeFilter *", 0, 0, (void*)&_wrap_class_ButterworthBandPassCascadeFilter, 0};
static swig_type_info _swigt__p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db = {"_p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db", "Filters::IIR::ButterworthFilters::ButterworthBandPassFilter12db *", 0, 0, (void*)&_wrap_class_ButterworthBandPassFilter12db, 0};
static swig_type_info _swigt__p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter = {"_p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter", "Filters::IIR::ButterworthFilters::ButterworthBandStopCascadeFilter *", 0, 0, (void*)&_wrap_class_ButterworthBandStopCascadeFilter, 0};
static swig_type_info _swigt__p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db = {"_p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db", "Filters::IIR::ButterworthFilters::ButterworthBandStopFilter12db *", 0, 0, (void*)&_wrap_class_ButterworthBandStopFilter12db, 0};
static swig_type_info _swigt__p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter = {"_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter", "Filters::IIR::ButterworthFilters::ButterworthDampedLowPassCascadeFilter *", 0, 0, (void*)&_wrap_class_ButterworthDampedLowPassCascadeFilter, 0};
static swig_type_info _swigt__p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db = {"_p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db", "Filters::IIR::ButterworthFilters::ButterworthDampedLowPassFilter12db *", 0, 0, (void*)&_wrap_class_ButterworthDampedLowPassFilter12db, 0};
static swig_type_info _swigt__p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter = {"_p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter", "Filters::IIR::ButterworthFilters::ButterworthHighPassCascadeFilter *", 0, 0, (void*)&_wrap_class_ButterworthHighPassCascadeFilter, 0};
static swig_type_info _swigt__p_Filters__IIR__ButterworthFilters__ButterworthHighPassFilter12db = {"_p_Filters__IIR__ButterworthFilters__ButterworthHighPassFilter12db", "Filters::IIR::ButterworthFilters::ButterworthHighPassFilter12db *", 0, 0, (void*)&_wrap_class_ButterworthHighPassFilter12db, 0};
static swig_type_info _swigt__p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter = {"_p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter", "Filters::IIR::ButterworthFilters::ButterworthLowPassCascadeFilter *", 0, 0, (void*)&_wrap_class_ButterworthLowPassCascadeFilter, 0};
static swig_type_info _swigt__p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db = {"_p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db", "Filters::IIR::ButterworthFilters::ButterworthLowPassFilter12db *", 0, 0, (void*)&_wrap_class_ButterworthLowPassFilter12db, 0};
static swig_type_info _swigt__p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter = {"_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter", "Filters::IIR::ButterworthFilters::ButterworthResonantLowPassCascadeFilter *", 0, 0, (void*)&_wrap_class_ButterworthResonantLowPassCascadeFilter, 0};
static swig_type_info _swigt__p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db = {"_p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db", "Filters::IIR::ButterworthFilters::ButterworthResonantLowPassFilter12db *", 0, 0, (void*)&_wrap_class_ButterworthResonantLowPassFilter12db, 0};
static swig_type_info _swigt__p_Filters__IIR__Butterworth__BandPassFilter = {"_p_Filters__IIR__Butterworth__BandPassFilter", "Filters::IIR::Butterworth::BandPassFilter *", 0, 0, (void*)&_wrap_class_IIRButterworthBandPass, 0};
static swig_type_info _swigt__p_Filters__IIR__Butterworth__BandShelfFilter = {"_p_Filters__IIR__Butterworth__BandShelfFilter", "Filters::IIR::Butterworth::BandShelfFilter *", 0, 0, (void*)&_wrap_class_IIRButterworthBandShelf, 0};
static swig_type_info _swigt__p_Filters__IIR__Butterworth__BandStopFilter = {"_p_Filters__IIR__Butterworth__BandStopFilter", "Filters::IIR::Butterworth::BandStopFilter *", 0, 0, (void*)&_wrap_class_IIRButterworthBandStop, 0};
static swig_type_info _swigt__p_Filters__IIR__Butterworth__HighPassFilter = {"_p_Filters__IIR__Butterworth__HighPassFilter", "Filters::IIR::Butterworth::HighPassFilter *", 0, 0, (void*)&_wrap_class_IIRButterworthHighPass, 0};
static swig_type_info _swigt__p_Filters__IIR__Butterworth__HighShelfFilter = {"_p_Filters__IIR__Butterworth__HighShelfFilter", "Filters::IIR::Butterworth::HighShelfFilter *", 0, 0, (void*)&_wrap_class_IIRButterworthHighShelf, 0};
static swig_type_info _swigt__p_Filters__IIR__Butterworth__LowPassFilter = {"_p_Filters__IIR__Butterworth__LowPassFilter", "Filters::IIR::Butterworth::LowPassFilter *", 0, 0, (void*)&_wrap_class_IIRButterworthLowPass, 0};
static swig_type_info _swigt__p_Filters__IIR__Butterworth__LowShelfFilter = {"_p_Filters__IIR__Butterworth__LowShelfFilter", "Filters::IIR::Butterworth::LowShelfFilter *", 0, 0, (void*)&_wrap_class_IIRButterworthLowShelf, 0};
static swig_type_info _swigt__p_Filters__IIR__ChebyshevFilters__ChebyshevIILowPassFilter12db = {"_p_Filters__IIR__ChebyshevFilters__ChebyshevIILowPassFilter12db", "Filters::IIR::ChebyshevFilters::ChebyshevIILowPassFilter12db *", 0, 0, (void*)&_wrap_class_ChebyshevIILowPassFilter12db, 0};
static swig_type_info _swigt__p_Filters__IIR__ChebyshevFilters__ChebyshevILowPassFilter12db = {"_p_Filters__IIR__ChebyshevFilters__ChebyshevILowPassFilter12db", "Filters::IIR::ChebyshevFilters::ChebyshevILowPassFilter12db *", 0, 0, (void*)&_wrap_class_ChebyshevILowPassFilter12db, 0};
static swig_type_info _swigt__p_Filters__IIR__ChebyshevII__BandPassFilter = {"_p_Filters__IIR__ChebyshevII__BandPassFilter", "Filters::IIR::ChebyshevII::BandPassFilter *", 0, 0, (void*)&_wrap_class_IIRChebyshevIIBandPass, 0};
static swig_type_info _swigt__p_Filters__IIR__ChebyshevII__BandShelfFilter = {"_p_Filters__IIR__ChebyshevII__BandShelfFilter", "Filters::IIR::ChebyshevII::BandShelfFilter *", 0, 0, (void*)&_wrap_class_IIRChebyshevIIBandShelf, 0};
static swig_type_info _swigt__p_Filters__IIR__ChebyshevII__BandStopFilter = {"_p_Filters__IIR__ChebyshevII__BandStopFilter", "Filters::IIR::ChebyshevII::BandStopFilter *", 0, 0, (void*)&_wrap_class_IIRChebyshevIIBandStop, 0};
static swig_type_info _swigt__p_Filters__IIR__ChebyshevII__HighPassFilter = {"_p_Filters__IIR__ChebyshevII__HighPassFilter", "Filters::IIR::ChebyshevII::HighPassFilter *", 0, 0, (void*)&_wrap_class_IIRChebyshevIIHighPass, 0};
static swig_type_info _swigt__p_Filters__IIR__ChebyshevII__HighShelfFilter = {"_p_Filters__IIR__ChebyshevII__HighShelfFilter", "Filters::IIR::ChebyshevII::HighShelfFilter *", 0, 0, (void*)&_wrap_class_IIRChebyshevIIHighShelf, 0};
static swig_type_info _swigt__p_Filters__IIR__ChebyshevII__LowPassFilter = {"_p_Filters__IIR__ChebyshevII__LowPassFilter", "Filters::IIR::ChebyshevII::LowPassFilter *", 0, 0, (void*)&_wrap_class_IIRChebyshevIILowPass, 0};
static swig_type_info _swigt__p_Filters__IIR__ChebyshevII__LowShelfFilter = {"_p_Filters__IIR__ChebyshevII__LowShelfFilter", "Filters::IIR::ChebyshevII::LowShelfFilter *", 0, 0, (void*)&_wrap_class_IIRChebyshevIILowShelf, 0};
static swig_type_info _swigt__p_Filters__IIR__ChebyshevI__BandPassFilter = {"_p_Filters__IIR__ChebyshevI__BandPassFilter", "Filters::IIR::ChebyshevI::BandPassFilter *", 0, 0, (void*)&_wrap_class_IIRChebyshevIBandPass, 0};
static swig_type_info _swigt__p_Filters__IIR__ChebyshevI__BandShelfFilter = {"_p_Filters__IIR__ChebyshevI__BandShelfFilter", "Filters::IIR::ChebyshevI::BandShelfFilter *", 0, 0, (void*)&_wrap_class_IIRChebyshevIBandShelf, 0};
static swig_type_info _swigt__p_Filters__IIR__ChebyshevI__BandStopFilter = {"_p_Filters__IIR__ChebyshevI__BandStopFilter", "Filters::IIR::ChebyshevI::BandStopFilter *", 0, 0, (void*)&_wrap_class_IIRChebyshevIBandStop, 0};
static swig_type_info _swigt__p_Filters__IIR__ChebyshevI__HighPassFilter = {"_p_Filters__IIR__ChebyshevI__HighPassFilter", "Filters::IIR::ChebyshevI::HighPassFilter *", 0, 0, (void*)&_wrap_class_IIRChebyshevIHighPass, 0};
static swig_type_info _swigt__p_Filters__IIR__ChebyshevI__HighShelfFilter = {"_p_Filters__IIR__ChebyshevI__HighShelfFilter", "Filters::IIR::ChebyshevI::HighShelfFilter *", 0, 0, (void*)&_wrap_class_IIRChebyshevIHighShelf, 0};
static swig_type_info _swigt__p_Filters__IIR__ChebyshevI__LowPassFilter = {"_p_Filters__IIR__ChebyshevI__LowPassFilter", "Filters::IIR::ChebyshevI::LowPassFilter *", 0, 0, (void*)&_wrap_class_IIRChebyshevILowPass, 0};
static swig_type_info _swigt__p_Filters__IIR__ChebyshevI__LowShelfFilter = {"_p_Filters__IIR__ChebyshevI__LowShelfFilter", "Filters::IIR::ChebyshevI::LowShelfFilter *", 0, 0, (void*)&_wrap_class_IIRChebyshevILowShelf, 0};
static swig_type_info _swigt__p_Filters__IIR__Legendre__BandPassFilter = {"_p_Filters__IIR__Legendre__BandPassFilter", "Filters::IIR::Legendre::BandPassFilter *", 0, 0, (void*)&_wrap_class_IIRLegendreBandPass, 0};
static swig_type_info _swigt__p_Filters__IIR__Legendre__BandStopFilter = {"_p_Filters__IIR__Legendre__BandStopFilter", "Filters::IIR::Legendre::BandStopFilter *", 0, 0, (void*)&_wrap_class_IIRLegendreBandStop, 0};
static swig_type_info _swigt__p_Filters__IIR__Legendre__HighPassFilter = {"_p_Filters__IIR__Legendre__HighPassFilter", "Filters::IIR::Legendre::HighPassFilter *", 0, 0, (void*)&_wrap_class_IIRLegendreHighPass, 0};
static swig_type_info _swigt__p_Filters__IIR__Legendre__LowPassFilter = {"_p_Filters__IIR__Legendre__LowPassFilter", "Filters::IIR::Legendre::LowPassFilter *", 0, 0, (void*)&_wrap_class_IIRLegendreLowPass, 0};
static swig_type_info _swigt__p_Filters__IIR__Nigel__Biquad = {"_p_Filters__IIR__Nigel__Biquad", "Filters::IIR::Nigel::Biquad *", 0, 0, (void*)&_wrap_class_Biquad, 0};
static swig_type_info _swigt__p_Filters__IIR__RBJFilters__RBJAllPassFilter = {"_p_Filters__IIR__RBJFilters__RBJAllPassFilter", "Filters::IIR::RBJFilters::RBJAllPassFilter *", 0, 0, (void*)&_wrap_class_IIRRBJAllPassBiquad, 0};
static swig_type_info _swigt__p_Filters__IIR__RBJFilters__RBJBandPassFilter = {"_p_Filters__IIR__RBJFilters__RBJBandPassFilter", "Filters::IIR::RBJFilters::RBJBandPassFilter *", 0, 0, (void*)&_wrap_class_IIRRBJBandPassBiquad, 0};
static swig_type_info _swigt__p_Filters__IIR__RBJFilters__RBJBandStopFilter = {"_p_Filters__IIR__RBJFilters__RBJBandStopFilter", "Filters::IIR::RBJFilters::RBJBandStopFilter *", 0, 0, (void*)&_wrap_class_IIRRBJBandStopBiquad, 0};
static swig_type_info _swigt__p_Filters__IIR__RBJFilters__RBJBiquadFilter = {"_p_Filters__IIR__RBJFilters__RBJBiquadFilter", "Filters::IIR::RBJFilters::RBJBiquadFilter *", 0, 0, (void*)&_wrap_class_RBJBiquadFilter, 0};
static swig_type_info _swigt__p_Filters__IIR__RBJFilters__RBJHighPassFilter = {"_p_Filters__IIR__RBJFilters__RBJHighPassFilter", "Filters::IIR::RBJFilters::RBJHighPassFilter *", 0, 0, (void*)&_wrap_class_IIRRBJHighPassBiquad, 0};
static swig_type_info _swigt__p_Filters__IIR__RBJFilters__RBJHighShelfFilter = {"_p_Filters__IIR__RBJFilters__RBJHighShelfFilter", "Filters::IIR::RBJFilters::RBJHighShelfFilter *", 0, 0, (void*)&_wrap_class_IIRRBJHighShelfBiquad, 0};
static swig_type_info _swigt__p_Filters__IIR__RBJFilters__RBJLowPassFilter = {"_p_Filters__IIR__RBJFilters__RBJLowPassFilter", "Filters::IIR::RBJFilters::RBJLowPassFilter *", 0, 0, (void*)&_wrap_class_IIRRBJLowPassBiquad, 0};
static swig_type_info _swigt__p_Filters__IIR__RBJFilters__RBJLowShelfFilter = {"_p_Filters__IIR__RBJFilters__RBJLowShelfFilter", "Filters::IIR::RBJFilters::RBJLowShelfFilter *", 0, 0, (void*)&_wrap_class_IIRRBJLowShelfBiquad, 0};
static swig_type_info _swigt__p_Filters__IIR__RBJFilters__RBJPeakFilter = {"_p_Filters__IIR__RBJFilters__RBJPeakFilter", "Filters::IIR::RBJFilters::RBJPeakFilter *", 0, 0, (void*)&_wrap_class_IIRRBJPeakingBiquad, 0};
static swig_type_info _swigt__p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter = {"_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter", "Filters::IIR::RBJFilters::RBJSkirtBandPassFilter *", 0, 0, (void*)&_wrap_class_RBJSkirtBandPassFilter, 0};
static swig_type_info _swigt__p_Filters__IIR__RBJ__AllPassFilter = {"_p_Filters__IIR__RBJ__AllPassFilter", "Filters::IIR::RBJ::AllPassFilter *", 0, 0, (void*)&_wrap_class_AllPassFilter, 0};
static swig_type_info _swigt__p_Filters__IIR__RBJ__BandPass1Filter = {"_p_Filters__IIR__RBJ__BandPass1Filter", "Filters::IIR::RBJ::BandPass1Filter *", 0, 0, (void*)&_wrap_class_BandPass1Filter, 0};
static swig_type_info _swigt__p_Filters__IIR__RBJ__BandPass2Filter = {"_p_Filters__IIR__RBJ__BandPass2Filter", "Filters::IIR::RBJ::BandPass2Filter *", 0, 0, (void*)&_wrap_class_BandPass2Filter, 0};
static swig_type_info _swigt__p_Filters__IIR__RBJ__BandShelfFilter = {"_p_Filters__IIR__RBJ__BandShelfFilter", "Filters::IIR::RBJ::BandShelfFilter *", 0, 0, (void*)&_wrap_class_IIRRBJBandShelf, 0};
static swig_type_info _swigt__p_Filters__IIR__RBJ__BandStopFilter = {"_p_Filters__IIR__RBJ__BandStopFilter", "Filters::IIR::RBJ::BandStopFilter *", 0, 0, (void*)&_wrap_class_IIRRBJBandStop, 0};
static swig_type_info _swigt__p_Filters__IIR__RBJ__HighPassFilter = {"_p_Filters__IIR__RBJ__HighPassFilter", "Filters::IIR::RBJ::HighPassFilter *", 0, 0, (void*)&_wrap_class_IIRRBJHighPass, 0};
static swig_type_info _swigt__p_Filters__IIR__RBJ__HighShelfFilter = {"_p_Filters__IIR__RBJ__HighShelfFilter", "Filters::IIR::RBJ::HighShelfFilter *", 0, 0, (void*)&_wrap_class_IIRRBJHighShelf, 0};
static swig_type_info _swigt__p_Filters__IIR__RBJ__LowPassFilter = {"_p_Filters__IIR__RBJ__LowPassFilter", "Filters::IIR::RBJ::LowPassFilter *", 0, 0, (void*)&_wrap_class_IIRRBJLowPass, 0};
static swig_type_info _swigt__p_Filters__IIR__RBJ__LowShelfFilter = {"_p_Filters__IIR__RBJ__LowShelfFilter", "Filters::IIR::RBJ::LowShelfFilter *", 0, 0, (void*)&_wrap_class_IIRRBJLowShelf, 0};
static swig_type_info _swigt__p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter = {"_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter", "Filters::IIR::ZolzerFilters::ZolzerAllPass1pFilter *", 0, 0, (void*)&_wrap_class_ZolzerAllPass1pFilter, 0};
static swig_type_info _swigt__p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter = {"_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter", "Filters::IIR::ZolzerFilters::ZolzerAllPassFilter *", 0, 0, (void*)&_wrap_class_ZolzerAllPassFilter, 0};
static swig_type_info _swigt__p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter = {"_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter", "Filters::IIR::ZolzerFilters::ZolzerBandPassFilter *", 0, 0, (void*)&_wrap_class_ZolzerBandPassFilter, 0};
static swig_type_info _swigt__p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter = {"_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter", "Filters::IIR::ZolzerFilters::ZolzerBiquadFilter *", 0, 0, (void*)&_wrap_class_ZolzerBiquadFilter, 0};
static swig_type_info _swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter = {"_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter", "Filters::IIR::ZolzerFilters::ZolzerHighPass1pFilter *", 0, 0, (void*)&_wrap_class_ZolzerHighPass1pFilter, 0};
static swig_type_info _swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter = {"_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter", "Filters::IIR::ZolzerFilters::ZolzerHighPassFilter *", 0, 0, (void*)&_wrap_class_ZolzerHighPassFilter, 0};
static swig_type_info _swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter = {"_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter", "Filters::IIR::ZolzerFilters::ZolzerHighShelfBoostFilter *", 0, 0, (void*)&_wrap_class_ZolzerHighShelfBoostFilter, 0};
static swig_type_info _swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter = {"_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter", "Filters::IIR::ZolzerFilters::ZolzerHighShelfCutFilter *", 0, 0, (void*)&_wrap_class_ZolzerHighShelfCutFilter, 0};
static swig_type_info _swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter = {"_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter", "Filters::IIR::ZolzerFilters::ZolzerLowPass1pFilter *", 0, 0, (void*)&_wrap_class_ZolzerLowPass1pFilter, 0};
static swig_type_info _swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter = {"_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter", "Filters::IIR::ZolzerFilters::ZolzerLowPassFilter *", 0, 0, (void*)&_wrap_class_ZolzerLowPassFilter, 0};
static swig_type_info _swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter = {"_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter", "Filters::IIR::ZolzerFilters::ZolzerLowShelfBoostFilter *", 0, 0, (void*)&_wrap_class_ZolzerLowShelfBoostFilter, 0};
static swig_type_info _swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter = {"_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter", "Filters::IIR::ZolzerFilters::ZolzerLowShelfCutFilter *", 0, 0, (void*)&_wrap_class_ZolzerLowShelfCutFilter, 0};
static swig_type_info _swigt__p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter = {"_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter", "Filters::IIR::ZolzerFilters::ZolzerNotchFilter *", 0, 0, (void*)&_wrap_class_ZolzerNotchFilter, 0};
static swig_type_info _swigt__p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter = {"_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter", "Filters::IIR::ZolzerFilters::ZolzerPeakBoostFilter *", 0, 0, (void*)&_wrap_class_ZolzerPeakBoostFilter, 0};
static swig_type_info _swigt__p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter = {"_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter", "Filters::IIR::ZolzerFilters::ZolzerPeakCutFilter *", 0, 0, (void*)&_wrap_class_ZolzerPeakCutFilter, 0};
static swig_type_info _swigt__p_FunctionProcessor = {"_p_FunctionProcessor", "FunctionProcessor *", 0, 0, (void*)&_wrap_class_FunctionProcessor, 0};
static swig_type_info _swigt__p_GeneratorProcessor = {"_p_GeneratorProcessor", "GeneratorProcessor *", 0, 0, (void*)&_wrap_class_GeneratorProcessor, 0};
static swig_type_info _swigt__p_MixerProcessor = {"_p_MixerProcessor", "MixerProcessor *", 0, 0, (void*)&_wrap_class_MixerProcessor, 0};
static swig_type_info _swigt__p_MonoAdderOperatorProcessor = {"_p_MonoAdderOperatorProcessor", "MonoAdderOperatorProcessor *", 0, 0, (void*)&_wrap_class_MonoAdderOperatorProcessor, 0};
static swig_type_info _swigt__p_MonoBlendOperatorProcessor = {"_p_MonoBlendOperatorProcessor", "MonoBlendOperatorProcessor *", 0, 0, (void*)&_wrap_class_MonoBlendOperatorProcessor, 0};
static swig_type_info _swigt__p_MonoCascadeOperatorProcessor = {"_p_MonoCascadeOperatorProcessor", "MonoCascadeOperatorProcessor *", 0, 0, (void*)&_wrap_class_MonoCascadeOperatorProcessor, 0};
static swig_type_info _swigt__p_MonoCascadeProcessor = {"_p_MonoCascadeProcessor", "MonoCascadeProcessor *", 0, 0, (void*)&_wrap_class_MonoCascadeProcessor, 0};
static swig_type_info _swigt__p_MonoDownsampleProcessor = {"_p_MonoDownsampleProcessor", "MonoDownsampleProcessor *", 0, 0, (void*)&_wrap_class_MonoDownsampleProcessor, 0};
static swig_type_info _swigt__p_MonoFXProcessor = {"_p_MonoFXProcessor", "MonoFXProcessor *", 0, 0, (void*)&_wrap_class_MonoFXProcessor, 0};
static swig_type_info _swigt__p_MonoModulatorOperatorProcessor = {"_p_MonoModulatorOperatorProcessor", "MonoModulatorOperatorProcessor *", 0, 0, (void*)&_wrap_class_MonoModulatorOperatorProcessor, 0};
static swig_type_info _swigt__p_MonoMultiplierOperatorProcessor = {"_p_MonoMultiplierOperatorProcessor", "MonoMultiplierOperatorProcessor *", 0, 0, (void*)&_wrap_class_MonoMultiplierOperatorProcessor, 0};
static swig_type_info _swigt__p_MonoOperatorProcessor = {"_p_MonoOperatorProcessor", "MonoOperatorProcessor *", 0, 0, (void*)&_wrap_class_MonoOperatorProcessor, 0};
static swig_type_info _swigt__p_MonoOversampleProcessor = {"_p_MonoOversampleProcessor", "MonoOversampleProcessor *", 0, 0, (void*)&_wrap_class_MonoOversampleProcessor, 0};
static swig_type_info _swigt__p_MonoProcessor = {"_p_MonoProcessor", "MonoProcessor *", 0, 0, (void*)&_wrap_class_MonoProcessor, 0};
static swig_type_info _swigt__p_MonoSubtractorOperatorProcessor = {"_p_MonoSubtractorOperatorProcessor", "MonoSubtractorOperatorProcessor *", 0, 0, (void*)&_wrap_class_MonoSubtractorOperatorProcessor, 0};
static swig_type_info _swigt__p_MonoUpsampleProcessor = {"_p_MonoUpsampleProcessor", "MonoUpsampleProcessor *", 0, 0, (void*)&_wrap_class_MonoUpsampleProcessor, 0};
static swig_type_info _swigt__p_OperatorProcessor = {"_p_OperatorProcessor", "OperatorProcessor *", 0, 0, (void*)&_wrap_class_OperatorProcessor, 0};
static swig_type_info _swigt__p_OscillatorProcessor = {"_p_OscillatorProcessor", "OscillatorProcessor *", 0, 0, (void*)&_wrap_class_OscillatorProcessor, 0};
static swig_type_info _swigt__p_Parameter2Processor = {"_p_Parameter2Processor", "Parameter2Processor *", 0, 0, (void*)&_wrap_class_Parameter2Processor, 0};
static swig_type_info _swigt__p_Port = {"_p_Port", "Port *", 0, 0, (void*)&_wrap_class_Port, 0};
static swig_type_info _swigt__p_PortMap = {"_p_PortMap", "PortMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ports = {"_p_Ports", "Ports *", 0, 0, (void*)&_wrap_class_Ports, 0};
static swig_type_info _swigt__p_Random = {"_p_Random", "Random *", 0, 0, (void*)&_wrap_class_Random, 0};
static swig_type_info _swigt__p_SignalSinkProcessor = {"_p_SignalSinkProcessor", "SignalSinkProcessor *", 0, 0, (void*)&_wrap_class_SignalSinkProcessor, 0};
static swig_type_info _swigt__p_SignalSourceProcessor = {"_p_SignalSourceProcessor", "SignalSourceProcessor *", 0, 0, (void*)&_wrap_class_SignalSourceProcessor, 0};
static swig_type_info _swigt__p_SoundProcessor = {"_p_SoundProcessor", "SoundProcessor *", 0, 0, (void*)&_wrap_class_SoundProcessor, 0};
static swig_type_info _swigt__p_SpectrumProcessor = {"_p_SpectrumProcessor", "SpectrumProcessor *", 0, 0, (void*)&_wrap_class_SpectrumProcessor, 0};
static swig_type_info _swigt__p_Std__RandomMersenne = {"_p_Std__RandomMersenne", "Std::RandomMersenne *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StereoAmplifierProcessor = {"_p_StereoAmplifierProcessor", "StereoAmplifierProcessor *", 0, 0, (void*)&_wrap_class_StereoAmplifierProcessor, 0};
static swig_type_info _swigt__p_StereoCascadeProcessor = {"_p_StereoCascadeProcessor", "StereoCascadeProcessor *", 0, 0, (void*)&_wrap_class_StereoCascadeProcessor, 0};
static swig_type_info _swigt__p_StereoFXProcessor = {"_p_StereoFXProcessor", "StereoFXProcessor *", 0, 0, (void*)&_wrap_class_StereoFXProcessor, 0};
static swig_type_info _swigt__p_StereoFilterProcessor = {"_p_StereoFilterProcessor", "StereoFilterProcessor *", 0, 0, (void*)&_wrap_class_StereoFilterProcessor, 0};
static swig_type_info _swigt__p_StereoFunctionProcessor = {"_p_StereoFunctionProcessor", "StereoFunctionProcessor *", 0, 0, (void*)&_wrap_class_StereoFunctionProcessor, 0};
static swig_type_info _swigt__p_StereoGeneratorProcessor = {"_p_StereoGeneratorProcessor", "StereoGeneratorProcessor *", 0, 0, (void*)&_wrap_class_StereoGeneratorProcessor, 0};
static swig_type_info _swigt__p_StereoOscillatorProcessor = {"_p_StereoOscillatorProcessor", "StereoOscillatorProcessor *", 0, 0, (void*)&_wrap_class_StereoOscillatorProcessor, 0};
static swig_type_info _swigt__p_StereoProcessor = {"_p_StereoProcessor", "StereoProcessor *", 0, 0, (void*)&_wrap_class_StereoProcessor, 0};
static swig_type_info _swigt__p_StereoSplitterProcessor = {"_p_StereoSplitterProcessor", "StereoSplitterProcessor *", 0, 0, (void*)&_wrap_class_StereoSplitterProcessor, 0};
static swig_type_info _swigt__p_double = {"_p_double", "f64 *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_float__float = {"_p_f_float__float", "float (*)(float)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_q_const__float__float = {"_p_f_r_q_const__float__float", "float (*)(float const &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fenv_t = {"_p_fenv_t", "fenv_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fexcept_t = {"_p_fexcept_t", "fexcept_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "DspFloatType *|f32 *|float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *|i32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "ilong *|long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *|i64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_AmplifierProcessor = {"_p_p_AmplifierProcessor", "AmplifierProcessor **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_FilterProcessor = {"_p_p_FilterProcessor", "FilterProcessor **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter = {"_p_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter = {"_p_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter = {"_p_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter = {"_p_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter = {"_p_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__RBJFilters__RBJHighPassFilter = {"_p_p_Filters__IIR__RBJFilters__RBJHighPassFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__RBJFilters__RBJLowPassFilter = {"_p_p_Filters__IIR__RBJFilters__RBJLowPassFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__RBJ__BandPass1Filter = {"_p_p_Filters__IIR__RBJ__BandPass1Filter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__RBJ__AllPassFilter = {"_p_p_Filters__IIR__RBJ__AllPassFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__RBJ__HighPassFilter = {"_p_p_Filters__IIR__RBJ__HighPassFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__RBJ__LowPassFilter = {"_p_p_Filters__IIR__RBJ__LowPassFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__Legendre__BandPassFilter = {"_p_p_Filters__IIR__Legendre__BandPassFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__Legendre__HighPassFilter = {"_p_p_Filters__IIR__Legendre__HighPassFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__RBJFilters__RBJAllPassFilter = {"_p_p_Filters__IIR__RBJFilters__RBJAllPassFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__RBJFilters__RBJBandPassFilter = {"_p_p_Filters__IIR__RBJFilters__RBJBandPassFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__RBJFilters__RBJPeakFilter = {"_p_p_Filters__IIR__RBJFilters__RBJPeakFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__Legendre__LowPassFilter = {"_p_p_Filters__IIR__Legendre__LowPassFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__ChebyshevI__BandPassFilter = {"_p_p_Filters__IIR__ChebyshevI__BandPassFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__ChebyshevI__HighPassFilter = {"_p_p_Filters__IIR__ChebyshevI__HighPassFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__ChebyshevI__LowPassFilter = {"_p_p_Filters__IIR__ChebyshevI__LowPassFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__ChebyshevII__BandPassFilter = {"_p_p_Filters__IIR__ChebyshevII__BandPassFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__ChebyshevII__HighPassFilter = {"_p_p_Filters__IIR__ChebyshevII__HighPassFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__ChebyshevII__LowPassFilter = {"_p_p_Filters__IIR__ChebyshevII__LowPassFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__Bessel__LowPassFilter = {"_p_p_Filters__IIR__Bessel__LowPassFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__Bessel__HighPassFilter = {"_p_p_Filters__IIR__Bessel__HighPassFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__Bessel__BandPassFilter = {"_p_p_Filters__IIR__Bessel__BandPassFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__Butterworth__LowPassFilter = {"_p_p_Filters__IIR__Butterworth__LowPassFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__Butterworth__HighPassFilter = {"_p_p_Filters__IIR__Butterworth__HighPassFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__Butterworth__BandPassFilter = {"_p_p_Filters__IIR__Butterworth__BandPassFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter = {"_p_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__BiquadTransposedTypeII = {"_p_p_Filters__BiquadTransposedTypeII", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__BiquadTypeII = {"_p_p_Filters__BiquadTypeII", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter = {"_p_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter = {"_p_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter = {"_p_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__RBJFilters__RBJHighShelfFilter = {"_p_p_Filters__IIR__RBJFilters__RBJHighShelfFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__RBJFilters__RBJLowShelfFilter = {"_p_p_Filters__IIR__RBJFilters__RBJLowShelfFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__RBJFilters__RBJBandStopFilter = {"_p_p_Filters__IIR__RBJFilters__RBJBandStopFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__RBJFilters__RBJBiquadFilter = {"_p_p_Filters__IIR__RBJFilters__RBJBiquadFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__RBJ__BandShelfFilter = {"_p_p_Filters__IIR__RBJ__BandShelfFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__RBJ__HighShelfFilter = {"_p_p_Filters__IIR__RBJ__HighShelfFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__RBJ__LowShelfFilter = {"_p_p_Filters__IIR__RBJ__LowShelfFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__RBJ__BandStopFilter = {"_p_p_Filters__IIR__RBJ__BandStopFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__RBJ__BandPass2Filter = {"_p_p_Filters__IIR__RBJ__BandPass2Filter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__Legendre__BandStopFilter = {"_p_p_Filters__IIR__Legendre__BandStopFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__ChebyshevI__HighShelfFilter = {"_p_p_Filters__IIR__ChebyshevI__HighShelfFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__ChebyshevI__LowShelfFilter = {"_p_p_Filters__IIR__ChebyshevI__LowShelfFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__ChebyshevI__BandShelfFilter = {"_p_p_Filters__IIR__ChebyshevI__BandShelfFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__ChebyshevI__BandStopFilter = {"_p_p_Filters__IIR__ChebyshevI__BandStopFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__ChebyshevII__HighShelfFilter = {"_p_p_Filters__IIR__ChebyshevII__HighShelfFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__ChebyshevII__LowShelfFilter = {"_p_p_Filters__IIR__ChebyshevII__LowShelfFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__ChebyshevII__BandShelfFilter = {"_p_p_Filters__IIR__ChebyshevII__BandShelfFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__ChebyshevII__BandStopFilter = {"_p_p_Filters__IIR__ChebyshevII__BandStopFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__Butterworth__BandShelfFilter = {"_p_p_Filters__IIR__Butterworth__BandShelfFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__Butterworth__HighShelfFilter = {"_p_p_Filters__IIR__Butterworth__HighShelfFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__Butterworth__LowShelfFilter = {"_p_p_Filters__IIR__Butterworth__LowShelfFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__BiquadFilter = {"_p_p_Filters__BiquadFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__Bessel__BandStopFilter = {"_p_p_Filters__IIR__Bessel__BandStopFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__Butterworth__BandStopFilter = {"_p_p_Filters__IIR__Butterworth__BandStopFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__BiquadTransposedTypeIICascade = {"_p_p_Filters__BiquadTransposedTypeIICascade", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__BiquadTransposedTypeICascade = {"_p_p_Filters__BiquadTransposedTypeICascade", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__BiquadTypeIICascade = {"_p_p_Filters__BiquadTypeIICascade", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__BiquadTypeICascade = {"_p_p_Filters__BiquadTypeICascade", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter = {"_p_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__BiquadTransposedTypeI = {"_p_p_Filters__BiquadTransposedTypeI", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__BiquadTypeI = {"_p_p_Filters__BiquadTypeI", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__Biquad__Biquad = {"_p_p_Filters__IIR__Biquad__Biquad", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter = {"_p_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__FilterBase = {"_p_p_Filters__FilterBase", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter = {"_p_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter = {"_p_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter = {"_p_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter = {"_p_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter = {"_p_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_FunctionProcessor = {"_p_p_FunctionProcessor", "FunctionProcessor **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_float = {"_p_p_float", "float **|DspFloatType **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|i16 *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|i8 *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_double_t = {"_p_std__complexT_double_t", "std::complex< double > *", 0, 0, (void*)&_wrap_class_double_complex, 0};
static swig_type_info _swigt__p_std__complexT_float_t = {"_p_std__complexT_float_t", "std::complex< float > *|std::complex< DspFloatType > *", 0, 0, (void*)&_wrap_class_float_complex, 0};
static swig_type_info _swigt__p_std__gslice = {"_p_std__gslice", "std::gslice *", 0, 0, (void*)&_wrap_class_gslice, 0};
static swig_type_info _swigt__p_std__gslice_arrayT_float_t = {"_p_std__gslice_arrayT_float_t", "std::gslice_array< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__indirect_arrayT_float_t = {"_p_std__indirect_arrayT_float_t", "std::indirect_array< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_MonoProcessor_p_t = {"_p_std__listT_MonoProcessor_p_t", "MonoProcessorList *|std::list< MonoProcessor * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_SoundProcessor_p_t = {"_p_std__listT_SoundProcessor_p_t", "SoundProcessorList *|std::list< SoundProcessor * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_StereoProcessor_p_t = {"_p_std__listT_StereoProcessor_p_t", "StereoProcessorList *|std::list< StereoProcessor * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_std__shared_ptrT_Port_t_t = {"_p_std__listT_std__shared_ptrT_Port_t_t", "std::list< std::shared_ptr< Port > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_MonoProcessor_p_t = {"_p_std__mapT_std__string_MonoProcessor_p_t", "MonoProcessorNameMap *|std::map< std::string,MonoProcessor * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_Port_p_t = {"_p_std__mapT_std__string_Port_p_t", "Ports::PortMap *|std::map< std::string,Port * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_SoundProcessor_p_t = {"_p_std__mapT_std__string_SoundProcessor_p_t", "SoundProcessorNameMap *|std::map< std::string,SoundProcessor * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_StereoProcessor_p_t = {"_p_std__mapT_std__string_StereoProcessor_p_t", "StereoProcessorNameMap *|std::map< std::string,StereoProcessor * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mask_arrayT_float_t = {"_p_std__mask_arrayT_float_t", "std::mask_array< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_double_t = {"_p_std__numeric_limitsT_double_t", "std::numeric_limits< double > *", 0, 0, (void*)&_wrap_class_double_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_float_t = {"_p_std__numeric_limitsT_float_t", "std::numeric_limits< float > *", 0, 0, (void*)&_wrap_class_float_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_int_t = {"_p_std__numeric_limitsT_int_t", "std::numeric_limits< int > *", 0, 0, (void*)&_wrap_class_int_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_long_long_t = {"_p_std__numeric_limitsT_long_long_t", "std::numeric_limits< long long > *", 0, 0, (void*)&_wrap_class_llong_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_long_t = {"_p_std__numeric_limitsT_long_t", "std::numeric_limits< long > *", 0, 0, (void*)&_wrap_class_long_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_short_t = {"_p_std__numeric_limitsT_short_t", "std::numeric_limits< short > *", 0, 0, (void*)&_wrap_class_short_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_int_t = {"_p_std__numeric_limitsT_unsigned_int_t", "std::numeric_limits< unsigned int > *", 0, 0, (void*)&_wrap_class_uint_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_long_long_t = {"_p_std__numeric_limitsT_unsigned_long_long_t", "std::numeric_limits< unsigned long long > *", 0, 0, (void*)&_wrap_class_ullong_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_long_t = {"_p_std__numeric_limitsT_unsigned_long_t", "std::numeric_limits< unsigned long > *", 0, 0, (void*)&_wrap_class_ulong_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_short_t = {"_p_std__numeric_limitsT_unsigned_short_t", "std::numeric_limits< unsigned short > *", 0, 0, (void*)&_wrap_class_ushort_numeric_limits, 0};
static swig_type_info _swigt__p_std__slice = {"_p_std__slice", "std::slice *", 0, 0, (void*)&_wrap_class_slice, 0};
static swig_type_info _swigt__p_std__slice_arrayT_float_t = {"_p_std__slice_arrayT_float_t", "std::slice_array< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__valarrayT_float_t = {"_p_std__valarrayT_float_t", "std::valarray< float > *", 0, 0, (void*)&_wrap_class_float_valarray, 0};
static swig_type_info _swigt__p_std__vectorT_Filters__BiquadFilter_p_t = {"_p_std__vectorT_Filters__BiquadFilter_p_t", "std::vector< Filters::BiquadFilter * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Filters__BiquadSection_t = {"_p_std__vectorT_Filters__BiquadSection_t", "std::vector< Filters::BiquadSection > *|Filters::BiquadSOS *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Filters__BiquadTransposedTypeII_t = {"_p_std__vectorT_Filters__BiquadTransposedTypeII_t", "std::vector< Filters::BiquadTransposedTypeII > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Filters__BiquadTransposedTypeI_t = {"_p_std__vectorT_Filters__BiquadTransposedTypeI_t", "std::vector< Filters::BiquadTransposedTypeI > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Filters__BiquadTypeII_t = {"_p_std__vectorT_Filters__BiquadTypeII_t", "std::vector< Filters::BiquadTypeII > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Filters__BiquadTypeI_t = {"_p_std__vectorT_Filters__BiquadTypeI_t", "std::vector< Filters::BiquadTypeI > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_MonoProcessor_p_t = {"_p_std__vectorT_MonoProcessor_p_t", "std::vector< MonoProcessor * > *|MonoProcessorVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_OscillatorProcessor_p_t = {"_p_std__vectorT_OscillatorProcessor_p_t", "std::vector< OscillatorProcessor * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_SoundProcessor_p_t = {"_p_std__vectorT_SoundProcessor_p_t", "std::vector< SoundProcessor * > *|SoundProcessorVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_StereoProcessor_p_t = {"_p_std__vectorT_StereoProcessor_p_t", "std::vector< StereoProcessor * > *|StereoProcessorVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_t = {"_p_std__vectorT_double_t", "std::vector< double > *", 0, 0, (void*)&_wrap_class_double_vector, 0};
static swig_type_info _swigt__p_std__vectorT_float_t = {"_p_std__vectorT_float_t", "std::vector< float > *|std::vector< DspFloatType > *", 0, 0, (void*)&_wrap_class_float_vector, 0};
static swig_type_info _swigt__p_std__vectorT_std__complexT_double_t_t = {"_p_std__vectorT_std__complexT_double_t_t", "std::vector< std::complex< double > > *", 0, 0, (void*)&_wrap_class_complex_double_vector, 0};
static swig_type_info _swigt__p_std__vectorT_std__complexT_float_t_t = {"_p_std__vectorT_std__complexT_float_t_t", "std::vector< std::complex< DspFloatType > > *|std::vector< std::complex< float > > *", 0, 0, (void*)&_wrap_class_complex_float_vector, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_double_t = {"_p_std__vector_iteratorT_double_t", "std::vector_iterator< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_float_t = {"_p_std__vector_iteratorT_float_t", "std::vector_iterator< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_std__complexT_double_t_t = {"_p_std__vector_iteratorT_std__complexT_double_t_t", "std::vector_iterator< std::complex< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_std__complexT_float_t_t = {"_p_std__vector_iteratorT_std__complexT_float_t_t", "std::vector_iterator< std::complex< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "u8 *|unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|u32 *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "ulong *|unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|u64 *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|u16 *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_AmplifierProcessor,
  &_swigt__p_Dsp__Bessel__BandPassT_32_t,
  &_swigt__p_Dsp__Bessel__BandStopT_32_t,
  &_swigt__p_Dsp__Bessel__HighPassT_32_t,
  &_swigt__p_Dsp__Bessel__LowPassT_32_t,
  &_swigt__p_Dsp__Butterworth__BandPassT_32_t,
  &_swigt__p_Dsp__Butterworth__BandShelfT_32_t,
  &_swigt__p_Dsp__Butterworth__BandStopT_32_t,
  &_swigt__p_Dsp__Butterworth__HighPassT_32_t,
  &_swigt__p_Dsp__Butterworth__HighShelfT_32_t,
  &_swigt__p_Dsp__Butterworth__LowPassT_32_t,
  &_swigt__p_Dsp__Butterworth__LowShelfT_32_t,
  &_swigt__p_Dsp__ChebyshevII__BandPassT_32_t,
  &_swigt__p_Dsp__ChebyshevII__BandShelfT_32_t,
  &_swigt__p_Dsp__ChebyshevII__BandStopT_32_t,
  &_swigt__p_Dsp__ChebyshevII__HighPassT_32_t,
  &_swigt__p_Dsp__ChebyshevII__HighShelfT_32_t,
  &_swigt__p_Dsp__ChebyshevII__LowPassT_32_t,
  &_swigt__p_Dsp__ChebyshevII__LowShelfT_32_t,
  &_swigt__p_Dsp__ChebyshevI__BandPassT_32_t,
  &_swigt__p_Dsp__ChebyshevI__BandShelfT_32_t,
  &_swigt__p_Dsp__ChebyshevI__BandStopT_32_t,
  &_swigt__p_Dsp__ChebyshevI__HighPassT_32_t,
  &_swigt__p_Dsp__ChebyshevI__HighShelfT_32_t,
  &_swigt__p_Dsp__ChebyshevI__LowPassT_32_t,
  &_swigt__p_Dsp__ChebyshevI__LowShelfT_32_t,
  &_swigt__p_Dsp__Legendre__BandPassT_32_t,
  &_swigt__p_Dsp__Legendre__BandStopT_32_t,
  &_swigt__p_Dsp__Legendre__HighPassT_32_t,
  &_swigt__p_Dsp__Legendre__LowPassT_32_t,
  &_swigt__p_Dsp__RBJ__AllPass,
  &_swigt__p_Dsp__RBJ__BandPass1,
  &_swigt__p_Dsp__RBJ__BandPass2,
  &_swigt__p_Dsp__RBJ__BandShelf,
  &_swigt__p_Dsp__RBJ__BandStop,
  &_swigt__p_Dsp__RBJ__HighPass,
  &_swigt__p_Dsp__RBJ__HighShelf,
  &_swigt__p_Dsp__RBJ__LowPass,
  &_swigt__p_Dsp__RBJ__LowShelf,
  &_swigt__p_FilterProcessor,
  &_swigt__p_Filters__BiquadFilter,
  &_swigt__p_Filters__BiquadFilterCascader,
  &_swigt__p_Filters__BiquadParallelFilters,
  &_swigt__p_Filters__BiquadSection,
  &_swigt__p_Filters__BiquadTransposedTypeI,
  &_swigt__p_Filters__BiquadTransposedTypeICascade,
  &_swigt__p_Filters__BiquadTransposedTypeII,
  &_swigt__p_Filters__BiquadTransposedTypeIICascade,
  &_swigt__p_Filters__BiquadTypeI,
  &_swigt__p_Filters__BiquadTypeICascade,
  &_swigt__p_Filters__BiquadTypeII,
  &_swigt__p_Filters__BiquadTypeIICascade,
  &_swigt__p_Filters__FilterBase,
  &_swigt__p_Filters__FilterCoefficients,
  &_swigt__p_Filters__IIR__Bessel__BandPassFilter,
  &_swigt__p_Filters__IIR__Bessel__BandStopFilter,
  &_swigt__p_Filters__IIR__Bessel__HighPassFilter,
  &_swigt__p_Filters__IIR__Bessel__LowPassFilter,
  &_swigt__p_Filters__IIR__Biquad__Biquad,
  &_swigt__p_Filters__IIR__Biquad__Parameters,
  &_swigt__p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter,
  &_swigt__p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db,
  &_swigt__p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter,
  &_swigt__p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db,
  &_swigt__p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter,
  &_swigt__p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db,
  &_swigt__p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter,
  &_swigt__p_Filters__IIR__ButterworthFilters__ButterworthHighPassFilter12db,
  &_swigt__p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter,
  &_swigt__p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db,
  &_swigt__p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter,
  &_swigt__p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db,
  &_swigt__p_Filters__IIR__Butterworth__BandPassFilter,
  &_swigt__p_Filters__IIR__Butterworth__BandShelfFilter,
  &_swigt__p_Filters__IIR__Butterworth__BandStopFilter,
  &_swigt__p_Filters__IIR__Butterworth__HighPassFilter,
  &_swigt__p_Filters__IIR__Butterworth__HighShelfFilter,
  &_swigt__p_Filters__IIR__Butterworth__LowPassFilter,
  &_swigt__p_Filters__IIR__Butterworth__LowShelfFilter,
  &_swigt__p_Filters__IIR__ChebyshevFilters__ChebyshevIILowPassFilter12db,
  &_swigt__p_Filters__IIR__ChebyshevFilters__ChebyshevILowPassFilter12db,
  &_swigt__p_Filters__IIR__ChebyshevII__BandPassFilter,
  &_swigt__p_Filters__IIR__ChebyshevII__BandShelfFilter,
  &_swigt__p_Filters__IIR__ChebyshevII__BandStopFilter,
  &_swigt__p_Filters__IIR__ChebyshevII__HighPassFilter,
  &_swigt__p_Filters__IIR__ChebyshevII__HighShelfFilter,
  &_swigt__p_Filters__IIR__ChebyshevII__LowPassFilter,
  &_swigt__p_Filters__IIR__ChebyshevII__LowShelfFilter,
  &_swigt__p_Filters__IIR__ChebyshevI__BandPassFilter,
  &_swigt__p_Filters__IIR__ChebyshevI__BandShelfFilter,
  &_swigt__p_Filters__IIR__ChebyshevI__BandStopFilter,
  &_swigt__p_Filters__IIR__ChebyshevI__HighPassFilter,
  &_swigt__p_Filters__IIR__ChebyshevI__HighShelfFilter,
  &_swigt__p_Filters__IIR__ChebyshevI__LowPassFilter,
  &_swigt__p_Filters__IIR__ChebyshevI__LowShelfFilter,
  &_swigt__p_Filters__IIR__Legendre__BandPassFilter,
  &_swigt__p_Filters__IIR__Legendre__BandStopFilter,
  &_swigt__p_Filters__IIR__Legendre__HighPassFilter,
  &_swigt__p_Filters__IIR__Legendre__LowPassFilter,
  &_swigt__p_Filters__IIR__Nigel__Biquad,
  &_swigt__p_Filters__IIR__RBJFilters__RBJAllPassFilter,
  &_swigt__p_Filters__IIR__RBJFilters__RBJBandPassFilter,
  &_swigt__p_Filters__IIR__RBJFilters__RBJBandStopFilter,
  &_swigt__p_Filters__IIR__RBJFilters__RBJBiquadFilter,
  &_swigt__p_Filters__IIR__RBJFilters__RBJHighPassFilter,
  &_swigt__p_Filters__IIR__RBJFilters__RBJHighShelfFilter,
  &_swigt__p_Filters__IIR__RBJFilters__RBJLowPassFilter,
  &_swigt__p_Filters__IIR__RBJFilters__RBJLowShelfFilter,
  &_swigt__p_Filters__IIR__RBJFilters__RBJPeakFilter,
  &_swigt__p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter,
  &_swigt__p_Filters__IIR__RBJ__AllPassFilter,
  &_swigt__p_Filters__IIR__RBJ__BandPass1Filter,
  &_swigt__p_Filters__IIR__RBJ__BandPass2Filter,
  &_swigt__p_Filters__IIR__RBJ__BandShelfFilter,
  &_swigt__p_Filters__IIR__RBJ__BandStopFilter,
  &_swigt__p_Filters__IIR__RBJ__HighPassFilter,
  &_swigt__p_Filters__IIR__RBJ__HighShelfFilter,
  &_swigt__p_Filters__IIR__RBJ__LowPassFilter,
  &_swigt__p_Filters__IIR__RBJ__LowShelfFilter,
  &_swigt__p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter,
  &_swigt__p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter,
  &_swigt__p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter,
  &_swigt__p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter,
  &_swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter,
  &_swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter,
  &_swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter,
  &_swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter,
  &_swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter,
  &_swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter,
  &_swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter,
  &_swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter,
  &_swigt__p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter,
  &_swigt__p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter,
  &_swigt__p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter,
  &_swigt__p_FunctionProcessor,
  &_swigt__p_GeneratorProcessor,
  &_swigt__p_MixerProcessor,
  &_swigt__p_MonoAdderOperatorProcessor,
  &_swigt__p_MonoBlendOperatorProcessor,
  &_swigt__p_MonoCascadeOperatorProcessor,
  &_swigt__p_MonoCascadeProcessor,
  &_swigt__p_MonoDownsampleProcessor,
  &_swigt__p_MonoFXProcessor,
  &_swigt__p_MonoModulatorOperatorProcessor,
  &_swigt__p_MonoMultiplierOperatorProcessor,
  &_swigt__p_MonoOperatorProcessor,
  &_swigt__p_MonoOversampleProcessor,
  &_swigt__p_MonoProcessor,
  &_swigt__p_MonoSubtractorOperatorProcessor,
  &_swigt__p_MonoUpsampleProcessor,
  &_swigt__p_OperatorProcessor,
  &_swigt__p_OscillatorProcessor,
  &_swigt__p_Parameter2Processor,
  &_swigt__p_Port,
  &_swigt__p_PortMap,
  &_swigt__p_Ports,
  &_swigt__p_Random,
  &_swigt__p_SignalSinkProcessor,
  &_swigt__p_SignalSourceProcessor,
  &_swigt__p_SoundProcessor,
  &_swigt__p_SpectrumProcessor,
  &_swigt__p_Std__RandomMersenne,
  &_swigt__p_StereoAmplifierProcessor,
  &_swigt__p_StereoCascadeProcessor,
  &_swigt__p_StereoFXProcessor,
  &_swigt__p_StereoFilterProcessor,
  &_swigt__p_StereoFunctionProcessor,
  &_swigt__p_StereoGeneratorProcessor,
  &_swigt__p_StereoOscillatorProcessor,
  &_swigt__p_StereoProcessor,
  &_swigt__p_StereoSplitterProcessor,
  &_swigt__p_double,
  &_swigt__p_f_float__float,
  &_swigt__p_f_r_q_const__float__float,
  &_swigt__p_fenv_t,
  &_swigt__p_fexcept_t,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_long,
  &_swigt__p_long_long,
  &_swigt__p_p_AmplifierProcessor,
  &_swigt__p_p_FilterProcessor,
  &_swigt__p_p_Filters__BiquadFilter,
  &_swigt__p_p_Filters__BiquadTransposedTypeI,
  &_swigt__p_p_Filters__BiquadTransposedTypeICascade,
  &_swigt__p_p_Filters__BiquadTransposedTypeII,
  &_swigt__p_p_Filters__BiquadTransposedTypeIICascade,
  &_swigt__p_p_Filters__BiquadTypeI,
  &_swigt__p_p_Filters__BiquadTypeICascade,
  &_swigt__p_p_Filters__BiquadTypeII,
  &_swigt__p_p_Filters__BiquadTypeIICascade,
  &_swigt__p_p_Filters__FilterBase,
  &_swigt__p_p_Filters__IIR__Bessel__BandPassFilter,
  &_swigt__p_p_Filters__IIR__Bessel__BandStopFilter,
  &_swigt__p_p_Filters__IIR__Bessel__HighPassFilter,
  &_swigt__p_p_Filters__IIR__Bessel__LowPassFilter,
  &_swigt__p_p_Filters__IIR__Biquad__Biquad,
  &_swigt__p_p_Filters__IIR__Butterworth__BandPassFilter,
  &_swigt__p_p_Filters__IIR__Butterworth__BandShelfFilter,
  &_swigt__p_p_Filters__IIR__Butterworth__BandStopFilter,
  &_swigt__p_p_Filters__IIR__Butterworth__HighPassFilter,
  &_swigt__p_p_Filters__IIR__Butterworth__HighShelfFilter,
  &_swigt__p_p_Filters__IIR__Butterworth__LowPassFilter,
  &_swigt__p_p_Filters__IIR__Butterworth__LowShelfFilter,
  &_swigt__p_p_Filters__IIR__ChebyshevII__BandPassFilter,
  &_swigt__p_p_Filters__IIR__ChebyshevII__BandShelfFilter,
  &_swigt__p_p_Filters__IIR__ChebyshevII__BandStopFilter,
  &_swigt__p_p_Filters__IIR__ChebyshevII__HighPassFilter,
  &_swigt__p_p_Filters__IIR__ChebyshevII__HighShelfFilter,
  &_swigt__p_p_Filters__IIR__ChebyshevII__LowPassFilter,
  &_swigt__p_p_Filters__IIR__ChebyshevII__LowShelfFilter,
  &_swigt__p_p_Filters__IIR__ChebyshevI__BandPassFilter,
  &_swigt__p_p_Filters__IIR__ChebyshevI__BandShelfFilter,
  &_swigt__p_p_Filters__IIR__ChebyshevI__BandStopFilter,
  &_swigt__p_p_Filters__IIR__ChebyshevI__HighPassFilter,
  &_swigt__p_p_Filters__IIR__ChebyshevI__HighShelfFilter,
  &_swigt__p_p_Filters__IIR__ChebyshevI__LowPassFilter,
  &_swigt__p_p_Filters__IIR__ChebyshevI__LowShelfFilter,
  &_swigt__p_p_Filters__IIR__Legendre__BandPassFilter,
  &_swigt__p_p_Filters__IIR__Legendre__BandStopFilter,
  &_swigt__p_p_Filters__IIR__Legendre__HighPassFilter,
  &_swigt__p_p_Filters__IIR__Legendre__LowPassFilter,
  &_swigt__p_p_Filters__IIR__RBJFilters__RBJAllPassFilter,
  &_swigt__p_p_Filters__IIR__RBJFilters__RBJBandPassFilter,
  &_swigt__p_p_Filters__IIR__RBJFilters__RBJBandStopFilter,
  &_swigt__p_p_Filters__IIR__RBJFilters__RBJBiquadFilter,
  &_swigt__p_p_Filters__IIR__RBJFilters__RBJHighPassFilter,
  &_swigt__p_p_Filters__IIR__RBJFilters__RBJHighShelfFilter,
  &_swigt__p_p_Filters__IIR__RBJFilters__RBJLowPassFilter,
  &_swigt__p_p_Filters__IIR__RBJFilters__RBJLowShelfFilter,
  &_swigt__p_p_Filters__IIR__RBJFilters__RBJPeakFilter,
  &_swigt__p_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter,
  &_swigt__p_p_Filters__IIR__RBJ__AllPassFilter,
  &_swigt__p_p_Filters__IIR__RBJ__BandPass1Filter,
  &_swigt__p_p_Filters__IIR__RBJ__BandPass2Filter,
  &_swigt__p_p_Filters__IIR__RBJ__BandShelfFilter,
  &_swigt__p_p_Filters__IIR__RBJ__BandStopFilter,
  &_swigt__p_p_Filters__IIR__RBJ__HighPassFilter,
  &_swigt__p_p_Filters__IIR__RBJ__HighShelfFilter,
  &_swigt__p_p_Filters__IIR__RBJ__LowPassFilter,
  &_swigt__p_p_Filters__IIR__RBJ__LowShelfFilter,
  &_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter,
  &_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter,
  &_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter,
  &_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter,
  &_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter,
  &_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter,
  &_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter,
  &_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter,
  &_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter,
  &_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter,
  &_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter,
  &_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter,
  &_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter,
  &_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter,
  &_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter,
  &_swigt__p_p_FunctionProcessor,
  &_swigt__p_p_float,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_std__complexT_double_t,
  &_swigt__p_std__complexT_float_t,
  &_swigt__p_std__gslice,
  &_swigt__p_std__gslice_arrayT_float_t,
  &_swigt__p_std__indirect_arrayT_float_t,
  &_swigt__p_std__listT_MonoProcessor_p_t,
  &_swigt__p_std__listT_SoundProcessor_p_t,
  &_swigt__p_std__listT_StereoProcessor_p_t,
  &_swigt__p_std__listT_std__shared_ptrT_Port_t_t,
  &_swigt__p_std__mapT_std__string_MonoProcessor_p_t,
  &_swigt__p_std__mapT_std__string_Port_p_t,
  &_swigt__p_std__mapT_std__string_SoundProcessor_p_t,
  &_swigt__p_std__mapT_std__string_StereoProcessor_p_t,
  &_swigt__p_std__mask_arrayT_float_t,
  &_swigt__p_std__numeric_limitsT_double_t,
  &_swigt__p_std__numeric_limitsT_float_t,
  &_swigt__p_std__numeric_limitsT_int_t,
  &_swigt__p_std__numeric_limitsT_long_long_t,
  &_swigt__p_std__numeric_limitsT_long_t,
  &_swigt__p_std__numeric_limitsT_short_t,
  &_swigt__p_std__numeric_limitsT_unsigned_int_t,
  &_swigt__p_std__numeric_limitsT_unsigned_long_long_t,
  &_swigt__p_std__numeric_limitsT_unsigned_long_t,
  &_swigt__p_std__numeric_limitsT_unsigned_short_t,
  &_swigt__p_std__slice,
  &_swigt__p_std__slice_arrayT_float_t,
  &_swigt__p_std__string,
  &_swigt__p_std__valarrayT_float_t,
  &_swigt__p_std__vectorT_Filters__BiquadFilter_p_t,
  &_swigt__p_std__vectorT_Filters__BiquadSection_t,
  &_swigt__p_std__vectorT_Filters__BiquadTransposedTypeII_t,
  &_swigt__p_std__vectorT_Filters__BiquadTransposedTypeI_t,
  &_swigt__p_std__vectorT_Filters__BiquadTypeII_t,
  &_swigt__p_std__vectorT_Filters__BiquadTypeI_t,
  &_swigt__p_std__vectorT_MonoProcessor_p_t,
  &_swigt__p_std__vectorT_OscillatorProcessor_p_t,
  &_swigt__p_std__vectorT_SoundProcessor_p_t,
  &_swigt__p_std__vectorT_StereoProcessor_p_t,
  &_swigt__p_std__vectorT_double_t,
  &_swigt__p_std__vectorT_float_t,
  &_swigt__p_std__vectorT_std__complexT_double_t_t,
  &_swigt__p_std__vectorT_std__complexT_float_t_t,
  &_swigt__p_std__vector_iteratorT_double_t,
  &_swigt__p_std__vector_iteratorT_float_t,
  &_swigt__p_std__vector_iteratorT_std__complexT_double_t_t,
  &_swigt__p_std__vector_iteratorT_std__complexT_float_t_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
};

static swig_cast_info _swigc__p_AmplifierProcessor[] = {  {&_swigt__p_AmplifierProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__Bessel__BandPassT_32_t[] = {  {&_swigt__p_Dsp__Bessel__BandPassT_32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__Bessel__BandStopT_32_t[] = {  {&_swigt__p_Dsp__Bessel__BandStopT_32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__Bessel__HighPassT_32_t[] = {  {&_swigt__p_Dsp__Bessel__HighPassT_32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__Bessel__LowPassT_32_t[] = {  {&_swigt__p_Dsp__Bessel__LowPassT_32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__Butterworth__BandPassT_32_t[] = {  {&_swigt__p_Dsp__Butterworth__BandPassT_32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__Butterworth__BandShelfT_32_t[] = {  {&_swigt__p_Dsp__Butterworth__BandShelfT_32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__Butterworth__BandStopT_32_t[] = {  {&_swigt__p_Dsp__Butterworth__BandStopT_32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__Butterworth__HighPassT_32_t[] = {  {&_swigt__p_Dsp__Butterworth__HighPassT_32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__Butterworth__HighShelfT_32_t[] = {  {&_swigt__p_Dsp__Butterworth__HighShelfT_32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__Butterworth__LowPassT_32_t[] = {  {&_swigt__p_Dsp__Butterworth__LowPassT_32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__Butterworth__LowShelfT_32_t[] = {  {&_swigt__p_Dsp__Butterworth__LowShelfT_32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__ChebyshevII__BandPassT_32_t[] = {  {&_swigt__p_Dsp__ChebyshevII__BandPassT_32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__ChebyshevII__BandShelfT_32_t[] = {  {&_swigt__p_Dsp__ChebyshevII__BandShelfT_32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__ChebyshevII__BandStopT_32_t[] = {  {&_swigt__p_Dsp__ChebyshevII__BandStopT_32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__ChebyshevII__HighPassT_32_t[] = {  {&_swigt__p_Dsp__ChebyshevII__HighPassT_32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__ChebyshevII__HighShelfT_32_t[] = {  {&_swigt__p_Dsp__ChebyshevII__HighShelfT_32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__ChebyshevII__LowPassT_32_t[] = {  {&_swigt__p_Dsp__ChebyshevII__LowPassT_32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__ChebyshevII__LowShelfT_32_t[] = {  {&_swigt__p_Dsp__ChebyshevII__LowShelfT_32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__ChebyshevI__BandPassT_32_t[] = {  {&_swigt__p_Dsp__ChebyshevI__BandPassT_32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__ChebyshevI__BandShelfT_32_t[] = {  {&_swigt__p_Dsp__ChebyshevI__BandShelfT_32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__ChebyshevI__BandStopT_32_t[] = {  {&_swigt__p_Dsp__ChebyshevI__BandStopT_32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__ChebyshevI__HighPassT_32_t[] = {  {&_swigt__p_Dsp__ChebyshevI__HighPassT_32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__ChebyshevI__HighShelfT_32_t[] = {  {&_swigt__p_Dsp__ChebyshevI__HighShelfT_32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__ChebyshevI__LowPassT_32_t[] = {  {&_swigt__p_Dsp__ChebyshevI__LowPassT_32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__ChebyshevI__LowShelfT_32_t[] = {  {&_swigt__p_Dsp__ChebyshevI__LowShelfT_32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__Legendre__BandPassT_32_t[] = {  {&_swigt__p_Dsp__Legendre__BandPassT_32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__Legendre__BandStopT_32_t[] = {  {&_swigt__p_Dsp__Legendre__BandStopT_32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__Legendre__HighPassT_32_t[] = {  {&_swigt__p_Dsp__Legendre__HighPassT_32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__Legendre__LowPassT_32_t[] = {  {&_swigt__p_Dsp__Legendre__LowPassT_32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__RBJ__AllPass[] = {  {&_swigt__p_Dsp__RBJ__AllPass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__RBJ__BandPass1[] = {  {&_swigt__p_Dsp__RBJ__BandPass1, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__RBJ__BandPass2[] = {  {&_swigt__p_Dsp__RBJ__BandPass2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__RBJ__BandShelf[] = {  {&_swigt__p_Dsp__RBJ__BandShelf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__RBJ__BandStop[] = {  {&_swigt__p_Dsp__RBJ__BandStop, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__RBJ__HighPass[] = {  {&_swigt__p_Dsp__RBJ__HighPass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__RBJ__HighShelf[] = {  {&_swigt__p_Dsp__RBJ__HighShelf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__RBJ__LowPass[] = {  {&_swigt__p_Dsp__RBJ__LowPass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dsp__RBJ__LowShelf[] = {  {&_swigt__p_Dsp__RBJ__LowShelf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FilterProcessor[] = {  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter, _p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter, _p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJPeakFilter, _p_Filters__IIR__RBJFilters__RBJPeakFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJBandPassFilter, _p_Filters__IIR__RBJFilters__RBJBandPassFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJAllPassFilter, _p_Filters__IIR__RBJFilters__RBJAllPassFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJHighPassFilter, _p_Filters__IIR__RBJFilters__RBJHighPassFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJLowPassFilter, _p_Filters__IIR__RBJFilters__RBJLowPassFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJ__BandPass1Filter, _p_Filters__IIR__RBJ__BandPass1FilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJ__AllPassFilter, _p_Filters__IIR__RBJ__AllPassFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJ__HighPassFilter, _p_Filters__IIR__RBJ__HighPassFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJ__LowPassFilter, _p_Filters__IIR__RBJ__LowPassFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Legendre__BandPassFilter, _p_Filters__IIR__Legendre__BandPassFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Legendre__HighPassFilter, _p_Filters__IIR__Legendre__HighPassFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Legendre__LowPassFilter, _p_Filters__IIR__Legendre__LowPassFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevI__BandPassFilter, _p_Filters__IIR__ChebyshevI__BandPassFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevI__HighPassFilter, _p_Filters__IIR__ChebyshevI__HighPassFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevI__LowPassFilter, _p_Filters__IIR__ChebyshevI__LowPassFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevII__BandPassFilter, _p_Filters__IIR__ChebyshevII__BandPassFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevII__HighPassFilter, _p_Filters__IIR__ChebyshevII__HighPassFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevII__LowPassFilter, _p_Filters__IIR__ChebyshevII__LowPassFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Bessel__LowPassFilter, _p_Filters__IIR__Bessel__LowPassFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Bessel__HighPassFilter, _p_Filters__IIR__Bessel__HighPassFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Bessel__BandPassFilter, _p_Filters__IIR__Bessel__BandPassFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Butterworth__LowPassFilter, _p_Filters__IIR__Butterworth__LowPassFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Butterworth__HighPassFilter, _p_Filters__IIR__Butterworth__HighPassFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Butterworth__BandPassFilter, _p_Filters__IIR__Butterworth__BandPassFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__BiquadTypeII, _p_Filters__BiquadTypeIITo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__BiquadTransposedTypeII, _p_Filters__BiquadTransposedTypeIITo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter, _p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter, _p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter, _p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter, _p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter, _p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter, _p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJ__BandShelfFilter, _p_Filters__IIR__RBJ__BandShelfFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJ__HighShelfFilter, _p_Filters__IIR__RBJ__HighShelfFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJ__LowShelfFilter, _p_Filters__IIR__RBJ__LowShelfFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJ__BandStopFilter, _p_Filters__IIR__RBJ__BandStopFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJ__BandPass2Filter, _p_Filters__IIR__RBJ__BandPass2FilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Legendre__BandStopFilter, _p_Filters__IIR__Legendre__BandStopFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevI__HighShelfFilter, _p_Filters__IIR__ChebyshevI__HighShelfFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevI__LowShelfFilter, _p_Filters__IIR__ChebyshevI__LowShelfFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevI__BandShelfFilter, _p_Filters__IIR__ChebyshevI__BandShelfFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevI__BandStopFilter, _p_Filters__IIR__ChebyshevI__BandStopFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevII__HighShelfFilter, _p_Filters__IIR__ChebyshevII__HighShelfFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevII__LowShelfFilter, _p_Filters__IIR__ChebyshevII__LowShelfFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevII__BandShelfFilter, _p_Filters__IIR__ChebyshevII__BandShelfFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevII__BandStopFilter, _p_Filters__IIR__ChebyshevII__BandStopFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Butterworth__BandShelfFilter, _p_Filters__IIR__Butterworth__BandShelfFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Butterworth__HighShelfFilter, _p_Filters__IIR__Butterworth__HighShelfFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Butterworth__LowShelfFilter, _p_Filters__IIR__Butterworth__LowShelfFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__BiquadFilter, _p_Filters__BiquadFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Bessel__BandStopFilter, _p_Filters__IIR__Bessel__BandStopFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Butterworth__BandStopFilter, _p_Filters__IIR__Butterworth__BandStopFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJHighShelfFilter, _p_Filters__IIR__RBJFilters__RBJHighShelfFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJLowShelfFilter, _p_Filters__IIR__RBJFilters__RBJLowShelfFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJBandStopFilter, _p_Filters__IIR__RBJFilters__RBJBandStopFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJBiquadFilter, _p_Filters__IIR__RBJFilters__RBJBiquadFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter, _p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter, _p_Filters__IIR__ZolzerFilters__ZolzerNotchFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__BiquadTransposedTypeIICascade, _p_Filters__BiquadTransposedTypeIICascadeTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__BiquadTransposedTypeICascade, _p_Filters__BiquadTransposedTypeICascadeTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__BiquadTypeIICascade, _p_Filters__BiquadTypeIICascadeTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__BiquadTypeICascade, _p_Filters__BiquadTypeICascadeTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter, _p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__BiquadTransposedTypeI, _p_Filters__BiquadTransposedTypeITo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__BiquadTypeI, _p_Filters__BiquadTypeITo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Biquad__Biquad, _p_Filters__IIR__Biquad__BiquadTo_p_FilterProcessor, 0, 0},  {&_swigt__p_FilterProcessor, 0, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter, _p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter, _p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter, _p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__FilterBase, _p_Filters__FilterBaseTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter, _p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter, _p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilterTo_p_FilterProcessor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__BiquadFilter[] = {  {&_swigt__p_Filters__BiquadFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__BiquadFilterCascader[] = {  {&_swigt__p_Filters__BiquadFilterCascader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__BiquadParallelFilters[] = {  {&_swigt__p_Filters__BiquadParallelFilters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__BiquadSection[] = {  {&_swigt__p_Filters__BiquadSection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__BiquadTransposedTypeI[] = {  {&_swigt__p_Filters__BiquadTransposedTypeI, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__BiquadTransposedTypeICascade[] = {  {&_swigt__p_Filters__BiquadTransposedTypeICascade, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__BiquadTransposedTypeII[] = {  {&_swigt__p_Filters__BiquadTransposedTypeII, 0, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter, _p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilterTo_p_Filters__BiquadTransposedTypeII, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter, _p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilterTo_p_Filters__BiquadTransposedTypeII, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter, _p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilterTo_p_Filters__BiquadTransposedTypeII, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter, _p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilterTo_p_Filters__BiquadTransposedTypeII, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter, _p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilterTo_p_Filters__BiquadTransposedTypeII, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter, _p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilterTo_p_Filters__BiquadTransposedTypeII, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter, _p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilterTo_p_Filters__BiquadTransposedTypeII, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter, _p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilterTo_p_Filters__BiquadTransposedTypeII, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter, _p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilterTo_p_Filters__BiquadTransposedTypeII, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter, _p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilterTo_p_Filters__BiquadTransposedTypeII, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJHighPassFilter, _p_Filters__IIR__RBJFilters__RBJHighPassFilterTo_p_Filters__BiquadTransposedTypeII, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJAllPassFilter, _p_Filters__IIR__RBJFilters__RBJAllPassFilterTo_p_Filters__BiquadTransposedTypeII, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJBandPassFilter, _p_Filters__IIR__RBJFilters__RBJBandPassFilterTo_p_Filters__BiquadTransposedTypeII, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJLowPassFilter, _p_Filters__IIR__RBJFilters__RBJLowPassFilterTo_p_Filters__BiquadTransposedTypeII, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJPeakFilter, _p_Filters__IIR__RBJFilters__RBJPeakFilterTo_p_Filters__BiquadTransposedTypeII, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter, _p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilterTo_p_Filters__BiquadTransposedTypeII, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter, _p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilterTo_p_Filters__BiquadTransposedTypeII, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter, _p_Filters__IIR__ZolzerFilters__ZolzerNotchFilterTo_p_Filters__BiquadTransposedTypeII, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter, _p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilterTo_p_Filters__BiquadTransposedTypeII, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJBiquadFilter, _p_Filters__IIR__RBJFilters__RBJBiquadFilterTo_p_Filters__BiquadTransposedTypeII, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJBandStopFilter, _p_Filters__IIR__RBJFilters__RBJBandStopFilterTo_p_Filters__BiquadTransposedTypeII, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJLowShelfFilter, _p_Filters__IIR__RBJFilters__RBJLowShelfFilterTo_p_Filters__BiquadTransposedTypeII, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJHighShelfFilter, _p_Filters__IIR__RBJFilters__RBJHighShelfFilterTo_p_Filters__BiquadTransposedTypeII, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter, _p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilterTo_p_Filters__BiquadTransposedTypeII, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter, _p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilterTo_p_Filters__BiquadTransposedTypeII, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__BiquadTransposedTypeIICascade[] = {  {&_swigt__p_Filters__BiquadTransposedTypeIICascade, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__BiquadTypeI[] = {  {&_swigt__p_Filters__BiquadTypeI, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__BiquadTypeICascade[] = {  {&_swigt__p_Filters__BiquadTypeICascade, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__BiquadTypeII[] = {  {&_swigt__p_Filters__BiquadTypeII, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__BiquadTypeIICascade[] = {  {&_swigt__p_Filters__BiquadTypeIICascade, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__FilterBase[] = {  {&_swigt__p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter, _p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilterTo_p_Filters__FilterBase, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter, _p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilterTo_p_Filters__FilterBase, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter, _p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilterTo_p_Filters__FilterBase, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJPeakFilter, _p_Filters__IIR__RBJFilters__RBJPeakFilterTo_p_Filters__FilterBase, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJBandPassFilter, _p_Filters__IIR__RBJFilters__RBJBandPassFilterTo_p_Filters__FilterBase, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJAllPassFilter, _p_Filters__IIR__RBJFilters__RBJAllPassFilterTo_p_Filters__FilterBase, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJHighPassFilter, _p_Filters__IIR__RBJFilters__RBJHighPassFilterTo_p_Filters__FilterBase, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJLowPassFilter, _p_Filters__IIR__RBJFilters__RBJLowPassFilterTo_p_Filters__FilterBase, 0, 0},  {&_swigt__p_Filters__BiquadTransposedTypeI, _p_Filters__BiquadTransposedTypeITo_p_Filters__FilterBase, 0, 0},  {&_swigt__p_Filters__BiquadTypeI, _p_Filters__BiquadTypeITo_p_Filters__FilterBase, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter, _p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilterTo_p_Filters__FilterBase, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter, _p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilterTo_p_Filters__FilterBase, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter, _p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilterTo_p_Filters__FilterBase, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter, _p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilterTo_p_Filters__FilterBase, 0, 0},  {&_swigt__p_Filters__BiquadTypeICascade, _p_Filters__BiquadTypeICascadeTo_p_Filters__FilterBase, 0, 0},  {&_swigt__p_Filters__BiquadTypeIICascade, _p_Filters__BiquadTypeIICascadeTo_p_Filters__FilterBase, 0, 0},  {&_swigt__p_Filters__BiquadTransposedTypeICascade, _p_Filters__BiquadTransposedTypeICascadeTo_p_Filters__FilterBase, 0, 0},  {&_swigt__p_Filters__BiquadTransposedTypeIICascade, _p_Filters__BiquadTransposedTypeIICascadeTo_p_Filters__FilterBase, 0, 0},  {&_swigt__p_Filters__FilterBase, 0, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter, _p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilterTo_p_Filters__FilterBase, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter, _p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilterTo_p_Filters__FilterBase, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter, _p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilterTo_p_Filters__FilterBase, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter, _p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilterTo_p_Filters__FilterBase, 0, 0},  {&_swigt__p_Filters__BiquadTypeII, _p_Filters__BiquadTypeIITo_p_Filters__FilterBase, 0, 0},  {&_swigt__p_Filters__BiquadTransposedTypeII, _p_Filters__BiquadTransposedTypeIITo_p_Filters__FilterBase, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter, _p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilterTo_p_Filters__FilterBase, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJHighShelfFilter, _p_Filters__IIR__RBJFilters__RBJHighShelfFilterTo_p_Filters__FilterBase, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJLowShelfFilter, _p_Filters__IIR__RBJFilters__RBJLowShelfFilterTo_p_Filters__FilterBase, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJBandStopFilter, _p_Filters__IIR__RBJFilters__RBJBandStopFilterTo_p_Filters__FilterBase, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJBiquadFilter, _p_Filters__IIR__RBJFilters__RBJBiquadFilterTo_p_Filters__FilterBase, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter, _p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilterTo_p_Filters__FilterBase, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter, _p_Filters__IIR__ZolzerFilters__ZolzerNotchFilterTo_p_Filters__FilterBase, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter, _p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilterTo_p_Filters__FilterBase, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter, _p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilterTo_p_Filters__FilterBase, 0, 0},  {&_swigt__p_Filters__BiquadFilter, _p_Filters__BiquadFilterTo_p_Filters__FilterBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__FilterCoefficients[] = {  {&_swigt__p_Filters__FilterCoefficients, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__Bessel__BandPassFilter[] = {  {&_swigt__p_Filters__IIR__Bessel__BandPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__Bessel__BandStopFilter[] = {  {&_swigt__p_Filters__IIR__Bessel__BandStopFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__Bessel__HighPassFilter[] = {  {&_swigt__p_Filters__IIR__Bessel__HighPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__Bessel__LowPassFilter[] = {  {&_swigt__p_Filters__IIR__Bessel__LowPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__Biquad__Biquad[] = {  {&_swigt__p_Filters__IIR__Biquad__Biquad, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__Biquad__Parameters[] = {  {&_swigt__p_Filters__IIR__Biquad__Parameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter[] = {  {&_swigt__p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db[] = {  {&_swigt__p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter[] = {  {&_swigt__p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db[] = {  {&_swigt__p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter[] = {  {&_swigt__p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db[] = {  {&_swigt__p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter[] = {  {&_swigt__p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ButterworthFilters__ButterworthHighPassFilter12db[] = {  {&_swigt__p_Filters__IIR__ButterworthFilters__ButterworthHighPassFilter12db, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter[] = {  {&_swigt__p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db[] = {  {&_swigt__p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter[] = {  {&_swigt__p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db[] = {  {&_swigt__p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__Butterworth__BandPassFilter[] = {  {&_swigt__p_Filters__IIR__Butterworth__BandPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__Butterworth__BandShelfFilter[] = {  {&_swigt__p_Filters__IIR__Butterworth__BandShelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__Butterworth__BandStopFilter[] = {  {&_swigt__p_Filters__IIR__Butterworth__BandStopFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__Butterworth__HighPassFilter[] = {  {&_swigt__p_Filters__IIR__Butterworth__HighPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__Butterworth__HighShelfFilter[] = {  {&_swigt__p_Filters__IIR__Butterworth__HighShelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__Butterworth__LowPassFilter[] = {  {&_swigt__p_Filters__IIR__Butterworth__LowPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__Butterworth__LowShelfFilter[] = {  {&_swigt__p_Filters__IIR__Butterworth__LowShelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ChebyshevFilters__ChebyshevIILowPassFilter12db[] = {  {&_swigt__p_Filters__IIR__ChebyshevFilters__ChebyshevIILowPassFilter12db, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ChebyshevFilters__ChebyshevILowPassFilter12db[] = {  {&_swigt__p_Filters__IIR__ChebyshevFilters__ChebyshevILowPassFilter12db, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ChebyshevII__BandPassFilter[] = {  {&_swigt__p_Filters__IIR__ChebyshevII__BandPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ChebyshevII__BandShelfFilter[] = {  {&_swigt__p_Filters__IIR__ChebyshevII__BandShelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ChebyshevII__BandStopFilter[] = {  {&_swigt__p_Filters__IIR__ChebyshevII__BandStopFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ChebyshevII__HighPassFilter[] = {  {&_swigt__p_Filters__IIR__ChebyshevII__HighPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ChebyshevII__HighShelfFilter[] = {  {&_swigt__p_Filters__IIR__ChebyshevII__HighShelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ChebyshevII__LowPassFilter[] = {  {&_swigt__p_Filters__IIR__ChebyshevII__LowPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ChebyshevII__LowShelfFilter[] = {  {&_swigt__p_Filters__IIR__ChebyshevII__LowShelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ChebyshevI__BandPassFilter[] = {  {&_swigt__p_Filters__IIR__ChebyshevI__BandPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ChebyshevI__BandShelfFilter[] = {  {&_swigt__p_Filters__IIR__ChebyshevI__BandShelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ChebyshevI__BandStopFilter[] = {  {&_swigt__p_Filters__IIR__ChebyshevI__BandStopFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ChebyshevI__HighPassFilter[] = {  {&_swigt__p_Filters__IIR__ChebyshevI__HighPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ChebyshevI__HighShelfFilter[] = {  {&_swigt__p_Filters__IIR__ChebyshevI__HighShelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ChebyshevI__LowPassFilter[] = {  {&_swigt__p_Filters__IIR__ChebyshevI__LowPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ChebyshevI__LowShelfFilter[] = {  {&_swigt__p_Filters__IIR__ChebyshevI__LowShelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__Legendre__BandPassFilter[] = {  {&_swigt__p_Filters__IIR__Legendre__BandPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__Legendre__BandStopFilter[] = {  {&_swigt__p_Filters__IIR__Legendre__BandStopFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__Legendre__HighPassFilter[] = {  {&_swigt__p_Filters__IIR__Legendre__HighPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__Legendre__LowPassFilter[] = {  {&_swigt__p_Filters__IIR__Legendre__LowPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__Nigel__Biquad[] = {  {&_swigt__p_Filters__IIR__Nigel__Biquad, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__RBJFilters__RBJAllPassFilter[] = {  {&_swigt__p_Filters__IIR__RBJFilters__RBJAllPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__RBJFilters__RBJBandPassFilter[] = {  {&_swigt__p_Filters__IIR__RBJFilters__RBJBandPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__RBJFilters__RBJBandStopFilter[] = {  {&_swigt__p_Filters__IIR__RBJFilters__RBJBandStopFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__RBJFilters__RBJBiquadFilter[] = {  {&_swigt__p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter, _p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilterTo_p_Filters__IIR__RBJFilters__RBJBiquadFilter, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJBiquadFilter, 0, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJBandStopFilter, _p_Filters__IIR__RBJFilters__RBJBandStopFilterTo_p_Filters__IIR__RBJFilters__RBJBiquadFilter, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJLowShelfFilter, _p_Filters__IIR__RBJFilters__RBJLowShelfFilterTo_p_Filters__IIR__RBJFilters__RBJBiquadFilter, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJHighShelfFilter, _p_Filters__IIR__RBJFilters__RBJHighShelfFilterTo_p_Filters__IIR__RBJFilters__RBJBiquadFilter, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJLowPassFilter, _p_Filters__IIR__RBJFilters__RBJLowPassFilterTo_p_Filters__IIR__RBJFilters__RBJBiquadFilter, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJHighPassFilter, _p_Filters__IIR__RBJFilters__RBJHighPassFilterTo_p_Filters__IIR__RBJFilters__RBJBiquadFilter, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJAllPassFilter, _p_Filters__IIR__RBJFilters__RBJAllPassFilterTo_p_Filters__IIR__RBJFilters__RBJBiquadFilter, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJBandPassFilter, _p_Filters__IIR__RBJFilters__RBJBandPassFilterTo_p_Filters__IIR__RBJFilters__RBJBiquadFilter, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJPeakFilter, _p_Filters__IIR__RBJFilters__RBJPeakFilterTo_p_Filters__IIR__RBJFilters__RBJBiquadFilter, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__RBJFilters__RBJHighPassFilter[] = {  {&_swigt__p_Filters__IIR__RBJFilters__RBJHighPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__RBJFilters__RBJHighShelfFilter[] = {  {&_swigt__p_Filters__IIR__RBJFilters__RBJHighShelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__RBJFilters__RBJLowPassFilter[] = {  {&_swigt__p_Filters__IIR__RBJFilters__RBJLowPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__RBJFilters__RBJLowShelfFilter[] = {  {&_swigt__p_Filters__IIR__RBJFilters__RBJLowShelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__RBJFilters__RBJPeakFilter[] = {  {&_swigt__p_Filters__IIR__RBJFilters__RBJPeakFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter[] = {  {&_swigt__p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__RBJ__AllPassFilter[] = {  {&_swigt__p_Filters__IIR__RBJ__AllPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__RBJ__BandPass1Filter[] = {  {&_swigt__p_Filters__IIR__RBJ__BandPass1Filter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__RBJ__BandPass2Filter[] = {  {&_swigt__p_Filters__IIR__RBJ__BandPass2Filter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__RBJ__BandShelfFilter[] = {  {&_swigt__p_Filters__IIR__RBJ__BandShelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__RBJ__BandStopFilter[] = {  {&_swigt__p_Filters__IIR__RBJ__BandStopFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__RBJ__HighPassFilter[] = {  {&_swigt__p_Filters__IIR__RBJ__HighPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__RBJ__HighShelfFilter[] = {  {&_swigt__p_Filters__IIR__RBJ__HighShelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__RBJ__LowPassFilter[] = {  {&_swigt__p_Filters__IIR__RBJ__LowPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__RBJ__LowShelfFilter[] = {  {&_swigt__p_Filters__IIR__RBJ__LowShelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter[] = {  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter[] = {  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter[] = {  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter[] = {  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter, _p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilterTo_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter, _p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilterTo_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter, _p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilterTo_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter, _p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilterTo_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter, _p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilterTo_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter, _p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilterTo_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter, _p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilterTo_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter, _p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilterTo_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter, _p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilterTo_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter, _p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilterTo_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter, _p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilterTo_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter, _p_Filters__IIR__ZolzerFilters__ZolzerNotchFilterTo_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter, 0, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter, _p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilterTo_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter, _p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilterTo_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter[] = {  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter[] = {  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter[] = {  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter[] = {  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter[] = {  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter[] = {  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter[] = {  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter[] = {  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter[] = {  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter[] = {  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter[] = {  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FunctionProcessor[] = {  {&_swigt__p_FunctionProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GeneratorProcessor[] = {  {&_swigt__p_GeneratorProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MixerProcessor[] = {  {&_swigt__p_MixerProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoAdderOperatorProcessor[] = {  {&_swigt__p_MonoAdderOperatorProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoBlendOperatorProcessor[] = {  {&_swigt__p_MonoBlendOperatorProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoCascadeOperatorProcessor[] = {  {&_swigt__p_MonoCascadeOperatorProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoCascadeProcessor[] = {  {&_swigt__p_MonoCascadeProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoDownsampleProcessor[] = {  {&_swigt__p_MonoDownsampleProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoFXProcessor[] = {  {&_swigt__p_MonoFXProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoModulatorOperatorProcessor[] = {  {&_swigt__p_MonoModulatorOperatorProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoMultiplierOperatorProcessor[] = {  {&_swigt__p_MonoMultiplierOperatorProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoOperatorProcessor[] = {  {&_swigt__p_MonoOperatorProcessor, 0, 0, 0},  {&_swigt__p_MonoCascadeOperatorProcessor, _p_MonoCascadeOperatorProcessorTo_p_MonoOperatorProcessor, 0, 0},  {&_swigt__p_MonoMultiplierOperatorProcessor, _p_MonoMultiplierOperatorProcessorTo_p_MonoOperatorProcessor, 0, 0},  {&_swigt__p_MonoAdderOperatorProcessor, _p_MonoAdderOperatorProcessorTo_p_MonoOperatorProcessor, 0, 0},  {&_swigt__p_MonoSubtractorOperatorProcessor, _p_MonoSubtractorOperatorProcessorTo_p_MonoOperatorProcessor, 0, 0},  {&_swigt__p_MonoModulatorOperatorProcessor, _p_MonoModulatorOperatorProcessorTo_p_MonoOperatorProcessor, 0, 0},  {&_swigt__p_MonoBlendOperatorProcessor, _p_MonoBlendOperatorProcessorTo_p_MonoOperatorProcessor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoOversampleProcessor[] = {  {&_swigt__p_MonoOversampleProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoProcessor[] = {  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter, _p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter, _p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJLowPassFilter, _p_Filters__IIR__RBJFilters__RBJLowPassFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJ__BandPass1Filter, _p_Filters__IIR__RBJ__BandPass1FilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJ__AllPassFilter, _p_Filters__IIR__RBJ__AllPassFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJ__HighPassFilter, _p_Filters__IIR__RBJ__HighPassFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJ__LowPassFilter, _p_Filters__IIR__RBJ__LowPassFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Legendre__BandPassFilter, _p_Filters__IIR__Legendre__BandPassFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Legendre__HighPassFilter, _p_Filters__IIR__Legendre__HighPassFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Legendre__LowPassFilter, _p_Filters__IIR__Legendre__LowPassFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevI__BandPassFilter, _p_Filters__IIR__ChebyshevI__BandPassFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevI__HighPassFilter, _p_Filters__IIR__ChebyshevI__HighPassFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevI__LowPassFilter, _p_Filters__IIR__ChebyshevI__LowPassFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJHighPassFilter, _p_Filters__IIR__RBJFilters__RBJHighPassFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevII__BandPassFilter, _p_Filters__IIR__ChebyshevII__BandPassFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevII__HighPassFilter, _p_Filters__IIR__ChebyshevII__HighPassFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevII__LowPassFilter, _p_Filters__IIR__ChebyshevII__LowPassFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Butterworth__BandPassFilter, _p_Filters__IIR__Butterworth__BandPassFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Butterworth__HighPassFilter, _p_Filters__IIR__Butterworth__HighPassFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Butterworth__LowPassFilter, _p_Filters__IIR__Butterworth__LowPassFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Bessel__BandPassFilter, _p_Filters__IIR__Bessel__BandPassFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Bessel__HighPassFilter, _p_Filters__IIR__Bessel__HighPassFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Bessel__LowPassFilter, _p_Filters__IIR__Bessel__LowPassFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJAllPassFilter, _p_Filters__IIR__RBJFilters__RBJAllPassFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJBandPassFilter, _p_Filters__IIR__RBJFilters__RBJBandPassFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJPeakFilter, _p_Filters__IIR__RBJFilters__RBJPeakFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__BiquadTypeII, _p_Filters__BiquadTypeIITo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__BiquadTransposedTypeII, _p_Filters__BiquadTransposedTypeIITo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter, _p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter, _p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter, _p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter, _p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter, _p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter, _p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJ__BandShelfFilter, _p_Filters__IIR__RBJ__BandShelfFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJ__HighShelfFilter, _p_Filters__IIR__RBJ__HighShelfFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJ__LowShelfFilter, _p_Filters__IIR__RBJ__LowShelfFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJ__BandStopFilter, _p_Filters__IIR__RBJ__BandStopFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJ__BandPass2Filter, _p_Filters__IIR__RBJ__BandPass2FilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Legendre__BandStopFilter, _p_Filters__IIR__Legendre__BandStopFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevI__HighShelfFilter, _p_Filters__IIR__ChebyshevI__HighShelfFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevI__LowShelfFilter, _p_Filters__IIR__ChebyshevI__LowShelfFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevI__BandShelfFilter, _p_Filters__IIR__ChebyshevI__BandShelfFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevI__BandStopFilter, _p_Filters__IIR__ChebyshevI__BandStopFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevII__HighShelfFilter, _p_Filters__IIR__ChebyshevII__HighShelfFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevII__LowShelfFilter, _p_Filters__IIR__ChebyshevII__LowShelfFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevII__BandShelfFilter, _p_Filters__IIR__ChebyshevII__BandShelfFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevII__BandStopFilter, _p_Filters__IIR__ChebyshevII__BandStopFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Butterworth__BandShelfFilter, _p_Filters__IIR__Butterworth__BandShelfFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Butterworth__HighShelfFilter, _p_Filters__IIR__Butterworth__HighShelfFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Butterworth__LowShelfFilter, _p_Filters__IIR__Butterworth__LowShelfFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Butterworth__BandStopFilter, _p_Filters__IIR__Butterworth__BandStopFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Bessel__BandStopFilter, _p_Filters__IIR__Bessel__BandStopFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__BiquadFilter, _p_Filters__BiquadFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJHighShelfFilter, _p_Filters__IIR__RBJFilters__RBJHighShelfFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJLowShelfFilter, _p_Filters__IIR__RBJFilters__RBJLowShelfFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJBandStopFilter, _p_Filters__IIR__RBJFilters__RBJBandStopFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJBiquadFilter, _p_Filters__IIR__RBJFilters__RBJBiquadFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter, _p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter, _p_Filters__IIR__ZolzerFilters__ZolzerNotchFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__BiquadTypeICascade, _p_Filters__BiquadTypeICascadeTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__BiquadTypeIICascade, _p_Filters__BiquadTypeIICascadeTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__BiquadTransposedTypeICascade, _p_Filters__BiquadTransposedTypeICascadeTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__BiquadTransposedTypeIICascade, _p_Filters__BiquadTransposedTypeIICascadeTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter, _p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__BiquadTransposedTypeI, _p_Filters__BiquadTransposedTypeITo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__BiquadTypeI, _p_Filters__BiquadTypeITo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Biquad__Biquad, _p_Filters__IIR__Biquad__BiquadTo_p_MonoProcessor, 0, 0},  {&_swigt__p_MonoProcessor, 0, 0, 0},  {&_swigt__p_FilterProcessor, _p_FilterProcessorTo_p_MonoProcessor, 0, 0},  {&_swigt__p_AmplifierProcessor, _p_AmplifierProcessorTo_p_MonoProcessor, 0, 0},  {&_swigt__p_OscillatorProcessor, _p_OscillatorProcessorTo_p_MonoProcessor, 0, 0},  {&_swigt__p_FunctionProcessor, _p_FunctionProcessorTo_p_MonoProcessor, 0, 0},  {&_swigt__p_GeneratorProcessor, _p_GeneratorProcessorTo_p_MonoProcessor, 0, 0},  {&_swigt__p_MonoFXProcessor, _p_MonoFXProcessorTo_p_MonoProcessor, 0, 0},  {&_swigt__p_MonoCascadeProcessor, _p_MonoCascadeProcessorTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter, _p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter, _p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter, _p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__FilterBase, _p_Filters__FilterBaseTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter, _p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter, _p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilterTo_p_MonoProcessor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoSubtractorOperatorProcessor[] = {  {&_swigt__p_MonoSubtractorOperatorProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoUpsampleProcessor[] = {  {&_swigt__p_MonoUpsampleProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OperatorProcessor[] = {  {&_swigt__p_OperatorProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OscillatorProcessor[] = {  {&_swigt__p_OscillatorProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Parameter2Processor[] = {  {&_swigt__p_Parameter2Processor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Port[] = {  {&_swigt__p_Port, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PortMap[] = {  {&_swigt__p_PortMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ports[] = {  {&_swigt__p_Ports, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Random[] = {  {&_swigt__p_Random, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SignalSinkProcessor[] = {  {&_swigt__p_SignalSinkProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SignalSourceProcessor[] = {  {&_swigt__p_SignalSourceProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundProcessor[] = {  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter, _p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter, _p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevI__HighPassFilter, _p_Filters__IIR__ChebyshevI__HighPassFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevI__LowPassFilter, _p_Filters__IIR__ChebyshevI__LowPassFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevII__BandPassFilter, _p_Filters__IIR__ChebyshevII__BandPassFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevII__HighPassFilter, _p_Filters__IIR__ChebyshevII__HighPassFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevII__LowPassFilter, _p_Filters__IIR__ChebyshevII__LowPassFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Butterworth__BandPassFilter, _p_Filters__IIR__Butterworth__BandPassFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Butterworth__HighPassFilter, _p_Filters__IIR__Butterworth__HighPassFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Butterworth__LowPassFilter, _p_Filters__IIR__Butterworth__LowPassFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Bessel__BandPassFilter, _p_Filters__IIR__Bessel__BandPassFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Bessel__HighPassFilter, _p_Filters__IIR__Bessel__HighPassFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Bessel__LowPassFilter, _p_Filters__IIR__Bessel__LowPassFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevI__BandPassFilter, _p_Filters__IIR__ChebyshevI__BandPassFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Legendre__LowPassFilter, _p_Filters__IIR__Legendre__LowPassFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Legendre__HighPassFilter, _p_Filters__IIR__Legendre__HighPassFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Legendre__BandPassFilter, _p_Filters__IIR__Legendre__BandPassFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJ__LowPassFilter, _p_Filters__IIR__RBJ__LowPassFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJ__HighPassFilter, _p_Filters__IIR__RBJ__HighPassFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJ__AllPassFilter, _p_Filters__IIR__RBJ__AllPassFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJ__BandPass1Filter, _p_Filters__IIR__RBJ__BandPass1FilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJLowPassFilter, _p_Filters__IIR__RBJFilters__RBJLowPassFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJHighPassFilter, _p_Filters__IIR__RBJFilters__RBJHighPassFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJAllPassFilter, _p_Filters__IIR__RBJFilters__RBJAllPassFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJBandPassFilter, _p_Filters__IIR__RBJFilters__RBJBandPassFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJPeakFilter, _p_Filters__IIR__RBJFilters__RBJPeakFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__BiquadTypeII, _p_Filters__BiquadTypeIITo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__BiquadTransposedTypeII, _p_Filters__BiquadTransposedTypeIITo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter, _p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter, _p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter, _p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter, _p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter, _p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter, _p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevII__BandStopFilter, _p_Filters__IIR__ChebyshevII__BandStopFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Butterworth__BandShelfFilter, _p_Filters__IIR__Butterworth__BandShelfFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Butterworth__HighShelfFilter, _p_Filters__IIR__Butterworth__HighShelfFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Butterworth__LowShelfFilter, _p_Filters__IIR__Butterworth__LowShelfFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Butterworth__BandStopFilter, _p_Filters__IIR__Butterworth__BandStopFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Bessel__BandStopFilter, _p_Filters__IIR__Bessel__BandStopFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__BiquadFilter, _p_Filters__BiquadFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevII__BandShelfFilter, _p_Filters__IIR__ChebyshevII__BandShelfFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevII__LowShelfFilter, _p_Filters__IIR__ChebyshevII__LowShelfFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevII__HighShelfFilter, _p_Filters__IIR__ChebyshevII__HighShelfFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevI__BandStopFilter, _p_Filters__IIR__ChebyshevI__BandStopFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevI__BandShelfFilter, _p_Filters__IIR__ChebyshevI__BandShelfFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevI__LowShelfFilter, _p_Filters__IIR__ChebyshevI__LowShelfFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ChebyshevI__HighShelfFilter, _p_Filters__IIR__ChebyshevI__HighShelfFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Legendre__BandStopFilter, _p_Filters__IIR__Legendre__BandStopFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJ__BandPass2Filter, _p_Filters__IIR__RBJ__BandPass2FilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJ__BandStopFilter, _p_Filters__IIR__RBJ__BandStopFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJ__LowShelfFilter, _p_Filters__IIR__RBJ__LowShelfFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJ__HighShelfFilter, _p_Filters__IIR__RBJ__HighShelfFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJ__BandShelfFilter, _p_Filters__IIR__RBJ__BandShelfFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJHighShelfFilter, _p_Filters__IIR__RBJFilters__RBJHighShelfFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJLowShelfFilter, _p_Filters__IIR__RBJFilters__RBJLowShelfFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJBandStopFilter, _p_Filters__IIR__RBJFilters__RBJBandStopFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJBiquadFilter, _p_Filters__IIR__RBJFilters__RBJBiquadFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter, _p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter, _p_Filters__IIR__ZolzerFilters__ZolzerNotchFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__BiquadTransposedTypeIICascade, _p_Filters__BiquadTransposedTypeIICascadeTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__BiquadTransposedTypeICascade, _p_Filters__BiquadTransposedTypeICascadeTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__BiquadTypeIICascade, _p_Filters__BiquadTypeIICascadeTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__BiquadTypeICascade, _p_Filters__BiquadTypeICascadeTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter, _p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__BiquadTransposedTypeI, _p_Filters__BiquadTransposedTypeITo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__BiquadTypeI, _p_Filters__BiquadTypeITo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__Biquad__Biquad, _p_Filters__IIR__Biquad__BiquadTo_p_SoundProcessor, 0, 0},  {&_swigt__p_SoundProcessor, 0, 0, 0},  {&_swigt__p_FilterProcessor, _p_FilterProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_AmplifierProcessor, _p_AmplifierProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_OscillatorProcessor, _p_OscillatorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_StereoSplitterProcessor, _p_StereoSplitterProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Parameter2Processor, _p_Parameter2ProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_FunctionProcessor, _p_FunctionProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MixerProcessor, _p_MixerProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_GeneratorProcessor, _p_GeneratorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_StereoFXProcessor, _p_StereoFXProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoFXProcessor, _p_MonoFXProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_StereoCascadeProcessor, _p_StereoCascadeProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_StereoProcessor, _p_StereoProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_StereoOscillatorProcessor, _p_StereoOscillatorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_StereoGeneratorProcessor, _p_StereoGeneratorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_StereoFunctionProcessor, _p_StereoFunctionProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_StereoFilterProcessor, _p_StereoFilterProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_StereoAmplifierProcessor, _p_StereoAmplifierProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoCascadeProcessor, _p_MonoCascadeProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoProcessor, _p_MonoProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_SpectrumProcessor, _p_SpectrumProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_SignalSourceProcessor, _p_SignalSourceProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_SignalSinkProcessor, _p_SignalSinkProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoOversampleProcessor, _p_MonoOversampleProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoUpsampleProcessor, _p_MonoUpsampleProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoDownsampleProcessor, _p_MonoDownsampleProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_OperatorProcessor, _p_OperatorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoOperatorProcessor, _p_MonoOperatorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoCascadeOperatorProcessor, _p_MonoCascadeOperatorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoMultiplierOperatorProcessor, _p_MonoMultiplierOperatorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoAdderOperatorProcessor, _p_MonoAdderOperatorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoSubtractorOperatorProcessor, _p_MonoSubtractorOperatorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoModulatorOperatorProcessor, _p_MonoModulatorOperatorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoBlendOperatorProcessor, _p_MonoBlendOperatorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter, _p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter, _p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter, _p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__FilterBase, _p_Filters__FilterBaseTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter, _p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter, _p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilterTo_p_SoundProcessor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpectrumProcessor[] = {  {&_swigt__p_SpectrumProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__RandomMersenne[] = {  {&_swigt__p_Std__RandomMersenne, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StereoAmplifierProcessor[] = {  {&_swigt__p_StereoAmplifierProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StereoCascadeProcessor[] = {  {&_swigt__p_StereoCascadeProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StereoFXProcessor[] = {  {&_swigt__p_StereoFXProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StereoFilterProcessor[] = {  {&_swigt__p_StereoFilterProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StereoFunctionProcessor[] = {  {&_swigt__p_StereoFunctionProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StereoGeneratorProcessor[] = {  {&_swigt__p_StereoGeneratorProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StereoOscillatorProcessor[] = {  {&_swigt__p_StereoOscillatorProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StereoProcessor[] = {  {&_swigt__p_StereoProcessor, 0, 0, 0},  {&_swigt__p_StereoCascadeProcessor, _p_StereoCascadeProcessorTo_p_StereoProcessor, 0, 0},  {&_swigt__p_StereoFXProcessor, _p_StereoFXProcessorTo_p_StereoProcessor, 0, 0},  {&_swigt__p_StereoOscillatorProcessor, _p_StereoOscillatorProcessorTo_p_StereoProcessor, 0, 0},  {&_swigt__p_StereoGeneratorProcessor, _p_StereoGeneratorProcessorTo_p_StereoProcessor, 0, 0},  {&_swigt__p_StereoFunctionProcessor, _p_StereoFunctionProcessorTo_p_StereoProcessor, 0, 0},  {&_swigt__p_StereoFilterProcessor, _p_StereoFilterProcessorTo_p_StereoProcessor, 0, 0},  {&_swigt__p_StereoAmplifierProcessor, _p_StereoAmplifierProcessorTo_p_StereoProcessor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StereoSplitterProcessor[] = {  {&_swigt__p_StereoSplitterProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_float__float[] = {  {&_swigt__p_f_float__float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_q_const__float__float[] = {  {&_swigt__p_f_r_q_const__float__float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fenv_t[] = {  {&_swigt__p_fenv_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fexcept_t[] = {  {&_swigt__p_fexcept_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_AmplifierProcessor[] = {  {&_swigt__p_p_AmplifierProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter[] = {{&_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter[] = {{&_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter[] = {{&_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter[] = {{&_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter[] = {{&_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__RBJFilters__RBJHighPassFilter[] = {{&_swigt__p_p_Filters__IIR__RBJFilters__RBJHighPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__RBJFilters__RBJLowPassFilter[] = {{&_swigt__p_p_Filters__IIR__RBJFilters__RBJLowPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__RBJ__BandPass1Filter[] = {{&_swigt__p_p_Filters__IIR__RBJ__BandPass1Filter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__RBJ__AllPassFilter[] = {{&_swigt__p_p_Filters__IIR__RBJ__AllPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__RBJ__HighPassFilter[] = {{&_swigt__p_p_Filters__IIR__RBJ__HighPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__RBJ__LowPassFilter[] = {{&_swigt__p_p_Filters__IIR__RBJ__LowPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__Legendre__BandPassFilter[] = {{&_swigt__p_p_Filters__IIR__Legendre__BandPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__Legendre__HighPassFilter[] = {{&_swigt__p_p_Filters__IIR__Legendre__HighPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__RBJFilters__RBJAllPassFilter[] = {{&_swigt__p_p_Filters__IIR__RBJFilters__RBJAllPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__RBJFilters__RBJBandPassFilter[] = {{&_swigt__p_p_Filters__IIR__RBJFilters__RBJBandPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__RBJFilters__RBJPeakFilter[] = {{&_swigt__p_p_Filters__IIR__RBJFilters__RBJPeakFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__Legendre__LowPassFilter[] = {{&_swigt__p_p_Filters__IIR__Legendre__LowPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__ChebyshevI__BandPassFilter[] = {{&_swigt__p_p_Filters__IIR__ChebyshevI__BandPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__ChebyshevI__HighPassFilter[] = {{&_swigt__p_p_Filters__IIR__ChebyshevI__HighPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__ChebyshevI__LowPassFilter[] = {{&_swigt__p_p_Filters__IIR__ChebyshevI__LowPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__ChebyshevII__BandPassFilter[] = {{&_swigt__p_p_Filters__IIR__ChebyshevII__BandPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__ChebyshevII__HighPassFilter[] = {{&_swigt__p_p_Filters__IIR__ChebyshevII__HighPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__ChebyshevII__LowPassFilter[] = {{&_swigt__p_p_Filters__IIR__ChebyshevII__LowPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__Bessel__LowPassFilter[] = {{&_swigt__p_p_Filters__IIR__Bessel__LowPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__Bessel__HighPassFilter[] = {{&_swigt__p_p_Filters__IIR__Bessel__HighPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__Bessel__BandPassFilter[] = {{&_swigt__p_p_Filters__IIR__Bessel__BandPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__Butterworth__LowPassFilter[] = {{&_swigt__p_p_Filters__IIR__Butterworth__LowPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__Butterworth__HighPassFilter[] = {{&_swigt__p_p_Filters__IIR__Butterworth__HighPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__Butterworth__BandPassFilter[] = {{&_swigt__p_p_Filters__IIR__Butterworth__BandPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter[] = {{&_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__BiquadTransposedTypeII[] = {{&_swigt__p_p_Filters__BiquadTransposedTypeII, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__BiquadTypeII[] = {{&_swigt__p_p_Filters__BiquadTypeII, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter[] = {{&_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter[] = {{&_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter[] = {{&_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__RBJFilters__RBJHighShelfFilter[] = {{&_swigt__p_p_Filters__IIR__RBJFilters__RBJHighShelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__RBJFilters__RBJLowShelfFilter[] = {{&_swigt__p_p_Filters__IIR__RBJFilters__RBJLowShelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__RBJFilters__RBJBandStopFilter[] = {{&_swigt__p_p_Filters__IIR__RBJFilters__RBJBandStopFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__RBJFilters__RBJBiquadFilter[] = {{&_swigt__p_p_Filters__IIR__RBJFilters__RBJBiquadFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__RBJ__BandShelfFilter[] = {{&_swigt__p_p_Filters__IIR__RBJ__BandShelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__RBJ__HighShelfFilter[] = {{&_swigt__p_p_Filters__IIR__RBJ__HighShelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__RBJ__LowShelfFilter[] = {{&_swigt__p_p_Filters__IIR__RBJ__LowShelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__RBJ__BandStopFilter[] = {{&_swigt__p_p_Filters__IIR__RBJ__BandStopFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__RBJ__BandPass2Filter[] = {{&_swigt__p_p_Filters__IIR__RBJ__BandPass2Filter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__Legendre__BandStopFilter[] = {{&_swigt__p_p_Filters__IIR__Legendre__BandStopFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__ChebyshevI__HighShelfFilter[] = {{&_swigt__p_p_Filters__IIR__ChebyshevI__HighShelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__ChebyshevI__LowShelfFilter[] = {{&_swigt__p_p_Filters__IIR__ChebyshevI__LowShelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__ChebyshevI__BandShelfFilter[] = {{&_swigt__p_p_Filters__IIR__ChebyshevI__BandShelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__ChebyshevI__BandStopFilter[] = {{&_swigt__p_p_Filters__IIR__ChebyshevI__BandStopFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__ChebyshevII__HighShelfFilter[] = {{&_swigt__p_p_Filters__IIR__ChebyshevII__HighShelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__ChebyshevII__LowShelfFilter[] = {{&_swigt__p_p_Filters__IIR__ChebyshevII__LowShelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__ChebyshevII__BandShelfFilter[] = {{&_swigt__p_p_Filters__IIR__ChebyshevII__BandShelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__ChebyshevII__BandStopFilter[] = {{&_swigt__p_p_Filters__IIR__ChebyshevII__BandStopFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__Butterworth__BandShelfFilter[] = {{&_swigt__p_p_Filters__IIR__Butterworth__BandShelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__Butterworth__HighShelfFilter[] = {{&_swigt__p_p_Filters__IIR__Butterworth__HighShelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__Butterworth__LowShelfFilter[] = {{&_swigt__p_p_Filters__IIR__Butterworth__LowShelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__BiquadFilter[] = {{&_swigt__p_p_Filters__BiquadFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__Bessel__BandStopFilter[] = {{&_swigt__p_p_Filters__IIR__Bessel__BandStopFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__Butterworth__BandStopFilter[] = {{&_swigt__p_p_Filters__IIR__Butterworth__BandStopFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__BiquadTransposedTypeIICascade[] = {{&_swigt__p_p_Filters__BiquadTransposedTypeIICascade, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__BiquadTransposedTypeICascade[] = {{&_swigt__p_p_Filters__BiquadTransposedTypeICascade, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__BiquadTypeIICascade[] = {{&_swigt__p_p_Filters__BiquadTypeIICascade, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__BiquadTypeICascade[] = {{&_swigt__p_p_Filters__BiquadTypeICascade, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter[] = {{&_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__BiquadTransposedTypeI[] = {{&_swigt__p_p_Filters__BiquadTransposedTypeI, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__BiquadTypeI[] = {{&_swigt__p_p_Filters__BiquadTypeI, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__Biquad__Biquad[] = {{&_swigt__p_p_Filters__IIR__Biquad__Biquad, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter[] = {{&_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__FilterBase[] = {{&_swigt__p_p_Filters__FilterBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter[] = {{&_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter[] = {{&_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter[] = {{&_swigt__p_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter[] = {{&_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter[] = {{&_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_FilterProcessor[] = {  {&_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter, _p_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter, _p_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter, _p_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter, _p_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter, _p_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__RBJFilters__RBJHighPassFilter, _p_p_Filters__IIR__RBJFilters__RBJHighPassFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__RBJFilters__RBJLowPassFilter, _p_p_Filters__IIR__RBJFilters__RBJLowPassFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__RBJ__BandPass1Filter, _p_p_Filters__IIR__RBJ__BandPass1FilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__RBJ__AllPassFilter, _p_p_Filters__IIR__RBJ__AllPassFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__RBJ__HighPassFilter, _p_p_Filters__IIR__RBJ__HighPassFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__RBJ__LowPassFilter, _p_p_Filters__IIR__RBJ__LowPassFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__Legendre__BandPassFilter, _p_p_Filters__IIR__Legendre__BandPassFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__Legendre__HighPassFilter, _p_p_Filters__IIR__Legendre__HighPassFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__RBJFilters__RBJAllPassFilter, _p_p_Filters__IIR__RBJFilters__RBJAllPassFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__RBJFilters__RBJBandPassFilter, _p_p_Filters__IIR__RBJFilters__RBJBandPassFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__RBJFilters__RBJPeakFilter, _p_p_Filters__IIR__RBJFilters__RBJPeakFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__Legendre__LowPassFilter, _p_p_Filters__IIR__Legendre__LowPassFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__ChebyshevI__BandPassFilter, _p_p_Filters__IIR__ChebyshevI__BandPassFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__ChebyshevI__HighPassFilter, _p_p_Filters__IIR__ChebyshevI__HighPassFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__ChebyshevI__LowPassFilter, _p_p_Filters__IIR__ChebyshevI__LowPassFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__ChebyshevII__BandPassFilter, _p_p_Filters__IIR__ChebyshevII__BandPassFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__ChebyshevII__HighPassFilter, _p_p_Filters__IIR__ChebyshevII__HighPassFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__ChebyshevII__LowPassFilter, _p_p_Filters__IIR__ChebyshevII__LowPassFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__Bessel__LowPassFilter, _p_p_Filters__IIR__Bessel__LowPassFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__Bessel__HighPassFilter, _p_p_Filters__IIR__Bessel__HighPassFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__Bessel__BandPassFilter, _p_p_Filters__IIR__Bessel__BandPassFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__Butterworth__LowPassFilter, _p_p_Filters__IIR__Butterworth__LowPassFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__Butterworth__HighPassFilter, _p_p_Filters__IIR__Butterworth__HighPassFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__Butterworth__BandPassFilter, _p_p_Filters__IIR__Butterworth__BandPassFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter, _p_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__BiquadTransposedTypeII, _p_p_Filters__BiquadTransposedTypeIITo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__BiquadTypeII, _p_p_Filters__BiquadTypeIITo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter, _p_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter, _p_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter, _p_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__RBJFilters__RBJHighShelfFilter, _p_p_Filters__IIR__RBJFilters__RBJHighShelfFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__RBJFilters__RBJLowShelfFilter, _p_p_Filters__IIR__RBJFilters__RBJLowShelfFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__RBJFilters__RBJBandStopFilter, _p_p_Filters__IIR__RBJFilters__RBJBandStopFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__RBJFilters__RBJBiquadFilter, _p_p_Filters__IIR__RBJFilters__RBJBiquadFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__RBJ__BandShelfFilter, _p_p_Filters__IIR__RBJ__BandShelfFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__RBJ__HighShelfFilter, _p_p_Filters__IIR__RBJ__HighShelfFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__RBJ__LowShelfFilter, _p_p_Filters__IIR__RBJ__LowShelfFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__RBJ__BandStopFilter, _p_p_Filters__IIR__RBJ__BandStopFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__RBJ__BandPass2Filter, _p_p_Filters__IIR__RBJ__BandPass2FilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__Legendre__BandStopFilter, _p_p_Filters__IIR__Legendre__BandStopFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__ChebyshevI__HighShelfFilter, _p_p_Filters__IIR__ChebyshevI__HighShelfFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__ChebyshevI__LowShelfFilter, _p_p_Filters__IIR__ChebyshevI__LowShelfFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__ChebyshevI__BandShelfFilter, _p_p_Filters__IIR__ChebyshevI__BandShelfFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__ChebyshevI__BandStopFilter, _p_p_Filters__IIR__ChebyshevI__BandStopFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__ChebyshevII__HighShelfFilter, _p_p_Filters__IIR__ChebyshevII__HighShelfFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__ChebyshevII__LowShelfFilter, _p_p_Filters__IIR__ChebyshevII__LowShelfFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__ChebyshevII__BandShelfFilter, _p_p_Filters__IIR__ChebyshevII__BandShelfFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__ChebyshevII__BandStopFilter, _p_p_Filters__IIR__ChebyshevII__BandStopFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__Butterworth__BandShelfFilter, _p_p_Filters__IIR__Butterworth__BandShelfFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__Butterworth__HighShelfFilter, _p_p_Filters__IIR__Butterworth__HighShelfFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__Butterworth__LowShelfFilter, _p_p_Filters__IIR__Butterworth__LowShelfFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__BiquadFilter, _p_p_Filters__BiquadFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__Bessel__BandStopFilter, _p_p_Filters__IIR__Bessel__BandStopFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__Butterworth__BandStopFilter, _p_p_Filters__IIR__Butterworth__BandStopFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__BiquadTransposedTypeIICascade, _p_p_Filters__BiquadTransposedTypeIICascadeTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__BiquadTransposedTypeICascade, _p_p_Filters__BiquadTransposedTypeICascadeTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__BiquadTypeIICascade, _p_p_Filters__BiquadTypeIICascadeTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__BiquadTypeICascade, _p_p_Filters__BiquadTypeICascadeTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter, _p_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__BiquadTransposedTypeI, _p_p_Filters__BiquadTransposedTypeITo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__BiquadTypeI, _p_p_Filters__BiquadTypeITo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__Biquad__Biquad, _p_p_Filters__IIR__Biquad__BiquadTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter, _p_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_FilterProcessor, 0, 0, 0},  {&_swigt__p_p_Filters__FilterBase, _p_p_Filters__FilterBaseTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter, _p_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter, _p_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter, _p_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter, _p_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter, _p_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilterTo_p_p_FilterProcessor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_FunctionProcessor[] = {  {&_swigt__p_p_FunctionProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_float[] = {  {&_swigt__p_p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_double_t[] = {  {&_swigt__p_std__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_float_t[] = {  {&_swigt__p_std__complexT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__gslice[] = {  {&_swigt__p_std__gslice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__gslice_arrayT_float_t[] = {  {&_swigt__p_std__gslice_arrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__indirect_arrayT_float_t[] = {  {&_swigt__p_std__indirect_arrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_MonoProcessor_p_t[] = {  {&_swigt__p_std__listT_MonoProcessor_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_SoundProcessor_p_t[] = {  {&_swigt__p_std__listT_SoundProcessor_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_StereoProcessor_p_t[] = {  {&_swigt__p_std__listT_StereoProcessor_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_std__shared_ptrT_Port_t_t[] = {  {&_swigt__p_std__listT_std__shared_ptrT_Port_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_MonoProcessor_p_t[] = {  {&_swigt__p_std__mapT_std__string_MonoProcessor_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_Port_p_t[] = {  {&_swigt__p_std__mapT_std__string_Port_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_SoundProcessor_p_t[] = {  {&_swigt__p_std__mapT_std__string_SoundProcessor_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_StereoProcessor_p_t[] = {  {&_swigt__p_std__mapT_std__string_StereoProcessor_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mask_arrayT_float_t[] = {  {&_swigt__p_std__mask_arrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_double_t[] = {  {&_swigt__p_std__numeric_limitsT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_float_t[] = {  {&_swigt__p_std__numeric_limitsT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_int_t[] = {  {&_swigt__p_std__numeric_limitsT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_long_long_t[] = {  {&_swigt__p_std__numeric_limitsT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_long_t[] = {  {&_swigt__p_std__numeric_limitsT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_short_t[] = {  {&_swigt__p_std__numeric_limitsT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_int_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_long_long_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_long_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_short_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__slice[] = {  {&_swigt__p_std__slice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__slice_arrayT_float_t[] = {  {&_swigt__p_std__slice_arrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__valarrayT_float_t[] = {  {&_swigt__p_std__valarrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Filters__BiquadFilter_p_t[] = {  {&_swigt__p_std__vectorT_Filters__BiquadFilter_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Filters__BiquadSection_t[] = {  {&_swigt__p_std__vectorT_Filters__BiquadSection_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Filters__BiquadTransposedTypeII_t[] = {  {&_swigt__p_std__vectorT_Filters__BiquadTransposedTypeII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Filters__BiquadTransposedTypeI_t[] = {  {&_swigt__p_std__vectorT_Filters__BiquadTransposedTypeI_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Filters__BiquadTypeII_t[] = {  {&_swigt__p_std__vectorT_Filters__BiquadTypeII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Filters__BiquadTypeI_t[] = {  {&_swigt__p_std__vectorT_Filters__BiquadTypeI_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_MonoProcessor_p_t[] = {  {&_swigt__p_std__vectorT_MonoProcessor_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_OscillatorProcessor_p_t[] = {  {&_swigt__p_std__vectorT_OscillatorProcessor_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_SoundProcessor_p_t[] = {  {&_swigt__p_std__vectorT_SoundProcessor_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_StereoProcessor_p_t[] = {  {&_swigt__p_std__vectorT_StereoProcessor_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t[] = {  {&_swigt__p_std__vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_t[] = {  {&_swigt__p_std__vectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__complexT_double_t_t[] = {  {&_swigt__p_std__vectorT_std__complexT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__complexT_float_t_t[] = {  {&_swigt__p_std__vectorT_std__complexT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_double_t[] = {  {&_swigt__p_std__vector_iteratorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_float_t[] = {  {&_swigt__p_std__vector_iteratorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_std__complexT_double_t_t[] = {  {&_swigt__p_std__vector_iteratorT_std__complexT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_std__complexT_float_t_t[] = {  {&_swigt__p_std__vector_iteratorT_std__complexT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_AmplifierProcessor,
  _swigc__p_Dsp__Bessel__BandPassT_32_t,
  _swigc__p_Dsp__Bessel__BandStopT_32_t,
  _swigc__p_Dsp__Bessel__HighPassT_32_t,
  _swigc__p_Dsp__Bessel__LowPassT_32_t,
  _swigc__p_Dsp__Butterworth__BandPassT_32_t,
  _swigc__p_Dsp__Butterworth__BandShelfT_32_t,
  _swigc__p_Dsp__Butterworth__BandStopT_32_t,
  _swigc__p_Dsp__Butterworth__HighPassT_32_t,
  _swigc__p_Dsp__Butterworth__HighShelfT_32_t,
  _swigc__p_Dsp__Butterworth__LowPassT_32_t,
  _swigc__p_Dsp__Butterworth__LowShelfT_32_t,
  _swigc__p_Dsp__ChebyshevII__BandPassT_32_t,
  _swigc__p_Dsp__ChebyshevII__BandShelfT_32_t,
  _swigc__p_Dsp__ChebyshevII__BandStopT_32_t,
  _swigc__p_Dsp__ChebyshevII__HighPassT_32_t,
  _swigc__p_Dsp__ChebyshevII__HighShelfT_32_t,
  _swigc__p_Dsp__ChebyshevII__LowPassT_32_t,
  _swigc__p_Dsp__ChebyshevII__LowShelfT_32_t,
  _swigc__p_Dsp__ChebyshevI__BandPassT_32_t,
  _swigc__p_Dsp__ChebyshevI__BandShelfT_32_t,
  _swigc__p_Dsp__ChebyshevI__BandStopT_32_t,
  _swigc__p_Dsp__ChebyshevI__HighPassT_32_t,
  _swigc__p_Dsp__ChebyshevI__HighShelfT_32_t,
  _swigc__p_Dsp__ChebyshevI__LowPassT_32_t,
  _swigc__p_Dsp__ChebyshevI__LowShelfT_32_t,
  _swigc__p_Dsp__Legendre__BandPassT_32_t,
  _swigc__p_Dsp__Legendre__BandStopT_32_t,
  _swigc__p_Dsp__Legendre__HighPassT_32_t,
  _swigc__p_Dsp__Legendre__LowPassT_32_t,
  _swigc__p_Dsp__RBJ__AllPass,
  _swigc__p_Dsp__RBJ__BandPass1,
  _swigc__p_Dsp__RBJ__BandPass2,
  _swigc__p_Dsp__RBJ__BandShelf,
  _swigc__p_Dsp__RBJ__BandStop,
  _swigc__p_Dsp__RBJ__HighPass,
  _swigc__p_Dsp__RBJ__HighShelf,
  _swigc__p_Dsp__RBJ__LowPass,
  _swigc__p_Dsp__RBJ__LowShelf,
  _swigc__p_FilterProcessor,
  _swigc__p_Filters__BiquadFilter,
  _swigc__p_Filters__BiquadFilterCascader,
  _swigc__p_Filters__BiquadParallelFilters,
  _swigc__p_Filters__BiquadSection,
  _swigc__p_Filters__BiquadTransposedTypeI,
  _swigc__p_Filters__BiquadTransposedTypeICascade,
  _swigc__p_Filters__BiquadTransposedTypeII,
  _swigc__p_Filters__BiquadTransposedTypeIICascade,
  _swigc__p_Filters__BiquadTypeI,
  _swigc__p_Filters__BiquadTypeICascade,
  _swigc__p_Filters__BiquadTypeII,
  _swigc__p_Filters__BiquadTypeIICascade,
  _swigc__p_Filters__FilterBase,
  _swigc__p_Filters__FilterCoefficients,
  _swigc__p_Filters__IIR__Bessel__BandPassFilter,
  _swigc__p_Filters__IIR__Bessel__BandStopFilter,
  _swigc__p_Filters__IIR__Bessel__HighPassFilter,
  _swigc__p_Filters__IIR__Bessel__LowPassFilter,
  _swigc__p_Filters__IIR__Biquad__Biquad,
  _swigc__p_Filters__IIR__Biquad__Parameters,
  _swigc__p_Filters__IIR__ButterworthFilters__ButterworthBandPassCascadeFilter,
  _swigc__p_Filters__IIR__ButterworthFilters__ButterworthBandPassFilter12db,
  _swigc__p_Filters__IIR__ButterworthFilters__ButterworthBandStopCascadeFilter,
  _swigc__p_Filters__IIR__ButterworthFilters__ButterworthBandStopFilter12db,
  _swigc__p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassCascadeFilter,
  _swigc__p_Filters__IIR__ButterworthFilters__ButterworthDampedLowPassFilter12db,
  _swigc__p_Filters__IIR__ButterworthFilters__ButterworthHighPassCascadeFilter,
  _swigc__p_Filters__IIR__ButterworthFilters__ButterworthHighPassFilter12db,
  _swigc__p_Filters__IIR__ButterworthFilters__ButterworthLowPassCascadeFilter,
  _swigc__p_Filters__IIR__ButterworthFilters__ButterworthLowPassFilter12db,
  _swigc__p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassCascadeFilter,
  _swigc__p_Filters__IIR__ButterworthFilters__ButterworthResonantLowPassFilter12db,
  _swigc__p_Filters__IIR__Butterworth__BandPassFilter,
  _swigc__p_Filters__IIR__Butterworth__BandShelfFilter,
  _swigc__p_Filters__IIR__Butterworth__BandStopFilter,
  _swigc__p_Filters__IIR__Butterworth__HighPassFilter,
  _swigc__p_Filters__IIR__Butterworth__HighShelfFilter,
  _swigc__p_Filters__IIR__Butterworth__LowPassFilter,
  _swigc__p_Filters__IIR__Butterworth__LowShelfFilter,
  _swigc__p_Filters__IIR__ChebyshevFilters__ChebyshevIILowPassFilter12db,
  _swigc__p_Filters__IIR__ChebyshevFilters__ChebyshevILowPassFilter12db,
  _swigc__p_Filters__IIR__ChebyshevII__BandPassFilter,
  _swigc__p_Filters__IIR__ChebyshevII__BandShelfFilter,
  _swigc__p_Filters__IIR__ChebyshevII__BandStopFilter,
  _swigc__p_Filters__IIR__ChebyshevII__HighPassFilter,
  _swigc__p_Filters__IIR__ChebyshevII__HighShelfFilter,
  _swigc__p_Filters__IIR__ChebyshevII__LowPassFilter,
  _swigc__p_Filters__IIR__ChebyshevII__LowShelfFilter,
  _swigc__p_Filters__IIR__ChebyshevI__BandPassFilter,
  _swigc__p_Filters__IIR__ChebyshevI__BandShelfFilter,
  _swigc__p_Filters__IIR__ChebyshevI__BandStopFilter,
  _swigc__p_Filters__IIR__ChebyshevI__HighPassFilter,
  _swigc__p_Filters__IIR__ChebyshevI__HighShelfFilter,
  _swigc__p_Filters__IIR__ChebyshevI__LowPassFilter,
  _swigc__p_Filters__IIR__ChebyshevI__LowShelfFilter,
  _swigc__p_Filters__IIR__Legendre__BandPassFilter,
  _swigc__p_Filters__IIR__Legendre__BandStopFilter,
  _swigc__p_Filters__IIR__Legendre__HighPassFilter,
  _swigc__p_Filters__IIR__Legendre__LowPassFilter,
  _swigc__p_Filters__IIR__Nigel__Biquad,
  _swigc__p_Filters__IIR__RBJFilters__RBJAllPassFilter,
  _swigc__p_Filters__IIR__RBJFilters__RBJBandPassFilter,
  _swigc__p_Filters__IIR__RBJFilters__RBJBandStopFilter,
  _swigc__p_Filters__IIR__RBJFilters__RBJBiquadFilter,
  _swigc__p_Filters__IIR__RBJFilters__RBJHighPassFilter,
  _swigc__p_Filters__IIR__RBJFilters__RBJHighShelfFilter,
  _swigc__p_Filters__IIR__RBJFilters__RBJLowPassFilter,
  _swigc__p_Filters__IIR__RBJFilters__RBJLowShelfFilter,
  _swigc__p_Filters__IIR__RBJFilters__RBJPeakFilter,
  _swigc__p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter,
  _swigc__p_Filters__IIR__RBJ__AllPassFilter,
  _swigc__p_Filters__IIR__RBJ__BandPass1Filter,
  _swigc__p_Filters__IIR__RBJ__BandPass2Filter,
  _swigc__p_Filters__IIR__RBJ__BandShelfFilter,
  _swigc__p_Filters__IIR__RBJ__BandStopFilter,
  _swigc__p_Filters__IIR__RBJ__HighPassFilter,
  _swigc__p_Filters__IIR__RBJ__HighShelfFilter,
  _swigc__p_Filters__IIR__RBJ__LowPassFilter,
  _swigc__p_Filters__IIR__RBJ__LowShelfFilter,
  _swigc__p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter,
  _swigc__p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter,
  _swigc__p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter,
  _swigc__p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter,
  _swigc__p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter,
  _swigc__p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter,
  _swigc__p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter,
  _swigc__p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter,
  _swigc__p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter,
  _swigc__p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter,
  _swigc__p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter,
  _swigc__p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter,
  _swigc__p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter,
  _swigc__p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter,
  _swigc__p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter,
  _swigc__p_FunctionProcessor,
  _swigc__p_GeneratorProcessor,
  _swigc__p_MixerProcessor,
  _swigc__p_MonoAdderOperatorProcessor,
  _swigc__p_MonoBlendOperatorProcessor,
  _swigc__p_MonoCascadeOperatorProcessor,
  _swigc__p_MonoCascadeProcessor,
  _swigc__p_MonoDownsampleProcessor,
  _swigc__p_MonoFXProcessor,
  _swigc__p_MonoModulatorOperatorProcessor,
  _swigc__p_MonoMultiplierOperatorProcessor,
  _swigc__p_MonoOperatorProcessor,
  _swigc__p_MonoOversampleProcessor,
  _swigc__p_MonoProcessor,
  _swigc__p_MonoSubtractorOperatorProcessor,
  _swigc__p_MonoUpsampleProcessor,
  _swigc__p_OperatorProcessor,
  _swigc__p_OscillatorProcessor,
  _swigc__p_Parameter2Processor,
  _swigc__p_Port,
  _swigc__p_PortMap,
  _swigc__p_Ports,
  _swigc__p_Random,
  _swigc__p_SignalSinkProcessor,
  _swigc__p_SignalSourceProcessor,
  _swigc__p_SoundProcessor,
  _swigc__p_SpectrumProcessor,
  _swigc__p_Std__RandomMersenne,
  _swigc__p_StereoAmplifierProcessor,
  _swigc__p_StereoCascadeProcessor,
  _swigc__p_StereoFXProcessor,
  _swigc__p_StereoFilterProcessor,
  _swigc__p_StereoFunctionProcessor,
  _swigc__p_StereoGeneratorProcessor,
  _swigc__p_StereoOscillatorProcessor,
  _swigc__p_StereoProcessor,
  _swigc__p_StereoSplitterProcessor,
  _swigc__p_double,
  _swigc__p_f_float__float,
  _swigc__p_f_r_q_const__float__float,
  _swigc__p_fenv_t,
  _swigc__p_fexcept_t,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_long,
  _swigc__p_long_long,
  _swigc__p_p_AmplifierProcessor,
  _swigc__p_p_FilterProcessor,
  _swigc__p_p_Filters__BiquadFilter,
  _swigc__p_p_Filters__BiquadTransposedTypeI,
  _swigc__p_p_Filters__BiquadTransposedTypeICascade,
  _swigc__p_p_Filters__BiquadTransposedTypeII,
  _swigc__p_p_Filters__BiquadTransposedTypeIICascade,
  _swigc__p_p_Filters__BiquadTypeI,
  _swigc__p_p_Filters__BiquadTypeICascade,
  _swigc__p_p_Filters__BiquadTypeII,
  _swigc__p_p_Filters__BiquadTypeIICascade,
  _swigc__p_p_Filters__FilterBase,
  _swigc__p_p_Filters__IIR__Bessel__BandPassFilter,
  _swigc__p_p_Filters__IIR__Bessel__BandStopFilter,
  _swigc__p_p_Filters__IIR__Bessel__HighPassFilter,
  _swigc__p_p_Filters__IIR__Bessel__LowPassFilter,
  _swigc__p_p_Filters__IIR__Biquad__Biquad,
  _swigc__p_p_Filters__IIR__Butterworth__BandPassFilter,
  _swigc__p_p_Filters__IIR__Butterworth__BandShelfFilter,
  _swigc__p_p_Filters__IIR__Butterworth__BandStopFilter,
  _swigc__p_p_Filters__IIR__Butterworth__HighPassFilter,
  _swigc__p_p_Filters__IIR__Butterworth__HighShelfFilter,
  _swigc__p_p_Filters__IIR__Butterworth__LowPassFilter,
  _swigc__p_p_Filters__IIR__Butterworth__LowShelfFilter,
  _swigc__p_p_Filters__IIR__ChebyshevII__BandPassFilter,
  _swigc__p_p_Filters__IIR__ChebyshevII__BandShelfFilter,
  _swigc__p_p_Filters__IIR__ChebyshevII__BandStopFilter,
  _swigc__p_p_Filters__IIR__ChebyshevII__HighPassFilter,
  _swigc__p_p_Filters__IIR__ChebyshevII__HighShelfFilter,
  _swigc__p_p_Filters__IIR__ChebyshevII__LowPassFilter,
  _swigc__p_p_Filters__IIR__ChebyshevII__LowShelfFilter,
  _swigc__p_p_Filters__IIR__ChebyshevI__BandPassFilter,
  _swigc__p_p_Filters__IIR__ChebyshevI__BandShelfFilter,
  _swigc__p_p_Filters__IIR__ChebyshevI__BandStopFilter,
  _swigc__p_p_Filters__IIR__ChebyshevI__HighPassFilter,
  _swigc__p_p_Filters__IIR__ChebyshevI__HighShelfFilter,
  _swigc__p_p_Filters__IIR__ChebyshevI__LowPassFilter,
  _swigc__p_p_Filters__IIR__ChebyshevI__LowShelfFilter,
  _swigc__p_p_Filters__IIR__Legendre__BandPassFilter,
  _swigc__p_p_Filters__IIR__Legendre__BandStopFilter,
  _swigc__p_p_Filters__IIR__Legendre__HighPassFilter,
  _swigc__p_p_Filters__IIR__Legendre__LowPassFilter,
  _swigc__p_p_Filters__IIR__RBJFilters__RBJAllPassFilter,
  _swigc__p_p_Filters__IIR__RBJFilters__RBJBandPassFilter,
  _swigc__p_p_Filters__IIR__RBJFilters__RBJBandStopFilter,
  _swigc__p_p_Filters__IIR__RBJFilters__RBJBiquadFilter,
  _swigc__p_p_Filters__IIR__RBJFilters__RBJHighPassFilter,
  _swigc__p_p_Filters__IIR__RBJFilters__RBJHighShelfFilter,
  _swigc__p_p_Filters__IIR__RBJFilters__RBJLowPassFilter,
  _swigc__p_p_Filters__IIR__RBJFilters__RBJLowShelfFilter,
  _swigc__p_p_Filters__IIR__RBJFilters__RBJPeakFilter,
  _swigc__p_p_Filters__IIR__RBJFilters__RBJSkirtBandPassFilter,
  _swigc__p_p_Filters__IIR__RBJ__AllPassFilter,
  _swigc__p_p_Filters__IIR__RBJ__BandPass1Filter,
  _swigc__p_p_Filters__IIR__RBJ__BandPass2Filter,
  _swigc__p_p_Filters__IIR__RBJ__BandShelfFilter,
  _swigc__p_p_Filters__IIR__RBJ__BandStopFilter,
  _swigc__p_p_Filters__IIR__RBJ__HighPassFilter,
  _swigc__p_p_Filters__IIR__RBJ__HighShelfFilter,
  _swigc__p_p_Filters__IIR__RBJ__LowPassFilter,
  _swigc__p_p_Filters__IIR__RBJ__LowShelfFilter,
  _swigc__p_p_Filters__IIR__ZolzerFilters__ZolzerAllPass1pFilter,
  _swigc__p_p_Filters__IIR__ZolzerFilters__ZolzerAllPassFilter,
  _swigc__p_p_Filters__IIR__ZolzerFilters__ZolzerBandPassFilter,
  _swigc__p_p_Filters__IIR__ZolzerFilters__ZolzerBiquadFilter,
  _swigc__p_p_Filters__IIR__ZolzerFilters__ZolzerHighPass1pFilter,
  _swigc__p_p_Filters__IIR__ZolzerFilters__ZolzerHighPassFilter,
  _swigc__p_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfBoostFilter,
  _swigc__p_p_Filters__IIR__ZolzerFilters__ZolzerHighShelfCutFilter,
  _swigc__p_p_Filters__IIR__ZolzerFilters__ZolzerLowPass1pFilter,
  _swigc__p_p_Filters__IIR__ZolzerFilters__ZolzerLowPassFilter,
  _swigc__p_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfBoostFilter,
  _swigc__p_p_Filters__IIR__ZolzerFilters__ZolzerLowShelfCutFilter,
  _swigc__p_p_Filters__IIR__ZolzerFilters__ZolzerNotchFilter,
  _swigc__p_p_Filters__IIR__ZolzerFilters__ZolzerPeakBoostFilter,
  _swigc__p_p_Filters__IIR__ZolzerFilters__ZolzerPeakCutFilter,
  _swigc__p_p_FunctionProcessor,
  _swigc__p_p_float,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_std__complexT_double_t,
  _swigc__p_std__complexT_float_t,
  _swigc__p_std__gslice,
  _swigc__p_std__gslice_arrayT_float_t,
  _swigc__p_std__indirect_arrayT_float_t,
  _swigc__p_std__listT_MonoProcessor_p_t,
  _swigc__p_std__listT_SoundProcessor_p_t,
  _swigc__p_std__listT_StereoProcessor_p_t,
  _swigc__p_std__listT_std__shared_ptrT_Port_t_t,
  _swigc__p_std__mapT_std__string_MonoProcessor_p_t,
  _swigc__p_std__mapT_std__string_Port_p_t,
  _swigc__p_std__mapT_std__string_SoundProcessor_p_t,
  _swigc__p_std__mapT_std__string_StereoProcessor_p_t,
  _swigc__p_std__mask_arrayT_float_t,
  _swigc__p_std__numeric_limitsT_double_t,
  _swigc__p_std__numeric_limitsT_float_t,
  _swigc__p_std__numeric_limitsT_int_t,
  _swigc__p_std__numeric_limitsT_long_long_t,
  _swigc__p_std__numeric_limitsT_long_t,
  _swigc__p_std__numeric_limitsT_short_t,
  _swigc__p_std__numeric_limitsT_unsigned_int_t,
  _swigc__p_std__numeric_limitsT_unsigned_long_long_t,
  _swigc__p_std__numeric_limitsT_unsigned_long_t,
  _swigc__p_std__numeric_limitsT_unsigned_short_t,
  _swigc__p_std__slice,
  _swigc__p_std__slice_arrayT_float_t,
  _swigc__p_std__string,
  _swigc__p_std__valarrayT_float_t,
  _swigc__p_std__vectorT_Filters__BiquadFilter_p_t,
  _swigc__p_std__vectorT_Filters__BiquadSection_t,
  _swigc__p_std__vectorT_Filters__BiquadTransposedTypeII_t,
  _swigc__p_std__vectorT_Filters__BiquadTransposedTypeI_t,
  _swigc__p_std__vectorT_Filters__BiquadTypeII_t,
  _swigc__p_std__vectorT_Filters__BiquadTypeI_t,
  _swigc__p_std__vectorT_MonoProcessor_p_t,
  _swigc__p_std__vectorT_OscillatorProcessor_p_t,
  _swigc__p_std__vectorT_SoundProcessor_p_t,
  _swigc__p_std__vectorT_StereoProcessor_p_t,
  _swigc__p_std__vectorT_double_t,
  _swigc__p_std__vectorT_float_t,
  _swigc__p_std__vectorT_std__complexT_double_t_t,
  _swigc__p_std__vectorT_std__complexT_float_t_t,
  _swigc__p_std__vector_iteratorT_double_t,
  _swigc__p_std__vector_iteratorT_float_t,
  _swigc__p_std__vector_iteratorT_std__complexT_double_t_t,
  _swigc__p_std__vector_iteratorT_std__complexT_float_t_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

