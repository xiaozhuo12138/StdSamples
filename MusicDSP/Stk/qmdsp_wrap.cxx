/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  do { if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } } while (0)


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all its bases (recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metamethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows skipping searching metamethod in the given class and immediately going to searching in bases. skip_check
 * is not carried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metamethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result = 0;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_BeatSpectrum swig_types[0]
#define SWIGTYPE_p_CQConfig swig_types[1]
#define SWIGTYPE_p_ChangeDFConfig swig_types[2]
#define SWIGTYPE_p_ChangeDetectionFunction swig_types[3]
#define SWIGTYPE_p_ChromaConfig swig_types[4]
#define SWIGTYPE_p_ChromaVector swig_types[5]
#define SWIGTYPE_p_Chromagram swig_types[6]
#define SWIGTYPE_p_ClusterMeltSegmenter swig_types[7]
#define SWIGTYPE_p_ClusterMeltSegmenterParams swig_types[8]
#define SWIGTYPE_p_ConstantQ swig_types[9]
#define SWIGTYPE_p_Correlation swig_types[10]
#define SWIGTYPE_p_CosineDistance swig_types[11]
#define SWIGTYPE_p_DCT swig_types[12]
#define SWIGTYPE_p_DFConfig swig_types[13]
#define SWIGTYPE_p_DFProcConfig swig_types[14]
#define SWIGTYPE_p_DFProcess swig_types[15]
#define SWIGTYPE_p_Decimator swig_types[16]
#define SWIGTYPE_p_DecimatorB swig_types[17]
#define SWIGTYPE_p_DetectionFunction swig_types[18]
#define SWIGTYPE_p_DownBeat swig_types[19]
#define SWIGTYPE_p_FFT swig_types[20]
#define SWIGTYPE_p_FFTReal swig_types[21]
#define SWIGTYPE_p_FiltFilt swig_types[22]
#define SWIGTYPE_p_Filter swig_types[23]
#define SWIGTYPE_p_Filter__Parameters swig_types[24]
#define SWIGTYPE_p_Framer swig_types[25]
#define SWIGTYPE_p_KLDivergence swig_types[26]
#define SWIGTYPE_p_KaiserWindow swig_types[27]
#define SWIGTYPE_p_KaiserWindow__Parameters swig_types[28]
#define SWIGTYPE_p_MFCC swig_types[29]
#define SWIGTYPE_p_MFCCConfig swig_types[30]
#define SWIGTYPE_p_MathUtilities swig_types[31]
#define SWIGTYPE_p_NSUtility swig_types[32]
#define SWIGTYPE_p_PPWinThresh swig_types[33]
#define SWIGTYPE_p_PPickParams swig_types[34]
#define SWIGTYPE_p_PeakPicking swig_types[35]
#define SWIGTYPE_p_PhaseVocoder swig_types[36]
#define SWIGTYPE_p_Pitch swig_types[37]
#define SWIGTYPE_p_QFitThresh swig_types[38]
#define SWIGTYPE_p_Resampler swig_types[39]
#define SWIGTYPE_p_Segment swig_types[40]
#define SWIGTYPE_p_Segmentation swig_types[41]
#define SWIGTYPE_p_Segmenter swig_types[42]
#define SWIGTYPE_p_SincWindow swig_types[43]
#define SWIGTYPE_p_TCSGram swig_types[44]
#define SWIGTYPE_p_TCSVector swig_types[45]
#define SWIGTYPE_p_TPolyFit swig_types[46]
#define SWIGTYPE_p_TTParams swig_types[47]
#define SWIGTYPE_p_TempoTrack swig_types[48]
#define SWIGTYPE_p_TempoTrackV2 swig_types[49]
#define SWIGTYPE_p_TonalEstimator swig_types[50]
#define SWIGTYPE_p_Wavelet swig_types[51]
#define SWIGTYPE_p_WinThresh swig_types[52]
#define SWIGTYPE_p__model_t swig_types[53]
#define SWIGTYPE_p_double swig_types[54]
#define SWIGTYPE_p_feature_types swig_types[55]
#define SWIGTYPE_p_float swig_types[56]
#define SWIGTYPE_p_int swig_types[57]
#define SWIGTYPE_p_int64_t swig_types[58]
#define SWIGTYPE_p_p_double swig_types[59]
#define SWIGTYPE_p_p_p_double swig_types[60]
#define SWIGTYPE_p_segment_t swig_types[61]
#define SWIGTYPE_p_segmentation_t swig_types[62]
#define SWIGTYPE_p_size_t swig_types[63]
#define SWIGTYPE_p_std__complexT_double_t swig_types[64]
#define SWIGTYPE_p_std__string swig_types[65]
#define SWIGTYPE_p_std__valarrayT_double_t swig_types[66]
#define SWIGTYPE_p_std__vectorT_Segment_t swig_types[67]
#define SWIGTYPE_p_std__vectorT_double_t swig_types[68]
#define SWIGTYPE_p_std__vectorT_int_t swig_types[69]
#define SWIGTYPE_p_std__vectorT_std__pairT_long_TCSVector_t_t swig_types[70]
#define SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t swig_types[71]
#define SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t swig_types[72]
static swig_type_info *swig_types[74];
static swig_module_info swig_module = {swig_types, 73, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "qmdsp"
#define SWIG_init      luaopen_qmdsp
#define SWIG_init_user luaopen_qmdsp_user

#define SWIG_LUACODE   luaopen_qmdsp_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include "base/KaiserWindow.h"
#include "base/Pitch.h"
#include "base/SincWindow.h"
#include "base/Window.h"
#include "base/Restrict.h"
#include "dsp/chromagram/Chromagram.h"
#include "dsp/chromagram/ConstantQ.h"
//#include "dsp/keydetection/GetKeyMode.h"
#include "dsp/mfcc/MFCC.h"
#include "dsp/onsets/DetectionFunction.h"
#include "dsp/onsets/PeakPicking.h"
#include "dsp/phasevocoder/PhaseVocoder.h"
#include "dsp/rateconversion/Decimator.h"
#include "dsp/rateconversion/DecimatorB.h"
#include "dsp/rateconversion/Resampler.h"
#include "dsp/rhythm/BeatSpectrum.h"
#include "dsp/segmentation/ClusterMeltSegmenter.h"
#include "dsp/segmentation/Segmenter.h"
#include "dsp/segmentation/cluster_melt.h"
#include "dsp/segmentation/cluster_segmenter.h"
#include "dsp/segmentation/segment.h"
#include "dsp/signalconditioning/DFProcess.h"
#include "dsp/signalconditioning/FiltFilt.h"
#include "dsp/signalconditioning/Filter.h"
#include "dsp/signalconditioning/Framer.h"
#include "dsp/tempotracking/DownBeat.h"
#include "dsp/tempotracking/TempoTrack.h"
#include "dsp/tempotracking/TempoTrackV2.h"
#include "dsp/tonal/ChangeDetectionFunction.h"
#include "dsp/tonal/TCSgram.h"
#include "dsp/tonal/TonalEstimator.h"
#include "dsp/transforms/DCT.h"
#include "dsp/transforms/FFT.h"
#include "dsp/wavelet/Wavelet.h"
#include "hmm/hmm.h"
#include "maths/Correlation.h"
#include "maths/CosineDistance.h"
#include "maths/KLDivergence.h"
#include "maths/MathAliases.h"
#include "maths/MathUtilities.h"
#include "maths/MedianFilter.h"
#include "maths/Polyfit.h"
#include "maths/nan-inf.h"
#include "maths/pca/pca.h"


#include <vector>


#include <typeinfo>
#include <stdexcept>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <typeinfo>
#include <stdexcept>

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_KaiserWindow(lua_State* L) {
  int SWIG_arg = 0;
  KaiserWindow::Parameters arg1 ;
  KaiserWindow::Parameters *argp1 ;
  KaiserWindow *result = 0 ;
  
  SWIG_check_num_args("KaiserWindow::KaiserWindow",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("KaiserWindow::KaiserWindow",1,"KaiserWindow::Parameters");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_KaiserWindow__Parameters,0))){
    SWIG_fail_ptr("new_KaiserWindow",1,SWIGTYPE_p_KaiserWindow__Parameters);
  }
  arg1 = *argp1;
  
  result = (KaiserWindow *)new KaiserWindow(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KaiserWindow,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KaiserWindow_byTransitionWidth(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  SwigValueWrapper< KaiserWindow > result;
  
  SWIG_check_num_args("KaiserWindow::byTransitionWidth",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KaiserWindow::byTransitionWidth",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KaiserWindow::byTransitionWidth",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = KaiserWindow::byTransitionWidth(arg1,arg2);
  {
    KaiserWindow * resultptr = new KaiserWindow((const KaiserWindow &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_KaiserWindow,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KaiserWindow_byBandwidth(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  SwigValueWrapper< KaiserWindow > result;
  
  SWIG_check_num_args("KaiserWindow::byBandwidth",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KaiserWindow::byBandwidth",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KaiserWindow::byBandwidth",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KaiserWindow::byBandwidth",3,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = KaiserWindow::byBandwidth(arg1,arg2,arg3);
  {
    KaiserWindow * resultptr = new KaiserWindow((const KaiserWindow &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_KaiserWindow,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KaiserWindow_parametersForTransitionWidth(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  KaiserWindow::Parameters result;
  
  SWIG_check_num_args("KaiserWindow::parametersForTransitionWidth",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KaiserWindow::parametersForTransitionWidth",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KaiserWindow::parametersForTransitionWidth",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = KaiserWindow::parametersForTransitionWidth(arg1,arg2);
  {
    KaiserWindow::Parameters * resultptr = new KaiserWindow::Parameters((const KaiserWindow::Parameters &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_KaiserWindow__Parameters,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KaiserWindow_parametersForBandwidth(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  KaiserWindow::Parameters result;
  
  SWIG_check_num_args("KaiserWindow::parametersForBandwidth",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KaiserWindow::parametersForBandwidth",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KaiserWindow::parametersForBandwidth",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KaiserWindow::parametersForBandwidth",3,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = KaiserWindow::parametersForBandwidth(arg1,arg2,arg3);
  {
    KaiserWindow::Parameters * resultptr = new KaiserWindow::Parameters((const KaiserWindow::Parameters &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_KaiserWindow__Parameters,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KaiserWindow_getLength(lua_State* L) {
  int SWIG_arg = 0;
  KaiserWindow *arg1 = (KaiserWindow *) 0 ;
  int result;
  
  SWIG_check_num_args("KaiserWindow::getLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KaiserWindow::getLength",1,"KaiserWindow const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KaiserWindow,0))){
    SWIG_fail_ptr("KaiserWindow_getLength",1,SWIGTYPE_p_KaiserWindow);
  }
  
  result = (int)((KaiserWindow const *)arg1)->getLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KaiserWindow_getWindow(lua_State* L) {
  int SWIG_arg = 0;
  KaiserWindow *arg1 = (KaiserWindow *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("KaiserWindow::getWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KaiserWindow::getWindow",1,"KaiserWindow const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KaiserWindow,0))){
    SWIG_fail_ptr("KaiserWindow_getWindow",1,SWIGTYPE_p_KaiserWindow);
  }
  
  result = (double *)((KaiserWindow const *)arg1)->getWindow();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KaiserWindow_cut__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KaiserWindow *arg1 = (KaiserWindow *) 0 ;
  double *arg2 = (double *) 0 ;
  
  SWIG_check_num_args("KaiserWindow::cut",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KaiserWindow::cut",1,"KaiserWindow const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KaiserWindow::cut",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KaiserWindow,0))){
    SWIG_fail_ptr("KaiserWindow_cut",1,SWIGTYPE_p_KaiserWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("KaiserWindow_cut",2,SWIGTYPE_p_double);
  }
  
  ((KaiserWindow const *)arg1)->cut(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KaiserWindow_cut__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KaiserWindow *arg1 = (KaiserWindow *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  SWIG_check_num_args("KaiserWindow::cut",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KaiserWindow::cut",1,"KaiserWindow const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KaiserWindow::cut",2,"double const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("KaiserWindow::cut",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KaiserWindow,0))){
    SWIG_fail_ptr("KaiserWindow_cut",1,SWIGTYPE_p_KaiserWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("KaiserWindow_cut",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("KaiserWindow_cut",3,SWIGTYPE_p_double);
  }
  
  ((KaiserWindow const *)arg1)->cut((double const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KaiserWindow_cut(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KaiserWindow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_KaiserWindow_cut__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KaiserWindow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_KaiserWindow_cut__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'KaiserWindow_cut'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KaiserWindow::cut(double *) const\n"
    "    KaiserWindow::cut(double const *,double *) const\n");
  lua_error(L);return 0;
}


static void swig_delete_KaiserWindow(void *obj) {
KaiserWindow *arg1 = (KaiserWindow *) obj;
delete arg1;
}
static int _proxy__wrap_new_KaiserWindow(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_KaiserWindow);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_KaiserWindow_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_KaiserWindow_methods[]= {
    { "getLength", _wrap_KaiserWindow_getLength},
    { "getWindow", _wrap_KaiserWindow_getWindow},
    { "cut", _wrap_KaiserWindow_cut},
    {0,0}
};
static swig_lua_method swig_KaiserWindow_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_KaiserWindow_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_KaiserWindow_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_KaiserWindow_Sf_SwigStatic_methods[]= {
    { "byTransitionWidth", _wrap_KaiserWindow_byTransitionWidth},
    { "byBandwidth", _wrap_KaiserWindow_byBandwidth},
    { "parametersForTransitionWidth", _wrap_KaiserWindow_parametersForTransitionWidth},
    { "parametersForBandwidth", _wrap_KaiserWindow_parametersForBandwidth},
    {0,0}
};
static swig_lua_class* swig_KaiserWindow_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_KaiserWindow_Sf_SwigStatic = {
    "KaiserWindow",
    swig_KaiserWindow_Sf_SwigStatic_methods,
    swig_KaiserWindow_Sf_SwigStatic_attributes,
    swig_KaiserWindow_Sf_SwigStatic_constants,
    swig_KaiserWindow_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_KaiserWindow_bases[] = {0};
static const char *swig_KaiserWindow_base_names[] = {0};
static swig_lua_class _wrap_class_KaiserWindow = { "KaiserWindow", "KaiserWindow", &SWIGTYPE_p_KaiserWindow,_proxy__wrap_new_KaiserWindow, swig_delete_KaiserWindow, swig_KaiserWindow_methods, swig_KaiserWindow_attributes, &swig_KaiserWindow_Sf_SwigStatic, swig_KaiserWindow_meta, swig_KaiserWindow_bases, swig_KaiserWindow_base_names };

static int _wrap_Pitch_getFrequencyForPitch__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  SWIG_check_num_args("Pitch::getFrequencyForPitch",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Pitch::getFrequencyForPitch",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pitch::getFrequencyForPitch",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Pitch::getFrequencyForPitch",3,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (float)Pitch::getFrequencyForPitch(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pitch_getFrequencyForPitch__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("Pitch::getFrequencyForPitch",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Pitch::getFrequencyForPitch",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Pitch::getFrequencyForPitch",2,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)Pitch::getFrequencyForPitch(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pitch_getFrequencyForPitch__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float result;
  
  SWIG_check_num_args("Pitch::getFrequencyForPitch",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Pitch::getFrequencyForPitch",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (float)Pitch::getFrequencyForPitch(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pitch_getFrequencyForPitch(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_Pitch_getFrequencyForPitch__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Pitch_getFrequencyForPitch__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Pitch_getFrequencyForPitch__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Pitch_getFrequencyForPitch'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Pitch::getFrequencyForPitch(int,float,float)\n"
    "    Pitch::getFrequencyForPitch(int,float)\n"
    "    Pitch::getFrequencyForPitch(int)\n");
  lua_error(L);return 0;
}


static int _wrap_Pitch_getPitchForFrequency__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  int result;
  
  SWIG_check_num_args("Pitch::getPitchForFrequency",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Pitch::getPitchForFrequency",1,"float");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pitch::getPitchForFrequency",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Pitch::getPitchForFrequency",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Pitch_getPitchForFrequency",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (int)Pitch::getPitchForFrequency(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pitch_getPitchForFrequency__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float *arg2 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("Pitch::getPitchForFrequency",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Pitch::getPitchForFrequency",1,"float");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Pitch::getPitchForFrequency",2,"float *");
  arg1 = (float)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Pitch_getPitchForFrequency",2,SWIGTYPE_p_float);
  }
  
  result = (int)Pitch::getPitchForFrequency(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pitch_getPitchForFrequency__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  int result;
  
  SWIG_check_num_args("Pitch::getPitchForFrequency",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Pitch::getPitchForFrequency",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (int)Pitch::getPitchForFrequency(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pitch_getPitchForFrequency(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_Pitch_getPitchForFrequency__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Pitch_getPitchForFrequency__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Pitch_getPitchForFrequency__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Pitch_getPitchForFrequency'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Pitch::getPitchForFrequency(float,float *,float)\n"
    "    Pitch::getPitchForFrequency(float,float *)\n"
    "    Pitch::getPitchForFrequency(float)\n");
  lua_error(L);return 0;
}


static int _wrap_new_Pitch(lua_State* L) {
  int SWIG_arg = 0;
  Pitch *result = 0 ;
  
  SWIG_check_num_args("Pitch::Pitch",0,0)
  result = (Pitch *)new Pitch();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Pitch,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Pitch(void *obj) {
Pitch *arg1 = (Pitch *) obj;
delete arg1;
}
static int _proxy__wrap_new_Pitch(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Pitch);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Pitch_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Pitch_methods[]= {
    {0,0}
};
static swig_lua_method swig_Pitch_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Pitch_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Pitch_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Pitch_Sf_SwigStatic_methods[]= {
    { "getFrequencyForPitch", _wrap_Pitch_getFrequencyForPitch},
    { "getPitchForFrequency", _wrap_Pitch_getPitchForFrequency},
    {0,0}
};
static swig_lua_class* swig_Pitch_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Pitch_Sf_SwigStatic = {
    "Pitch",
    swig_Pitch_Sf_SwigStatic_methods,
    swig_Pitch_Sf_SwigStatic_attributes,
    swig_Pitch_Sf_SwigStatic_constants,
    swig_Pitch_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Pitch_bases[] = {0};
static const char *swig_Pitch_base_names[] = {0};
static swig_lua_class _wrap_class_Pitch = { "Pitch", "Pitch", &SWIGTYPE_p_Pitch,_proxy__wrap_new_Pitch, swig_delete_Pitch, swig_Pitch_methods, swig_Pitch_attributes, &swig_Pitch_Sf_SwigStatic, swig_Pitch_meta, swig_Pitch_bases, swig_Pitch_base_names };

static int _wrap_new_SincWindow(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  SincWindow *result = 0 ;
  
  SWIG_check_num_args("SincWindow::SincWindow",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SincWindow::SincWindow",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SincWindow::SincWindow",2,"double");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (SincWindow *)new SincWindow(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SincWindow,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SincWindow_getLength(lua_State* L) {
  int SWIG_arg = 0;
  SincWindow *arg1 = (SincWindow *) 0 ;
  int result;
  
  SWIG_check_num_args("SincWindow::getLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SincWindow::getLength",1,"SincWindow const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SincWindow,0))){
    SWIG_fail_ptr("SincWindow_getLength",1,SWIGTYPE_p_SincWindow);
  }
  
  result = (int)((SincWindow const *)arg1)->getLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SincWindow_getWindow(lua_State* L) {
  int SWIG_arg = 0;
  SincWindow *arg1 = (SincWindow *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("SincWindow::getWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SincWindow::getWindow",1,"SincWindow const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SincWindow,0))){
    SWIG_fail_ptr("SincWindow_getWindow",1,SWIGTYPE_p_SincWindow);
  }
  
  result = (double *)((SincWindow const *)arg1)->getWindow();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SincWindow_cut__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SincWindow *arg1 = (SincWindow *) 0 ;
  double *arg2 = (double *) 0 ;
  
  SWIG_check_num_args("SincWindow::cut",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SincWindow::cut",1,"SincWindow const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SincWindow::cut",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SincWindow,0))){
    SWIG_fail_ptr("SincWindow_cut",1,SWIGTYPE_p_SincWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("SincWindow_cut",2,SWIGTYPE_p_double);
  }
  
  ((SincWindow const *)arg1)->cut(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SincWindow_cut__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SincWindow *arg1 = (SincWindow *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  SWIG_check_num_args("SincWindow::cut",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SincWindow::cut",1,"SincWindow const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SincWindow::cut",2,"double const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SincWindow::cut",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SincWindow,0))){
    SWIG_fail_ptr("SincWindow_cut",1,SWIGTYPE_p_SincWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("SincWindow_cut",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("SincWindow_cut",3,SWIGTYPE_p_double);
  }
  
  ((SincWindow const *)arg1)->cut((double const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SincWindow_cut(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SincWindow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SincWindow_cut__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SincWindow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SincWindow_cut__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SincWindow_cut'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SincWindow::cut(double *) const\n"
    "    SincWindow::cut(double const *,double *) const\n");
  lua_error(L);return 0;
}


static void swig_delete_SincWindow(void *obj) {
SincWindow *arg1 = (SincWindow *) obj;
delete arg1;
}
static int _proxy__wrap_new_SincWindow(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SincWindow);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SincWindow_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SincWindow_methods[]= {
    { "getLength", _wrap_SincWindow_getLength},
    { "getWindow", _wrap_SincWindow_getWindow},
    { "cut", _wrap_SincWindow_cut},
    {0,0}
};
static swig_lua_method swig_SincWindow_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SincWindow_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SincWindow_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SincWindow_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SincWindow_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SincWindow_Sf_SwigStatic = {
    "SincWindow",
    swig_SincWindow_Sf_SwigStatic_methods,
    swig_SincWindow_Sf_SwigStatic_attributes,
    swig_SincWindow_Sf_SwigStatic_constants,
    swig_SincWindow_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SincWindow_bases[] = {0};
static const char *swig_SincWindow_base_names[] = {0};
static swig_lua_class _wrap_class_SincWindow = { "SincWindow", "SincWindow", &SWIGTYPE_p_SincWindow,_proxy__wrap_new_SincWindow, swig_delete_SincWindow, swig_SincWindow_methods, swig_SincWindow_attributes, &swig_SincWindow_Sf_SwigStatic, swig_SincWindow_meta, swig_SincWindow_bases, swig_SincWindow_base_names };

static int _wrap_ChromaConfig_FS_set(lua_State* L) {
  int SWIG_arg = 0;
  ChromaConfig *arg1 = (ChromaConfig *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("ChromaConfig::FS",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ChromaConfig::FS",1,"ChromaConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ChromaConfig::FS",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ChromaConfig,0))){
    SWIG_fail_ptr("ChromaConfig_FS_set",1,SWIGTYPE_p_ChromaConfig);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->FS = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChromaConfig_FS_get(lua_State* L) {
  int SWIG_arg = 0;
  ChromaConfig *arg1 = (ChromaConfig *) 0 ;
  double result;
  
  SWIG_check_num_args("ChromaConfig::FS",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ChromaConfig::FS",1,"ChromaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ChromaConfig,0))){
    SWIG_fail_ptr("ChromaConfig_FS_get",1,SWIGTYPE_p_ChromaConfig);
  }
  
  result = (double) ((arg1)->FS);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChromaConfig_min_set(lua_State* L) {
  int SWIG_arg = 0;
  ChromaConfig *arg1 = (ChromaConfig *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("ChromaConfig::min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ChromaConfig::min",1,"ChromaConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ChromaConfig::min",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ChromaConfig,0))){
    SWIG_fail_ptr("ChromaConfig_min_set",1,SWIGTYPE_p_ChromaConfig);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->min = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChromaConfig_min_get(lua_State* L) {
  int SWIG_arg = 0;
  ChromaConfig *arg1 = (ChromaConfig *) 0 ;
  double result;
  
  SWIG_check_num_args("ChromaConfig::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ChromaConfig::min",1,"ChromaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ChromaConfig,0))){
    SWIG_fail_ptr("ChromaConfig_min_get",1,SWIGTYPE_p_ChromaConfig);
  }
  
  result = (double) ((arg1)->min);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChromaConfig_max_set(lua_State* L) {
  int SWIG_arg = 0;
  ChromaConfig *arg1 = (ChromaConfig *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("ChromaConfig::max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ChromaConfig::max",1,"ChromaConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ChromaConfig::max",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ChromaConfig,0))){
    SWIG_fail_ptr("ChromaConfig_max_set",1,SWIGTYPE_p_ChromaConfig);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->max = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChromaConfig_max_get(lua_State* L) {
  int SWIG_arg = 0;
  ChromaConfig *arg1 = (ChromaConfig *) 0 ;
  double result;
  
  SWIG_check_num_args("ChromaConfig::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ChromaConfig::max",1,"ChromaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ChromaConfig,0))){
    SWIG_fail_ptr("ChromaConfig_max_get",1,SWIGTYPE_p_ChromaConfig);
  }
  
  result = (double) ((arg1)->max);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChromaConfig_BPO_set(lua_State* L) {
  int SWIG_arg = 0;
  ChromaConfig *arg1 = (ChromaConfig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ChromaConfig::BPO",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ChromaConfig::BPO",1,"ChromaConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ChromaConfig::BPO",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ChromaConfig,0))){
    SWIG_fail_ptr("ChromaConfig_BPO_set",1,SWIGTYPE_p_ChromaConfig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->BPO = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChromaConfig_BPO_get(lua_State* L) {
  int SWIG_arg = 0;
  ChromaConfig *arg1 = (ChromaConfig *) 0 ;
  int result;
  
  SWIG_check_num_args("ChromaConfig::BPO",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ChromaConfig::BPO",1,"ChromaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ChromaConfig,0))){
    SWIG_fail_ptr("ChromaConfig_BPO_get",1,SWIGTYPE_p_ChromaConfig);
  }
  
  result = (int) ((arg1)->BPO);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChromaConfig_CQThresh_set(lua_State* L) {
  int SWIG_arg = 0;
  ChromaConfig *arg1 = (ChromaConfig *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("ChromaConfig::CQThresh",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ChromaConfig::CQThresh",1,"ChromaConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ChromaConfig::CQThresh",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ChromaConfig,0))){
    SWIG_fail_ptr("ChromaConfig_CQThresh_set",1,SWIGTYPE_p_ChromaConfig);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->CQThresh = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChromaConfig_CQThresh_get(lua_State* L) {
  int SWIG_arg = 0;
  ChromaConfig *arg1 = (ChromaConfig *) 0 ;
  double result;
  
  SWIG_check_num_args("ChromaConfig::CQThresh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ChromaConfig::CQThresh",1,"ChromaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ChromaConfig,0))){
    SWIG_fail_ptr("ChromaConfig_CQThresh_get",1,SWIGTYPE_p_ChromaConfig);
  }
  
  result = (double) ((arg1)->CQThresh);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChromaConfig_normalise_set(lua_State* L) {
  int SWIG_arg = 0;
  ChromaConfig *arg1 = (ChromaConfig *) 0 ;
  MathUtilities::NormaliseType arg2 ;
  
  SWIG_check_num_args("ChromaConfig::normalise",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ChromaConfig::normalise",1,"ChromaConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ChromaConfig::normalise",2,"MathUtilities::NormaliseType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ChromaConfig,0))){
    SWIG_fail_ptr("ChromaConfig_normalise_set",1,SWIGTYPE_p_ChromaConfig);
  }
  
  arg2 = (MathUtilities::NormaliseType)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->normalise = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChromaConfig_normalise_get(lua_State* L) {
  int SWIG_arg = 0;
  ChromaConfig *arg1 = (ChromaConfig *) 0 ;
  MathUtilities::NormaliseType result;
  
  SWIG_check_num_args("ChromaConfig::normalise",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ChromaConfig::normalise",1,"ChromaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ChromaConfig,0))){
    SWIG_fail_ptr("ChromaConfig_normalise_get",1,SWIGTYPE_p_ChromaConfig);
  }
  
  result = (MathUtilities::NormaliseType) ((arg1)->normalise);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ChromaConfig(lua_State* L) {
  int SWIG_arg = 0;
  ChromaConfig *result = 0 ;
  
  SWIG_check_num_args("ChromaConfig::ChromaConfig",0,0)
  result = (ChromaConfig *)new ChromaConfig();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ChromaConfig,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ChromaConfig(void *obj) {
ChromaConfig *arg1 = (ChromaConfig *) obj;
delete arg1;
}
static int _proxy__wrap_new_ChromaConfig(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ChromaConfig);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ChromaConfig_attributes[] = {
    { "FS", _wrap_ChromaConfig_FS_get, _wrap_ChromaConfig_FS_set },
    { "min", _wrap_ChromaConfig_min_get, _wrap_ChromaConfig_min_set },
    { "max", _wrap_ChromaConfig_max_get, _wrap_ChromaConfig_max_set },
    { "BPO", _wrap_ChromaConfig_BPO_get, _wrap_ChromaConfig_BPO_set },
    { "CQThresh", _wrap_ChromaConfig_CQThresh_get, _wrap_ChromaConfig_CQThresh_set },
    { "normalise", _wrap_ChromaConfig_normalise_get, _wrap_ChromaConfig_normalise_set },
    {0,0,0}
};
static swig_lua_method swig_ChromaConfig_methods[]= {
    {0,0}
};
static swig_lua_method swig_ChromaConfig_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ChromaConfig_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ChromaConfig_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ChromaConfig_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ChromaConfig_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ChromaConfig_Sf_SwigStatic = {
    "ChromaConfig",
    swig_ChromaConfig_Sf_SwigStatic_methods,
    swig_ChromaConfig_Sf_SwigStatic_attributes,
    swig_ChromaConfig_Sf_SwigStatic_constants,
    swig_ChromaConfig_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ChromaConfig_bases[] = {0};
static const char *swig_ChromaConfig_base_names[] = {0};
static swig_lua_class _wrap_class_ChromaConfig = { "ChromaConfig", "ChromaConfig", &SWIGTYPE_p_ChromaConfig,_proxy__wrap_new_ChromaConfig, swig_delete_ChromaConfig, swig_ChromaConfig_methods, swig_ChromaConfig_attributes, &swig_ChromaConfig_Sf_SwigStatic, swig_ChromaConfig_meta, swig_ChromaConfig_bases, swig_ChromaConfig_base_names };

static int _wrap_new_Chromagram(lua_State* L) {
  int SWIG_arg = 0;
  ChromaConfig arg1 ;
  ChromaConfig *argp1 ;
  Chromagram *result = 0 ;
  
  SWIG_check_num_args("Chromagram::Chromagram",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Chromagram::Chromagram",1,"ChromaConfig");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ChromaConfig,0))){
    SWIG_fail_ptr("new_Chromagram",1,SWIGTYPE_p_ChromaConfig);
  }
  arg1 = *argp1;
  
  result = (Chromagram *)new Chromagram(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Chromagram,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chromagram_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Chromagram *arg1 = (Chromagram *) 0 ;
  double *arg2 = (double *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("Chromagram::process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Chromagram::process",1,"Chromagram *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Chromagram::process",2,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Chromagram,0))){
    SWIG_fail_ptr("Chromagram_process",1,SWIGTYPE_p_Chromagram);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Chromagram_process",2,SWIGTYPE_p_double);
  }
  
  result = (double *)(arg1)->process((double const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chromagram_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Chromagram *arg1 = (Chromagram *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("Chromagram::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Chromagram::process",1,"Chromagram *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Chromagram::process",2,"double const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Chromagram::process",3,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Chromagram,0))){
    SWIG_fail_ptr("Chromagram_process",1,SWIGTYPE_p_Chromagram);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Chromagram_process",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Chromagram_process",3,SWIGTYPE_p_double);
  }
  
  result = (double *)(arg1)->process((double const *)arg2,(double const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chromagram_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Chromagram, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Chromagram_process__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Chromagram, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Chromagram_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Chromagram_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Chromagram::process(double const *)\n"
    "    Chromagram::process(double const *,double const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Chromagram_unityNormalise(lua_State* L) {
  int SWIG_arg = 0;
  Chromagram *arg1 = (Chromagram *) 0 ;
  double *arg2 = (double *) 0 ;
  
  SWIG_check_num_args("Chromagram::unityNormalise",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Chromagram::unityNormalise",1,"Chromagram *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Chromagram::unityNormalise",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Chromagram,0))){
    SWIG_fail_ptr("Chromagram_unityNormalise",1,SWIGTYPE_p_Chromagram);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Chromagram_unityNormalise",2,SWIGTYPE_p_double);
  }
  
  (arg1)->unityNormalise(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chromagram_kabs(lua_State* L) {
  int SWIG_arg = 0;
  Chromagram *arg1 = (Chromagram *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Chromagram::kabs",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Chromagram::kabs",1,"Chromagram *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Chromagram::kabs",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Chromagram::kabs",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Chromagram,0))){
    SWIG_fail_ptr("Chromagram_kabs",1,SWIGTYPE_p_Chromagram);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->kabs(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chromagram_getK(lua_State* L) {
  int SWIG_arg = 0;
  Chromagram *arg1 = (Chromagram *) 0 ;
  int result;
  
  SWIG_check_num_args("Chromagram::getK",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Chromagram::getK",1,"Chromagram *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Chromagram,0))){
    SWIG_fail_ptr("Chromagram_getK",1,SWIGTYPE_p_Chromagram);
  }
  
  result = (int)(arg1)->getK();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chromagram_getFrameSize(lua_State* L) {
  int SWIG_arg = 0;
  Chromagram *arg1 = (Chromagram *) 0 ;
  int result;
  
  SWIG_check_num_args("Chromagram::getFrameSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Chromagram::getFrameSize",1,"Chromagram *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Chromagram,0))){
    SWIG_fail_ptr("Chromagram_getFrameSize",1,SWIGTYPE_p_Chromagram);
  }
  
  result = (int)(arg1)->getFrameSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chromagram_getHopSize(lua_State* L) {
  int SWIG_arg = 0;
  Chromagram *arg1 = (Chromagram *) 0 ;
  int result;
  
  SWIG_check_num_args("Chromagram::getHopSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Chromagram::getHopSize",1,"Chromagram *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Chromagram,0))){
    SWIG_fail_ptr("Chromagram_getHopSize",1,SWIGTYPE_p_Chromagram);
  }
  
  result = (int)(arg1)->getHopSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Chromagram(void *obj) {
Chromagram *arg1 = (Chromagram *) obj;
delete arg1;
}
static int _proxy__wrap_new_Chromagram(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Chromagram);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Chromagram_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Chromagram_methods[]= {
    { "process", _wrap_Chromagram_process},
    { "unityNormalise", _wrap_Chromagram_unityNormalise},
    { "kabs", _wrap_Chromagram_kabs},
    { "getK", _wrap_Chromagram_getK},
    { "getFrameSize", _wrap_Chromagram_getFrameSize},
    { "getHopSize", _wrap_Chromagram_getHopSize},
    {0,0}
};
static swig_lua_method swig_Chromagram_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Chromagram_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Chromagram_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Chromagram_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Chromagram_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Chromagram_Sf_SwigStatic = {
    "Chromagram",
    swig_Chromagram_Sf_SwigStatic_methods,
    swig_Chromagram_Sf_SwigStatic_attributes,
    swig_Chromagram_Sf_SwigStatic_constants,
    swig_Chromagram_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Chromagram_bases[] = {0};
static const char *swig_Chromagram_base_names[] = {0};
static swig_lua_class _wrap_class_Chromagram = { "Chromagram", "Chromagram", &SWIGTYPE_p_Chromagram,_proxy__wrap_new_Chromagram, swig_delete_Chromagram, swig_Chromagram_methods, swig_Chromagram_attributes, &swig_Chromagram_Sf_SwigStatic, swig_Chromagram_meta, swig_Chromagram_bases, swig_Chromagram_base_names };

static int _wrap_CQConfig_FS_set(lua_State* L) {
  int SWIG_arg = 0;
  CQConfig *arg1 = (CQConfig *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("CQConfig::FS",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQConfig::FS",1,"CQConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQConfig::FS",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQConfig,0))){
    SWIG_fail_ptr("CQConfig_FS_set",1,SWIGTYPE_p_CQConfig);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->FS = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQConfig_FS_get(lua_State* L) {
  int SWIG_arg = 0;
  CQConfig *arg1 = (CQConfig *) 0 ;
  double result;
  
  SWIG_check_num_args("CQConfig::FS",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQConfig::FS",1,"CQConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQConfig,0))){
    SWIG_fail_ptr("CQConfig_FS_get",1,SWIGTYPE_p_CQConfig);
  }
  
  result = (double) ((arg1)->FS);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQConfig_min_set(lua_State* L) {
  int SWIG_arg = 0;
  CQConfig *arg1 = (CQConfig *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("CQConfig::min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQConfig::min",1,"CQConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQConfig::min",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQConfig,0))){
    SWIG_fail_ptr("CQConfig_min_set",1,SWIGTYPE_p_CQConfig);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->min = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQConfig_min_get(lua_State* L) {
  int SWIG_arg = 0;
  CQConfig *arg1 = (CQConfig *) 0 ;
  double result;
  
  SWIG_check_num_args("CQConfig::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQConfig::min",1,"CQConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQConfig,0))){
    SWIG_fail_ptr("CQConfig_min_get",1,SWIGTYPE_p_CQConfig);
  }
  
  result = (double) ((arg1)->min);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQConfig_max_set(lua_State* L) {
  int SWIG_arg = 0;
  CQConfig *arg1 = (CQConfig *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("CQConfig::max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQConfig::max",1,"CQConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQConfig::max",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQConfig,0))){
    SWIG_fail_ptr("CQConfig_max_set",1,SWIGTYPE_p_CQConfig);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->max = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQConfig_max_get(lua_State* L) {
  int SWIG_arg = 0;
  CQConfig *arg1 = (CQConfig *) 0 ;
  double result;
  
  SWIG_check_num_args("CQConfig::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQConfig::max",1,"CQConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQConfig,0))){
    SWIG_fail_ptr("CQConfig_max_get",1,SWIGTYPE_p_CQConfig);
  }
  
  result = (double) ((arg1)->max);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQConfig_BPO_set(lua_State* L) {
  int SWIG_arg = 0;
  CQConfig *arg1 = (CQConfig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("CQConfig::BPO",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQConfig::BPO",1,"CQConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQConfig::BPO",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQConfig,0))){
    SWIG_fail_ptr("CQConfig_BPO_set",1,SWIGTYPE_p_CQConfig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->BPO = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQConfig_BPO_get(lua_State* L) {
  int SWIG_arg = 0;
  CQConfig *arg1 = (CQConfig *) 0 ;
  int result;
  
  SWIG_check_num_args("CQConfig::BPO",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQConfig::BPO",1,"CQConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQConfig,0))){
    SWIG_fail_ptr("CQConfig_BPO_get",1,SWIGTYPE_p_CQConfig);
  }
  
  result = (int) ((arg1)->BPO);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQConfig_CQThresh_set(lua_State* L) {
  int SWIG_arg = 0;
  CQConfig *arg1 = (CQConfig *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("CQConfig::CQThresh",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQConfig::CQThresh",1,"CQConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CQConfig::CQThresh",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQConfig,0))){
    SWIG_fail_ptr("CQConfig_CQThresh_set",1,SWIGTYPE_p_CQConfig);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->CQThresh = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CQConfig_CQThresh_get(lua_State* L) {
  int SWIG_arg = 0;
  CQConfig *arg1 = (CQConfig *) 0 ;
  double result;
  
  SWIG_check_num_args("CQConfig::CQThresh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CQConfig::CQThresh",1,"CQConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CQConfig,0))){
    SWIG_fail_ptr("CQConfig_CQThresh_get",1,SWIGTYPE_p_CQConfig);
  }
  
  result = (double) ((arg1)->CQThresh);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CQConfig(lua_State* L) {
  int SWIG_arg = 0;
  CQConfig *result = 0 ;
  
  SWIG_check_num_args("CQConfig::CQConfig",0,0)
  result = (CQConfig *)new CQConfig();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CQConfig,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CQConfig(void *obj) {
CQConfig *arg1 = (CQConfig *) obj;
delete arg1;
}
static int _proxy__wrap_new_CQConfig(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CQConfig);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CQConfig_attributes[] = {
    { "FS", _wrap_CQConfig_FS_get, _wrap_CQConfig_FS_set },
    { "min", _wrap_CQConfig_min_get, _wrap_CQConfig_min_set },
    { "max", _wrap_CQConfig_max_get, _wrap_CQConfig_max_set },
    { "BPO", _wrap_CQConfig_BPO_get, _wrap_CQConfig_BPO_set },
    { "CQThresh", _wrap_CQConfig_CQThresh_get, _wrap_CQConfig_CQThresh_set },
    {0,0,0}
};
static swig_lua_method swig_CQConfig_methods[]= {
    {0,0}
};
static swig_lua_method swig_CQConfig_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CQConfig_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CQConfig_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CQConfig_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CQConfig_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CQConfig_Sf_SwigStatic = {
    "CQConfig",
    swig_CQConfig_Sf_SwigStatic_methods,
    swig_CQConfig_Sf_SwigStatic_attributes,
    swig_CQConfig_Sf_SwigStatic_constants,
    swig_CQConfig_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CQConfig_bases[] = {0};
static const char *swig_CQConfig_base_names[] = {0};
static swig_lua_class _wrap_class_CQConfig = { "CQConfig", "CQConfig", &SWIGTYPE_p_CQConfig,_proxy__wrap_new_CQConfig, swig_delete_CQConfig, swig_CQConfig_methods, swig_CQConfig_attributes, &swig_CQConfig_Sf_SwigStatic, swig_CQConfig_meta, swig_CQConfig_bases, swig_CQConfig_base_names };

static int _wrap_new_ConstantQ(lua_State* L) {
  int SWIG_arg = 0;
  CQConfig arg1 ;
  CQConfig *argp1 ;
  ConstantQ *result = 0 ;
  
  SWIG_check_num_args("ConstantQ::ConstantQ",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ConstantQ::ConstantQ",1,"CQConfig");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_CQConfig,0))){
    SWIG_fail_ptr("new_ConstantQ",1,SWIGTYPE_p_CQConfig);
  }
  arg1 = *argp1;
  
  result = (ConstantQ *)new ConstantQ(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ConstantQ,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConstantQ_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ConstantQ *arg1 = (ConstantQ *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  
  SWIG_check_num_args("ConstantQ::process",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ConstantQ::process",1,"ConstantQ *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ConstantQ::process",2,"double const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ConstantQ::process",3,"double const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ConstantQ::process",4,"double *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ConstantQ::process",5,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ConstantQ,0))){
    SWIG_fail_ptr("ConstantQ_process",1,SWIGTYPE_p_ConstantQ);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ConstantQ_process",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ConstantQ_process",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ConstantQ_process",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ConstantQ_process",5,SWIGTYPE_p_double);
  }
  
  (arg1)->process((double const *)arg2,(double const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConstantQ_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ConstantQ *arg1 = (ConstantQ *) 0 ;
  double *arg2 = (double *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("ConstantQ::process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ConstantQ::process",1,"ConstantQ *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ConstantQ::process",2,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ConstantQ,0))){
    SWIG_fail_ptr("ConstantQ_process",1,SWIGTYPE_p_ConstantQ);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ConstantQ_process",2,SWIGTYPE_p_double);
  }
  
  result = (double *)(arg1)->process((double const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConstantQ_process(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ConstantQ, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ConstantQ_process__SWIG_1(L);
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ConstantQ, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_ConstantQ_process__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ConstantQ_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ConstantQ::process(double const *,double const *,double *,double *)\n"
    "    ConstantQ::process(double const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ConstantQ_sparsekernel(lua_State* L) {
  int SWIG_arg = 0;
  ConstantQ *arg1 = (ConstantQ *) 0 ;
  
  SWIG_check_num_args("ConstantQ::sparsekernel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ConstantQ::sparsekernel",1,"ConstantQ *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ConstantQ,0))){
    SWIG_fail_ptr("ConstantQ_sparsekernel",1,SWIGTYPE_p_ConstantQ);
  }
  
  (arg1)->sparsekernel();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConstantQ_getQ(lua_State* L) {
  int SWIG_arg = 0;
  ConstantQ *arg1 = (ConstantQ *) 0 ;
  double result;
  
  SWIG_check_num_args("ConstantQ::getQ",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ConstantQ::getQ",1,"ConstantQ *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ConstantQ,0))){
    SWIG_fail_ptr("ConstantQ_getQ",1,SWIGTYPE_p_ConstantQ);
  }
  
  result = (double)(arg1)->getQ();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConstantQ_getK(lua_State* L) {
  int SWIG_arg = 0;
  ConstantQ *arg1 = (ConstantQ *) 0 ;
  int result;
  
  SWIG_check_num_args("ConstantQ::getK",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ConstantQ::getK",1,"ConstantQ *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ConstantQ,0))){
    SWIG_fail_ptr("ConstantQ_getK",1,SWIGTYPE_p_ConstantQ);
  }
  
  result = (int)(arg1)->getK();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConstantQ_getFFTLength(lua_State* L) {
  int SWIG_arg = 0;
  ConstantQ *arg1 = (ConstantQ *) 0 ;
  int result;
  
  SWIG_check_num_args("ConstantQ::getFFTLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ConstantQ::getFFTLength",1,"ConstantQ *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ConstantQ,0))){
    SWIG_fail_ptr("ConstantQ_getFFTLength",1,SWIGTYPE_p_ConstantQ);
  }
  
  result = (int)(arg1)->getFFTLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConstantQ_getHop(lua_State* L) {
  int SWIG_arg = 0;
  ConstantQ *arg1 = (ConstantQ *) 0 ;
  int result;
  
  SWIG_check_num_args("ConstantQ::getHop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ConstantQ::getHop",1,"ConstantQ *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ConstantQ,0))){
    SWIG_fail_ptr("ConstantQ_getHop",1,SWIGTYPE_p_ConstantQ);
  }
  
  result = (int)(arg1)->getHop();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ConstantQ(void *obj) {
ConstantQ *arg1 = (ConstantQ *) obj;
delete arg1;
}
static int _proxy__wrap_new_ConstantQ(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ConstantQ);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ConstantQ_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ConstantQ_methods[]= {
    { "process", _wrap_ConstantQ_process},
    { "sparsekernel", _wrap_ConstantQ_sparsekernel},
    { "getQ", _wrap_ConstantQ_getQ},
    { "getK", _wrap_ConstantQ_getK},
    { "getFFTLength", _wrap_ConstantQ_getFFTLength},
    { "getHop", _wrap_ConstantQ_getHop},
    {0,0}
};
static swig_lua_method swig_ConstantQ_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ConstantQ_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ConstantQ_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ConstantQ_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ConstantQ_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ConstantQ_Sf_SwigStatic = {
    "ConstantQ",
    swig_ConstantQ_Sf_SwigStatic_methods,
    swig_ConstantQ_Sf_SwigStatic_attributes,
    swig_ConstantQ_Sf_SwigStatic_constants,
    swig_ConstantQ_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ConstantQ_bases[] = {0};
static const char *swig_ConstantQ_base_names[] = {0};
static swig_lua_class _wrap_class_ConstantQ = { "ConstantQ", "ConstantQ", &SWIGTYPE_p_ConstantQ,_proxy__wrap_new_ConstantQ, swig_delete_ConstantQ, swig_ConstantQ_methods, swig_ConstantQ_attributes, &swig_ConstantQ_Sf_SwigStatic, swig_ConstantQ_meta, swig_ConstantQ_bases, swig_ConstantQ_base_names };

static int _wrap_MFCCConfig_FS_set(lua_State* L) {
  int SWIG_arg = 0;
  MFCCConfig *arg1 = (MFCCConfig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("MFCCConfig::FS",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MFCCConfig::FS",1,"MFCCConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MFCCConfig::FS",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MFCCConfig,0))){
    SWIG_fail_ptr("MFCCConfig_FS_set",1,SWIGTYPE_p_MFCCConfig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->FS = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MFCCConfig_FS_get(lua_State* L) {
  int SWIG_arg = 0;
  MFCCConfig *arg1 = (MFCCConfig *) 0 ;
  int result;
  
  SWIG_check_num_args("MFCCConfig::FS",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MFCCConfig::FS",1,"MFCCConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MFCCConfig,0))){
    SWIG_fail_ptr("MFCCConfig_FS_get",1,SWIGTYPE_p_MFCCConfig);
  }
  
  result = (int) ((arg1)->FS);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MFCCConfig_fftsize_set(lua_State* L) {
  int SWIG_arg = 0;
  MFCCConfig *arg1 = (MFCCConfig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("MFCCConfig::fftsize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MFCCConfig::fftsize",1,"MFCCConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MFCCConfig::fftsize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MFCCConfig,0))){
    SWIG_fail_ptr("MFCCConfig_fftsize_set",1,SWIGTYPE_p_MFCCConfig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->fftsize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MFCCConfig_fftsize_get(lua_State* L) {
  int SWIG_arg = 0;
  MFCCConfig *arg1 = (MFCCConfig *) 0 ;
  int result;
  
  SWIG_check_num_args("MFCCConfig::fftsize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MFCCConfig::fftsize",1,"MFCCConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MFCCConfig,0))){
    SWIG_fail_ptr("MFCCConfig_fftsize_get",1,SWIGTYPE_p_MFCCConfig);
  }
  
  result = (int) ((arg1)->fftsize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MFCCConfig_nceps_set(lua_State* L) {
  int SWIG_arg = 0;
  MFCCConfig *arg1 = (MFCCConfig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("MFCCConfig::nceps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MFCCConfig::nceps",1,"MFCCConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MFCCConfig::nceps",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MFCCConfig,0))){
    SWIG_fail_ptr("MFCCConfig_nceps_set",1,SWIGTYPE_p_MFCCConfig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->nceps = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MFCCConfig_nceps_get(lua_State* L) {
  int SWIG_arg = 0;
  MFCCConfig *arg1 = (MFCCConfig *) 0 ;
  int result;
  
  SWIG_check_num_args("MFCCConfig::nceps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MFCCConfig::nceps",1,"MFCCConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MFCCConfig,0))){
    SWIG_fail_ptr("MFCCConfig_nceps_get",1,SWIGTYPE_p_MFCCConfig);
  }
  
  result = (int) ((arg1)->nceps);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MFCCConfig_logpower_set(lua_State* L) {
  int SWIG_arg = 0;
  MFCCConfig *arg1 = (MFCCConfig *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("MFCCConfig::logpower",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MFCCConfig::logpower",1,"MFCCConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MFCCConfig::logpower",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MFCCConfig,0))){
    SWIG_fail_ptr("MFCCConfig_logpower_set",1,SWIGTYPE_p_MFCCConfig);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->logpower = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MFCCConfig_logpower_get(lua_State* L) {
  int SWIG_arg = 0;
  MFCCConfig *arg1 = (MFCCConfig *) 0 ;
  double result;
  
  SWIG_check_num_args("MFCCConfig::logpower",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MFCCConfig::logpower",1,"MFCCConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MFCCConfig,0))){
    SWIG_fail_ptr("MFCCConfig_logpower_get",1,SWIGTYPE_p_MFCCConfig);
  }
  
  result = (double) ((arg1)->logpower);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MFCCConfig_want_c0_set(lua_State* L) {
  int SWIG_arg = 0;
  MFCCConfig *arg1 = (MFCCConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("MFCCConfig::want_c0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MFCCConfig::want_c0",1,"MFCCConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("MFCCConfig::want_c0",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MFCCConfig,0))){
    SWIG_fail_ptr("MFCCConfig_want_c0_set",1,SWIGTYPE_p_MFCCConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->want_c0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MFCCConfig_want_c0_get(lua_State* L) {
  int SWIG_arg = 0;
  MFCCConfig *arg1 = (MFCCConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("MFCCConfig::want_c0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MFCCConfig::want_c0",1,"MFCCConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MFCCConfig,0))){
    SWIG_fail_ptr("MFCCConfig_want_c0_get",1,SWIGTYPE_p_MFCCConfig);
  }
  
  result = (bool) ((arg1)->want_c0);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MFCCConfig_window_set(lua_State* L) {
  int SWIG_arg = 0;
  MFCCConfig *arg1 = (MFCCConfig *) 0 ;
  WindowType arg2 ;
  
  SWIG_check_num_args("MFCCConfig::window",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MFCCConfig::window",1,"MFCCConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MFCCConfig::window",2,"WindowType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MFCCConfig,0))){
    SWIG_fail_ptr("MFCCConfig_window_set",1,SWIGTYPE_p_MFCCConfig);
  }
  
  arg2 = (WindowType)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->window = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MFCCConfig_window_get(lua_State* L) {
  int SWIG_arg = 0;
  MFCCConfig *arg1 = (MFCCConfig *) 0 ;
  WindowType result;
  
  SWIG_check_num_args("MFCCConfig::window",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MFCCConfig::window",1,"MFCCConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MFCCConfig,0))){
    SWIG_fail_ptr("MFCCConfig_window_get",1,SWIGTYPE_p_MFCCConfig);
  }
  
  result = (WindowType) ((arg1)->window);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MFCCConfig(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  MFCCConfig *result = 0 ;
  
  SWIG_check_num_args("MFCCConfig::MFCCConfig",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("MFCCConfig::MFCCConfig",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (MFCCConfig *)new MFCCConfig(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MFCCConfig,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MFCCConfig(void *obj) {
MFCCConfig *arg1 = (MFCCConfig *) obj;
delete arg1;
}
static int _proxy__wrap_new_MFCCConfig(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MFCCConfig);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MFCCConfig_attributes[] = {
    { "FS", _wrap_MFCCConfig_FS_get, _wrap_MFCCConfig_FS_set },
    { "fftsize", _wrap_MFCCConfig_fftsize_get, _wrap_MFCCConfig_fftsize_set },
    { "nceps", _wrap_MFCCConfig_nceps_get, _wrap_MFCCConfig_nceps_set },
    { "logpower", _wrap_MFCCConfig_logpower_get, _wrap_MFCCConfig_logpower_set },
    { "want_c0", _wrap_MFCCConfig_want_c0_get, _wrap_MFCCConfig_want_c0_set },
    { "window", _wrap_MFCCConfig_window_get, _wrap_MFCCConfig_window_set },
    {0,0,0}
};
static swig_lua_method swig_MFCCConfig_methods[]= {
    {0,0}
};
static swig_lua_method swig_MFCCConfig_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MFCCConfig_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MFCCConfig_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MFCCConfig_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MFCCConfig_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MFCCConfig_Sf_SwigStatic = {
    "MFCCConfig",
    swig_MFCCConfig_Sf_SwigStatic_methods,
    swig_MFCCConfig_Sf_SwigStatic_attributes,
    swig_MFCCConfig_Sf_SwigStatic_constants,
    swig_MFCCConfig_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MFCCConfig_bases[] = {0};
static const char *swig_MFCCConfig_base_names[] = {0};
static swig_lua_class _wrap_class_MFCCConfig = { "MFCCConfig", "MFCCConfig", &SWIGTYPE_p_MFCCConfig,_proxy__wrap_new_MFCCConfig, swig_delete_MFCCConfig, swig_MFCCConfig_methods, swig_MFCCConfig_attributes, &swig_MFCCConfig_Sf_SwigStatic, swig_MFCCConfig_meta, swig_MFCCConfig_bases, swig_MFCCConfig_base_names };

static int _wrap_new_MFCC(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< MFCCConfig > arg1 ;
  MFCCConfig *argp1 ;
  MFCC *result = 0 ;
  
  SWIG_check_num_args("MFCC::MFCC",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("MFCC::MFCC",1,"MFCCConfig");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_MFCCConfig,0))){
    SWIG_fail_ptr("new_MFCC",1,SWIGTYPE_p_MFCCConfig);
  }
  arg1 = *argp1;
  
  result = (MFCC *)new MFCC(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MFCC,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MFCC_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  MFCC *arg1 = (MFCC *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int result;
  
  SWIG_check_num_args("MFCC::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MFCC::process",1,"MFCC *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("MFCC::process",2,"double const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MFCC::process",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MFCC,0))){
    SWIG_fail_ptr("MFCC_process",1,SWIGTYPE_p_MFCC);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MFCC_process",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MFCC_process",3,SWIGTYPE_p_double);
  }
  
  result = (int)(arg1)->process((double const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MFCC_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  MFCC *arg1 = (MFCC *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  int result;
  
  SWIG_check_num_args("MFCC::process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MFCC::process",1,"MFCC *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("MFCC::process",2,"double const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MFCC::process",3,"double const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MFCC::process",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MFCC,0))){
    SWIG_fail_ptr("MFCC_process",1,SWIGTYPE_p_MFCC);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MFCC_process",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MFCC_process",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MFCC_process",4,SWIGTYPE_p_double);
  }
  
  result = (int)(arg1)->process((double const *)arg2,(double const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MFCC_process(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MFCC, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_MFCC_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MFCC, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_MFCC_process__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MFCC_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    MFCC::process(double const *,double *)\n"
    "    MFCC::process(double const *,double const *,double *)\n");
  lua_error(L);return 0;
}


static int _wrap_MFCC_getfftlength(lua_State* L) {
  int SWIG_arg = 0;
  MFCC *arg1 = (MFCC *) 0 ;
  int result;
  
  SWIG_check_num_args("MFCC::getfftlength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MFCC::getfftlength",1,"MFCC const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MFCC,0))){
    SWIG_fail_ptr("MFCC_getfftlength",1,SWIGTYPE_p_MFCC);
  }
  
  result = (int)((MFCC const *)arg1)->getfftlength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MFCC(void *obj) {
MFCC *arg1 = (MFCC *) obj;
delete arg1;
}
static int _proxy__wrap_new_MFCC(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MFCC);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MFCC_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MFCC_methods[]= {
    { "process", _wrap_MFCC_process},
    { "getfftlength", _wrap_MFCC_getfftlength},
    {0,0}
};
static swig_lua_method swig_MFCC_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MFCC_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MFCC_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MFCC_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MFCC_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MFCC_Sf_SwigStatic = {
    "MFCC",
    swig_MFCC_Sf_SwigStatic_methods,
    swig_MFCC_Sf_SwigStatic_attributes,
    swig_MFCC_Sf_SwigStatic_constants,
    swig_MFCC_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MFCC_bases[] = {0};
static const char *swig_MFCC_base_names[] = {0};
static swig_lua_class _wrap_class_MFCC = { "MFCC", "MFCC", &SWIGTYPE_p_MFCC,_proxy__wrap_new_MFCC, swig_delete_MFCC, swig_MFCC_methods, swig_MFCC_attributes, &swig_MFCC_Sf_SwigStatic, swig_MFCC_meta, swig_MFCC_bases, swig_MFCC_base_names };

static int _wrap_DFConfig_stepSize_set(lua_State* L) {
  int SWIG_arg = 0;
  DFConfig *arg1 = (DFConfig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("DFConfig::stepSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DFConfig::stepSize",1,"DFConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DFConfig::stepSize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DFConfig,0))){
    SWIG_fail_ptr("DFConfig_stepSize_set",1,SWIGTYPE_p_DFConfig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->stepSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFConfig_stepSize_get(lua_State* L) {
  int SWIG_arg = 0;
  DFConfig *arg1 = (DFConfig *) 0 ;
  int result;
  
  SWIG_check_num_args("DFConfig::stepSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DFConfig::stepSize",1,"DFConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DFConfig,0))){
    SWIG_fail_ptr("DFConfig_stepSize_get",1,SWIGTYPE_p_DFConfig);
  }
  
  result = (int) ((arg1)->stepSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFConfig_frameLength_set(lua_State* L) {
  int SWIG_arg = 0;
  DFConfig *arg1 = (DFConfig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("DFConfig::frameLength",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DFConfig::frameLength",1,"DFConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DFConfig::frameLength",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DFConfig,0))){
    SWIG_fail_ptr("DFConfig_frameLength_set",1,SWIGTYPE_p_DFConfig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->frameLength = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFConfig_frameLength_get(lua_State* L) {
  int SWIG_arg = 0;
  DFConfig *arg1 = (DFConfig *) 0 ;
  int result;
  
  SWIG_check_num_args("DFConfig::frameLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DFConfig::frameLength",1,"DFConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DFConfig,0))){
    SWIG_fail_ptr("DFConfig_frameLength_get",1,SWIGTYPE_p_DFConfig);
  }
  
  result = (int) ((arg1)->frameLength);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFConfig_DFType_set(lua_State* L) {
  int SWIG_arg = 0;
  DFConfig *arg1 = (DFConfig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("DFConfig::DFType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DFConfig::DFType",1,"DFConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DFConfig::DFType",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DFConfig,0))){
    SWIG_fail_ptr("DFConfig_DFType_set",1,SWIGTYPE_p_DFConfig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->DFType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFConfig_DFType_get(lua_State* L) {
  int SWIG_arg = 0;
  DFConfig *arg1 = (DFConfig *) 0 ;
  int result;
  
  SWIG_check_num_args("DFConfig::DFType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DFConfig::DFType",1,"DFConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DFConfig,0))){
    SWIG_fail_ptr("DFConfig_DFType_get",1,SWIGTYPE_p_DFConfig);
  }
  
  result = (int) ((arg1)->DFType);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFConfig_dbRise_set(lua_State* L) {
  int SWIG_arg = 0;
  DFConfig *arg1 = (DFConfig *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("DFConfig::dbRise",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DFConfig::dbRise",1,"DFConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DFConfig::dbRise",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DFConfig,0))){
    SWIG_fail_ptr("DFConfig_dbRise_set",1,SWIGTYPE_p_DFConfig);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->dbRise = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFConfig_dbRise_get(lua_State* L) {
  int SWIG_arg = 0;
  DFConfig *arg1 = (DFConfig *) 0 ;
  double result;
  
  SWIG_check_num_args("DFConfig::dbRise",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DFConfig::dbRise",1,"DFConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DFConfig,0))){
    SWIG_fail_ptr("DFConfig_dbRise_get",1,SWIGTYPE_p_DFConfig);
  }
  
  result = (double) ((arg1)->dbRise);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFConfig_adaptiveWhitening_set(lua_State* L) {
  int SWIG_arg = 0;
  DFConfig *arg1 = (DFConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("DFConfig::adaptiveWhitening",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DFConfig::adaptiveWhitening",1,"DFConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("DFConfig::adaptiveWhitening",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DFConfig,0))){
    SWIG_fail_ptr("DFConfig_adaptiveWhitening_set",1,SWIGTYPE_p_DFConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->adaptiveWhitening = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFConfig_adaptiveWhitening_get(lua_State* L) {
  int SWIG_arg = 0;
  DFConfig *arg1 = (DFConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("DFConfig::adaptiveWhitening",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DFConfig::adaptiveWhitening",1,"DFConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DFConfig,0))){
    SWIG_fail_ptr("DFConfig_adaptiveWhitening_get",1,SWIGTYPE_p_DFConfig);
  }
  
  result = (bool) ((arg1)->adaptiveWhitening);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFConfig_whiteningRelaxCoeff_set(lua_State* L) {
  int SWIG_arg = 0;
  DFConfig *arg1 = (DFConfig *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("DFConfig::whiteningRelaxCoeff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DFConfig::whiteningRelaxCoeff",1,"DFConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DFConfig::whiteningRelaxCoeff",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DFConfig,0))){
    SWIG_fail_ptr("DFConfig_whiteningRelaxCoeff_set",1,SWIGTYPE_p_DFConfig);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->whiteningRelaxCoeff = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFConfig_whiteningRelaxCoeff_get(lua_State* L) {
  int SWIG_arg = 0;
  DFConfig *arg1 = (DFConfig *) 0 ;
  double result;
  
  SWIG_check_num_args("DFConfig::whiteningRelaxCoeff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DFConfig::whiteningRelaxCoeff",1,"DFConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DFConfig,0))){
    SWIG_fail_ptr("DFConfig_whiteningRelaxCoeff_get",1,SWIGTYPE_p_DFConfig);
  }
  
  result = (double) ((arg1)->whiteningRelaxCoeff);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFConfig_whiteningFloor_set(lua_State* L) {
  int SWIG_arg = 0;
  DFConfig *arg1 = (DFConfig *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("DFConfig::whiteningFloor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DFConfig::whiteningFloor",1,"DFConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DFConfig::whiteningFloor",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DFConfig,0))){
    SWIG_fail_ptr("DFConfig_whiteningFloor_set",1,SWIGTYPE_p_DFConfig);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->whiteningFloor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFConfig_whiteningFloor_get(lua_State* L) {
  int SWIG_arg = 0;
  DFConfig *arg1 = (DFConfig *) 0 ;
  double result;
  
  SWIG_check_num_args("DFConfig::whiteningFloor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DFConfig::whiteningFloor",1,"DFConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DFConfig,0))){
    SWIG_fail_ptr("DFConfig_whiteningFloor_get",1,SWIGTYPE_p_DFConfig);
  }
  
  result = (double) ((arg1)->whiteningFloor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DFConfig(lua_State* L) {
  int SWIG_arg = 0;
  DFConfig *result = 0 ;
  
  SWIG_check_num_args("DFConfig::DFConfig",0,0)
  result = (DFConfig *)new DFConfig();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DFConfig,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DFConfig(void *obj) {
DFConfig *arg1 = (DFConfig *) obj;
delete arg1;
}
static int _proxy__wrap_new_DFConfig(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DFConfig);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DFConfig_attributes[] = {
    { "stepSize", _wrap_DFConfig_stepSize_get, _wrap_DFConfig_stepSize_set },
    { "frameLength", _wrap_DFConfig_frameLength_get, _wrap_DFConfig_frameLength_set },
    { "DFType", _wrap_DFConfig_DFType_get, _wrap_DFConfig_DFType_set },
    { "dbRise", _wrap_DFConfig_dbRise_get, _wrap_DFConfig_dbRise_set },
    { "adaptiveWhitening", _wrap_DFConfig_adaptiveWhitening_get, _wrap_DFConfig_adaptiveWhitening_set },
    { "whiteningRelaxCoeff", _wrap_DFConfig_whiteningRelaxCoeff_get, _wrap_DFConfig_whiteningRelaxCoeff_set },
    { "whiteningFloor", _wrap_DFConfig_whiteningFloor_get, _wrap_DFConfig_whiteningFloor_set },
    {0,0,0}
};
static swig_lua_method swig_DFConfig_methods[]= {
    {0,0}
};
static swig_lua_method swig_DFConfig_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DFConfig_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DFConfig_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DFConfig_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DFConfig_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DFConfig_Sf_SwigStatic = {
    "DFConfig",
    swig_DFConfig_Sf_SwigStatic_methods,
    swig_DFConfig_Sf_SwigStatic_attributes,
    swig_DFConfig_Sf_SwigStatic_constants,
    swig_DFConfig_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DFConfig_bases[] = {0};
static const char *swig_DFConfig_base_names[] = {0};
static swig_lua_class _wrap_class_DFConfig = { "DFConfig", "DFConfig", &SWIGTYPE_p_DFConfig,_proxy__wrap_new_DFConfig, swig_delete_DFConfig, swig_DFConfig_methods, swig_DFConfig_attributes, &swig_DFConfig_Sf_SwigStatic, swig_DFConfig_meta, swig_DFConfig_bases, swig_DFConfig_base_names };

static int _wrap_DetectionFunction_getSpectrumMagnitude(lua_State* L) {
  int SWIG_arg = 0;
  DetectionFunction *arg1 = (DetectionFunction *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("DetectionFunction::getSpectrumMagnitude",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DetectionFunction::getSpectrumMagnitude",1,"DetectionFunction *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DetectionFunction,0))){
    SWIG_fail_ptr("DetectionFunction_getSpectrumMagnitude",1,SWIGTYPE_p_DetectionFunction);
  }
  
  result = (double *)(arg1)->getSpectrumMagnitude();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DetectionFunction(lua_State* L) {
  int SWIG_arg = 0;
  DFConfig arg1 ;
  DFConfig *argp1 ;
  DetectionFunction *result = 0 ;
  
  SWIG_check_num_args("DetectionFunction::DetectionFunction",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DetectionFunction::DetectionFunction",1,"DFConfig");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_DFConfig,0))){
    SWIG_fail_ptr("new_DetectionFunction",1,SWIGTYPE_p_DFConfig);
  }
  arg1 = *argp1;
  
  result = (DetectionFunction *)new DetectionFunction(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DetectionFunction,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DetectionFunction_processTimeDomain(lua_State* L) {
  int SWIG_arg = 0;
  DetectionFunction *arg1 = (DetectionFunction *) 0 ;
  double *arg2 = (double *) 0 ;
  double result;
  
  SWIG_check_num_args("DetectionFunction::processTimeDomain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DetectionFunction::processTimeDomain",1,"DetectionFunction *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DetectionFunction::processTimeDomain",2,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DetectionFunction,0))){
    SWIG_fail_ptr("DetectionFunction_processTimeDomain",1,SWIGTYPE_p_DetectionFunction);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("DetectionFunction_processTimeDomain",2,SWIGTYPE_p_double);
  }
  
  result = (double)(arg1)->processTimeDomain((double const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DetectionFunction_processFrequencyDomain(lua_State* L) {
  int SWIG_arg = 0;
  DetectionFunction *arg1 = (DetectionFunction *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double result;
  
  SWIG_check_num_args("DetectionFunction::processFrequencyDomain",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DetectionFunction::processFrequencyDomain",1,"DetectionFunction *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DetectionFunction::processFrequencyDomain",2,"double const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("DetectionFunction::processFrequencyDomain",3,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DetectionFunction,0))){
    SWIG_fail_ptr("DetectionFunction_processFrequencyDomain",1,SWIGTYPE_p_DetectionFunction);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("DetectionFunction_processFrequencyDomain",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("DetectionFunction_processFrequencyDomain",3,SWIGTYPE_p_double);
  }
  
  result = (double)(arg1)->processFrequencyDomain((double const *)arg2,(double const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DetectionFunction(void *obj) {
DetectionFunction *arg1 = (DetectionFunction *) obj;
delete arg1;
}
static int _proxy__wrap_new_DetectionFunction(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DetectionFunction);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DetectionFunction_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DetectionFunction_methods[]= {
    { "getSpectrumMagnitude", _wrap_DetectionFunction_getSpectrumMagnitude},
    { "processTimeDomain", _wrap_DetectionFunction_processTimeDomain},
    { "processFrequencyDomain", _wrap_DetectionFunction_processFrequencyDomain},
    {0,0}
};
static swig_lua_method swig_DetectionFunction_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DetectionFunction_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DetectionFunction_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DetectionFunction_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DetectionFunction_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DetectionFunction_Sf_SwigStatic = {
    "DetectionFunction",
    swig_DetectionFunction_Sf_SwigStatic_methods,
    swig_DetectionFunction_Sf_SwigStatic_attributes,
    swig_DetectionFunction_Sf_SwigStatic_constants,
    swig_DetectionFunction_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DetectionFunction_bases[] = {0};
static const char *swig_DetectionFunction_base_names[] = {0};
static swig_lua_class _wrap_class_DetectionFunction = { "DetectionFunction", "DetectionFunction", &SWIGTYPE_p_DetectionFunction,_proxy__wrap_new_DetectionFunction, swig_delete_DetectionFunction, swig_DetectionFunction_methods, swig_DetectionFunction_attributes, &swig_DetectionFunction_Sf_SwigStatic, swig_DetectionFunction_meta, swig_DetectionFunction_bases, swig_DetectionFunction_base_names };

static int _wrap_PPWinThresh_pre_set(lua_State* L) {
  int SWIG_arg = 0;
  PPWinThresh *arg1 = (PPWinThresh *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("PPWinThresh::pre",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PPWinThresh::pre",1,"PPWinThresh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PPWinThresh::pre",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PPWinThresh,0))){
    SWIG_fail_ptr("PPWinThresh_pre_set",1,SWIGTYPE_p_PPWinThresh);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->pre = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PPWinThresh_pre_get(lua_State* L) {
  int SWIG_arg = 0;
  PPWinThresh *arg1 = (PPWinThresh *) 0 ;
  int result;
  
  SWIG_check_num_args("PPWinThresh::pre",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PPWinThresh::pre",1,"PPWinThresh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PPWinThresh,0))){
    SWIG_fail_ptr("PPWinThresh_pre_get",1,SWIGTYPE_p_PPWinThresh);
  }
  
  result = (int) ((arg1)->pre);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PPWinThresh_post_set(lua_State* L) {
  int SWIG_arg = 0;
  PPWinThresh *arg1 = (PPWinThresh *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("PPWinThresh::post",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PPWinThresh::post",1,"PPWinThresh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PPWinThresh::post",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PPWinThresh,0))){
    SWIG_fail_ptr("PPWinThresh_post_set",1,SWIGTYPE_p_PPWinThresh);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->post = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PPWinThresh_post_get(lua_State* L) {
  int SWIG_arg = 0;
  PPWinThresh *arg1 = (PPWinThresh *) 0 ;
  int result;
  
  SWIG_check_num_args("PPWinThresh::post",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PPWinThresh::post",1,"PPWinThresh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PPWinThresh,0))){
    SWIG_fail_ptr("PPWinThresh_post_get",1,SWIGTYPE_p_PPWinThresh);
  }
  
  result = (int) ((arg1)->post);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PPWinThresh(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  PPWinThresh *result = 0 ;
  
  SWIG_check_num_args("PPWinThresh::PPWinThresh",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("PPWinThresh::PPWinThresh",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PPWinThresh::PPWinThresh",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (PPWinThresh *)new PPWinThresh(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PPWinThresh,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PPWinThresh(void *obj) {
PPWinThresh *arg1 = (PPWinThresh *) obj;
delete arg1;
}
static int _proxy__wrap_new_PPWinThresh(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PPWinThresh);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PPWinThresh_attributes[] = {
    { "pre", _wrap_PPWinThresh_pre_get, _wrap_PPWinThresh_pre_set },
    { "post", _wrap_PPWinThresh_post_get, _wrap_PPWinThresh_post_set },
    {0,0,0}
};
static swig_lua_method swig_PPWinThresh_methods[]= {
    {0,0}
};
static swig_lua_method swig_PPWinThresh_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PPWinThresh_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PPWinThresh_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PPWinThresh_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PPWinThresh_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PPWinThresh_Sf_SwigStatic = {
    "PPWinThresh",
    swig_PPWinThresh_Sf_SwigStatic_methods,
    swig_PPWinThresh_Sf_SwigStatic_attributes,
    swig_PPWinThresh_Sf_SwigStatic_constants,
    swig_PPWinThresh_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PPWinThresh_bases[] = {0};
static const char *swig_PPWinThresh_base_names[] = {0};
static swig_lua_class _wrap_class_PPWinThresh = { "PPWinThresh", "PPWinThresh", &SWIGTYPE_p_PPWinThresh,_proxy__wrap_new_PPWinThresh, swig_delete_PPWinThresh, swig_PPWinThresh_methods, swig_PPWinThresh_attributes, &swig_PPWinThresh_Sf_SwigStatic, swig_PPWinThresh_meta, swig_PPWinThresh_bases, swig_PPWinThresh_base_names };

static int _wrap_QFitThresh_a_set(lua_State* L) {
  int SWIG_arg = 0;
  QFitThresh *arg1 = (QFitThresh *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("QFitThresh::a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QFitThresh::a",1,"QFitThresh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QFitThresh::a",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QFitThresh,0))){
    SWIG_fail_ptr("QFitThresh_a_set",1,SWIGTYPE_p_QFitThresh);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->a = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QFitThresh_a_get(lua_State* L) {
  int SWIG_arg = 0;
  QFitThresh *arg1 = (QFitThresh *) 0 ;
  double result;
  
  SWIG_check_num_args("QFitThresh::a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QFitThresh::a",1,"QFitThresh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QFitThresh,0))){
    SWIG_fail_ptr("QFitThresh_a_get",1,SWIGTYPE_p_QFitThresh);
  }
  
  result = (double) ((arg1)->a);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QFitThresh_b_set(lua_State* L) {
  int SWIG_arg = 0;
  QFitThresh *arg1 = (QFitThresh *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("QFitThresh::b",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QFitThresh::b",1,"QFitThresh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QFitThresh::b",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QFitThresh,0))){
    SWIG_fail_ptr("QFitThresh_b_set",1,SWIGTYPE_p_QFitThresh);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->b = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QFitThresh_b_get(lua_State* L) {
  int SWIG_arg = 0;
  QFitThresh *arg1 = (QFitThresh *) 0 ;
  double result;
  
  SWIG_check_num_args("QFitThresh::b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QFitThresh::b",1,"QFitThresh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QFitThresh,0))){
    SWIG_fail_ptr("QFitThresh_b_get",1,SWIGTYPE_p_QFitThresh);
  }
  
  result = (double) ((arg1)->b);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QFitThresh_c_set(lua_State* L) {
  int SWIG_arg = 0;
  QFitThresh *arg1 = (QFitThresh *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("QFitThresh::c",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QFitThresh::c",1,"QFitThresh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QFitThresh::c",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QFitThresh,0))){
    SWIG_fail_ptr("QFitThresh_c_set",1,SWIGTYPE_p_QFitThresh);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->c = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QFitThresh_c_get(lua_State* L) {
  int SWIG_arg = 0;
  QFitThresh *arg1 = (QFitThresh *) 0 ;
  double result;
  
  SWIG_check_num_args("QFitThresh::c",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QFitThresh::c",1,"QFitThresh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QFitThresh,0))){
    SWIG_fail_ptr("QFitThresh_c_get",1,SWIGTYPE_p_QFitThresh);
  }
  
  result = (double) ((arg1)->c);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_QFitThresh(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  QFitThresh *result = 0 ;
  
  SWIG_check_num_args("QFitThresh::QFitThresh",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("QFitThresh::QFitThresh",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QFitThresh::QFitThresh",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("QFitThresh::QFitThresh",3,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (QFitThresh *)new QFitThresh(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_QFitThresh,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_QFitThresh(void *obj) {
QFitThresh *arg1 = (QFitThresh *) obj;
delete arg1;
}
static int _proxy__wrap_new_QFitThresh(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_QFitThresh);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_QFitThresh_attributes[] = {
    { "a", _wrap_QFitThresh_a_get, _wrap_QFitThresh_a_set },
    { "b", _wrap_QFitThresh_b_get, _wrap_QFitThresh_b_set },
    { "c", _wrap_QFitThresh_c_get, _wrap_QFitThresh_c_set },
    {0,0,0}
};
static swig_lua_method swig_QFitThresh_methods[]= {
    {0,0}
};
static swig_lua_method swig_QFitThresh_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_QFitThresh_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_QFitThresh_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_QFitThresh_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_QFitThresh_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_QFitThresh_Sf_SwigStatic = {
    "QFitThresh",
    swig_QFitThresh_Sf_SwigStatic_methods,
    swig_QFitThresh_Sf_SwigStatic_attributes,
    swig_QFitThresh_Sf_SwigStatic_constants,
    swig_QFitThresh_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_QFitThresh_bases[] = {0};
static const char *swig_QFitThresh_base_names[] = {0};
static swig_lua_class _wrap_class_QFitThresh = { "QFitThresh", "QFitThresh", &SWIGTYPE_p_QFitThresh,_proxy__wrap_new_QFitThresh, swig_delete_QFitThresh, swig_QFitThresh_methods, swig_QFitThresh_attributes, &swig_QFitThresh_Sf_SwigStatic, swig_QFitThresh_meta, swig_QFitThresh_bases, swig_QFitThresh_base_names };

static int _wrap_PPickParams_length_set(lua_State* L) {
  int SWIG_arg = 0;
  PPickParams *arg1 = (PPickParams *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("PPickParams::length",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PPickParams::length",1,"PPickParams *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PPickParams::length",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PPickParams,0))){
    SWIG_fail_ptr("PPickParams_length_set",1,SWIGTYPE_p_PPickParams);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->length = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PPickParams_length_get(lua_State* L) {
  int SWIG_arg = 0;
  PPickParams *arg1 = (PPickParams *) 0 ;
  int result;
  
  SWIG_check_num_args("PPickParams::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PPickParams::length",1,"PPickParams *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PPickParams,0))){
    SWIG_fail_ptr("PPickParams_length_get",1,SWIGTYPE_p_PPickParams);
  }
  
  result = (int) ((arg1)->length);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PPickParams_tau_set(lua_State* L) {
  int SWIG_arg = 0;
  PPickParams *arg1 = (PPickParams *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("PPickParams::tau",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PPickParams::tau",1,"PPickParams *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PPickParams::tau",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PPickParams,0))){
    SWIG_fail_ptr("PPickParams_tau_set",1,SWIGTYPE_p_PPickParams);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->tau = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PPickParams_tau_get(lua_State* L) {
  int SWIG_arg = 0;
  PPickParams *arg1 = (PPickParams *) 0 ;
  double result;
  
  SWIG_check_num_args("PPickParams::tau",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PPickParams::tau",1,"PPickParams *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PPickParams,0))){
    SWIG_fail_ptr("PPickParams_tau_get",1,SWIGTYPE_p_PPickParams);
  }
  
  result = (double) ((arg1)->tau);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PPickParams_alpha_set(lua_State* L) {
  int SWIG_arg = 0;
  PPickParams *arg1 = (PPickParams *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("PPickParams::alpha",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PPickParams::alpha",1,"PPickParams *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PPickParams::alpha",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PPickParams,0))){
    SWIG_fail_ptr("PPickParams_alpha_set",1,SWIGTYPE_p_PPickParams);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->alpha = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PPickParams_alpha_get(lua_State* L) {
  int SWIG_arg = 0;
  PPickParams *arg1 = (PPickParams *) 0 ;
  int result;
  
  SWIG_check_num_args("PPickParams::alpha",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PPickParams::alpha",1,"PPickParams *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PPickParams,0))){
    SWIG_fail_ptr("PPickParams_alpha_get",1,SWIGTYPE_p_PPickParams);
  }
  
  result = (int) ((arg1)->alpha);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PPickParams_cutoff_set(lua_State* L) {
  int SWIG_arg = 0;
  PPickParams *arg1 = (PPickParams *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("PPickParams::cutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PPickParams::cutoff",1,"PPickParams *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PPickParams::cutoff",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PPickParams,0))){
    SWIG_fail_ptr("PPickParams_cutoff_set",1,SWIGTYPE_p_PPickParams);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->cutoff = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PPickParams_cutoff_get(lua_State* L) {
  int SWIG_arg = 0;
  PPickParams *arg1 = (PPickParams *) 0 ;
  double result;
  
  SWIG_check_num_args("PPickParams::cutoff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PPickParams::cutoff",1,"PPickParams *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PPickParams,0))){
    SWIG_fail_ptr("PPickParams_cutoff_get",1,SWIGTYPE_p_PPickParams);
  }
  
  result = (double) ((arg1)->cutoff);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PPickParams_LPOrd_set(lua_State* L) {
  int SWIG_arg = 0;
  PPickParams *arg1 = (PPickParams *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("PPickParams::LPOrd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PPickParams::LPOrd",1,"PPickParams *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PPickParams::LPOrd",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PPickParams,0))){
    SWIG_fail_ptr("PPickParams_LPOrd_set",1,SWIGTYPE_p_PPickParams);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->LPOrd = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PPickParams_LPOrd_get(lua_State* L) {
  int SWIG_arg = 0;
  PPickParams *arg1 = (PPickParams *) 0 ;
  int result;
  
  SWIG_check_num_args("PPickParams::LPOrd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PPickParams::LPOrd",1,"PPickParams *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PPickParams,0))){
    SWIG_fail_ptr("PPickParams_LPOrd_get",1,SWIGTYPE_p_PPickParams);
  }
  
  result = (int) ((arg1)->LPOrd);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PPickParams_LPACoeffs_set(lua_State* L) {
  int SWIG_arg = 0;
  PPickParams *arg1 = (PPickParams *) 0 ;
  double *arg2 = (double *) 0 ;
  
  SWIG_check_num_args("PPickParams::LPACoeffs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PPickParams::LPACoeffs",1,"PPickParams *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("PPickParams::LPACoeffs",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PPickParams,0))){
    SWIG_fail_ptr("PPickParams_LPACoeffs_set",1,SWIGTYPE_p_PPickParams);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("PPickParams_LPACoeffs_set",2,SWIGTYPE_p_double);
  }
  
  if (arg1) (arg1)->LPACoeffs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PPickParams_LPACoeffs_get(lua_State* L) {
  int SWIG_arg = 0;
  PPickParams *arg1 = (PPickParams *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("PPickParams::LPACoeffs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PPickParams::LPACoeffs",1,"PPickParams *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PPickParams,0))){
    SWIG_fail_ptr("PPickParams_LPACoeffs_get",1,SWIGTYPE_p_PPickParams);
  }
  
  result = (double *) ((arg1)->LPACoeffs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PPickParams_LPBCoeffs_set(lua_State* L) {
  int SWIG_arg = 0;
  PPickParams *arg1 = (PPickParams *) 0 ;
  double *arg2 = (double *) 0 ;
  
  SWIG_check_num_args("PPickParams::LPBCoeffs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PPickParams::LPBCoeffs",1,"PPickParams *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("PPickParams::LPBCoeffs",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PPickParams,0))){
    SWIG_fail_ptr("PPickParams_LPBCoeffs_set",1,SWIGTYPE_p_PPickParams);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("PPickParams_LPBCoeffs_set",2,SWIGTYPE_p_double);
  }
  
  if (arg1) (arg1)->LPBCoeffs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PPickParams_LPBCoeffs_get(lua_State* L) {
  int SWIG_arg = 0;
  PPickParams *arg1 = (PPickParams *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("PPickParams::LPBCoeffs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PPickParams::LPBCoeffs",1,"PPickParams *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PPickParams,0))){
    SWIG_fail_ptr("PPickParams_LPBCoeffs_get",1,SWIGTYPE_p_PPickParams);
  }
  
  result = (double *) ((arg1)->LPBCoeffs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PPickParams_WinT_set(lua_State* L) {
  int SWIG_arg = 0;
  PPickParams *arg1 = (PPickParams *) 0 ;
  PPWinThresh *arg2 = (PPWinThresh *) 0 ;
  
  SWIG_check_num_args("PPickParams::WinT",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PPickParams::WinT",1,"PPickParams *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("PPickParams::WinT",2,"PPWinThresh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PPickParams,0))){
    SWIG_fail_ptr("PPickParams_WinT_set",1,SWIGTYPE_p_PPickParams);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_PPWinThresh,0))){
    SWIG_fail_ptr("PPickParams_WinT_set",2,SWIGTYPE_p_PPWinThresh);
  }
  
  if (arg1) (arg1)->WinT = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PPickParams_WinT_get(lua_State* L) {
  int SWIG_arg = 0;
  PPickParams *arg1 = (PPickParams *) 0 ;
  PPWinThresh *result = 0 ;
  
  SWIG_check_num_args("PPickParams::WinT",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PPickParams::WinT",1,"PPickParams *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PPickParams,0))){
    SWIG_fail_ptr("PPickParams_WinT_get",1,SWIGTYPE_p_PPickParams);
  }
  
  result = (PPWinThresh *)& ((arg1)->WinT);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PPWinThresh,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PPickParams_QuadThresh_set(lua_State* L) {
  int SWIG_arg = 0;
  PPickParams *arg1 = (PPickParams *) 0 ;
  QFitThresh *arg2 = (QFitThresh *) 0 ;
  
  SWIG_check_num_args("PPickParams::QuadThresh",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PPickParams::QuadThresh",1,"PPickParams *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("PPickParams::QuadThresh",2,"QFitThresh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PPickParams,0))){
    SWIG_fail_ptr("PPickParams_QuadThresh_set",1,SWIGTYPE_p_PPickParams);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QFitThresh,0))){
    SWIG_fail_ptr("PPickParams_QuadThresh_set",2,SWIGTYPE_p_QFitThresh);
  }
  
  if (arg1) (arg1)->QuadThresh = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PPickParams_QuadThresh_get(lua_State* L) {
  int SWIG_arg = 0;
  PPickParams *arg1 = (PPickParams *) 0 ;
  QFitThresh *result = 0 ;
  
  SWIG_check_num_args("PPickParams::QuadThresh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PPickParams::QuadThresh",1,"PPickParams *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PPickParams,0))){
    SWIG_fail_ptr("PPickParams_QuadThresh_get",1,SWIGTYPE_p_PPickParams);
  }
  
  result = (QFitThresh *)& ((arg1)->QuadThresh);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_QFitThresh,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PPickParams_delta_set(lua_State* L) {
  int SWIG_arg = 0;
  PPickParams *arg1 = (PPickParams *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("PPickParams::delta",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PPickParams::delta",1,"PPickParams *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PPickParams::delta",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PPickParams,0))){
    SWIG_fail_ptr("PPickParams_delta_set",1,SWIGTYPE_p_PPickParams);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->delta = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PPickParams_delta_get(lua_State* L) {
  int SWIG_arg = 0;
  PPickParams *arg1 = (PPickParams *) 0 ;
  float result;
  
  SWIG_check_num_args("PPickParams::delta",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PPickParams::delta",1,"PPickParams *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PPickParams,0))){
    SWIG_fail_ptr("PPickParams_delta_get",1,SWIGTYPE_p_PPickParams);
  }
  
  result = (float) ((arg1)->delta);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PPickParams(lua_State* L) {
  int SWIG_arg = 0;
  PPickParams *result = 0 ;
  
  SWIG_check_num_args("PPickParams::PPickParams",0,0)
  result = (PPickParams *)new PPickParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PPickParams,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PPickParams(void *obj) {
PPickParams *arg1 = (PPickParams *) obj;
delete arg1;
}
static int _proxy__wrap_new_PPickParams(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PPickParams);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PPickParams_attributes[] = {
    { "length", _wrap_PPickParams_length_get, _wrap_PPickParams_length_set },
    { "tau", _wrap_PPickParams_tau_get, _wrap_PPickParams_tau_set },
    { "alpha", _wrap_PPickParams_alpha_get, _wrap_PPickParams_alpha_set },
    { "cutoff", _wrap_PPickParams_cutoff_get, _wrap_PPickParams_cutoff_set },
    { "LPOrd", _wrap_PPickParams_LPOrd_get, _wrap_PPickParams_LPOrd_set },
    { "LPACoeffs", _wrap_PPickParams_LPACoeffs_get, _wrap_PPickParams_LPACoeffs_set },
    { "LPBCoeffs", _wrap_PPickParams_LPBCoeffs_get, _wrap_PPickParams_LPBCoeffs_set },
    { "WinT", _wrap_PPickParams_WinT_get, _wrap_PPickParams_WinT_set },
    { "QuadThresh", _wrap_PPickParams_QuadThresh_get, _wrap_PPickParams_QuadThresh_set },
    { "delta", _wrap_PPickParams_delta_get, _wrap_PPickParams_delta_set },
    {0,0,0}
};
static swig_lua_method swig_PPickParams_methods[]= {
    {0,0}
};
static swig_lua_method swig_PPickParams_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PPickParams_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PPickParams_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PPickParams_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PPickParams_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PPickParams_Sf_SwigStatic = {
    "PPickParams",
    swig_PPickParams_Sf_SwigStatic_methods,
    swig_PPickParams_Sf_SwigStatic_attributes,
    swig_PPickParams_Sf_SwigStatic_constants,
    swig_PPickParams_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PPickParams_bases[] = {0};
static const char *swig_PPickParams_base_names[] = {0};
static swig_lua_class _wrap_class_PPickParams = { "PPickParams", "PPickParams", &SWIGTYPE_p_PPickParams,_proxy__wrap_new_PPickParams, swig_delete_PPickParams, swig_PPickParams_methods, swig_PPickParams_attributes, &swig_PPickParams_Sf_SwigStatic, swig_PPickParams_meta, swig_PPickParams_bases, swig_PPickParams_base_names };

static int _wrap_new_PeakPicking(lua_State* L) {
  int SWIG_arg = 0;
  PPickParams arg1 ;
  PPickParams *argp1 ;
  PeakPicking *result = 0 ;
  
  SWIG_check_num_args("PeakPicking::PeakPicking",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("PeakPicking::PeakPicking",1,"PPickParams");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_PPickParams,0))){
    SWIG_fail_ptr("new_PeakPicking",1,SWIGTYPE_p_PPickParams);
  }
  arg1 = *argp1;
  
  result = (PeakPicking *)new PeakPicking(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PeakPicking,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PeakPicking_process(lua_State* L) {
  int SWIG_arg = 0;
  PeakPicking *arg1 = (PeakPicking *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  std::vector< int > *arg4 = 0 ;
  
  SWIG_check_num_args("PeakPicking::process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PeakPicking::process",1,"PeakPicking *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("PeakPicking::process",2,"double *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("PeakPicking::process",3,"int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("PeakPicking::process",4,"std::vector< int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PeakPicking,0))){
    SWIG_fail_ptr("PeakPicking_process",1,SWIGTYPE_p_PeakPicking);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("PeakPicking_process",2,SWIGTYPE_p_double);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("PeakPicking_process",4,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  (arg1)->process(arg2,arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PeakPicking(void *obj) {
PeakPicking *arg1 = (PeakPicking *) obj;
delete arg1;
}
static int _proxy__wrap_new_PeakPicking(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PeakPicking);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PeakPicking_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PeakPicking_methods[]= {
    { "process", _wrap_PeakPicking_process},
    {0,0}
};
static swig_lua_method swig_PeakPicking_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PeakPicking_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PeakPicking_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PeakPicking_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PeakPicking_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PeakPicking_Sf_SwigStatic = {
    "PeakPicking",
    swig_PeakPicking_Sf_SwigStatic_methods,
    swig_PeakPicking_Sf_SwigStatic_attributes,
    swig_PeakPicking_Sf_SwigStatic_constants,
    swig_PeakPicking_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PeakPicking_bases[] = {0};
static const char *swig_PeakPicking_base_names[] = {0};
static swig_lua_class _wrap_class_PeakPicking = { "PeakPicking", "PeakPicking", &SWIGTYPE_p_PeakPicking,_proxy__wrap_new_PeakPicking, swig_delete_PeakPicking, swig_PeakPicking_methods, swig_PeakPicking_attributes, &swig_PeakPicking_Sf_SwigStatic, swig_PeakPicking_meta, swig_PeakPicking_bases, swig_PeakPicking_base_names };

static int _wrap_new_PhaseVocoder(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  PhaseVocoder *result = 0 ;
  
  SWIG_check_num_args("PhaseVocoder::PhaseVocoder",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("PhaseVocoder::PhaseVocoder",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PhaseVocoder::PhaseVocoder",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (PhaseVocoder *)new PhaseVocoder(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PhaseVocoder,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseVocoder_processTimeDomain(lua_State* L) {
  int SWIG_arg = 0;
  PhaseVocoder *arg1 = (PhaseVocoder *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  
  SWIG_check_num_args("PhaseVocoder::processTimeDomain",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PhaseVocoder::processTimeDomain",1,"PhaseVocoder *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("PhaseVocoder::processTimeDomain",2,"double const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("PhaseVocoder::processTimeDomain",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("PhaseVocoder::processTimeDomain",4,"double *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("PhaseVocoder::processTimeDomain",5,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PhaseVocoder,0))){
    SWIG_fail_ptr("PhaseVocoder_processTimeDomain",1,SWIGTYPE_p_PhaseVocoder);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("PhaseVocoder_processTimeDomain",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("PhaseVocoder_processTimeDomain",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("PhaseVocoder_processTimeDomain",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("PhaseVocoder_processTimeDomain",5,SWIGTYPE_p_double);
  }
  
  (arg1)->processTimeDomain((double const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseVocoder_processFrequencyDomain(lua_State* L) {
  int SWIG_arg = 0;
  PhaseVocoder *arg1 = (PhaseVocoder *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  
  SWIG_check_num_args("PhaseVocoder::processFrequencyDomain",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PhaseVocoder::processFrequencyDomain",1,"PhaseVocoder *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("PhaseVocoder::processFrequencyDomain",2,"double const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("PhaseVocoder::processFrequencyDomain",3,"double const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("PhaseVocoder::processFrequencyDomain",4,"double *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("PhaseVocoder::processFrequencyDomain",5,"double *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("PhaseVocoder::processFrequencyDomain",6,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PhaseVocoder,0))){
    SWIG_fail_ptr("PhaseVocoder_processFrequencyDomain",1,SWIGTYPE_p_PhaseVocoder);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("PhaseVocoder_processFrequencyDomain",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("PhaseVocoder_processFrequencyDomain",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("PhaseVocoder_processFrequencyDomain",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("PhaseVocoder_processFrequencyDomain",5,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("PhaseVocoder_processFrequencyDomain",6,SWIGTYPE_p_double);
  }
  
  (arg1)->processFrequencyDomain((double const *)arg2,(double const *)arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaseVocoder_reset(lua_State* L) {
  int SWIG_arg = 0;
  PhaseVocoder *arg1 = (PhaseVocoder *) 0 ;
  
  SWIG_check_num_args("PhaseVocoder::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PhaseVocoder::reset",1,"PhaseVocoder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PhaseVocoder,0))){
    SWIG_fail_ptr("PhaseVocoder_reset",1,SWIGTYPE_p_PhaseVocoder);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PhaseVocoder(void *obj) {
PhaseVocoder *arg1 = (PhaseVocoder *) obj;
delete arg1;
}
static int _proxy__wrap_new_PhaseVocoder(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PhaseVocoder);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PhaseVocoder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PhaseVocoder_methods[]= {
    { "processTimeDomain", _wrap_PhaseVocoder_processTimeDomain},
    { "processFrequencyDomain", _wrap_PhaseVocoder_processFrequencyDomain},
    { "reset", _wrap_PhaseVocoder_reset},
    {0,0}
};
static swig_lua_method swig_PhaseVocoder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PhaseVocoder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PhaseVocoder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PhaseVocoder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PhaseVocoder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PhaseVocoder_Sf_SwigStatic = {
    "PhaseVocoder",
    swig_PhaseVocoder_Sf_SwigStatic_methods,
    swig_PhaseVocoder_Sf_SwigStatic_attributes,
    swig_PhaseVocoder_Sf_SwigStatic_constants,
    swig_PhaseVocoder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PhaseVocoder_bases[] = {0};
static const char *swig_PhaseVocoder_base_names[] = {0};
static swig_lua_class _wrap_class_PhaseVocoder = { "PhaseVocoder", "PhaseVocoder", &SWIGTYPE_p_PhaseVocoder,_proxy__wrap_new_PhaseVocoder, swig_delete_PhaseVocoder, swig_PhaseVocoder_methods, swig_PhaseVocoder_attributes, &swig_PhaseVocoder_Sf_SwigStatic, swig_PhaseVocoder_meta, swig_PhaseVocoder_bases, swig_PhaseVocoder_base_names };

static int _wrap_new_Decimator(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  Decimator *result = 0 ;
  
  SWIG_check_num_args("Decimator::Decimator",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Decimator::Decimator",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Decimator::Decimator",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (Decimator *)new Decimator(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Decimator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Decimator_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Decimator *arg1 = (Decimator *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  SWIG_check_num_args("Decimator::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Decimator::process",1,"Decimator *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Decimator::process",2,"double const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Decimator::process",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Decimator,0))){
    SWIG_fail_ptr("Decimator_process",1,SWIGTYPE_p_Decimator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Decimator_process",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Decimator_process",3,SWIGTYPE_p_double);
  }
  
  (arg1)->process((double const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Decimator_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Decimator *arg1 = (Decimator *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  
  SWIG_check_num_args("Decimator::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Decimator::process",1,"Decimator *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Decimator::process",2,"float const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Decimator::process",3,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Decimator,0))){
    SWIG_fail_ptr("Decimator_process",1,SWIGTYPE_p_Decimator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Decimator_process",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Decimator_process",3,SWIGTYPE_p_float);
  }
  
  (arg1)->process((float const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Decimator_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Decimator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Decimator_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Decimator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Decimator_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Decimator_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Decimator::process(double const *,double *)\n"
    "    Decimator::process(float const *,float *)\n");
  lua_error(L);return 0;
}


static int _wrap_Decimator_getFactor(lua_State* L) {
  int SWIG_arg = 0;
  Decimator *arg1 = (Decimator *) 0 ;
  int result;
  
  SWIG_check_num_args("Decimator::getFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Decimator::getFactor",1,"Decimator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Decimator,0))){
    SWIG_fail_ptr("Decimator_getFactor",1,SWIGTYPE_p_Decimator);
  }
  
  result = (int)((Decimator const *)arg1)->getFactor();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Decimator_getHighestSupportedFactor(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("Decimator::getHighestSupportedFactor",0,0)
  result = (int)Decimator::getHighestSupportedFactor();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Decimator_resetFilter(lua_State* L) {
  int SWIG_arg = 0;
  Decimator *arg1 = (Decimator *) 0 ;
  
  SWIG_check_num_args("Decimator::resetFilter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Decimator::resetFilter",1,"Decimator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Decimator,0))){
    SWIG_fail_ptr("Decimator_resetFilter",1,SWIGTYPE_p_Decimator);
  }
  
  (arg1)->resetFilter();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Decimator(void *obj) {
Decimator *arg1 = (Decimator *) obj;
delete arg1;
}
static int _proxy__wrap_new_Decimator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Decimator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Decimator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Decimator_methods[]= {
    { "process", _wrap_Decimator_process},
    { "getFactor", _wrap_Decimator_getFactor},
    { "resetFilter", _wrap_Decimator_resetFilter},
    {0,0}
};
static swig_lua_method swig_Decimator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Decimator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Decimator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Decimator_Sf_SwigStatic_methods[]= {
    { "getHighestSupportedFactor", _wrap_Decimator_getHighestSupportedFactor},
    {0,0}
};
static swig_lua_class* swig_Decimator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Decimator_Sf_SwigStatic = {
    "Decimator",
    swig_Decimator_Sf_SwigStatic_methods,
    swig_Decimator_Sf_SwigStatic_attributes,
    swig_Decimator_Sf_SwigStatic_constants,
    swig_Decimator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Decimator_bases[] = {0};
static const char *swig_Decimator_base_names[] = {0};
static swig_lua_class _wrap_class_Decimator = { "Decimator", "Decimator", &SWIGTYPE_p_Decimator,_proxy__wrap_new_Decimator, swig_delete_Decimator, swig_Decimator_methods, swig_Decimator_attributes, &swig_Decimator_Sf_SwigStatic, swig_Decimator_meta, swig_Decimator_bases, swig_Decimator_base_names };

static int _wrap_DecimatorB_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DecimatorB *arg1 = (DecimatorB *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  SWIG_check_num_args("DecimatorB::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DecimatorB::process",1,"DecimatorB *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DecimatorB::process",2,"double const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("DecimatorB::process",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DecimatorB,0))){
    SWIG_fail_ptr("DecimatorB_process",1,SWIGTYPE_p_DecimatorB);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("DecimatorB_process",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("DecimatorB_process",3,SWIGTYPE_p_double);
  }
  
  (arg1)->process((double const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DecimatorB_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DecimatorB *arg1 = (DecimatorB *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  
  SWIG_check_num_args("DecimatorB::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DecimatorB::process",1,"DecimatorB *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DecimatorB::process",2,"float const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("DecimatorB::process",3,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DecimatorB,0))){
    SWIG_fail_ptr("DecimatorB_process",1,SWIGTYPE_p_DecimatorB);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DecimatorB_process",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DecimatorB_process",3,SWIGTYPE_p_float);
  }
  
  (arg1)->process((float const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DecimatorB_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DecimatorB, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DecimatorB_process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DecimatorB, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DecimatorB_process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DecimatorB_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DecimatorB::process(double const *,double *)\n"
    "    DecimatorB::process(float const *,float *)\n");
  lua_error(L);return 0;
}


static int _wrap_new_DecimatorB(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  DecimatorB *result = 0 ;
  
  SWIG_check_num_args("DecimatorB::DecimatorB",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DecimatorB::DecimatorB",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DecimatorB::DecimatorB",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (DecimatorB *)new DecimatorB(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DecimatorB,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DecimatorB_getFactor(lua_State* L) {
  int SWIG_arg = 0;
  DecimatorB *arg1 = (DecimatorB *) 0 ;
  int result;
  
  SWIG_check_num_args("DecimatorB::getFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DecimatorB::getFactor",1,"DecimatorB const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DecimatorB,0))){
    SWIG_fail_ptr("DecimatorB_getFactor",1,SWIGTYPE_p_DecimatorB);
  }
  
  result = (int)((DecimatorB const *)arg1)->getFactor();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DecimatorB(void *obj) {
DecimatorB *arg1 = (DecimatorB *) obj;
delete arg1;
}
static int _proxy__wrap_new_DecimatorB(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DecimatorB);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DecimatorB_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DecimatorB_methods[]= {
    { "process", _wrap_DecimatorB_process},
    { "getFactor", _wrap_DecimatorB_getFactor},
    {0,0}
};
static swig_lua_method swig_DecimatorB_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DecimatorB_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DecimatorB_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DecimatorB_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DecimatorB_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DecimatorB_Sf_SwigStatic = {
    "DecimatorB",
    swig_DecimatorB_Sf_SwigStatic_methods,
    swig_DecimatorB_Sf_SwigStatic_attributes,
    swig_DecimatorB_Sf_SwigStatic_constants,
    swig_DecimatorB_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DecimatorB_bases[] = {0};
static const char *swig_DecimatorB_base_names[] = {0};
static swig_lua_class _wrap_class_DecimatorB = { "DecimatorB", "DecimatorB", &SWIGTYPE_p_DecimatorB,_proxy__wrap_new_DecimatorB, swig_delete_DecimatorB, swig_DecimatorB_methods, swig_DecimatorB_attributes, &swig_DecimatorB_Sf_SwigStatic, swig_DecimatorB_meta, swig_DecimatorB_bases, swig_DecimatorB_base_names };

static int _wrap_new_Resampler__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  Resampler *result = 0 ;
  
  SWIG_check_num_args("Resampler::Resampler",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Resampler::Resampler",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Resampler::Resampler",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (Resampler *)new Resampler(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Resampler,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Resampler__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  Resampler *result = 0 ;
  
  SWIG_check_num_args("Resampler::Resampler",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Resampler::Resampler",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Resampler::Resampler",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Resampler::Resampler",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Resampler::Resampler",4,"double");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (Resampler *)new Resampler(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Resampler,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Resampler(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Resampler__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Resampler__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Resampler'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Resampler::Resampler(int,int)\n"
    "    Resampler::Resampler(int,int,double,double)\n");
  lua_error(L);return 0;
}


static int _wrap_Resampler_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Resampler *arg1 = (Resampler *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("Resampler::process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Resampler::process",1,"Resampler *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Resampler::process",2,"double const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Resampler::process",3,"double *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Resampler::process",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Resampler,0))){
    SWIG_fail_ptr("Resampler_process",1,SWIGTYPE_p_Resampler);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Resampler_process",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Resampler_process",3,SWIGTYPE_p_double);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->process((double const *)arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resampler_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Resampler *arg1 = (Resampler *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  SwigValueWrapper< std::vector< double > > result;
  
  SWIG_check_num_args("Resampler::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Resampler::process",1,"Resampler *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Resampler::process",2,"double const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Resampler::process",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Resampler,0))){
    SWIG_fail_ptr("Resampler_process",1,SWIGTYPE_p_Resampler);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Resampler_process",2,SWIGTYPE_p_double);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (arg1)->process((double const *)arg2,arg3);
  {
    std::vector< double > * resultptr = new std::vector< double >((const std::vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resampler_process(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Resampler, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Resampler_process__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Resampler, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Resampler_process__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Resampler_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Resampler::process(double const *,double *,int)\n"
    "    Resampler::process(double const *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_Resampler_getLatency(lua_State* L) {
  int SWIG_arg = 0;
  Resampler *arg1 = (Resampler *) 0 ;
  int result;
  
  SWIG_check_num_args("Resampler::getLatency",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Resampler::getLatency",1,"Resampler const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Resampler,0))){
    SWIG_fail_ptr("Resampler_getLatency",1,SWIGTYPE_p_Resampler);
  }
  
  result = (int)((Resampler const *)arg1)->getLatency();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resampler_resample(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  SwigValueWrapper< std::vector< double > > result;
  
  SWIG_check_num_args("Resampler::resample",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Resampler::resample",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Resampler::resample",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Resampler::resample",3,"double const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Resampler::resample",4,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Resampler_resample",3,SWIGTYPE_p_double);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  result = Resampler::resample(arg1,arg2,(double const *)arg3,arg4);
  {
    std::vector< double > * resultptr = new std::vector< double >((const std::vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Resampler(void *obj) {
Resampler *arg1 = (Resampler *) obj;
delete arg1;
}
static int _proxy__wrap_new_Resampler(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Resampler);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Resampler_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Resampler_methods[]= {
    { "process", _wrap_Resampler_process},
    { "getLatency", _wrap_Resampler_getLatency},
    {0,0}
};
static swig_lua_method swig_Resampler_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Resampler_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Resampler_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Resampler_Sf_SwigStatic_methods[]= {
    { "resample", _wrap_Resampler_resample},
    {0,0}
};
static swig_lua_class* swig_Resampler_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Resampler_Sf_SwigStatic = {
    "Resampler",
    swig_Resampler_Sf_SwigStatic_methods,
    swig_Resampler_Sf_SwigStatic_attributes,
    swig_Resampler_Sf_SwigStatic_constants,
    swig_Resampler_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Resampler_bases[] = {0};
static const char *swig_Resampler_base_names[] = {0};
static swig_lua_class _wrap_class_Resampler = { "Resampler", "Resampler", &SWIGTYPE_p_Resampler,_proxy__wrap_new_Resampler, swig_delete_Resampler, swig_Resampler_methods, swig_Resampler_attributes, &swig_Resampler_Sf_SwigStatic, swig_Resampler_meta, swig_Resampler_bases, swig_Resampler_base_names };

static int _wrap_new_BeatSpectrum(lua_State* L) {
  int SWIG_arg = 0;
  BeatSpectrum *result = 0 ;
  
  SWIG_check_num_args("BeatSpectrum::BeatSpectrum",0,0)
  result = (BeatSpectrum *)new BeatSpectrum();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BeatSpectrum,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeatSpectrum_process(lua_State* L) {
  int SWIG_arg = 0;
  BeatSpectrum *arg1 = (BeatSpectrum *) 0 ;
  std::vector< std::vector< double > > *arg2 = 0 ;
  SwigValueWrapper< std::vector< double > > result;
  
  SWIG_check_num_args("BeatSpectrum::process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BeatSpectrum::process",1,"BeatSpectrum *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BeatSpectrum::process",2,"std::vector< std::vector< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BeatSpectrum,0))){
    SWIG_fail_ptr("BeatSpectrum_process",1,SWIGTYPE_p_BeatSpectrum);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0))){
    SWIG_fail_ptr("BeatSpectrum_process",2,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t);
  }
  
  result = (arg1)->process((std::vector< std::vector< double > > const &)*arg2);
  {
    std::vector< double > * resultptr = new std::vector< double >((const std::vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BeatSpectrum(void *obj) {
BeatSpectrum *arg1 = (BeatSpectrum *) obj;
delete arg1;
}
static int _proxy__wrap_new_BeatSpectrum(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BeatSpectrum);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BeatSpectrum_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BeatSpectrum_methods[]= {
    { "process", _wrap_BeatSpectrum_process},
    {0,0}
};
static swig_lua_method swig_BeatSpectrum_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BeatSpectrum_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BeatSpectrum_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BeatSpectrum_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BeatSpectrum_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BeatSpectrum_Sf_SwigStatic = {
    "BeatSpectrum",
    swig_BeatSpectrum_Sf_SwigStatic_methods,
    swig_BeatSpectrum_Sf_SwigStatic_attributes,
    swig_BeatSpectrum_Sf_SwigStatic_constants,
    swig_BeatSpectrum_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BeatSpectrum_bases[] = {0};
static const char *swig_BeatSpectrum_base_names[] = {0};
static swig_lua_class _wrap_class_BeatSpectrum = { "BeatSpectrum", "BeatSpectrum", &SWIGTYPE_p_BeatSpectrum,_proxy__wrap_new_BeatSpectrum, swig_delete_BeatSpectrum, swig_BeatSpectrum_methods, swig_BeatSpectrum_attributes, &swig_BeatSpectrum_Sf_SwigStatic, swig_BeatSpectrum_meta, swig_BeatSpectrum_bases, swig_BeatSpectrum_base_names };

static int _wrap_new_ClusterMeltSegmenterParams(lua_State* L) {
  int SWIG_arg = 0;
  ClusterMeltSegmenterParams *result = 0 ;
  
  SWIG_check_num_args("ClusterMeltSegmenterParams::ClusterMeltSegmenterParams",0,0)
  result = (ClusterMeltSegmenterParams *)new ClusterMeltSegmenterParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ClusterMeltSegmenterParams,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClusterMeltSegmenterParams_featureType_set(lua_State* L) {
  int SWIG_arg = 0;
  ClusterMeltSegmenterParams *arg1 = (ClusterMeltSegmenterParams *) 0 ;
  feature_types arg2 ;
  
  SWIG_check_num_args("ClusterMeltSegmenterParams::featureType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClusterMeltSegmenterParams::featureType",1,"ClusterMeltSegmenterParams *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ClusterMeltSegmenterParams::featureType",2,"feature_types");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClusterMeltSegmenterParams,0))){
    SWIG_fail_ptr("ClusterMeltSegmenterParams_featureType_set",1,SWIGTYPE_p_ClusterMeltSegmenterParams);
  }
  
  arg2 = (feature_types)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->featureType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClusterMeltSegmenterParams_featureType_get(lua_State* L) {
  int SWIG_arg = 0;
  ClusterMeltSegmenterParams *arg1 = (ClusterMeltSegmenterParams *) 0 ;
  feature_types result;
  
  SWIG_check_num_args("ClusterMeltSegmenterParams::featureType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClusterMeltSegmenterParams::featureType",1,"ClusterMeltSegmenterParams *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClusterMeltSegmenterParams,0))){
    SWIG_fail_ptr("ClusterMeltSegmenterParams_featureType_get",1,SWIGTYPE_p_ClusterMeltSegmenterParams);
  }
  
  result = (feature_types) ((arg1)->featureType);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClusterMeltSegmenterParams_hopSize_set(lua_State* L) {
  int SWIG_arg = 0;
  ClusterMeltSegmenterParams *arg1 = (ClusterMeltSegmenterParams *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("ClusterMeltSegmenterParams::hopSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClusterMeltSegmenterParams::hopSize",1,"ClusterMeltSegmenterParams *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ClusterMeltSegmenterParams::hopSize",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClusterMeltSegmenterParams,0))){
    SWIG_fail_ptr("ClusterMeltSegmenterParams_hopSize_set",1,SWIGTYPE_p_ClusterMeltSegmenterParams);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->hopSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClusterMeltSegmenterParams_hopSize_get(lua_State* L) {
  int SWIG_arg = 0;
  ClusterMeltSegmenterParams *arg1 = (ClusterMeltSegmenterParams *) 0 ;
  double result;
  
  SWIG_check_num_args("ClusterMeltSegmenterParams::hopSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClusterMeltSegmenterParams::hopSize",1,"ClusterMeltSegmenterParams *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClusterMeltSegmenterParams,0))){
    SWIG_fail_ptr("ClusterMeltSegmenterParams_hopSize_get",1,SWIGTYPE_p_ClusterMeltSegmenterParams);
  }
  
  result = (double) ((arg1)->hopSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClusterMeltSegmenterParams_windowSize_set(lua_State* L) {
  int SWIG_arg = 0;
  ClusterMeltSegmenterParams *arg1 = (ClusterMeltSegmenterParams *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("ClusterMeltSegmenterParams::windowSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClusterMeltSegmenterParams::windowSize",1,"ClusterMeltSegmenterParams *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ClusterMeltSegmenterParams::windowSize",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClusterMeltSegmenterParams,0))){
    SWIG_fail_ptr("ClusterMeltSegmenterParams_windowSize_set",1,SWIGTYPE_p_ClusterMeltSegmenterParams);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->windowSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClusterMeltSegmenterParams_windowSize_get(lua_State* L) {
  int SWIG_arg = 0;
  ClusterMeltSegmenterParams *arg1 = (ClusterMeltSegmenterParams *) 0 ;
  double result;
  
  SWIG_check_num_args("ClusterMeltSegmenterParams::windowSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClusterMeltSegmenterParams::windowSize",1,"ClusterMeltSegmenterParams *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClusterMeltSegmenterParams,0))){
    SWIG_fail_ptr("ClusterMeltSegmenterParams_windowSize_get",1,SWIGTYPE_p_ClusterMeltSegmenterParams);
  }
  
  result = (double) ((arg1)->windowSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClusterMeltSegmenterParams_fmin_set(lua_State* L) {
  int SWIG_arg = 0;
  ClusterMeltSegmenterParams *arg1 = (ClusterMeltSegmenterParams *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ClusterMeltSegmenterParams::fmin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClusterMeltSegmenterParams::fmin",1,"ClusterMeltSegmenterParams *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ClusterMeltSegmenterParams::fmin",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClusterMeltSegmenterParams,0))){
    SWIG_fail_ptr("ClusterMeltSegmenterParams_fmin_set",1,SWIGTYPE_p_ClusterMeltSegmenterParams);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->fmin = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClusterMeltSegmenterParams_fmin_get(lua_State* L) {
  int SWIG_arg = 0;
  ClusterMeltSegmenterParams *arg1 = (ClusterMeltSegmenterParams *) 0 ;
  int result;
  
  SWIG_check_num_args("ClusterMeltSegmenterParams::fmin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClusterMeltSegmenterParams::fmin",1,"ClusterMeltSegmenterParams *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClusterMeltSegmenterParams,0))){
    SWIG_fail_ptr("ClusterMeltSegmenterParams_fmin_get",1,SWIGTYPE_p_ClusterMeltSegmenterParams);
  }
  
  result = (int) ((arg1)->fmin);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClusterMeltSegmenterParams_fmax_set(lua_State* L) {
  int SWIG_arg = 0;
  ClusterMeltSegmenterParams *arg1 = (ClusterMeltSegmenterParams *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ClusterMeltSegmenterParams::fmax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClusterMeltSegmenterParams::fmax",1,"ClusterMeltSegmenterParams *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ClusterMeltSegmenterParams::fmax",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClusterMeltSegmenterParams,0))){
    SWIG_fail_ptr("ClusterMeltSegmenterParams_fmax_set",1,SWIGTYPE_p_ClusterMeltSegmenterParams);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->fmax = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClusterMeltSegmenterParams_fmax_get(lua_State* L) {
  int SWIG_arg = 0;
  ClusterMeltSegmenterParams *arg1 = (ClusterMeltSegmenterParams *) 0 ;
  int result;
  
  SWIG_check_num_args("ClusterMeltSegmenterParams::fmax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClusterMeltSegmenterParams::fmax",1,"ClusterMeltSegmenterParams *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClusterMeltSegmenterParams,0))){
    SWIG_fail_ptr("ClusterMeltSegmenterParams_fmax_get",1,SWIGTYPE_p_ClusterMeltSegmenterParams);
  }
  
  result = (int) ((arg1)->fmax);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClusterMeltSegmenterParams_nbins_set(lua_State* L) {
  int SWIG_arg = 0;
  ClusterMeltSegmenterParams *arg1 = (ClusterMeltSegmenterParams *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ClusterMeltSegmenterParams::nbins",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClusterMeltSegmenterParams::nbins",1,"ClusterMeltSegmenterParams *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ClusterMeltSegmenterParams::nbins",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClusterMeltSegmenterParams,0))){
    SWIG_fail_ptr("ClusterMeltSegmenterParams_nbins_set",1,SWIGTYPE_p_ClusterMeltSegmenterParams);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->nbins = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClusterMeltSegmenterParams_nbins_get(lua_State* L) {
  int SWIG_arg = 0;
  ClusterMeltSegmenterParams *arg1 = (ClusterMeltSegmenterParams *) 0 ;
  int result;
  
  SWIG_check_num_args("ClusterMeltSegmenterParams::nbins",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClusterMeltSegmenterParams::nbins",1,"ClusterMeltSegmenterParams *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClusterMeltSegmenterParams,0))){
    SWIG_fail_ptr("ClusterMeltSegmenterParams_nbins_get",1,SWIGTYPE_p_ClusterMeltSegmenterParams);
  }
  
  result = (int) ((arg1)->nbins);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClusterMeltSegmenterParams_ncomponents_set(lua_State* L) {
  int SWIG_arg = 0;
  ClusterMeltSegmenterParams *arg1 = (ClusterMeltSegmenterParams *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ClusterMeltSegmenterParams::ncomponents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClusterMeltSegmenterParams::ncomponents",1,"ClusterMeltSegmenterParams *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ClusterMeltSegmenterParams::ncomponents",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClusterMeltSegmenterParams,0))){
    SWIG_fail_ptr("ClusterMeltSegmenterParams_ncomponents_set",1,SWIGTYPE_p_ClusterMeltSegmenterParams);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->ncomponents = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClusterMeltSegmenterParams_ncomponents_get(lua_State* L) {
  int SWIG_arg = 0;
  ClusterMeltSegmenterParams *arg1 = (ClusterMeltSegmenterParams *) 0 ;
  int result;
  
  SWIG_check_num_args("ClusterMeltSegmenterParams::ncomponents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClusterMeltSegmenterParams::ncomponents",1,"ClusterMeltSegmenterParams *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClusterMeltSegmenterParams,0))){
    SWIG_fail_ptr("ClusterMeltSegmenterParams_ncomponents_get",1,SWIGTYPE_p_ClusterMeltSegmenterParams);
  }
  
  result = (int) ((arg1)->ncomponents);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClusterMeltSegmenterParams_nHMMStates_set(lua_State* L) {
  int SWIG_arg = 0;
  ClusterMeltSegmenterParams *arg1 = (ClusterMeltSegmenterParams *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ClusterMeltSegmenterParams::nHMMStates",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClusterMeltSegmenterParams::nHMMStates",1,"ClusterMeltSegmenterParams *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ClusterMeltSegmenterParams::nHMMStates",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClusterMeltSegmenterParams,0))){
    SWIG_fail_ptr("ClusterMeltSegmenterParams_nHMMStates_set",1,SWIGTYPE_p_ClusterMeltSegmenterParams);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->nHMMStates = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClusterMeltSegmenterParams_nHMMStates_get(lua_State* L) {
  int SWIG_arg = 0;
  ClusterMeltSegmenterParams *arg1 = (ClusterMeltSegmenterParams *) 0 ;
  int result;
  
  SWIG_check_num_args("ClusterMeltSegmenterParams::nHMMStates",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClusterMeltSegmenterParams::nHMMStates",1,"ClusterMeltSegmenterParams *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClusterMeltSegmenterParams,0))){
    SWIG_fail_ptr("ClusterMeltSegmenterParams_nHMMStates_get",1,SWIGTYPE_p_ClusterMeltSegmenterParams);
  }
  
  result = (int) ((arg1)->nHMMStates);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClusterMeltSegmenterParams_nclusters_set(lua_State* L) {
  int SWIG_arg = 0;
  ClusterMeltSegmenterParams *arg1 = (ClusterMeltSegmenterParams *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ClusterMeltSegmenterParams::nclusters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClusterMeltSegmenterParams::nclusters",1,"ClusterMeltSegmenterParams *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ClusterMeltSegmenterParams::nclusters",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClusterMeltSegmenterParams,0))){
    SWIG_fail_ptr("ClusterMeltSegmenterParams_nclusters_set",1,SWIGTYPE_p_ClusterMeltSegmenterParams);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->nclusters = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClusterMeltSegmenterParams_nclusters_get(lua_State* L) {
  int SWIG_arg = 0;
  ClusterMeltSegmenterParams *arg1 = (ClusterMeltSegmenterParams *) 0 ;
  int result;
  
  SWIG_check_num_args("ClusterMeltSegmenterParams::nclusters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClusterMeltSegmenterParams::nclusters",1,"ClusterMeltSegmenterParams *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClusterMeltSegmenterParams,0))){
    SWIG_fail_ptr("ClusterMeltSegmenterParams_nclusters_get",1,SWIGTYPE_p_ClusterMeltSegmenterParams);
  }
  
  result = (int) ((arg1)->nclusters);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClusterMeltSegmenterParams_histogramLength_set(lua_State* L) {
  int SWIG_arg = 0;
  ClusterMeltSegmenterParams *arg1 = (ClusterMeltSegmenterParams *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ClusterMeltSegmenterParams::histogramLength",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClusterMeltSegmenterParams::histogramLength",1,"ClusterMeltSegmenterParams *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ClusterMeltSegmenterParams::histogramLength",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClusterMeltSegmenterParams,0))){
    SWIG_fail_ptr("ClusterMeltSegmenterParams_histogramLength_set",1,SWIGTYPE_p_ClusterMeltSegmenterParams);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->histogramLength = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClusterMeltSegmenterParams_histogramLength_get(lua_State* L) {
  int SWIG_arg = 0;
  ClusterMeltSegmenterParams *arg1 = (ClusterMeltSegmenterParams *) 0 ;
  int result;
  
  SWIG_check_num_args("ClusterMeltSegmenterParams::histogramLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClusterMeltSegmenterParams::histogramLength",1,"ClusterMeltSegmenterParams *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClusterMeltSegmenterParams,0))){
    SWIG_fail_ptr("ClusterMeltSegmenterParams_histogramLength_get",1,SWIGTYPE_p_ClusterMeltSegmenterParams);
  }
  
  result = (int) ((arg1)->histogramLength);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClusterMeltSegmenterParams_neighbourhoodLimit_set(lua_State* L) {
  int SWIG_arg = 0;
  ClusterMeltSegmenterParams *arg1 = (ClusterMeltSegmenterParams *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ClusterMeltSegmenterParams::neighbourhoodLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClusterMeltSegmenterParams::neighbourhoodLimit",1,"ClusterMeltSegmenterParams *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ClusterMeltSegmenterParams::neighbourhoodLimit",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClusterMeltSegmenterParams,0))){
    SWIG_fail_ptr("ClusterMeltSegmenterParams_neighbourhoodLimit_set",1,SWIGTYPE_p_ClusterMeltSegmenterParams);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->neighbourhoodLimit = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClusterMeltSegmenterParams_neighbourhoodLimit_get(lua_State* L) {
  int SWIG_arg = 0;
  ClusterMeltSegmenterParams *arg1 = (ClusterMeltSegmenterParams *) 0 ;
  int result;
  
  SWIG_check_num_args("ClusterMeltSegmenterParams::neighbourhoodLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClusterMeltSegmenterParams::neighbourhoodLimit",1,"ClusterMeltSegmenterParams *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClusterMeltSegmenterParams,0))){
    SWIG_fail_ptr("ClusterMeltSegmenterParams_neighbourhoodLimit_get",1,SWIGTYPE_p_ClusterMeltSegmenterParams);
  }
  
  result = (int) ((arg1)->neighbourhoodLimit);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ClusterMeltSegmenterParams(void *obj) {
ClusterMeltSegmenterParams *arg1 = (ClusterMeltSegmenterParams *) obj;
delete arg1;
}
static int _proxy__wrap_new_ClusterMeltSegmenterParams(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ClusterMeltSegmenterParams);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ClusterMeltSegmenterParams_attributes[] = {
    { "featureType", _wrap_ClusterMeltSegmenterParams_featureType_get, _wrap_ClusterMeltSegmenterParams_featureType_set },
    { "hopSize", _wrap_ClusterMeltSegmenterParams_hopSize_get, _wrap_ClusterMeltSegmenterParams_hopSize_set },
    { "windowSize", _wrap_ClusterMeltSegmenterParams_windowSize_get, _wrap_ClusterMeltSegmenterParams_windowSize_set },
    { "fmin", _wrap_ClusterMeltSegmenterParams_fmin_get, _wrap_ClusterMeltSegmenterParams_fmin_set },
    { "fmax", _wrap_ClusterMeltSegmenterParams_fmax_get, _wrap_ClusterMeltSegmenterParams_fmax_set },
    { "nbins", _wrap_ClusterMeltSegmenterParams_nbins_get, _wrap_ClusterMeltSegmenterParams_nbins_set },
    { "ncomponents", _wrap_ClusterMeltSegmenterParams_ncomponents_get, _wrap_ClusterMeltSegmenterParams_ncomponents_set },
    { "nHMMStates", _wrap_ClusterMeltSegmenterParams_nHMMStates_get, _wrap_ClusterMeltSegmenterParams_nHMMStates_set },
    { "nclusters", _wrap_ClusterMeltSegmenterParams_nclusters_get, _wrap_ClusterMeltSegmenterParams_nclusters_set },
    { "histogramLength", _wrap_ClusterMeltSegmenterParams_histogramLength_get, _wrap_ClusterMeltSegmenterParams_histogramLength_set },
    { "neighbourhoodLimit", _wrap_ClusterMeltSegmenterParams_neighbourhoodLimit_get, _wrap_ClusterMeltSegmenterParams_neighbourhoodLimit_set },
    {0,0,0}
};
static swig_lua_method swig_ClusterMeltSegmenterParams_methods[]= {
    {0,0}
};
static swig_lua_method swig_ClusterMeltSegmenterParams_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ClusterMeltSegmenterParams_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ClusterMeltSegmenterParams_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ClusterMeltSegmenterParams_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ClusterMeltSegmenterParams_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ClusterMeltSegmenterParams_Sf_SwigStatic = {
    "ClusterMeltSegmenterParams",
    swig_ClusterMeltSegmenterParams_Sf_SwigStatic_methods,
    swig_ClusterMeltSegmenterParams_Sf_SwigStatic_attributes,
    swig_ClusterMeltSegmenterParams_Sf_SwigStatic_constants,
    swig_ClusterMeltSegmenterParams_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ClusterMeltSegmenterParams_bases[] = {0};
static const char *swig_ClusterMeltSegmenterParams_base_names[] = {0};
static swig_lua_class _wrap_class_ClusterMeltSegmenterParams = { "ClusterMeltSegmenterParams", "ClusterMeltSegmenterParams", &SWIGTYPE_p_ClusterMeltSegmenterParams,_proxy__wrap_new_ClusterMeltSegmenterParams, swig_delete_ClusterMeltSegmenterParams, swig_ClusterMeltSegmenterParams_methods, swig_ClusterMeltSegmenterParams_attributes, &swig_ClusterMeltSegmenterParams_Sf_SwigStatic, swig_ClusterMeltSegmenterParams_meta, swig_ClusterMeltSegmenterParams_bases, swig_ClusterMeltSegmenterParams_base_names };

static int _wrap_new_ClusterMeltSegmenter(lua_State* L) {
  int SWIG_arg = 0;
  ClusterMeltSegmenterParams arg1 ;
  ClusterMeltSegmenterParams *argp1 ;
  ClusterMeltSegmenter *result = 0 ;
  
  SWIG_check_num_args("ClusterMeltSegmenter::ClusterMeltSegmenter",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ClusterMeltSegmenter::ClusterMeltSegmenter",1,"ClusterMeltSegmenterParams");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ClusterMeltSegmenterParams,0))){
    SWIG_fail_ptr("new_ClusterMeltSegmenter",1,SWIGTYPE_p_ClusterMeltSegmenterParams);
  }
  arg1 = *argp1;
  
  result = (ClusterMeltSegmenter *)new ClusterMeltSegmenter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ClusterMeltSegmenter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClusterMeltSegmenter_initialise(lua_State* L) {
  int SWIG_arg = 0;
  ClusterMeltSegmenter *arg1 = (ClusterMeltSegmenter *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ClusterMeltSegmenter::initialise",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClusterMeltSegmenter::initialise",1,"ClusterMeltSegmenter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ClusterMeltSegmenter::initialise",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClusterMeltSegmenter,0))){
    SWIG_fail_ptr("ClusterMeltSegmenter_initialise",1,SWIGTYPE_p_ClusterMeltSegmenter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->initialise(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClusterMeltSegmenter_getWindowsize(lua_State* L) {
  int SWIG_arg = 0;
  ClusterMeltSegmenter *arg1 = (ClusterMeltSegmenter *) 0 ;
  int result;
  
  SWIG_check_num_args("ClusterMeltSegmenter::getWindowsize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClusterMeltSegmenter::getWindowsize",1,"ClusterMeltSegmenter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClusterMeltSegmenter,0))){
    SWIG_fail_ptr("ClusterMeltSegmenter_getWindowsize",1,SWIGTYPE_p_ClusterMeltSegmenter);
  }
  
  result = (int)(arg1)->getWindowsize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClusterMeltSegmenter_getHopsize(lua_State* L) {
  int SWIG_arg = 0;
  ClusterMeltSegmenter *arg1 = (ClusterMeltSegmenter *) 0 ;
  int result;
  
  SWIG_check_num_args("ClusterMeltSegmenter::getHopsize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClusterMeltSegmenter::getHopsize",1,"ClusterMeltSegmenter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClusterMeltSegmenter,0))){
    SWIG_fail_ptr("ClusterMeltSegmenter_getHopsize",1,SWIGTYPE_p_ClusterMeltSegmenter);
  }
  
  result = (int)(arg1)->getHopsize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClusterMeltSegmenter_extractFeatures(lua_State* L) {
  int SWIG_arg = 0;
  ClusterMeltSegmenter *arg1 = (ClusterMeltSegmenter *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("ClusterMeltSegmenter::extractFeatures",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClusterMeltSegmenter::extractFeatures",1,"ClusterMeltSegmenter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ClusterMeltSegmenter::extractFeatures",2,"double const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ClusterMeltSegmenter::extractFeatures",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClusterMeltSegmenter,0))){
    SWIG_fail_ptr("ClusterMeltSegmenter_extractFeatures",1,SWIGTYPE_p_ClusterMeltSegmenter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ClusterMeltSegmenter_extractFeatures",2,SWIGTYPE_p_double);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->extractFeatures((double const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClusterMeltSegmenter_setFeatures(lua_State* L) {
  int SWIG_arg = 0;
  ClusterMeltSegmenter *arg1 = (ClusterMeltSegmenter *) 0 ;
  std::vector< std::vector< double > > *arg2 = 0 ;
  
  SWIG_check_num_args("ClusterMeltSegmenter::setFeatures",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClusterMeltSegmenter::setFeatures",1,"ClusterMeltSegmenter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ClusterMeltSegmenter::setFeatures",2,"std::vector< std::vector< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClusterMeltSegmenter,0))){
    SWIG_fail_ptr("ClusterMeltSegmenter_setFeatures",1,SWIGTYPE_p_ClusterMeltSegmenter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0))){
    SWIG_fail_ptr("ClusterMeltSegmenter_setFeatures",2,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t);
  }
  
  (arg1)->setFeatures((std::vector< std::vector< double > > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClusterMeltSegmenter_segment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ClusterMeltSegmenter *arg1 = (ClusterMeltSegmenter *) 0 ;
  
  SWIG_check_num_args("ClusterMeltSegmenter::segment",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClusterMeltSegmenter::segment",1,"ClusterMeltSegmenter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClusterMeltSegmenter,0))){
    SWIG_fail_ptr("ClusterMeltSegmenter_segment",1,SWIGTYPE_p_ClusterMeltSegmenter);
  }
  
  (arg1)->segment();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClusterMeltSegmenter_segment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ClusterMeltSegmenter *arg1 = (ClusterMeltSegmenter *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ClusterMeltSegmenter::segment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClusterMeltSegmenter::segment",1,"ClusterMeltSegmenter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ClusterMeltSegmenter::segment",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClusterMeltSegmenter,0))){
    SWIG_fail_ptr("ClusterMeltSegmenter_segment",1,SWIGTYPE_p_ClusterMeltSegmenter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->segment(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClusterMeltSegmenter_segment(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ClusterMeltSegmenter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ClusterMeltSegmenter_segment__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ClusterMeltSegmenter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ClusterMeltSegmenter_segment__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ClusterMeltSegmenter_segment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ClusterMeltSegmenter::segment()\n"
    "    ClusterMeltSegmenter::segment(int)\n");
  lua_error(L);return 0;
}


static int _wrap_ClusterMeltSegmenter_getNSegmentTypes(lua_State* L) {
  int SWIG_arg = 0;
  ClusterMeltSegmenter *arg1 = (ClusterMeltSegmenter *) 0 ;
  int result;
  
  SWIG_check_num_args("ClusterMeltSegmenter::getNSegmentTypes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClusterMeltSegmenter::getNSegmentTypes",1,"ClusterMeltSegmenter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClusterMeltSegmenter,0))){
    SWIG_fail_ptr("ClusterMeltSegmenter_getNSegmentTypes",1,SWIGTYPE_p_ClusterMeltSegmenter);
  }
  
  result = (int)(arg1)->getNSegmentTypes();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ClusterMeltSegmenter(void *obj) {
ClusterMeltSegmenter *arg1 = (ClusterMeltSegmenter *) obj;
delete arg1;
}
static int _proxy__wrap_new_ClusterMeltSegmenter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ClusterMeltSegmenter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ClusterMeltSegmenter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ClusterMeltSegmenter_methods[]= {
    { "initialise", _wrap_ClusterMeltSegmenter_initialise},
    { "getWindowsize", _wrap_ClusterMeltSegmenter_getWindowsize},
    { "getHopsize", _wrap_ClusterMeltSegmenter_getHopsize},
    { "extractFeatures", _wrap_ClusterMeltSegmenter_extractFeatures},
    { "setFeatures", _wrap_ClusterMeltSegmenter_setFeatures},
    { "segment", _wrap_ClusterMeltSegmenter_segment},
    { "getNSegmentTypes", _wrap_ClusterMeltSegmenter_getNSegmentTypes},
    {0,0}
};
static swig_lua_method swig_ClusterMeltSegmenter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ClusterMeltSegmenter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ClusterMeltSegmenter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ClusterMeltSegmenter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ClusterMeltSegmenter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ClusterMeltSegmenter_Sf_SwigStatic = {
    "ClusterMeltSegmenter",
    swig_ClusterMeltSegmenter_Sf_SwigStatic_methods,
    swig_ClusterMeltSegmenter_Sf_SwigStatic_attributes,
    swig_ClusterMeltSegmenter_Sf_SwigStatic_constants,
    swig_ClusterMeltSegmenter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ClusterMeltSegmenter_bases[] = {0};
static const char *swig_ClusterMeltSegmenter_base_names[] = {0};
static swig_lua_class _wrap_class_ClusterMeltSegmenter = { "ClusterMeltSegmenter", "ClusterMeltSegmenter", &SWIGTYPE_p_ClusterMeltSegmenter,_proxy__wrap_new_ClusterMeltSegmenter, swig_delete_ClusterMeltSegmenter, swig_ClusterMeltSegmenter_methods, swig_ClusterMeltSegmenter_attributes, &swig_ClusterMeltSegmenter_Sf_SwigStatic, swig_ClusterMeltSegmenter_meta, swig_ClusterMeltSegmenter_bases, swig_ClusterMeltSegmenter_base_names };

static int _wrap_Segment_start_set(lua_State* L) {
  int SWIG_arg = 0;
  Segment *arg1 = (Segment *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Segment::start",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Segment::start",1,"Segment *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Segment::start",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Segment,0))){
    SWIG_fail_ptr("Segment_start_set",1,SWIGTYPE_p_Segment);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->start = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Segment_start_get(lua_State* L) {
  int SWIG_arg = 0;
  Segment *arg1 = (Segment *) 0 ;
  int result;
  
  SWIG_check_num_args("Segment::start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Segment::start",1,"Segment *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Segment,0))){
    SWIG_fail_ptr("Segment_start_get",1,SWIGTYPE_p_Segment);
  }
  
  result = (int) ((arg1)->start);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Segment_c_end_set(lua_State* L) {
  int SWIG_arg = 0;
  Segment *arg1 = (Segment *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Segment::end",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Segment::end",1,"Segment *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Segment::end",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Segment,0))){
    SWIG_fail_ptr("Segment_c_end_set",1,SWIGTYPE_p_Segment);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->end = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Segment_c_end_get(lua_State* L) {
  int SWIG_arg = 0;
  Segment *arg1 = (Segment *) 0 ;
  int result;
  
  SWIG_check_num_args("Segment::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Segment::end",1,"Segment *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Segment,0))){
    SWIG_fail_ptr("Segment_c_end_get",1,SWIGTYPE_p_Segment);
  }
  
  result = (int) ((arg1)->end);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Segment_type_set(lua_State* L) {
  int SWIG_arg = 0;
  Segment *arg1 = (Segment *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Segment::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Segment::type",1,"Segment *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Segment::type",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Segment,0))){
    SWIG_fail_ptr("Segment_type_set",1,SWIGTYPE_p_Segment);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Segment_type_get(lua_State* L) {
  int SWIG_arg = 0;
  Segment *arg1 = (Segment *) 0 ;
  int result;
  
  SWIG_check_num_args("Segment::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Segment::type",1,"Segment *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Segment,0))){
    SWIG_fail_ptr("Segment_type_get",1,SWIGTYPE_p_Segment);
  }
  
  result = (int) ((arg1)->type);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Segment(lua_State* L) {
  int SWIG_arg = 0;
  Segment *result = 0 ;
  
  SWIG_check_num_args("Segment::Segment",0,0)
  result = (Segment *)new Segment();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Segment,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Segment(void *obj) {
Segment *arg1 = (Segment *) obj;
delete arg1;
}
static int _proxy__wrap_new_Segment(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Segment);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Segment_attributes[] = {
    { "start", _wrap_Segment_start_get, _wrap_Segment_start_set },
    { "c_end", _wrap_Segment_c_end_get, _wrap_Segment_c_end_set },
    { "type", _wrap_Segment_type_get, _wrap_Segment_type_set },
    {0,0,0}
};
static swig_lua_method swig_Segment_methods[]= {
    {0,0}
};
static swig_lua_method swig_Segment_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Segment_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Segment_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Segment_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Segment_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Segment_Sf_SwigStatic = {
    "Segment",
    swig_Segment_Sf_SwigStatic_methods,
    swig_Segment_Sf_SwigStatic_attributes,
    swig_Segment_Sf_SwigStatic_constants,
    swig_Segment_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Segment_bases[] = {0};
static const char *swig_Segment_base_names[] = {0};
static swig_lua_class _wrap_class_Segment = { "Segment", "Segment", &SWIGTYPE_p_Segment,_proxy__wrap_new_Segment, swig_delete_Segment, swig_Segment_methods, swig_Segment_attributes, &swig_Segment_Sf_SwigStatic, swig_Segment_meta, swig_Segment_bases, swig_Segment_base_names };

static int _wrap_Segmentation_nsegtypes_set(lua_State* L) {
  int SWIG_arg = 0;
  Segmentation *arg1 = (Segmentation *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Segmentation::nsegtypes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Segmentation::nsegtypes",1,"Segmentation *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Segmentation::nsegtypes",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Segmentation,0))){
    SWIG_fail_ptr("Segmentation_nsegtypes_set",1,SWIGTYPE_p_Segmentation);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->nsegtypes = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Segmentation_nsegtypes_get(lua_State* L) {
  int SWIG_arg = 0;
  Segmentation *arg1 = (Segmentation *) 0 ;
  int result;
  
  SWIG_check_num_args("Segmentation::nsegtypes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Segmentation::nsegtypes",1,"Segmentation *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Segmentation,0))){
    SWIG_fail_ptr("Segmentation_nsegtypes_get",1,SWIGTYPE_p_Segmentation);
  }
  
  result = (int) ((arg1)->nsegtypes);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Segmentation_samplerate_set(lua_State* L) {
  int SWIG_arg = 0;
  Segmentation *arg1 = (Segmentation *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Segmentation::samplerate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Segmentation::samplerate",1,"Segmentation *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Segmentation::samplerate",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Segmentation,0))){
    SWIG_fail_ptr("Segmentation_samplerate_set",1,SWIGTYPE_p_Segmentation);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->samplerate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Segmentation_samplerate_get(lua_State* L) {
  int SWIG_arg = 0;
  Segmentation *arg1 = (Segmentation *) 0 ;
  int result;
  
  SWIG_check_num_args("Segmentation::samplerate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Segmentation::samplerate",1,"Segmentation *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Segmentation,0))){
    SWIG_fail_ptr("Segmentation_samplerate_get",1,SWIGTYPE_p_Segmentation);
  }
  
  result = (int) ((arg1)->samplerate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Segmentation_segments_set(lua_State* L) {
  int SWIG_arg = 0;
  Segmentation *arg1 = (Segmentation *) 0 ;
  std::vector< Segment > *arg2 = (std::vector< Segment > *) 0 ;
  
  SWIG_check_num_args("Segmentation::segments",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Segmentation::segments",1,"Segmentation *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Segmentation::segments",2,"std::vector< Segment > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Segmentation,0))){
    SWIG_fail_ptr("Segmentation_segments_set",1,SWIGTYPE_p_Segmentation);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Segment_t,0))){
    SWIG_fail_ptr("Segmentation_segments_set",2,SWIGTYPE_p_std__vectorT_Segment_t);
  }
  
  if (arg1) (arg1)->segments = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Segmentation_segments_get(lua_State* L) {
  int SWIG_arg = 0;
  Segmentation *arg1 = (Segmentation *) 0 ;
  std::vector< Segment > *result = 0 ;
  
  SWIG_check_num_args("Segmentation::segments",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Segmentation::segments",1,"Segmentation *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Segmentation,0))){
    SWIG_fail_ptr("Segmentation_segments_get",1,SWIGTYPE_p_Segmentation);
  }
  
  result = (std::vector< Segment > *)& ((arg1)->segments);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Segment_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Segmentation(lua_State* L) {
  int SWIG_arg = 0;
  Segmentation *result = 0 ;
  
  SWIG_check_num_args("Segmentation::Segmentation",0,0)
  result = (Segmentation *)new Segmentation();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Segmentation,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Segmentation(void *obj) {
Segmentation *arg1 = (Segmentation *) obj;
delete arg1;
}
static int _proxy__wrap_new_Segmentation(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Segmentation);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Segmentation_attributes[] = {
    { "nsegtypes", _wrap_Segmentation_nsegtypes_get, _wrap_Segmentation_nsegtypes_set },
    { "samplerate", _wrap_Segmentation_samplerate_get, _wrap_Segmentation_samplerate_set },
    { "segments", _wrap_Segmentation_segments_get, _wrap_Segmentation_segments_set },
    {0,0,0}
};
static swig_lua_method swig_Segmentation_methods[]= {
    {0,0}
};
static swig_lua_method swig_Segmentation_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Segmentation_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Segmentation_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Segmentation_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Segmentation_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Segmentation_Sf_SwigStatic = {
    "Segmentation",
    swig_Segmentation_Sf_SwigStatic_methods,
    swig_Segmentation_Sf_SwigStatic_attributes,
    swig_Segmentation_Sf_SwigStatic_constants,
    swig_Segmentation_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Segmentation_bases[] = {0};
static const char *swig_Segmentation_base_names[] = {0};
static swig_lua_class _wrap_class_Segmentation = { "Segmentation", "Segmentation", &SWIGTYPE_p_Segmentation,_proxy__wrap_new_Segmentation, swig_delete_Segmentation, swig_Segmentation_methods, swig_Segmentation_attributes, &swig_Segmentation_Sf_SwigStatic, swig_Segmentation_meta, swig_Segmentation_bases, swig_Segmentation_base_names };

static int _wrap_Segmenter_initialise(lua_State* L) {
  int SWIG_arg = 0;
  Segmenter *arg1 = (Segmenter *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Segmenter::initialise",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Segmenter::initialise",1,"Segmenter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Segmenter::initialise",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Segmenter,0))){
    SWIG_fail_ptr("Segmenter_initialise",1,SWIGTYPE_p_Segmenter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->initialise(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Segmenter_getWindowsize(lua_State* L) {
  int SWIG_arg = 0;
  Segmenter *arg1 = (Segmenter *) 0 ;
  int result;
  
  SWIG_check_num_args("Segmenter::getWindowsize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Segmenter::getWindowsize",1,"Segmenter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Segmenter,0))){
    SWIG_fail_ptr("Segmenter_getWindowsize",1,SWIGTYPE_p_Segmenter);
  }
  
  result = (int)(arg1)->getWindowsize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Segmenter_getHopsize(lua_State* L) {
  int SWIG_arg = 0;
  Segmenter *arg1 = (Segmenter *) 0 ;
  int result;
  
  SWIG_check_num_args("Segmenter::getHopsize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Segmenter::getHopsize",1,"Segmenter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Segmenter,0))){
    SWIG_fail_ptr("Segmenter_getHopsize",1,SWIGTYPE_p_Segmenter);
  }
  
  result = (int)(arg1)->getHopsize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Segmenter_extractFeatures(lua_State* L) {
  int SWIG_arg = 0;
  Segmenter *arg1 = (Segmenter *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("Segmenter::extractFeatures",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Segmenter::extractFeatures",1,"Segmenter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Segmenter::extractFeatures",2,"double const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Segmenter::extractFeatures",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Segmenter,0))){
    SWIG_fail_ptr("Segmenter_extractFeatures",1,SWIGTYPE_p_Segmenter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Segmenter_extractFeatures",2,SWIGTYPE_p_double);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->extractFeatures((double const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Segmenter_segment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Segmenter *arg1 = (Segmenter *) 0 ;
  
  SWIG_check_num_args("Segmenter::segment",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Segmenter::segment",1,"Segmenter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Segmenter,0))){
    SWIG_fail_ptr("Segmenter_segment",1,SWIGTYPE_p_Segmenter);
  }
  
  (arg1)->segment();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Segmenter_segment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Segmenter *arg1 = (Segmenter *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Segmenter::segment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Segmenter::segment",1,"Segmenter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Segmenter::segment",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Segmenter,0))){
    SWIG_fail_ptr("Segmenter_segment",1,SWIGTYPE_p_Segmenter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->segment(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Segmenter_segment(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Segmenter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Segmenter_segment__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Segmenter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Segmenter_segment__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Segmenter_segment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Segmenter::segment()\n"
    "    Segmenter::segment(int)\n");
  lua_error(L);return 0;
}


static int _wrap_Segmenter_clear(lua_State* L) {
  int SWIG_arg = 0;
  Segmenter *arg1 = (Segmenter *) 0 ;
  
  SWIG_check_num_args("Segmenter::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Segmenter::clear",1,"Segmenter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Segmenter,0))){
    SWIG_fail_ptr("Segmenter_clear",1,SWIGTYPE_p_Segmenter);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Segmenter_getSegmentation(lua_State* L) {
  int SWIG_arg = 0;
  Segmenter *arg1 = (Segmenter *) 0 ;
  Segmentation *result = 0 ;
  
  SWIG_check_num_args("Segmenter::getSegmentation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Segmenter::getSegmentation",1,"Segmenter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Segmenter,0))){
    SWIG_fail_ptr("Segmenter_getSegmentation",1,SWIGTYPE_p_Segmenter);
  }
  
  result = (Segmentation *) &((Segmenter const *)arg1)->getSegmentation();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Segmentation,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Segmenter(void *obj) {
Segmenter *arg1 = (Segmenter *) obj;
delete arg1;
}
static swig_lua_attribute swig_Segmenter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Segmenter_methods[]= {
    { "initialise", _wrap_Segmenter_initialise},
    { "getWindowsize", _wrap_Segmenter_getWindowsize},
    { "getHopsize", _wrap_Segmenter_getHopsize},
    { "extractFeatures", _wrap_Segmenter_extractFeatures},
    { "segment", _wrap_Segmenter_segment},
    { "clear", _wrap_Segmenter_clear},
    { "getSegmentation", _wrap_Segmenter_getSegmentation},
    {0,0}
};
static swig_lua_method swig_Segmenter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Segmenter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Segmenter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Segmenter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Segmenter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Segmenter_Sf_SwigStatic = {
    "Segmenter",
    swig_Segmenter_Sf_SwigStatic_methods,
    swig_Segmenter_Sf_SwigStatic_attributes,
    swig_Segmenter_Sf_SwigStatic_constants,
    swig_Segmenter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Segmenter_bases[] = {0};
static const char *swig_Segmenter_base_names[] = {0};
static swig_lua_class _wrap_class_Segmenter = { "Segmenter", "Segmenter", &SWIGTYPE_p_Segmenter,0, swig_delete_Segmenter, swig_Segmenter_methods, swig_Segmenter_attributes, &swig_Segmenter_Sf_SwigStatic, swig_Segmenter_meta, swig_Segmenter_bases, swig_Segmenter_base_names };

static int _wrap_cluster_melt(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int *arg8 = (int *) 0 ;
  
  SWIG_check_num_args("cluster_melt",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cluster_melt",1,"double *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cluster_melt",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cluster_melt",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("cluster_melt",4,"double *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cluster_melt",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cluster_melt",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cluster_melt",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("cluster_melt",8,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cluster_melt",1,SWIGTYPE_p_double);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cluster_melt",4,SWIGTYPE_p_double);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cluster_melt",8,SWIGTYPE_p_int);
  }
  
  cluster_melt(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mpeg7_constq(lua_State* L) {
  int SWIG_arg = 0;
  double **arg1 = (double **) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("mpeg7_constq",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mpeg7_constq",1,"double **");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mpeg7_constq",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mpeg7_constq",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("mpeg7_constq",1,SWIGTYPE_p_p_double);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  mpeg7_constq(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cq2chroma(lua_State* L) {
  int SWIG_arg = 0;
  double **arg1 = (double **) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double **arg5 = (double **) 0 ;
  
  SWIG_check_num_args("cq2chroma",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cq2chroma",1,"double **");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("cq2chroma",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cq2chroma",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cq2chroma",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("cq2chroma",5,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("cq2chroma",1,SWIGTYPE_p_p_double);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("cq2chroma",5,SWIGTYPE_p_p_double);
  }
  
  cq2chroma(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_create_histograms(lua_State* L) {
  int SWIG_arg = 0;
  int *arg1 = (int *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  
  SWIG_check_num_args("create_histograms",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("create_histograms",1,"int *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("create_histograms",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("create_histograms",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("create_histograms",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("create_histograms",5,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("create_histograms",1,SWIGTYPE_p_int);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("create_histograms",5,SWIGTYPE_p_double);
  }
  
  create_histograms(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cluster_segment(lua_State* L) {
  int SWIG_arg = 0;
  int *arg1 = (int *) 0 ;
  double **arg2 = (double **) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  
  SWIG_check_num_args("cluster_segment",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cluster_segment",1,"int *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cluster_segment",2,"double **");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("cluster_segment",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("cluster_segment",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("cluster_segment",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("cluster_segment",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("cluster_segment",7,"int");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("cluster_segment",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("cluster_segment",1,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("cluster_segment",2,SWIGTYPE_p_p_double);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  arg8 = (int)lua_tonumber(L, 8);
  cluster_segment(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_constq_segment(lua_State* L) {
  int SWIG_arg = 0;
  int *arg1 = (int *) 0 ;
  double **arg2 = (double **) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  int arg10 ;
  
  SWIG_check_num_args("constq_segment",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("constq_segment",1,"int *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("constq_segment",2,"double **");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("constq_segment",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("constq_segment",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("constq_segment",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("constq_segment",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("constq_segment",7,"int");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("constq_segment",8,"int");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("constq_segment",9,"int");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("constq_segment",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("constq_segment",1,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("constq_segment",2,SWIGTYPE_p_p_double);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  arg8 = (int)lua_tonumber(L, 8);
  arg9 = (int)lua_tonumber(L, 9);
  arg10 = (int)lua_tonumber(L, 10);
  constq_segment(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_segment_t_start_set(lua_State* L) {
  int SWIG_arg = 0;
  segment_t *arg1 = (segment_t *) 0 ;
  long arg2 ;
  
  SWIG_check_num_args("segment_t::start",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("segment_t::start",1,"segment_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("segment_t::start",2,"long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_segment_t,0))){
    SWIG_fail_ptr("segment_t_start_set",1,SWIGTYPE_p_segment_t);
  }
  
  arg2 = (long)lua_tonumber(L, 2);
  if (arg1) (arg1)->start = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_segment_t_start_get(lua_State* L) {
  int SWIG_arg = 0;
  segment_t *arg1 = (segment_t *) 0 ;
  long result;
  
  SWIG_check_num_args("segment_t::start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("segment_t::start",1,"segment_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_segment_t,0))){
    SWIG_fail_ptr("segment_t_start_get",1,SWIGTYPE_p_segment_t);
  }
  
  result = (long) ((arg1)->start);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_segment_t_c_end_set(lua_State* L) {
  int SWIG_arg = 0;
  segment_t *arg1 = (segment_t *) 0 ;
  long arg2 ;
  
  SWIG_check_num_args("segment_t::end",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("segment_t::end",1,"segment_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("segment_t::end",2,"long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_segment_t,0))){
    SWIG_fail_ptr("segment_t_c_end_set",1,SWIGTYPE_p_segment_t);
  }
  
  arg2 = (long)lua_tonumber(L, 2);
  if (arg1) (arg1)->end = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_segment_t_c_end_get(lua_State* L) {
  int SWIG_arg = 0;
  segment_t *arg1 = (segment_t *) 0 ;
  long result;
  
  SWIG_check_num_args("segment_t::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("segment_t::end",1,"segment_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_segment_t,0))){
    SWIG_fail_ptr("segment_t_c_end_get",1,SWIGTYPE_p_segment_t);
  }
  
  result = (long) ((arg1)->end);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_segment_t_type_set(lua_State* L) {
  int SWIG_arg = 0;
  segment_t *arg1 = (segment_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("segment_t::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("segment_t::type",1,"segment_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("segment_t::type",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_segment_t,0))){
    SWIG_fail_ptr("segment_t_type_set",1,SWIGTYPE_p_segment_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_segment_t_type_get(lua_State* L) {
  int SWIG_arg = 0;
  segment_t *arg1 = (segment_t *) 0 ;
  int result;
  
  SWIG_check_num_args("segment_t::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("segment_t::type",1,"segment_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_segment_t,0))){
    SWIG_fail_ptr("segment_t_type_get",1,SWIGTYPE_p_segment_t);
  }
  
  result = (int) ((arg1)->type);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_segment_t(lua_State* L) {
  int SWIG_arg = 0;
  segment_t *result = 0 ;
  
  SWIG_check_num_args("segment_t::segment_t",0,0)
  result = (segment_t *)new segment_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_segment_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_segment_t(void *obj) {
segment_t *arg1 = (segment_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_segment_t(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_segment_t);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_segment_t_attributes[] = {
    { "start", _wrap_segment_t_start_get, _wrap_segment_t_start_set },
    { "c_end", _wrap_segment_t_c_end_get, _wrap_segment_t_c_end_set },
    { "type", _wrap_segment_t_type_get, _wrap_segment_t_type_set },
    {0,0,0}
};
static swig_lua_method swig_segment_t_methods[]= {
    {0,0}
};
static swig_lua_method swig_segment_t_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_segment_t_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_segment_t_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_segment_t_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_segment_t_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_segment_t_Sf_SwigStatic = {
    "segment_t",
    swig_segment_t_Sf_SwigStatic_methods,
    swig_segment_t_Sf_SwigStatic_attributes,
    swig_segment_t_Sf_SwigStatic_constants,
    swig_segment_t_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_segment_t_bases[] = {0};
static const char *swig_segment_t_base_names[] = {0};
static swig_lua_class _wrap_class_segment_t = { "segment_t", "segment_t", &SWIGTYPE_p_segment_t,_proxy__wrap_new_segment_t, swig_delete_segment_t, swig_segment_t_methods, swig_segment_t_attributes, &swig_segment_t_Sf_SwigStatic, swig_segment_t_meta, swig_segment_t_bases, swig_segment_t_base_names };

static int _wrap_segmentation_t_nsegs_set(lua_State* L) {
  int SWIG_arg = 0;
  segmentation_t *arg1 = (segmentation_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("segmentation_t::nsegs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("segmentation_t::nsegs",1,"segmentation_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("segmentation_t::nsegs",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_segmentation_t,0))){
    SWIG_fail_ptr("segmentation_t_nsegs_set",1,SWIGTYPE_p_segmentation_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->nsegs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_segmentation_t_nsegs_get(lua_State* L) {
  int SWIG_arg = 0;
  segmentation_t *arg1 = (segmentation_t *) 0 ;
  int result;
  
  SWIG_check_num_args("segmentation_t::nsegs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("segmentation_t::nsegs",1,"segmentation_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_segmentation_t,0))){
    SWIG_fail_ptr("segmentation_t_nsegs_get",1,SWIGTYPE_p_segmentation_t);
  }
  
  result = (int) ((arg1)->nsegs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_segmentation_t_nsegtypes_set(lua_State* L) {
  int SWIG_arg = 0;
  segmentation_t *arg1 = (segmentation_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("segmentation_t::nsegtypes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("segmentation_t::nsegtypes",1,"segmentation_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("segmentation_t::nsegtypes",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_segmentation_t,0))){
    SWIG_fail_ptr("segmentation_t_nsegtypes_set",1,SWIGTYPE_p_segmentation_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->nsegtypes = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_segmentation_t_nsegtypes_get(lua_State* L) {
  int SWIG_arg = 0;
  segmentation_t *arg1 = (segmentation_t *) 0 ;
  int result;
  
  SWIG_check_num_args("segmentation_t::nsegtypes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("segmentation_t::nsegtypes",1,"segmentation_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_segmentation_t,0))){
    SWIG_fail_ptr("segmentation_t_nsegtypes_get",1,SWIGTYPE_p_segmentation_t);
  }
  
  result = (int) ((arg1)->nsegtypes);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_segmentation_t_samplerate_set(lua_State* L) {
  int SWIG_arg = 0;
  segmentation_t *arg1 = (segmentation_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("segmentation_t::samplerate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("segmentation_t::samplerate",1,"segmentation_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("segmentation_t::samplerate",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_segmentation_t,0))){
    SWIG_fail_ptr("segmentation_t_samplerate_set",1,SWIGTYPE_p_segmentation_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->samplerate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_segmentation_t_samplerate_get(lua_State* L) {
  int SWIG_arg = 0;
  segmentation_t *arg1 = (segmentation_t *) 0 ;
  int result;
  
  SWIG_check_num_args("segmentation_t::samplerate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("segmentation_t::samplerate",1,"segmentation_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_segmentation_t,0))){
    SWIG_fail_ptr("segmentation_t_samplerate_get",1,SWIGTYPE_p_segmentation_t);
  }
  
  result = (int) ((arg1)->samplerate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_segmentation_t_segments_set(lua_State* L) {
  int SWIG_arg = 0;
  segmentation_t *arg1 = (segmentation_t *) 0 ;
  segment_t *arg2 = (segment_t *) 0 ;
  
  SWIG_check_num_args("segmentation_t::segments",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("segmentation_t::segments",1,"segmentation_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("segmentation_t::segments",2,"segment_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_segmentation_t,0))){
    SWIG_fail_ptr("segmentation_t_segments_set",1,SWIGTYPE_p_segmentation_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_segment_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("segmentation_t_segments_set",2,SWIGTYPE_p_segment_t);
  }
  
  if (arg1) (arg1)->segments = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_segmentation_t_segments_get(lua_State* L) {
  int SWIG_arg = 0;
  segmentation_t *arg1 = (segmentation_t *) 0 ;
  segment_t *result = 0 ;
  
  SWIG_check_num_args("segmentation_t::segments",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("segmentation_t::segments",1,"segmentation_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_segmentation_t,0))){
    SWIG_fail_ptr("segmentation_t_segments_get",1,SWIGTYPE_p_segmentation_t);
  }
  
  result = (segment_t *) ((arg1)->segments);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_segment_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_segmentation_t(lua_State* L) {
  int SWIG_arg = 0;
  segmentation_t *result = 0 ;
  
  SWIG_check_num_args("segmentation_t::segmentation_t",0,0)
  result = (segmentation_t *)new segmentation_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_segmentation_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_segmentation_t(void *obj) {
segmentation_t *arg1 = (segmentation_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_segmentation_t(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_segmentation_t);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_segmentation_t_attributes[] = {
    { "nsegs", _wrap_segmentation_t_nsegs_get, _wrap_segmentation_t_nsegs_set },
    { "nsegtypes", _wrap_segmentation_t_nsegtypes_get, _wrap_segmentation_t_nsegtypes_set },
    { "samplerate", _wrap_segmentation_t_samplerate_get, _wrap_segmentation_t_samplerate_set },
    { "segments", _wrap_segmentation_t_segments_get, _wrap_segmentation_t_segments_set },
    {0,0,0}
};
static swig_lua_method swig_segmentation_t_methods[]= {
    {0,0}
};
static swig_lua_method swig_segmentation_t_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_segmentation_t_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_segmentation_t_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_segmentation_t_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_segmentation_t_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_segmentation_t_Sf_SwigStatic = {
    "segmentation_t",
    swig_segmentation_t_Sf_SwigStatic_methods,
    swig_segmentation_t_Sf_SwigStatic_attributes,
    swig_segmentation_t_Sf_SwigStatic_constants,
    swig_segmentation_t_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_segmentation_t_bases[] = {0};
static const char *swig_segmentation_t_base_names[] = {0};
static swig_lua_class _wrap_class_segmentation_t = { "segmentation_t", "segmentation_t", &SWIGTYPE_p_segmentation_t,_proxy__wrap_new_segmentation_t, swig_delete_segmentation_t, swig_segmentation_t_methods, swig_segmentation_t_attributes, &swig_segmentation_t_Sf_SwigStatic, swig_segmentation_t_meta, swig_segmentation_t_bases, swig_segmentation_t_base_names };

static int _wrap_DFProcConfig_length_set(lua_State* L) {
  int SWIG_arg = 0;
  DFProcConfig *arg1 = (DFProcConfig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("DFProcConfig::length",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DFProcConfig::length",1,"DFProcConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DFProcConfig::length",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DFProcConfig,0))){
    SWIG_fail_ptr("DFProcConfig_length_set",1,SWIGTYPE_p_DFProcConfig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->length = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFProcConfig_length_get(lua_State* L) {
  int SWIG_arg = 0;
  DFProcConfig *arg1 = (DFProcConfig *) 0 ;
  int result;
  
  SWIG_check_num_args("DFProcConfig::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DFProcConfig::length",1,"DFProcConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DFProcConfig,0))){
    SWIG_fail_ptr("DFProcConfig_length_get",1,SWIGTYPE_p_DFProcConfig);
  }
  
  result = (int) ((arg1)->length);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFProcConfig_LPOrd_set(lua_State* L) {
  int SWIG_arg = 0;
  DFProcConfig *arg1 = (DFProcConfig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("DFProcConfig::LPOrd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DFProcConfig::LPOrd",1,"DFProcConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DFProcConfig::LPOrd",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DFProcConfig,0))){
    SWIG_fail_ptr("DFProcConfig_LPOrd_set",1,SWIGTYPE_p_DFProcConfig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->LPOrd = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFProcConfig_LPOrd_get(lua_State* L) {
  int SWIG_arg = 0;
  DFProcConfig *arg1 = (DFProcConfig *) 0 ;
  int result;
  
  SWIG_check_num_args("DFProcConfig::LPOrd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DFProcConfig::LPOrd",1,"DFProcConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DFProcConfig,0))){
    SWIG_fail_ptr("DFProcConfig_LPOrd_get",1,SWIGTYPE_p_DFProcConfig);
  }
  
  result = (int) ((arg1)->LPOrd);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFProcConfig_LPACoeffs_set(lua_State* L) {
  int SWIG_arg = 0;
  DFProcConfig *arg1 = (DFProcConfig *) 0 ;
  double *arg2 = (double *) 0 ;
  
  SWIG_check_num_args("DFProcConfig::LPACoeffs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DFProcConfig::LPACoeffs",1,"DFProcConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DFProcConfig::LPACoeffs",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DFProcConfig,0))){
    SWIG_fail_ptr("DFProcConfig_LPACoeffs_set",1,SWIGTYPE_p_DFProcConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("DFProcConfig_LPACoeffs_set",2,SWIGTYPE_p_double);
  }
  
  if (arg1) (arg1)->LPACoeffs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFProcConfig_LPACoeffs_get(lua_State* L) {
  int SWIG_arg = 0;
  DFProcConfig *arg1 = (DFProcConfig *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("DFProcConfig::LPACoeffs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DFProcConfig::LPACoeffs",1,"DFProcConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DFProcConfig,0))){
    SWIG_fail_ptr("DFProcConfig_LPACoeffs_get",1,SWIGTYPE_p_DFProcConfig);
  }
  
  result = (double *) ((arg1)->LPACoeffs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFProcConfig_LPBCoeffs_set(lua_State* L) {
  int SWIG_arg = 0;
  DFProcConfig *arg1 = (DFProcConfig *) 0 ;
  double *arg2 = (double *) 0 ;
  
  SWIG_check_num_args("DFProcConfig::LPBCoeffs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DFProcConfig::LPBCoeffs",1,"DFProcConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DFProcConfig::LPBCoeffs",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DFProcConfig,0))){
    SWIG_fail_ptr("DFProcConfig_LPBCoeffs_set",1,SWIGTYPE_p_DFProcConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("DFProcConfig_LPBCoeffs_set",2,SWIGTYPE_p_double);
  }
  
  if (arg1) (arg1)->LPBCoeffs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFProcConfig_LPBCoeffs_get(lua_State* L) {
  int SWIG_arg = 0;
  DFProcConfig *arg1 = (DFProcConfig *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("DFProcConfig::LPBCoeffs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DFProcConfig::LPBCoeffs",1,"DFProcConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DFProcConfig,0))){
    SWIG_fail_ptr("DFProcConfig_LPBCoeffs_get",1,SWIGTYPE_p_DFProcConfig);
  }
  
  result = (double *) ((arg1)->LPBCoeffs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFProcConfig_winPre_set(lua_State* L) {
  int SWIG_arg = 0;
  DFProcConfig *arg1 = (DFProcConfig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("DFProcConfig::winPre",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DFProcConfig::winPre",1,"DFProcConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DFProcConfig::winPre",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DFProcConfig,0))){
    SWIG_fail_ptr("DFProcConfig_winPre_set",1,SWIGTYPE_p_DFProcConfig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->winPre = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFProcConfig_winPre_get(lua_State* L) {
  int SWIG_arg = 0;
  DFProcConfig *arg1 = (DFProcConfig *) 0 ;
  int result;
  
  SWIG_check_num_args("DFProcConfig::winPre",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DFProcConfig::winPre",1,"DFProcConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DFProcConfig,0))){
    SWIG_fail_ptr("DFProcConfig_winPre_get",1,SWIGTYPE_p_DFProcConfig);
  }
  
  result = (int) ((arg1)->winPre);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFProcConfig_winPost_set(lua_State* L) {
  int SWIG_arg = 0;
  DFProcConfig *arg1 = (DFProcConfig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("DFProcConfig::winPost",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DFProcConfig::winPost",1,"DFProcConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DFProcConfig::winPost",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DFProcConfig,0))){
    SWIG_fail_ptr("DFProcConfig_winPost_set",1,SWIGTYPE_p_DFProcConfig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->winPost = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFProcConfig_winPost_get(lua_State* L) {
  int SWIG_arg = 0;
  DFProcConfig *arg1 = (DFProcConfig *) 0 ;
  int result;
  
  SWIG_check_num_args("DFProcConfig::winPost",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DFProcConfig::winPost",1,"DFProcConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DFProcConfig,0))){
    SWIG_fail_ptr("DFProcConfig_winPost_get",1,SWIGTYPE_p_DFProcConfig);
  }
  
  result = (int) ((arg1)->winPost);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFProcConfig_AlphaNormParam_set(lua_State* L) {
  int SWIG_arg = 0;
  DFProcConfig *arg1 = (DFProcConfig *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("DFProcConfig::AlphaNormParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DFProcConfig::AlphaNormParam",1,"DFProcConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DFProcConfig::AlphaNormParam",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DFProcConfig,0))){
    SWIG_fail_ptr("DFProcConfig_AlphaNormParam_set",1,SWIGTYPE_p_DFProcConfig);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->AlphaNormParam = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFProcConfig_AlphaNormParam_get(lua_State* L) {
  int SWIG_arg = 0;
  DFProcConfig *arg1 = (DFProcConfig *) 0 ;
  double result;
  
  SWIG_check_num_args("DFProcConfig::AlphaNormParam",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DFProcConfig::AlphaNormParam",1,"DFProcConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DFProcConfig,0))){
    SWIG_fail_ptr("DFProcConfig_AlphaNormParam_get",1,SWIGTYPE_p_DFProcConfig);
  }
  
  result = (double) ((arg1)->AlphaNormParam);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFProcConfig_isMedianPositive_set(lua_State* L) {
  int SWIG_arg = 0;
  DFProcConfig *arg1 = (DFProcConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("DFProcConfig::isMedianPositive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DFProcConfig::isMedianPositive",1,"DFProcConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("DFProcConfig::isMedianPositive",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DFProcConfig,0))){
    SWIG_fail_ptr("DFProcConfig_isMedianPositive_set",1,SWIGTYPE_p_DFProcConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->isMedianPositive = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFProcConfig_isMedianPositive_get(lua_State* L) {
  int SWIG_arg = 0;
  DFProcConfig *arg1 = (DFProcConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("DFProcConfig::isMedianPositive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DFProcConfig::isMedianPositive",1,"DFProcConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DFProcConfig,0))){
    SWIG_fail_ptr("DFProcConfig_isMedianPositive_get",1,SWIGTYPE_p_DFProcConfig);
  }
  
  result = (bool) ((arg1)->isMedianPositive);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFProcConfig_delta_set(lua_State* L) {
  int SWIG_arg = 0;
  DFProcConfig *arg1 = (DFProcConfig *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("DFProcConfig::delta",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DFProcConfig::delta",1,"DFProcConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DFProcConfig::delta",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DFProcConfig,0))){
    SWIG_fail_ptr("DFProcConfig_delta_set",1,SWIGTYPE_p_DFProcConfig);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->delta = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFProcConfig_delta_get(lua_State* L) {
  int SWIG_arg = 0;
  DFProcConfig *arg1 = (DFProcConfig *) 0 ;
  float result;
  
  SWIG_check_num_args("DFProcConfig::delta",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DFProcConfig::delta",1,"DFProcConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DFProcConfig,0))){
    SWIG_fail_ptr("DFProcConfig_delta_get",1,SWIGTYPE_p_DFProcConfig);
  }
  
  result = (float) ((arg1)->delta);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DFProcConfig(lua_State* L) {
  int SWIG_arg = 0;
  DFProcConfig *result = 0 ;
  
  SWIG_check_num_args("DFProcConfig::DFProcConfig",0,0)
  result = (DFProcConfig *)new DFProcConfig();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DFProcConfig,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DFProcConfig(void *obj) {
DFProcConfig *arg1 = (DFProcConfig *) obj;
delete arg1;
}
static int _proxy__wrap_new_DFProcConfig(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DFProcConfig);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DFProcConfig_attributes[] = {
    { "length", _wrap_DFProcConfig_length_get, _wrap_DFProcConfig_length_set },
    { "LPOrd", _wrap_DFProcConfig_LPOrd_get, _wrap_DFProcConfig_LPOrd_set },
    { "LPACoeffs", _wrap_DFProcConfig_LPACoeffs_get, _wrap_DFProcConfig_LPACoeffs_set },
    { "LPBCoeffs", _wrap_DFProcConfig_LPBCoeffs_get, _wrap_DFProcConfig_LPBCoeffs_set },
    { "winPre", _wrap_DFProcConfig_winPre_get, _wrap_DFProcConfig_winPre_set },
    { "winPost", _wrap_DFProcConfig_winPost_get, _wrap_DFProcConfig_winPost_set },
    { "AlphaNormParam", _wrap_DFProcConfig_AlphaNormParam_get, _wrap_DFProcConfig_AlphaNormParam_set },
    { "isMedianPositive", _wrap_DFProcConfig_isMedianPositive_get, _wrap_DFProcConfig_isMedianPositive_set },
    { "delta", _wrap_DFProcConfig_delta_get, _wrap_DFProcConfig_delta_set },
    {0,0,0}
};
static swig_lua_method swig_DFProcConfig_methods[]= {
    {0,0}
};
static swig_lua_method swig_DFProcConfig_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DFProcConfig_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DFProcConfig_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DFProcConfig_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DFProcConfig_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DFProcConfig_Sf_SwigStatic = {
    "DFProcConfig",
    swig_DFProcConfig_Sf_SwigStatic_methods,
    swig_DFProcConfig_Sf_SwigStatic_attributes,
    swig_DFProcConfig_Sf_SwigStatic_constants,
    swig_DFProcConfig_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DFProcConfig_bases[] = {0};
static const char *swig_DFProcConfig_base_names[] = {0};
static swig_lua_class _wrap_class_DFProcConfig = { "DFProcConfig", "DFProcConfig", &SWIGTYPE_p_DFProcConfig,_proxy__wrap_new_DFProcConfig, swig_delete_DFProcConfig, swig_DFProcConfig_methods, swig_DFProcConfig_attributes, &swig_DFProcConfig_Sf_SwigStatic, swig_DFProcConfig_meta, swig_DFProcConfig_bases, swig_DFProcConfig_base_names };

static int _wrap_new_DFProcess(lua_State* L) {
  int SWIG_arg = 0;
  DFProcConfig arg1 ;
  DFProcConfig *argp1 ;
  DFProcess *result = 0 ;
  
  SWIG_check_num_args("DFProcess::DFProcess",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DFProcess::DFProcess",1,"DFProcConfig");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_DFProcConfig,0))){
    SWIG_fail_ptr("new_DFProcess",1,SWIGTYPE_p_DFProcConfig);
  }
  arg1 = *argp1;
  
  result = (DFProcess *)new DFProcess(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DFProcess,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFProcess_process(lua_State* L) {
  int SWIG_arg = 0;
  DFProcess *arg1 = (DFProcess *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  SWIG_check_num_args("DFProcess::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DFProcess::process",1,"DFProcess *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DFProcess::process",2,"double *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("DFProcess::process",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DFProcess,0))){
    SWIG_fail_ptr("DFProcess_process",1,SWIGTYPE_p_DFProcess);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("DFProcess_process",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("DFProcess_process",3,SWIGTYPE_p_double);
  }
  
  (arg1)->process(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DFProcess(void *obj) {
DFProcess *arg1 = (DFProcess *) obj;
delete arg1;
}
static int _proxy__wrap_new_DFProcess(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DFProcess);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DFProcess_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DFProcess_methods[]= {
    { "process", _wrap_DFProcess_process},
    {0,0}
};
static swig_lua_method swig_DFProcess_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DFProcess_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DFProcess_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DFProcess_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DFProcess_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DFProcess_Sf_SwigStatic = {
    "DFProcess",
    swig_DFProcess_Sf_SwigStatic_methods,
    swig_DFProcess_Sf_SwigStatic_attributes,
    swig_DFProcess_Sf_SwigStatic_constants,
    swig_DFProcess_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DFProcess_bases[] = {0};
static const char *swig_DFProcess_base_names[] = {0};
static swig_lua_class _wrap_class_DFProcess = { "DFProcess", "DFProcess", &SWIGTYPE_p_DFProcess,_proxy__wrap_new_DFProcess, swig_delete_DFProcess, swig_DFProcess_methods, swig_DFProcess_attributes, &swig_DFProcess_Sf_SwigStatic, swig_DFProcess_meta, swig_DFProcess_bases, swig_DFProcess_base_names };

static int _wrap_new_FiltFilt(lua_State* L) {
  int SWIG_arg = 0;
  Filter::Parameters arg1 ;
  Filter::Parameters *argp1 ;
  FiltFilt *result = 0 ;
  
  SWIG_check_num_args("FiltFilt::FiltFilt",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FiltFilt::FiltFilt",1,"Filter::Parameters");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_Filter__Parameters,0))){
    SWIG_fail_ptr("new_FiltFilt",1,SWIGTYPE_p_Filter__Parameters);
  }
  arg1 = *argp1;
  
  result = (FiltFilt *)new FiltFilt(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FiltFilt,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FiltFilt_process(lua_State* L) {
  int SWIG_arg = 0;
  FiltFilt *arg1 = (FiltFilt *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  double *arg3 = (double *) (double *)0 ;
  int arg4 ;
  
  SWIG_check_num_args("FiltFilt::process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FiltFilt::process",1,"FiltFilt *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FiltFilt::process",2,"double const *const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("FiltFilt::process",3,"double *const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FiltFilt::process",4,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FiltFilt,0))){
    SWIG_fail_ptr("FiltFilt_process",1,SWIGTYPE_p_FiltFilt);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FiltFilt_process",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FiltFilt_process",3,SWIGTYPE_p_double);
  }
  
  arg4 = (int const)lua_tonumber(L, 4);
  (arg1)->process((double const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FiltFilt(void *obj) {
FiltFilt *arg1 = (FiltFilt *) obj;
delete arg1;
}
static int _proxy__wrap_new_FiltFilt(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FiltFilt);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FiltFilt_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FiltFilt_methods[]= {
    { "process", _wrap_FiltFilt_process},
    {0,0}
};
static swig_lua_method swig_FiltFilt_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FiltFilt_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FiltFilt_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FiltFilt_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FiltFilt_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FiltFilt_Sf_SwigStatic = {
    "FiltFilt",
    swig_FiltFilt_Sf_SwigStatic_methods,
    swig_FiltFilt_Sf_SwigStatic_attributes,
    swig_FiltFilt_Sf_SwigStatic_constants,
    swig_FiltFilt_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FiltFilt_bases[] = {0};
static const char *swig_FiltFilt_base_names[] = {0};
static swig_lua_class _wrap_class_FiltFilt = { "FiltFilt", "FiltFilt", &SWIGTYPE_p_FiltFilt,_proxy__wrap_new_FiltFilt, swig_delete_FiltFilt, swig_FiltFilt_methods, swig_FiltFilt_attributes, &swig_FiltFilt_Sf_SwigStatic, swig_FiltFilt_meta, swig_FiltFilt_bases, swig_FiltFilt_base_names };

static int _wrap_new_Filter(lua_State* L) {
  int SWIG_arg = 0;
  Filter::Parameters arg1 ;
  Filter::Parameters *argp1 ;
  Filter *result = 0 ;
  
  SWIG_check_num_args("Filter::Filter",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Filter::Filter",1,"Filter::Parameters");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_Filter__Parameters,0))){
    SWIG_fail_ptr("new_Filter",1,SWIGTYPE_p_Filter__Parameters);
  }
  arg1 = *argp1;
  
  result = (Filter *)new Filter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_reset(lua_State* L) {
  int SWIG_arg = 0;
  Filter *arg1 = (Filter *) 0 ;
  
  SWIG_check_num_args("Filter::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filter::reset",1,"Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filter,0))){
    SWIG_fail_ptr("Filter_reset",1,SWIGTYPE_p_Filter);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_process(lua_State* L) {
  int SWIG_arg = 0;
  Filter *arg1 = (Filter *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  double *arg3 = (double *) (double *)0 ;
  int arg4 ;
  
  SWIG_check_num_args("Filter::process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filter::process",1,"Filter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filter::process",2,"double const *const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Filter::process",3,"double *const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filter::process",4,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filter,0))){
    SWIG_fail_ptr("Filter_process",1,SWIGTYPE_p_Filter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Filter_process",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Filter_process",3,SWIGTYPE_p_double);
  }
  
  arg4 = (int const)lua_tonumber(L, 4);
  (arg1)->process((double const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_getOrder(lua_State* L) {
  int SWIG_arg = 0;
  Filter *arg1 = (Filter *) 0 ;
  int result;
  
  SWIG_check_num_args("Filter::getOrder",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filter::getOrder",1,"Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filter,0))){
    SWIG_fail_ptr("Filter_getOrder",1,SWIGTYPE_p_Filter);
  }
  
  result = (int)((Filter const *)arg1)->getOrder();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Filter(void *obj) {
Filter *arg1 = (Filter *) obj;
delete arg1;
}
static int _proxy__wrap_new_Filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Filter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Filter_methods[]= {
    { "reset", _wrap_Filter_reset},
    { "process", _wrap_Filter_process},
    { "getOrder", _wrap_Filter_getOrder},
    {0,0}
};
static swig_lua_method swig_Filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Filter_Sf_SwigStatic = {
    "Filter",
    swig_Filter_Sf_SwigStatic_methods,
    swig_Filter_Sf_SwigStatic_attributes,
    swig_Filter_Sf_SwigStatic_constants,
    swig_Filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Filter_bases[] = {0};
static const char *swig_Filter_base_names[] = {0};
static swig_lua_class _wrap_class_Filter = { "Filter", "Filter", &SWIGTYPE_p_Filter,_proxy__wrap_new_Filter, swig_delete_Filter, swig_Filter_methods, swig_Filter_attributes, &swig_Filter_Sf_SwigStatic, swig_Filter_meta, swig_Filter_bases, swig_Filter_base_names };

static int _wrap_new_Framer(lua_State* L) {
  int SWIG_arg = 0;
  Framer *result = 0 ;
  
  SWIG_check_num_args("Framer::Framer",0,0)
  result = (Framer *)new Framer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Framer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Framer_setSource(lua_State* L) {
  int SWIG_arg = 0;
  Framer *arg1 = (Framer *) 0 ;
  double *arg2 = (double *) 0 ;
  int64_t arg3 ;
  int64_t *argp3 ;
  
  SWIG_check_num_args("Framer::setSource",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Framer::setSource",1,"Framer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Framer::setSource",2,"double *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Framer::setSource",3,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Framer,0))){
    SWIG_fail_ptr("Framer_setSource",1,SWIGTYPE_p_Framer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Framer_setSource",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("Framer_setSource",3,SWIGTYPE_p_int64_t);
  }
  arg3 = *argp3;
  
  (arg1)->setSource(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Framer_configure(lua_State* L) {
  int SWIG_arg = 0;
  Framer *arg1 = (Framer *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("Framer::configure",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Framer::configure",1,"Framer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Framer::configure",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Framer::configure",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Framer,0))){
    SWIG_fail_ptr("Framer_configure",1,SWIGTYPE_p_Framer);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->configure(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Framer_getMaxNoFrames(lua_State* L) {
  int SWIG_arg = 0;
  Framer *arg1 = (Framer *) 0 ;
  int result;
  
  SWIG_check_num_args("Framer::getMaxNoFrames",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Framer::getMaxNoFrames",1,"Framer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Framer,0))){
    SWIG_fail_ptr("Framer_getMaxNoFrames",1,SWIGTYPE_p_Framer);
  }
  
  result = (int)(arg1)->getMaxNoFrames();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Framer_getFrame(lua_State* L) {
  int SWIG_arg = 0;
  Framer *arg1 = (Framer *) 0 ;
  double *arg2 = (double *) 0 ;
  
  SWIG_check_num_args("Framer::getFrame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Framer::getFrame",1,"Framer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Framer::getFrame",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Framer,0))){
    SWIG_fail_ptr("Framer_getFrame",1,SWIGTYPE_p_Framer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Framer_getFrame",2,SWIGTYPE_p_double);
  }
  
  (arg1)->getFrame(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Framer_resetCounters(lua_State* L) {
  int SWIG_arg = 0;
  Framer *arg1 = (Framer *) 0 ;
  
  SWIG_check_num_args("Framer::resetCounters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Framer::resetCounters",1,"Framer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Framer,0))){
    SWIG_fail_ptr("Framer_resetCounters",1,SWIGTYPE_p_Framer);
  }
  
  (arg1)->resetCounters();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Framer(void *obj) {
Framer *arg1 = (Framer *) obj;
delete arg1;
}
static int _proxy__wrap_new_Framer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Framer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Framer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Framer_methods[]= {
    { "setSource", _wrap_Framer_setSource},
    { "configure", _wrap_Framer_configure},
    { "getMaxNoFrames", _wrap_Framer_getMaxNoFrames},
    { "getFrame", _wrap_Framer_getFrame},
    { "resetCounters", _wrap_Framer_resetCounters},
    {0,0}
};
static swig_lua_method swig_Framer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Framer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Framer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Framer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Framer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Framer_Sf_SwigStatic = {
    "Framer",
    swig_Framer_Sf_SwigStatic_methods,
    swig_Framer_Sf_SwigStatic_attributes,
    swig_Framer_Sf_SwigStatic_constants,
    swig_Framer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Framer_bases[] = {0};
static const char *swig_Framer_base_names[] = {0};
static swig_lua_class _wrap_class_Framer = { "Framer", "Framer", &SWIGTYPE_p_Framer,_proxy__wrap_new_Framer, swig_delete_Framer, swig_Framer_methods, swig_Framer_attributes, &swig_Framer_Sf_SwigStatic, swig_Framer_meta, swig_Framer_bases, swig_Framer_base_names };

static int _wrap_new_DownBeat(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  DownBeat *result = 0 ;
  
  SWIG_check_num_args("DownBeat::DownBeat",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DownBeat::DownBeat",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DownBeat::DownBeat",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DownBeat::DownBeat",3,"size_t");
  arg1 = (float)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (DownBeat *)new DownBeat(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DownBeat,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DownBeat_setBeatsPerBar(lua_State* L) {
  int SWIG_arg = 0;
  DownBeat *arg1 = (DownBeat *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("DownBeat::setBeatsPerBar",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DownBeat::setBeatsPerBar",1,"DownBeat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DownBeat::setBeatsPerBar",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DownBeat,0))){
    SWIG_fail_ptr("DownBeat_setBeatsPerBar",1,SWIGTYPE_p_DownBeat);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setBeatsPerBar(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DownBeat_findDownBeats(lua_State* L) {
  int SWIG_arg = 0;
  DownBeat *arg1 = (DownBeat *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  std::vector< double > *arg4 = 0 ;
  std::vector< int > *arg5 = 0 ;
  
  SWIG_check_num_args("DownBeat::findDownBeats",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DownBeat::findDownBeats",1,"DownBeat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DownBeat::findDownBeats",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DownBeat::findDownBeats",3,"size_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DownBeat::findDownBeats",4,"std::vector< double > const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DownBeat::findDownBeats",5,"std::vector< int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DownBeat,0))){
    SWIG_fail_ptr("DownBeat_findDownBeats",1,SWIGTYPE_p_DownBeat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DownBeat_findDownBeats",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("DownBeat_findDownBeats",4,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("DownBeat_findDownBeats",5,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  (arg1)->findDownBeats((float const *)arg2,arg3,(std::vector< double > const &)*arg4,*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DownBeat_getBeatSD(lua_State* L) {
  int SWIG_arg = 0;
  DownBeat *arg1 = (DownBeat *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DownBeat::getBeatSD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DownBeat::getBeatSD",1,"DownBeat const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DownBeat::getBeatSD",2,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DownBeat,0))){
    SWIG_fail_ptr("DownBeat_getBeatSD",1,SWIGTYPE_p_DownBeat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("DownBeat_getBeatSD",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  ((DownBeat const *)arg1)->getBeatSD(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DownBeat_pushAudioBlock(lua_State* L) {
  int SWIG_arg = 0;
  DownBeat *arg1 = (DownBeat *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("DownBeat::pushAudioBlock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DownBeat::pushAudioBlock",1,"DownBeat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DownBeat::pushAudioBlock",2,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DownBeat,0))){
    SWIG_fail_ptr("DownBeat_pushAudioBlock",1,SWIGTYPE_p_DownBeat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DownBeat_pushAudioBlock",2,SWIGTYPE_p_float);
  }
  
  (arg1)->pushAudioBlock((float const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DownBeat_getBufferedAudio(lua_State* L) {
  int SWIG_arg = 0;
  DownBeat *arg1 = (DownBeat *) 0 ;
  size_t *arg2 = 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("DownBeat::getBufferedAudio",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DownBeat::getBufferedAudio",1,"DownBeat const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DownBeat::getBufferedAudio",2,"size_t &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DownBeat,0))){
    SWIG_fail_ptr("DownBeat_getBufferedAudio",1,SWIGTYPE_p_DownBeat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_size_t,0))){
    SWIG_fail_ptr("DownBeat_getBufferedAudio",2,SWIGTYPE_p_size_t);
  }
  
  result = (float *)((DownBeat const *)arg1)->getBufferedAudio(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DownBeat_resetAudioBuffer(lua_State* L) {
  int SWIG_arg = 0;
  DownBeat *arg1 = (DownBeat *) 0 ;
  
  SWIG_check_num_args("DownBeat::resetAudioBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DownBeat::resetAudioBuffer",1,"DownBeat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DownBeat,0))){
    SWIG_fail_ptr("DownBeat_resetAudioBuffer",1,SWIGTYPE_p_DownBeat);
  }
  
  (arg1)->resetAudioBuffer();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DownBeat(void *obj) {
DownBeat *arg1 = (DownBeat *) obj;
delete arg1;
}
static int _proxy__wrap_new_DownBeat(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DownBeat);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DownBeat_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DownBeat_methods[]= {
    { "setBeatsPerBar", _wrap_DownBeat_setBeatsPerBar},
    { "findDownBeats", _wrap_DownBeat_findDownBeats},
    { "getBeatSD", _wrap_DownBeat_getBeatSD},
    { "pushAudioBlock", _wrap_DownBeat_pushAudioBlock},
    { "getBufferedAudio", _wrap_DownBeat_getBufferedAudio},
    { "resetAudioBuffer", _wrap_DownBeat_resetAudioBuffer},
    {0,0}
};
static swig_lua_method swig_DownBeat_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DownBeat_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DownBeat_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DownBeat_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DownBeat_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DownBeat_Sf_SwigStatic = {
    "DownBeat",
    swig_DownBeat_Sf_SwigStatic_methods,
    swig_DownBeat_Sf_SwigStatic_attributes,
    swig_DownBeat_Sf_SwigStatic_constants,
    swig_DownBeat_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DownBeat_bases[] = {0};
static const char *swig_DownBeat_base_names[] = {0};
static swig_lua_class _wrap_class_DownBeat = { "DownBeat", "DownBeat", &SWIGTYPE_p_DownBeat,_proxy__wrap_new_DownBeat, swig_delete_DownBeat, swig_DownBeat_methods, swig_DownBeat_attributes, &swig_DownBeat_Sf_SwigStatic, swig_DownBeat_meta, swig_DownBeat_bases, swig_DownBeat_base_names };

static int _wrap_WinThresh_pre_set(lua_State* L) {
  int SWIG_arg = 0;
  WinThresh *arg1 = (WinThresh *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("WinThresh::pre",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WinThresh::pre",1,"WinThresh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("WinThresh::pre",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WinThresh,0))){
    SWIG_fail_ptr("WinThresh_pre_set",1,SWIGTYPE_p_WinThresh);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->pre = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WinThresh_pre_get(lua_State* L) {
  int SWIG_arg = 0;
  WinThresh *arg1 = (WinThresh *) 0 ;
  int result;
  
  SWIG_check_num_args("WinThresh::pre",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WinThresh::pre",1,"WinThresh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WinThresh,0))){
    SWIG_fail_ptr("WinThresh_pre_get",1,SWIGTYPE_p_WinThresh);
  }
  
  result = (int) ((arg1)->pre);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WinThresh_post_set(lua_State* L) {
  int SWIG_arg = 0;
  WinThresh *arg1 = (WinThresh *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("WinThresh::post",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WinThresh::post",1,"WinThresh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("WinThresh::post",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WinThresh,0))){
    SWIG_fail_ptr("WinThresh_post_set",1,SWIGTYPE_p_WinThresh);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->post = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WinThresh_post_get(lua_State* L) {
  int SWIG_arg = 0;
  WinThresh *arg1 = (WinThresh *) 0 ;
  int result;
  
  SWIG_check_num_args("WinThresh::post",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WinThresh::post",1,"WinThresh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WinThresh,0))){
    SWIG_fail_ptr("WinThresh_post_get",1,SWIGTYPE_p_WinThresh);
  }
  
  result = (int) ((arg1)->post);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WinThresh(lua_State* L) {
  int SWIG_arg = 0;
  WinThresh *result = 0 ;
  
  SWIG_check_num_args("WinThresh::WinThresh",0,0)
  result = (WinThresh *)new WinThresh();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WinThresh,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WinThresh(void *obj) {
WinThresh *arg1 = (WinThresh *) obj;
delete arg1;
}
static int _proxy__wrap_new_WinThresh(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_WinThresh);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_WinThresh_attributes[] = {
    { "pre", _wrap_WinThresh_pre_get, _wrap_WinThresh_pre_set },
    { "post", _wrap_WinThresh_post_get, _wrap_WinThresh_post_set },
    {0,0,0}
};
static swig_lua_method swig_WinThresh_methods[]= {
    {0,0}
};
static swig_lua_method swig_WinThresh_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WinThresh_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WinThresh_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WinThresh_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WinThresh_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WinThresh_Sf_SwigStatic = {
    "WinThresh",
    swig_WinThresh_Sf_SwigStatic_methods,
    swig_WinThresh_Sf_SwigStatic_attributes,
    swig_WinThresh_Sf_SwigStatic_constants,
    swig_WinThresh_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WinThresh_bases[] = {0};
static const char *swig_WinThresh_base_names[] = {0};
static swig_lua_class _wrap_class_WinThresh = { "WinThresh", "WinThresh", &SWIGTYPE_p_WinThresh,_proxy__wrap_new_WinThresh, swig_delete_WinThresh, swig_WinThresh_methods, swig_WinThresh_attributes, &swig_WinThresh_Sf_SwigStatic, swig_WinThresh_meta, swig_WinThresh_bases, swig_WinThresh_base_names };

static int _wrap_TTParams_winLength_set(lua_State* L) {
  int SWIG_arg = 0;
  TTParams *arg1 = (TTParams *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("TTParams::winLength",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTParams::winLength",1,"TTParams *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TTParams::winLength",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTParams,0))){
    SWIG_fail_ptr("TTParams_winLength_set",1,SWIGTYPE_p_TTParams);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->winLength = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TTParams_winLength_get(lua_State* L) {
  int SWIG_arg = 0;
  TTParams *arg1 = (TTParams *) 0 ;
  int result;
  
  SWIG_check_num_args("TTParams::winLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTParams::winLength",1,"TTParams *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTParams,0))){
    SWIG_fail_ptr("TTParams_winLength_get",1,SWIGTYPE_p_TTParams);
  }
  
  result = (int) ((arg1)->winLength);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TTParams_lagLength_set(lua_State* L) {
  int SWIG_arg = 0;
  TTParams *arg1 = (TTParams *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("TTParams::lagLength",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTParams::lagLength",1,"TTParams *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TTParams::lagLength",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTParams,0))){
    SWIG_fail_ptr("TTParams_lagLength_set",1,SWIGTYPE_p_TTParams);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->lagLength = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TTParams_lagLength_get(lua_State* L) {
  int SWIG_arg = 0;
  TTParams *arg1 = (TTParams *) 0 ;
  int result;
  
  SWIG_check_num_args("TTParams::lagLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTParams::lagLength",1,"TTParams *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTParams,0))){
    SWIG_fail_ptr("TTParams_lagLength_get",1,SWIGTYPE_p_TTParams);
  }
  
  result = (int) ((arg1)->lagLength);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TTParams_alpha_set(lua_State* L) {
  int SWIG_arg = 0;
  TTParams *arg1 = (TTParams *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("TTParams::alpha",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTParams::alpha",1,"TTParams *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TTParams::alpha",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTParams,0))){
    SWIG_fail_ptr("TTParams_alpha_set",1,SWIGTYPE_p_TTParams);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->alpha = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TTParams_alpha_get(lua_State* L) {
  int SWIG_arg = 0;
  TTParams *arg1 = (TTParams *) 0 ;
  int result;
  
  SWIG_check_num_args("TTParams::alpha",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTParams::alpha",1,"TTParams *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTParams,0))){
    SWIG_fail_ptr("TTParams_alpha_get",1,SWIGTYPE_p_TTParams);
  }
  
  result = (int) ((arg1)->alpha);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TTParams_LPOrd_set(lua_State* L) {
  int SWIG_arg = 0;
  TTParams *arg1 = (TTParams *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("TTParams::LPOrd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTParams::LPOrd",1,"TTParams *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TTParams::LPOrd",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTParams,0))){
    SWIG_fail_ptr("TTParams_LPOrd_set",1,SWIGTYPE_p_TTParams);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->LPOrd = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TTParams_LPOrd_get(lua_State* L) {
  int SWIG_arg = 0;
  TTParams *arg1 = (TTParams *) 0 ;
  int result;
  
  SWIG_check_num_args("TTParams::LPOrd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTParams::LPOrd",1,"TTParams *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTParams,0))){
    SWIG_fail_ptr("TTParams_LPOrd_get",1,SWIGTYPE_p_TTParams);
  }
  
  result = (int) ((arg1)->LPOrd);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TTParams_LPACoeffs_set(lua_State* L) {
  int SWIG_arg = 0;
  TTParams *arg1 = (TTParams *) 0 ;
  double *arg2 = (double *) 0 ;
  
  SWIG_check_num_args("TTParams::LPACoeffs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTParams::LPACoeffs",1,"TTParams *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TTParams::LPACoeffs",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTParams,0))){
    SWIG_fail_ptr("TTParams_LPACoeffs_set",1,SWIGTYPE_p_TTParams);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("TTParams_LPACoeffs_set",2,SWIGTYPE_p_double);
  }
  
  if (arg1) (arg1)->LPACoeffs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TTParams_LPACoeffs_get(lua_State* L) {
  int SWIG_arg = 0;
  TTParams *arg1 = (TTParams *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("TTParams::LPACoeffs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTParams::LPACoeffs",1,"TTParams *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTParams,0))){
    SWIG_fail_ptr("TTParams_LPACoeffs_get",1,SWIGTYPE_p_TTParams);
  }
  
  result = (double *) ((arg1)->LPACoeffs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TTParams_LPBCoeffs_set(lua_State* L) {
  int SWIG_arg = 0;
  TTParams *arg1 = (TTParams *) 0 ;
  double *arg2 = (double *) 0 ;
  
  SWIG_check_num_args("TTParams::LPBCoeffs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTParams::LPBCoeffs",1,"TTParams *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TTParams::LPBCoeffs",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTParams,0))){
    SWIG_fail_ptr("TTParams_LPBCoeffs_set",1,SWIGTYPE_p_TTParams);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("TTParams_LPBCoeffs_set",2,SWIGTYPE_p_double);
  }
  
  if (arg1) (arg1)->LPBCoeffs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TTParams_LPBCoeffs_get(lua_State* L) {
  int SWIG_arg = 0;
  TTParams *arg1 = (TTParams *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("TTParams::LPBCoeffs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTParams::LPBCoeffs",1,"TTParams *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTParams,0))){
    SWIG_fail_ptr("TTParams_LPBCoeffs_get",1,SWIGTYPE_p_TTParams);
  }
  
  result = (double *) ((arg1)->LPBCoeffs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TTParams_WinT_set(lua_State* L) {
  int SWIG_arg = 0;
  TTParams *arg1 = (TTParams *) 0 ;
  WinThresh *arg2 = (WinThresh *) 0 ;
  
  SWIG_check_num_args("TTParams::WinT",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTParams::WinT",1,"TTParams *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TTParams::WinT",2,"WinThresh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTParams,0))){
    SWIG_fail_ptr("TTParams_WinT_set",1,SWIGTYPE_p_TTParams);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_WinThresh,0))){
    SWIG_fail_ptr("TTParams_WinT_set",2,SWIGTYPE_p_WinThresh);
  }
  
  if (arg1) (arg1)->WinT = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TTParams_WinT_get(lua_State* L) {
  int SWIG_arg = 0;
  TTParams *arg1 = (TTParams *) 0 ;
  WinThresh *result = 0 ;
  
  SWIG_check_num_args("TTParams::WinT",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TTParams::WinT",1,"TTParams *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TTParams,0))){
    SWIG_fail_ptr("TTParams_WinT_get",1,SWIGTYPE_p_TTParams);
  }
  
  result = (WinThresh *)& ((arg1)->WinT);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WinThresh,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TTParams(lua_State* L) {
  int SWIG_arg = 0;
  TTParams *result = 0 ;
  
  SWIG_check_num_args("TTParams::TTParams",0,0)
  result = (TTParams *)new TTParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TTParams,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TTParams(void *obj) {
TTParams *arg1 = (TTParams *) obj;
delete arg1;
}
static int _proxy__wrap_new_TTParams(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TTParams);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TTParams_attributes[] = {
    { "winLength", _wrap_TTParams_winLength_get, _wrap_TTParams_winLength_set },
    { "lagLength", _wrap_TTParams_lagLength_get, _wrap_TTParams_lagLength_set },
    { "alpha", _wrap_TTParams_alpha_get, _wrap_TTParams_alpha_set },
    { "LPOrd", _wrap_TTParams_LPOrd_get, _wrap_TTParams_LPOrd_set },
    { "LPACoeffs", _wrap_TTParams_LPACoeffs_get, _wrap_TTParams_LPACoeffs_set },
    { "LPBCoeffs", _wrap_TTParams_LPBCoeffs_get, _wrap_TTParams_LPBCoeffs_set },
    { "WinT", _wrap_TTParams_WinT_get, _wrap_TTParams_WinT_set },
    {0,0,0}
};
static swig_lua_method swig_TTParams_methods[]= {
    {0,0}
};
static swig_lua_method swig_TTParams_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TTParams_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TTParams_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TTParams_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TTParams_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TTParams_Sf_SwigStatic = {
    "TTParams",
    swig_TTParams_Sf_SwigStatic_methods,
    swig_TTParams_Sf_SwigStatic_attributes,
    swig_TTParams_Sf_SwigStatic_constants,
    swig_TTParams_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TTParams_bases[] = {0};
static const char *swig_TTParams_base_names[] = {0};
static swig_lua_class _wrap_class_TTParams = { "TTParams", "TTParams", &SWIGTYPE_p_TTParams,_proxy__wrap_new_TTParams, swig_delete_TTParams, swig_TTParams_methods, swig_TTParams_attributes, &swig_TTParams_Sf_SwigStatic, swig_TTParams_meta, swig_TTParams_bases, swig_TTParams_base_names };

static int _wrap_new_TempoTrack(lua_State* L) {
  int SWIG_arg = 0;
  TTParams arg1 ;
  TTParams *argp1 ;
  TempoTrack *result = 0 ;
  
  SWIG_check_num_args("TempoTrack::TempoTrack",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TempoTrack::TempoTrack",1,"TTParams");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_TTParams,0))){
    SWIG_fail_ptr("new_TempoTrack",1,SWIGTYPE_p_TTParams);
  }
  arg1 = *argp1;
  
  result = (TempoTrack *)new TempoTrack(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TempoTrack,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TempoTrack_process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TempoTrack *arg1 = (TempoTrack *) 0 ;
  SwigValueWrapper< std::vector< double > > arg2 ;
  std::vector< double > *arg3 = (std::vector< double > *) 0 ;
  std::vector< double > *argp2 ;
  SwigValueWrapper< std::vector< int > > result;
  
  SWIG_check_num_args("TempoTrack::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TempoTrack::process",1,"TempoTrack *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TempoTrack::process",2,"std::vector< double >");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TempoTrack::process",3,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TempoTrack,0))){
    SWIG_fail_ptr("TempoTrack_process",1,SWIGTYPE_p_TempoTrack);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("TempoTrack_process",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("TempoTrack_process",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (arg1)->process(arg2,arg3);
  {
    std::vector< int > * resultptr = new std::vector< int >((const std::vector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TempoTrack_process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TempoTrack *arg1 = (TempoTrack *) 0 ;
  SwigValueWrapper< std::vector< double > > arg2 ;
  std::vector< double > *argp2 ;
  SwigValueWrapper< std::vector< int > > result;
  
  SWIG_check_num_args("TempoTrack::process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TempoTrack::process",1,"TempoTrack *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TempoTrack::process",2,"std::vector< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TempoTrack,0))){
    SWIG_fail_ptr("TempoTrack_process",1,SWIGTYPE_p_TempoTrack);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("TempoTrack_process",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  arg2 = *argp2;
  
  result = (arg1)->process(arg2);
  {
    std::vector< int > * resultptr = new std::vector< int >((const std::vector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TempoTrack_process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TempoTrack, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TempoTrack_process__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TempoTrack, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TempoTrack_process__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TempoTrack_process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TempoTrack::process(std::vector< double >,std::vector< double > *)\n"
    "    TempoTrack::process(std::vector< double >)\n");
  lua_error(L);return 0;
}


static void swig_delete_TempoTrack(void *obj) {
TempoTrack *arg1 = (TempoTrack *) obj;
delete arg1;
}
static int _proxy__wrap_new_TempoTrack(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TempoTrack);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TempoTrack_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TempoTrack_methods[]= {
    { "process", _wrap_TempoTrack_process},
    {0,0}
};
static swig_lua_method swig_TempoTrack_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TempoTrack_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TempoTrack_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TempoTrack_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TempoTrack_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TempoTrack_Sf_SwigStatic = {
    "TempoTrack",
    swig_TempoTrack_Sf_SwigStatic_methods,
    swig_TempoTrack_Sf_SwigStatic_attributes,
    swig_TempoTrack_Sf_SwigStatic_constants,
    swig_TempoTrack_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TempoTrack_bases[] = {0};
static const char *swig_TempoTrack_base_names[] = {0};
static swig_lua_class _wrap_class_TempoTrack = { "TempoTrack", "TempoTrack", &SWIGTYPE_p_TempoTrack,_proxy__wrap_new_TempoTrack, swig_delete_TempoTrack, swig_TempoTrack_methods, swig_TempoTrack_attributes, &swig_TempoTrack_Sf_SwigStatic, swig_TempoTrack_meta, swig_TempoTrack_bases, swig_TempoTrack_base_names };

static int _wrap_new_TempoTrackV2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  int arg2 ;
  TempoTrackV2 *result = 0 ;
  
  SWIG_check_num_args("TempoTrackV2::TempoTrackV2",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TempoTrackV2::TempoTrackV2",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TempoTrackV2::TempoTrackV2",2,"int");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (TempoTrackV2 *)new TempoTrackV2(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TempoTrackV2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TempoTrackV2_calculateBeatPeriod__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TempoTrackV2 *arg1 = (TempoTrackV2 *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::vector< double > *arg3 = 0 ;
  std::vector< double > *arg4 = 0 ;
  
  SWIG_check_num_args("TempoTrackV2::calculateBeatPeriod",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TempoTrackV2::calculateBeatPeriod",1,"TempoTrackV2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TempoTrackV2::calculateBeatPeriod",2,"std::vector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TempoTrackV2::calculateBeatPeriod",3,"std::vector< double > &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("TempoTrackV2::calculateBeatPeriod",4,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TempoTrackV2,0))){
    SWIG_fail_ptr("TempoTrackV2_calculateBeatPeriod",1,SWIGTYPE_p_TempoTrackV2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("TempoTrackV2_calculateBeatPeriod",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("TempoTrackV2_calculateBeatPeriod",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("TempoTrackV2_calculateBeatPeriod",4,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->calculateBeatPeriod((std::vector< double > const &)*arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TempoTrackV2_calculateBeatPeriod__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TempoTrackV2 *arg1 = (TempoTrackV2 *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::vector< double > *arg3 = 0 ;
  std::vector< double > *arg4 = 0 ;
  double arg5 ;
  bool arg6 ;
  
  SWIG_check_num_args("TempoTrackV2::calculateBeatPeriod",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TempoTrackV2::calculateBeatPeriod",1,"TempoTrackV2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TempoTrackV2::calculateBeatPeriod",2,"std::vector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TempoTrackV2::calculateBeatPeriod",3,"std::vector< double > &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("TempoTrackV2::calculateBeatPeriod",4,"std::vector< double > &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("TempoTrackV2::calculateBeatPeriod",5,"double");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("TempoTrackV2::calculateBeatPeriod",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TempoTrackV2,0))){
    SWIG_fail_ptr("TempoTrackV2_calculateBeatPeriod",1,SWIGTYPE_p_TempoTrackV2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("TempoTrackV2_calculateBeatPeriod",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("TempoTrackV2_calculateBeatPeriod",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("TempoTrackV2_calculateBeatPeriod",4,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  arg5 = (double)lua_tonumber(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0);
  (arg1)->calculateBeatPeriod((std::vector< double > const &)*arg2,*arg3,*arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TempoTrackV2_calculateBeatPeriod(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TempoTrackV2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_TempoTrackV2_calculateBeatPeriod__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TempoTrackV2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_TempoTrackV2_calculateBeatPeriod__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TempoTrackV2_calculateBeatPeriod'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TempoTrackV2::calculateBeatPeriod(std::vector< double > const &,std::vector< double > &,std::vector< double > &)\n"
    "    TempoTrackV2::calculateBeatPeriod(std::vector< double > const &,std::vector< double > &,std::vector< double > &,double,bool)\n");
  lua_error(L);return 0;
}


static int _wrap_TempoTrackV2_calculateBeats__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TempoTrackV2 *arg1 = (TempoTrackV2 *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::vector< double > *arg3 = 0 ;
  std::vector< double > *arg4 = 0 ;
  
  SWIG_check_num_args("TempoTrackV2::calculateBeats",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TempoTrackV2::calculateBeats",1,"TempoTrackV2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TempoTrackV2::calculateBeats",2,"std::vector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TempoTrackV2::calculateBeats",3,"std::vector< double > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("TempoTrackV2::calculateBeats",4,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TempoTrackV2,0))){
    SWIG_fail_ptr("TempoTrackV2_calculateBeats",1,SWIGTYPE_p_TempoTrackV2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("TempoTrackV2_calculateBeats",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("TempoTrackV2_calculateBeats",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("TempoTrackV2_calculateBeats",4,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->calculateBeats((std::vector< double > const &)*arg2,(std::vector< double > const &)*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TempoTrackV2_calculateBeats__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TempoTrackV2 *arg1 = (TempoTrackV2 *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::vector< double > *arg3 = 0 ;
  std::vector< double > *arg4 = 0 ;
  double arg5 ;
  double arg6 ;
  
  SWIG_check_num_args("TempoTrackV2::calculateBeats",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TempoTrackV2::calculateBeats",1,"TempoTrackV2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TempoTrackV2::calculateBeats",2,"std::vector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TempoTrackV2::calculateBeats",3,"std::vector< double > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("TempoTrackV2::calculateBeats",4,"std::vector< double > &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("TempoTrackV2::calculateBeats",5,"double");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("TempoTrackV2::calculateBeats",6,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TempoTrackV2,0))){
    SWIG_fail_ptr("TempoTrackV2_calculateBeats",1,SWIGTYPE_p_TempoTrackV2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("TempoTrackV2_calculateBeats",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("TempoTrackV2_calculateBeats",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("TempoTrackV2_calculateBeats",4,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  arg5 = (double)lua_tonumber(L, 5);
  arg6 = (double)lua_tonumber(L, 6);
  (arg1)->calculateBeats((std::vector< double > const &)*arg2,(std::vector< double > const &)*arg3,*arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TempoTrackV2_calculateBeats(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TempoTrackV2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_TempoTrackV2_calculateBeats__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TempoTrackV2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_TempoTrackV2_calculateBeats__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TempoTrackV2_calculateBeats'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TempoTrackV2::calculateBeats(std::vector< double > const &,std::vector< double > const &,std::vector< double > &)\n"
    "    TempoTrackV2::calculateBeats(std::vector< double > const &,std::vector< double > const &,std::vector< double > &,double,double)\n");
  lua_error(L);return 0;
}


static void swig_delete_TempoTrackV2(void *obj) {
TempoTrackV2 *arg1 = (TempoTrackV2 *) obj;
delete arg1;
}
static int _proxy__wrap_new_TempoTrackV2(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TempoTrackV2);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TempoTrackV2_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TempoTrackV2_methods[]= {
    { "calculateBeatPeriod", _wrap_TempoTrackV2_calculateBeatPeriod},
    { "calculateBeats", _wrap_TempoTrackV2_calculateBeats},
    {0,0}
};
static swig_lua_method swig_TempoTrackV2_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TempoTrackV2_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TempoTrackV2_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TempoTrackV2_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TempoTrackV2_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TempoTrackV2_Sf_SwigStatic = {
    "TempoTrackV2",
    swig_TempoTrackV2_Sf_SwigStatic_methods,
    swig_TempoTrackV2_Sf_SwigStatic_attributes,
    swig_TempoTrackV2_Sf_SwigStatic_constants,
    swig_TempoTrackV2_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TempoTrackV2_bases[] = {0};
static const char *swig_TempoTrackV2_base_names[] = {0};
static swig_lua_class _wrap_class_TempoTrackV2 = { "TempoTrackV2", "TempoTrackV2", &SWIGTYPE_p_TempoTrackV2,_proxy__wrap_new_TempoTrackV2, swig_delete_TempoTrackV2, swig_TempoTrackV2_methods, swig_TempoTrackV2_attributes, &swig_TempoTrackV2_Sf_SwigStatic, swig_TempoTrackV2_meta, swig_TempoTrackV2_bases, swig_TempoTrackV2_base_names };

static int _wrap_ChangeDFConfig_smoothingWidth_set(lua_State* L) {
  int SWIG_arg = 0;
  ChangeDFConfig *arg1 = (ChangeDFConfig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ChangeDFConfig::smoothingWidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ChangeDFConfig::smoothingWidth",1,"ChangeDFConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ChangeDFConfig::smoothingWidth",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ChangeDFConfig,0))){
    SWIG_fail_ptr("ChangeDFConfig_smoothingWidth_set",1,SWIGTYPE_p_ChangeDFConfig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->smoothingWidth = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChangeDFConfig_smoothingWidth_get(lua_State* L) {
  int SWIG_arg = 0;
  ChangeDFConfig *arg1 = (ChangeDFConfig *) 0 ;
  int result;
  
  SWIG_check_num_args("ChangeDFConfig::smoothingWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ChangeDFConfig::smoothingWidth",1,"ChangeDFConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ChangeDFConfig,0))){
    SWIG_fail_ptr("ChangeDFConfig_smoothingWidth_get",1,SWIGTYPE_p_ChangeDFConfig);
  }
  
  result = (int) ((arg1)->smoothingWidth);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ChangeDFConfig(lua_State* L) {
  int SWIG_arg = 0;
  ChangeDFConfig *result = 0 ;
  
  SWIG_check_num_args("ChangeDFConfig::ChangeDFConfig",0,0)
  result = (ChangeDFConfig *)new ChangeDFConfig();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ChangeDFConfig,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ChangeDFConfig(void *obj) {
ChangeDFConfig *arg1 = (ChangeDFConfig *) obj;
delete arg1;
}
static int _proxy__wrap_new_ChangeDFConfig(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ChangeDFConfig);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ChangeDFConfig_attributes[] = {
    { "smoothingWidth", _wrap_ChangeDFConfig_smoothingWidth_get, _wrap_ChangeDFConfig_smoothingWidth_set },
    {0,0,0}
};
static swig_lua_method swig_ChangeDFConfig_methods[]= {
    {0,0}
};
static swig_lua_method swig_ChangeDFConfig_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ChangeDFConfig_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ChangeDFConfig_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ChangeDFConfig_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ChangeDFConfig_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ChangeDFConfig_Sf_SwigStatic = {
    "ChangeDFConfig",
    swig_ChangeDFConfig_Sf_SwigStatic_methods,
    swig_ChangeDFConfig_Sf_SwigStatic_attributes,
    swig_ChangeDFConfig_Sf_SwigStatic_constants,
    swig_ChangeDFConfig_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ChangeDFConfig_bases[] = {0};
static const char *swig_ChangeDFConfig_base_names[] = {0};
static swig_lua_class _wrap_class_ChangeDFConfig = { "ChangeDFConfig", "ChangeDFConfig", &SWIGTYPE_p_ChangeDFConfig,_proxy__wrap_new_ChangeDFConfig, swig_delete_ChangeDFConfig, swig_ChangeDFConfig_methods, swig_ChangeDFConfig_attributes, &swig_ChangeDFConfig_Sf_SwigStatic, swig_ChangeDFConfig_meta, swig_ChangeDFConfig_bases, swig_ChangeDFConfig_base_names };

static int _wrap_new_ChangeDetectionFunction(lua_State* L) {
  int SWIG_arg = 0;
  ChangeDFConfig arg1 ;
  ChangeDFConfig *argp1 ;
  ChangeDetectionFunction *result = 0 ;
  
  SWIG_check_num_args("ChangeDetectionFunction::ChangeDetectionFunction",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ChangeDetectionFunction::ChangeDetectionFunction",1,"ChangeDFConfig");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ChangeDFConfig,0))){
    SWIG_fail_ptr("new_ChangeDetectionFunction",1,SWIGTYPE_p_ChangeDFConfig);
  }
  arg1 = *argp1;
  
  result = (ChangeDetectionFunction *)new ChangeDetectionFunction(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ChangeDetectionFunction,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChangeDetectionFunction_process(lua_State* L) {
  int SWIG_arg = 0;
  ChangeDetectionFunction *arg1 = (ChangeDetectionFunction *) 0 ;
  TCSGram *arg2 = 0 ;
  ChangeDistance result;
  
  SWIG_check_num_args("ChangeDetectionFunction::process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ChangeDetectionFunction::process",1,"ChangeDetectionFunction *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ChangeDetectionFunction::process",2,"TCSGram const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ChangeDetectionFunction,0))){
    SWIG_fail_ptr("ChangeDetectionFunction_process",1,SWIGTYPE_p_ChangeDetectionFunction);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCSGram,0))){
    SWIG_fail_ptr("ChangeDetectionFunction_process",2,SWIGTYPE_p_TCSGram);
  }
  
  result = (arg1)->process((TCSGram const &)*arg2);
  {
    ChangeDistance * resultptr = new ChangeDistance((const ChangeDistance &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ChangeDetectionFunction(void *obj) {
ChangeDetectionFunction *arg1 = (ChangeDetectionFunction *) obj;
delete arg1;
}
static int _proxy__wrap_new_ChangeDetectionFunction(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ChangeDetectionFunction);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ChangeDetectionFunction_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ChangeDetectionFunction_methods[]= {
    { "process", _wrap_ChangeDetectionFunction_process},
    {0,0}
};
static swig_lua_method swig_ChangeDetectionFunction_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ChangeDetectionFunction_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ChangeDetectionFunction_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ChangeDetectionFunction_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ChangeDetectionFunction_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ChangeDetectionFunction_Sf_SwigStatic = {
    "ChangeDetectionFunction",
    swig_ChangeDetectionFunction_Sf_SwigStatic_methods,
    swig_ChangeDetectionFunction_Sf_SwigStatic_attributes,
    swig_ChangeDetectionFunction_Sf_SwigStatic_constants,
    swig_ChangeDetectionFunction_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ChangeDetectionFunction_bases[] = {0};
static const char *swig_ChangeDetectionFunction_base_names[] = {0};
static swig_lua_class _wrap_class_ChangeDetectionFunction = { "ChangeDetectionFunction", "ChangeDetectionFunction", &SWIGTYPE_p_ChangeDetectionFunction,_proxy__wrap_new_ChangeDetectionFunction, swig_delete_ChangeDetectionFunction, swig_ChangeDetectionFunction_methods, swig_ChangeDetectionFunction_attributes, &swig_ChangeDetectionFunction_Sf_SwigStatic, swig_ChangeDetectionFunction_meta, swig_ChangeDetectionFunction_bases, swig_ChangeDetectionFunction_base_names };

static int _wrap_new_TCSGram(lua_State* L) {
  int SWIG_arg = 0;
  TCSGram *result = 0 ;
  
  SWIG_check_num_args("TCSGram::TCSGram",0,0)
  result = (TCSGram *)new TCSGram();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCSGram,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCSGram_getTCSVector(lua_State* L) {
  int SWIG_arg = 0;
  TCSGram *arg1 = (TCSGram *) 0 ;
  int arg2 ;
  TCSVector *arg3 = 0 ;
  
  SWIG_check_num_args("TCSGram::getTCSVector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TCSGram::getTCSVector",1,"TCSGram const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCSGram::getTCSVector",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TCSGram::getTCSVector",3,"TCSVector &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCSGram,0))){
    SWIG_fail_ptr("TCSGram_getTCSVector",1,SWIGTYPE_p_TCSGram);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TCSVector,0))){
    SWIG_fail_ptr("TCSGram_getTCSVector",3,SWIGTYPE_p_TCSVector);
  }
  
  ((TCSGram const *)arg1)->getTCSVector(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCSGram_addTCSVector(lua_State* L) {
  int SWIG_arg = 0;
  TCSGram *arg1 = (TCSGram *) 0 ;
  TCSVector *arg2 = 0 ;
  
  SWIG_check_num_args("TCSGram::addTCSVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TCSGram::addTCSVector",1,"TCSGram *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TCSGram::addTCSVector",2,"TCSVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCSGram,0))){
    SWIG_fail_ptr("TCSGram_addTCSVector",1,SWIGTYPE_p_TCSGram);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCSVector,0))){
    SWIG_fail_ptr("TCSGram_addTCSVector",2,SWIGTYPE_p_TCSVector);
  }
  
  (arg1)->addTCSVector((TCSVector const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCSGram_getTime(lua_State* L) {
  int SWIG_arg = 0;
  TCSGram *arg1 = (TCSGram *) 0 ;
  size_t arg2 ;
  long result;
  
  SWIG_check_num_args("TCSGram::getTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TCSGram::getTime",1,"TCSGram const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCSGram::getTime",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCSGram,0))){
    SWIG_fail_ptr("TCSGram_getTime",1,SWIGTYPE_p_TCSGram);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (long)((TCSGram const *)arg1)->getTime(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCSGram_getDuration(lua_State* L) {
  int SWIG_arg = 0;
  TCSGram *arg1 = (TCSGram *) 0 ;
  long result;
  
  SWIG_check_num_args("TCSGram::getDuration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TCSGram::getDuration",1,"TCSGram const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCSGram,0))){
    SWIG_fail_ptr("TCSGram_getDuration",1,SWIGTYPE_p_TCSGram);
  }
  
  result = (long)((TCSGram const *)arg1)->getDuration();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCSGram_printDebug(lua_State* L) {
  int SWIG_arg = 0;
  TCSGram *arg1 = (TCSGram *) 0 ;
  
  SWIG_check_num_args("TCSGram::printDebug",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TCSGram::printDebug",1,"TCSGram *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCSGram,0))){
    SWIG_fail_ptr("TCSGram_printDebug",1,SWIGTYPE_p_TCSGram);
  }
  
  (arg1)->printDebug();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCSGram_getSize(lua_State* L) {
  int SWIG_arg = 0;
  TCSGram *arg1 = (TCSGram *) 0 ;
  int result;
  
  SWIG_check_num_args("TCSGram::getSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TCSGram::getSize",1,"TCSGram const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCSGram,0))){
    SWIG_fail_ptr("TCSGram_getSize",1,SWIGTYPE_p_TCSGram);
  }
  
  result = (int)((TCSGram const *)arg1)->getSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCSGram_reserve(lua_State* L) {
  int SWIG_arg = 0;
  TCSGram *arg1 = (TCSGram *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("TCSGram::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TCSGram::reserve",1,"TCSGram *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCSGram::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCSGram,0))){
    SWIG_fail_ptr("TCSGram_reserve",1,SWIGTYPE_p_TCSGram);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCSGram_clear(lua_State* L) {
  int SWIG_arg = 0;
  TCSGram *arg1 = (TCSGram *) 0 ;
  
  SWIG_check_num_args("TCSGram::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TCSGram::clear",1,"TCSGram *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCSGram,0))){
    SWIG_fail_ptr("TCSGram_clear",1,SWIGTYPE_p_TCSGram);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCSGram_setFrameDuration(lua_State* L) {
  int SWIG_arg = 0;
  TCSGram *arg1 = (TCSGram *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("TCSGram::setFrameDuration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TCSGram::setFrameDuration",1,"TCSGram *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCSGram::setFrameDuration",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCSGram,0))){
    SWIG_fail_ptr("TCSGram_setFrameDuration",1,SWIGTYPE_p_TCSGram);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  (arg1)->setFrameDuration(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCSGram_setNumBins(lua_State* L) {
  int SWIG_arg = 0;
  TCSGram *arg1 = (TCSGram *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("TCSGram::setNumBins",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TCSGram::setNumBins",1,"TCSGram *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCSGram::setNumBins",2,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCSGram,0))){
    SWIG_fail_ptr("TCSGram_setNumBins",1,SWIGTYPE_p_TCSGram);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int const)lua_tonumber(L, 2);
  (arg1)->setNumBins(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TCSGram(void *obj) {
TCSGram *arg1 = (TCSGram *) obj;
delete arg1;
}
static int _proxy__wrap_new_TCSGram(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TCSGram);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TCSGram_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TCSGram_methods[]= {
    { "getTCSVector", _wrap_TCSGram_getTCSVector},
    { "addTCSVector", _wrap_TCSGram_addTCSVector},
    { "getTime", _wrap_TCSGram_getTime},
    { "getDuration", _wrap_TCSGram_getDuration},
    { "printDebug", _wrap_TCSGram_printDebug},
    { "getSize", _wrap_TCSGram_getSize},
    { "reserve", _wrap_TCSGram_reserve},
    { "clear", _wrap_TCSGram_clear},
    { "setFrameDuration", _wrap_TCSGram_setFrameDuration},
    { "setNumBins", _wrap_TCSGram_setNumBins},
    {0,0}
};
static swig_lua_method swig_TCSGram_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TCSGram_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TCSGram_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TCSGram_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TCSGram_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TCSGram_Sf_SwigStatic = {
    "TCSGram",
    swig_TCSGram_Sf_SwigStatic_methods,
    swig_TCSGram_Sf_SwigStatic_attributes,
    swig_TCSGram_Sf_SwigStatic_constants,
    swig_TCSGram_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TCSGram_bases[] = {0};
static const char *swig_TCSGram_base_names[] = {0};
static swig_lua_class _wrap_class_TCSGram = { "TCSGram", "TCSGram", &SWIGTYPE_p_TCSGram,_proxy__wrap_new_TCSGram, swig_delete_TCSGram, swig_TCSGram_methods, swig_TCSGram_attributes, &swig_TCSGram_Sf_SwigStatic, swig_TCSGram_meta, swig_TCSGram_bases, swig_TCSGram_base_names };

static int _wrap_new_ChromaVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  ChromaVector *result = 0 ;
  
  SWIG_check_num_args("ChromaVector::ChromaVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ChromaVector::ChromaVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (ChromaVector *)new ChromaVector(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ChromaVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ChromaVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ChromaVector *result = 0 ;
  
  SWIG_check_num_args("ChromaVector::ChromaVector",0,0)
  result = (ChromaVector *)new ChromaVector();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ChromaVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ChromaVector(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ChromaVector__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ChromaVector__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ChromaVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ChromaVector::ChromaVector(size_t)\n"
    "    ChromaVector::ChromaVector()\n");
  lua_error(L);return 0;
}


static int _wrap_ChromaVector_printDebug(lua_State* L) {
  int SWIG_arg = 0;
  ChromaVector *arg1 = (ChromaVector *) 0 ;
  
  SWIG_check_num_args("ChromaVector::printDebug",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ChromaVector::printDebug",1,"ChromaVector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ChromaVector,0))){
    SWIG_fail_ptr("ChromaVector_printDebug",1,SWIGTYPE_p_ChromaVector);
  }
  
  (arg1)->printDebug();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChromaVector_normalizeL1(lua_State* L) {
  int SWIG_arg = 0;
  ChromaVector *arg1 = (ChromaVector *) 0 ;
  
  SWIG_check_num_args("ChromaVector::normalizeL1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ChromaVector::normalizeL1",1,"ChromaVector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ChromaVector,0))){
    SWIG_fail_ptr("ChromaVector_normalizeL1",1,SWIGTYPE_p_ChromaVector);
  }
  
  (arg1)->normalizeL1();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChromaVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  ChromaVector *arg1 = (ChromaVector *) 0 ;
  
  SWIG_check_num_args("ChromaVector::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ChromaVector::clear",1,"ChromaVector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ChromaVector,0))){
    SWIG_fail_ptr("ChromaVector_clear",1,SWIGTYPE_p_ChromaVector);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ChromaVector(void *obj) {
ChromaVector *arg1 = (ChromaVector *) obj;
delete arg1;
}
static int _proxy__wrap_new_ChromaVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ChromaVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ChromaVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ChromaVector_methods[]= {
    { "printDebug", _wrap_ChromaVector_printDebug},
    { "normalizeL1", _wrap_ChromaVector_normalizeL1},
    { "clear", _wrap_ChromaVector_clear},
    {0,0}
};
static swig_lua_method swig_ChromaVector_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ChromaVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ChromaVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ChromaVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ChromaVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ChromaVector_Sf_SwigStatic = {
    "ChromaVector",
    swig_ChromaVector_Sf_SwigStatic_methods,
    swig_ChromaVector_Sf_SwigStatic_attributes,
    swig_ChromaVector_Sf_SwigStatic_constants,
    swig_ChromaVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ChromaVector_bases[] = {0};
static const char *swig_ChromaVector_base_names[] = {0};
static swig_lua_class _wrap_class_ChromaVector = { "ChromaVector", "ChromaVector", &SWIGTYPE_p_ChromaVector,_proxy__wrap_new_ChromaVector, swig_delete_ChromaVector, swig_ChromaVector_methods, swig_ChromaVector_attributes, &swig_ChromaVector_Sf_SwigStatic, swig_ChromaVector_meta, swig_ChromaVector_bases, swig_ChromaVector_base_names };

static int _wrap_new_TCSVector(lua_State* L) {
  int SWIG_arg = 0;
  TCSVector *result = 0 ;
  
  SWIG_check_num_args("TCSVector::TCSVector",0,0)
  result = (TCSVector *)new TCSVector();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCSVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCSVector_printDebug(lua_State* L) {
  int SWIG_arg = 0;
  TCSVector *arg1 = (TCSVector *) 0 ;
  
  SWIG_check_num_args("TCSVector::printDebug",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TCSVector::printDebug",1,"TCSVector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCSVector,0))){
    SWIG_fail_ptr("TCSVector_printDebug",1,SWIGTYPE_p_TCSVector);
  }
  
  (arg1)->printDebug();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCSVector_magnitude(lua_State* L) {
  int SWIG_arg = 0;
  TCSVector *arg1 = (TCSVector *) 0 ;
  double result;
  
  SWIG_check_num_args("TCSVector::magnitude",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TCSVector::magnitude",1,"TCSVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCSVector,0))){
    SWIG_fail_ptr("TCSVector_magnitude",1,SWIGTYPE_p_TCSVector);
  }
  
  result = (double)((TCSVector const *)arg1)->magnitude();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TCSVector(void *obj) {
TCSVector *arg1 = (TCSVector *) obj;
delete arg1;
}
static int _proxy__wrap_new_TCSVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TCSVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TCSVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TCSVector_methods[]= {
    { "printDebug", _wrap_TCSVector_printDebug},
    { "magnitude", _wrap_TCSVector_magnitude},
    {0,0}
};
static swig_lua_method swig_TCSVector_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TCSVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TCSVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TCSVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TCSVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TCSVector_Sf_SwigStatic = {
    "TCSVector",
    swig_TCSVector_Sf_SwigStatic_methods,
    swig_TCSVector_Sf_SwigStatic_attributes,
    swig_TCSVector_Sf_SwigStatic_constants,
    swig_TCSVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TCSVector_bases[] = {0};
static const char *swig_TCSVector_base_names[] = {0};
static swig_lua_class _wrap_class_TCSVector = { "TCSVector", "TCSVector", &SWIGTYPE_p_TCSVector,_proxy__wrap_new_TCSVector, swig_delete_TCSVector, swig_TCSVector_methods, swig_TCSVector_attributes, &swig_TCSVector_Sf_SwigStatic, swig_TCSVector_meta, swig_TCSVector_bases, swig_TCSVector_base_names };

static int _wrap_new_TonalEstimator(lua_State* L) {
  int SWIG_arg = 0;
  TonalEstimator *result = 0 ;
  
  SWIG_check_num_args("TonalEstimator::TonalEstimator",0,0)
  result = (TonalEstimator *)new TonalEstimator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TonalEstimator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TonalEstimator_transform2TCS(lua_State* L) {
  int SWIG_arg = 0;
  TonalEstimator *arg1 = (TonalEstimator *) 0 ;
  ChromaVector *arg2 = 0 ;
  TCSVector result;
  
  SWIG_check_num_args("TonalEstimator::transform2TCS",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TonalEstimator::transform2TCS",1,"TonalEstimator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TonalEstimator::transform2TCS",2,"ChromaVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TonalEstimator,0))){
    SWIG_fail_ptr("TonalEstimator_transform2TCS",1,SWIGTYPE_p_TonalEstimator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ChromaVector,0))){
    SWIG_fail_ptr("TonalEstimator_transform2TCS",2,SWIGTYPE_p_ChromaVector);
  }
  
  result = (arg1)->transform2TCS((ChromaVector const &)*arg2);
  {
    TCSVector * resultptr = new TCSVector((const TCSVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TCSVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TonalEstimator(void *obj) {
TonalEstimator *arg1 = (TonalEstimator *) obj;
delete arg1;
}
static int _proxy__wrap_new_TonalEstimator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TonalEstimator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TonalEstimator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TonalEstimator_methods[]= {
    { "transform2TCS", _wrap_TonalEstimator_transform2TCS},
    {0,0}
};
static swig_lua_method swig_TonalEstimator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TonalEstimator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TonalEstimator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TonalEstimator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TonalEstimator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TonalEstimator_Sf_SwigStatic = {
    "TonalEstimator",
    swig_TonalEstimator_Sf_SwigStatic_methods,
    swig_TonalEstimator_Sf_SwigStatic_attributes,
    swig_TonalEstimator_Sf_SwigStatic_constants,
    swig_TonalEstimator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TonalEstimator_bases[] = {0};
static const char *swig_TonalEstimator_base_names[] = {0};
static swig_lua_class _wrap_class_TonalEstimator = { "TonalEstimator", "TonalEstimator", &SWIGTYPE_p_TonalEstimator,_proxy__wrap_new_TonalEstimator, swig_delete_TonalEstimator, swig_TonalEstimator_methods, swig_TonalEstimator_attributes, &swig_TonalEstimator_Sf_SwigStatic, swig_TonalEstimator_meta, swig_TonalEstimator_bases, swig_TonalEstimator_base_names };

static int _wrap_new_DCT(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  DCT *result = 0 ;
  
  SWIG_check_num_args("DCT::DCT",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DCT::DCT",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (DCT *)new DCT(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DCT,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DCT_forward(lua_State* L) {
  int SWIG_arg = 0;
  DCT *arg1 = (DCT *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  SWIG_check_num_args("DCT::forward",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DCT::forward",1,"DCT *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DCT::forward",2,"double const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("DCT::forward",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DCT,0))){
    SWIG_fail_ptr("DCT_forward",1,SWIGTYPE_p_DCT);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("DCT_forward",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("DCT_forward",3,SWIGTYPE_p_double);
  }
  
  (arg1)->forward((double const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DCT_forwardUnitary(lua_State* L) {
  int SWIG_arg = 0;
  DCT *arg1 = (DCT *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  SWIG_check_num_args("DCT::forwardUnitary",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DCT::forwardUnitary",1,"DCT *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DCT::forwardUnitary",2,"double const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("DCT::forwardUnitary",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DCT,0))){
    SWIG_fail_ptr("DCT_forwardUnitary",1,SWIGTYPE_p_DCT);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("DCT_forwardUnitary",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("DCT_forwardUnitary",3,SWIGTYPE_p_double);
  }
  
  (arg1)->forwardUnitary((double const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DCT_inverse(lua_State* L) {
  int SWIG_arg = 0;
  DCT *arg1 = (DCT *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  SWIG_check_num_args("DCT::inverse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DCT::inverse",1,"DCT *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DCT::inverse",2,"double const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("DCT::inverse",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DCT,0))){
    SWIG_fail_ptr("DCT_inverse",1,SWIGTYPE_p_DCT);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("DCT_inverse",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("DCT_inverse",3,SWIGTYPE_p_double);
  }
  
  (arg1)->inverse((double const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DCT_inverseUnitary(lua_State* L) {
  int SWIG_arg = 0;
  DCT *arg1 = (DCT *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  SWIG_check_num_args("DCT::inverseUnitary",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DCT::inverseUnitary",1,"DCT *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DCT::inverseUnitary",2,"double const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("DCT::inverseUnitary",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DCT,0))){
    SWIG_fail_ptr("DCT_inverseUnitary",1,SWIGTYPE_p_DCT);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("DCT_inverseUnitary",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("DCT_inverseUnitary",3,SWIGTYPE_p_double);
  }
  
  (arg1)->inverseUnitary((double const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DCT(void *obj) {
DCT *arg1 = (DCT *) obj;
delete arg1;
}
static int _proxy__wrap_new_DCT(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DCT);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DCT_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DCT_methods[]= {
    { "forward", _wrap_DCT_forward},
    { "forwardUnitary", _wrap_DCT_forwardUnitary},
    { "inverse", _wrap_DCT_inverse},
    { "inverseUnitary", _wrap_DCT_inverseUnitary},
    {0,0}
};
static swig_lua_method swig_DCT_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DCT_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DCT_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DCT_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DCT_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DCT_Sf_SwigStatic = {
    "DCT",
    swig_DCT_Sf_SwigStatic_methods,
    swig_DCT_Sf_SwigStatic_attributes,
    swig_DCT_Sf_SwigStatic_constants,
    swig_DCT_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DCT_bases[] = {0};
static const char *swig_DCT_base_names[] = {0};
static swig_lua_class _wrap_class_DCT = { "DCT", "DCT", &SWIGTYPE_p_DCT,_proxy__wrap_new_DCT, swig_delete_DCT, swig_DCT_methods, swig_DCT_attributes, &swig_DCT_Sf_SwigStatic, swig_DCT_meta, swig_DCT_bases, swig_DCT_base_names };

static int _wrap_new_FFT(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  FFT *result = 0 ;
  
  SWIG_check_num_args("FFT::FFT",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("FFT::FFT",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (FFT *)new FFT(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FFT,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFT_process(lua_State* L) {
  int SWIG_arg = 0;
  FFT *arg1 = (FFT *) 0 ;
  bool arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  
  SWIG_check_num_args("FFT::process",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFT::process",1,"FFT *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("FFT::process",2,"bool");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("FFT::process",3,"double const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("FFT::process",4,"double const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("FFT::process",5,"double *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("FFT::process",6,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFT,0))){
    SWIG_fail_ptr("FFT_process",1,SWIGTYPE_p_FFT);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FFT_process",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FFT_process",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FFT_process",5,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FFT_process",6,SWIGTYPE_p_double);
  }
  
  (arg1)->process(arg2,(double const *)arg3,(double const *)arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FFT(void *obj) {
FFT *arg1 = (FFT *) obj;
delete arg1;
}
static int _proxy__wrap_new_FFT(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FFT);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FFT_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FFT_methods[]= {
    { "process", _wrap_FFT_process},
    {0,0}
};
static swig_lua_method swig_FFT_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FFT_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FFT_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FFT_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FFT_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FFT_Sf_SwigStatic = {
    "FFT",
    swig_FFT_Sf_SwigStatic_methods,
    swig_FFT_Sf_SwigStatic_attributes,
    swig_FFT_Sf_SwigStatic_constants,
    swig_FFT_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FFT_bases[] = {0};
static const char *swig_FFT_base_names[] = {0};
static swig_lua_class _wrap_class_FFT = { "FFT", "FFT", &SWIGTYPE_p_FFT,_proxy__wrap_new_FFT, swig_delete_FFT, swig_FFT_methods, swig_FFT_attributes, &swig_FFT_Sf_SwigStatic, swig_FFT_meta, swig_FFT_bases, swig_FFT_base_names };

static int _wrap_new_FFTReal(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  FFTReal *result = 0 ;
  
  SWIG_check_num_args("FFTReal::FFTReal",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("FFTReal::FFTReal",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (FFTReal *)new FFTReal(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FFTReal,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTReal_forward(lua_State* L) {
  int SWIG_arg = 0;
  FFTReal *arg1 = (FFTReal *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("FFTReal::forward",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTReal::forward",1,"FFTReal *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FFTReal::forward",2,"double const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("FFTReal::forward",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("FFTReal::forward",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTReal,0))){
    SWIG_fail_ptr("FFTReal_forward",1,SWIGTYPE_p_FFTReal);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FFTReal_forward",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FFTReal_forward",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FFTReal_forward",4,SWIGTYPE_p_double);
  }
  
  (arg1)->forward((double const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTReal_forwardMagnitude(lua_State* L) {
  int SWIG_arg = 0;
  FFTReal *arg1 = (FFTReal *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  SWIG_check_num_args("FFTReal::forwardMagnitude",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTReal::forwardMagnitude",1,"FFTReal *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FFTReal::forwardMagnitude",2,"double const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("FFTReal::forwardMagnitude",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTReal,0))){
    SWIG_fail_ptr("FFTReal_forwardMagnitude",1,SWIGTYPE_p_FFTReal);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FFTReal_forwardMagnitude",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FFTReal_forwardMagnitude",3,SWIGTYPE_p_double);
  }
  
  (arg1)->forwardMagnitude((double const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTReal_inverse(lua_State* L) {
  int SWIG_arg = 0;
  FFTReal *arg1 = (FFTReal *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("FFTReal::inverse",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTReal::inverse",1,"FFTReal *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FFTReal::inverse",2,"double const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("FFTReal::inverse",3,"double const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("FFTReal::inverse",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTReal,0))){
    SWIG_fail_ptr("FFTReal_inverse",1,SWIGTYPE_p_FFTReal);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FFTReal_inverse",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FFTReal_inverse",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FFTReal_inverse",4,SWIGTYPE_p_double);
  }
  
  (arg1)->inverse((double const *)arg2,(double const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FFTReal(void *obj) {
FFTReal *arg1 = (FFTReal *) obj;
delete arg1;
}
static int _proxy__wrap_new_FFTReal(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FFTReal);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FFTReal_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FFTReal_methods[]= {
    { "forward", _wrap_FFTReal_forward},
    { "forwardMagnitude", _wrap_FFTReal_forwardMagnitude},
    { "inverse", _wrap_FFTReal_inverse},
    {0,0}
};
static swig_lua_method swig_FFTReal_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FFTReal_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FFTReal_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FFTReal_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FFTReal_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FFTReal_Sf_SwigStatic = {
    "FFTReal",
    swig_FFTReal_Sf_SwigStatic_methods,
    swig_FFTReal_Sf_SwigStatic_attributes,
    swig_FFTReal_Sf_SwigStatic_constants,
    swig_FFTReal_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FFTReal_bases[] = {0};
static const char *swig_FFTReal_base_names[] = {0};
static swig_lua_class _wrap_class_FFTReal = { "FFTReal", "FFTReal", &SWIGTYPE_p_FFTReal,_proxy__wrap_new_FFTReal, swig_delete_FFTReal, swig_FFTReal_methods, swig_FFTReal_attributes, &swig_FFTReal_Sf_SwigStatic, swig_FFTReal_meta, swig_FFTReal_bases, swig_FFTReal_base_names };

static int _wrap_Wavelet_getWaveletName(lua_State* L) {
  int SWIG_arg = 0;
  Wavelet::Type arg1 ;
  std::string result;
  
  SWIG_check_num_args("Wavelet::getWaveletName",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Wavelet::getWaveletName",1,"Wavelet::Type");
  arg1 = (Wavelet::Type)(int)lua_tonumber(L, 1);
  result = Wavelet::getWaveletName(arg1);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Wavelet_createDecompositionFilters(lua_State* L) {
  int SWIG_arg = 0;
  Wavelet::Type arg1 ;
  std::vector< double > *arg2 = 0 ;
  std::vector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("Wavelet::createDecompositionFilters",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Wavelet::createDecompositionFilters",1,"Wavelet::Type");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Wavelet::createDecompositionFilters",2,"std::vector< double > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Wavelet::createDecompositionFilters",3,"std::vector< double > &");
  arg1 = (Wavelet::Type)(int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("Wavelet_createDecompositionFilters",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("Wavelet_createDecompositionFilters",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  Wavelet::createDecompositionFilters(arg1,*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Wavelet(lua_State* L) {
  int SWIG_arg = 0;
  Wavelet *result = 0 ;
  
  SWIG_check_num_args("Wavelet::Wavelet",0,0)
  result = (Wavelet *)new Wavelet();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Wavelet,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Wavelet(void *obj) {
Wavelet *arg1 = (Wavelet *) obj;
delete arg1;
}
static int _proxy__wrap_new_Wavelet(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Wavelet);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Wavelet_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Wavelet_methods[]= {
    {0,0}
};
static swig_lua_method swig_Wavelet_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Wavelet_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Wavelet_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("Haar", Wavelet::Haar)},
    {SWIG_LUA_CONSTTAB_INT("Daubechies_2", Wavelet::Daubechies_2)},
    {SWIG_LUA_CONSTTAB_INT("Daubechies_3", Wavelet::Daubechies_3)},
    {SWIG_LUA_CONSTTAB_INT("Daubechies_4", Wavelet::Daubechies_4)},
    {SWIG_LUA_CONSTTAB_INT("Daubechies_5", Wavelet::Daubechies_5)},
    {SWIG_LUA_CONSTTAB_INT("Daubechies_6", Wavelet::Daubechies_6)},
    {SWIG_LUA_CONSTTAB_INT("Daubechies_7", Wavelet::Daubechies_7)},
    {SWIG_LUA_CONSTTAB_INT("Daubechies_8", Wavelet::Daubechies_8)},
    {SWIG_LUA_CONSTTAB_INT("Daubechies_9", Wavelet::Daubechies_9)},
    {SWIG_LUA_CONSTTAB_INT("Daubechies_10", Wavelet::Daubechies_10)},
    {SWIG_LUA_CONSTTAB_INT("Daubechies_20", Wavelet::Daubechies_20)},
    {SWIG_LUA_CONSTTAB_INT("Daubechies_40", Wavelet::Daubechies_40)},
    {SWIG_LUA_CONSTTAB_INT("Symlet_2", Wavelet::Symlet_2)},
    {SWIG_LUA_CONSTTAB_INT("Symlet_3", Wavelet::Symlet_3)},
    {SWIG_LUA_CONSTTAB_INT("Symlet_4", Wavelet::Symlet_4)},
    {SWIG_LUA_CONSTTAB_INT("Symlet_5", Wavelet::Symlet_5)},
    {SWIG_LUA_CONSTTAB_INT("Symlet_6", Wavelet::Symlet_6)},
    {SWIG_LUA_CONSTTAB_INT("Symlet_7", Wavelet::Symlet_7)},
    {SWIG_LUA_CONSTTAB_INT("Symlet_8", Wavelet::Symlet_8)},
    {SWIG_LUA_CONSTTAB_INT("Symlet_9", Wavelet::Symlet_9)},
    {SWIG_LUA_CONSTTAB_INT("Symlet_10", Wavelet::Symlet_10)},
    {SWIG_LUA_CONSTTAB_INT("Symlet_20", Wavelet::Symlet_20)},
    {SWIG_LUA_CONSTTAB_INT("Symlet_30", Wavelet::Symlet_30)},
    {SWIG_LUA_CONSTTAB_INT("Coiflet_1", Wavelet::Coiflet_1)},
    {SWIG_LUA_CONSTTAB_INT("Coiflet_2", Wavelet::Coiflet_2)},
    {SWIG_LUA_CONSTTAB_INT("Coiflet_3", Wavelet::Coiflet_3)},
    {SWIG_LUA_CONSTTAB_INT("Coiflet_4", Wavelet::Coiflet_4)},
    {SWIG_LUA_CONSTTAB_INT("Coiflet_5", Wavelet::Coiflet_5)},
    {SWIG_LUA_CONSTTAB_INT("Biorthogonal_1_3", Wavelet::Biorthogonal_1_3)},
    {SWIG_LUA_CONSTTAB_INT("Biorthogonal_1_5", Wavelet::Biorthogonal_1_5)},
    {SWIG_LUA_CONSTTAB_INT("Biorthogonal_2_2", Wavelet::Biorthogonal_2_2)},
    {SWIG_LUA_CONSTTAB_INT("Biorthogonal_2_4", Wavelet::Biorthogonal_2_4)},
    {SWIG_LUA_CONSTTAB_INT("Biorthogonal_2_6", Wavelet::Biorthogonal_2_6)},
    {SWIG_LUA_CONSTTAB_INT("Biorthogonal_2_8", Wavelet::Biorthogonal_2_8)},
    {SWIG_LUA_CONSTTAB_INT("Biorthogonal_3_1", Wavelet::Biorthogonal_3_1)},
    {SWIG_LUA_CONSTTAB_INT("Biorthogonal_3_3", Wavelet::Biorthogonal_3_3)},
    {SWIG_LUA_CONSTTAB_INT("Biorthogonal_3_5", Wavelet::Biorthogonal_3_5)},
    {SWIG_LUA_CONSTTAB_INT("Biorthogonal_3_7", Wavelet::Biorthogonal_3_7)},
    {SWIG_LUA_CONSTTAB_INT("Biorthogonal_3_9", Wavelet::Biorthogonal_3_9)},
    {SWIG_LUA_CONSTTAB_INT("Biorthogonal_4_4", Wavelet::Biorthogonal_4_4)},
    {SWIG_LUA_CONSTTAB_INT("Biorthogonal_5_5", Wavelet::Biorthogonal_5_5)},
    {SWIG_LUA_CONSTTAB_INT("Biorthogonal_6_8", Wavelet::Biorthogonal_6_8)},
    {SWIG_LUA_CONSTTAB_INT("Meyer", Wavelet::Meyer)},
    {SWIG_LUA_CONSTTAB_INT("LastType", Wavelet::LastType)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Wavelet_Sf_SwigStatic_methods[]= {
    { "getWaveletName", _wrap_Wavelet_getWaveletName},
    { "createDecompositionFilters", _wrap_Wavelet_createDecompositionFilters},
    {0,0}
};
static swig_lua_class* swig_Wavelet_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Wavelet_Sf_SwigStatic = {
    "Wavelet",
    swig_Wavelet_Sf_SwigStatic_methods,
    swig_Wavelet_Sf_SwigStatic_attributes,
    swig_Wavelet_Sf_SwigStatic_constants,
    swig_Wavelet_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Wavelet_bases[] = {0};
static const char *swig_Wavelet_base_names[] = {0};
static swig_lua_class _wrap_class_Wavelet = { "Wavelet", "Wavelet", &SWIGTYPE_p_Wavelet,_proxy__wrap_new_Wavelet, swig_delete_Wavelet, swig_Wavelet_methods, swig_Wavelet_attributes, &swig_Wavelet_Sf_SwigStatic, swig_Wavelet_meta, swig_Wavelet_bases, swig_Wavelet_base_names };

static int _wrap_model_t_N_set(lua_State* L) {
  int SWIG_arg = 0;
  _model_t *arg1 = (_model_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("_model_t::N",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("_model_t::N",1,"_model_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("_model_t::N",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p__model_t,0))){
    SWIG_fail_ptr("model_t_N_set",1,SWIGTYPE_p__model_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->N = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_model_t_N_get(lua_State* L) {
  int SWIG_arg = 0;
  _model_t *arg1 = (_model_t *) 0 ;
  int result;
  
  SWIG_check_num_args("_model_t::N",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("_model_t::N",1,"_model_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p__model_t,0))){
    SWIG_fail_ptr("model_t_N_get",1,SWIGTYPE_p__model_t);
  }
  
  result = (int) ((arg1)->N);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_model_t_p0_set(lua_State* L) {
  int SWIG_arg = 0;
  _model_t *arg1 = (_model_t *) 0 ;
  double *arg2 = (double *) 0 ;
  
  SWIG_check_num_args("_model_t::p0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("_model_t::p0",1,"_model_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("_model_t::p0",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p__model_t,0))){
    SWIG_fail_ptr("model_t_p0_set",1,SWIGTYPE_p__model_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("model_t_p0_set",2,SWIGTYPE_p_double);
  }
  
  if (arg1) (arg1)->p0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_model_t_p0_get(lua_State* L) {
  int SWIG_arg = 0;
  _model_t *arg1 = (_model_t *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("_model_t::p0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("_model_t::p0",1,"_model_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p__model_t,0))){
    SWIG_fail_ptr("model_t_p0_get",1,SWIGTYPE_p__model_t);
  }
  
  result = (double *) ((arg1)->p0);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_model_t_a_set(lua_State* L) {
  int SWIG_arg = 0;
  _model_t *arg1 = (_model_t *) 0 ;
  double **arg2 = (double **) 0 ;
  
  SWIG_check_num_args("_model_t::a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("_model_t::a",1,"_model_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("_model_t::a",2,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p__model_t,0))){
    SWIG_fail_ptr("model_t_a_set",1,SWIGTYPE_p__model_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("model_t_a_set",2,SWIGTYPE_p_p_double);
  }
  
  if (arg1) (arg1)->a = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_model_t_a_get(lua_State* L) {
  int SWIG_arg = 0;
  _model_t *arg1 = (_model_t *) 0 ;
  double **result = 0 ;
  
  SWIG_check_num_args("_model_t::a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("_model_t::a",1,"_model_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p__model_t,0))){
    SWIG_fail_ptr("model_t_a_get",1,SWIGTYPE_p__model_t);
  }
  
  result = (double **) ((arg1)->a);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_model_t_L_set(lua_State* L) {
  int SWIG_arg = 0;
  _model_t *arg1 = (_model_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("_model_t::L",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("_model_t::L",1,"_model_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("_model_t::L",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p__model_t,0))){
    SWIG_fail_ptr("model_t_L_set",1,SWIGTYPE_p__model_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->L = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_model_t_L_get(lua_State* L) {
  int SWIG_arg = 0;
  _model_t *arg1 = (_model_t *) 0 ;
  int result;
  
  SWIG_check_num_args("_model_t::L",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("_model_t::L",1,"_model_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p__model_t,0))){
    SWIG_fail_ptr("model_t_L_get",1,SWIGTYPE_p__model_t);
  }
  
  result = (int) ((arg1)->L);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_model_t_mu_set(lua_State* L) {
  int SWIG_arg = 0;
  _model_t *arg1 = (_model_t *) 0 ;
  double **arg2 = (double **) 0 ;
  
  SWIG_check_num_args("_model_t::mu",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("_model_t::mu",1,"_model_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("_model_t::mu",2,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p__model_t,0))){
    SWIG_fail_ptr("model_t_mu_set",1,SWIGTYPE_p__model_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("model_t_mu_set",2,SWIGTYPE_p_p_double);
  }
  
  if (arg1) (arg1)->mu = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_model_t_mu_get(lua_State* L) {
  int SWIG_arg = 0;
  _model_t *arg1 = (_model_t *) 0 ;
  double **result = 0 ;
  
  SWIG_check_num_args("_model_t::mu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("_model_t::mu",1,"_model_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p__model_t,0))){
    SWIG_fail_ptr("model_t_mu_get",1,SWIGTYPE_p__model_t);
  }
  
  result = (double **) ((arg1)->mu);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_model_t_cov_set(lua_State* L) {
  int SWIG_arg = 0;
  _model_t *arg1 = (_model_t *) 0 ;
  double **arg2 = (double **) 0 ;
  
  SWIG_check_num_args("_model_t::cov",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("_model_t::cov",1,"_model_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("_model_t::cov",2,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p__model_t,0))){
    SWIG_fail_ptr("model_t_cov_set",1,SWIGTYPE_p__model_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("model_t_cov_set",2,SWIGTYPE_p_p_double);
  }
  
  if (arg1) (arg1)->cov = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_model_t_cov_get(lua_State* L) {
  int SWIG_arg = 0;
  _model_t *arg1 = (_model_t *) 0 ;
  double **result = 0 ;
  
  SWIG_check_num_args("_model_t::cov",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("_model_t::cov",1,"_model_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p__model_t,0))){
    SWIG_fail_ptr("model_t_cov_get",1,SWIGTYPE_p__model_t);
  }
  
  result = (double **) ((arg1)->cov);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_model_t(lua_State* L) {
  int SWIG_arg = 0;
  _model_t *result = 0 ;
  
  SWIG_check_num_args("_model_t::_model_t",0,0)
  result = (_model_t *)new _model_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p__model_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_model_t(void *obj) {
_model_t *arg1 = (_model_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_model_t(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_model_t);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_model_t_attributes[] = {
    { "N", _wrap_model_t_N_get, _wrap_model_t_N_set },
    { "p0", _wrap_model_t_p0_get, _wrap_model_t_p0_set },
    { "a", _wrap_model_t_a_get, _wrap_model_t_a_set },
    { "L", _wrap_model_t_L_get, _wrap_model_t_L_set },
    { "mu", _wrap_model_t_mu_get, _wrap_model_t_mu_set },
    { "cov", _wrap_model_t_cov_get, _wrap_model_t_cov_set },
    {0,0,0}
};
static swig_lua_method swig_model_t_methods[]= {
    {0,0}
};
static swig_lua_method swig_model_t_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_model_t_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_model_t_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_model_t_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_model_t_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_model_t_Sf_SwigStatic = {
    "model_t",
    swig_model_t_Sf_SwigStatic_methods,
    swig_model_t_Sf_SwigStatic_attributes,
    swig_model_t_Sf_SwigStatic_constants,
    swig_model_t_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_model_t_bases[] = {0};
static const char *swig_model_t_base_names[] = {0};
static swig_lua_class _wrap_class_model_t = { "model_t", "model_t", &SWIGTYPE_p__model_t,_proxy__wrap_new_model_t, swig_delete_model_t, swig_model_t_methods, swig_model_t_attributes, &swig_model_t_Sf_SwigStatic, swig_model_t_meta, swig_model_t_bases, swig_model_t_base_names };

static int _wrap_hmm_train(lua_State* L) {
  int SWIG_arg = 0;
  double **arg1 = (double **) 0 ;
  int arg2 ;
  model_t *arg3 = (model_t *) 0 ;
  
  SWIG_check_num_args("hmm_train",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("hmm_train",1,"double **");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("hmm_train",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("hmm_train",3,"model_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("hmm_train",1,SWIGTYPE_p_p_double);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p__model_t,0))){
    SWIG_fail_ptr("hmm_train",3,SWIGTYPE_p__model_t);
  }
  
  hmm_train(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_forward_backwards(lua_State* L) {
  int SWIG_arg = 0;
  double ***arg1 = (double ***) 0 ;
  double **arg2 = (double **) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  double *arg9 = (double *) 0 ;
  double **arg10 = (double **) 0 ;
  double **arg11 = (double **) 0 ;
  
  SWIG_check_num_args("forward_backwards",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("forward_backwards",1,"double ***");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("forward_backwards",2,"double **");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("forward_backwards",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("forward_backwards",4,"double *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("forward_backwards",5,"double *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("forward_backwards",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("forward_backwards",7,"int");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("forward_backwards",8,"int");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("forward_backwards",9,"double *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("forward_backwards",10,"double **");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("forward_backwards",11,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_p_double,0))){
    SWIG_fail_ptr("forward_backwards",1,SWIGTYPE_p_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("forward_backwards",2,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("forward_backwards",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("forward_backwards",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("forward_backwards",5,SWIGTYPE_p_double);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("forward_backwards",9,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("forward_backwards",10,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("forward_backwards",11,SWIGTYPE_p_p_double);
  }
  
  forward_backwards(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_baum_welch(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  double **arg2 = (double **) 0 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  double **arg8 = (double **) 0 ;
  double ***arg9 = (double ***) 0 ;
  double **arg10 = (double **) 0 ;
  
  SWIG_check_num_args("baum_welch",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("baum_welch",1,"double *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("baum_welch",2,"double **");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("baum_welch",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("baum_welch",4,"double **");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("baum_welch",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("baum_welch",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("baum_welch",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("baum_welch",8,"double **");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("baum_welch",9,"double ***");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("baum_welch",10,"double **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("baum_welch",1,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("baum_welch",2,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("baum_welch",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("baum_welch",4,SWIGTYPE_p_p_double);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("baum_welch",8,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_p_p_double,0))){
    SWIG_fail_ptr("baum_welch",9,SWIGTYPE_p_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("baum_welch",10,SWIGTYPE_p_p_double);
  }
  
  baum_welch(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_viterbi_decode(lua_State* L) {
  int SWIG_arg = 0;
  double **arg1 = (double **) 0 ;
  int arg2 ;
  model_t *arg3 = (model_t *) 0 ;
  int *arg4 = (int *) 0 ;
  
  SWIG_check_num_args("viterbi_decode",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("viterbi_decode",1,"double **");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("viterbi_decode",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("viterbi_decode",3,"model_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("viterbi_decode",4,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("viterbi_decode",1,SWIGTYPE_p_p_double);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p__model_t,0))){
    SWIG_fail_ptr("viterbi_decode",3,SWIGTYPE_p__model_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("viterbi_decode",4,SWIGTYPE_p_int);
  }
  
  viterbi_decode(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hmm_init(lua_State* L) {
  int SWIG_arg = 0;
  double **arg1 = (double **) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  model_t *result = 0 ;
  
  SWIG_check_num_args("hmm_init",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("hmm_init",1,"double **");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("hmm_init",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("hmm_init",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("hmm_init",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("hmm_init",1,SWIGTYPE_p_p_double);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (model_t *)hmm_init(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p__model_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hmm_close(lua_State* L) {
  int SWIG_arg = 0;
  model_t *arg1 = (model_t *) 0 ;
  
  SWIG_check_num_args("hmm_close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("hmm_close",1,"model_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p__model_t,0))){
    SWIG_fail_ptr("hmm_close",1,SWIGTYPE_p__model_t);
  }
  
  hmm_close(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_invert(lua_State* L) {
  int SWIG_arg = 0;
  double **arg1 = (double **) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("invert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("invert",1,"double **");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("invert",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("invert",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("invert",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("invert",1,SWIGTYPE_p_p_double);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("invert",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("invert",4,SWIGTYPE_p_double);
  }
  
  invert(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gauss(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double **arg4 = (double **) 0 ;
  double arg5 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  double result;
  
  SWIG_check_num_args("gauss",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gauss",1,"double *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gauss",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("gauss",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("gauss",4,"double **");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("gauss",5,"double");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("gauss",6,"double *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("gauss",7,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("gauss",1,SWIGTYPE_p_double);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("gauss",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("gauss",4,SWIGTYPE_p_p_double);
  }
  
  arg5 = (double)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("gauss",6,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("gauss",7,SWIGTYPE_p_double);
  }
  
  result = (double)gauss(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_loggauss(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double **arg4 = (double **) 0 ;
  double arg5 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  double result;
  
  SWIG_check_num_args("loggauss",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("loggauss",1,"double *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("loggauss",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("loggauss",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("loggauss",4,"double **");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("loggauss",5,"double");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("loggauss",6,"double *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("loggauss",7,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("loggauss",1,SWIGTYPE_p_double);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("loggauss",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("loggauss",4,SWIGTYPE_p_p_double);
  }
  
  arg5 = (double)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("loggauss",6,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("loggauss",7,SWIGTYPE_p_double);
  }
  
  result = (double)loggauss(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hmm_print(lua_State* L) {
  int SWIG_arg = 0;
  model_t *arg1 = (model_t *) 0 ;
  
  SWIG_check_num_args("hmm_print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("hmm_print",1,"model_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p__model_t,0))){
    SWIG_fail_ptr("hmm_print",1,SWIGTYPE_p__model_t);
  }
  
  hmm_print(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Correlation(lua_State* L) {
  int SWIG_arg = 0;
  Correlation *result = 0 ;
  
  SWIG_check_num_args("Correlation::Correlation",0,0)
  result = (Correlation *)new Correlation();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Correlation,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Correlation_doAutoUnBiased(lua_State* L) {
  int SWIG_arg = 0;
  Correlation *arg1 = (Correlation *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("Correlation::doAutoUnBiased",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Correlation::doAutoUnBiased",1,"Correlation *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Correlation::doAutoUnBiased",2,"double *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Correlation::doAutoUnBiased",3,"double *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Correlation::doAutoUnBiased",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Correlation,0))){
    SWIG_fail_ptr("Correlation_doAutoUnBiased",1,SWIGTYPE_p_Correlation);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Correlation_doAutoUnBiased",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Correlation_doAutoUnBiased",3,SWIGTYPE_p_double);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->doAutoUnBiased(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Correlation(void *obj) {
Correlation *arg1 = (Correlation *) obj;
delete arg1;
}
static int _proxy__wrap_new_Correlation(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Correlation);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Correlation_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Correlation_methods[]= {
    { "doAutoUnBiased", _wrap_Correlation_doAutoUnBiased},
    {0,0}
};
static swig_lua_method swig_Correlation_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Correlation_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Correlation_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Correlation_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Correlation_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Correlation_Sf_SwigStatic = {
    "Correlation",
    swig_Correlation_Sf_SwigStatic_methods,
    swig_Correlation_Sf_SwigStatic_attributes,
    swig_Correlation_Sf_SwigStatic_constants,
    swig_Correlation_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Correlation_bases[] = {0};
static const char *swig_Correlation_base_names[] = {0};
static swig_lua_class _wrap_class_Correlation = { "Correlation", "Correlation", &SWIGTYPE_p_Correlation,_proxy__wrap_new_Correlation, swig_delete_Correlation, swig_Correlation_methods, swig_Correlation_attributes, &swig_Correlation_Sf_SwigStatic, swig_Correlation_meta, swig_Correlation_bases, swig_Correlation_base_names };

static int _wrap_new_CosineDistance(lua_State* L) {
  int SWIG_arg = 0;
  CosineDistance *result = 0 ;
  
  SWIG_check_num_args("CosineDistance::CosineDistance",0,0)
  result = (CosineDistance *)new CosineDistance();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CosineDistance,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CosineDistance_distance(lua_State* L) {
  int SWIG_arg = 0;
  CosineDistance *arg1 = (CosineDistance *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::vector< double > *arg3 = 0 ;
  double result;
  
  SWIG_check_num_args("CosineDistance::distance",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CosineDistance::distance",1,"CosineDistance *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("CosineDistance::distance",2,"std::vector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("CosineDistance::distance",3,"std::vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CosineDistance,0))){
    SWIG_fail_ptr("CosineDistance_distance",1,SWIGTYPE_p_CosineDistance);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("CosineDistance_distance",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("CosineDistance_distance",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double)(arg1)->distance((std::vector< double > const &)*arg2,(std::vector< double > const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CosineDistance(void *obj) {
CosineDistance *arg1 = (CosineDistance *) obj;
delete arg1;
}
static int _proxy__wrap_new_CosineDistance(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CosineDistance);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CosineDistance_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CosineDistance_methods[]= {
    { "distance", _wrap_CosineDistance_distance},
    {0,0}
};
static swig_lua_method swig_CosineDistance_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CosineDistance_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CosineDistance_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CosineDistance_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CosineDistance_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CosineDistance_Sf_SwigStatic = {
    "CosineDistance",
    swig_CosineDistance_Sf_SwigStatic_methods,
    swig_CosineDistance_Sf_SwigStatic_attributes,
    swig_CosineDistance_Sf_SwigStatic_constants,
    swig_CosineDistance_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CosineDistance_bases[] = {0};
static const char *swig_CosineDistance_base_names[] = {0};
static swig_lua_class _wrap_class_CosineDistance = { "CosineDistance", "CosineDistance", &SWIGTYPE_p_CosineDistance,_proxy__wrap_new_CosineDistance, swig_delete_CosineDistance, swig_CosineDistance_methods, swig_CosineDistance_attributes, &swig_CosineDistance_Sf_SwigStatic, swig_CosineDistance_meta, swig_CosineDistance_bases, swig_CosineDistance_base_names };

static int _wrap_new_KLDivergence(lua_State* L) {
  int SWIG_arg = 0;
  KLDivergence *result = 0 ;
  
  SWIG_check_num_args("KLDivergence::KLDivergence",0,0)
  result = (KLDivergence *)new KLDivergence();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KLDivergence,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KLDivergence_distanceGaussian(lua_State* L) {
  int SWIG_arg = 0;
  KLDivergence *arg1 = (KLDivergence *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::vector< double > *arg3 = 0 ;
  std::vector< double > *arg4 = 0 ;
  std::vector< double > *arg5 = 0 ;
  double result;
  
  SWIG_check_num_args("KLDivergence::distanceGaussian",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KLDivergence::distanceGaussian",1,"KLDivergence *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KLDivergence::distanceGaussian",2,"std::vector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KLDivergence::distanceGaussian",3,"std::vector< double > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("KLDivergence::distanceGaussian",4,"std::vector< double > const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("KLDivergence::distanceGaussian",5,"std::vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KLDivergence,0))){
    SWIG_fail_ptr("KLDivergence_distanceGaussian",1,SWIGTYPE_p_KLDivergence);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("KLDivergence_distanceGaussian",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("KLDivergence_distanceGaussian",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("KLDivergence_distanceGaussian",4,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("KLDivergence_distanceGaussian",5,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double)(arg1)->distanceGaussian((std::vector< double > const &)*arg2,(std::vector< double > const &)*arg3,(std::vector< double > const &)*arg4,(std::vector< double > const &)*arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KLDivergence_distanceDistribution(lua_State* L) {
  int SWIG_arg = 0;
  KLDivergence *arg1 = (KLDivergence *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::vector< double > *arg3 = 0 ;
  bool arg4 ;
  double result;
  
  SWIG_check_num_args("KLDivergence::distanceDistribution",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KLDivergence::distanceDistribution",1,"KLDivergence *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KLDivergence::distanceDistribution",2,"std::vector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KLDivergence::distanceDistribution",3,"std::vector< double > const &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("KLDivergence::distanceDistribution",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KLDivergence,0))){
    SWIG_fail_ptr("KLDivergence_distanceDistribution",1,SWIGTYPE_p_KLDivergence);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("KLDivergence_distanceDistribution",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("KLDivergence_distanceDistribution",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (double)(arg1)->distanceDistribution((std::vector< double > const &)*arg2,(std::vector< double > const &)*arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_KLDivergence(void *obj) {
KLDivergence *arg1 = (KLDivergence *) obj;
delete arg1;
}
static int _proxy__wrap_new_KLDivergence(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_KLDivergence);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_KLDivergence_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_KLDivergence_methods[]= {
    { "distanceGaussian", _wrap_KLDivergence_distanceGaussian},
    { "distanceDistribution", _wrap_KLDivergence_distanceDistribution},
    {0,0}
};
static swig_lua_method swig_KLDivergence_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_KLDivergence_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_KLDivergence_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_KLDivergence_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_KLDivergence_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_KLDivergence_Sf_SwigStatic = {
    "KLDivergence",
    swig_KLDivergence_Sf_SwigStatic_methods,
    swig_KLDivergence_Sf_SwigStatic_attributes,
    swig_KLDivergence_Sf_SwigStatic_constants,
    swig_KLDivergence_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_KLDivergence_bases[] = {0};
static const char *swig_KLDivergence_base_names[] = {0};
static swig_lua_class _wrap_class_KLDivergence = { "KLDivergence", "KLDivergence", &SWIGTYPE_p_KLDivergence,_proxy__wrap_new_KLDivergence, swig_delete_KLDivergence, swig_KLDivergence_methods, swig_KLDivergence_attributes, &swig_KLDivergence_Sf_SwigStatic, swig_KLDivergence_meta, swig_KLDivergence_bases, swig_KLDivergence_base_names };

static int _wrap_MathUtilities_round(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("MathUtilities::round",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("MathUtilities::round",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)MathUtilities::round(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathUtilities_getFrameMinMax(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("MathUtilities::getFrameMinMax",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MathUtilities::getFrameMinMax",1,"double const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MathUtilities::getFrameMinMax",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MathUtilities::getFrameMinMax",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MathUtilities::getFrameMinMax",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MathUtilities_getFrameMinMax",1,SWIGTYPE_p_double);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MathUtilities_getFrameMinMax",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MathUtilities_getFrameMinMax",4,SWIGTYPE_p_double);
  }
  
  MathUtilities::getFrameMinMax((double const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathUtilities_mean__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("MathUtilities::mean",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MathUtilities::mean",1,"double const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MathUtilities::mean",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MathUtilities_mean",1,SWIGTYPE_p_double);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)MathUtilities::mean((double const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathUtilities_mean__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  double result;
  
  SWIG_check_num_args("MathUtilities::mean",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("MathUtilities::mean",1,"std::vector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MathUtilities::mean",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MathUtilities::mean",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("MathUtilities_mean",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (double)MathUtilities::mean((std::vector< double > const &)*arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathUtilities_mean(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_double, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MathUtilities_mean__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_MathUtilities_mean__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MathUtilities_mean'\n"
    "  Possible C/C++ prototypes are:\n"
    "    MathUtilities::mean(double const *,int)\n"
    "    MathUtilities::mean(std::vector< double > const &,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_MathUtilities_sum(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("MathUtilities::sum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MathUtilities::sum",1,"double const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MathUtilities::sum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MathUtilities_sum",1,SWIGTYPE_p_double);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)MathUtilities::sum((double const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathUtilities_median(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("MathUtilities::median",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MathUtilities::median",1,"double const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MathUtilities::median",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MathUtilities_median",1,SWIGTYPE_p_double);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)MathUtilities::median((double const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathUtilities_princarg(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("MathUtilities::princarg",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("MathUtilities::princarg",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)MathUtilities::princarg(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathUtilities_mod(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("MathUtilities::mod",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("MathUtilities::mod",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MathUtilities::mod",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)MathUtilities::mod(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathUtilities_getAlphaNorm__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("MathUtilities::getAlphaNorm",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MathUtilities::getAlphaNorm",1,"double const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MathUtilities::getAlphaNorm",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MathUtilities::getAlphaNorm",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MathUtilities::getAlphaNorm",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MathUtilities_getAlphaNorm",1,SWIGTYPE_p_double);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MathUtilities_getAlphaNorm",4,SWIGTYPE_p_double);
  }
  
  MathUtilities::getAlphaNorm((double const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathUtilities_getAlphaNorm__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("MathUtilities::getAlphaNorm",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("MathUtilities::getAlphaNorm",1,"std::vector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MathUtilities::getAlphaNorm",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("MathUtilities_getAlphaNorm",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)MathUtilities::getAlphaNorm((std::vector< double > const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathUtilities_getAlphaNorm(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MathUtilities_getAlphaNorm__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_double, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_MathUtilities_getAlphaNorm__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MathUtilities_getAlphaNorm'\n"
    "  Possible C/C++ prototypes are:\n"
    "    MathUtilities::getAlphaNorm(double const *,int,int,double *)\n"
    "    MathUtilities::getAlphaNorm(std::vector< double > const &,int)\n");
  lua_error(L);return 0;
}


static int _wrap_MathUtilities_normalise__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  MathUtilities::NormaliseType arg3 ;
  
  SWIG_check_num_args("MathUtilities::normalise",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MathUtilities::normalise",1,"double *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MathUtilities::normalise",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MathUtilities::normalise",3,"MathUtilities::NormaliseType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MathUtilities_normalise",1,SWIGTYPE_p_double);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (MathUtilities::NormaliseType)(int)lua_tonumber(L, 3);
  MathUtilities::normalise(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathUtilities_normalise__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("MathUtilities::normalise",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MathUtilities::normalise",1,"double *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MathUtilities::normalise",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MathUtilities_normalise",1,SWIGTYPE_p_double);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  MathUtilities::normalise(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathUtilities_normalise__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = 0 ;
  MathUtilities::NormaliseType arg2 ;
  
  SWIG_check_num_args("MathUtilities::normalise",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("MathUtilities::normalise",1,"std::vector< double > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MathUtilities::normalise",2,"MathUtilities::NormaliseType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("MathUtilities_normalise",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  arg2 = (MathUtilities::NormaliseType)(int)lua_tonumber(L, 2);
  MathUtilities::normalise(*arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathUtilities_normalise__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = 0 ;
  
  SWIG_check_num_args("MathUtilities::normalise",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("MathUtilities::normalise",1,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("MathUtilities_normalise",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  MathUtilities::normalise(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathUtilities_normalise(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_MathUtilities_normalise__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MathUtilities_normalise__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_double, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MathUtilities_normalise__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_double, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_MathUtilities_normalise__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MathUtilities_normalise'\n"
    "  Possible C/C++ prototypes are:\n"
    "    MathUtilities::normalise(double *,int,MathUtilities::NormaliseType)\n"
    "    MathUtilities::normalise(double *,int)\n"
    "    MathUtilities::normalise(std::vector< double > &,MathUtilities::NormaliseType)\n"
    "    MathUtilities::normalise(std::vector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_MathUtilities_getLpNorm(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("MathUtilities::getLpNorm",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("MathUtilities::getLpNorm",1,"std::vector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MathUtilities::getLpNorm",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("MathUtilities_getLpNorm",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)MathUtilities::getLpNorm((std::vector< double > const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathUtilities_normaliseLp__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = 0 ;
  int arg2 ;
  double arg3 ;
  SwigValueWrapper< std::vector< double > > result;
  
  SWIG_check_num_args("MathUtilities::normaliseLp",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("MathUtilities::normaliseLp",1,"std::vector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MathUtilities::normaliseLp",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MathUtilities::normaliseLp",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("MathUtilities_normaliseLp",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = MathUtilities::normaliseLp((std::vector< double > const &)*arg1,arg2,arg3);
  {
    std::vector< double > * resultptr = new std::vector< double >((const std::vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathUtilities_normaliseLp__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = 0 ;
  int arg2 ;
  SwigValueWrapper< std::vector< double > > result;
  
  SWIG_check_num_args("MathUtilities::normaliseLp",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("MathUtilities::normaliseLp",1,"std::vector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MathUtilities::normaliseLp",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("MathUtilities_normaliseLp",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = MathUtilities::normaliseLp((std::vector< double > const &)*arg1,arg2);
  {
    std::vector< double > * resultptr = new std::vector< double >((const std::vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathUtilities_normaliseLp(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MathUtilities_normaliseLp__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_MathUtilities_normaliseLp__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MathUtilities_normaliseLp'\n"
    "  Possible C/C++ prototypes are:\n"
    "    MathUtilities::normaliseLp(std::vector< double > const &,int,double)\n"
    "    MathUtilities::normaliseLp(std::vector< double > const &,int)\n");
  lua_error(L);return 0;
}


static int _wrap_MathUtilities_adaptiveThreshold(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = 0 ;
  
  SWIG_check_num_args("MathUtilities::adaptiveThreshold",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("MathUtilities::adaptiveThreshold",1,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("MathUtilities_adaptiveThreshold",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  MathUtilities::adaptiveThreshold(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathUtilities_circShift(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("MathUtilities::circShift",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MathUtilities::circShift",1,"double *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MathUtilities::circShift",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MathUtilities::circShift",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MathUtilities_circShift",1,SWIGTYPE_p_double);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  MathUtilities::circShift(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathUtilities_getMax__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int result;
  
  SWIG_check_num_args("MathUtilities::getMax",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MathUtilities::getMax",1,"double *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MathUtilities::getMax",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MathUtilities::getMax",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MathUtilities_getMax",1,SWIGTYPE_p_double);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MathUtilities_getMax",3,SWIGTYPE_p_double);
  }
  
  result = (int)MathUtilities::getMax(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathUtilities_getMax__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("MathUtilities::getMax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MathUtilities::getMax",1,"double *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MathUtilities::getMax",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MathUtilities_getMax",1,SWIGTYPE_p_double);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)MathUtilities::getMax(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathUtilities_getMax__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  int result;
  
  SWIG_check_num_args("MathUtilities::getMax",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("MathUtilities::getMax",1,"std::vector< double > const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("MathUtilities::getMax",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("MathUtilities_getMax",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MathUtilities_getMax",2,SWIGTYPE_p_double);
  }
  
  result = (int)MathUtilities::getMax((std::vector< double > const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathUtilities_getMax__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = 0 ;
  int result;
  
  SWIG_check_num_args("MathUtilities::getMax",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("MathUtilities::getMax",1,"std::vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("MathUtilities_getMax",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (int)MathUtilities::getMax((std::vector< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathUtilities_getMax(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_MathUtilities_getMax__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_MathUtilities_getMax__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_double, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MathUtilities_getMax__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_double, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_MathUtilities_getMax__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MathUtilities_getMax'\n"
    "  Possible C/C++ prototypes are:\n"
    "    MathUtilities::getMax(double *,int,double *)\n"
    "    MathUtilities::getMax(double *,int)\n"
    "    MathUtilities::getMax(std::vector< double > const &,double *)\n"
    "    MathUtilities::getMax(std::vector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_MathUtilities_compareInt(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  int result;
  
  SWIG_check_num_args("MathUtilities::compareInt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MathUtilities::compareInt",1,"void const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("MathUtilities::compareInt",2,"void const *");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"MathUtilities_compareInt");
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"MathUtilities_compareInt");
  result = (int)MathUtilities::compareInt((void const *)arg1,(void const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathUtilities_isPowerOfTwo(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  bool result;
  
  SWIG_check_num_args("MathUtilities::isPowerOfTwo",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("MathUtilities::isPowerOfTwo",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (bool)MathUtilities::isPowerOfTwo(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathUtilities_nextPowerOfTwo(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("MathUtilities::nextPowerOfTwo",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("MathUtilities::nextPowerOfTwo",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)MathUtilities::nextPowerOfTwo(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathUtilities_previousPowerOfTwo(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("MathUtilities::previousPowerOfTwo",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("MathUtilities::previousPowerOfTwo",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)MathUtilities::previousPowerOfTwo(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathUtilities_nearestPowerOfTwo(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("MathUtilities::nearestPowerOfTwo",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("MathUtilities::nearestPowerOfTwo",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)MathUtilities::nearestPowerOfTwo(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathUtilities_factorial(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double result;
  
  SWIG_check_num_args("MathUtilities::factorial",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("MathUtilities::factorial",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (double)MathUtilities::factorial(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathUtilities_gcd(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("MathUtilities::gcd",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("MathUtilities::gcd",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MathUtilities::gcd",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)MathUtilities::gcd(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MathUtilities(lua_State* L) {
  int SWIG_arg = 0;
  MathUtilities *result = 0 ;
  
  SWIG_check_num_args("MathUtilities::MathUtilities",0,0)
  result = (MathUtilities *)new MathUtilities();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MathUtilities,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MathUtilities(void *obj) {
MathUtilities *arg1 = (MathUtilities *) obj;
delete arg1;
}
static int _proxy__wrap_new_MathUtilities(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MathUtilities);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MathUtilities_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MathUtilities_methods[]= {
    {0,0}
};
static swig_lua_method swig_MathUtilities_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MathUtilities_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MathUtilities_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("NormaliseNone", MathUtilities::NormaliseNone)},
    {SWIG_LUA_CONSTTAB_INT("NormaliseUnitSum", MathUtilities::NormaliseUnitSum)},
    {SWIG_LUA_CONSTTAB_INT("NormaliseUnitMax", MathUtilities::NormaliseUnitMax)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MathUtilities_Sf_SwigStatic_methods[]= {
    { "round", _wrap_MathUtilities_round},
    { "getFrameMinMax", _wrap_MathUtilities_getFrameMinMax},
    { "mean", _wrap_MathUtilities_mean},
    { "sum", _wrap_MathUtilities_sum},
    { "median", _wrap_MathUtilities_median},
    { "princarg", _wrap_MathUtilities_princarg},
    { "mod", _wrap_MathUtilities_mod},
    { "getAlphaNorm", _wrap_MathUtilities_getAlphaNorm},
    { "normalise", _wrap_MathUtilities_normalise},
    { "getLpNorm", _wrap_MathUtilities_getLpNorm},
    { "normaliseLp", _wrap_MathUtilities_normaliseLp},
    { "adaptiveThreshold", _wrap_MathUtilities_adaptiveThreshold},
    { "circShift", _wrap_MathUtilities_circShift},
    { "getMax", _wrap_MathUtilities_getMax},
    { "compareInt", _wrap_MathUtilities_compareInt},
    { "isPowerOfTwo", _wrap_MathUtilities_isPowerOfTwo},
    { "nextPowerOfTwo", _wrap_MathUtilities_nextPowerOfTwo},
    { "previousPowerOfTwo", _wrap_MathUtilities_previousPowerOfTwo},
    { "nearestPowerOfTwo", _wrap_MathUtilities_nearestPowerOfTwo},
    { "factorial", _wrap_MathUtilities_factorial},
    { "gcd", _wrap_MathUtilities_gcd},
    {0,0}
};
static swig_lua_class* swig_MathUtilities_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MathUtilities_Sf_SwigStatic = {
    "MathUtilities",
    swig_MathUtilities_Sf_SwigStatic_methods,
    swig_MathUtilities_Sf_SwigStatic_attributes,
    swig_MathUtilities_Sf_SwigStatic_constants,
    swig_MathUtilities_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MathUtilities_bases[] = {0};
static const char *swig_MathUtilities_base_names[] = {0};
static swig_lua_class _wrap_class_MathUtilities = { "MathUtilities", "MathUtilities", &SWIGTYPE_p_MathUtilities,_proxy__wrap_new_MathUtilities, swig_delete_MathUtilities, swig_MathUtilities_methods, swig_MathUtilities_attributes, &swig_MathUtilities_Sf_SwigStatic, swig_MathUtilities_meta, swig_MathUtilities_bases, swig_MathUtilities_base_names };

static int _wrap_TPolyFit_PolyFit2(lua_State* L) {
  int SWIG_arg = 0;
  vector< double > *arg1 = 0 ;
  vector< double > *arg2 = 0 ;
  vector< double > *arg3 = 0 ;
  double result;
  
  SWIG_check_num_args("TPolyFit::PolyFit2",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TPolyFit::PolyFit2",1,"vector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TPolyFit::PolyFit2",2,"vector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TPolyFit::PolyFit2",3,"vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("TPolyFit_PolyFit2",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("TPolyFit_PolyFit2",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("TPolyFit_PolyFit2",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double)TPolyFit::PolyFit2((std::vector< double > const &)*arg1,(std::vector< double > const &)*arg2,*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TPolyFit(void *obj) {
TPolyFit *arg1 = (TPolyFit *) obj;
delete arg1;
}
static swig_lua_attribute swig_TPolyFit_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TPolyFit_methods[]= {
    {0,0}
};
static swig_lua_method swig_TPolyFit_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TPolyFit_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TPolyFit_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TPolyFit_Sf_SwigStatic_methods[]= {
    { "PolyFit2", _wrap_TPolyFit_PolyFit2},
    {0,0}
};
static swig_lua_class* swig_TPolyFit_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TPolyFit_Sf_SwigStatic = {
    "TPolyFit",
    swig_TPolyFit_Sf_SwigStatic_methods,
    swig_TPolyFit_Sf_SwigStatic_attributes,
    swig_TPolyFit_Sf_SwigStatic_constants,
    swig_TPolyFit_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TPolyFit_bases[] = {0};
static const char *swig_TPolyFit_base_names[] = {0};
static swig_lua_class _wrap_class_TPolyFit = { "TPolyFit", "TPolyFit", &SWIGTYPE_p_TPolyFit,0, swig_delete_TPolyFit, swig_TPolyFit_methods, swig_TPolyFit_attributes, &swig_TPolyFit_Sf_SwigStatic, swig_TPolyFit_meta, swig_TPolyFit_bases, swig_TPolyFit_base_names };

static int _wrap_NSUtility_swap(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  
  SWIG_check_num_args("NSUtility::swap",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("NSUtility::swap",1,"double &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NSUtility::swap",2,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("NSUtility_swap",1,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("NSUtility_swap",2,SWIGTYPE_p_double);
  }
  
  NSUtility::swap(*arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NSUtility_zeroise__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  vector< double > *arg1 = 0 ;
  int arg2 ;
  
  SWIG_check_num_args("NSUtility::zeroise",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("NSUtility::zeroise",1,"vector< double > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NSUtility::zeroise",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("NSUtility_zeroise",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  NSUtility::zeroise(*arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NSUtility_zeroise__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  vector< int > *arg1 = 0 ;
  int arg2 ;
  
  SWIG_check_num_args("NSUtility::zeroise",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("NSUtility::zeroise",1,"vector< int > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NSUtility::zeroise",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("NSUtility_zeroise",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  NSUtility::zeroise(*arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NSUtility_zeroise__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  vector< vector< double > > *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("NSUtility::zeroise",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("NSUtility::zeroise",1,"vector< vector< double > > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NSUtility::zeroise",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NSUtility::zeroise",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0))){
    SWIG_fail_ptr("NSUtility_zeroise",1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  NSUtility::zeroise(*arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NSUtility_zeroise__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  vector< vector< int > > *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("NSUtility::zeroise",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("NSUtility::zeroise",1,"vector< vector< int > > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NSUtility::zeroise",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NSUtility::zeroise",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t,0))){
    SWIG_fail_ptr("NSUtility_zeroise",1,SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  NSUtility::zeroise(*arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NSUtility_zeroise(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NSUtility_zeroise__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NSUtility_zeroise__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NSUtility_zeroise__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NSUtility_zeroise__SWIG_3(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NSUtility_zeroise'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NSUtility::zeroise(vector< double > &,int)\n"
    "    NSUtility::zeroise(vector< int > &,int)\n"
    "    NSUtility::zeroise(vector< vector< double > > &,int,int)\n"
    "    NSUtility::zeroise(vector< vector< int > > &,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_NSUtility_sqr(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("NSUtility::sqr",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("NSUtility::sqr",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)NSUtility::sqr((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NSUtility(lua_State* L) {
  int SWIG_arg = 0;
  NSUtility *result = 0 ;
  
  SWIG_check_num_args("NSUtility::NSUtility",0,0)
  result = (NSUtility *)new NSUtility();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NSUtility,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NSUtility(void *obj) {
NSUtility *arg1 = (NSUtility *) obj;
delete arg1;
}
static int _proxy__wrap_new_NSUtility(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NSUtility);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NSUtility_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NSUtility_methods[]= {
    {0,0}
};
static swig_lua_method swig_NSUtility_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NSUtility_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NSUtility_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NSUtility_Sf_SwigStatic_methods[]= {
    { "swap", _wrap_NSUtility_swap},
    { "zeroise", _wrap_NSUtility_zeroise},
    { "sqr", _wrap_NSUtility_sqr},
    {0,0}
};
static swig_lua_class* swig_NSUtility_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NSUtility_Sf_SwigStatic = {
    "NSUtility",
    swig_NSUtility_Sf_SwigStatic_methods,
    swig_NSUtility_Sf_SwigStatic_attributes,
    swig_NSUtility_Sf_SwigStatic_constants,
    swig_NSUtility_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NSUtility_bases[] = {0};
static const char *swig_NSUtility_base_names[] = {0};
static swig_lua_class _wrap_class_NSUtility = { "NSUtility", "NSUtility", &SWIGTYPE_p_NSUtility,_proxy__wrap_new_NSUtility, swig_delete_NSUtility, swig_NSUtility_methods, swig_NSUtility_attributes, &swig_NSUtility_Sf_SwigStatic, swig_NSUtility_meta, swig_NSUtility_bases, swig_NSUtility_base_names };

static int _wrap_ISNANf(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  int result;
  
  SWIG_check_num_args("ISNANf",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ISNANf",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (int)ISNANf(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ISNANd(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  int result;
  
  SWIG_check_num_args("ISNANd",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ISNANd",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (int)ISNANd(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ISINFf(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  int result;
  
  SWIG_check_num_args("ISINFf",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ISINFf",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (int)ISINFf(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ISINFd(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  int result;
  
  SWIG_check_num_args("ISINFd",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ISINFd",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (int)ISINFd(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pca_project(lua_State* L) {
  int SWIG_arg = 0;
  double **arg1 = (double **) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("pca_project",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pca_project",1,"double **");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pca_project",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("pca_project",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("pca_project",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("pca_project",1,SWIGTYPE_p_p_double);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  pca_project(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_SwigModule_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("RectangularWindow", RectangularWindow)},
    {SWIG_LUA_CONSTTAB_INT("BartlettWindow", BartlettWindow)},
    {SWIG_LUA_CONSTTAB_INT("HammingWindow", HammingWindow)},
    {SWIG_LUA_CONSTTAB_INT("HanningWindow", HanningWindow)},
    {SWIG_LUA_CONSTTAB_INT("BlackmanWindow", BlackmanWindow)},
    {SWIG_LUA_CONSTTAB_INT("BlackmanHarrisWindow", BlackmanHarrisWindow)},
    {SWIG_LUA_CONSTTAB_INT("FirstWindow", FirstWindow)},
    {SWIG_LUA_CONSTTAB_INT("LastWindow", LastWindow)},
    {SWIG_LUA_CONSTTAB_INT("DF_HFC", (1))},
    {SWIG_LUA_CONSTTAB_INT("DF_SPECDIFF", (2))},
    {SWIG_LUA_CONSTTAB_INT("DF_PHASEDEV", (3))},
    {SWIG_LUA_CONSTTAB_INT("DF_COMPLEXSD", (4))},
    {SWIG_LUA_CONSTTAB_INT("DF_BROADBAND", (5))},
    {SWIG_LUA_CONSTTAB_INT("FEATURE_TYPE_UNKNOWN", FEATURE_TYPE_UNKNOWN)},
    {SWIG_LUA_CONSTTAB_INT("FEATURE_TYPE_CONSTQ", FEATURE_TYPE_CONSTQ)},
    {SWIG_LUA_CONSTTAB_INT("FEATURE_TYPE_CHROMA", FEATURE_TYPE_CHROMA)},
    {SWIG_LUA_CONSTTAB_INT("FEATURE_TYPE_MFCC", FEATURE_TYPE_MFCC)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Haar", Wavelet::Haar)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Daubechies_2", Wavelet::Daubechies_2)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Daubechies_3", Wavelet::Daubechies_3)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Daubechies_4", Wavelet::Daubechies_4)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Daubechies_5", Wavelet::Daubechies_5)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Daubechies_6", Wavelet::Daubechies_6)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Daubechies_7", Wavelet::Daubechies_7)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Daubechies_8", Wavelet::Daubechies_8)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Daubechies_9", Wavelet::Daubechies_9)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Daubechies_10", Wavelet::Daubechies_10)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Daubechies_20", Wavelet::Daubechies_20)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Daubechies_40", Wavelet::Daubechies_40)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Symlet_2", Wavelet::Symlet_2)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Symlet_3", Wavelet::Symlet_3)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Symlet_4", Wavelet::Symlet_4)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Symlet_5", Wavelet::Symlet_5)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Symlet_6", Wavelet::Symlet_6)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Symlet_7", Wavelet::Symlet_7)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Symlet_8", Wavelet::Symlet_8)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Symlet_9", Wavelet::Symlet_9)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Symlet_10", Wavelet::Symlet_10)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Symlet_20", Wavelet::Symlet_20)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Symlet_30", Wavelet::Symlet_30)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Coiflet_1", Wavelet::Coiflet_1)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Coiflet_2", Wavelet::Coiflet_2)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Coiflet_3", Wavelet::Coiflet_3)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Coiflet_4", Wavelet::Coiflet_4)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Coiflet_5", Wavelet::Coiflet_5)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Biorthogonal_1_3", Wavelet::Biorthogonal_1_3)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Biorthogonal_1_5", Wavelet::Biorthogonal_1_5)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Biorthogonal_2_2", Wavelet::Biorthogonal_2_2)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Biorthogonal_2_4", Wavelet::Biorthogonal_2_4)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Biorthogonal_2_6", Wavelet::Biorthogonal_2_6)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Biorthogonal_2_8", Wavelet::Biorthogonal_2_8)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Biorthogonal_3_1", Wavelet::Biorthogonal_3_1)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Biorthogonal_3_3", Wavelet::Biorthogonal_3_3)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Biorthogonal_3_5", Wavelet::Biorthogonal_3_5)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Biorthogonal_3_7", Wavelet::Biorthogonal_3_7)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Biorthogonal_3_9", Wavelet::Biorthogonal_3_9)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Biorthogonal_4_4", Wavelet::Biorthogonal_4_4)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Biorthogonal_5_5", Wavelet::Biorthogonal_5_5)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Biorthogonal_6_8", Wavelet::Biorthogonal_6_8)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_Meyer", Wavelet::Meyer)},
    {SWIG_LUA_CONSTTAB_INT("Wavelet_LastType", Wavelet::LastType)},
    {SWIG_LUA_CONSTTAB_FLOAT("EPS", 2.2204e-016)},
    {SWIG_LUA_CONSTTAB_INT("MathUtilities_NormaliseNone", MathUtilities::NormaliseNone)},
    {SWIG_LUA_CONSTTAB_INT("MathUtilities_NormaliseUnitSum", MathUtilities::NormaliseUnitSum)},
    {SWIG_LUA_CONSTTAB_INT("MathUtilities_NormaliseUnitMax", MathUtilities::NormaliseUnitMax)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "KaiserWindow_byTransitionWidth", _wrap_KaiserWindow_byTransitionWidth},
    { "KaiserWindow_byBandwidth", _wrap_KaiserWindow_byBandwidth},
    { "KaiserWindow_parametersForTransitionWidth", _wrap_KaiserWindow_parametersForTransitionWidth},
    { "KaiserWindow_parametersForBandwidth", _wrap_KaiserWindow_parametersForBandwidth},
    { "Pitch_getFrequencyForPitch", _wrap_Pitch_getFrequencyForPitch},
    { "Pitch_getPitchForFrequency", _wrap_Pitch_getPitchForFrequency},
    { "Decimator_getHighestSupportedFactor", _wrap_Decimator_getHighestSupportedFactor},
    { "Resampler_resample", _wrap_Resampler_resample},
    { "cluster_melt", _wrap_cluster_melt},
    { "mpeg7_constq", _wrap_mpeg7_constq},
    { "cq2chroma", _wrap_cq2chroma},
    { "create_histograms", _wrap_create_histograms},
    { "cluster_segment", _wrap_cluster_segment},
    { "constq_segment", _wrap_constq_segment},
    { "Wavelet_getWaveletName", _wrap_Wavelet_getWaveletName},
    { "Wavelet_createDecompositionFilters", _wrap_Wavelet_createDecompositionFilters},
    { "hmm_train", _wrap_hmm_train},
    { "forward_backwards", _wrap_forward_backwards},
    { "baum_welch", _wrap_baum_welch},
    { "viterbi_decode", _wrap_viterbi_decode},
    { "hmm_init", _wrap_hmm_init},
    { "hmm_close", _wrap_hmm_close},
    { "invert", _wrap_invert},
    { "gauss", _wrap_gauss},
    { "loggauss", _wrap_loggauss},
    { "hmm_print", _wrap_hmm_print},
    { "MathUtilities_round", _wrap_MathUtilities_round},
    { "MathUtilities_getFrameMinMax", _wrap_MathUtilities_getFrameMinMax},
    { "MathUtilities_mean", _wrap_MathUtilities_mean},
    { "MathUtilities_sum", _wrap_MathUtilities_sum},
    { "MathUtilities_median", _wrap_MathUtilities_median},
    { "MathUtilities_princarg", _wrap_MathUtilities_princarg},
    { "MathUtilities_mod", _wrap_MathUtilities_mod},
    { "MathUtilities_getAlphaNorm", _wrap_MathUtilities_getAlphaNorm},
    { "MathUtilities_normalise", _wrap_MathUtilities_normalise},
    { "MathUtilities_getLpNorm", _wrap_MathUtilities_getLpNorm},
    { "MathUtilities_normaliseLp", _wrap_MathUtilities_normaliseLp},
    { "MathUtilities_adaptiveThreshold", _wrap_MathUtilities_adaptiveThreshold},
    { "MathUtilities_circShift", _wrap_MathUtilities_circShift},
    { "MathUtilities_getMax", _wrap_MathUtilities_getMax},
    { "MathUtilities_compareInt", _wrap_MathUtilities_compareInt},
    { "MathUtilities_isPowerOfTwo", _wrap_MathUtilities_isPowerOfTwo},
    { "MathUtilities_nextPowerOfTwo", _wrap_MathUtilities_nextPowerOfTwo},
    { "MathUtilities_previousPowerOfTwo", _wrap_MathUtilities_previousPowerOfTwo},
    { "MathUtilities_nearestPowerOfTwo", _wrap_MathUtilities_nearestPowerOfTwo},
    { "MathUtilities_factorial", _wrap_MathUtilities_factorial},
    { "MathUtilities_gcd", _wrap_MathUtilities_gcd},
    { "TPolyFit_PolyFit2", _wrap_TPolyFit_PolyFit2},
    { "NSUtility_swap", _wrap_NSUtility_swap},
    { "NSUtility_zeroise", _wrap_NSUtility_zeroise},
    { "NSUtility_sqr", _wrap_NSUtility_sqr},
    { "ISNANf", _wrap_ISNANf},
    { "ISNANd", _wrap_ISNANd},
    { "ISINFf", _wrap_ISINFf},
    { "ISINFd", _wrap_ISINFd},
    { "pca_project", _wrap_pca_project},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_KaiserWindow,
&_wrap_class_Pitch,
&_wrap_class_SincWindow,
&_wrap_class_ChromaConfig,
&_wrap_class_Chromagram,
&_wrap_class_CQConfig,
&_wrap_class_ConstantQ,
&_wrap_class_MFCCConfig,
&_wrap_class_MFCC,
&_wrap_class_DFConfig,
&_wrap_class_DetectionFunction,
&_wrap_class_PPWinThresh,
&_wrap_class_QFitThresh,
&_wrap_class_PPickParams,
&_wrap_class_PeakPicking,
&_wrap_class_PhaseVocoder,
&_wrap_class_Decimator,
&_wrap_class_DecimatorB,
&_wrap_class_Resampler,
&_wrap_class_BeatSpectrum,
&_wrap_class_ClusterMeltSegmenterParams,
&_wrap_class_ClusterMeltSegmenter,
&_wrap_class_Segment,
&_wrap_class_Segmentation,
&_wrap_class_Segmenter,
&_wrap_class_segment_t,
&_wrap_class_segmentation_t,
&_wrap_class_DFProcConfig,
&_wrap_class_DFProcess,
&_wrap_class_FiltFilt,
&_wrap_class_Filter,
&_wrap_class_Framer,
&_wrap_class_DownBeat,
&_wrap_class_WinThresh,
&_wrap_class_TTParams,
&_wrap_class_TempoTrack,
&_wrap_class_TempoTrackV2,
&_wrap_class_ChangeDFConfig,
&_wrap_class_ChangeDetectionFunction,
&_wrap_class_TCSGram,
&_wrap_class_ChromaVector,
&_wrap_class_TCSVector,
&_wrap_class_TonalEstimator,
&_wrap_class_DCT,
&_wrap_class_FFT,
&_wrap_class_FFTReal,
&_wrap_class_Wavelet,
&_wrap_class_model_t,
&_wrap_class_Correlation,
&_wrap_class_CosineDistance,
&_wrap_class_KLDivergence,
&_wrap_class_MathUtilities,
&_wrap_class_TPolyFit,
&_wrap_class_NSUtility,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "qmdsp",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_ChromaVectorTo_p_std__valarrayT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::valarray< double > *)  ((ChromaVector *) x));
}
static void *_p_TCSVectorTo_p_std__valarrayT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::valarray< double > *)  ((TCSVector *) x));
}
static swig_type_info _swigt__p_BeatSpectrum = {"_p_BeatSpectrum", "BeatSpectrum *", 0, 0, (void*)&_wrap_class_BeatSpectrum, 0};
static swig_type_info _swigt__p_CQConfig = {"_p_CQConfig", "CQConfig *", 0, 0, (void*)&_wrap_class_CQConfig, 0};
static swig_type_info _swigt__p_ChangeDFConfig = {"_p_ChangeDFConfig", "ChangeDFConfig *", 0, 0, (void*)&_wrap_class_ChangeDFConfig, 0};
static swig_type_info _swigt__p_ChangeDetectionFunction = {"_p_ChangeDetectionFunction", "ChangeDetectionFunction *", 0, 0, (void*)&_wrap_class_ChangeDetectionFunction, 0};
static swig_type_info _swigt__p_ChromaConfig = {"_p_ChromaConfig", "ChromaConfig *", 0, 0, (void*)&_wrap_class_ChromaConfig, 0};
static swig_type_info _swigt__p_ChromaVector = {"_p_ChromaVector", "ChromaVector *", 0, 0, (void*)&_wrap_class_ChromaVector, 0};
static swig_type_info _swigt__p_Chromagram = {"_p_Chromagram", "Chromagram *", 0, 0, (void*)&_wrap_class_Chromagram, 0};
static swig_type_info _swigt__p_ClusterMeltSegmenter = {"_p_ClusterMeltSegmenter", "ClusterMeltSegmenter *", 0, 0, (void*)&_wrap_class_ClusterMeltSegmenter, 0};
static swig_type_info _swigt__p_ClusterMeltSegmenterParams = {"_p_ClusterMeltSegmenterParams", "ClusterMeltSegmenterParams *", 0, 0, (void*)&_wrap_class_ClusterMeltSegmenterParams, 0};
static swig_type_info _swigt__p_ConstantQ = {"_p_ConstantQ", "ConstantQ *", 0, 0, (void*)&_wrap_class_ConstantQ, 0};
static swig_type_info _swigt__p_Correlation = {"_p_Correlation", "Correlation *", 0, 0, (void*)&_wrap_class_Correlation, 0};
static swig_type_info _swigt__p_CosineDistance = {"_p_CosineDistance", "CosineDistance *", 0, 0, (void*)&_wrap_class_CosineDistance, 0};
static swig_type_info _swigt__p_DCT = {"_p_DCT", "DCT *", 0, 0, (void*)&_wrap_class_DCT, 0};
static swig_type_info _swigt__p_DFConfig = {"_p_DFConfig", "DFConfig *", 0, 0, (void*)&_wrap_class_DFConfig, 0};
static swig_type_info _swigt__p_DFProcConfig = {"_p_DFProcConfig", "DFProcConfig *", 0, 0, (void*)&_wrap_class_DFProcConfig, 0};
static swig_type_info _swigt__p_DFProcess = {"_p_DFProcess", "DFProcess *", 0, 0, (void*)&_wrap_class_DFProcess, 0};
static swig_type_info _swigt__p_Decimator = {"_p_Decimator", "Decimator *", 0, 0, (void*)&_wrap_class_Decimator, 0};
static swig_type_info _swigt__p_DecimatorB = {"_p_DecimatorB", "DecimatorB *", 0, 0, (void*)&_wrap_class_DecimatorB, 0};
static swig_type_info _swigt__p_DetectionFunction = {"_p_DetectionFunction", "DetectionFunction *", 0, 0, (void*)&_wrap_class_DetectionFunction, 0};
static swig_type_info _swigt__p_DownBeat = {"_p_DownBeat", "DownBeat *", 0, 0, (void*)&_wrap_class_DownBeat, 0};
static swig_type_info _swigt__p_FFT = {"_p_FFT", "FFT *", 0, 0, (void*)&_wrap_class_FFT, 0};
static swig_type_info _swigt__p_FFTReal = {"_p_FFTReal", "FFTReal *", 0, 0, (void*)&_wrap_class_FFTReal, 0};
static swig_type_info _swigt__p_FiltFilt = {"_p_FiltFilt", "FiltFilt *", 0, 0, (void*)&_wrap_class_FiltFilt, 0};
static swig_type_info _swigt__p_Filter = {"_p_Filter", "Filter *", 0, 0, (void*)&_wrap_class_Filter, 0};
static swig_type_info _swigt__p_Filter__Parameters = {"_p_Filter__Parameters", "Filter::Parameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Framer = {"_p_Framer", "Framer *", 0, 0, (void*)&_wrap_class_Framer, 0};
static swig_type_info _swigt__p_KLDivergence = {"_p_KLDivergence", "KLDivergence *", 0, 0, (void*)&_wrap_class_KLDivergence, 0};
static swig_type_info _swigt__p_KaiserWindow = {"_p_KaiserWindow", "KaiserWindow *", 0, 0, (void*)&_wrap_class_KaiserWindow, 0};
static swig_type_info _swigt__p_KaiserWindow__Parameters = {"_p_KaiserWindow__Parameters", "KaiserWindow::Parameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MFCC = {"_p_MFCC", "MFCC *", 0, 0, (void*)&_wrap_class_MFCC, 0};
static swig_type_info _swigt__p_MFCCConfig = {"_p_MFCCConfig", "MFCCConfig *", 0, 0, (void*)&_wrap_class_MFCCConfig, 0};
static swig_type_info _swigt__p_MathUtilities = {"_p_MathUtilities", "MathUtilities *", 0, 0, (void*)&_wrap_class_MathUtilities, 0};
static swig_type_info _swigt__p_NSUtility = {"_p_NSUtility", "NSUtility *", 0, 0, (void*)&_wrap_class_NSUtility, 0};
static swig_type_info _swigt__p_PPWinThresh = {"_p_PPWinThresh", "PPWinThresh *", 0, 0, (void*)&_wrap_class_PPWinThresh, 0};
static swig_type_info _swigt__p_PPickParams = {"_p_PPickParams", "PPickParams *", 0, 0, (void*)&_wrap_class_PPickParams, 0};
static swig_type_info _swigt__p_PeakPicking = {"_p_PeakPicking", "PeakPicking *", 0, 0, (void*)&_wrap_class_PeakPicking, 0};
static swig_type_info _swigt__p_PhaseVocoder = {"_p_PhaseVocoder", "PhaseVocoder *", 0, 0, (void*)&_wrap_class_PhaseVocoder, 0};
static swig_type_info _swigt__p_Pitch = {"_p_Pitch", "Pitch *", 0, 0, (void*)&_wrap_class_Pitch, 0};
static swig_type_info _swigt__p_QFitThresh = {"_p_QFitThresh", "QFitThresh *", 0, 0, (void*)&_wrap_class_QFitThresh, 0};
static swig_type_info _swigt__p_Resampler = {"_p_Resampler", "Resampler *", 0, 0, (void*)&_wrap_class_Resampler, 0};
static swig_type_info _swigt__p_Segment = {"_p_Segment", "Segment *", 0, 0, (void*)&_wrap_class_Segment, 0};
static swig_type_info _swigt__p_Segmentation = {"_p_Segmentation", "Segmentation *", 0, 0, (void*)&_wrap_class_Segmentation, 0};
static swig_type_info _swigt__p_Segmenter = {"_p_Segmenter", "Segmenter *", 0, 0, (void*)&_wrap_class_Segmenter, 0};
static swig_type_info _swigt__p_SincWindow = {"_p_SincWindow", "SincWindow *", 0, 0, (void*)&_wrap_class_SincWindow, 0};
static swig_type_info _swigt__p_TCSGram = {"_p_TCSGram", "TCSGram *", 0, 0, (void*)&_wrap_class_TCSGram, 0};
static swig_type_info _swigt__p_TCSVector = {"_p_TCSVector", "TCSVector *", 0, 0, (void*)&_wrap_class_TCSVector, 0};
static swig_type_info _swigt__p_TPolyFit = {"_p_TPolyFit", "TPolyFit *", 0, 0, (void*)&_wrap_class_TPolyFit, 0};
static swig_type_info _swigt__p_TTParams = {"_p_TTParams", "TTParams *", 0, 0, (void*)&_wrap_class_TTParams, 0};
static swig_type_info _swigt__p_TempoTrack = {"_p_TempoTrack", "TempoTrack *", 0, 0, (void*)&_wrap_class_TempoTrack, 0};
static swig_type_info _swigt__p_TempoTrackV2 = {"_p_TempoTrackV2", "TempoTrackV2 *", 0, 0, (void*)&_wrap_class_TempoTrackV2, 0};
static swig_type_info _swigt__p_TonalEstimator = {"_p_TonalEstimator", "TonalEstimator *", 0, 0, (void*)&_wrap_class_TonalEstimator, 0};
static swig_type_info _swigt__p_Wavelet = {"_p_Wavelet", "Wavelet *", 0, 0, (void*)&_wrap_class_Wavelet, 0};
static swig_type_info _swigt__p_WinThresh = {"_p_WinThresh", "WinThresh *", 0, 0, (void*)&_wrap_class_WinThresh, 0};
static swig_type_info _swigt__p__model_t = {"_p__model_t", "_model_t *|model_t *", 0, 0, (void*)&_wrap_class_model_t, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_feature_types = {"_p_feature_types", "enum feature_types *|feature_types *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int64_t = {"_p_int64_t", "int64_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_double = {"_p_p_double", "double **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_p_double = {"_p_p_p_double", "double ***", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_segment_t = {"_p_segment_t", "segment_t *", 0, 0, (void*)&_wrap_class_segment_t, 0};
static swig_type_info _swigt__p_segmentation_t = {"_p_segmentation_t", "segmentation_t *", 0, 0, (void*)&_wrap_class_segmentation_t, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_double_t = {"_p_std__complexT_double_t", "ComplexData *|std::complex< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__valarrayT_double_t = {"_p_std__valarrayT_double_t", "ChangeDistance *|std::valarray< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Segment_t = {"_p_std__vectorT_Segment_t", "std::vector< Segment > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_t = {"_p_std__vectorT_double_t", "std::vector< double > *|vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_t = {"_p_std__vectorT_int_t", "std::vector< int > *|vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__pairT_long_TCSVector_t_t = {"_p_std__vectorT_std__pairT_long_TCSVector_t_t", "std::vector< std::pair< long,TCSVector > > *|vectorlist_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_double_t_t = {"_p_std__vectorT_std__vectorT_double_t_t", "std::vector< std::vector< double > > *|vector< vector< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_int_t_t = {"_p_std__vectorT_std__vectorT_int_t_t", "std::vector< std::vector< int > > *|vector< vector< int > > *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_BeatSpectrum,
  &_swigt__p_CQConfig,
  &_swigt__p_ChangeDFConfig,
  &_swigt__p_ChangeDetectionFunction,
  &_swigt__p_ChromaConfig,
  &_swigt__p_ChromaVector,
  &_swigt__p_Chromagram,
  &_swigt__p_ClusterMeltSegmenter,
  &_swigt__p_ClusterMeltSegmenterParams,
  &_swigt__p_ConstantQ,
  &_swigt__p_Correlation,
  &_swigt__p_CosineDistance,
  &_swigt__p_DCT,
  &_swigt__p_DFConfig,
  &_swigt__p_DFProcConfig,
  &_swigt__p_DFProcess,
  &_swigt__p_Decimator,
  &_swigt__p_DecimatorB,
  &_swigt__p_DetectionFunction,
  &_swigt__p_DownBeat,
  &_swigt__p_FFT,
  &_swigt__p_FFTReal,
  &_swigt__p_FiltFilt,
  &_swigt__p_Filter,
  &_swigt__p_Filter__Parameters,
  &_swigt__p_Framer,
  &_swigt__p_KLDivergence,
  &_swigt__p_KaiserWindow,
  &_swigt__p_KaiserWindow__Parameters,
  &_swigt__p_MFCC,
  &_swigt__p_MFCCConfig,
  &_swigt__p_MathUtilities,
  &_swigt__p_NSUtility,
  &_swigt__p_PPWinThresh,
  &_swigt__p_PPickParams,
  &_swigt__p_PeakPicking,
  &_swigt__p_PhaseVocoder,
  &_swigt__p_Pitch,
  &_swigt__p_QFitThresh,
  &_swigt__p_Resampler,
  &_swigt__p_Segment,
  &_swigt__p_Segmentation,
  &_swigt__p_Segmenter,
  &_swigt__p_SincWindow,
  &_swigt__p_TCSGram,
  &_swigt__p_TCSVector,
  &_swigt__p_TPolyFit,
  &_swigt__p_TTParams,
  &_swigt__p_TempoTrack,
  &_swigt__p_TempoTrackV2,
  &_swigt__p_TonalEstimator,
  &_swigt__p_Wavelet,
  &_swigt__p_WinThresh,
  &_swigt__p__model_t,
  &_swigt__p_double,
  &_swigt__p_feature_types,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_int64_t,
  &_swigt__p_p_double,
  &_swigt__p_p_p_double,
  &_swigt__p_segment_t,
  &_swigt__p_segmentation_t,
  &_swigt__p_size_t,
  &_swigt__p_std__complexT_double_t,
  &_swigt__p_std__string,
  &_swigt__p_std__valarrayT_double_t,
  &_swigt__p_std__vectorT_Segment_t,
  &_swigt__p_std__vectorT_double_t,
  &_swigt__p_std__vectorT_int_t,
  &_swigt__p_std__vectorT_std__pairT_long_TCSVector_t_t,
  &_swigt__p_std__vectorT_std__vectorT_double_t_t,
  &_swigt__p_std__vectorT_std__vectorT_int_t_t,
};

static swig_cast_info _swigc__p_BeatSpectrum[] = {  {&_swigt__p_BeatSpectrum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CQConfig[] = {  {&_swigt__p_CQConfig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ChangeDFConfig[] = {  {&_swigt__p_ChangeDFConfig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ChangeDetectionFunction[] = {  {&_swigt__p_ChangeDetectionFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ChromaConfig[] = {  {&_swigt__p_ChromaConfig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ChromaVector[] = {  {&_swigt__p_ChromaVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Chromagram[] = {  {&_swigt__p_Chromagram, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ClusterMeltSegmenter[] = {  {&_swigt__p_ClusterMeltSegmenter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ClusterMeltSegmenterParams[] = {  {&_swigt__p_ClusterMeltSegmenterParams, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstantQ[] = {  {&_swigt__p_ConstantQ, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Correlation[] = {  {&_swigt__p_Correlation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CosineDistance[] = {  {&_swigt__p_CosineDistance, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DCT[] = {  {&_swigt__p_DCT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DFConfig[] = {  {&_swigt__p_DFConfig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DFProcConfig[] = {  {&_swigt__p_DFProcConfig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DFProcess[] = {  {&_swigt__p_DFProcess, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Decimator[] = {  {&_swigt__p_Decimator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DecimatorB[] = {  {&_swigt__p_DecimatorB, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DetectionFunction[] = {  {&_swigt__p_DetectionFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DownBeat[] = {  {&_swigt__p_DownBeat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FFT[] = {  {&_swigt__p_FFT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FFTReal[] = {  {&_swigt__p_FFTReal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FiltFilt[] = {  {&_swigt__p_FiltFilt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filter[] = {  {&_swigt__p_Filter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filter__Parameters[] = {  {&_swigt__p_Filter__Parameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Framer[] = {  {&_swigt__p_Framer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KLDivergence[] = {  {&_swigt__p_KLDivergence, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KaiserWindow[] = {  {&_swigt__p_KaiserWindow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KaiserWindow__Parameters[] = {  {&_swigt__p_KaiserWindow__Parameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MFCC[] = {  {&_swigt__p_MFCC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MFCCConfig[] = {  {&_swigt__p_MFCCConfig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MathUtilities[] = {  {&_swigt__p_MathUtilities, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NSUtility[] = {  {&_swigt__p_NSUtility, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PPWinThresh[] = {  {&_swigt__p_PPWinThresh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PPickParams[] = {  {&_swigt__p_PPickParams, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PeakPicking[] = {  {&_swigt__p_PeakPicking, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PhaseVocoder[] = {  {&_swigt__p_PhaseVocoder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pitch[] = {  {&_swigt__p_Pitch, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QFitThresh[] = {  {&_swigt__p_QFitThresh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Resampler[] = {  {&_swigt__p_Resampler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Segment[] = {  {&_swigt__p_Segment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Segmentation[] = {  {&_swigt__p_Segmentation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Segmenter[] = {  {&_swigt__p_Segmenter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SincWindow[] = {  {&_swigt__p_SincWindow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCSGram[] = {  {&_swigt__p_TCSGram, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCSVector[] = {  {&_swigt__p_TCSVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TPolyFit[] = {  {&_swigt__p_TPolyFit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TTParams[] = {  {&_swigt__p_TTParams, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TempoTrack[] = {  {&_swigt__p_TempoTrack, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TempoTrackV2[] = {  {&_swigt__p_TempoTrackV2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TonalEstimator[] = {  {&_swigt__p_TonalEstimator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Wavelet[] = {  {&_swigt__p_Wavelet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WinThresh[] = {  {&_swigt__p_WinThresh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__model_t[] = {  {&_swigt__p__model_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_feature_types[] = {  {&_swigt__p_feature_types, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int64_t[] = {  {&_swigt__p_int64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_double[] = {  {&_swigt__p_p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_p_double[] = {  {&_swigt__p_p_p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_segment_t[] = {  {&_swigt__p_segment_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_segmentation_t[] = {  {&_swigt__p_segmentation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_double_t[] = {  {&_swigt__p_std__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__valarrayT_double_t[] = {  {&_swigt__p_std__valarrayT_double_t, 0, 0, 0},  {&_swigt__p_ChromaVector, _p_ChromaVectorTo_p_std__valarrayT_double_t, 0, 0},  {&_swigt__p_TCSVector, _p_TCSVectorTo_p_std__valarrayT_double_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Segment_t[] = {  {&_swigt__p_std__vectorT_Segment_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t[] = {  {&_swigt__p_std__vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_t[] = {  {&_swigt__p_std__vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__pairT_long_TCSVector_t_t[] = {  {&_swigt__p_std__vectorT_std__pairT_long_TCSVector_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_double_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_int_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_BeatSpectrum,
  _swigc__p_CQConfig,
  _swigc__p_ChangeDFConfig,
  _swigc__p_ChangeDetectionFunction,
  _swigc__p_ChromaConfig,
  _swigc__p_ChromaVector,
  _swigc__p_Chromagram,
  _swigc__p_ClusterMeltSegmenter,
  _swigc__p_ClusterMeltSegmenterParams,
  _swigc__p_ConstantQ,
  _swigc__p_Correlation,
  _swigc__p_CosineDistance,
  _swigc__p_DCT,
  _swigc__p_DFConfig,
  _swigc__p_DFProcConfig,
  _swigc__p_DFProcess,
  _swigc__p_Decimator,
  _swigc__p_DecimatorB,
  _swigc__p_DetectionFunction,
  _swigc__p_DownBeat,
  _swigc__p_FFT,
  _swigc__p_FFTReal,
  _swigc__p_FiltFilt,
  _swigc__p_Filter,
  _swigc__p_Filter__Parameters,
  _swigc__p_Framer,
  _swigc__p_KLDivergence,
  _swigc__p_KaiserWindow,
  _swigc__p_KaiserWindow__Parameters,
  _swigc__p_MFCC,
  _swigc__p_MFCCConfig,
  _swigc__p_MathUtilities,
  _swigc__p_NSUtility,
  _swigc__p_PPWinThresh,
  _swigc__p_PPickParams,
  _swigc__p_PeakPicking,
  _swigc__p_PhaseVocoder,
  _swigc__p_Pitch,
  _swigc__p_QFitThresh,
  _swigc__p_Resampler,
  _swigc__p_Segment,
  _swigc__p_Segmentation,
  _swigc__p_Segmenter,
  _swigc__p_SincWindow,
  _swigc__p_TCSGram,
  _swigc__p_TCSVector,
  _swigc__p_TPolyFit,
  _swigc__p_TTParams,
  _swigc__p_TempoTrack,
  _swigc__p_TempoTrackV2,
  _swigc__p_TonalEstimator,
  _swigc__p_Wavelet,
  _swigc__p_WinThresh,
  _swigc__p__model_t,
  _swigc__p_double,
  _swigc__p_feature_types,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_int64_t,
  _swigc__p_p_double,
  _swigc__p_p_p_double,
  _swigc__p_segment_t,
  _swigc__p_segmentation_t,
  _swigc__p_size_t,
  _swigc__p_std__complexT_double_t,
  _swigc__p_std__string,
  _swigc__p_std__valarrayT_double_t,
  _swigc__p_std__vectorT_Segment_t,
  _swigc__p_std__vectorT_double_t,
  _swigc__p_std__vectorT_int_t,
  _swigc__p_std__vectorT_std__pairT_long_TCSVector_t_t,
  _swigc__p_std__vectorT_std__vectorT_double_t_t,
  _swigc__p_std__vectorT_std__vectorT_int_t_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

